{
  "Source": "dunwu",
  "Title": "Redis 集群",
  "Link": "https://dunwu.github.io/blog/pages/77dfbe/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Redis-集群\"\u003e\u003ca href=\"#Redis-集群\" class=\"headerlink\" title=\"Redis 集群\"\u003e\u003c/a\u003eRedis 集群\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/topics/cluster-tutorial\"\u003eRedis 集群（Redis Cluster）\u003c/a\u003e 是 Redis 官方提供的“分布式数据库”方案\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eRedis Cluster 既然被设计分布式系统，自然需要具备分布式系统的基本特性：伸缩性、高可用、一致性。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e伸缩性\u003c/strong\u003e - Redis Cluster 通过划分虚拟 hash 槽来进行“分区”，以实现集群的伸缩性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e高可用\u003c/strong\u003e - Redis Cluster 采用主从架构，支持“复制”和“自动故障转移”，以保证 Redis Cluster 的高可用。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e一致性\u003c/strong\u003e - 根据 CAP 理论，Consistency、Availability、Partition tolerance 三者不可兼得。而 Redis Cluster 的选择是 AP，即不保证“强一致性”，尽力达到“最终一致性”。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRedis Cluster 应用了 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf\"\u003eRaft 协议\u003c/a\u003e 协议和 Gossip 协议。\u003c/p\u003e\n\u003cp\u003e关键词：\u003ccode\u003e高可用\u003c/code\u003e、\u003ccode\u003e监控\u003c/code\u003e、\u003ccode\u003e选主\u003c/code\u003e、\u003ccode\u003e故障转移\u003c/code\u003e、\u003ccode\u003e分区\u003c/code\u003e、\u003ccode\u003eRaft\u003c/code\u003e、\u003ccode\u003eGossip\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"Redis-Cluster-分区\"\u003e\u003ca href=\"#Redis-Cluster-分区\" class=\"headerlink\" title=\"Redis Cluster 分区\"\u003e\u003c/a\u003eRedis Cluster 分区\u003c/h2\u003e\u003ch3 id=\"集群节点\"\u003e\u003ca href=\"#集群节点\" class=\"headerlink\" title=\"集群节点\"\u003e\u003c/a\u003e集群节点\u003c/h3\u003e\u003cp\u003eRedis Cluster 由多个节点组成，节点刚启动时，彼此是相互独立的。\u003cstrong\u003e节点通过握手（ \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/cluster-meet/\"\u003e\u003ccode\u003eCLUSTER MEET\u003c/code\u003e\u003c/a\u003e 命令）来将其他节点添加到自己所处的集群中\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e向一个节点发送 \u003ccode\u003eCLUSTER MEET\u003c/code\u003e 命令，可以让当前节点与指定 IP、PORT 的节点进行三次握手，握手成功时，当前节点会将指定节点加入所在集群。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e集群节点保存键值对以及过期时间的方式与单机 Redis 服务完全相同\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eRedis Cluster 节点分为主节点（master）和从节点（slave）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e主节点用于处理槽。\u003c/li\u003e\n\u003cli\u003e从节点用于复制主节点， 并在主节点下线时， 代替主节点继续处理命令请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"分配-Hash-槽\"\u003e\u003ca href=\"#分配-Hash-槽\" class=\"headerlink\" title=\"分配 Hash 槽\"\u003e\u003c/a\u003e分配 Hash 槽\u003c/h3\u003e\u003cp\u003e分布式存储需要解决的首要问题是把整个数据集按照\u003cstrong\u003e“分区规则”\u003c/strong\u003e 到\u003cstrong\u003e多个节点\u003c/strong\u003e，即每个节点负责整体数据的一个 \u003cstrong\u003e子集\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRedis Cluster 将整个数据库规划为 “16384” 个虚拟的哈希槽\u003c/strong\u003e，数据库中的每个键都属于其中一个槽。\u003cstrong\u003e每个节点都会记录哪些槽指派给了自己， 而哪些槽又被指派给了其他节点\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e如果数据库中有任何一个槽没有得到分配，那么集群处于“下线”状态\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e通过向节点发送 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://redis.io/commands/cluster-addslots\"\u003e\u003ccode\u003eCLUSTER ADDSLOTS\u003c/code\u003e\u003c/a\u003e 命令，可以将一个或多个槽指派给节点负责。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e\u0026gt; \u003c/span\u003e\u003cspan class=\"language-bash\"\u003eCLUSTER ADDSLOTS 1 2 3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOK\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e集群中的每个节点负责一部分哈希槽，比如集群中有３个节点，则：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e节点Ａ存储的哈希槽范围是：0 – 5500\u003c/li\u003e\n\u003cli\u003e节点Ｂ存储的哈希槽范围是：5501 – 11000\u003c/li\u003e\n\u003cli\u003e节点Ｃ存储的哈希槽范围是：11001 – 16384\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"路由\"\u003e\u003ca href=\"#路由\" class=\"headerlink\" title=\"路由\"\u003e\u003c/a\u003e路由\u003c/h3\u003e\u003cp\u003e当客户端向节点发送与数据库键有关的命令时，接受命令的节点会\u003cstrong\u003e计算出命令要处理的数据库属于哪个槽\u003c/strong\u003e，并\u003cstrong\u003e检查这个槽是否指派给了自己\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如果键所在的槽正好指派给了当前节点，那么当前节点直接执行命令。\u003c/li\u003e\n\u003cli\u003e如果键所在的槽没有指派给当前节点，那么节点会向客户端返回一个 \u003ccode\u003eMOVED\u003c/code\u003e 错误，指引客户端重定向至正确的节点。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"计算键属于哪个槽\"\u003e\u003ca href=\"#计算键属于哪个槽\" class=\"headerlink\" title=\"计算键属于哪个槽\"\u003e\u003c/a\u003e计算键属于哪个槽\u003c/h4\u003e\u003cp\u003e决定一个 key 应该分配到那个槽的算法是：\u003cstrong\u003e计算该 key 的 CRC16 结果再模 16834\u003c/strong\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight ini\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eHASH_SLOT\u003c/span\u003e = CRC16(KEY) mod \u003cspan class=\"number\"\u003e16384\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当节点计算出 key 所属的槽为 i 之后，节点会根据以下条件判断槽是否由自己负责：\u003c/p\u003e\n\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclusterState.slots[i] \u003cspan class=\"operator\"\u003e=\u003c/span\u003e\u003cspan class=\"operator\"\u003e=\u003c/span\u003e clusterState.myself\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"MOVED-错误\"\u003e\u003ca href=\"#MOVED-错误\" class=\"headerlink\" title=\"MOVED 错误\"\u003e\u003c/a\u003eMOVED 错误\u003c/h4\u003e\u003cp\u003e节点在接到一个命令请求时，会先检查这个命令请求要处理的键所在的槽是否由自己负责， 如果不是的话， 节点将向客户端返回一个 \u003ccode\u003eMOVED\u003c/code\u003e 错误， \u003ccode\u003eMOVED\u003c/code\u003e 错误携带的信息可以指引客户端转向至正在负责相关槽的节点。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMOVED\u003c/code\u003e 错误的格式为：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eMOVED \u0026lt;slot\u0026gt; \u0026lt;ip\u0026gt;:\u0026lt;port\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e提示：\u003ccode\u003eMOVED\u003c/code\u003e 命令的作用有点类似 HTTP 协议中的重定向。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"重新分区\"\u003e\u003ca href=\"#重新分区\" class=\"headerlink\" title=\"重新分区\"\u003e\u003c/a\u003e重新分区\u003c/h3\u003e\u003cp\u003e对 Redis Cluster 的重新分片工作是由客户端（redis-trib）执行的， \u003cstrong\u003e重新分片的关键是将属于某个槽的所有键值对从一个节点转移至另一个节点\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e重新分区操作可以\u003cstrong\u003e“在线”\u003c/strong\u003e进行，在重新分区的过程中，集群不需要下线，并且源节点和目标节点都可以继续处理命令请求。\u003c/p\u003e\n\u003cp\u003e重新分区的实现原理如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/database/redis/redis-cluster-trib.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"ASK-错误\"\u003e\u003ca href=\"#ASK-错误\" class=\"headerlink\" title=\"ASK 错误\"\u003e\u003c/a\u003eASK 错误\u003c/h3\u003e\u003cp\u003e如果节点 A 正在迁移槽 \u003ccode\u003ei\u003c/code\u003e 至节点 B ， 那么当节点 A 没能在自己的数据库中找到命令指定的数据库键时， 节点 A 会向客户端返回一个 \u003ccode\u003eASK\u003c/code\u003e 错误， 指引客户端到节点 B 继续查找指定的数据库键。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eASK\u003c/code\u003e 错误与 \u003ccode\u003eMOVED\u003c/code\u003e 的区别在于：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMOVED\u003c/code\u003e 错误表示槽的负责权已经从一个节点转移到了另一个节点；\u003c/li\u003e\n\u003cli\u003e而 \u003ccode\u003eASK\u003c/code\u003e 错误只是两个节点在迁移槽的过程中使用的一种临时措施。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e判断 ASK 错误的过程如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/database/redis/redis-ask.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"Redis-Cluster-复制\"\u003e\u003ca href=\"#Redis-Cluster-复制\" class=\"headerlink\" title=\"Redis Cluster 复制\"\u003e\u003c/a\u003eRedis Cluster 复制\u003c/h2\u003e\u003cp\u003eRedis Cluster 中的节点分为主节点和从节点，其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。\u003c/p\u003e\n\u003cp\u003e向一个节点发送命令 \u003ccode\u003eCLUSTER REPLICATE \u0026lt;node_id\u0026gt;\u003c/code\u003e 可以让接收命令的节点成为 node_id 所指定节点的从节点，并开始对主节点进行复制。\u003c/p\u003e\n\u003cp\u003eRedis Cluster 节点间的复制是“异步”的。\u003c/p\u003e\n\u003ch2 id=\"Redis-Cluster-故障转移\"\u003e\u003ca href=\"#Redis-Cluster-故障转移\" class=\"headerlink\" title=\"Redis Cluster 故障转移\"\u003e\u003c/a\u003eRedis Cluster 故障转移\u003c/h2\u003e\u003ch3 id=\"故障检测\"\u003e\u003ca href=\"#故障检测\" class=\"headerlink\" title=\"故障检测\"\u003e\u003c/a\u003e故障检测\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e集群中每个节点都会定期向集群中的其他节点发送 \u003ccode\u003ePING\u003c/code\u003e 消息，以此来检测对方是否在线\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e节点的状态信息可以分为：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在线状态；\u003c/li\u003e\n\u003cli\u003e疑似下线状态（\u003ccode\u003ePFAIL\u003c/code\u003e） - 即在规定的时间内，没有应答 \u003ccode\u003ePING\u003c/code\u003e 消息\u003c/li\u003e\n\u003cli\u003e已下线状态（\u003ccode\u003eFAIL\u003c/code\u003e） - 半数以上负责处理槽的主节点都将某个主节点视为“疑似下线”，则这个主节点将被标记为“已下线”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"故障转移\"\u003e\u003ca href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"\u003e\u003c/a\u003e故障转移\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e下线主节点的所有从节点中，会有一个从节点被选中。\u003c/li\u003e\n\u003cli\u003e被选中的从节点会执行 \u003ccode\u003eSLAVEOF no one\u003c/code\u003e 命令，成为新的主节点。\u003c/li\u003e\n\u003cli\u003e新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。\u003c/li\u003e\n\u003cli\u003e新的主节点向集群广播一条 \u003ccode\u003ePONG\u003c/code\u003e 消息，告知其他节点这个从节点已变成主节点。\u003c/li\u003e\n\u003cli\u003e新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"选主\"\u003e\u003ca href=\"#选主\" class=\"headerlink\" title=\"选主\"\u003e\u003c/a\u003e选主\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003eRedis Sentinel 和 Redis Cluster 的选主流程非常相似，二者都基于\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf\"\u003eRaft 协议\u003c/a\u003e 实现。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e从节点发现自己的主节点状态为 \u003ccode\u003eFAIL\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e从节点将自己记录的纪元（\u003ccode\u003eepoch\u003c/code\u003e）加 1，并广播消息，要求所有收到消息且有投票权的主节点都为自己投票。——这里的纪元（\u003ccode\u003eepoch\u003c/code\u003e），相当于 Raft 协议中的选期（\u003ccode\u003eterm\u003c/code\u003e）。因个人习惯，后面统一将纪元描述为选期。\u003c/li\u003e\n\u003cli\u003e如果某主节点具有投票权（它正在负责处理槽），并且这个主节点尚未投票，那么主节点就返回一条确认消息，表示支持该从节点成为新的主节点。\u003c/li\u003e\n\u003cli\u003e每个参与选举的从节点都会根据收到的确认消息，统计自己所得的选票。\u003c/li\u003e\n\u003cli\u003e假设集群中存在 N 个具有投票权的主节点，那么\u003cstrong\u003e当某从节点得到“半数以上”（\u003ccode\u003eN / 2 + 1\u003c/code\u003e）的选票，则该从节点当选为新的主节点\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e由于每个选期中，任意具有投票权的主节点“只能投一票”，所以获得“半数以上”选票的从节点只能有一个。\u003c/li\u003e\n\u003cli\u003e如果在一个选期中，没有从节点能获得“半数以上”投票，则本次选期作废，开始进入下一个选期，直到选出新的主节点为止。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"Redis-Cluster-通信\"\u003e\u003ca href=\"#Redis-Cluster-通信\" class=\"headerlink\" title=\"Redis Cluster 通信\"\u003e\u003c/a\u003eRedis Cluster 通信\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e集群中的节点通过发送和接收消息来进行通信\u003c/strong\u003e。Redis Cluster 各实例之间的通信方式采用 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://publicatio.bibl.u-szeged.hu/1529/1/gossip11.pdf\"\u003eGossip 协议\u003c/a\u003e来实现。\u003c/p\u003e\n\u003cp\u003eRedis Cluster 采用 Gossip 协议基于两个主要目标：\u003cstrong\u003e去中心化\u003c/strong\u003e以及\u003cstrong\u003e失败检测\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eRedis Cluster 中，每个节点之间都会同步信息，但是每个节点的信息不保证实时的，即无法保证数据强一致性，但是保证\u003cstrong\u003e“数据最终一致性”\u003c/strong\u003e——当集群中发生节点增减、故障、主从关系变化、槽信息变更等事件时，通过不断的通信，在经过一段时间后，所有的节点都会同步集群全部节点的最新状态。\u003c/p\u003e\n\u003cp\u003eRedis Cluster 节点发送的消息主要有以下五种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMEET\u003c/code\u003e - 请求接收方加入发送方所在的集群。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePING\u003c/code\u003e - 集群中每个节点每隔一段时间（默认为一秒）从已知节点列表中随机选出五个节点，然后对这五个节点中最久没联系的节点发送 \u003ccode\u003ePING\u003c/code\u003e 消息，以此检测被选中的节点是否在线。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePONG\u003c/code\u003e - 当接收方收到发送方发来的 \u003ccode\u003eMEET\u003c/code\u003e 消息或 \u003ccode\u003ePING\u003c/code\u003e 消息时，会返回一条 \u003ccode\u003ePONG\u003c/code\u003e 消息作为应答。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFAIL\u003c/code\u003e - 当一个主节点 A 判断另一个主节点 B 已经进入 \u003ccode\u003eFAIL\u003c/code\u003e 状态时，节点 A 会向集群广播一条关于节点 B 的 \u003ccode\u003eFAIL\u003c/code\u003e 消息，所有收到这条消息的节点都会立即将节点 B 标记为已下线。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePUBLISH\u003c/code\u003e - 当节点收到一个 \u003ccode\u003ePUBLISH\u003c/code\u003e 命令时，节点会执行这个命令，并向集群广播一条 \u003ccode\u003ePUBLISH\u003c/code\u003e 消息，所有接受到这条消息的节点都会执行相同的 \u003ccode\u003ePUBLISH\u003c/code\u003e 命令。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Redis-Cluster-应用\"\u003e\u003ca href=\"#Redis-Cluster-应用\" class=\"headerlink\" title=\"Redis Cluster 应用\"\u003e\u003c/a\u003eRedis Cluster 应用\u003c/h2\u003e\u003ch3 id=\"集群功能限制\"\u003e\u003ca href=\"#集群功能限制\" class=\"headerlink\" title=\"集群功能限制\"\u003e\u003c/a\u003e集群功能限制\u003c/h3\u003e\u003cp\u003eRedis Cluster 相对 \u003cstrong\u003e单机\u003c/strong\u003e，存在一些功能限制，需要 \u003cstrong\u003e开发人员\u003c/strong\u003e 提前了解，在使用时做好规避。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ekey\u003c/code\u003e \u003cstrong\u003e批量操作\u003c/strong\u003e 支持有限：类似 \u003ccode\u003emset\u003c/code\u003e、\u003ccode\u003emget\u003c/code\u003e 操作，目前只支持对具有相同 \u003ccode\u003eslot\u003c/code\u003e 值的 \u003ccode\u003ekey\u003c/code\u003e 执行 \u003cstrong\u003e批量操作\u003c/strong\u003e。对于 \u003cstrong\u003e映射为不同\u003c/strong\u003e \u003ccode\u003eslot\u003c/code\u003e 值的 \u003ccode\u003ekey\u003c/code\u003e 由于执行 \u003ccode\u003emget\u003c/code\u003e、\u003ccode\u003emget\u003c/code\u003e 等操作可能存在于多个节点上，因此不被支持。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekey\u003c/code\u003e \u003cstrong\u003e事务操作\u003c/strong\u003e 支持有限：只支持 \u003cstrong\u003e多\u003c/strong\u003e \u003ccode\u003ekey\u003c/code\u003e 在 \u003cstrong\u003e同一节点上\u003c/strong\u003e 的 \u003cstrong\u003e事务操作\u003c/strong\u003e，当多个 \u003ccode\u003ekey\u003c/code\u003e 分布在 \u003cstrong\u003e不同\u003c/strong\u003e 的节点上时 \u003cstrong\u003e无法\u003c/strong\u003e 使用事务功能。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekey\u003c/code\u003e 作为 \u003cstrong\u003e数据分区\u003c/strong\u003e 的最小粒度，不能将一个 \u003cstrong\u003e大的键值\u003c/strong\u003e 对象如 \u003ccode\u003ehash\u003c/code\u003e、\u003ccode\u003elist\u003c/code\u003e 等映射到 \u003cstrong\u003e不同的节点\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e不支持 \u003cstrong\u003e多数据库空间\u003c/strong\u003e：\u003cstrong\u003e单机\u003c/strong\u003e 下的 Redis 可以支持 \u003ccode\u003e16\u003c/code\u003e 个数据库（\u003ccode\u003edb0 ~ db15\u003c/code\u003e），\u003cstrong\u003e集群模式\u003c/strong\u003e 下只能使用 \u003cstrong\u003e一个\u003c/strong\u003e 数据库空间，即 \u003ccode\u003edb0\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e复制结构\u003c/strong\u003e 只支持一层：\u003cstrong\u003e从节点\u003c/strong\u003e 只能复制 \u003cstrong\u003e主节点\u003c/strong\u003e，不支持 \u003cstrong\u003e嵌套树状复制\u003c/strong\u003e 结构。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"集群规模限制\"\u003e\u003ca href=\"#集群规模限制\" class=\"headerlink\" title=\"集群规模限制\"\u003e\u003c/a\u003e集群规模限制\u003c/h3\u003e\u003cp\u003eRedis Cluster 的优点是易于使用。分区、主从复制、弹性扩容这些功能都可以做到自动化，通过简单的部署就可以获得一个大容量、高可靠、高可用的 Redis 集群，并且对于应用来说，近乎于是透明的。\u003c/p\u003e\n\u003cp\u003e所以，\u003cstrong\u003eRedis Cluster 非常适合构建中小规模 Redis 集群\u003c/strong\u003e，这里的中小规模指的是，大概几个到几十个节点这样规模的 Redis 集群。\u003c/p\u003e\n\u003cp\u003e但是 Redis Cluster 不太适合构建超大规模集群，主要原因是，它采用了去中心化的设计。\u003c/p\u003e\n\u003cp\u003eRedis 的每个节点上，都保存了所有槽和节点的映射关系表，客户端可以访问任意一个节点，再通过重定向命令，找到数据所在的那个节点。那么，这个映射关系表是如何更新的呢？Redis Cluster 采用了一种去中心化的流言 (Gossip) 协议来传播集群配置的变化。\u003c/p\u003e\n\u003cp\u003eGossip 协议的优点是去中心化；缺点是传播速度慢，并且是集群规模越大，传播的越慢。\u003c/p\u003e\n\u003ch3 id=\"集群配置\"\u003e\u003ca href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"\u003e\u003c/a\u003e集群配置\u003c/h3\u003e\u003cp\u003e我们后面会部署一个 Redis Cluster 作为例子，在那之前，先介绍一下集群在 redis.conf 中的参数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ecluster-enabled\u003c/strong\u003e \u003ccode\u003e\u0026lt;yes/no\u0026gt;\u003c/code\u003e - 如果配置”yes”则开启集群功能，此 redis 实例作为集群的一个节点，否则，它是一个普通的单一的 redis 实例。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecluster-config-file\u003c/strong\u003e \u003ccode\u003e\u0026lt;filename\u0026gt;\u003c/code\u003e - 注意：虽然此配置的名字叫“集群配置文件”，但是此配置文件不能人工编辑，它是集群节点自动维护的文件，主要用于记录集群中有哪些节点、他们的状态以及一些持久化参数等，方便在重启时恢复这些状态。通常是在收到请求之后这个文件就会被更新。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecluster-node-timeout\u003c/strong\u003e \u003ccode\u003e\u0026lt;milliseconds\u0026gt;\u003c/code\u003e - 这是集群中的节点能够失联的最大时间，超过这个时间，该节点就会被认为故障。如果主节点超过这个时间还是不可达，则用它的从节点将启动故障迁移，升级成主节点。注意，任何一个节点在这个时间之内如果还是没有连上大部分的主节点，则此节点将停止接收任何请求。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecluster-slave-validity-factor\u003c/strong\u003e \u003ccode\u003e\u0026lt;factor\u0026gt;\u003c/code\u003e - 如果设置成０，则无论从节点与主节点失联多久，从节点都会尝试升级成主节点。如果设置成正数，则 cluster-node-timeout 乘以 cluster-slave-validity-factor 得到的时间，是从节点与主节点失联后，此从节点数据有效的最长时间，超过这个时间，从节点不会启动故障迁移。假设 cluster-node-timeout=5，cluster-slave-validity-factor=10，则如果从节点跟主节点失联超过 50 秒，此从节点不能成为主节点。注意，如果此参数配置为非 0，将可能出现由于某主节点失联却没有从节点能顶上的情况，从而导致集群不能正常工作，在这种情况下，只有等到原来的主节点重新回归到集群，集群才恢复运作。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecluster-migration-barrier\u003c/strong\u003e \u003ccode\u003e\u0026lt;count\u0026gt;\u003c/code\u003e - 主节点需要的最小从节点数，只有达到这个数，主节点失败时，它从节点才会进行迁移。更详细介绍可以看本教程后面关于副本迁移到部分。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecluster-require-full-coverage\u003c/strong\u003e \u003ccode\u003e\u0026lt;yes/no\u0026gt;\u003c/code\u003e - 在部分 key 所在的节点不可用时，如果此参数设置为”yes”(默认值), 则整个集群停止接受操作；如果此参数设置为”no”，则集群依然为可达节点上的 key 提供读操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"其他-Redis-集群方案\"\u003e\u003ca href=\"#其他-Redis-集群方案\" class=\"headerlink\" title=\"其他 Redis 集群方案\"\u003e\u003c/a\u003e其他 Redis 集群方案\u003c/h2\u003e\u003cp\u003eRedis Cluster 不太适合用于大规模集群，所以，如果要构建超大 Redis 集群，需要选择替代方案。一般有三种方案类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e客户端分区方案\u003c/li\u003e\n\u003cli\u003e代理分区方案\u003c/li\u003e\n\u003cli\u003e查询路由方案\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"客户端分区方案\"\u003e\u003ca href=\"#客户端分区方案\" class=\"headerlink\" title=\"客户端分区方案\"\u003e\u003c/a\u003e客户端分区方案\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e客户端\u003c/strong\u003e 就已经决定数据会被 \u003cstrong\u003e存储\u003c/strong\u003e 到哪个 Redis 节点或者从哪个 Redis 节点 \u003cstrong\u003e读取数据\u003c/strong\u003e。其主要思想是采用 \u003cstrong\u003e哈希算法\u003c/strong\u003e 将 Redis 数据的 \u003ccode\u003ekey\u003c/code\u003e 进行散列，通过 \u003ccode\u003ehash\u003c/code\u003e 函数，特定的 \u003ccode\u003ekey\u003c/code\u003e会 \u003cstrong\u003e映射\u003c/strong\u003e 到特定的 Redis 节点上。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e客户端分区方案\u003c/strong\u003e 的代表为 Redis Sharding，Redis Sharding 是 Redis Cluster 出来之前，业界普遍使用的 Redis \u003cstrong\u003e多实例集群\u003c/strong\u003e 方法。Java 的 Redis 客户端驱动库 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/redis/jedis\"\u003e\u003cstrong\u003eJedis\u003c/strong\u003e\u003c/a\u003e，支持 Redis Sharding 功能，即 ShardedJedis 以及 \u003cstrong\u003e结合缓存池\u003c/strong\u003e 的 ShardedJedisPool。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e：不使用 \u003cstrong\u003e第三方中间件\u003c/strong\u003e，\u003cstrong\u003e分区逻辑\u003c/strong\u003e 可控，\u003cstrong\u003e配置\u003c/strong\u003e 简单，节点之间无关联，容易 \u003cstrong\u003e线性扩展\u003c/strong\u003e，灵活性强。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e：\u003cstrong\u003e客户端\u003c/strong\u003e 无法 \u003cstrong\u003e动态增删\u003c/strong\u003e 服务节点，客户端需要自行维护 \u003cstrong\u003e分发逻辑\u003c/strong\u003e，客户端之间 \u003cstrong\u003e无连接共享\u003c/strong\u003e，会造成 \u003cstrong\u003e连接浪费\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"代理分区方案\"\u003e\u003ca href=\"#代理分区方案\" class=\"headerlink\" title=\"代理分区方案\"\u003e\u003c/a\u003e代理分区方案\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e客户端\u003c/strong\u003e 发送请求到一个 \u003cstrong\u003e代理组件\u003c/strong\u003e，\u003cstrong\u003e代理\u003c/strong\u003e 解析 \u003cstrong\u003e客户端\u003c/strong\u003e 的数据，并将请求转发至正确的节点，最后将结果回复给客户端。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e：简化 \u003cstrong\u003e客户端\u003c/strong\u003e 的分布式逻辑，\u003cstrong\u003e客户端\u003c/strong\u003e 透明接入，切换成本低，代理的 \u003cstrong\u003e转发\u003c/strong\u003e 和 \u003cstrong\u003e存储\u003c/strong\u003e 分离。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e：多了一层 \u003cstrong\u003e代理层\u003c/strong\u003e，加重了 \u003cstrong\u003e架构部署复杂度\u003c/strong\u003e 和 \u003cstrong\u003e性能损耗\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e代理分区\u003c/strong\u003e 主流实现的有方案有 \u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/twitter/twemproxy\"\u003eTwemproxy\u003c/a\u003e\u003c/strong\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/CodisLabs/codis\"\u003e\u003cstrong\u003eCodis\u003c/strong\u003e\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id=\"Twemproxy\"\u003e\u003ca href=\"#Twemproxy\" class=\"headerlink\" title=\"Twemproxy\"\u003e\u003c/a\u003eTwemproxy\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/twitter/twemproxy\"\u003eTwemproxy\u003c/a\u003e\u003c/strong\u003e 也叫 \u003ccode\u003enutcraker\u003c/code\u003e，是 Twitter 开源的一个 Redis 和 Memcache 的 \u003cstrong\u003e中间代理服务器\u003c/strong\u003e 程序。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/twitter/twemproxy\"\u003eTwemproxy\u003c/a\u003e\u003c/strong\u003e 作为 \u003cstrong\u003e代理\u003c/strong\u003e，可接受来自多个程序的访问，按照 \u003cstrong\u003e路由规则\u003c/strong\u003e，转发给后台的各个 Redis 服务器，再原路返回。**\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/twitter/twemproxy\"\u003eTwemproxy\u003c/a\u003e** 存在 \u003cstrong\u003e单点故障\u003c/strong\u003e 问题，需要结合 Lvs 和 Keepalived 做 \u003cstrong\u003e高可用方案\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e：应用范围广，稳定性较高，中间代理层 \u003cstrong\u003e高可用\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e：无法平滑地 \u003cstrong\u003e水平扩容/缩容\u003c/strong\u003e，无 \u003cstrong\u003e可视化管理界面\u003c/strong\u003e，运维不友好，出现故障，不能 \u003cstrong\u003e自动转移\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"Codis\"\u003e\u003ca href=\"#Codis\" class=\"headerlink\" title=\"Codis\"\u003e\u003c/a\u003eCodis\u003c/h4\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/CodisLabs/codis\"\u003e\u003cstrong\u003eCodis\u003c/strong\u003e\u003c/a\u003e 是一个 \u003cstrong\u003e分布式\u003c/strong\u003e Redis 解决方案，对于上层应用来说，连接 Codis-Proxy 和直接连接 \u003cstrong\u003e原生的\u003c/strong\u003e Redis-Server 没有的区别。\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/CodisLabs/codis\"\u003e\u003cstrong\u003eCodis\u003c/strong\u003e\u003c/a\u003e 底层会 \u003cstrong\u003e处理请求的转发\u003c/strong\u003e，不停机的进行 \u003cstrong\u003e数据迁移\u003c/strong\u003e 等工作。\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/CodisLabs/codis\"\u003e\u003cstrong\u003eCodis\u003c/strong\u003e\u003c/a\u003e 采用了无状态的 \u003cstrong\u003e代理层\u003c/strong\u003e，对于 \u003cstrong\u003e客户端\u003c/strong\u003e 来说，一切都是透明的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e：实现了上层 Proxy 和底层 Redis 的 \u003cstrong\u003e高可用\u003c/strong\u003e，\u003cstrong\u003e数据分区\u003c/strong\u003e 和 \u003cstrong\u003e自动平衡\u003c/strong\u003e，提供 \u003cstrong\u003e命令行接口\u003c/strong\u003e 和 RESTful API，提供 \u003cstrong\u003e监控\u003c/strong\u003e 和 \u003cstrong\u003e管理\u003c/strong\u003e 界面，可以动态 \u003cstrong\u003e添加\u003c/strong\u003e 和 \u003cstrong\u003e删除\u003c/strong\u003e Redis 节点。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e：\u003cstrong\u003e部署架构\u003c/strong\u003e 和 \u003cstrong\u003e配置\u003c/strong\u003e 复杂，不支持 \u003cstrong\u003e跨机房\u003c/strong\u003e 和 \u003cstrong\u003e多租户\u003c/strong\u003e，不支持 \u003cstrong\u003e鉴权管理\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"查询路由方案\"\u003e\u003ca href=\"#查询路由方案\" class=\"headerlink\" title=\"查询路由方案\"\u003e\u003c/a\u003e查询路由方案\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e客户端随机地\u003c/strong\u003e 请求任意一个 Redis 实例，然后由 Redis 将请求 \u003cstrong\u003e转发\u003c/strong\u003e 给 \u003cstrong\u003e正确\u003c/strong\u003e 的 Redis 节点。Redis Cluster 实现了一种 \u003cstrong\u003e混合形式\u003c/strong\u003e 的 \u003cstrong\u003e查询路由\u003c/strong\u003e，但并不是 \u003cstrong\u003e直接\u003c/strong\u003e 将请求从一个 Redis 节点 \u003cstrong\u003e转发\u003c/strong\u003e 到另一个 Redis 节点，而是在 \u003cstrong\u003e客户端\u003c/strong\u003e 的帮助下直接 \u003cstrong\u003e重定向\u003c/strong\u003e（ \u003ccode\u003eredirected\u003c/code\u003e）到正确的 Redis 节点。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优点\u003c/strong\u003e：\u003cstrong\u003e去中心化\u003c/strong\u003e，数据按照 \u003cstrong\u003e槽\u003c/strong\u003e 存储分布在多个 Redis 实例上，可以平滑的进行节点 \u003cstrong\u003e扩容/缩容\u003c/strong\u003e，支持 \u003cstrong\u003e高可用\u003c/strong\u003e 和 \u003cstrong\u003e自动故障转移\u003c/strong\u003e，运维成本低。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e缺点\u003c/strong\u003e：重度依赖 Redis-trib 工具，缺乏 \u003cstrong\u003e监控管理\u003c/strong\u003e，需要依赖 Smart Client (\u003cstrong\u003e维护连接\u003c/strong\u003e，\u003cstrong\u003e缓存路由表\u003c/strong\u003e，\u003ccode\u003eMultiOp\u003c/code\u003e 和 \u003ccode\u003ePipeline\u003c/code\u003e 支持)。Failover 节点的 \u003cstrong\u003e检测过慢\u003c/strong\u003e，不如有 \u003cstrong\u003e中心节点\u003c/strong\u003e 的集群及时（如 ZooKeeper）。Gossip 消息采用广播方式，集群规模越大，开销越大。无法根据统计区分 \u003cstrong\u003e冷热数据\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://item.jd.com/11486101.html\"\u003e《Redis 设计与实现》\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5b8fc5536fb9a05d2d01fb11\"\u003e深入剖析 Redis 系列(三) - Redis 集群模式搭建与原理详解\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-24T02:45:38Z",
  "Author": "钝悟 ◾ Dunwu"
}