{
  "Source": "dunwu",
  "Title": "Spring 事件",
  "Link": "https://dunwu.github.io/blog/pages/cca414/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Spring-事件\"\u003e\u003ca href=\"#Spring-事件\" class=\"headerlink\" title=\"Spring 事件\"\u003e\u003c/a\u003eSpring 事件\u003c/h1\u003e\u003ch2 id=\"Java-事件-监听器编程模型\"\u003e\u003ca href=\"#Java-事件-监听器编程模型\" class=\"headerlink\" title=\"Java 事件/监听器编程模型\"\u003e\u003c/a\u003eJava 事件/监听器编程模型\u003c/h2\u003e\u003cp\u003e设计模式 - 观察者模式扩展\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可观者对象（消息发送者） - java.util.Observable\u003c/li\u003e\n\u003cli\u003e观察者 - java.util.Observer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e标准化接口\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e事件对象 - java.util.EventObject\u003c/li\u003e\n\u003cli\u003e事件监听器 - java.util.EventListener\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"面向接口的事件-监听器设计模式\"\u003e\u003ca href=\"#面向接口的事件-监听器设计模式\" class=\"headerlink\" title=\"面向接口的事件/监听器设计模式\"\u003e\u003c/a\u003e面向接口的事件/监听器设计模式\u003c/h2\u003e\u003cp\u003e事件/监听器场景举例\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJava 技术规范\u003c/th\u003e\n\u003cth\u003e事件接口\u003c/th\u003e\n\u003cth\u003e监听器接口\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eJavaBeans\u003c/td\u003e\n\u003ctd\u003ejava.beans.PropertyChangeEvent\u003c/td\u003e\n\u003ctd\u003ejava.beans.PropertyChangeListener\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava AWT\u003c/td\u003e\n\u003ctd\u003ejava.awt.event.MouseEvent\u003c/td\u003e\n\u003ctd\u003ejava.awt.event.MouseListener\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava Swing\u003c/td\u003e\n\u003ctd\u003ejavax.swing.event.MenuEvent\u003c/td\u003e\n\u003ctd\u003ejavax.swing.event.MenuListener\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava Preference\u003c/td\u003e\n\u003ctd\u003ejava.util.prefs.PreferenceChangeEvent\u003c/td\u003e\n\u003ctd\u003ejava.util.prefs.PreferenceChangeListener\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"面向注解的事件-监听器设计模式\"\u003e\u003ca href=\"#面向注解的事件-监听器设计模式\" class=\"headerlink\" title=\"面向注解的事件/监听器设计模式\"\u003e\u003c/a\u003e面向注解的事件/监听器设计模式\u003c/h2\u003e\u003cp\u003e事件/监听器注解场景举例\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJava 技术规范\u003c/th\u003e\n\u003cth\u003e事件注解\u003c/th\u003e\n\u003cth\u003e监听器注解\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eServlet 3.0+\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e@javax.servlet.annotation.WebListener\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJPA 1.0+\u003c/td\u003e\n\u003ctd\u003e@javax.persistence.PostPersist\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJava Common\u003c/td\u003e\n\u003ctd\u003e@PostConstruct\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eEJB 3.0+\u003c/td\u003e\n\u003ctd\u003e@javax.ejb.PrePassivate\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJSF 2.0+\u003c/td\u003e\n\u003ctd\u003e@javax.faces.event.ListenerFor\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"Spring-标准事件-ApplicationEvent\"\u003e\u003ca href=\"#Spring-标准事件-ApplicationEvent\" class=\"headerlink\" title=\"Spring 标准事件 - ApplicationEvent\"\u003e\u003c/a\u003eSpring 标准事件 - ApplicationEvent\u003c/h2\u003e\u003cp\u003eJava 标准事件 \u003ccode\u003ejava.util.EventObject\u003c/code\u003e 扩展\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e扩展特性：事件发生事件戳\u003c/li\u003e\n\u003cli\u003eSpring 应用上下文 ApplicationEvent 扩展 - \u003ccode\u003eApplicationContextEvent\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSpring 应用上下文（ApplicationContext）作为事件源\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e具体实现：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.event.ContextClosedEvent\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.event.ContextRefreshedEvent\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.event.ContextStartedEvent\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eorg.springframework.context.event.ContextStoppedEvent\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"基于接口的-Spring-事件监听器\"\u003e\u003ca href=\"#基于接口的-Spring-事件监听器\" class=\"headerlink\" title=\"基于接口的 Spring 事件监听器\"\u003e\u003c/a\u003e基于接口的 Spring 事件监听器\u003c/h2\u003e\u003cp\u003eJava 标准事件监听器 \u003ccode\u003ejava.util.EventListener\u003c/code\u003e 扩展\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e扩展接口 - \u003ccode\u003eorg.springframework.context.ApplicationListener\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e设计特点：单一类型事件处理\u003c/li\u003e\n\u003cli\u003e处理方法：\u003ccode\u003eonApplicationEvent(ApplicationEvent)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e事件类型：\u003ccode\u003eorg.springframework.context.ApplicationEvent\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"基于注解的-Spring-事件监听器\"\u003e\u003ca href=\"#基于注解的-Spring-事件监听器\" class=\"headerlink\" title=\"基于注解的 Spring 事件监听器\"\u003e\u003c/a\u003e基于注解的 Spring 事件监听器\u003c/h2\u003e\u003cp\u003eSpring 注解 - \u003ccode\u003e@org.springframework.context.event.EventListener\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e特性\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e设计特点\u003c/td\u003e\n\u003ctd\u003e支持多 \u003ccode\u003eApplicationEvent\u003c/code\u003e 类型，无需接口约束\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e注解目标\u003c/td\u003e\n\u003ctd\u003e方法\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e是否支持异步执行\u003c/td\u003e\n\u003ctd\u003e支持\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e是否支持泛型类型事件\u003c/td\u003e\n\u003ctd\u003e支持\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e是指支持顺序控制\u003c/td\u003e\n\u003ctd\u003e支持，配合 \u003ccode\u003e@Order\u003c/code\u003e 注解控制\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"注册-Spring-ApplicationListener\"\u003e\u003ca href=\"#注册-Spring-ApplicationListener\" class=\"headerlink\" title=\"注册 Spring ApplicationListener\"\u003e\u003c/a\u003e注册 Spring ApplicationListener\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e方法一：ApplicationListener 作为 Spring Bean 注册\u003c/li\u003e\n\u003cli\u003e方法二：通过 ConfigurableApplicationContext API 注册\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-事件发布器\"\u003e\u003ca href=\"#Spring-事件发布器\" class=\"headerlink\" title=\"Spring 事件发布器\"\u003e\u003c/a\u003eSpring 事件发布器\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e方法一：通过 ApplicationEventPublisher 发布 Spring 事件\u003cul\u003e\n\u003cli\u003e获取 ApplicationEventPublisher\u003cul\u003e\n\u003cli\u003e依赖注入\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e方法二：通过 ApplicationEventMulticaster 发布 Spring 事件\u003cul\u003e\n\u003cli\u003e获取 ApplicationEventMulticaster\u003cul\u003e\n\u003cli\u003e依赖注入\u003c/li\u003e\n\u003cli\u003e依赖查找\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-层次性上下文事件传播\"\u003e\u003ca href=\"#Spring-层次性上下文事件传播\" class=\"headerlink\" title=\"Spring 层次性上下文事件传播\"\u003e\u003c/a\u003eSpring 层次性上下文事件传播\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e发生说明\u003c/li\u003e\n\u003cli\u003e当 Spring 应用出现多层次 Spring 应用上下文（ApplicationContext）时，如 Spring WebMVC、Spring Boot 或 Spring Cloud 场景下，由子 ApplicationContext 发起 Spring 事件可能会传递到其 Parent ApplicationContext（直到 Root）的过程\u003c/li\u003e\n\u003cli\u003e如何避免\u003c/li\u003e\n\u003cli\u003e定位 Spring 事件源（ApplicationContext）进行过滤处理\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-内建事件\"\u003e\u003ca href=\"#Spring-内建事件\" class=\"headerlink\" title=\"Spring 内建事件\"\u003e\u003c/a\u003eSpring 内建事件\u003c/h2\u003e\u003cp\u003eApplicationContextEvent 派生事件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eContextRefreshedEvent ：Spring 应用上下文就绪事件\u003c/li\u003e\n\u003cli\u003eContextStartedEvent ：Spring 应用上下文启动事件\u003c/li\u003e\n\u003cli\u003eContextStoppedEvent ：Spring 应用上下文停止事件\u003c/li\u003e\n\u003cli\u003eContextClosedEvent ：Spring 应用上下文关闭事件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-4-2-Payload-事件\"\u003e\u003ca href=\"#Spring-4-2-Payload-事件\" class=\"headerlink\" title=\"Spring 4.2 Payload 事件\"\u003e\u003c/a\u003eSpring 4.2 Payload 事件\u003c/h2\u003e\u003cp\u003eSpring Payload 事件 - org.springframework.context.PayloadApplicationEvent\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用场景：简化 Spring 事件发送，关注事件源主体\u003c/li\u003e\n\u003cli\u003e发送方法：ApplicationEventPublisher#publishEvent(java.lang.Object)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"自定义-Spring-事件\"\u003e\u003ca href=\"#自定义-Spring-事件\" class=\"headerlink\" title=\"自定义 Spring 事件\"\u003e\u003c/a\u003e自定义 Spring 事件\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e扩展 org.springframework.context.ApplicationEvent\u003c/li\u003e\n\u003cli\u003e实现 org.springframework.context.ApplicationListener\u003c/li\u003e\n\u003cli\u003e注册 org.springframework.context.ApplicationListener\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖注入-ApplicationEventPublisher\"\u003e\u003ca href=\"#依赖注入-ApplicationEventPublisher\" class=\"headerlink\" title=\"依赖注入 ApplicationEventPublisher\"\u003e\u003c/a\u003e依赖注入 ApplicationEventPublisher\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e通过 ApplicationEventPublisherAware 回调接口\u003c/li\u003e\n\u003cli\u003e通过 @Autowired ApplicationEventPublisher\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依赖查找-ApplicationEventMulticaster\"\u003e\u003ca href=\"#依赖查找-ApplicationEventMulticaster\" class=\"headerlink\" title=\"依赖查找 ApplicationEventMulticaster\"\u003e\u003c/a\u003e依赖查找 ApplicationEventMulticaster\u003c/h2\u003e\u003cp\u003e查找条件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBean 名称：”applicationEventMulticaster”\u003c/li\u003e\n\u003cli\u003eBean 类型：org.springframework.context.event.ApplicationEventMulticaster\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ApplicationEventPublisher-底层实现\"\u003e\u003ca href=\"#ApplicationEventPublisher-底层实现\" class=\"headerlink\" title=\"ApplicationEventPublisher 底层实现\"\u003e\u003c/a\u003eApplicationEventPublisher 底层实现\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e接口：org.springframework.context.event.ApplicationEventMulticaster\u003c/li\u003e\n\u003cli\u003e抽象类：org.springframework.context.event.AbstractApplicationEventMulticaster\u003c/li\u003e\n\u003cli\u003e实现类：org.springframework.context.event.SimpleApplicationEventMulticaster\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"同步和异步-Spring-事件广播\"\u003e\u003ca href=\"#同步和异步-Spring-事件广播\" class=\"headerlink\" title=\"同步和异步 Spring 事件广播\"\u003e\u003c/a\u003e同步和异步 Spring 事件广播\u003c/h2\u003e\u003cp\u003e基于实现类 - \u003ccode\u003eorg.springframework.context.event.SimpleApplicationEventMulticaster\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e模式切换：\u003ccode\u003esetTaskExecutor(java.util.concurrent.Executor)\u003c/code\u003e 方法\u003cul\u003e\n\u003cli\u003e默认模式：同步\u003c/li\u003e\n\u003cli\u003e异步模式：如 \u003ccode\u003ejava.util.concurrent.ThreadPoolExecutor\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e设计缺陷：非基于接口契约编程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e基于注解 - \u003ccode\u003e@org.springframework.context.event.EventListener\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e模式切换\u003cul\u003e\n\u003cli\u003e默认模式：同步\u003c/li\u003e\n\u003cli\u003e异步模式：标注 \u003ccode\u003e@org.springframework.scheduling.annotation.Async\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e实现限制：无法直接实现同步/异步动态切换\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-4-1-事件异常处理\"\u003e\u003ca href=\"#Spring-4-1-事件异常处理\" class=\"headerlink\" title=\"Spring 4.1 事件异常处理\"\u003e\u003c/a\u003eSpring 4.1 事件异常处理\u003c/h2\u003e\u003cp\u003eSpring 3.0 错误处理接口 - org.springframework.util.ErrorHandler\u003c/p\u003e\n\u003cp\u003e使用场景\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring 事件（Events）\u003cul\u003e\n\u003cli\u003eSimpleApplicationEventMulticaster Spring 4.1 开始支持\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring 本地调度（Scheduling）\u003cul\u003e\n\u003cli\u003eorg.springframework.scheduling.concurrent.ConcurrentTaskScheduler\u003c/li\u003e\n\u003cli\u003eorg.springframework.scheduling.concurrent.ThreadPoolTaskScheduler\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"Spring-事件-监听器实现原理\"\u003e\u003ca href=\"#Spring-事件-监听器实现原理\" class=\"headerlink\" title=\"Spring 事件/监听器实现原理\"\u003e\u003c/a\u003eSpring 事件/监听器实现原理\u003c/h2\u003e\u003cp\u003e核心类 - \u003ccode\u003eorg.springframework.context.event.SimpleApplicationEventMulticaster\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e设计模式：观察者模式扩展\u003cul\u003e\n\u003cli\u003e被观察者 - org.springframework.context.ApplicationListener\u003cul\u003e\n\u003cli\u003eAPI 添加\u003c/li\u003e\n\u003cli\u003e依赖查找\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通知对象 - org.springframework.context.ApplicationEvent\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e执行模式：同步/异步\u003c/li\u003e\n\u003cli\u003e异常处理：org.springframework.util.ErrorHandler\u003c/li\u003e\n\u003cli\u003e泛型处理：org.springframework.core.ResolvableType\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eSpring Boot 事件\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件类型\u003c/th\u003e\n\u003cth\u003e发生时机\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eApplicationStartingEvent\u003c/td\u003e\n\u003ctd\u003e当 Spring Boot 应用已启动时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eApplicationStartedEvent\u003c/td\u003e\n\u003ctd\u003e当 Spring Boot 应用已启动时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eApplicationEnvironmentPreparedEvent\u003c/td\u003e\n\u003ctd\u003e当 Spring Boot Environment 实例已准备时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eApplicationPreparedEvent\u003c/td\u003e\n\u003ctd\u003e当 Spring Boot 应用预备时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eApplicationReadyEvent\u003c/td\u003e\n\u003ctd\u003e当 Spring Boot 应用完全可用时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eApplicationFailedEvent\u003c/td\u003e\n\u003ctd\u003e当 Spring Boot 应用启动失败时\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003eSpring Cloud 事件\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e事件类型\u003c/th\u003e\n\u003cth\u003e发生时机\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eEnvironmentChangeEvent\u003c/td\u003e\n\u003ctd\u003e当 Environment 示例配置属性发生变化时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eHeartbeatEvent\u003c/td\u003e\n\u003ctd\u003e当 DiscoveryClient 客户端发送心跳时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInstancePreRegisteredEvent\u003c/td\u003e\n\u003ctd\u003e当服务实例注册前\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInstanceRegisteredEvent\u003c/td\u003e\n\u003ctd\u003e当服务实例注册后\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRefreshEvent\u003c/td\u003e\n\u003ctd\u003e当 RefreshEndpoint 被调用时\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRefreshScopeRefreshedEvent\u003c/td\u003e\n\u003ctd\u003e当 Refresh Scope Bean 刷新后\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003eSpring 事件核心接口/组件\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring 事件 - org.springframework.context.ApplicationEvent\u003c/li\u003e\n\u003cli\u003eSpring 事件监听器 - org.springframework.context.ApplicationListener\u003c/li\u003e\n\u003cli\u003eSpring 事件发布器 - org.springframework.context.ApplicationEventPublisher\u003c/li\u003e\n\u003cli\u003eSpring 事件广播器 - org.springframework.context.event.ApplicationEventMulticaster\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSpring 同步和异步事件处理的使用场景\u003c/strong\u003e？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSpring 同步事件 - 绝大多数 Spring 使用场景，如 ContextRefreshedEvent\u003c/li\u003e\n\u003cli\u003eSpring 异步事件 - 主要 @EventListener 与 @Async 配合，实现异步处理，不阻塞主线程，比如长时间的数据计算任务等。不要轻易调整 SimpleApplicationEventMulticaster 中关联的 taskExecutor 对象，除非使用者非常了解 Spring 事件机制，否则容易出现异常行为。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans\"\u003eSpring 官方文档之 Core Technologies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/course/intro/265\"\u003e《小马哥讲 Spring 核心编程思想》\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-12-22T12:31:02Z",
  "Author": "钝悟 ◾ Dunwu"
}