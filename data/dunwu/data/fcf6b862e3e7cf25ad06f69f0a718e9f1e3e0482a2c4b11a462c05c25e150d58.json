{
  "Source": "dunwu",
  "Title": "读写分离基本原理",
  "Link": "https://dunwu.github.io/blog/pages/3faf18/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"读写分离基本原理\"\u003e\u003ca href=\"#读写分离基本原理\" class=\"headerlink\" title=\"读写分离基本原理\"\u003e\u003c/a\u003e读写分离基本原理\u003c/h1\u003e\u003cp\u003e\u003cstrong\u003e读写分离的基本原理是：主服务器用来处理写操作以及实时性要求比较高的读操作，而从服务器用来处理读操作\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"1-为何要读写分离\"\u003e\u003ca href=\"#1-为何要读写分离\" class=\"headerlink\" title=\"1. 为何要读写分离\"\u003e\u003c/a\u003e1. 为何要读写分离\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e有效减少锁竞争\u003c/strong\u003e - 主服务器只负责写，从服务器只负责读，能够有效的避免由数据更新导致的行锁竞争，使得整个系统的查询性能得到极大的改善。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提高查询吞吐量\u003c/strong\u003e - 通过一主多从的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e提升数据库可用性\u003c/strong\u003e - 使用多主多从的方式，不但能够提升系统的吞吐量，还能够提升数据库的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-读写分离的原理\"\u003e\u003ca href=\"#2-读写分离的原理\" class=\"headerlink\" title=\"2. 读写分离的原理\"\u003e\u003c/a\u003e2. 读写分离的原理\u003c/h2\u003e\u003cp\u003e读写分离的实现是根据 SQL 语义分析，将读操作和写操作分别路由至主库与从库。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://shardingsphere.apache.org/document/current/img/read-write-split/read-write-split.png\" alt=\"读写分离\"/\u003e\u003c/p\u003e\n\u003cp\u003e读写分离的基本实现是：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/database/mysql/master-slave-proxy.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据库服务器搭建主从集群，一主一从、一主多从都可以。\u003c/li\u003e\n\u003cli\u003e数据库主机负责读写操作，从机只负责读操作。\u003c/li\u003e\n\u003cli\u003e数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了全量数据。\u003c/li\u003e\n\u003cli\u003e业务服务器将写操作发给数据库主机，将读操作发给数据库从机。\u003c/li\u003e\n\u003cli\u003e主机会记录请求的二进制日志，然后推送给从库，从库解析并执行日志中的请求，完成主从复制。这意味着：复制过程存在时延，这段时间内，主从数据可能不一致。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-读写分离的问题\"\u003e\u003ca href=\"#3-读写分离的问题\" class=\"headerlink\" title=\"3. 读写分离的问题\"\u003e\u003c/a\u003e3. 读写分离的问题\u003c/h2\u003e\u003cp\u003e读写分离存在两个问题：\u003cstrong\u003e数据一致性\u003c/strong\u003e和\u003cstrong\u003e分发机制\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"3-1-数据一致性\"\u003e\u003ca href=\"#3-1-数据一致性\" class=\"headerlink\" title=\"3.1. 数据一致性\"\u003e\u003c/a\u003e3.1. 数据一致性\u003c/h3\u003e\u003cp\u003e读写分离产生了主库与从库之间的数据一致性的问题。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://shardingsphere.apache.org/document/current/img/read-write-split/sharding-read-write-split.png\" alt=\"数据分片 + 读写分离\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"3-2-分发机制\"\u003e\u003ca href=\"#3-2-分发机制\" class=\"headerlink\" title=\"3.2. 分发机制\"\u003e\u003c/a\u003e3.2. 分发机制\u003c/h3\u003e\u003cp\u003e数据库读写分离后，一个 SQL 请求具体分发到哪个数据库节点？一般有两种分发方式：客户端分发和中间件代理分发。\u003c/p\u003e\n\u003cp\u003e客户端分发，是基于程序代码，自行控制数据分发到哪个数据库节点。更细一点来说，一般程序中建立多个数据库的连接，根据一定的算法，选择合适的连接去发起 SQL 请求。这种方式也被称为客户端中间件，代表有：jdbc-sharding。\u003c/p\u003e\n\u003cp\u003e中间件代理分发，指的是独立一套系统出来，实现读写操作分离和数据库服务器连接的管理。中间件对业务服务器提供 SQL 兼容的协议，业务服务器无须自己进行读写分离。对于业务服务器来说，访问中间件和访问数据库没有区别，事实上在业务服务器看来，中间件就是一个数据库服务器。代表有：Mycat。\u003c/p\u003e\n\u003ch2 id=\"4-参考资料\"\u003e\u003ca href=\"#4-参考资料\" class=\"headerlink\" title=\"4. 参考资料\"\u003e\u003c/a\u003e4. 参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/100046801\"\u003e后端存储实战课\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://shardingsphere.apache.org/document/current/cn/overview/\"\u003eShardingSphere 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-04-14T03:36:23Z",
  "Author": "钝悟 ◾ Dunwu"
}