{
  "Source": "dunwu",
  "Title": "Shiro 快速入门",
  "Link": "https://dunwu.github.io/blog/pages/3295c4/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"Shiro-快速入门\"\u003e\u003ca href=\"#Shiro-快速入门\" class=\"headerlink\" title=\"Shiro 快速入门\"\u003e\u003c/a\u003eShiro 快速入门\u003c/h1\u003e\u003cblockquote\u003e\n\u003cp\u003eShiro 是一个安全框架，具有认证、授权、加密、会话管理功能。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"一、Shiro-简介\"\u003e\u003ca href=\"#一、Shiro-简介\" class=\"headerlink\" title=\"一、Shiro 简介\"\u003e\u003c/a\u003e一、Shiro 简介\u003c/h2\u003e\u003ch3 id=\"Shiro-特性\"\u003e\u003ca href=\"#Shiro-特性\" class=\"headerlink\" title=\"Shiro 特性\"\u003e\u003c/a\u003eShiro 特性\u003c/h3\u003e\u003cp align=\"center\"\u003e\n  \u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/standalone/security/shiro/shiro-features.png\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e核心功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAuthentication\u003c/strong\u003e - \u003cstrong\u003e认证\u003c/strong\u003e。验证用户是不是拥有相应的身份。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAuthorization\u003c/strong\u003e - \u003cstrong\u003e授权\u003c/strong\u003e。验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSession Manager\u003c/strong\u003e - \u003cstrong\u003e会话管理\u003c/strong\u003e。即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中。会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCryptography\u003c/strong\u003e - \u003cstrong\u003e加密\u003c/strong\u003e。保护数据的安全性，如密码加密存储到数据库，而不是明文存储。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e辅助功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWeb Support\u003c/strong\u003e - \u003cstrong\u003eWeb 支持\u003c/strong\u003e。可以非常容易的集成到 Web 环境；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCaching\u003c/strong\u003e - \u003cstrong\u003e缓存\u003c/strong\u003e。比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConcurrency\u003c/strong\u003e - \u003cstrong\u003e并发\u003c/strong\u003e。Shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTesting\u003c/strong\u003e - \u003cstrong\u003e测试\u003c/strong\u003e。提供测试支持；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRun As\u003c/strong\u003e - \u003cstrong\u003e运行方式\u003c/strong\u003e。允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemember Me\u003c/strong\u003e - \u003cstrong\u003e记住我\u003c/strong\u003e。即一次登录后，下次再访问免登录。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bell: 注意：Shiro 不会去维护用户、维护权限；这些需要我们自己去提供；然后通过相应的接口注入给 Shiro 即可。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"Shiro-架构概述\"\u003e\u003ca href=\"#Shiro-架构概述\" class=\"headerlink\" title=\"Shiro 架构概述\"\u003e\u003c/a\u003eShiro 架构概述\u003c/h3\u003e\u003cp align=\"center\"\u003e\n  \u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/standalone/security/shiro/ShiroBasicArchitecture.png\"/\u003e\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eSubject\u003c/strong\u003e - \u003cstrong\u003e主题\u003c/strong\u003e。它代表当前用户，\u003ccode\u003eSubject\u003c/code\u003e 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它——当前和软件交互的任何事件。\u003ccode\u003eSubject\u003c/code\u003e 是 Shiro 的入口。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePrincipals\u003c/code\u003e 是 \u003ccode\u003eSubject\u003c/code\u003e 的“识别属性”。\u003ccode\u003ePrincipals\u003c/code\u003e 可以是任何可以识别 \u003ccode\u003eSubject\u003c/code\u003e 的东西，例如名字（姓氏），姓氏（姓氏或姓氏），用户名，社会保险号等。当然，\u003ccode\u003ePrincipals\u003c/code\u003e 在应用程序中最好是惟一的。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCredentials\u003c/code\u003e 通常是仅由 \u003ccode\u003eSubject\u003c/code\u003e 知道的秘密值，用作他们实际上“拥有”所主张身份的佐证 凭据的一些常见示例是密码，生物特征数据（例如指纹和视网膜扫描）以及 X.509 证书。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eSecurityManager\u003c/strong\u003e - \u003cstrong\u003e安全管理\u003c/strong\u003e。它是 Shiro 的核心，所有与安全有关的操作（认证、授权、及会话、缓存的管理）都与 \u003ccode\u003eSecurityManager\u003c/code\u003e 交互，且它管理着所有 \u003ccode\u003eSubject\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eRealm\u003c/strong\u003e - \u003cstrong\u003e域\u003c/strong\u003e。用于访问安全相关数据，可以视为应用自身的数据源，需要开发者自己实现。Shiro 会通过 \u003ccode\u003eRealm\u003c/code\u003e 获取安全数据（如用户、角色、权限），就是说 \u003ccode\u003eSecurityManager\u003c/code\u003e 要验证用户身份，那么它需要从 \u003ccode\u003eRealm\u003c/code\u003e 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把 \u003ccode\u003eRealm\u003c/code\u003e 看成 DataSource，即安全数据源。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"SecurityManager\"\u003e\u003ca href=\"#SecurityManager\" class=\"headerlink\" title=\"SecurityManager\"\u003e\u003c/a\u003eSecurityManager\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e 是 Shiro 框架核心中的核心，它相当于 Shiro 的总指挥，负责调度所有行为，包括：认证、授权、获取安全数据（调用 \u003ccode\u003eRealm\u003c/code\u003e）、会话管理等。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/standalone/security/shiro/ShiroArchitecture.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e 聚合了以下组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAuthenticator\u003c/strong\u003e - 认证器，负责认证。如果用户需要定制认证策略，可以实现此接口。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAuthorizer\u003c/strong\u003e - 授权器，负责权限控制。用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSessionManager\u003c/strong\u003e - 会话管理器。Shiro 抽象了一个自己的 Session 来管理主体与应用之间交互的数据。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSessionDAO\u003c/strong\u003e - 会话 DAO 用于存储会话，需要用户自己实现。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCacheManager\u003c/strong\u003e - 缓存控制器。用于管理如用户、角色、权限等信息的缓存。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCryptography\u003c/strong\u003e - 密码器。用于对数据加密、解密。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二、Shiro-认证\"\u003e\u003ca href=\"#二、Shiro-认证\" class=\"headerlink\" title=\"二、Shiro 认证\"\u003e\u003c/a\u003e二、Shiro 认证\u003c/h2\u003e\u003ch3 id=\"认证-Subject\"\u003e\u003ca href=\"#认证-Subject\" class=\"headerlink\" title=\"认证 Subject\"\u003e\u003c/a\u003e认证 Subject\u003c/h3\u003e\u003cp\u003e验证 Subject 的过程可以有效地分为三个不同的步骤：\u003c/p\u003e\n\u003cp\u003e（1）收集 \u003ccode\u003eSubject\u003c/code\u003e 提交的 \u003ccode\u003ePrincipals\u003c/code\u003e 和 \u003ccode\u003eCredentials\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Example using most common scenario of username/password pair:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eUsernamePasswordToken\u003c/span\u003e \u003cspan class=\"variable\"\u003etoken\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUsernamePasswordToken\u003c/span\u003e(username, password);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//\u0026#34;Remember Me\u0026#34; built-in:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etoken.setRememberMe(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（2）提交 \u003ccode\u003ePrincipals\u003c/code\u003e 和 \u003ccode\u003eCredentials\u003c/code\u003e 以进行身份验证。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003ecurrentUser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityUtils.getSubject();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecurrentUser.login(token);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（3）如果提交成功，则允许访问，否则重试身份验证或阻止访问。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    currentUser.login(token);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e ( UnknownAccountException uae ) { ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e ( IncorrectCredentialsException ice ) { ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e ( LockedAccountException lae ) { ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e ( ExcessiveAttemptsException eae ) { ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} ... \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e your own ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003ecatch\u003c/span\u003e ( AuthenticationException ae ) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//unexpected error?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Remembered-和-Authenticated\"\u003e\u003ca href=\"#Remembered-和-Authenticated\" class=\"headerlink\" title=\"Remembered 和 Authenticated\"\u003e\u003c/a\u003eRemembered 和 Authenticated\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRemembered\u003c/code\u003e - 记住我。被记住的 \u003ccode\u003eSubject\u003c/code\u003e 不是匿名的，并且具有已知的身份（即 \u003ccode\u003esubject.getPrincipals()\u003c/code\u003e 是非空的）。 但是，在先前的会话期间，通过先前的身份验证会记住此身份。 如果 \u003ccode\u003esubject.isRemembered()\u003c/code\u003e 返回 \u003ccode\u003etrue\u003c/code\u003e，则认为该主题已被记住。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAuthenticated\u003c/code\u003e - 已认证。已认证的 \u003ccode\u003eSubject\u003c/code\u003e 是在当前会话期间已成功认证的 \u003ccode\u003eSubject\u003c/code\u003e。 如果 \u003ccode\u003esubject.isAuthenticated()\u003c/code\u003e 返回 \u003ccode\u003etrue\u003c/code\u003e，则认为该 \u003ccode\u003eSubject\u003c/code\u003e 已通过身份验证。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"登出\"\u003e\u003ca href=\"#登出\" class=\"headerlink\" title=\"登出\"\u003e\u003c/a\u003e登出\u003c/h3\u003e\u003cp\u003e当 Subject 与应用程序完成交互后，可以调用 \u003ccode\u003esubject.logout()\u003c/code\u003e 登出，即放弃所有标识信息。\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurrentUser.logout();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"认证流程\"\u003e\u003ca href=\"#认证流程\" class=\"headerlink\" title=\"认证流程\"\u003e\u003c/a\u003e认证流程\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200317092427.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e应用程序代码调用 \u003ccode\u003eSubject.login\u003c/code\u003e 方法，传入构造的 \u003ccode\u003eAuthenticationToken\u003c/code\u003e 实例，该实例代表最终用户的 \u003ccode\u003ePrincipals\u003c/code\u003e 和 \u003ccode\u003eCredentials\u003c/code\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eSubject\u003c/code\u003e 实例（通常是 \u003ccode\u003eDelegatingSubject\u003c/code\u003e（或子类））通过调用 \u003ccode\u003esecurityManager.login\u003c/code\u003e（token）委托应用程序的 \u003ccode\u003eSecurityManager\u003c/code\u003e，在此处开始实际的身份验证工作。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e 接收令牌，并通过调用 \u003ccode\u003eauthenticator.authenticate\u003c/code\u003e（token）来简单地委派给其内部 \u003ccode\u003eAuthenticator\u003c/code\u003e 实例。这几乎总是一个 \u003ccode\u003eModularRealmAuthenticator\u003c/code\u003e 实例，它支持在身份验证期间协调一个或多个 \u003ccode\u003eRealm\u003c/code\u003e 实例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果为该应用程序配置了多个 \u003ccode\u003eRealm\u003c/code\u003e，则 \u003ccode\u003eModularRealmAuthenticator\u003c/code\u003e 实例将利用其配置的 \u003ccode\u003eAuthenticationStrategy\u003c/code\u003e 发起多域验证尝试。在调用领域进行身份验证之前，期间和之后，将调用 \u003ccode\u003eAuthenticationStrategy\u003c/code\u003e 以使其对每个领域的结果做出反应。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e请咨询每个已配置的 \u003ccode\u003eRealm\u003c/code\u003e，以查看其是否支持提交的 \u003ccode\u003eAuthenticationToken\u003c/code\u003e。 如果是这样，将使用提交的令牌调用支持 \u003ccode\u003eRealm\u003c/code\u003e 的 \u003ccode\u003egetAuthenticationInfo\u003c/code\u003e 方法。 \u003ccode\u003egetAuthenticationInfo\u003c/code\u003e 方法有效地表示对该特定 \u003ccode\u003eRealm\u003c/code\u003e 的单个身份验证尝试。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"认证策略\"\u003e\u003ca href=\"#认证策略\" class=\"headerlink\" title=\"认证策略\"\u003e\u003c/a\u003e认证策略\u003c/h3\u003e\u003cp\u003e当为一个应用程序配置两个或多个领域时，\u003ccode\u003eModularRealmAuthenticator\u003c/code\u003e 依赖于内部 \u003ccode\u003eAuthenticationStrategy\u003c/code\u003e 组件来确定认证尝试成功或失败的条件。\u003c/p\u003e\n\u003cp\u003e例如，如果只有一个 Realm 成功地对 AuthenticationToken 进行身份验证，而所有其他 Realm 都失败了，那么该身份验证尝试是否被视为成功？还是必须所有领域都成功进行身份验证才能将整体尝试视为成功？或者，如果某个领域成功通过身份验证，是否有必要进一步咨询其他领域？ AuthenticationStrategy 根据应用程序的需求做出适当的决定。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAuthenticationStrategy\u003c/code\u003e 是无状态组件，在尝试进行身份验证时会被查询 4 次（这 4 种交互所需的任何必要状态都将作为方法参数给出）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在任何领域被调用之前\u003c/li\u003e\n\u003cli\u003e在调用单个 \u003ccode\u003eRealm\u003c/code\u003e 的 \u003ccode\u003egetAuthenticationInfo\u003c/code\u003e 方法之前\u003c/li\u003e\n\u003cli\u003e在调用单个 \u003ccode\u003eRealm\u003c/code\u003e 的 \u003ccode\u003egetAuthenticationInfo\u003c/code\u003e 方法之后\u003c/li\u003e\n\u003cli\u003e在所有领域都被调用之后\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eAuthenticationStrategy\u003c/code\u003e 还负责汇总每个成功 \u003ccode\u003eRealm\u003c/code\u003e 的结果，并将它们“捆绑”成单个 \u003ccode\u003eAuthenticationInfo\u003c/code\u003e 表示形式。最终的聚合 \u003ccode\u003eAuthenticationInfo\u003c/code\u003e 实例是 \u003ccode\u003eAuthenticator\u003c/code\u003e 实例返回的结果，也是 Shiro 用来表示主体的最终身份（也称为委托人）的东西。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003e\u003ccode\u003eAuthenticationStrategy\u003c/code\u003e\u003c/th\u003e\n\u003cth align=\"left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/pam/AtLeastOneSuccessfulStrategy.html\"\u003e\u003ccode\u003eAtLeastOneSuccessfulStrategy\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e只要有一个 \u003ccode\u003eRealm\u003c/code\u003e 成功认证，则整个尝试都被视为成功。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/pam/FirstSuccessfulStrategy.html\"\u003e\u003ccode\u003eFirstSuccessfulStrategy\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e仅使用从第一个成功通过身份验证的 \u003ccode\u003eRealm\u003c/code\u003e 返回的信息，所有其他 Realm 将被忽略。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authc/pam/AllSuccessfulStrategy.html\"\u003e\u003ccode\u003eAllSuccessfulStrategy\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"left\"\u003e只有所有 \u003ccode\u003eRealm\u003c/code\u003e 成功认证，则整个尝试才被视为成功。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:link: 更多认证细节可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/authentication.html#apache-shiro-authentication\"\u003eApache Shiro Authentication\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"三、Shiro-授权\"\u003e\u003ca href=\"#三、Shiro-授权\" class=\"headerlink\" title=\"三、Shiro 授权\"\u003e\u003c/a\u003e三、Shiro 授权\u003c/h2\u003e\u003cp\u003e授权，也称为访问控制，是管理对资源的访问的过程。 换句话说，控制谁有权访问应用程序中的内容。\u003c/p\u003e\n\u003ch3 id=\"授权元素\"\u003e\u003ca href=\"#授权元素\" class=\"headerlink\" title=\"授权元素\"\u003e\u003c/a\u003e授权元素\u003c/h3\u003e\u003cp\u003e授权有三个核心要素：权限、角色和用户。\u003c/p\u003e\n\u003ch4 id=\"权限\"\u003e\u003ca href=\"#权限\" class=\"headerlink\" title=\"权限\"\u003e\u003c/a\u003e权限\u003c/h4\u003e\u003cp\u003e权限示例：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e打开一个文件\u003c/li\u003e\n\u003cli\u003e查看 \u003ccode\u003e/user/list\u003c/code\u003e web 页面\u003c/li\u003e\n\u003cli\u003e查询记录\u003c/li\u003e\n\u003cli\u003e删除一条记录\u003c/li\u003e\n\u003cli\u003e…\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e大多数资源都支持一般的 CRUD 操作。除此以外，对于一些特定的资源，任何有意义的行为都是可以的。基本的设计思路是：权限控制，至少是基于资源和行为。\u003c/p\u003e\n\u003ch4 id=\"角色\"\u003e\u003ca href=\"#角色\" class=\"headerlink\" title=\"角色\"\u003e\u003c/a\u003e角色\u003c/h4\u003e\u003cp\u003e角色是一个命名实体，通常代表一组行为或职责。这些行为会转化为：谁可以在应用程序中执行哪些行为？谁不可以在程序中执行哪些行为？\u003c/p\u003e\n\u003cp\u003e角色通常是分配给用户帐户的，因此通过关联，用户可以获得自身角色所赋予的权限。\u003c/p\u003e\n\u003ch4 id=\"用户\"\u003e\u003ca href=\"#用户\" class=\"headerlink\" title=\"用户\"\u003e\u003c/a\u003e用户\u003c/h4\u003e\u003cp\u003e用户本质上是应用程序的“用户”。\u003c/p\u003e\n\u003cp\u003e用户（即 Shiro 的 \u003ccode\u003eSubject\u003c/code\u003e）通过与角色或直接权限的关联在应用程序中执行某些行为。\u003c/p\u003e\n\u003ch3 id=\"基于角色的授权\"\u003e\u003ca href=\"#基于角色的授权\" class=\"headerlink\" title=\"基于角色的授权\"\u003e\u003c/a\u003e基于角色的授权\u003c/h3\u003e\u003cp\u003e如果授权是基于角色赋予权限的数据模型，编程模式如下：\u003c/p\u003e\n\u003cp\u003e【示例一】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003ecurrentUser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityUtils.getSubject();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (currentUser.hasRole(\u003cspan class=\"string\"\u003e\u0026#34;administrator\u0026#34;\u003c/span\u003e)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//show the admin button\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//don\u0026#39;t show the button?  Grey it out?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e【示例二】\u003c/p\u003e\n\u003cfigure class=\"highlight abnf\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eSubject currentUser \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityUtils.getSubject()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e// 检查当前 Subject 是否有某种权限\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e// 如果有，直接跳过；如果没有，Shiro 会抛出 AuthorizationException\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecurrentUser.checkRole(\u003cspan class=\"string\"\u003e\u0026#34;bankTeller\u0026#34;\u003c/span\u003e)\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eopenBankAccount()\u003cspan class=\"comment\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e提示：方式二相比方式一，代码更简洁\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"基于权限的授权\"\u003e\u003ca href=\"#基于权限的授权\" class=\"headerlink\" title=\"基于权限的授权\"\u003e\u003c/a\u003e基于权限的授权\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e更好的授权策略通常是基于权限的授权\u003c/strong\u003e。基于权限的授权，由于它和应用程序的原始功能（针对具体资源上的行为）紧密相关，所以基于权限的授权源代码会在功能更改时同步更改（而不是在安全策略发生更改时）。 这意味着与类似的基于角色的授权代码相比，修改代码的影响面要小得多。\u003c/p\u003e\n\u003cp\u003e【示例】基于对象的权限检查\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003ePermission\u003c/span\u003e \u003cspan class=\"variable\"\u003eprintPermission\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003ePrinterPermission\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;laserjet4400n\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;print\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003ecurrentUser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityUtils.getSubject();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (currentUser.isPermitted(printPermission)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//show the Print button\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//don\u0026#39;t show the button?  Grey it out?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在对象中存储权限控制信息，但这种方式较为繁重\u003c/p\u003e\n\u003cp\u003e【示例】字符串定义权限控制信息\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003ecurrentUser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityUtils.getSubject();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (currentUser.isPermitted(\u003cspan class=\"string\"\u003e\u0026#34;printer:print:laserjet4400n\u0026#34;\u003c/span\u003e)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//show the Print button\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//don\u0026#39;t show the button?  Grey it out?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用 : 分隔，表示资源类型、行为、资源 ID，Shiro 提供了默认实现： \u003ccode\u003eorg.apache.shiro.authz.permission.WildcardPermission\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这种权限控制方式的好处在于：轻量、灵活。\u003c/p\u003e\n\u003ch3 id=\"基于注解的授权\"\u003e\u003ca href=\"#基于注解的授权\" class=\"headerlink\" title=\"基于注解的授权\"\u003e\u003c/a\u003e基于注解的授权\u003c/h3\u003e\u003cp\u003eShiro 提供了一些用于授权的注解，来进一步简化授权代码。\u003c/p\u003e\n\u003ch4 id=\"RequiresAuthentication\"\u003e\u003ca href=\"#RequiresAuthentication\" class=\"headerlink\" title=\"@RequiresAuthentication\"\u003e\u003c/a\u003e\u003ccode\u003e@RequiresAuthentication\u003c/code\u003e\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e@RequiresAuthentication\u003c/code\u003e 注解要求当前 \u003ccode\u003eSubject\u003c/code\u003e 必须是已认证用户才可以访问被修饰的方法。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@RequiresAuthentication\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eupdateAccount\u003c/span\u003e\u003cspan class=\"params\"\u003e(Account userAccount)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//this method will only be invoked by a\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//Subject that is guaranteed authenticated\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"RequiresGuest\"\u003e\u003ca href=\"#RequiresGuest\" class=\"headerlink\" title=\"@RequiresGuest\"\u003e\u003c/a\u003e\u003ccode\u003e@RequiresGuest\u003c/code\u003e\u003c/h4\u003e\u003cp\u003e\u003ccode\u003e@RequiresGuest\u003c/code\u003e 注解要求当前 \u003ccode\u003eSubject\u003c/code\u003e 的角色是 \u003ccode\u003eguest\u003c/code\u003e 才可以访问被修饰的方法。\u003c/p\u003e\n\u003ch3 id=\"授权流程\"\u003e\u003ca href=\"#授权流程\" class=\"headerlink\" title=\"授权流程\"\u003e\u003c/a\u003e授权流程\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200317092618.png\" alt=\"img\"/\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e应用程序或框架代码调用任何 \u003ccode\u003eSubject\u003c/code\u003e 的 \u003ccode\u003ehasRole*\u003c/code\u003e，\u003ccode\u003echeckRole*\u003c/code\u003e，\u003ccode\u003eisPermitted*\u003c/code\u003e 或 \u003ccode\u003echeckPermission*\u003c/code\u003e 方法，并传入所需的权限或角色。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eSubject\u003c/code\u003e 实例，通常是 \u003ccode\u003eDelegatingSubject\u003c/code\u003e（或子类），通过调用 \u003ccode\u003esecurityManager\u003c/code\u003e 几乎相同的各自 \u003ccode\u003ehasRole*\u003c/code\u003e，\u003ccode\u003echeckRole*\u003c/code\u003e，\u003ccode\u003eisPermitted*\u003c/code\u003e 或 \u003ccode\u003echeckPermission*\u003c/code\u003e 方法来委托 \u003ccode\u003eSecurityManager\u003c/code\u003e （实现了 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/authz/Authorizer.html\"\u003e\u003ccode\u003eorg.apache.shiro.authz.Authorizer\u003c/code\u003e\u003c/a\u003e 接口）处理授权。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e 通过调用授权者各自的 \u003ccode\u003ehasRole*\u003c/code\u003e，\u003ccode\u003echeckRole*\u003c/code\u003e，\u003ccode\u003eisPermitted*\u003c/code\u003e 或 \u003ccode\u003echeckPermission*\u003c/code\u003e 方法来中继/委托其内部的 \u003ccode\u003eorg.apache.shiro.authz.Authorizer\u003c/code\u003e 实例。默认情况下，\u003ccode\u003eauthorizer\u003c/code\u003e 实例是 \u003ccode\u003eModularRealmAuthorizer\u003c/code\u003e 实例，该实例支持在任何授权操作期间协调一个或多个 \u003ccode\u003eRealm\u003c/code\u003e 实例。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e检查每个已配置的 \u003ccode\u003eRealm\u003c/code\u003e，以查看其是否实现相同的 \u003ccode\u003eAuthorizer\u003c/code\u003e 接口。如果是这样，则将调用 \u003ccode\u003eRealm\u003c/code\u003e 各自的 \u003ccode\u003ehasRole*\u003c/code\u003e，\u003ccode\u003echeckRole*\u003c/code\u003e，\u003ccode\u003eisPermitted*\u003c/code\u003e 或 \u003ccode\u003echeckPermission*\u003c/code\u003e 方法。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:link: 更多授权细节可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/authorization.html#apache-shiro-authorization\"\u003eApache Shiro Authorization\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"四、Shiro-会话管理\"\u003e\u003ca href=\"#四、Shiro-会话管理\" class=\"headerlink\" title=\"四、Shiro 会话管理\"\u003e\u003c/a\u003e四、Shiro 会话管理\u003c/h2\u003e\u003cp\u003eShiro 提供了一套独特的会话管理方案：其 Session 可以使用 Java SE 程序，也可以使用于 Java Web 程序。\u003c/p\u003e\n\u003cp\u003e在 Shiro 中，\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/session-management.html#the-sessionmanager\"\u003eSessionManager\u003c/a\u003e 负责管理应用所有 \u003ccode\u003eSubject\u003c/code\u003e 的会话，如：创建、删除、失效、验证等。\u003c/p\u003e\n\u003cp\u003e【示例】会话使用示例\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSubject\u003c/span\u003e \u003cspan class=\"variable\"\u003ecurrentUser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e SecurityUtils.getSubject();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eSession\u003c/span\u003e \u003cspan class=\"variable\"\u003esession\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e currentUser.getSession();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esession.setAttribute( \u003cspan class=\"string\"\u003e\u0026#34;someKey\u0026#34;\u003c/span\u003e, someValue);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"会话超时\"\u003e\u003ca href=\"#会话超时\" class=\"headerlink\" title=\"会话超时\"\u003e\u003c/a\u003e会话超时\u003c/h3\u003e\u003cp\u003e默认情况下，Shiro 中的会话有效期为 30 分钟，超时后，该会话将被 Shiro 视为无效。\u003c/p\u003e\n\u003cp\u003e可以通过 \u003ccode\u003eglobalSessionTimeout\u003c/code\u003e 方法设置 Shiro 会话超时时间。\u003c/p\u003e\n\u003ch3 id=\"会话监听\"\u003e\u003ca href=\"#会话监听\" class=\"headerlink\" title=\"会话监听\"\u003e\u003c/a\u003e会话监听\u003c/h3\u003e\u003cp\u003eShiro 提供了 \u003ccode\u003eSessionListener\u003c/code\u003e 接口（或 \u003ccode\u003eSessionListenerAdapter\u003c/code\u003e 接口），用于监听重要的会话事件，并允许使用者在事件触发时做定制化处理。\u003c/p\u003e\n\u003cp\u003e【示例】\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eShiroSessionListener\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSessionListener\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eLogger\u003c/span\u003e \u003cspan class=\"variable\"\u003elog\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e LoggerFactory.getLogger(\u003cspan class=\"built_in\"\u003ethis\u003c/span\u003e.getClass());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"type\"\u003eAtomicInteger\u003c/span\u003e \u003cspan class=\"variable\"\u003esessionCount\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eAtomicInteger\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonStart\u003c/span\u003e\u003cspan class=\"params\"\u003e(Session session)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sessionCount.incrementAndGet();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonStop\u003c/span\u003e\u003cspan class=\"params\"\u003e(Session session)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sessionCount.decrementAndGet();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eonExpiration\u003c/span\u003e\u003cspan class=\"params\"\u003e(Session session)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sessionCount.decrementAndGet();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"会话存储\"\u003e\u003ca href=\"#会话存储\" class=\"headerlink\" title=\"会话存储\"\u003e\u003c/a\u003e会话存储\u003c/h3\u003e\u003cp\u003e大多数情况下，应用需要保存会话信息，以便在稍后可以使用它。\u003c/p\u003e\n\u003cp\u003eShiro 提供了 \u003ccode\u003eSessionManager\u003c/code\u003e 接口，负责将针对会话的 CRUD 操作委派给内部组件 \u003ccode\u003eSessionDAO\u003c/code\u003e，该组件反映了数据访问对象（DAO）设计模式。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e:bell: 注意：由于会话通常具有时效性，所以一般会话天然适合存储于缓存中。存储于 Redis 中是一个不错的选择。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"五、Realm\"\u003e\u003ca href=\"#五、Realm\" class=\"headerlink\" title=\"五、Realm\"\u003e\u003c/a\u003e五、Realm\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eRealm\u003c/code\u003e 是 Shiro 访问程序安全相关数据（如：用户、角色、权限）的接口。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRealm\u003c/code\u003e 是有开发者自己实现的，开发者可以通过实现 Realm 接口，接入应用的数据源，如：JDBC、文件、Nosql 等等。\u003c/p\u003e\n\u003ch3 id=\"认证令牌\"\u003e\u003ca href=\"#认证令牌\" class=\"headerlink\" title=\"认证令牌\"\u003e\u003c/a\u003e认证令牌\u003c/h3\u003e\u003cp\u003eShiro 支持身份验证令牌。在咨询 Realm 进行认证尝试之前，将调用其支持方法。 如果返回值为 true，则仅会调用其 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html#getAuthenticationInfo-org.apache.shiro.authc.AuthenticationToken-\"\u003egetAuthenticationInfo(token)\u003c/a\u003e 方法。通常，Realm 会检查所提交令牌的类型（接口或类），以查看其是否可以处理它。\u003c/p\u003e\n\u003cp\u003e令牌认证处理流程如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e检查用于标识 principal 的令牌（帐户标识信息）。\u003c/li\u003e\n\u003cli\u003e根据 principal，在数据源中查找相应的帐户数据。\u003c/li\u003e\n\u003cli\u003e确保令牌提供的凭证与数据存储中存储的凭证匹配。\u003c/li\u003e\n\u003cli\u003e如果 credentials 匹配，则返回 \u003ccode\u003eAuthenticationInfo\u003c/code\u003e 实例。\u003c/li\u003e\n\u003cli\u003e如果 credentials 不匹配，则抛出 \u003ccode\u003eAuthenticationException\u003c/code\u003e 异常。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"加密\"\u003e\u003ca href=\"#加密\" class=\"headerlink\" title=\"加密\"\u003e\u003c/a\u003e加密\u003c/h3\u003e\u003cp\u003e通过前文，可以了解：Shiro 需要通过一对 principal 和 credentials 来确认身份是否匹配（即认证）。\u003c/p\u003e\n\u003cp\u003e一般来说，成熟软件是不允许存储账户、密码这些敏感数据时，使用明文存储。所以，通常要将密码加密后存储。\u003c/p\u003e\n\u003cp\u003eShiro 提供了一些加密器，其思想就是用 MD5、SHA 这种数字签名算法，加 Salt，然后转为 Base64 字符串。为了避免被暴力破解，Shiro 使用多次加密的方式获得最终的 credentials 字符串。\u003c/p\u003e\n\u003cp\u003e【示例】Shiro 加密密码示例\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.shiro.crypto.hash.Sha256Hash;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.shiro.crypto.RandomNumberGenerator;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e org.apache.shiro.crypto.SecureRandomNumberGenerator;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//We\u0026#39;ll use a Random Number Generator to generate salts.  This\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//is much more secure than using a username as a salt or not\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//having a salt at all.  Shiro makes this easy.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Note that a normal app would reference an attribute rather\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//than create a new RNG every time:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eRandomNumberGenerator\u003c/span\u003e \u003cspan class=\"variable\"\u003erng\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSecureRandomNumberGenerator\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eObject\u003c/span\u003e \u003cspan class=\"variable\"\u003esalt\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e rng.nextBytes();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//Now hash the plain-text password with the random salt and multiple\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//iterations and then Base64-encode the value (requires less space than Hex):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eString\u003c/span\u003e \u003cspan class=\"variable\"\u003ehashedPasswordBase64\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSha256Hash\u003c/span\u003e(plainTextPassword, salt, \u003cspan class=\"number\"\u003e1024\u003c/span\u003e).toBase64();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eUser\u003c/span\u003e \u003cspan class=\"variable\"\u003euser\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUser\u003c/span\u003e(username, hashedPasswordBase64);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//save the salt with the new account.  The HashedCredentialsMatcher\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//will need it later when handling login attempts:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003euser.setPasswordSalt(salt);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003euserDAO.create(user);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"六、配置\"\u003e\u003ca href=\"#六、配置\" class=\"headerlink\" title=\"六、配置\"\u003e\u003c/a\u003e六、配置\u003c/h2\u003e\u003ch3 id=\"过滤链\"\u003e\u003ca href=\"#过滤链\" class=\"headerlink\" title=\"过滤链\"\u003e\u003c/a\u003e过滤链\u003c/h3\u003e\u003cp\u003e运行 Web 应用程序时，Shiro 将创建一些有用的默认 Filter 实例。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eFilter Name\u003c/th\u003e\n\u003cth align=\"left\"\u003eClass\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd align=\"left\"\u003eanon\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/AnonymousFilter.html\"\u003eorg.apache.shiro.web.filter.authc.AnonymousFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eauthc\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html\"\u003eorg.apache.shiro.web.filter.authc.FormAuthenticationFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eauthcBasic\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html\"\u003eorg.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003elogout\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html\"\u003eorg.apache.shiro.web.filter.authc.LogoutFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003enoSessionCreation\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html\"\u003eorg.apache.shiro.web.filter.session.NoSessionCreationFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eperms\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html\"\u003eorg.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eport\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PortFilter.html\"\u003eorg.apache.shiro.web.filter.authz.PortFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003erest\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html\"\u003eorg.apache.shiro.web.filter.authz.HttpMethodPermissionFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eroles\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html\"\u003eorg.apache.shiro.web.filter.authz.RolesAuthorizationFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003essl\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/SslFilter.html\"\u003eorg.apache.shiro.web.filter.authz.SslFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003euser\u003c/td\u003e\n\u003ctd align=\"left\"\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/UserFilter.html\"\u003eorg.apache.shiro.web.filter.authc.UserFilter\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"RememberMe\"\u003e\u003ca href=\"#RememberMe\" class=\"headerlink\" title=\"RememberMe\"\u003e\u003c/a\u003eRememberMe\u003c/h3\u003e\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eUsernamePasswordToken\u003c/span\u003e \u003cspan class=\"variable\"\u003etoken\u003c/span\u003e \u003cspan class=\"operator\"\u003e=\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"title class_\"\u003eUsernamePasswordToken\u003c/span\u003e(username, password);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etoken.setRememberMe(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSecurityUtils.getSubject().login(token);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://shiro.apache.org/reference.html\"\u003eShiro 官方文档\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://jinnianshilongnian.iteye.com/category/305053\"\u003e跟我学 Shiro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://stormpath.com/blog/new-rbac-resource-based-access-control\"\u003eThe New RBAC: Resource-Based Access Control\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-02-17T14:34:30Z",
  "Author": "钝悟 ◾ Dunwu"
}