{
  "Source": "dunwu",
  "Title": "《Kafka 核心源码解读》笔记",
  "Link": "https://dunwu.github.io/blog/pages/f5f5ef/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\u003ch1 id=\"《Kafka-核心源码解读》笔记\"\u003e\u003ca href=\"#《Kafka-核心源码解读》笔记\" class=\"headerlink\" title=\"《Kafka 核心源码解读》笔记\"\u003e\u003c/a\u003e《Kafka 核心源码解读》笔记\u003c/h1\u003e\u003ch2 id=\"开篇词\"\u003e\u003ca href=\"#开篇词\" class=\"headerlink\" title=\"开篇词\"\u003e\u003c/a\u003e开篇词\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220703152740.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从功能上讲，Kafka 源码分为四大模块。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e服务器端源码：实现 Kafka 架构和各类优秀特性的基础。\u003c/li\u003e\n\u003cli\u003eJava 客户端源码：定义了与 Broker 端的交互机制，以及通用的 Broker 端组件支撑代码。\u003c/li\u003e\n\u003cli\u003eConnect 源码：用于实现 Kafka 与外部系统的高性能数据传输。\u003c/li\u003e\n\u003cli\u003eStreams 源码：用于实现实时的流处理功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220703152803.png\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"导读\"\u003e\u003ca href=\"#导读\" class=\"headerlink\" title=\"导读\"\u003e\u003c/a\u003e导读\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e构建 Kafka 工程和源码阅读环境、Scala 语言热身\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ekafka 项目主要目录结构\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ebin\u003c/strong\u003e 目录：保存 Kafka 工具行脚本，我们熟知的 kafka-server-start 和 kafka-consoleproducer 等脚本都存放在这里。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eclients\u003c/strong\u003e 目录：保存 Kafka 客户端代码，比如生产者和消费者的代码都在该目录下。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003econfig\u003c/strong\u003e 目录：保存 Kafka 的配置文件，其中比较重要的配置文件是 server.properties。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003econnect\u003c/strong\u003e 目录：保存 Connect 组件的源代码。我在开篇词里提到过，Kafka Connect 组件是用来实现 Kafka 与外部系统之间的实时数据传输的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecore\u003c/strong\u003e 目录：保存 Broker 端代码。Kafka 服务器端代码全部保存在该目录下。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003estreams\u003c/strong\u003e 目录：保存 Streams 组件的源代码。Kafka Streams 是实现 Kafka 实时流处理的组件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"日志段\"\u003e\u003ca href=\"#日志段\" class=\"headerlink\" title=\"日志段\"\u003e\u003c/a\u003e日志段\u003c/h2\u003e\u003cblockquote\u003e\n\u003cp\u003e保存消息文件的对象是怎么实现的？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"Kafka-日志结构\"\u003e\u003ca href=\"#Kafka-日志结构\" class=\"headerlink\" title=\"Kafka 日志结构\"\u003e\u003c/a\u003eKafka 日志结构\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220704204019.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eKafka 日志对象由多个日志段对象组成，而每个日志段对象会在磁盘上创建一组文件，包括\u003cstrong\u003e消息日志文件（.log）\u003c/strong\u003e、\u003cstrong\u003e位移索引文件（.index）\u003c/strong\u003e、\u003cstrong\u003e时间戳索引文件（.timeindex）\u003c/strong\u003e以及已中止（Aborted）事务的\u003cstrong\u003e索引文件（.txnindex）\u003c/strong\u003e。当然，如果你没有使用 Kafka 事务，已中止事务的索引文件是不会被创建出来的。\u003c/p\u003e\n\u003cp\u003e一个 Kafka 主题有很多分区，每个分区就对应一个 Log 对象，在物理磁盘上则对应于一个子目录。比如你创建了一个双分区的主题 test-topic，那么，Kafka 在磁盘上会创建两个子目录：test-topic-0 和 test-topic-1。而在服务器端，这就是两个 \u003cstrong\u003e\u003ccode\u003eLog\u003c/code\u003e\u003c/strong\u003e 对象。每个子目录下存在多组日志段，也就是多组 \u003cstrong\u003e\u003ccode\u003e.log\u003c/code\u003e\u003cstrong\u003e、\u003c/strong\u003e\u003ccode\u003e.index\u003c/code\u003e\u003cstrong\u003e、\u003c/strong\u003e\u003ccode\u003e.timeindex\u003c/code\u003e\u003c/strong\u003e 文件组合，只不过文件名不同，因为每个日志段的起始位移不同。\u003c/p\u003e\n\u003ch3 id=\"日志段源码解析\"\u003e\u003ca href=\"#日志段源码解析\" class=\"headerlink\" title=\"日志段源码解析\"\u003e\u003c/a\u003e日志段源码解析\u003c/h3\u003e\u003cp\u003e日志段源码位于 Kafka 的 core 工程的 \u003ccode\u003eLogSegment.scala\u003c/code\u003e 中。该文件下定义了三个 Scala 对象：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLogSegment class\u003c/code\u003e：日志段类\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLogSegment object\u003c/code\u003e：保存静态变量或静态方法。相当于 \u003ccode\u003eLogSegment class\u003c/code\u003e 的工具类。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLogFlushStats object\u003c/code\u003e：尾部有个 stats，用于统计，负责为日志落盘进行计时。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"LogSegment-class-声明\"\u003e\u003ca href=\"#LogSegment-class-声明\" class=\"headerlink\" title=\"LogSegment class 声明\"\u003e\u003c/a\u003eLogSegment class 声明\u003c/h4\u003e\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eLogSegment\u003c/span\u003e \u003cspan class=\"title\"\u003eprivate\u003c/span\u003e[log] (\u003cspan class=\"params\"\u003eval log: \u003cspan class=\"type\"\u003eFileRecords\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val lazyOffsetIndex: \u003cspan class=\"type\"\u003eLazyIndex\u003c/span\u003e[\u003cspan class=\"type\"\u003eOffsetIndex\u003c/span\u003e],\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val lazyTimeIndex: \u003cspan class=\"type\"\u003eLazyIndex\u003c/span\u003e[\u003cspan class=\"type\"\u003eTimeIndex\u003c/span\u003e],\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val txnIndex: \u003cspan class=\"type\"\u003eTransactionIndex\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val baseOffset: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val indexIntervalBytes: \u003cspan class=\"type\"\u003eInt\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val rollJitterMs: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                               val time: \u003cspan class=\"type\"\u003eTime\u003c/span\u003e\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title\"\u003eLogging\u003c/span\u003e \u003c/span\u003e{ ... }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数说明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elog\u003c/code\u003e：\u003cstrong\u003e包含日志条目的文件记录\u003c/strong\u003e。\u003ccode\u003eFileRecords\u003c/code\u003e 就是实际保存 Kafka 消息的对象。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elazyOffsetIndex\u003c/code\u003e：\u003cstrong\u003e偏移量索引\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elazyTimeIndex\u003c/code\u003e：\u003cstrong\u003e时间戳索引\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etxnIndex\u003c/code\u003e：\u003cstrong\u003e事务索引\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebaseOffset\u003c/code\u003e：\u003cstrong\u003e此段中偏移量的下限\u003c/strong\u003e。事实上，在磁盘上看到的 Kafka 文件名就是 \u003ccode\u003ebaseOffset\u003c/code\u003e 的值。每个 \u003ccode\u003eLogSegment\u003c/code\u003e 对象实例一旦被创建，它的起始位移就是固定的了，不能再被更改。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eindexIntervalBytes\u003c/code\u003e：\u003cstrong\u003e索引中条目之间的近似字节数\u003c/strong\u003e。indexIntervalBytes 值其实就是 Broker 端参数 \u003ccode\u003elog.index.interval.bytes\u003c/code\u003e 值，它控制了日志段对象新增索引项的频率。默认情况下，日志段至少新写入 4KB 的消息数据才会新增一条索引项。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erollJitterMs\u003c/code\u003e：\u003cstrong\u003e日志段对象新增倒计时的“扰动值”\u003c/strong\u003e。因为目前 Broker 端日志段新增倒计时是全局设置，这就是说，在未来的某个时刻可能同时创建多个日志段对象，这将极大地增加物理磁盘 I/O 压力。有了 rollJitterMs 值的干扰，每个新增日志段在创建时会彼此岔开一小段时间，这样可以缓解物理磁盘的 I/O 负载瓶颈。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etime\u003c/code\u003e：**\u003ccode\u003eTimer\u003c/code\u003e 实例**。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"append-方法\"\u003e\u003ca href=\"#append-方法\" class=\"headerlink\" title=\"append 方法\"\u003e\u003c/a\u003eappend 方法\u003c/h4\u003e\u003cp\u003eappend 方法接收 4 个参数：分别表示\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elargestOffset\u003c/code\u003e：待写入消息批次中消息的最大位移值\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elargestTimestamp\u003c/code\u003e：最大时间戳\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eshallowOffsetOfMaxTimestamp\u003c/code\u003e：最大时间戳对应消息的位移\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erecords\u003c/code\u003e：真正要写入的消息集合\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220705062643.png\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第一步：在源码中，首先调用 \u003ccode\u003elog.sizeInBytes\u003c/code\u003e 方法判断该日志段是否为空，如果是空的话， Kafka 需要记录要写入消息集合的最大时间戳，并将其作为后面新增日志段倒计时的依据。\u003c/li\u003e\n\u003cli\u003e第二步：代码调用 \u003ccode\u003eensureOffsetInRange\u003c/code\u003e 方法确保输入参数最大位移值是合法的。那怎么判断是不是合法呢？标准就是看它与日志段起始位移的差值是否在整数范围内，即 \u003ccode\u003elargestOffset - baseOffset\u003c/code\u003e 的值是不是 介于 \u003ccode\u003e[0，Int.MAXVALUE]\u003c/code\u003e 之间。在极个别的情况下，这个差值可能会越界，这时， \u003ccode\u003eappend\u003c/code\u003e 方法就会抛出异常，阻止后续的消息写入。一旦你碰到这个问题，你需要做的是升级你的 Kafka 版本，因为这是由已知的 Bug 导致的。\u003c/li\u003e\n\u003cli\u003e第三步：待这些做完之后，\u003ccode\u003eappend\u003c/code\u003e 方法调用 \u003ccode\u003eFileRecords\u003c/code\u003e 的 \u003ccode\u003eappend\u003c/code\u003e 方法执行真正的写入。它的工作是将内存中的消息对象写入到操作系统的页缓存就可以了。\u003c/li\u003e\n\u003cli\u003e第四步：再下一步，就是更新日志段的最大时间戳以及最大时间戳所属消息的位移值属性。每个日志段都要保存当前最大时间戳信息和所属消息的位移信息。还记得 Broker 端提供定期删除日志的功能吗？比如我只想保留最近 7 天的日志，没错，当前最大时间戳这个值就是判断的依据；而最大时间戳对应的消息的位移值则用于时间戳索引项。虽然后面我会详细介绍，这里我还是稍微提一下：时间戳索引项保存时间戳与消息位移的对应关系。在这步操作中，Kafka 会更新并保存这组对应关系。\u003c/li\u003e\n\u003cli\u003e第五步：append 方法的最后一步就是更新索引项和写入的字节数了。我在前面说过，日志段每写入 4KB 数据就要写入一个索引项。当已写入字节数超过了 4KB 之后，append 方法会调用索引对象的 append 方法新增索引项，同时清空已写入字节数，以备下次重新累积计算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"read-方法\"\u003e\u003ca href=\"#read-方法\" class=\"headerlink\" title=\"read 方法\"\u003e\u003c/a\u003eread 方法\u003c/h4\u003e\u003cp\u003eread 方法作用：从第一个偏移量 \u0026gt;= startOffset 的 Segment 开始读取消息集。如果指定了 maxOffset，则消息集将包含不超过 maxSize 字节，并将在 maxOffset 之前结束。\u003c/p\u003e\n\u003cp\u003eread 方法入参\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estartOffset\u003c/code\u003e：要读取的第一条消息的位移；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaxSize\u003c/code\u003e：能读取的最大字节数；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaxPosition\u003c/code\u003e ：能读到的最大文件位置；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eminOneMessage\u003c/code\u003e：是否允许在消息体过大时至少返回第一条消息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eread 方法代码逻辑：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e调用 \u003ccode\u003etranslateOffset\u003c/code\u003e 方法定位要读取的起始文件位置 （\u003ccode\u003estartPosition\u003c/code\u003e）。输入参数 \u003ccode\u003estartOffset\u003c/code\u003e 仅仅是位移值，Kafka 需要根据索引信息找到对应的物理文件位置才能开始读取消息。\u003c/li\u003e\n\u003cli\u003e待确定了读取起始位置，日志段代码需要根据这部分信息以及 \u003ccode\u003emaxSize\u003c/code\u003e 和 \u003ccode\u003emaxPosition\u003c/code\u003e 参数共同计算要读取的总字节数。举个例子，假设 maxSize=100，maxPosition=300，startPosition=250，那么 read 方法只能读取 50 字节，因为 maxPosition - startPosition = 50。我们把它和 maxSize 参数相比较，其中的最小值就是最终能够读取的总字节数。\u003c/li\u003e\n\u003cli\u003e调用 \u003ccode\u003eFileRecords\u003c/code\u003e 的 \u003ccode\u003eslice\u003c/code\u003e 方法，从指定位置读取指定大小的消息集合。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"recover-方法\"\u003e\u003ca href=\"#recover-方法\" class=\"headerlink\" title=\"recover 方法\"\u003e\u003c/a\u003erecover 方法\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220705064515.png\"/\u003e\u003c/p\u003e\n\u003cp\u003erecover 开始时，代码依次调用索引对象的 reset 方法清空所有的索引文件，之后会开始遍历日志段中的所有消息集合或消息批次（RecordBatch）。对于读取到的每个消息集合，日志段必须要确保它们是合法的，这主要体现在两个方面：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e该集合中的消息必须要符合 Kafka 定义的二进制格式；\u003c/li\u003e\n\u003cli\u003e该集合中最后一条消息的位移值不能越界，即它与日志段起始位移的差值必须是一个正整数值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e校验完消息集合之后，代码会更新遍历过程中观测到的最大时间戳以及所属消息的位移值。同样，这两个数据用于后续构建索引项。再之后就是不断累加当前已读取的消息字节数，并根据该值有条件地写入索引项。最后是更新事务型 Producer 的状态以及 Leader Epoch 缓存。不过，这两个并不是理解 Kafka 日志结构所必需的组件，因此，我们可以忽略它们。\u003c/p\u003e\n\u003cp\u003e遍历执行完成后，Kafka 会将日志段当前总字节数和刚刚累加的已读取字节数进行比较，如果发现前者比后者大，说明日志段写入了一些非法消息，需要执行截断操作，将日志段大小调整回合法的数值。同时， Kafka 还必须相应地调整索引文件的大小。把这些都做完之后，日志段恢复的操作也就宣告结束了。\u003c/p\u003e\n\u003ch2 id=\"日志\"\u003e\u003ca href=\"#日志\" class=\"headerlink\" title=\"日志\"\u003e\u003c/a\u003e日志\u003c/h2\u003e\u003cp\u003e日志是日志段的容器，里面定义了很多管理日志段的操作。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220705195916.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Log-源码结构\"\u003e\u003ca href=\"#Log-源码结构\" class=\"headerlink\" title=\"Log 源码结构\"\u003e\u003c/a\u003eLog 源码结构\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLogAppendInfo\u003c/code\u003e（C）：保存消息元数据信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLogAppendInfo\u003c/code\u003e（O）：\u003ccode\u003eLogAppendInfo\u003c/code\u003e（C）工厂方法类\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUnifiedLog\u003c/code\u003e（C）：\u003ccode\u003eUnifiedLog.scala\u003c/code\u003e 中最核心的代码\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUnifiedLog\u003c/code\u003e（O）：\u003ccode\u003eUnifiedLog\u003c/code\u003e（C）工厂方法类\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRollParams\u003c/code\u003e（C）：用于控制日志段是否切分（Roll）的数据结构。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRollParams\u003c/code\u003e（O）：RollParams 伴生类的工厂方法。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLogMetricNames\u003c/code\u003e（O）：定义了 Log 对象的监控指标。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLogOffsetSnapshot\u003c/code\u003e（C）：封装分区所有位移元数据的容器类。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLogReadInfo\u003c/code\u003e（C）：封装读取日志返回的数据及其元数据。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCompletedTxn\u003c/code\u003e（C）：记录已完成事务的元数据，主要用于构建事务索引。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Log-Class-Object\"\u003e\u003ca href=\"#Log-Class-Object\" class=\"headerlink\" title=\"Log Class \u0026amp; Object\"\u003e\u003c/a\u003eLog Class \u0026amp; Object\u003c/h3\u003e\u003cp\u003eLog Object 作用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e定义了 Kafka 支持的文件类型\u003cul\u003e\n\u003cli\u003e.log：Kafka 日志文件\u003c/li\u003e\n\u003cli\u003e.index：Kafka 偏移量索引文件\u003c/li\u003e\n\u003cli\u003e.timeindex：Kafka 时间戳索引文件\u003c/li\u003e\n\u003cli\u003e.txnindex：Kafka 事务索引文件\u003c/li\u003e\n\u003cli\u003e.snapshot：Kafka 为幂等型或事务型 Producer 所做的快照文件\u003c/li\u003e\n\u003cli\u003e.deleted：被标记为待删除的文件\u003c/li\u003e\n\u003cli\u003e.cleaned：用于日志清理的临时文件\u003c/li\u003e\n\u003cli\u003e.swap：将文件交换到日志中时使用的临时文件\u003c/li\u003e\n\u003cli\u003e-delete：被标记为待删除的目录\u003c/li\u003e\n\u003cli\u003e-future：用于变更主题分区文件夹地址的目录\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e定义了多种工具类方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnifiedLog Class 定义：\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// UnifiedLog 定义\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eUnifiedLog\u003c/span\u003e(\u003cspan class=\"params\"\u003e@volatile var logStartOffset: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 private val localLog: \u003cspan class=\"type\"\u003eLocalLog\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 brokerTopicStats: \u003cspan class=\"type\"\u003eBrokerTopicStats\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 val producerIdExpirationCheckIntervalMs: \u003cspan class=\"type\"\u003eInt\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 @volatile var leaderEpochCache: \u003cspan class=\"type\"\u003eOption\u003c/span\u003e[\u003cspan class=\"type\"\u003eLeaderEpochFileCache\u003c/span\u003e],\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 val producerStateManager: \u003cspan class=\"type\"\u003eProducerStateManager\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 @volatile private var _topicId: \u003cspan class=\"type\"\u003eOption\u003c/span\u003e[\u003cspan class=\"type\"\u003eUuid\u003c/span\u003e],\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                 val keepPartitionMetadataFile: \u003cspan class=\"type\"\u003eBoolean\u003c/span\u003e\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title\"\u003eLogging\u003c/span\u003e \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"title\"\u003eKafkaMetricsGroup\u003c/span\u003e \u003c/span\u003e{ ... }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// LocalLog 定义\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eLocalLog\u003c/span\u003e(\u003cspan class=\"params\"\u003e@volatile private var _dir: \u003cspan class=\"type\"\u003eFile\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               @volatile private[log] var config: \u003cspan class=\"type\"\u003eLogConfig\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               private[log] val segments: \u003cspan class=\"type\"\u003eLogSegments\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               @volatile private[log] var recoveryPoint: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               @volatile private var nextOffsetMetadata: \u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               private[log] val scheduler: \u003cspan class=\"type\"\u003eScheduler\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               private[log] val time: \u003cspan class=\"type\"\u003eTime\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               private[log] val topicPartition: \u003cspan class=\"type\"\u003eTopicPartition\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e               private[log] val logDirFailureChannel: \u003cspan class=\"type\"\u003eLogDirFailureChannel\u003c/span\u003e\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"title\"\u003eLogging\u003c/span\u003e \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"title\"\u003eKafkaMetricsGroup\u003c/span\u003e \u003c/span\u003e{ ... }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面属性中最重要的两个属性是：\u003ccode\u003e_dir\u003c/code\u003e 和 \u003ccode\u003elogStartOffset\u003c/code\u003e。\u003ccode\u003e_dir\u003c/code\u003e 就是这个日志所在的文件夹路径，也就是主题分区的路径。\u003ccode\u003elogStartOffset\u003c/code\u003e，表示日志的当前最早位移。\u003ccode\u003e_dir\u003c/code\u003e 和 \u003ccode\u003elogStartOffset\u003c/code\u003e 都是 \u003ccode\u003evolatile var\u003c/code\u003e 类型，表示它们的值是变动的，而且可能被多个线程更新。\u003c/p\u003e\n\u003cp\u003eLog End Offset（LEO），是表示日志下一条待插入消息的位移值，而这个 Log Start Offset 是跟它相反的，它表示日志当前对外可见的最早一条消息的位移值。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220705201758.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e图中绿色的位移值 3 是日志的 Log Start Offset，而位移值 15 表示 LEO。另外，位移值 8 是高水位值，它是区分已提交消息和未提交消息的分水岭。\u003c/p\u003e\n\u003cp\u003e有意思的是，Log End Offset 可以简称为 LEO，但 Log Start Offset 却不能简称为 LSO。因为在 Kafka 中，LSO 特指 Log Stable Offset，属于 Kafka 事务的概念。\u003c/p\u003e\n\u003cp\u003eLog 类的其他属性你暂时不用理会，因为它们要么是很明显的工具类属性，比如 timer 和 scheduler，要么是高阶用法才会用到的高级属性，比如 producerStateManager 和 logDirFailureChannel。工具类的代码大多是做辅助用的，跳过它们也不妨碍我们理解 Kafka 的核心功能；而高阶功能代码设计复杂，学习成本高，性价比不高。\u003c/p\u003e\n\u003cp\u003e其他一些重要属性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enextOffsetMetadata：它封装了下一条待插入消息的位移值，你基本上可以把这个属性和 LEO 等同起来。\u003c/li\u003e\n\u003cli\u003ehighWatermarkMetadata：是分区日志高水位值。\u003c/li\u003e\n\u003cli\u003esegments：我认为这是 Log 类中最重要的属性。它保存了分区日志下所有的日志段信息，只不过是用 Map 的数据结构来保存的。Map 的 Key 值是日志段的起始位移值，Value 则是日志段对象本身。Kafka 源码使用 ConcurrentNavigableMap 数据结构来保存日志段对象，就可以很轻松地利用该类提供的线程安全和各种支持排序的方法，来管理所有日志段对象。\u003c/li\u003e\n\u003cli\u003eLeader Epoch Cache 对象。Leader Epoch 是社区于 0.11.0.0 版本引入源码中的，主要是用来判断出现 Failure 时是否执行日志截断操作（Truncation）。之前靠高水位来判断的机制，可能会造成副本间数据不一致的情形。这里的 Leader Epoch Cache 是一个缓存类数据，里面保存了分区 Leader 的 Epoch 值与对应位移值的映射关系，我建议你查看下 LeaderEpochFileCache 类，深入地了解下它的实现原理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"LOG-类初始化逻辑\"\u003e\u003ca href=\"#LOG-类初始化逻辑\" class=\"headerlink\" title=\"LOG 类初始化逻辑\"\u003e\u003c/a\u003eLOG 类初始化逻辑\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220705204919.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Log-的常见操作\"\u003e\u003ca href=\"#Log-的常见操作\" class=\"headerlink\" title=\"Log 的常见操作\"\u003e\u003c/a\u003eLog 的常见操作\u003c/h3\u003e\u003cp\u003eLog 的常见操作可以分为 4 类：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e高水位管理操作：高水位的概念在 Kafka 中举足轻重，对它的管理，是 Log 最重要的功能之一。\u003c/li\u003e\n\u003cli\u003e日志段管理：Log 是日志段的容器。高效组织与管理其下辖的所有日志段对象，是源码要解决的核心问题。\u003c/li\u003e\n\u003cli\u003e关键位移值管理：日志定义了很多重要的位移值，比如 Log Start Offset 和 LEO 等。确保这些位移值的正确性，是构建消息引擎一致性的基础。\u003c/li\u003e\n\u003cli\u003e读写操作：所谓的操作日志，大体上就是指读写日志。读写操作的作用之大，不言而喻。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"高水位管理操作\"\u003e\u003ca href=\"#高水位管理操作\" class=\"headerlink\" title=\"高水位管理操作\"\u003e\u003c/a\u003e高水位管理操作\u003c/h4\u003e\u003cp\u003e高水位定义：\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@volatile\u003c/span\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e highWatermarkMetadata: \u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e = \u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e(logStartOffset)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e高水位值是 volatile（易变型）的。因为多个线程可能同时读取它，因此需要设置成 volatile，保证内存可见性。另外，由于高水位值可能被多个线程同时修改，因此源码使用 Java Monitor 锁来确保并发修改的线程安全。\u003c/p\u003e\n\u003cp\u003e高水位值的初始值是 Log Start Offset 值。上节课我们提到，每个 Log 对象都会维护一个 Log Start Offset 值。当首次构建高水位时，它会被赋值成 Log Start Offset 值。\u003c/p\u003e\n\u003cp\u003eLogOffsetMetadata 定义\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eLogOffsetMetadata\u003c/span\u003e(\u003cspan class=\"params\"\u003emessageOffset: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                             segmentBaseOffset: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e = \u003cspan class=\"type\"\u003eLog\u003c/span\u003e.\u003cspan class=\"type\"\u003eUnknownOffset\u003c/span\u003e,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"class\"\u003e                             relativePositionInSegment: \u003cspan class=\"type\"\u003eInt\u003c/span\u003e = \u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e.\u003cspan class=\"type\"\u003eUnknownFilePosition\u003c/span\u003e\u003c/span\u003e) \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e三个参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emessageOffset\u003c/code\u003e：消息位移值，这是最重要的信息。我们总说高水位值，其实指的就是这个变量的值。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esegmentBaseOffset\u003c/code\u003e：保存该位移值所在日志段的起始位移。日志段起始位移值辅助计算两条消息在物理磁盘文件中位置的差值，即两条消息彼此隔了多少字节。这个计算有个前提条件，即两条消息必须处在同一个日志段对象上，不能跨日志段对象。否则它们就位于不同的物理文件上，计算这个值就没有意义了。这里的 segmentBaseOffset，就是用来判断两条消息是否处于同一个日志段的。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erelativePositionSegment\u003c/code\u003e：保存该位移值所在日志段的物理磁盘位置。这个字段在计算两个位移值之间的物理磁盘位置差值时非常有用。你可以想一想，Kafka 什么时候需要计算位置之间的字节数呢？答案就是在读取日志的时候。假设每次读取时只能读 1MB 的数据，那么，源码肯定需要关心两个位移之间所有消息的总字节数是否超过了 1MB。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"获取和设置高水位值\"\u003e\u003ca href=\"#获取和设置高水位值\" class=\"headerlink\" title=\"获取和设置高水位值\"\u003e\u003c/a\u003e获取和设置高水位值\u003c/h5\u003e\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eupdateHighWatermarkMetadata\u003c/span\u003e\u003c/span\u003e(newHighWatermark: \u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e): \u003cspan class=\"type\"\u003eUnit\u003c/span\u003e = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (newHighWatermark.messageOffset \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// 高水位值不能是负数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eIllegalArgumentException\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;High watermark offset should be non-negative\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  lock synchronized { \u003cspan class=\"comment\"\u003e// 保护Log对象修改的Monitor锁\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    highWatermarkMetadata = newHighWatermark \u003cspan class=\"comment\"\u003e// 赋值新的高水位值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    producerStateManager.onHighWatermarkUpdated(newHighWatermark.messageOffset)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    maybeIncrementFirstUnstableOffset() \u003cspan class=\"comment\"\u003e// First Unstable Offset是Kafka事务机制\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  trace(\u003cspan class=\"string\"\u003es\u0026#34;Setting high watermark \u003cspan class=\"subst\"\u003e$newHighWatermark\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch5 id=\"更新高水位值\"\u003e\u003ca href=\"#更新高水位值\" class=\"headerlink\" title=\"更新高水位值\"\u003e\u003c/a\u003e更新高水位值\u003c/h5\u003e\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eupdateHighWatermark\u003c/span\u003e\u003c/span\u003e(hw: \u003cspan class=\"type\"\u003eLong\u003c/span\u003e): \u003cspan class=\"type\"\u003eLong\u003c/span\u003e = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 新高水位值一定介于[Log Start Offset，Log End Offset]之间\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eval\u003c/span\u003e newHighWatermark = \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (hw \u0026lt; logStartOffset)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logStartOffset\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (hw \u0026gt; logEndOffset)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logEndOffset\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    hw\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 设置高水位值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  updateHighWatermarkMetadata(\u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e(newHighWatermark))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 最后返回新高水位值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  newHighWatermark\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003emaybeIncrementHighWatermark\u003c/span\u003e\u003c/span\u003e(newHighWatermark: \u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e): \u003cspan class=\"type\"\u003eOption\u003c/span\u003e[\u003cspan class=\"type\"\u003eLogOffsetMetadata\u003c/span\u003e] = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 新高水位值不能越过Log End Offset\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (newHighWatermark.messageOffset \u0026gt; logEndOffset)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eIllegalArgumentException\u003c/span\u003e(\u003cspan class=\"string\"\u003es\u0026#34;High watermark \u003cspan class=\"subst\"\u003e$newHighWatermark\u003c/span\u003e update exceeds current \u0026#34;\u003c/span\u003e +\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"string\"\u003es\u0026#34;log end offset \u003cspan class=\"subst\"\u003e$logEndOffsetMetadata\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  lock.synchronized {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eval\u003c/span\u003e oldHighWatermark = fetchHighWatermarkMetadata \u003cspan class=\"comment\"\u003e// 获取老的高水位值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 保证高水位单调递增。当新的偏移元数据位于较新的段上时，我们还会更新高水位线，每当日志滚动到新段时就会发生这种情况。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (oldHighWatermark.messageOffset \u0026lt; newHighWatermark.messageOffset ||\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      (oldHighWatermark.messageOffset == newHighWatermark.messageOffset \u0026amp;\u0026amp; oldHighWatermark.onOlderSegment(newHighWatermark))) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      updateHighWatermarkMetadata(newHighWatermark)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"type\"\u003eSome\u003c/span\u003e(oldHighWatermark) \u003cspan class=\"comment\"\u003e// 返回老的高水位值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"type\"\u003eNone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这两个方法有着不同的用途。updateHighWatermark 方法，主要用在 Follower 副本从 Leader 副本获取到消息后更新高水位值。一旦拿到新的消息，就必须要更新高水位值；而 maybeIncrementHighWatermark 方法，主要是用来更新 Leader 副本的高水位值。需要注意的是，Leader 副本高水位值的更新是有条件的——某些情况下会更新高水位值，某些情况下可能不会。\u003c/p\u003e\n\u003ch5 id=\"读取高水位值\"\u003e\u003ca href=\"#读取高水位值\" class=\"headerlink\" title=\"读取高水位值\"\u003e\u003c/a\u003e读取高水位值\u003c/h5\u003e\u003cfigure class=\"highlight fsharp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e def fetchHighWatermarkMetadata\u003cspan class=\"operator\"\u003e:\u003c/span\u003e LogOffsetMetadata \u003cspan class=\"operator\"\u003e=\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  checkIfMemoryMappedBufferClosed() \u003cspan class=\"comment\"\u003e// 读取时确保日志不能被关闭\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eval\u003c/span\u003e offsetMetadata \u003cspan class=\"operator\"\u003e=\u003c/span\u003e highWatermarkMetadata \u003cspan class=\"comment\"\u003e// 保存当前高水位值到本地变量\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (offsetMetadata.messageOffsetOnly) { \u003cspan class=\"comment\"\u003e// 没有获得到完整的高水位元数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003elock\u003c/span\u003e.\u003cspan class=\"keyword\"\u003esynchronized\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"comment\"\u003e// 给定消息偏移量，在日志中找到其对应的偏移量元数据。如果消息偏移量超出范围，则抛出异常\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003eval\u003c/span\u003e fullOffset \u003cspan class=\"operator\"\u003e=\u003c/span\u003e convertToOffsetMetadataOrThrow(highWatermark)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      updateHighWatermarkMetadata(fullOffset) \u003cspan class=\"comment\"\u003e// 然后再更新一下高水位对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      fullOffset\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    offsetMetadata\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"日志段管理\"\u003e\u003ca href=\"#日志段管理\" class=\"headerlink\" title=\"日志段管理\"\u003e\u003c/a\u003e日志段管理\u003c/h4\u003e\u003cp\u003e添加\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@threadsafe\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eaddSegment\u003c/span\u003e\u003c/span\u003e(segment: \u003cspan class=\"type\"\u003eLogSegment\u003c/span\u003e): \u003cspan class=\"type\"\u003eLogSegment\u003c/span\u003e = \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.segments.put(segment.baseOffset, segment)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e删除\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003edeleteOldSegments\u003c/span\u003e\u003c/span\u003e(): \u003cspan class=\"type\"\u003eInt\u003c/span\u003e = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (config.delete) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    deleteRetentionMsBreachedSegments() + deleteRetentionSizeBreachedSegments() + deleteLogStartOffsetBreachedSegments()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    deleteLogStartOffsetBreachedSegments()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003edeleteOldSegments\u003c/span\u003e\u003c/span\u003e(predicate: (\u003cspan class=\"type\"\u003eLogSegment\u003c/span\u003e, \u003cspan class=\"type\"\u003eOption\u003c/span\u003e[\u003cspan class=\"type\"\u003eLogSegment\u003c/span\u003e]) =\u0026gt; \u003cspan class=\"type\"\u003eBoolean\u003c/span\u003e, reason: \u003cspan class=\"type\"\u003eString\u003c/span\u003e): \u003cspan class=\"type\"\u003eInt\u003c/span\u003e = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  lock synchronized {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eval\u003c/span\u003e deletable = deletableSegments(predicate)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (deletable.nonEmpty)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      info(\u003cspan class=\"string\"\u003es\u0026#34;Found deletable segments with base offsets [\u003cspan class=\"subst\"\u003e${deletable.map(_.baseOffset).mkString(\u0026#34;,\u0026#34;)}\u003c/span\u003e] due to \u003cspan class=\"subst\"\u003e$reason\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    deleteSegments(deletable)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e修改\u003c/p\u003e\n\u003cp\u003e源码里面不涉及修改日志段对象，所谓的修改或更新也就是替换而已，用新的日志段对象替换老的日志段对象。举个简单的例子。segments.put(1L, newSegment) 语句在没有 Key=1 时是添加日志段，否则就是替换已有日志段。\u003c/p\u003e\n\u003cp\u003e查询\u003c/p\u003e\n\u003cp\u003e主要都是利用了 ConcurrentSkipListMap 的现成方法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esegments.firstEntry：获取第一个日志段对象；\u003c/li\u003e\n\u003cli\u003esegments.lastEntry：获取最后一个日志段对象，即 Active Segment；\u003c/li\u003e\n\u003cli\u003esegments.higherEntry：获取第一个起始位移值 ≥ 给定 Key 值的日志段对象；\u003c/li\u003e\n\u003cli\u003esegments.floorEntry：获取最后一个起始位移值 ≤ 给定 Key 值的日志段对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"关键位移值管理\"\u003e\u003ca href=\"#关键位移值管理\" class=\"headerlink\" title=\"关键位移值管理\"\u003e\u003c/a\u003e关键位移值管理\u003c/h4\u003e\u003cp\u003eLog 对象维护了一些关键位移值数据，比如 Log Start Offset、LEO 等。\u003c/p\u003e\n\u003cp\u003eLog 对象中的 LEO 永远指向下一条待插入消息，也就是说，LEO 值上面是没有消息的\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@volatile\u003c/span\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e nextOffsetMetadata: LogOffsetMetadata = _\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eLog End Offset 对象被更新的时机：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e对象初始化时\u003c/strong\u003e：当 Log 对象初始化时，我们必须要创建一个 LEO 对象，并对其进行初始化。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e写入新消息时\u003c/strong\u003e：这个最容易理解。以上面的图为例，当不断向 Log 对象插入新消息时，LEO 值就像一个指针一样，需要不停地向右移动，也就是不断地增加。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLog 对象发生日志切分（Log Roll）时\u003c/strong\u003e：日志切分是啥呢？其实就是创建一个全新的日志段对象，并且关闭当前写入的日志段对象。这通常发生在当前日志段对象已满的时候。一旦发生日志切分，说明 Log 对象切换了 Active Segment，那么，LEO 中的起始位移值和段大小数据都要被更新，因此，在进行这一步操作时，我们必须要更新 LEO 对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e日志截断（Log Truncation）时\u003c/strong\u003e：这个也是显而易见的。日志中的部分消息被删除了，自然可能导致 LEO 值发生变化，从而要更新 LEO 对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLog Start Offset 被更新的时机：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLog 对象初始化时\u003c/strong\u003e：和 LEO 类似，Log 对象初始化时要给 Log Start Offset 赋值，一般是将第一个日志段的起始位移值赋值给它。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e日志截断时\u003c/strong\u003e：同理，一旦日志中的部分消息被删除，可能会导致 Log Start Offset 发生变化，因此有必要更新该值。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFollower 副本同步时\u003c/strong\u003e：一旦 Leader 副本的 Log 对象的 Log Start Offset 值发生变化。为了维持和 Leader 副本的一致性，Follower 副本也需要尝试去更新该值。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e删除日志段时\u003c/strong\u003e：这个和日志截断是类似的。凡是涉及消息删除的操作都有可能导致 LogStart Offset 值的变化。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e删除消息时\u003c/strong\u003e：严格来说，这个更新时机有点本末倒置了。在 Kafka 中，删除消息就是通过抬高 Log Start Offset 值来实现的，因此，删除消息时必须要更新该值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"读写操作\"\u003e\u003ca href=\"#读写操作\" class=\"headerlink\" title=\"读写操作\"\u003e\u003c/a\u003e读写操作\u003c/h4\u003e\u003cp\u003e写操作流程：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220706104752.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e读操作\u003c/p\u003e\n\u003cp\u003eread 方法中有 4 个参数：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003estartOffset，即从 Log 对象的哪个位移值开始读消息。\u003c/li\u003e\n\u003cli\u003emaxLength，即最多能读取多少字节。\u003c/li\u003e\n\u003cli\u003eisolation，设置读取隔离级别，主要控制能够读取的最大位移值，多用于 Kafka 事务。\u003c/li\u003e\n\u003cli\u003eminOneMessage，即是否允许至少读一条消息。设想如果消息很大，超过了 maxLength，正常情况下 read 方法永远不会返回任何消息。但如果设置了该参数为 true，read 方法就保证至少能够返回一条消息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"索引\"\u003e\u003ca href=\"#索引\" class=\"headerlink\" title=\"索引\"\u003e\u003c/a\u003e索引\u003c/h2\u003e\u003ch3 id=\"索引类图及源文件组织架构\"\u003e\u003ca href=\"#索引类图及源文件组织架构\" class=\"headerlink\" title=\"索引类图及源文件组织架构\"\u003e\u003c/a\u003e索引类图及源文件组织架构\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eAbstractIndex.scala：它定义了最顶层的抽象类，这个类封装了所有索引类型的公共操作。\u003c/li\u003e\n\u003cli\u003eLazyIndex.scala：它定义了 AbstractIndex 上的一个包装类，实现索引项延迟加载。这个类主要是为了提高性能。\u003c/li\u003e\n\u003cli\u003eOffsetIndex.scala：定义位移索引，保存“\u0026lt; 位移值，文件磁盘物理位置 \u0026gt;”对。\u003c/li\u003e\n\u003cli\u003eTimeIndex.scala：定义时间戳索引，保存“\u0026lt; 时间戳，位移值 \u0026gt;”对。\u003c/li\u003e\n\u003cli\u003eTransactionIndex.scala：定义事务索引，为已中止事务（Aborted Transcation）保存重要的元数据信息。只有启用 Kafka 事务后，这个索引才有可能出现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220706142040.png\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"AbstractIndex-代码结构\"\u003e\u003ca href=\"#AbstractIndex-代码结构\" class=\"headerlink\" title=\"AbstractIndex 代码结构\"\u003e\u003c/a\u003eAbstractIndex 代码结构\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e索引文件（file）。每个索引对象在磁盘上都对应了一个索引文件。你可能注意到了，这个字段是 var 型，说明它是可以被修改的。难道索引对象还能动态更换底层的索引文件吗？是的。自 1.1.0 版本之后，Kafka 允许迁移底层的日志路径，所以，索引文件自然要是可以更换的。\u003c/li\u003e\n\u003cli\u003e起始位移值（baseOffset）。索引对象对应日志段对象的起始位移值。举个例子，如果你查看 Kafka 日志路径的话，就会发现，日志文件和索引文件都是成组出现的。比如说，如果日志文件是 00000000000000000123.log，正常情况下，一定还有一组索引文件 00000000000000000123.index、00000000000000000123.timeindex 等。这里的“123”就是这组文件的起始位移值，也就是 baseOffset 值。\u003c/li\u003e\n\u003cli\u003e索引文件最大字节数（maxIndexSize）。它控制索引文件的最大长度。Kafka 源码传入该参数的值是 Broker 端参数 segment.index.bytes 的值，即 10MB。这就是在默认情况下，所有 Kafka 索引文件大小都是 10MB 的原因。\u003c/li\u003e\n\u003cli\u003e索引文件打开方式（writable）。“True”表示以“读写”方式打开，“False”表示以“只读”方式打开。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"位移索引\"\u003e\u003ca href=\"#位移索引\" class=\"headerlink\" title=\"位移索引\"\u003e\u003c/a\u003e位移索引\u003c/h3\u003e\u003cp\u003e位移索引也就是所谓的 OffsetIndex。Key 就是消息的相对位移，Value 是保存该消息的日志段文件中该消息第一个字节的物理文件位置。\u003c/p\u003e\n\u003ch2 id=\"参考资料\"\u003e\u003ca href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"\u003e\u003c/a\u003e参考资料\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://time.geekbang.org/column/intro/304\"\u003eKafka 核心源码解读\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-07-03T06:53:05Z",
  "Author": "钝悟 ◾ Dunwu"
}