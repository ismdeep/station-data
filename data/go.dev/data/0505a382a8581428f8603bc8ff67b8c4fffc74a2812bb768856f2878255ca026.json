{
  "Source": "go.dev",
  "Title": "New module changes in Go 1.16",
  "Link": "https://go.dev/blog/go116-module-changes",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go116-module-changes\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eNew module changes in Go 1.16\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Jay Conrod\u003cbr/\u003e\n      18 February 2021\n      \u003c/p\u003e\n      \n      \u003cp\u003eWe hope you’re enjoying Go 1.16!\nThis release has a lot of new features, especially for modules.\nThe \u003ca href=\"/doc/go1.16\"\u003erelease notes\u003c/a\u003e describe these changes briefly, but let’s explore a few of them in depth.\u003c/p\u003e\n\u003ch2 id=\"modules-on-by-default\"\u003eModules on by default\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ego\u003c/code\u003e command now builds packages in module-aware mode by default, even when no \u003ccode\u003ego.mod\u003c/code\u003e is present.\nThis is a big step toward using modules in all projects.\u003c/p\u003e\n\u003cp\u003eIt’s still possible to build packages in GOPATH mode by setting the \u003ccode\u003eGO111MODULE\u003c/code\u003e environment variable to \u003ccode\u003eoff\u003c/code\u003e.\nYou can also set \u003ccode\u003eGO111MODULE\u003c/code\u003e to \u003ccode\u003eauto\u003c/code\u003e to enable module-aware mode only when a go.mod file is present in the current directory or any parent directory.\nThis was previously the default.\nNote that you can set \u003ccode\u003eGO111MODULE\u003c/code\u003e and other variables permanently with \u003ccode\u003ego env -w\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ego env -w GO111MODULE=auto\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe plan to drop support for GOPATH mode in Go 1.17.\nIn other words, Go 1.17 will ignore \u003ccode\u003eGO111MODULE\u003c/code\u003e.\nIf you have projects that do not build in module-aware mode, now is the time to migrate.\nIf there is a problem preventing you from migrating, please consider filing an \u003ca href=\"/issue/new\"\u003eissue\u003c/a\u003e or an \u003ca href=\"/wiki/ExperienceReports\"\u003eexperience report\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"no-automatic-changes-to-gomod-and-gosum\"\u003eNo automatic changes to go.mod and go.sum\u003c/h2\u003e\n\u003cp\u003ePreviously, when the \u003ccode\u003ego\u003c/code\u003e command found a problem with \u003ccode\u003ego.mod\u003c/code\u003e or \u003ccode\u003ego.sum\u003c/code\u003e like a missing \u003ccode\u003erequire\u003c/code\u003e directive or a missing sum, it would attempt to fix the problem automatically.\nWe received a lot of feedback that this behavior was surprising, especially for commands like \u003ccode\u003ego list\u003c/code\u003e that don’t normally have side effects.\nThe automatic fixes weren’t always desirable: if an imported package wasn’t provided by any required module, the \u003ccode\u003ego\u003c/code\u003e command would add a new dependency, possibly triggering upgrades of common dependencies.\nEven a misspelled import path would result in a (failed) network lookup.\u003c/p\u003e\n\u003cp\u003eIn Go 1.16, module-aware commands report an error after discovering a problem in \u003ccode\u003ego.mod\u003c/code\u003e or \u003ccode\u003ego.sum\u003c/code\u003e instead of attempting to fix the problem automatically.\nIn most cases, the error message recommends a command to fix the problem.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go build\nexample.go:3:8: no required module provides package golang.org/x/net/html; to add it:\n    go get golang.org/x/net/html\n$ go get golang.org/x/net/html\n$ go build\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs before, the \u003ccode\u003ego\u003c/code\u003e command may use the \u003ccode\u003evendor\u003c/code\u003e directory if it’s present (see \u003ca href=\"/ref/mod#vendoring\"\u003eVendoring\u003c/a\u003e for details).\nCommands like \u003ccode\u003ego get\u003c/code\u003e and \u003ccode\u003ego mod tidy\u003c/code\u003e still modify \u003ccode\u003ego.mod\u003c/code\u003e and \u003ccode\u003ego.sum\u003c/code\u003e, since their main purpose is to manage dependencies.\u003c/p\u003e\n\u003ch2 id=\"installing-an-executable-at-a-specific-version\"\u003eInstalling an executable at a specific version\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ego install\u003c/code\u003e command can now install an executable at a specific version by specifying an \u003ccode\u003e@version\u003c/code\u003e suffix.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ego install golang.org/x/tools/gopls@v0.6.5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using this syntax, \u003ccode\u003ego install\u003c/code\u003e installs the command from that exact module version, ignoring any \u003ccode\u003ego.mod\u003c/code\u003e files in the current directory and parent directories.\n(Without the \u003ccode\u003e@version\u003c/code\u003e suffix, \u003ccode\u003ego install\u003c/code\u003e continues to operate as it always has, building the program using the version requirements and replacements listed in the current module’s \u003ccode\u003ego.mod\u003c/code\u003e.)\u003c/p\u003e\n\u003cp\u003eWe used to recommend \u003ccode\u003ego get -u program\u003c/code\u003e to install an executable, but this use caused too much confusion with the meaning of \u003ccode\u003ego get\u003c/code\u003e for adding or changing module version requirements in \u003ccode\u003ego.mod\u003c/code\u003e.\nAnd to avoid accidentally modifying \u003ccode\u003ego.mod\u003c/code\u003e, people started suggesting more complex commands like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd $HOME; GO111MODULE=on go get program@latest\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can all use \u003ccode\u003ego install program@latest\u003c/code\u003e instead.\nSee \u003ca href=\"/ref/mod#go-install\"\u003e\u003ccode\u003ego install\u003c/code\u003e\u003c/a\u003e for details.\u003c/p\u003e\n\u003cp\u003eIn order to eliminate ambiguity about which versions are used, there are several restrictions on what directives may be present in the program’s \u003ccode\u003ego.mod\u003c/code\u003e file when using this install syntax.\nIn particular, \u003ccode\u003ereplace\u003c/code\u003e and \u003ccode\u003eexclude\u003c/code\u003e directives are not allowed, at least for now.\nIn the long term, once the new \u003ccode\u003ego install program@version\u003c/code\u003e is working well for enough use cases, we plan to make \u003ccode\u003ego get\u003c/code\u003e stop installing command binaries.\nSee \u003ca href=\"/issue/43684\"\u003eissue 43684\u003c/a\u003e for details.\u003c/p\u003e\n\u003ch2 id=\"module-retraction\"\u003eModule retraction\u003c/h2\u003e\n\u003cp\u003eHave you ever accidentally published a module version before it was ready?\nOr have you discovered a problem right after a version was published that needed to be fixed quickly?\nMistakes in published versions are difficult to correct.\nTo keep module builds deterministic, a version cannot be modified after it is published.\nEven if you delete or change a version tag, \u003ca href=\"https://proxy.golang.org\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003eproxy.golang.org\u003c/code\u003e\u003c/a\u003e and other proxies probably already have the original cached.\u003c/p\u003e\n\u003cp\u003eModule authors can now \u003cem\u003eretract\u003c/em\u003e module versions using the \u003ccode\u003eretract\u003c/code\u003e directive in \u003ccode\u003ego.mod\u003c/code\u003e.\nA retracted version still exists and can be downloaded (so builds that depend on it won’t break), but the \u003ccode\u003ego\u003c/code\u003e command won’t select it automatically when resolving versions like \u003ccode\u003e@latest\u003c/code\u003e.\n\u003ccode\u003ego get\u003c/code\u003e and \u003ccode\u003ego list -m -u\u003c/code\u003e will print warnings about existing uses.\u003c/p\u003e\n\u003cp\u003eFor example, suppose the author of a popular library \u003ccode\u003eexample.com/lib\u003c/code\u003e releases \u003ccode\u003ev1.0.5\u003c/code\u003e, then discovers a new security issue.\nThey can add a directive to their \u003ccode\u003ego.mod\u003c/code\u003e file like the one below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Remote-triggered crash in package foo. See CVE-2021-01234.\nretract v1.0.5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, the author can tag and push version \u003ccode\u003ev1.0.6\u003c/code\u003e, the new highest version.\nAfter this, users that already depend on \u003ccode\u003ev1.0.5\u003c/code\u003e will be notified of the retraction when they check for updates or when they upgrade a dependent package.\nThe notification message may include text from the comment above the \u003ccode\u003eretract\u003c/code\u003e directive.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go list -m -u all\nexample.com/lib v1.0.0 (retracted)\n$ go get .\ngo: warning: example.com/lib@v1.0.5: retracted by module author:\n    Remote-triggered crash in package foo. See CVE-2021-01234.\ngo: to switch to the latest unretracted version, run:\n    go get example.com/lib@latest\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor an interactive, browser-based guide, check out \u003ca href=\"https://play-with-go.dev/retract-module-versions_go116_en/\" rel=\"noreferrer\" target=\"_blank\"\u003eRetract Module Versions\u003c/a\u003e on \u003ca href=\"https://play-with-go.dev/\" rel=\"noreferrer\" target=\"_blank\"\u003eplay-with-go.dev\u003c/a\u003e.\nSee the \u003ca href=\"/ref/mod#go-mod-file-retract\"\u003e\u003ccode\u003eretract\u003c/code\u003e directive docs\u003c/a\u003e for syntax details.\u003c/p\u003e\n\u003ch2 id=\"controlling-version-control-tools-with-govcs\"\u003eControlling version control tools with GOVCS\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ego\u003c/code\u003e command can download module source code from a mirror like \u003ca href=\"https://proxy.golang.org\" rel=\"noreferrer\" target=\"_blank\"\u003eproxy.golang.org\u003c/a\u003e or directly from a version control repository using \u003ccode\u003egit\u003c/code\u003e, \u003ccode\u003ehg\u003c/code\u003e, \u003ccode\u003esvn\u003c/code\u003e, \u003ccode\u003ebzr\u003c/code\u003e, or \u003ccode\u003efossil\u003c/code\u003e.\nDirect version control access is important, especially for private modules that aren’t available on proxies, but it’s also potentially a security problem: a bug in a version control tool may be exploited by a malicious server to run unintended code.\u003c/p\u003e\n\u003cp\u003eGo 1.16 introduces a new configuration variable, \u003ccode\u003eGOVCS\u003c/code\u003e, which lets the user specify which modules are allowed to use specific version control tools.\n\u003ccode\u003eGOVCS\u003c/code\u003e accepts a comma-separated list of \u003ccode\u003epattern:vcslist\u003c/code\u003e rules.\nThe \u003ccode\u003epattern\u003c/code\u003e is a \u003ca href=\"/pkg/path#Match\"\u003e\u003ccode\u003epath.Match\u003c/code\u003e\u003c/a\u003e pattern matching one or more leading elements of a module path.\nThe special patterns \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003eprivate\u003c/code\u003e match public and private modules (\u003ccode\u003eprivate\u003c/code\u003e is defined as modules matched by patterns in \u003ccode\u003eGOPRIVATE\u003c/code\u003e; \u003ccode\u003epublic\u003c/code\u003e is everything else).\nThe \u003ccode\u003evcslist\u003c/code\u003e is a pipe-separated list of allowed version control commands or the keyword \u003ccode\u003eall\u003c/code\u003e or \u003ccode\u003eoff\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGOVCS=github.com:git,evil.com:off,*:git|hg\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this setting, modules with paths on \u003ccode\u003egithub.com\u003c/code\u003e can be downloaded using \u003ccode\u003egit\u003c/code\u003e; paths on \u003ccode\u003eevil.com\u003c/code\u003e cannot be downloaded using any version control command, and all other paths (\u003ccode\u003e*\u003c/code\u003e matches everything) can be downloaded using \u003ccode\u003egit\u003c/code\u003e or \u003ccode\u003ehg\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003eGOVCS\u003c/code\u003e is not set, or if a module does not match any pattern, the \u003ccode\u003ego\u003c/code\u003e command uses this default: \u003ccode\u003egit\u003c/code\u003e and \u003ccode\u003ehg\u003c/code\u003e are allowed for public modules, and all tools are allowed for private modules.\nThe rationale behind allowing only Git and Mercurial is that these two systems have had the most attention to issues of being run as clients of untrusted servers.\nIn contrast, Bazaar, Fossil, and Subversion have primarily been used in trusted, authenticated environments and are not as well scrutinized as attack surfaces.\nThat is, the default setting is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGOVCS=public:git|hg,private:all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee \u003ca href=\"/ref/mod#vcs-govcs\"\u003eControlling version control tools with \u003ccode\u003eGOVCS\u003c/code\u003e\u003c/a\u003e for more details.\u003c/p\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat’s next?\u003c/h2\u003e\n\u003cp\u003eWe hope you find these features useful. We’re already hard at work on the next set of module features for Go 1.17, particularly \u003ca href=\"/issue/36460\"\u003elazy module loading\u003c/a\u003e, which should make the module loading process faster and more stable.\nAs always, if you run into new bugs, please let us know on the \u003ca href=\"https://github.com/golang/go/issues\" rel=\"noreferrer\" target=\"_blank\"\u003eissue tracker\u003c/a\u003e. Happy coding!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-02-18T00:00:00Z",
  "Author": "Jay Conrod"
}