{
  "Source": "go.dev",
  "Title": "Go on App Engine: tools, tests, and concurrency",
  "Link": "https://go.dev/blog/appengine-dec2013",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/appengine-dec2013\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo on App Engine: tools, tests, and concurrency\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Andrew Gerrand and Johan Euphrosine\u003cbr/\u003e\n      13 December 2013\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eWhen we \u003ca href=\"/blog/go-and-google-app-engine\"\u003elaunched Go for App Engine\u003c/a\u003e\nin May 2011 the SDK was just a modified version of the Python SDK.\nAt the time, there was no canonical way to build or organize Go programs, so it\nmade sense to take the Python approach. Since then Go 1.0 was released,\nincluding the \u003ca href=\"/cmd/go/\"\u003ego tool\u003c/a\u003e and a\n\u003ca href=\"/doc/code.html\"\u003econvention\u003c/a\u003e for organizing Go programs.\u003c/p\u003e\n\u003cp\u003eIn January 2013 we announced\n\u003ca href=\"/blog/the-app-engine-sdk-and-workspaces-gopath\"\u003ebetter integration\u003c/a\u003e\nbetween the Go App Engine SDK and the go tool, promoting the use of\nconventional import paths in App Engine apps and making it possible to use “go\nget” to fetch app dependencies.\u003c/p\u003e\n\u003cp\u003eWith the recent release of App Engine 1.8.8 we are pleased to announce more\nimprovements to the developer experience for Go on App Engine.\u003c/p\u003e\n\u003ch2 id=\"the-goapp-tool\"\u003eThe goapp tool\u003c/h2\u003e\n\u003cp\u003eThe Go App Engine SDK now includes the “goapp” tool, an App Engine-specific\nversion of the “go” tool. The new name permits users to keep both the regular\n“go” tool and the “goapp” tool in their system PATH.\u003c/p\u003e\n\u003cp\u003eIn addition to the existing “go” tool \u003ca href=\"/cmd/go/\"\u003ecommands\u003c/a\u003e,\nthe “goapp” tool provides new commands for working with App Engine apps.\nThe “\u003ca href=\"https://developers.google.com/appengine/docs/go/tools/devserver\" rel=\"noreferrer\" target=\"_blank\"\u003egoapp serve\u003c/a\u003e”\ncommand starts the local development server and the\n“\u003ca href=\"https://developers.google.com/appengine/docs/go/tools/uploadinganapp\" rel=\"noreferrer\" target=\"_blank\"\u003egoapp deploy\u003c/a\u003e”\ncommand uploads an app to App Engine.\u003c/p\u003e\n\u003cp\u003eThe main advantages offered by the “goapp serve” and “goapp deploy” commands\nare a simplified user interface and consistency with existing commands like\n“go get” and “go fmt”.\nFor example, to run a local instance of the app in the current directory, run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ goapp serve\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo upload it to App Engine:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ goapp deploy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also specify the Go import path to serve or deploy:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ goapp serve github.com/user/myapp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can even specify a YAML file to serve or deploy a specific\n\u003ca href=\"https://developers.google.com/appengine/docs/go/modules/\" rel=\"noreferrer\" target=\"_blank\"\u003emodule\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ goapp deploy mymodule.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese commands can replace most uses of \u003ccode\u003edev_appserver.py\u003c/code\u003e and \u003ccode\u003eappcfg.py\u003c/code\u003e,\nalthough the Python tools are still available for their less common uses.\u003c/p\u003e\n\u003ch2 id=\"local-unit-testing\"\u003eLocal unit testing\u003c/h2\u003e\n\u003cp\u003eThe Go App Engine SDK now supports local unit testing, using Go’s native\n\u003ca href=\"https://developers.google.com/appengine/docs/go/tools/localunittesting\" rel=\"noreferrer\" target=\"_blank\"\u003etesting package\u003c/a\u003e\nand the “\u003ca href=\"/cmd/go/#hdr-Test_packages\"\u003ego test\u003c/a\u003e” command\n(provided as “goapp test” by the SDK).\u003c/p\u003e\n\u003cp\u003eFurthermore, you can now write tests that use App Engine services.\nThe \u003ca href=\"https://developers.google.com/appengine/docs/go/tools/localunittesting#Go_Introducing_the_aetest_package\" rel=\"noreferrer\" target=\"_blank\"\u003eaetest package\u003c/a\u003e\nprovides an appengine.Context value that delegates requests to a temporary\ninstance of the development server.\u003c/p\u003e\n\u003cp\u003eFor more information about using “goapp test” and the aetest package, see the\n\u003ca href=\"https://developers.google.com/appengine/docs/go/tools/localunittesting\" rel=\"noreferrer\" target=\"_blank\"\u003eLocal Unit Testing for Go documentation\u003c/a\u003e.\nNote that the aetest package is still in its early days;\nwe hope to add more features over time.\u003c/p\u003e\n\u003ch2 id=\"better-concurrency-support\"\u003eBetter concurrency support\u003c/h2\u003e\n\u003cp\u003eIt is now possible to configure the number of concurrent requests served by\neach of your app’s dynamic instances by setting the\n\u003ca href=\"https://developers.google.com/appengine/docs/go/modules/#max_concurrent_requests\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003emax_concurrent_requests\u003c/code\u003e\u003c/a\u003e option\n(available to \u003ca href=\"https://developers.google.com/appengine/docs/go/modules/#automatic_scaling\" rel=\"noreferrer\" target=\"_blank\"\u003eAutomatic Scaling modules\u003c/a\u003e only).\u003c/p\u003e\n\u003cp\u003eHere’s an example \u003ccode\u003eapp.yaml\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapplication: maxigopher\nversion: 1\nruntime: go\napi_version: go1\nautomatic_scaling:\n  max_concurrent_requests: 100\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis configures each instance of the app to serve up to 100 requests\nconcurrently (up from the default of 10). You can configure Go instances to\nserve up to a maximum of 500 concurrent requests.\u003c/p\u003e\n\u003cp\u003eThis setting allows your instances to handle more simultaneous requests by\ntaking advantage of Go’s efficient handling of concurrency, which should yield\nbetter instance utilization and ultimately fewer billable instance hours.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWith these changes Go on App Engine is more convenient and efficient than ever,\nand we hope you enjoy the improvements. Please join the\n\u003ca href=\"http://groups.google.com/group/google-appengine-go/\" rel=\"noreferrer\" target=\"_blank\"\u003egoogle-appengine-go group\u003c/a\u003e\nto raise questions or discuss these changes with the engineering team and the\nrest of the community.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2013-12-13T00:00:00Z",
  "Author": "Andrew Gerrand and Johan Euphrosine"
}