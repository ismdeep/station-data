{
  "Source": "go.dev",
  "Title": "Eleven Years of Go",
  "Link": "https://go.dev/blog/11years",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/11years\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eEleven Years of Go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Russ Cox, for the Go team\u003cbr/\u003e\n      10 November 2020\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday we celebrate the eleventh birthday of the Go open source release.\nThe parties we had for\n\u003ca href=\"/blog/10years\"\u003eGo turning 10\u003c/a\u003e\nseem like a distant memory.\nIt’s been a tough year, but\nwe’ve kept Go development moving forward\nand accumulated quite a few highlights.\u003c/p\u003e\n\u003cp\u003eIn November, we launched \u003ca href=\"/blog/go.dev\"\u003ego.dev and pkg.go.dev\u003c/a\u003e\nshortly after Go’s 10th birthday.\u003c/p\u003e\n\u003cp\u003eIn February, the \u003ca href=\"/blog/go1.14\"\u003eGo 1.14 release\u003c/a\u003e\ndelivered the first officially “production-ready” implementation of Go modules,\nalong with many performance improvements,\nincluding\n\u003ca href=\"/design/34481-opencoded-defers\"\u003efaster defers\u003c/a\u003e\nand\n\u003ca href=\"/design/24543/conservative-inner-frame\"\u003enon-cooperative goroutine preemption\u003c/a\u003e\nto reduce scheduling\nand garbage collection latency.\u003c/p\u003e\n\u003cp\u003eIn early March, we launched a\n\u003ca href=\"/blog/protobuf-apiv2\"\u003enew API for protocol buffers\u003c/a\u003e,\n\u003ca href=\"https://pkg.go.dev/google.golang.org/protobuf\" rel=\"noreferrer\" target=\"_blank\"\u003egoogle.golang.org/protobuf\u003c/a\u003e,\nwith much-improved support for protocol buffer reflection and custom messages.\u003c/p\u003e\n\u003cimg src=\"11years/gophermask.jpg\" height=\"450\" width=\"300\" align=\"right\" style=\"border: 2px solid black; margin: 0 0 1em 1em;\"/\u003e\n\u003cp\u003eWhen the pandemic hit, we decided to pause any public announcements\nor launches in the spring,\nrecognizing that everyone’s attention rightly belonged elsewhere.\nBut we kept working, and one of our team members joined the\nApple/Google collaboration on\n\u003ca href=\"https://www.google.com/covid19/exposurenotifications/\" rel=\"noreferrer\" target=\"_blank\"\u003eprivacy-preserving exposure notifications\u003c/a\u003e\nto support contact tracing efforts all over the world.\nIn May, that group launched the\n\u003ca href=\"https://github.com/google/exposure-notifications-server\" rel=\"noreferrer\" target=\"_blank\"\u003ereference backend server\u003c/a\u003e,\nwritten in Go.\u003c/p\u003e\n\u003cp\u003eWe continued to improve \u003ca href=\"https://www.youtube.com/watch?v=EFJfdWzBHwE\" rel=\"noreferrer\" target=\"_blank\"\u003egopls\u003c/a\u003e,\nwhich enables advanced\n\u003ca href=\"https://github.com/golang/tools/blob/master/gopls/doc/user.md\" rel=\"noreferrer\" target=\"_blank\"\u003eGo-aware support\u003c/a\u003e\nin many editors.\nIn June, the\n\u003ca href=\"/blog/vscode-go\"\u003eVSCode Go extension officially joined the Go project\u003c/a\u003e\nand is now maintained by the same developers who work on gopls.\u003c/p\u003e\n\u003cp\u003eAlso in June, thanks to your feedback, we open-sourced\n\u003ca href=\"/blog/pkgsite\"\u003ethe code behind pkg.go.dev\u003c/a\u003e\nas part of the Go project as well.\u003c/p\u003e\n\u003cp\u003eLater in June, we\n\u003ca href=\"/blog/generics-next-step\"\u003ereleased the latest design draft for generics\u003c/a\u003e,\nalong with a prototype tool and \u003ca href=\"https://go2goplay.golang.org/\" rel=\"noreferrer\" target=\"_blank\"\u003egenerics playground\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn July, we published and discussed three new design drafts for future changes:\n\u003ca href=\"/design/draft-gobuild\"\u003enew \u003ccode\u003e//go:build\u003c/code\u003e lines for file selection\u003c/a\u003e,\n\u003ca href=\"/design/draft-iofs\"\u003efile system interfaces\u003c/a\u003e,\nand\n\u003ca href=\"/design/draft-embed\"\u003ebuild-time file embedding\u003c/a\u003e.\n(We’ll see all of those in 2021, as noted below.)\u003c/p\u003e\n\u003cp\u003eIn August, the \u003ca href=\"/blog/go1.15\"\u003eGo 1.15 release\u003c/a\u003e\ndelivered mainly optimizations and bug fixes rather than new features.\nThe most significant was the start of a rewrite of the linker,\nmaking it run 20% faster and use 30% less memory\non average for large builds.\u003c/p\u003e\n\u003cp\u003eLast month, we ran our \u003ca href=\"/blog/survey2020\"\u003eannual Go user survey\u003c/a\u003e.\nWe will post results on the blog once we’ve analyzed them.\u003c/p\u003e\n\u003cp\u003eThe Go community has adapted to “virtual-first” along with everyone else,\nand we saw many virtual meetups and over a dozen virtual Go conferences this year.\nLast week, the Go team hosted\n\u003ca href=\"https://opensourcelive.withgoogle.com/events/go\" rel=\"noreferrer\" target=\"_blank\"\u003eGo day at Google Open Source Live\u003c/a\u003e\n(videos at the link).\u003c/p\u003e\n\u003ch2 id=\"going-forward\"\u003eGoing Forward\u003c/h2\u003e\n\u003cp\u003eWe’re also incredibly excited about what’s in store for Go’s 12th year.\nMost immediately, this week Go team members will\nbe presenting eight events at\n\u003ca href=\"https://www.gophercon.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eGopherCon 2020\u003c/a\u003e.\nMark your calendars!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“Typing [Generic] Go”,\na talk by Robert Griesemer,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/233094\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 11, 10:00 AM (US Eastern)\u003c/a\u003e;\n\u003ca href=\"https://www.gophercon.com/agenda/session/417935\" rel=\"noreferrer\" target=\"_blank\"\u003eQ\u0026amp;A at 10:30 AM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“What to Expect When You’re NOT Expecting”,\na live taping of the Go time podcast with a panel of expert debuggers,\nincluding Hana Kim,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/2334490\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 11 12:00 PM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“Evolving the Go Memory Manager’s RAM and CPU Efficiency”,\na talk by Michael Knyszek,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/233086\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 11 1:00 PM\u003c/a\u003e;\n\u003ca href=\"https://www.gophercon.com/agenda/session/417940\" rel=\"noreferrer\" target=\"_blank\"\u003eQ\u0026amp;A at 1:50 PM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“Implementing Faster Defers”,\na talk by Dan Scales,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/233397\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 11 5:10 PM\u003c/a\u003e;\n\u003ca href=\"https://www.gophercon.com/agenda/session/417941\" rel=\"noreferrer\" target=\"_blank\"\u003eQ\u0026amp;A at 5:40 PM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“Go Team - Ask Me Anything”,\na live Q\u0026amp;A with Julie Qiu, Rebecca Stambler, Russ Cox, Sameer Ajmani, and Van Riper,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/420539\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 12 3:00 PM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“Pardon the Interruption: Loop Preemption in Go 1.14”,\na talk by Austin Clements,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/233441\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 12 4:45 PM\u003c/a\u003e;\n\u003ca href=\"https://www.gophercon.com/agenda/session/417943\" rel=\"noreferrer\" target=\"_blank\"\u003eQ\u0026amp;A at 5:15 PM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“Working with Errors”,\na talk by Jonathan Amsterdam,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/233432\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 13 1:00 PM\u003c/a\u003e;\n\u003ca href=\"https://www.gophercon.com/agenda/session/417945\" rel=\"noreferrer\" target=\"_blank\"\u003eQ\u0026amp;A at 1:50 PM\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e“Crossing the Chasm for Go: Two Million Users and Growing”,\na talk by Carmen Andoh,\u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/233426\" rel=\"noreferrer\" target=\"_blank\"\u003eNov 13 5:55 PM\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"go-releases\"\u003eGo Releases\u003c/h2\u003e\n\u003cp\u003eIn February, the Go 1.16 release will include the new\n\u003ca href=\"https://tip.golang.org/pkg/io/fs/\" rel=\"noreferrer\" target=\"_blank\"\u003efile system interfaces\u003c/a\u003e\nand\n\u003ca href=\"https://tip.golang.org/pkg/embed/\" rel=\"noreferrer\" target=\"_blank\"\u003ebuild-time file embedding\u003c/a\u003e.\nIt will complete the linker rewrite, bringing additional performance improvements.\nAnd it will include support for the new Apple Silicon (\u003ccode\u003eGOARCH=arm64\u003c/code\u003e) Macs.\u003c/p\u003e\n\u003cp\u003eIn August, the Go 1.17 release will no doubt bring more features and improvements,\nalthough it’s far enough out that the exact details remain up in the air.\nIt will include a new register-based calling convention for x86-64\n(without breaking existing assembly!),\nwhich will make programs faster across the board.\n(Other architectures will follow in later releases.)\nOne nice feature that will definitely be included is the\n\u003ca href=\"/design/draft-gobuild\"\u003enew \u003ccode\u003e//go:build\u003c/code\u003e lines\u003c/a\u003e,\nwhich are far less error-prone than the\n\u003ca href=\"/cmd/go/#hdr-Build_constraints\"\u003ecurrent \u003ccode\u003e//\u003c/code\u003e \u003ccode\u003e+build\u003c/code\u003e lines\u003c/a\u003e.\nAnother highly anticipated feature we hope will be ready for beta testing next year\nis\n\u003ca href=\"/design/draft-fuzzing\"\u003esupport for fuzzing in the \u003ccode\u003ego test\u003c/code\u003e command\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"go-modules\"\u003eGo Modules\u003c/h2\u003e\n\u003cp\u003eOver the next year, we will continue to work on developing support for Go modules\nand integrating them well into the entire Go ecosystem.\nGo 1.16 will include our smoothest Go modules experience yet.\nOne preliminary result from our recent survey is that 96% of users\nhave now adopted Go modules (up from 90% a year ago).\u003c/p\u003e\n\u003cp\u003eWe will also finally wind down support for GOPATH-based development:\nany programs using dependencies other than the standard library will need a \u003ccode\u003ego.mod\u003c/code\u003e.\n(If you haven’t switched to modules yet, see the\n\u003ca href=\"/wiki/GOPATH\"\u003eGOPATH wiki page\u003c/a\u003e\nfor details about this final step in the journey from GOPATH to modules.)\u003c/p\u003e\n\u003cp\u003eFrom the start, the \u003ca href=\"https://research.swtch.com/vgo-intro\" rel=\"noreferrer\" target=\"_blank\"\u003egoal for Go modules\u003c/a\u003e\nhas been “to add the concept of package versions to the working vocabulary\nof both Go developers and our tools,”\nto enable deep support for modules and versions throughout the Go ecosystem.\nThe \u003ca href=\"/blog/modules2019\"\u003eGo module mirror, checksum database, and index\u003c/a\u003e\nwere made possible by this ecosystem-wide understanding of what a package version is.\nOver the next year, we will see rich module support added to more tools and systems.\nFor example, we plan to investigate new tooling to help module authors publish new versions\n(\u003ccode\u003ego release\u003c/code\u003e)\nas well as to help module consumers update their code to migrate away from\ndeprecated APIs (a new \u003ccode\u003ego fix\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eAs a larger example,\n\u003ca href=\"https://github.com/golang/tools/blob/master/gopls/README.md\" rel=\"noreferrer\" target=\"_blank\"\u003ewe created gopls\u003c/a\u003e\nto reduce many tools used by editors for Go support,\nnone of which supported modules, down to a single one that did.\nOver the next year,\nwe’ll be ready to make the VSCode Go extension use \u003ccode\u003egopls\u003c/code\u003e by default,\nfor an excellent module experience out of the box,\nand we’ll release gopls 1.0.\nOf course, one of the best things about gopls is that it is editor-neutral:\nany editor that understands the\n\u003ca href=\"https://langserver.org/\" rel=\"noreferrer\" target=\"_blank\"\u003elanguage server protocol\u003c/a\u003e\ncan use it.\u003c/p\u003e\n\u003cp\u003eAnother important use of version information is tracking whether\nany package in a build has a known vulnerability.\nOver the next year, we plan to develop a database of known vulnerabilities\nas well as tools to check your programs against that database.\u003c/p\u003e\n\u003cp\u003eThe Go package discovery site\n\u003ca href=\"https://pkg.go.dev/\" rel=\"noreferrer\" target=\"_blank\"\u003epkg.go.dev\u003c/a\u003e\nis another example of a version-aware system enabled by Go modules.\nWe’ve been focused on getting the core functionality and user experience right,\nincluding a\n\u003ca href=\"/blog/pkgsite-redesign\"\u003eredesign launching today\u003c/a\u003e.\nOver the next year,\nwe will be unifying godoc.org into pkg.go.dev.\nWe will also be expanding the version timeline for each package,\nshowing important changes in each version,\nknown vulnerabilities, and more,\nfollowing the overall goal of surfacing what you need to make\n\u003ca href=\"https://research.swtch.com/deps\" rel=\"noreferrer\" target=\"_blank\"\u003einformed decisions about adding dependencies\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe’re excited to see this journey from GOPATH to Go modules\nnearing completion and all the excellent dependency-aware tools\nthat Go modules are enabling.\u003c/p\u003e\n\u003ch2 id=\"generics\"\u003eGenerics\u003c/h2\u003e\n\u003cp\u003eThe next feature on everyone’s minds is of course generics.\nAs we mentioned above, we published the\n\u003ca href=\"/blog/generics-next-step\"\u003elatest design draft for generics\u003c/a\u003e\nback in June.\nSince then, we’ve continued to refine rough edges and have turned our\nattention to the details of implementing a production-ready version.\nWe will be working on that throughout 2021, with a goal of having\nsomething for people to try out by the end of the year,\nperhaps a part of the Go 1.18 betas.\u003c/p\u003e\n\u003ch2 id=\"thank-you\"\u003eThank You!\u003c/h2\u003e\n\u003cp\u003eGo is far more than just us on the Go team at Google.\nWe are indebted to the contributors who work with us with the Go releases and tools.\nBeyond that, Go only succeeds because of all of you who work in\nand contribute to Go’s thriving ecosystem.\nIt has been a difficult year in the world outside Go.\nMore than ever, we appreciate you taking the time\nto join us and help make Go such a success.\nThank you.\nWe hope you are all staying safe and wish you all the best.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-11-10T00:00:00Z",
  "Author": "Russ Cox, for the Go team"
}