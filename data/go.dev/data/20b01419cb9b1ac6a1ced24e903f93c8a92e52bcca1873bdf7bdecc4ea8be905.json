{
  "Source": "go.dev",
  "Title": "The Next Step for Generics",
  "Link": "https://go.dev/blog/generics-next-step",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/generics-next-step\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eThe Next Step for Generics\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Ian Lance Taylor and Robert Griesemer\u003cbr/\u003e\n      16 June 2020\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIt’s been almost a year since we \u003ca href=\"/blog/why-generics\"\u003elast wrote about the possibility of\nadding generics to Go\u003c/a\u003e.\nIt’s time for an update.\u003c/p\u003e\n\u003ch2 id=\"updated-design\"\u003eUpdated design\u003c/h2\u003e\n\u003cp\u003eWe’ve been continuing to refine the \u003ca href=\"https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-contracts.md\" rel=\"noreferrer\" target=\"_blank\"\u003egenerics design\ndraft\u003c/a\u003e.\nWe’ve written a type checker for it: a program that can parse Go code\nthat uses generics as described in the design draft and report any\ntype errors.\nWe’ve written example code.\nAnd we’ve collected feedback from many, many people—thanks for\nproviding it!\u003c/p\u003e\n\u003cp\u003eBased on what we’ve learned, we’re releasing an \u003ca href=\"https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md\" rel=\"noreferrer\" target=\"_blank\"\u003eupdated design\ndraft\u003c/a\u003e.\nThe biggest change is that we are dropping the idea of contracts.\nThe difference between contracts and interface types was confusing, so\nwe’re eliminating that difference.\nType parameters are now constrained by interface types.\nInterface types are now permitted to include type lists, though only\nwhen used as constraints; in the previous design draft type lists were\na feature of contracts.\nMore complex cases will use a parameterized interface type.\u003c/p\u003e\n\u003cp\u003eWe hope that people will find this design draft simpler and easier to\nunderstand.\u003c/p\u003e\n\u003ch2 id=\"experimentation-tool\"\u003eExperimentation tool\u003c/h2\u003e\n\u003cp\u003eTo help decide how to further refine the design draft, we are\nreleasing a translation tool.\nThis is a tool that permits people to type check and run code written\nusing the version of generics described in the design draft.\nIt works by translating generic code into ordinary Go code.\nThis translation process imposes some limitations, but we hope that it\nwill be good enough for people to get a feel for what generic Go code\nmight look like.\nThe real implementation of generics, if they are accepted into the\nlanguage, will work differently.\n(We have only just begun to sketch out what a direct compiler\nimplementation would look like.)\u003c/p\u003e\n\u003cp\u003eThe tool is available on a variant of the Go playground at\n\u003ca href=\"https://go2goplay.golang.org\" rel=\"noreferrer\" target=\"_blank\"\u003ehttps://go2goplay.golang.org\u003c/a\u003e.\nThis playground works just like the usual Go playground, but it\nsupports generic code.\u003c/p\u003e\n\u003cp\u003eYou can also build and use the tool yourself.\nIt is available in a branch of the master Go repo.\nFollow the \u003ca href=\"/doc/install/source\"\u003einstructions on installing Go from\nsource\u003c/a\u003e.\nWhere those instructions direct you to check out the latest release\ntag, instead run \u003ccode\u003egit checkout dev.go2go\u003c/code\u003e.\nThen build the Go toolchain as directed.\u003c/p\u003e\n\u003cp\u003eThe translation tool is documented in\n\u003ca href=\"https://go.googlesource.com/go/+/refs/heads/dev.go2go/README.go2go.md\" rel=\"noreferrer\" target=\"_blank\"\u003eREADME.go2go\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"next-steps\"\u003eNext steps\u003c/h2\u003e\n\u003cp\u003eWe hope that the tool will give the Go community a chance to\nexperiment with generics.\nThere are two main things that we hope to learn.\u003c/p\u003e\n\u003cp\u003eFirst, does generic code make sense?\nDoes it feel like Go?\nWhat surprises do people encounter?\nAre the error messages useful?\u003c/p\u003e\n\u003cp\u003eSecond, we know that many people have said that Go needs generics, but\nwe don’t necessarily know exactly what that means.\nDoes this draft design address the problem in a useful way?\nIf there is a problem that makes you think “I could solve this if Go\nhad generics,” can you solve the problem when using this tool?\u003c/p\u003e\n\u003cp\u003eWe will use the feedback we gather from the Go community to decide how\nto move forward.\nIf the draft design is well received and doesn’t need significant\nchanges, the next step would be a \u003ca href=\"/s/proposal\"\u003eformal language change\nproposal\u003c/a\u003e.\nTo set expectations, if everybody is completely happy with the design\ndraft and it does not require any further adjustments, the earliest\nthat generics could be added to Go would be the Go 1.17 release,\nscheduled for August 2021.\nIn reality, of course, there may be unforeseen problems, so this is an\noptimistic timeline; we can’t make any definite prediction.\u003c/p\u003e\n\u003ch2 id=\"feedback\"\u003eFeedback\u003c/h2\u003e\n\u003cp\u003eThe best way to provide feedback for the language changes will be on\nthe mailing list \u003ccode\u003egolang-nuts@googlegroups.com\u003c/code\u003e.\nMailing lists are imperfect, but they seem like our best option for\ninitial discussion.\nWhen writing about the design draft, please put \u003ccode\u003e[generics]\u003c/code\u003e at the\nstart of the Subject line and to start different threads for different\nspecific topics.\u003c/p\u003e\n\u003cp\u003eIf you find bugs in the generics type checker or the translation tool,\nthey should be filed in the standard Go issue tracker at\n\u003ca href=\"/issue\"\u003ego.dev/issue\u003c/a\u003e.\nPlease start the issue title with \u003ccode\u003ecmd/go2go:\u003c/code\u003e.\nNote that the issue tracker is not the best place to discuss changes\nto the language, because it does not provide threading and it is not\nwell suited to lengthy conversations.\u003c/p\u003e\n\u003cp\u003eWe look forward to your feedback.\u003c/p\u003e\n\u003ch2 id=\"acknowledgements\"\u003eAcknowledgements\u003c/h2\u003e\n\u003cp\u003eWe’re not finished, but we’ve come a long way.\nWe would not be here without a lot of help.\u003c/p\u003e\n\u003cp\u003eWe’d like to thank Philip Wadler and his collaborators for thinking\nformally about generics in Go and helping us clarify the theoretical\naspects of the design.\nTheir paper \u003ca href=\"https://arxiv.org/abs/2005.11710\" rel=\"noreferrer\" target=\"_blank\"\u003eFeatherweight Go\u003c/a\u003e\nanalyzes generics in a restricted version of Go, and they have\ndeveloped a prototype \u003ca href=\"https://github.com/rhu1/fgg\" rel=\"noreferrer\" target=\"_blank\"\u003eon GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe would also like to thank \u003ca href=\"https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md#acknowledgements\" rel=\"noreferrer\" target=\"_blank\"\u003ethe\npeople\u003c/a\u003e\nwho provided detailed feedback on an earlier version of the design\ndraft.\u003c/p\u003e\n\u003cp\u003eAnd last but definitely not least, we’d like to thank many people on\nthe Go team, many contributors to the Go issue tracker, and everybody\nelse who shared ideas and feedback on earlier design drafts.\nWe read all of it, and we’re grateful.  We wouldn’t be here without\nyou.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-16T00:00:00Z",
  "Author": "Ian Lance Taylor and Robert Griesemer"
}