{
  "Source": "go.dev",
  "Title": "Go 2, here we come!",
  "Link": "https://go.dev/blog/go2-here-we-come",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go2-here-we-come\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 2, here we come!\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Robert Griesemer\u003cbr/\u003e\n      29 November 2018\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eAt GopherCon 2017, Russ Cox officially started the thought process on the\nnext big version of Go with his talk \u003ca href=\"https://www.youtube.com/watch?v=0Zbh_vmAKvk\" rel=\"noreferrer\" target=\"_blank\"\u003eThe Future of Go\u003c/a\u003e\n(\u003ca href=\"/blog/toward-go2\"\u003eblog post\u003c/a\u003e). We have\ncalled this future language informally Go 2, even though we understand now\nthat it will arrive in incremental steps rather than with a big bang and a\nsingle major release. Still, Go 2 is a useful moniker, if only to have a way\nto talk about that future language, so let’s keep using it for now.\u003c/p\u003e\n\u003cp\u003eA major difference between Go 1 and Go 2 is who is going to influence the\ndesign and how decisions are made. Go 1 was a small team effort with modest\noutside influence; Go 2 will be much more community-driven.\nAfter almost 10 years of exposure, we have\nlearned a lot about the language and libraries that we didn’t know in the\nbeginning, and that was only possible through feedback from the Go community.\u003c/p\u003e\n\u003cp\u003eIn 2015 we introduced the \u003ca href=\"/s/proposal\"\u003eproposal process\u003c/a\u003e\nto gather a specific kind of feedback: proposals for language and library\nchanges. A committee composed of senior Go team members has been reviewing,\ncategorizing, and deciding on incoming proposals on a regular basis. That\nhas worked pretty well, but as part of that process we have ignored all\nproposals that are not backward-compatible, simply labeling them Go 2 instead.\nIn 2017 we also stopped making any kind of incremental backward-compatible\nlanguage changes, however small, in favor of a more comprehensive plan that\ntakes the bigger picture of Go 2 into account.\u003c/p\u003e\n\u003cp\u003eIt is now time to act on the Go 2 proposals, but to do this we first need a plan.\u003c/p\u003e\n\u003ch2 id=\"status\"\u003eStatus\u003c/h2\u003e\n\u003cp\u003eAt the time of writing, there are around 120\n\u003ca href=\"https://github.com/golang/go/issues?page=1\u0026amp;q=is%3Aissue+is%3Aopen+label%3Aproposal+label%3AGo2\u0026amp;utf8=%E2%9C%93\" rel=\"noreferrer\" target=\"_blank\"\u003eopen issues labeled Go 2 proposal\u003c/a\u003e.\nEach of them proposes a significant library or language change, often one\nthat does not satisfy the existing\n\u003ca href=\"/doc/go1compat\"\u003eGo 1 compatibility guarantee\u003c/a\u003e.\nIan Lance Taylor and I\nhave been working through these proposals and categorized them\n(\u003ca href=\"https://github.com/golang/go/issues?utf8=%E2%9C%93\u0026amp;q=is%3Aissue+is%3Aopen+label%3Aproposal+label%3AGo2+label%3AGo2Cleanup\" rel=\"noreferrer\" target=\"_blank\"\u003eGo2Cleanup\u003c/a\u003e,\n\u003ca href=\"https://github.com/golang/go/issues?utf8=%E2%9C%93\u0026amp;q=is%3Aissue+is%3Aopen+label%3Aproposal+label%3AGo2+label%3ANeedsDecision\" rel=\"noreferrer\" target=\"_blank\"\u003eNeedsDecision\u003c/a\u003e,\netc.) to get an idea of what’s there and to make it easier to\nproceed with them. We also merged related proposals and closed the ones which\nseemed clearly out of the scope of Go, or were otherwise unactionable.\u003c/p\u003e\n\u003cp\u003eIdeas from the remaining proposals will likely influence Go 2’s libraries\nand languages. Two major themes have emerged early on: support for better\nerror handling, and generics. \u003ca href=\"/blog/go2draft\"\u003eDraft designs\u003c/a\u003e\nfor these two areas have been\npublished at this year’s GopherCon, and more exploration is needed.\u003c/p\u003e\n\u003cp\u003eBut what about the rest? We are \u003ca href=\"/blog/toward-go2\"\u003econstrained\u003c/a\u003e\nby the fact that we now have\nmillions of Go programmers and a large body of Go code, and we need to\nbring it all along, lest we risk a split ecosystem. That means we cannot\nmake many changes, and the changes we are going to make need to be chosen\ncarefully. To make progress, we are implementing a new proposal evaluation\nprocess for these significant potential changes.\u003c/p\u003e\n\u003ch2 id=\"proposal-evaluation-process\"\u003eProposal evaluation process\u003c/h2\u003e\n\u003cp\u003eThe purpose of the proposal evaluation process is to collect feedback on\na small number of select proposals such that a final decision can be made.\nThe process runs more or less in parallel to a release cycle and consists\nof the following steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eProposal selection\u003c/em\u003e. The Go team selects a small number of\n\u003ca href=\"https://github.com/golang/go/issues?utf8=%E2%9C%93\u0026amp;q=is%3Aissue+is%3Aopen+label%3AGo2+label%3AProposal\" rel=\"noreferrer\" target=\"_blank\"\u003eGo 2 proposals\u003c/a\u003e\nthat seem worth considering for acceptance, without making a final decision.\nSee below for more on the selection criteria.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eProposal feedback\u003c/em\u003e. The Go team sends out an announcement listing the selected\nproposals. The announcement explains to the community the tentative intent to\nmove forward with the selected proposals and to collect feedback for each\nof them. This gives the community a chance to make suggestions and express\nconcerns.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eImplementation\u003c/em\u003e. Based on that feedback, the proposals are implemented.\nThe target for these significant language and library changes is to have\nthem ready to submit on day 1 of an upcoming release cycle.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eImplementation feedback\u003c/em\u003e. During the development cycle, the Go team and\ncommunity have a chance to experiment with the new features and collect\nfurther feedback.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eLaunch decision\u003c/em\u003e. At the end of the three month\n\u003ca href=\"/wiki/Go-Release-Cycle\"\u003edevelopment cycle\u003c/a\u003e\n(just when starting the three month repo freeze before a release), and\nbased on the experience and feedback gathered during the release cycle,\nthe Go team makes the final decision about whether to ship each change.\nThis provides an opportunity to consider whether the change has delivered\nthe expected benefits or created any unexpected costs. Once shipped, the\nchanges become part of the language and libraries. Excluded proposals may\ngo back to the drawing board or may be declined for good.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWith two rounds of feedback, this process is slanted towards declining\nproposals, which will hopefully prevent feature creep and help with\nkeeping the language small and clean.\u003c/p\u003e\n\u003cp\u003eWe can’t go through this process for each of the open Go 2\nproposals, there are simply too many of them. That’s where the selection\ncriteria come into play.\u003c/p\u003e\n\u003ch2 id=\"proposal-selection-criteria\"\u003eProposal selection criteria\u003c/h2\u003e\n\u003cp\u003eA proposal must at the very least:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eaddress an important issue for many people\u003c/em\u003e,\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003ehave minimal impact on everybody else\u003c/em\u003e, and\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003ecome with a clear and well-understood solution\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRequirement 1 ensures that any changes we make help as many Go developers\nas possible (make their code more robust, easier to write, more likely to\nbe correct, and so on), while requirement 2 ensures we are careful to hurt\nas few developers as possible, whether by breaking their programs or causing\nother churn. As a rule of thumb, we should aim to help at least ten times as\nmany developers as we hurt with a given change. Changes that don’t affect\nreal Go usage are a net zero benefit put up against a significant\nimplementation cost and should be avoided.\u003c/p\u003e\n\u003cp\u003eWithout requirement 3 we don’t have an implementation of the proposal.\nFor instance, we believe that some form of genericity might solve an important\nissue for a lot of people, but we don’t yet have a clear and well-understood\nsolution. That’s fine, it just means that the proposal needs to go back to\nthe drawing board before it can be considered.\u003c/p\u003e\n\u003ch2 id=\"proposals\"\u003eProposals\u003c/h2\u003e\n\u003cp\u003eWe feel that this is a good plan that should serve us well but it is important\nto understand that this is only a starting point. As the process is used we will\ndiscover the ways in which it fails to work well and we will refine it as needed.\nThe critical part is that until we use it in practice we won’t know how to improve it.\u003c/p\u003e\n\u003cp\u003eA safe place to start is with a small number of backward-compatible language\nproposals. We haven’t done language changes for a long time, so this gets us\nback into that mode. Also, the changes won’t require us worrying about\nbreaking existing code, and thus they serve as a perfect trial balloon.\u003c/p\u003e\n\u003cp\u003eWith all that said, we propose the following selection of Go 2 proposals for\nthe Go 1.13 release (step 1 in the proposal evaluation process):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/issue/20706\"\u003e\u003cem\u003e#20706\u003c/em\u003e\u003c/a\u003e \u003cem\u003eGeneral Unicode identifiers based on\u003c/em\u003e \u003ca href=\"http://unicode.org/reports/tr31/\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003cem\u003eUnicode TR31\u003c/em\u003e\u003c/a\u003e:\nThis addresses an important issue for Go programmers using non-Western alphabets\nand should have little if any impact on anyone else. There are normalization\nquestions which we need to answer and where community feedback will be\nimportant, but after that the implementation path is well understood.\nNote that identifier export rules will not be affected by this.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/issue/19308\"\u003e\u003cem\u003e#19308\u003c/em\u003e\u003c/a\u003e, \u003ca href=\"/issue/28493\"\u003e\u003cem\u003e#28493\u003c/em\u003e\u003c/a\u003e \u003cem\u003eBinary integer literals and support for _ in number literals\u003c/em\u003e:\nThese are relatively minor changes that seem hugely popular among many\nprogrammers. They may not quite reach the threshold of solving an\n“important issue” (hexadecimal numbers have worked well so far) but they\nbring Go up to par with most other languages in this respect and relieve\na pain point for some programmers. They have minimal impact on others who\ndon’t care about binary integer literals or number formatting, and the\nimplementation is well understood.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"/issue/19113\"\u003e\u003cem\u003e#19113\u003c/em\u003e\u003c/a\u003e \u003cem\u003ePermit signed integers as shift counts\u003c/em\u003e:\nAn estimated 38% of all non-constant shifts require an (artificial) uint\nconversion (see the issue for a more detailed break-down). This proposal\nwill clean up a lot of code, get shift expressions better in sync with index\nexpressions and the built-in functions cap and len. It will mostly have a\npositive impact on code. The implementation is well understood.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"next-steps\"\u003eNext steps\u003c/h2\u003e\n\u003cp\u003eWith this blog post we have executed the first step and started the second\nstep of the proposal evaluation process. It’s now up to you, the\nGo community, to provide feedback on the issues listed above.\u003c/p\u003e\n\u003cp\u003eFor each proposal for which we have clear and approving feedback, we will\nmove forward with the implementation (step 3 in the process). Because we\nwant the changes implemented on the first day of the next release cycle\n(tentatively Feb. 1, 2019) we may start the implementation a bit early\nthis time to leave time for two full months of feedback (Dec. 2018,\nJan. 2019).\u003c/p\u003e\n\u003cp\u003eFor the 3-month development cycle (Feb. to May 2019) the chosen features\nare implemented and available at tip and everybody will have a chance to\ngather experience with them. This provides another opportunity for feedback\n(step 4 in the process).\u003c/p\u003e\n\u003cp\u003eFinally, shortly after the repo freeze (May 1, 2019), the Go team makes the\nfinal decision whether to keep the new features for good (and include them\nin the Go 1 compatibility guarantee), or whether to abandon them (final\nstep in the process).\u003c/p\u003e\n\u003cp\u003e(Since there is a real chance that a feature may need to be removed just\nwhen we freeze the repo, the implementation will need to be such that the\nfeature can be disabled without destabilizing the rest of the system.\nFor language changes that may mean that all feature-related code is\nguarded by an internal flag.)\u003c/p\u003e\n\u003cp\u003eThis will be the first time that we have followed this process, hence the\nrepo freeze will also be a good moment to reflect on the process and to\nadjust it if necessary. Let’s see how it goes.\u003c/p\u003e\n\u003cp\u003eHappy evaluating!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2018-11-29T00:00:00Z",
  "Author": "Robert Griesemer"
}