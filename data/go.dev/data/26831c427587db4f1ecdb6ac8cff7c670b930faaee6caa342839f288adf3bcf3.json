{
  "Source": "go.dev",
  "Title": "Go 1.6 is released",
  "Link": "https://go.dev/blog/go1.6",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.6\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.6 is released\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Andrew Gerrand\u003cbr/\u003e\n      17 February 2016\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday we release \u003ca href=\"/doc/go1.6\"\u003eGo version 1.6\u003c/a\u003e,\nthe seventh major stable release of Go.\nYou can grab it right now from the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\nAlthough \u003ca href=\"/blog/go1.5\"\u003ethe release of Go 1.5\u003c/a\u003e six months ago\ncontained dramatic implementation changes,\nthis release is more incremental.\u003c/p\u003e\n\u003cp\u003eThe most significant change is support for \u003ca href=\"https://http2.github.io/\" rel=\"noreferrer\" target=\"_blank\"\u003eHTTP/2\u003c/a\u003e\nin the \u003ca href=\"/pkg/net/http/\"\u003enet/http package\u003c/a\u003e.\nHTTP/2 is a new protocol, a follow-on to HTTP that has already seen\nwidespread adoption by browser vendors and major websites.\nIn Go 1.6, support for HTTP/2 is \u003ca href=\"/doc/go1.6#http2\"\u003eenabled by default\u003c/a\u003e\nfor both servers and clients when using HTTPS,\nbringing \u003ca href=\"https://http2.github.io/faq/\" rel=\"noreferrer\" target=\"_blank\"\u003ethe benefits\u003c/a\u003e of the new protocol\nto a wide range of Go projects,\nsuch as the popular \u003ca href=\"https://caddyserver.com/download\" rel=\"noreferrer\" target=\"_blank\"\u003eCaddy web server\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe template packages have learned some new tricks,\nwith support for \u003ca href=\"/pkg/text/template/#hdr-Text_and_spaces\"\u003etrimming spaces around template actions\u003c/a\u003e\nto produce cleaner template output,\nand the introduction of the \u003ca href=\"/pkg/text/template/#hdr-Actions\"\u003e\u003ccode\u003e{{block}}\u003c/code\u003e action\u003c/a\u003e\nthat can be used to create templates that build on other templates.\nA \u003ca href=\"https://cs.opensource.google/go/x/example/+/master:template\" rel=\"noreferrer\" target=\"_blank\"\u003enew template example program\u003c/a\u003e demonstrates these new features.\u003c/p\u003e\n\u003cp\u003eGo 1.5 introduced \u003ca href=\"/s/go15vendor\"\u003eexperimental support\u003c/a\u003e\nfor a “vendor” directory that was enabled by an environment variable.\nIn Go 1.6, the feature is now \u003ca href=\"/doc/go1.6#go_command\"\u003eenabled by default\u003c/a\u003e.\nSource trees that contain a directory named “vendor” that is not used in accordance with the new feature\nwill require changes to avoid broken builds (the simplest fix is to rename the directory).\u003c/p\u003e\n\u003cp\u003eThe runtime has added lightweight, best-effort detection of concurrent misuse of maps.\nAs always, if one goroutine is writing to a map, no other goroutine should be reading or writing the map concurrently.\nIf the runtime detects this condition, it prints a diagnosis and crashes the program.\nThe best way to find out more about the problem is to run it under the\n\u003ca href=\"/blog/race-detector\"\u003erace detector\u003c/a\u003e,\nwhich will more reliably identify the race and give more detail.\u003c/p\u003e\n\u003cp\u003eThe runtime has also changed how it prints program-ending panics.\nIt now prints only the stack of the panicking goroutine, rather than all existing goroutines.\nThis behavior can be configured using the\n\u003ca href=\"/pkg/runtime/#hdr-Environment_Variables\"\u003eGOTRACEBACK\u003c/a\u003e environment variable\nor by calling the \u003ca href=\"/pkg/runtime/debug/#SetTraceback\"\u003edebug.SetTraceback\u003c/a\u003e function.\u003c/p\u003e\n\u003cp\u003eUsers of cgo should be aware of major changes to the rules for sharing pointers between Go and C code.\nThe rules are designed to ensure that such C code can coexist with Go’s garbage collector\nand are checked during program execution, so code may require changes to avoid crashes.\nSee the \u003ca href=\"/doc/go1.6#cgo\"\u003erelease notes\u003c/a\u003e and\n\u003ca href=\"/cmd/cgo/#hdr-Passing_pointers\"\u003ecgo documentation\u003c/a\u003e for the details.\u003c/p\u003e\n\u003cp\u003eThe compiler, linker, and go command have a new \u003ccode\u003e-msan\u003c/code\u003e flag\nanalogous to \u003ccode\u003e-race\u003c/code\u003e and only available on linux/amd64,\nthat enables interoperation with the\n\u003ca href=\"http://clang.llvm.org/docs/MemorySanitizer.html\" rel=\"noreferrer\" target=\"_blank\"\u003eClang MemorySanitizer\u003c/a\u003e.\nThis is useful for testing a program containing suspect C or C++ code.\nYou might like to try it while testing your cgo code with the new pointer rules.\u003c/p\u003e\n\u003cp\u003ePerformance of Go programs built with Go 1.6 remains similar to those built with Go 1.5.\nGarbage-collection pauses are even lower than with Go 1.5,\nbut this is particularly noticeable for programs using large amounts of memory.\nWith regard to the performance of the compiler tool chain,\nbuild times should be similar to those of Go 1.5.\u003c/p\u003e\n\u003cp\u003eThe algorithm inside \u003ca href=\"/pkg/sort/#Sort\"\u003esort.Sort\u003c/a\u003e\nwas improved to run about 10% faster,\nbut the change may break programs that expect a specific ordering\nof equal but distinguishable elements.\nSuch programs should refine their \u003ccode\u003eLess\u003c/code\u003e methods to indicate the desired ordering\nor use \u003ca href=\"/pkg/sort/#Stable\"\u003esort.Stable\u003c/a\u003e\nto preserve the input order for equal values.\u003c/p\u003e\n\u003cp\u003eAnd, of course, there are many more additions, improvements, and fixes.\nYou can find them all in the comprehensive \u003ca href=\"/doc/go1.6\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo celebrate the release,\n\u003ca href=\"/wiki/Go-1.6-release-party\"\u003eGo User Groups around the world\u003c/a\u003e\nare holding release parties on the 17th of February.\nOnline, the Go contributors are hosting a question and answer session\non the \u003ca href=\"https://reddit.com/r/golang\" rel=\"noreferrer\" target=\"_blank\"\u003egolang subreddit\u003c/a\u003e for the next 24 hours.\nIf you have questions about the project, the release, or just Go in general,\nthen please \u003ca href=\"https://www.reddit.com/r/golang/comments/46bd5h/ama_we_are_the_go_contributors_ask_us_anything/\" rel=\"noreferrer\" target=\"_blank\"\u003ejoin the discussion\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks to everyone that contributed to the release.\nHappy hacking.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-02-17T00:00:00Z",
  "Author": "Andrew Gerrand"
}