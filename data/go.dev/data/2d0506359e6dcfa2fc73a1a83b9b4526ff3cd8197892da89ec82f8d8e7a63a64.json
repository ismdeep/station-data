{
  "Source": "go.dev",
  "Title": "Building StatHat with Go",
  "Link": "https://go.dev/blog/stathat",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/stathat\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eBuilding StatHat with Go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Patrick Crosby\u003cbr/\u003e\n      19 December 2011\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eMy name is Patrick Crosby and I’m the founder of a company called Numerotron.\nWe recently released \u003ca href=\"http://www.stathat.com\" rel=\"noreferrer\" target=\"_blank\"\u003eStatHat\u003c/a\u003e.\nThis post is about why we chose to develop StatHat in \u003ca href=\"/\"\u003eGo\u003c/a\u003e,\nincluding details about how we are using Go.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.stathat.com\" rel=\"noreferrer\" target=\"_blank\"\u003eStatHat\u003c/a\u003e is a tool to track statistics and events in your code.\nEveryone from HTML designers to backend engineers can use StatHat easily,\nas it supports sending stats from HTML, JavaScript,\nGo, and twelve other languages.\u003c/p\u003e\n\u003cp\u003eYou send your numbers to StatHat; it generates beautiful,\nfully-embeddable graphs of your data.\nStatHat will alert you when specified triggers occur,\nsend you daily email reports, and much more.\nSo instead of spending time writing tracking or reporting tools for your application,\nyou can concentrate on the code.\nWhile you do the real work, StatHat remains intensely vigilant,\nlike an eagle in its mountaintop nest, or a babysitter on meth.\u003c/p\u003e\n\u003cp\u003eHere’s an example of a StatHat graph of the temperature in NYC, Chicago, and San Francisco:\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"stathat/weather.png\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"architecture-overview\"\u003eArchitecture Overview\u003c/h2\u003e\n\u003cp\u003eStatHat consists of two main services:  incoming statistic/event API calls\nand the web application for viewing and analyzing stats.\nWe wanted to keep these as separate as possible to isolate the data collection\nfrom the data interaction.\nWe did this for many reasons, but one major reason is that we anticipate\nhandling a ton of automated incoming API HTTP requests and would thus have\ndifferent optimization strategies for the API service than a web application\ninteracting with humans.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"stathat/architecture.png\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThe web application service is multi-tiered.\nThe web server processes all requests and sends them to an interactor layer.\nFor simple tasks, the interactor will handle generating any necessary data.\nFor complex tasks, the interactor relies on multiple application servers\nto handle tasks like generating graphs or analyzing data sets.\nAfter the interactor is finished, the web server sends the result to a presenter.\nThe presenter responds to the HTTP request with either HTML or JSON.\nWe can horizontally scale the web, API, application servers,\nand databases as the demand for services grows and changes over time.\nThere is no single point of failure as each application server has multiple copies running.\nThe interactor layer allows us to have different interfaces to the system:\nhttp, command line, automated tests, mobile API.\nStatHat uses MySQL for data storage.\u003c/p\u003e\n\u003ch2 id=\"choosing-go\"\u003eChoosing Go\u003c/h2\u003e\n\u003cp\u003eWhen we designed StatHat, we had the following check list for our development tools:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003esame programming language for backend and frontend systems\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003egood, fast HTML templating system\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003efast start-up, recompilation, testing for lots of tinkering\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003elots of connections on one machine\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003elanguage tools for handling application-level concurrency\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003egood performance\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003erobust RPC layer to talk between tiers\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003elots of libraries\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eopen source\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe evaluated many popular and not-so-popular web technologies and ended up choosing to develop it in Go.\u003c/p\u003e\n\u003cp\u003eWhen Go was released in November 2009, I immediately installed it and loved\nthe fast compilation times,\ngoroutines, channels, garbage collection,\nand all the packages that were available.\nI was especially pleased with how few lines of code my applications were using.\nI soon experimented with making a web app called \u003ca href=\"http://langalot.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eLangalot\u003c/a\u003e\nthat concurrently searched through five foreign language dictionaries as\nyou typed in a query.\nIt was blazingly fast.  I put it online and it’s been running since February, 2010.\u003c/p\u003e\n\u003cp\u003eThe following sections detail how Go meets StatHat’s requirements and our experience using Go to solve our problems.\u003c/p\u003e\n\u003ch2 id=\"runtime\"\u003eRuntime\u003c/h2\u003e\n\u003cp\u003eWe use the standard Go \u003ca href=\"/pkg/http/\"\u003ehttp package\u003c/a\u003e for\nour API and web app servers.\nAll requests first go through Nginx and any non-file requests are proxied\nto the Go-powered http servers.\nThe backend servers are all written in Go and use the \u003ca href=\"/pkg/rpc/\"\u003erpc package\u003c/a\u003e\nto communicate with the frontend.\u003c/p\u003e\n\u003ch2 id=\"templating\"\u003eTemplating\u003c/h2\u003e\n\u003cp\u003eWe built a template system using the standard \u003ca href=\"/pkg/template/\"\u003etemplate package\u003c/a\u003e.\nOur system adds layouts, some common formatting functions,\nand the ability to recompile templates on-the-fly during development.\nWe are very pleased with the performance and functionality of the Go templates.\u003c/p\u003e\n\u003ch2 id=\"tinkering\"\u003eTinkering\u003c/h2\u003e\n\u003cp\u003eIn a previous job, I worked on a video game called Throne of Darkness that was written in C++.\nWe had a few header files that, when modified,\nrequired a full rebuild of the entire system, 20-30 minutes long.\nIf anyone ever changed \u003ccode\u003eCharacter.h\u003c/code\u003e, he would be subject to the wrath of\nevery other programmer.\nBesides this suffering, it also slowed down development time significantly.\u003c/p\u003e\n\u003cp\u003eSince then, I’ve always tried to choose technologies that allowed fast, frequent tinkering.\nWith Go, compilation time is a non-issue.\nWe can recompile the entire system in seconds, not minutes.\nThe development web server starts instantly,\ntests complete in a few seconds.\nAs mentioned previously, templates are recompiled as they change.\nThe result is that the StatHat system is very easy to work with,\nand the compiler is not a bottleneck.\u003c/p\u003e\n\u003ch2 id=\"rpc\"\u003eRPC\u003c/h2\u003e\n\u003cp\u003eSince StatHat is a multi-tiered system, we wanted an RPC layer so that all\ncommunication was standard.\nWith Go, we are using the \u003ca href=\"/pkg/rpc/\"\u003erpc package\u003c/a\u003e and\nthe \u003ca href=\"/pkg/gob/\"\u003egob package\u003c/a\u003e for encoding Go objects.\nIn Go, the RPC server just takes any Go object and registers its exported methods.\nThere is no need for an intermediary interface description language.\nWe’ve found it very easy to use and many of our core application servers\nare under 300 lines of code.\u003c/p\u003e\n\u003ch2 id=\"libraries\"\u003eLibraries\u003c/h2\u003e\n\u003cp\u003eWe don’t want to spend time rewriting libraries for things like SSL,\ndatabase drivers, JSON/XML parsers.\nAlthough Go is a young language, it has a lot of system packages and a growing\nnumber of user-contributed packages.\nWith only a few exceptions, we have found Go packages for everything we have needed.\u003c/p\u003e\n\u003ch2 id=\"open-source\"\u003eOpen source\u003c/h2\u003e\n\u003cp\u003eIn our experience, it has been invaluable to work with open source tools.\nIf something is going awry, it is immensely helpful to be able to examine\nthe source through every layer and not have any black boxes.\nHaving the code for the language, web server,\npackages, and tools allows us to understand how every piece of the system works.\nEverything in Go is open source.  In the Go codebase,\nwe frequently read the tests as they often give great examples of how to\nuse packages and language features.\u003c/p\u003e\n\u003ch2 id=\"performance\"\u003ePerformance\u003c/h2\u003e\n\u003cp\u003ePeople rely on StatHat for up to the minute analysis of their data and we\nneed the system to be as responsive as possible.\nIn our tests, Go’s performance blew away most of the competition.\nWe tested it against Rails, Sinatra, OpenResty, and Node.\nStatHat has always monitored itself by tracking all kinds of performance\nmetrics about requests,\nthe duration of certain tasks, the amount of memory in use.\nBecause of this, we were able to easily evaluate different technologies.\nWe’ve also taken advantage of the benchmark performance testing features\nof the Go testing package.\u003c/p\u003e\n\u003ch2 id=\"application-level-concurrency\"\u003eApplication-Level Concurrency\u003c/h2\u003e\n\u003cp\u003eIn a former life, I was the CTO at OkCupid.\nMy experience there using OKWS taught me the importance of async programming,\nespecially when it comes to dynamic web applications.\nThere is no reason you should ever do something like this synchronously:\nload a user from the database, then find their stats,\nthen find their alerts.\nThese should all be done concurrently, yet surprisingly,\nmany popular frameworks have no async support.\nGo supports this at the language level without any callback spaghetti.\nStatHat uses goroutines extensively to run multiple functions concurrently\nand channels for sharing data between goroutines.\u003c/p\u003e\n\u003ch2 id=\"hosting-and-deployment\"\u003eHosting and Deployment\u003c/h2\u003e\n\u003cp\u003eStatHat runs on Amazon’s EC2 servers.  Our servers are divided into several types:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAPI\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWeb\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eApplication servers\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDatabase\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are at least two of each type of server,\nand they are in different zones for high availability.\nAdding a new server to the mix takes just a couple of minutes.\u003c/p\u003e\n\u003cp\u003eTo deploy, we first build the entire system into a time-stamped directory.\nOur packaging script builds the Go applications,\ncompresses the CSS and JS files, and copies all the scripts and configuration files.\nThis directory is then distributed to all the servers,\nso they all have an identical distribution.\nA script on each server queries its EC2 tags and determines what it is responsible\nfor running and starts/stops/restarts any services.\nWe frequently only deploy to a subset of the servers.\u003c/p\u003e\n\u003ch2 id=\"more\"\u003eMore\u003c/h2\u003e\n\u003cp\u003eFor more information on StatHat, please visit \u003ca href=\"http://www.stathat.com\" rel=\"noreferrer\" target=\"_blank\"\u003estathat.com\u003c/a\u003e.\nWe are releasing some of the Go code we’ve written.\nGo to \u003ca href=\"http://www.stathat.com/src\" rel=\"noreferrer\" target=\"_blank\"\u003ewww.stathat.com/src\u003c/a\u003e for all of the\nopen source StatHat projects.\u003c/p\u003e\n\u003cp\u003eTo learn more about Go, visit \u003ca href=\"/\"\u003egolang.org\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2011-12-19T00:00:00Z",
  "Author": "Patrick Crosby"
}