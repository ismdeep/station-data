{
  "Source": "go.dev",
  "Title": "Go 1.21 Release Candidate",
  "Link": "https://go.dev/blog/go1.21rc",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.21rc\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.21 Release Candidate\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Eli Bendersky, on behalf of the Go team\u003cbr/\u003e\n      21 June 2023\n      \u003c/p\u003e\n      \n      \u003cp\u003eThe Go 1.21 first Release Candidate (RC) is available today on the \u003ca href=\"/dl/#go1.21rc2\"\u003edownload\npage\u003c/a\u003e! Go 1.21 is packed with new features and improvements.\nGetting the RC (release candidate) allows you to experiment with it early, try\nit on your workloads, and report any issues before the final release (scheduled\nfor August). Here are some notable changes and features in Go 1.21; for the full\nlist, refer to the \u003ca href=\"https://tip.golang.org/doc/go1.21\" rel=\"noreferrer\" target=\"_blank\"\u003efull release notes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(Please note that the first RC for Go 1.21 is called \u003ccode\u003ego1.21rc2\u003c/code\u003e\nbecause a bug was found and fixed after tagging \u003ccode\u003ego1.21rc1\u003c/code\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"tool-improvements\"\u003eTool improvements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe Profile Guided Optimization (PGO) feature we \u003ca href=\"/blog/pgo-preview\"\u003eannounced for preview in\n1.20\u003c/a\u003e is now generally available! If a file named\n\u003ccode\u003edefault.pgo\u003c/code\u003e is present in the main package’s directory, the \u003ccode\u003ego\u003c/code\u003e command\nwill use it to enable a PGO build. See the \u003ca href=\"/doc/pgo\"\u003ePGO documentation\u003c/a\u003e for\nmore details. We’ve measured the impact of PGO on a wide set of Go programs and\nsee performance improvements of 2-7%.\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"/cmd/go\"\u003e\u003ccode\u003ego\u003c/code\u003e tool\u003c/a\u003e now supports \u003ca href=\"https://tip.golang.org/doc/godebug\" rel=\"noreferrer\" target=\"_blank\"\u003ebackward\u003c/a\u003e\nand \u003ca href=\"/doc/toolchain\"\u003eforward\u003c/a\u003e language compatibility.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"language-changes\"\u003eLanguage changes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eNew built-in functions: \u003ca href=\"https://tip.golang.org/ref/spec#Min_and_max\" rel=\"noreferrer\" target=\"_blank\"\u003emin, max\u003c/a\u003e\nand \u003ca href=\"https://tip.golang.org/ref/spec#Clear\" rel=\"noreferrer\" target=\"_blank\"\u003eclear\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eSeveral improvements to type inference for generic functions. The description of\n\u003ca href=\"https://tip.golang.org/ref/spec#Type_inference\" rel=\"noreferrer\" target=\"_blank\"\u003etype inference in the spec\u003c/a\u003e\nhas been expanded and clarified.\u003c/li\u003e\n\u003cli\u003eIn a future version of Go we’re planning to address one of the most common\ngotchas of Go programming:\n\u003ca href=\"/wiki/CommonMistakes\"\u003eloop variable capture\u003c/a\u003e.\nGo 1.21 comes with a preview of this feature that you can enable in your code\nusing an environment variable. See \u003ca href=\"/wiki/LoopvarExperiment\"\u003ethis LoopvarExperiment wiki\npage\u003c/a\u003e for more details.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"standard-library-additions\"\u003eStandard library additions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eNew \u003ca href=\"https://tip.golang.org/pkg/log/slog\" rel=\"noreferrer\" target=\"_blank\"\u003elog/slog\u003c/a\u003e package for structured logging.\u003c/li\u003e\n\u003cli\u003eNew \u003ca href=\"https://tip.golang.org/pkg/slices\" rel=\"noreferrer\" target=\"_blank\"\u003eslices\u003c/a\u003e package for common operations\non slices of any element type. This includes sorting functions that are generally\nfaster and more ergonomic than the \u003ca href=\"https://tip.golang.org/pkg/sort\" rel=\"noreferrer\" target=\"_blank\"\u003esort\u003c/a\u003e package.\u003c/li\u003e\n\u003cli\u003eNew \u003ca href=\"https://tip.golang.org/pkg/maps\" rel=\"noreferrer\" target=\"_blank\"\u003emaps\u003c/a\u003e package for common operations on maps\nof any key or element type.\u003c/li\u003e\n\u003cli\u003eNew \u003ca href=\"https://tip.golang.org/pkg/cmp\" rel=\"noreferrer\" target=\"_blank\"\u003ecmp\u003c/a\u003e package with new utilities for comparing\nordered values.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"improved-performance\"\u003eImproved performance\u003c/h2\u003e\n\u003cp\u003eIn addition to the performance improvements when enabling PGO:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe Go compiler itself has been rebuilt with PGO enabled for 1.21, and as a\nresult it builds Go programs 2-4% faster, depending on the host architecture.\u003c/li\u003e\n\u003cli\u003eDue to tuning of the garbage collector, some applications may see up to a 40%\nreduction in tail latency.\u003c/li\u003e\n\u003cli\u003eCollecting traces with \u003ca href=\"https://pkg.go.dev/runtime/trace\" rel=\"noreferrer\" target=\"_blank\"\u003eruntime/trace\u003c/a\u003e now\nincurs a substantially smaller CPU cost on amd64 and arm64.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"a-new-port-to-wasi\"\u003eA new port to WASI\u003c/h2\u003e\n\u003cp\u003eGo 1.21 adds an experimental port for \u003ca href=\"https://wasi.dev/\" rel=\"noreferrer\" target=\"_blank\"\u003eWebAssembly System Interface (WASI)\u003c/a\u003e,\nPreview 1 (\u003ccode\u003eGOOS=wasip1\u003c/code\u003e, \u003ccode\u003eGOARCH=wasm\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eTo facilitate writing more general WebAssembly (WASM) code, the compiler also\nsupports a new directive for importing functions from the WASM host:\n\u003ccode\u003ego:wasmimport\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePlease \u003ca href=\"/dl/#go1.21rc2\"\u003edownload the Go 1.21 RC\u003c/a\u003e and try it! If you notice any\nproblems, please \u003ca href=\"/issue/new\"\u003efile an issue\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-06-21T00:00:00Z",
  "Author": "Eli Bendersky, on behalf of the Go team"
}