{
  "Source": "go.dev",
  "Title": "Get familiar with workspaces",
  "Link": "https://go.dev/blog/get-familiar-with-workspaces",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/get-familiar-with-workspaces\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGet familiar with workspaces\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Beth Brown, for the Go team\u003cbr/\u003e\n      5 April 2022\n      \u003c/p\u003e\n      \n      \u003cp\u003eGo 1.18 adds workspace mode to Go, which lets you work on multiple modules\nsimultaneously.\u003c/p\u003e\n\u003cp\u003eYou can get Go 1.18 by visiting the \u003ca href=\"/dl/\"\u003edownload\u003c/a\u003e page. The\n\u003ca href=\"/doc/go1.18\"\u003erelease notes\u003c/a\u003e have more details about all the\nchanges.\u003c/p\u003e\n\u003ch2 id=\"workspaces\"\u003eWorkspaces\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"/ref/mod#workspaces\"\u003eWorkspaces\u003c/a\u003e in Go 1.18 let you work on\nmultiple modules simultaneously without having to edit \u003ccode\u003ego.mod\u003c/code\u003e files for each\nmodule. Each module within a workspace is treated as a main module when\nresolving dependencies.\u003c/p\u003e\n\u003cp\u003ePreviously, to add a feature to one module and use it in another module, you\nneeded to either publish the changes to the first module, or \u003ca href=\"/doc/tutorial/call-module-code\"\u003eedit the\ngo.mod\u003c/a\u003e file of the dependent\nmodule with a \u003ccode\u003ereplace\u003c/code\u003e directive for your local, unpublished module changes. In\norder to publish without errors, you had to remove the \u003ccode\u003ereplace\u003c/code\u003e directive from\nthe dependent module’s \u003ccode\u003ego.mod\u003c/code\u003e file after you published the local changes to\nthe first module.\u003c/p\u003e\n\u003cp\u003eWith Go workspaces, you control all your dependencies using a \u003ccode\u003ego.work\u003c/code\u003e file in\nthe root of your workspace directory. The \u003ccode\u003ego.work\u003c/code\u003e file has \u003ccode\u003euse\u003c/code\u003e and\n\u003ccode\u003ereplace\u003c/code\u003e directives that override the individual \u003ccode\u003ego.mod\u003c/code\u003e files, so there is\nno need to edit each \u003ccode\u003ego.mod\u003c/code\u003e file individually.\u003c/p\u003e\n\u003cp\u003eYou create a workspace by running \u003ccode\u003ego work init\u003c/code\u003e with a list of module\ndirectories as space-separated arguments. The workspace doesn’t need to contain\nthe modules you’re working with. The\u003ccode\u003e init\u003c/code\u003e command creates a \u003ccode\u003ego.work\u003c/code\u003e file\nthat lists modules in the workspace.  If you run \u003ccode\u003ego work init\u003c/code\u003e without\narguments, the command creates an empty workspace.\u003c/p\u003e\n\u003cp\u003eTo add modules to the workspace, run \u003ccode\u003ego work use [moddir]\u003c/code\u003e or manually edit\nthe \u003ccode\u003ego.work\u003c/code\u003e file. Run \u003ccode\u003ego work use -r .\u003c/code\u003e to recursively add directories in the\nargument directory with a \u003ccode\u003ego.mod\u003c/code\u003e file to your workspace. If a directory\ndoesn’t have a \u003ccode\u003ego.mod\u003c/code\u003e file, or no longer exists, the \u003ccode\u003euse\u003c/code\u003e directive for that\ndirectory is removed from your \u003ccode\u003ego.work\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eThe syntax of a \u003ccode\u003ego.work\u003c/code\u003e file is similar to a \u003ccode\u003ego.mod\u003c/code\u003e file and contains the\nfollowing directives:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ego\u003c/code\u003e: the go toolchain version e.g. \u003ccode\u003ego 1.18\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euse\u003c/code\u003e: adds a module on disk to the set of main modules in a workspace.\nIts argument is a relative path to the directory containing the module’s\n\u003ccode\u003ego.mod\u003c/code\u003e file. A \u003ccode\u003euse\u003c/code\u003e directive doesn’t add modules in subdirectories of\nthe specified directory.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereplace\u003c/code\u003e: Similar to a \u003ccode\u003ereplace\u003c/code\u003e directive in a \u003ccode\u003ego.mod\u003c/code\u003e file, a\n\u003ccode\u003ereplace\u003c/code\u003e directive in a \u003ccode\u003ego.work\u003c/code\u003e file replaces the contents of a\n\u003cem\u003especific version\u003c/em\u003e of a module, or \u003cem\u003eall versions\u003c/em\u003e of a module, with\ncontents found elsewhere.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"workflows\"\u003eWorkflows\u003c/h2\u003e\n\u003cp\u003eWorkspaces are flexible and support a variety of workflows. The following\nsections are a brief overview of the ones we think will be the most common.\u003c/p\u003e\n\u003ch3 id=\"add-a-feature-to-an-upstream-module-and-use-it-in-your-own-module\"\u003eAdd a feature to an upstream module and use it in your own module\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a directory for your workspace.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClone the upstream module you want to edit.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdd your feature to the local version of the upstream module.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun \u003ccode\u003ego work init [path-to-upstream-mod-dir]\u003c/code\u003e in the workspace folder.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMake changes to your own module in order to implement the feature added\nto the upstream module.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun \u003ccode\u003ego work use [path-to-your-module]\u003c/code\u003e in the workspace folder.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ego work use\u003c/code\u003e command adds the path to your module to your \u003ccode\u003ego.work\u003c/code\u003e\nfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ego 1.18\n\nuse (\n       ./path-to-upstream-mod-dir\n       ./path-to-your-module\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun and test your module using the new feature added to the upstream module.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePublish the upstream module with the new feature.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePublish your module using the new feature.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"work-with-multiple-interdependent-modules-in-the-same-repository\"\u003eWork with multiple interdependent modules in the same repository\u003c/h3\u003e\n\u003cp\u003eWhile working on multiple modules in the same repository, the \u003ccode\u003ego.work\u003c/code\u003e file\ndefines the workspace instead of using \u003ccode\u003ereplace\u003c/code\u003e directives in each module’s\n\u003ccode\u003ego.mod\u003c/code\u003e file.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a directory for your workspace.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClone the repository with the modules you want to edit. The modules don’t\nhave to be in your workspace folder as you specify the relative path to\neach with the \u003ccode\u003euse\u003c/code\u003e directive.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun \u003ccode\u003ego work init [path-to-module-one] [path-to-module-two]\u003c/code\u003e in your\nworkspace directory.\u003c/p\u003e\n\u003cp\u003eExample: You are working on \u003ccode\u003eexample.com/x/tools/groundhog\u003c/code\u003e which depends\non other packages in the \u003ccode\u003eexample.com/x/tools\u003c/code\u003e module.\u003c/p\u003e\n\u003cp\u003eYou clone the repository and then run \u003ccode\u003ego work init tools tools/groundhog\u003c/code\u003e in\nyour workspace folder.\u003c/p\u003e\n\u003cp\u003eThe contents of your \u003ccode\u003ego.work\u003c/code\u003e file resemble the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ego 1.18\n\nuse (\n        ./tools\n        ./tools/groundhog\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAny local changes made in the \u003ccode\u003etools\u003c/code\u003e module will be used by\n\u003ccode\u003etools/groundhog\u003c/code\u003e in your workspace.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"switching-between-dependency-configurations\"\u003eSwitching between dependency configurations\u003c/h3\u003e\n\u003cp\u003eTo test your modules with different dependency configurations you can either\ncreate multiple workspaces with separate \u003ccode\u003ego.work\u003c/code\u003e files, or keep one workspace\nand comment out the \u003ccode\u003euse\u003c/code\u003e directives you don’t want in a single \u003ccode\u003ego.work\u003c/code\u003e\nfile.\u003c/p\u003e\n\u003cp\u003eTo create multiple workspaces:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate separate directories for different dependency needs.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003ego work init\u003c/code\u003e in each of your workspace directories.\u003c/li\u003e\n\u003cli\u003eAdd the dependencies you want within each directory via \u003ccode\u003ego work use [path-to-dependency]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003ego run [path-to-your-module]\u003c/code\u003e in each workspace directory to use the\ndependencies specified by its \u003ccode\u003ego.work\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo test out different dependencies within the same workspace, open the \u003ccode\u003ego.work\u003c/code\u003e\nfile and add or comment out the desired dependencies.\u003c/p\u003e\n\u003ch3 id=\"still-using-gopath\"\u003eStill using GOPATH?\u003c/h3\u003e\n\u003cp\u003eMaybe using workspaces will change your mind. \u003ccode\u003eGOPATH\u003c/code\u003e users can resolve their\ndependencies using a \u003ccode\u003ego.work\u003c/code\u003e file located at the base of their \u003ccode\u003eGOPATH\u003c/code\u003e\ndirectory. Workspaces don’t aim to completely recreate all \u003ccode\u003eGOPATH\u003c/code\u003e workflows,\nbut they can create a setup that shares some of the convenience of \u003ccode\u003eGOPATH\u003c/code\u003e\nwhile still providing the benefits of modules.\u003c/p\u003e\n\u003cp\u003eTo create a workspace for GOPATH:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRun \u003ccode\u003ego work init\u003c/code\u003e in the root of your \u003ccode\u003eGOPATH\u003c/code\u003e directory.\u003c/li\u003e\n\u003cli\u003eTo use a local module or specific version as a dependency in your\nworkspace, run \u003ccode\u003ego work use [path-to-module]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTo replace existing dependencies in your modules’ \u003ccode\u003ego.mod\u003c/code\u003e files use\n\u003ccode\u003ego work replace [path-to-module]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTo add all the modules in your GOPATH or any directory, run \u003ccode\u003ego work use -r\u003c/code\u003e to recursively add directories with a \u003ccode\u003ego.mod\u003c/code\u003e file to your workspace.\nIf a directory doesn’t have a \u003ccode\u003ego.mod\u003c/code\u003e file, or no longer exists, the \u003ccode\u003euse\u003c/code\u003e\ndirective for that directory is removed from your \u003ccode\u003ego.work\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: If you have projects without \u003ccode\u003ego.mod\u003c/code\u003e files that you want to add to\nthe workspace, change into their project directory and run \u003ccode\u003ego mod init\u003c/code\u003e,\nthen add the new module to your workspace with \u003ccode\u003ego work use [path-to-module].\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"workspace-commands\"\u003eWorkspace commands\u003c/h2\u003e\n\u003cp\u003eAlong with \u003ccode\u003ego work init\u003c/code\u003e and \u003ccode\u003ego work use\u003c/code\u003e, Go 1.18 introduces the following\ncommands for workspaces:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ego work sync\u003c/code\u003e: pushes the dependencies in the \u003ccode\u003ego.work\u003c/code\u003e file back into\nthe \u003ccode\u003ego.mod\u003c/code\u003e files of each workspace module.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ego work edit\u003c/code\u003e: provides a command-line interface for editing \u003ccode\u003ego.work\u003c/code\u003e,\nfor use primarily by tools or scripts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eModule-aware build commands and some \u003ccode\u003ego mod\u003c/code\u003e subcommands examine the \u003ccode\u003eGOWORK\u003c/code\u003e\nenvironment variable to determine if they are in a workspace context.\u003c/p\u003e\n\u003cp\u003eWorkspace mode is enabled if the \u003ccode\u003eGOWORK\u003c/code\u003e variable names a path to a file that\nends in \u003ccode\u003e.work\u003c/code\u003e. To determine which \u003ccode\u003ego.work\u003c/code\u003e file is being used, run\n\u003ccode\u003ego env GOWORK\u003c/code\u003e. The output is empty if the \u003ccode\u003ego\u003c/code\u003e command is not in workspace\nmode.\u003c/p\u003e\n\u003cp\u003eWhen workspace mode is enabled, the \u003ccode\u003ego.work\u003c/code\u003e file is parsed to determine the\nthree parameters for workspace mode: A Go version, a list of directories, and a\nlist of replacements.\u003c/p\u003e\n\u003cp\u003eSome commands to try in workspace mode (provided you already know what they\ndo!):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ego work init\ngo work sync\ngo work use\ngo list\ngo build\ngo test\ngo run\ngo vet\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"editor-experience-improvements\"\u003eEditor experience improvements\u003c/h2\u003e\n\u003cp\u003eWe’re particularly excited about the upgrades to Go’s language server\n\u003ca href=\"https://pkg.go.dev/golang.org/x/tools/gopls\" rel=\"noreferrer\" target=\"_blank\"\u003egopls\u003c/a\u003e and the\n\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=golang.go\" rel=\"noreferrer\" target=\"_blank\"\u003eVSCode Go extension\u003c/a\u003e\nthat make working with multiple modules in an LSP-compatible editor a smooth\nand rewarding experience.\u003c/p\u003e\n\u003cp\u003eFind references, code completion, and go to definitions work across modules\nwithin the workspace. Version \u003ca href=\"https://github.com/golang/tools/releases/tag/gopls%2Fv0.8.1\" rel=\"noreferrer\" target=\"_blank\"\u003e0.8.1\u003c/a\u003e\nof \u003ccode\u003egopls\u003c/code\u003e introduces diagnostics, completion, formatting, and hover for\n\u003ccode\u003ego.work\u003c/code\u003e files. You can take advantage of these gopls features with any\n\u003ca href=\"https://microsoft.github.io/language-server-protocol/\" rel=\"noreferrer\" target=\"_blank\"\u003eLSP\u003c/a\u003e-compatible editor.\u003c/p\u003e\n\u003ch4 id=\"editor-specific-notes\"\u003eEditor specific notes\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe latest \u003ca href=\"https://github.com/golang/vscode-go/releases/tag/v0.32.0\" rel=\"noreferrer\" target=\"_blank\"\u003evscode-go\nrelease\u003c/a\u003e allows\nquick access to your workspace’s \u003ccode\u003ego.work\u003c/code\u003e file via the Go status bar’s\nQuick Pick menu.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/4999471/157268414-fba63843-5a14-44ba-be82-d42765568856.gif\" alt=\"Access the go.work file via the Go status bar\u0026amp;rsquo;s Quick Pick menu\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/go/\" rel=\"noreferrer\" target=\"_blank\"\u003eGoLand\u003c/a\u003e supports workspaces and has\nplans to add syntax highlighting and code completion for \u003ccode\u003ego.work\u003c/code\u003e files.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor more information on using \u003ccode\u003egopls\u003c/code\u003e with different editors see the \u003ccode\u003egopls\u003c/code\u003e\u003ca href=\"https://pkg.go.dev/golang.org/x/tools/gopls#readme-editors\" rel=\"noreferrer\" target=\"_blank\"\u003e\ndocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat’s next?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDownload and install \u003ca href=\"/dl/\"\u003eGo 1.18\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eTry using \u003ca href=\"/ref/mod#workspaces\"\u003eworkspaces\u003c/a\u003e with the \u003ca href=\"/doc/tutorial/workspaces\"\u003eGo\nworkspaces Tutorial\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eIf you encounter any problems with workspaces, or want to suggest\nsomething, file an \u003ca href=\"/issue/new\"\u003eissue\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eRead the\n\u003ca href=\"https://pkg.go.dev/cmd/go#hdr-Workspace_maintenance\" rel=\"noreferrer\" target=\"_blank\"\u003eworkspace maintenance documentation\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eExplore module commands for \u003ca href=\"/ref/mod#commands-outside\"\u003eworking outside of a single\nmodule\u003c/a\u003e including \u003ccode\u003ego work init\u003c/code\u003e,\n\u003ccode\u003ego work sync\u003c/code\u003e and more.\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-04-05T00:00:00Z",
  "Author": "Beth Brown, for the Go team"
}