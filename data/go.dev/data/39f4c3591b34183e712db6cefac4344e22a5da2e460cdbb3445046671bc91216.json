{
  "Source": "go.dev",
  "Title": "Next steps toward Go 2",
  "Link": "https://go.dev/blog/go2-next-steps",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go2-next-steps\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eNext steps toward Go 2\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Robert Griesemer, for the Go team\u003cbr/\u003e\n      26 June 2019\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"status\"\u003eStatus\u003c/h2\u003e\n\u003cp\u003eWe’re well on the way towards the release of Go 1.13,\nhopefully in early August of this year.\nThis is the first release that will include concrete changes\nto the language (rather than just minor adjustments to the spec),\nafter a longer moratorium on any such changes.\u003c/p\u003e\n\u003cp\u003eTo arrive at these language changes,\nwe started out with a small set of viable proposals,\nselected from the much larger list of\n\u003ca href=\"https://github.com/golang/go/issues?utf8=%E2%9C%93\u0026amp;q=is%3Aissue+is%3Aopen+label%3AGo2+label%3AProposal\" rel=\"noreferrer\" target=\"_blank\"\u003eGo 2 proposals\u003c/a\u003e,\nper the new proposal evaluation process outlined\nin the\n“\u003ca href=\"/blog/go2-here-we-come\"\u003eGo 2, here we come!\u003c/a\u003e” blog post.\nWe wanted our initial selection of proposals\nto be relatively minor and mostly uncontroversial,\nto have a reasonably high chance of having them\nmake it through the process.\nThe proposed changes had to be backward-compatible\nto be minimally disruptive since\n\u003ca href=\"/blog/using-go-modules\"\u003emodules\u003c/a\u003e,\nwhich eventually will allow module-specific language version selection,\nare not the default build mode quite yet.\nIn short, this initial round of changes was more about\ngetting the ball rolling again and gaining experience\nwith the new process, rather than tackling big issues.\u003c/p\u003e\n\u003cp\u003eOur\n\u003ca href=\"/blog/go2-here-we-come\"\u003eoriginal list of proposals\u003c/a\u003e –\n\u003ca href=\"/issue/20706\"\u003egeneral Unicode identifiers\u003c/a\u003e,\n\u003ca href=\"/issue/19308\"\u003ebinary integer literals\u003c/a\u003e,\n\u003ca href=\"/issue/28493\"\u003eseparators for number literals\u003c/a\u003e,\n\u003ca href=\"/issue/19113\"\u003esigned integer shift counts\u003c/a\u003e –\ngot both trimmed and expanded.\nThe general Unicode identifiers didn’t make the cut\nas we didn’t have a concrete design document in place in time.\nThe proposal for binary integer literals was expanded significantly\nand led to a comprehensive overhaul and modernization of\n\u003ca href=\"/design/19308-number-literals\"\u003eGo’s number literal syntax\u003c/a\u003e.\nAnd we added the Go 2 draft design proposal on\n\u003ca href=\"/design/go2draft-error-inspection\"\u003eerror inspection\u003c/a\u003e,\nwhich has been\n\u003ca href=\"/issue/29934#issuecomment-489682919\"\u003epartially accepted\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWith these initial changes in place for Go 1.13,\nit’s now time to look forward to Go 1.14\nand determine what we want to tackle next.\u003c/p\u003e\n\u003ch2 id=\"proposals-for-go-114\"\u003eProposals for Go 1.14\u003c/h2\u003e\n\u003cp\u003eThe goals we have for Go today are the same as in 2007: to\n\u003ca href=\"/blog/toward-go2\"\u003emake software development scale\u003c/a\u003e.\nThe three biggest hurdles on this path to improved scalability for Go are\npackage and version management,\nbetter error handling support,\nand generics.\u003c/p\u003e\n\u003cp\u003eWith Go module support getting increasingly stronger,\nsupport for package and version management is being addressed.\nThis leaves better error handling support and generics.\nWe have been working on both of these and presented\n\u003ca href=\"/design/go2draft\"\u003edraft designs\u003c/a\u003e\nat last year’s GopherCon in Denver.\nSince then we have been iterating those designs.\nFor error handling, we have published a concrete,\nsignificantly revised and simplified proposal (see below).\nFor generics, we are making progress, with a talk\n(“Generics in Go” by Ian Lance Taylor)\n\u003ca href=\"https://www.gophercon.com/agenda/session/49028\" rel=\"noreferrer\" target=\"_blank\"\u003ecoming up\u003c/a\u003e\nat this year’s GopherCon in San Diego,\nbut we have not reached the concrete proposal stage yet.\u003c/p\u003e\n\u003cp\u003eWe also want to continue with smaller\nimprovements to the language.\nFor Go 1.14, we have selected the following proposals:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/32437\"\u003e#32437\u003c/a\u003e.\nA built-in Go error check function, “try”\n(\u003ca href=\"/design/32437-try-builtin\"\u003edesign doc\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eThis is our concrete proposal for improved error handling.\nWhile the proposed, fully backwards-compatible language extension\nis minimal, we expect an outsize impact on error handling code.\nThis proposal has already attracted an enormous amount of comments,\nand it’s not easy to follow up.\nWe recommend starting with the\n\u003ca href=\"/issue/32437#issue-452239211\"\u003einitial comment\u003c/a\u003e\nfor a quick outline and then to read the detailed design doc.\nThe initial comment contains a couple of links leading to summaries\nof the feedback so far.\nPlease follow the feedback recommendations\n(see the “Next steps” section below) before posting.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/6977\"\u003e#6977\u003c/a\u003e.\nAllow embedding overlapping interfaces\n(\u003ca href=\"/design/6977-overlapping-interfaces\"\u003edesign doc\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eThis is an old, backwards-compatible proposal for making interface embedding more tolerant.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/32479\"\u003e#32479\u003c/a\u003e Diagnose \u003ccode\u003estring(int)\u003c/code\u003e conversion in \u003ccode\u003ego vet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003estring(int)\u003c/code\u003e conversion was introduced early in Go for convenience,\nbut it is confusing to newcomers (\u003ccode\u003estring(10)\u003c/code\u003e is \u003ccode\u003e\u0026#34;\\n\u0026#34;\u003c/code\u003e not \u003ccode\u003e\u0026#34;10\u0026#34;\u003c/code\u003e)\nand not justified anymore now that the conversion is available\nin the \u003ccode\u003eunicode/utf8\u003c/code\u003e package.\nSince removing this conversion is not a backwards-compatible change,\nwe propose to start with a \u003ccode\u003evet\u003c/code\u003e error instead.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/32466\"\u003e#32466\u003c/a\u003e Adopt crypto principles\n(\u003ca href=\"/design/cryptography-principles\"\u003edesign doc\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eThis is a request for feedback on a set of design principles for\ncryptographic libraries that we would like to adopt.\nSee also the related\n\u003ca href=\"/issue/32716\"\u003eproposal to remove SSLv3 support\u003c/a\u003e\nfrom \u003ccode\u003ecrypto/tls\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"next-steps\"\u003eNext steps\u003c/h2\u003e\n\u003cp\u003eWe are actively soliciting feedback on all these proposals.\nWe are especially interested in fact-based evidence\nillustrating why a proposal might not work well in practice,\nor problematic aspects we might have missed in the design.\nConvincing examples in support of a proposal are also very helpful.\nOn the other hand, comments containing only personal opinions\nare less actionable:\nwe can acknowledge them but we can’t address them\nin any constructive way.\nBefore posting, please take the time to read the detailed\ndesign docs and prior feedback or feedback summaries.\nEspecially in long discussions, your concern may have already\nbeen raised and discussed in earlier comments.\u003c/p\u003e\n\u003cp\u003eUnless there are strong reasons to not even proceed into the\nexperimental phase with a given proposal,\nwe are planning to have all these implemented at the\nstart of the\n\u003ca href=\"/wiki/Go-Release-Cycle\"\u003eGo 1.14 cycle\u003c/a\u003e\n(beginning of August, 2019)\nso that they can be evaluated in practice.\nPer the\n\u003ca href=\"/blog/go2-here-we-come\"\u003eproposal evaluation process\u003c/a\u003e,\nthe final decision will be\nmade at the end of the development cycle (beginning of November, 2019).\u003c/p\u003e\n\u003cp\u003eThank you for helping make Go a better language!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-06-26T00:00:00Z",
  "Author": "Robert Griesemer, for the Go team"
}