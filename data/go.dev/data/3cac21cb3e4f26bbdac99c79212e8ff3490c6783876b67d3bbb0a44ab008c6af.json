{
  "Source": "go.dev",
  "Title": "Go 1.20 is released!",
  "Link": "https://go.dev/blog/go1.20",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.20\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.20 is released!\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Robert Griesemer, on behalf of the Go team\u003cbr/\u003e\n      1 February 2023\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday the Go team is thrilled to release Go 1.20,\nwhich you can get by visiting the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.20 benefited from an extended development phase,\nmade possible by earlier broad testing and improved overall stability\nof the code base.\u003c/p\u003e\n\u003cp\u003eWe’re particularly excited to launch a preview of \u003ca href=\"/doc/pgo\"\u003eprofile-guided optimization\u003c/a\u003e\n(PGO), which enables the compiler to perform application- and\nworkload-specific optimizations based on run-time profile information.\nProviding a profile to \u003ccode\u003ego build\u003c/code\u003e enables the compiler to speed up typical\napplications by around 3–4%, and we expect future releases to benefit even more\nfrom PGO.\nSince this is a preview release of PGO support, we encourage folks to try it out,\nbut there are still rough edges which may preclude production use.\u003c/p\u003e\n\u003cp\u003eGo 1.20 also includes a handful of language changes,\nmany improvements to tooling and the library, and better overall performance.\u003c/p\u003e\n\u003ch2 id=\"language-changes\"\u003eLanguage changes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe predeclared \u003ca href=\"/ref/spec#Type_constraints\"\u003e\u003ccode\u003ecomparable\u003c/code\u003e\u003c/a\u003e constraint is\nnow also \u003ca href=\"/ref/spec#Satisfying_a_type_constraint\"\u003esatisfied\u003c/a\u003e by\nordinary \u003ca href=\"/ref/spec#Comparison_operators\"\u003ecomparable types\u003c/a\u003e, such as interfaces,\nwhich will simplify generic code.\u003c/li\u003e\n\u003cli\u003eThe functions \u003ccode\u003eSliceData\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eStringData\u003c/code\u003e have been added\nto package \u003ca href=\"/ref/spec#Package_unsafe\"\u003e\u003ccode\u003eunsafe\u003c/code\u003e\u003c/a\u003e. They complete the set of functions\nfor implementation-independent slice and string manipulation.\u003c/li\u003e\n\u003cli\u003eGo’s type conversion rules have been extended to permit direct conversion\n\u003ca href=\"/ref/spec#Conversions_from_slice_to_array_or_array_pointer\"\u003efrom a slice to an array\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe language specification now defines the exact order in which array elements\nand struct fields are \u003ca href=\"/ref/spec#Comparison_operators\"\u003ecompared\u003c/a\u003e.\nThis clarifies what happens in case of panics during comparisons.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"tool-improvements\"\u003eTool improvements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"/testing/coverage\"\u003e\u003ccode\u003ecover\u003c/code\u003e tool\u003c/a\u003e now can collect coverage profiles of whole programs,\nnot just of unit tests.\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"/cmd/go\"\u003e\u003ccode\u003ego\u003c/code\u003e tool\u003c/a\u003e no longer relies on pre-compiled standard library\npackage archives in the \u003ccode\u003e$GOROOT/pkg\u003c/code\u003e directory, and they are no longer\nshipped with the distribution, resulting in smaller downloads.\nInstead, packages in the standard library are built as needed and cached\nin the build cache, like other packages.\u003c/li\u003e\n\u003cli\u003eThe implementation of \u003ccode\u003ego test -json\u003c/code\u003e has been improved\nto make it more robust in the presence of stray writes to \u003ccode\u003estdout\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ego build\u003c/code\u003e, \u003ccode\u003ego install\u003c/code\u003e, and other build-related\ncommands now accept a \u003ccode\u003e-pgo\u003c/code\u003e flag enabling profile-guided optimizations\nas well as a \u003ccode\u003e-cover\u003c/code\u003e flag for whole-program coverage analysis.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ego\u003c/code\u003e command now disables \u003ccode\u003ecgo\u003c/code\u003e by default on systems without a C toolchain.\nConsequently, when Go is installed on a system without a C compiler, it will\nnow use pure Go builds for packages in the standard library that optionally use cgo,\ninstead of using pre-distributed package archives (which have been removed,\nas noted above).\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"/cmd/vet\"\u003e\u003ccode\u003evet\u003c/code\u003e tool\u003c/a\u003e reports more loop variable reference mistakes\nthat may occur in tests running in parallel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"standard-library-additions\"\u003eStandard library additions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe new \u003ca href=\"/pkg/crypto/ecdh\"\u003e\u003ccode\u003ecrypto/ecdh\u003c/code\u003e\u003c/a\u003e package provides explicit support for\nElliptic Curve Diffie-Hellman key exchanges over NIST curves and Curve25519.\u003c/li\u003e\n\u003cli\u003eThe new function \u003ca href=\"/pkg/errors#Join\"\u003e\u003ccode\u003eerrors.Join\u003c/code\u003e\u003c/a\u003e returns an error wrapping a list of errors\nwhich may be obtained again if the error type implements the \u003ccode\u003eUnwrap() []error\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eThe new \u003ca href=\"/pkg/net/http#ResponseController\"\u003e\u003ccode\u003ehttp.ResponseController\u003c/code\u003e\u003c/a\u003e type\nprovides access to extended per-request functionality not handled by the\n\u003ca href=\"/pkg/net/http#ResponseWriter\"\u003e\u003ccode\u003ehttp.ResponseWriter\u003c/code\u003e\u003c/a\u003e interface.\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"/pkg/net/http/httputil#ReverseProxy\"\u003e\u003ccode\u003ehttputil.ReverseProxy\u003c/code\u003e\u003c/a\u003e\nforwarding proxy includes a new \u003ccode\u003eRewrite\u003c/code\u003e hook function, superseding the\nprevious \u003ccode\u003eDirector\u003c/code\u003e hook.\u003c/li\u003e\n\u003cli\u003eThe new \u003ca href=\"/pkg/context#WithCancelCause\"\u003e\u003ccode\u003econtext.WithCancelCause\u003c/code\u003e\u003c/a\u003e function\nprovides a way to cancel a context with a given error.\nThat error can be retrieved by calling the new\n\u003ca href=\"/pkg/context#Cause\"\u003e\u003ccode\u003econtext.Cause\u003c/code\u003e\u003c/a\u003e function.\u003c/li\u003e\n\u003cli\u003eThe new \u003ca href=\"/pkg/os/exec#Cmd\"\u003e\u003ccode\u003eos/exec.Cmd\u003c/code\u003e\u003c/a\u003e fields \u003ca href=\"/pkg/os/exec#Cmd.Cancel\"\u003e\u003ccode\u003eCancel\u003c/code\u003e\u003c/a\u003e\nand \u003ca href=\"/pkg/os/exec#Cmd.WaitDelay\"\u003e\u003ccode\u003eWaitDelay\u003c/code\u003e\u003c/a\u003e specify the behavior of the\n\u003ccode\u003eCmd\u003c/code\u003e when its associated \u003ccode\u003eContext\u003c/code\u003e is canceled or its process exits.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"improved-performance\"\u003eImproved performance\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCompiler and garbage collector improvements have reduced memory overhead\nand improved overall CPU performance by up to 2%.\u003c/li\u003e\n\u003cli\u003eWork specifically targeting\ncompilation times led to build improvements by up to 10%.\nThis brings build speeds back in line with Go 1.17.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen \u003ca href=\"/doc/install/source\"\u003ebuilding a Go release from source\u003c/a\u003e,\nGo 1.20 requires a Go 1.17.13 or newer release.\nIn the future, we plan to move the bootstrap toolchain forward approximately\nonce a year.\nAlso, starting with Go 1.21, some older operating systems will no longer be supported:\nthis includes Windows 7, 8, Server 2008 and Server 2012,\nmacOS 10.13 High Sierra, and 10.14 Mojave.\nOn the other hand, Go 1.20 adds experimental support for FreeBSD on RISC-V.\u003c/p\u003e\n\u003cp\u003eFor a complete and more detailed list of all changes see the \u003ca href=\"/doc/go1.20\"\u003efull release notes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks to everyone who contributed to this release by writing code, filing bugs,\nsharing feedback, and testing the release candidates. Your efforts helped\nto ensure that Go 1.20 is as stable as possible.\nAs always, if you notice any problems, please \u003ca href=\"/issue/new\"\u003efile an issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEnjoy Go 1.20!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2023-02-01T00:00:00Z",
  "Author": "Robert Griesemer, on behalf of the Go team"
}