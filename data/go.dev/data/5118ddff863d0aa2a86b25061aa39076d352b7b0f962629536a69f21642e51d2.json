{
  "Source": "go.dev",
  "Title": "Twelve Years of Go",
  "Link": "https://go.dev/blog/12years",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/12years\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eTwelve Years of Go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Russ Cox, for the Go team\u003cbr/\u003e\n      10 November 2021\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday we celebrate the twelfth birthday of the Go open source release.\nWe have had an eventful year and have a lot to look forward to next year.\u003c/p\u003e\n\u003cp\u003eThe most visible change here on the blog is our\n\u003ca href=\"/blog/tidy-web\"\u003enew home on go.dev\u003c/a\u003e,\npart of consolidating all our Go web sites into a single, coherent site.\nAnother part of that consolidation was\n\u003ca href=\"/blog/godoc.org-redirect\"\u003ereplacing godoc.org with pkg.go.dev\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn February, the \u003ca href=\"/blog/go1.16\"\u003eGo 1.16 release\u003c/a\u003e\nadded \u003ca href=\"/blog/ports\"\u003emacOS ARM64 support\u003c/a\u003e,\nadded \u003ca href=\"/pkg/io/fs\"\u003ea file system interface\u003c/a\u003e and \u003ca href=\"/pkg/embed\"\u003eembedded files\u003c/a\u003e,\nand \u003ca href=\"/blog/go116-module-changes\"\u003eenabled modules by default\u003c/a\u003e,\nalong with the usual assortment of improvements and optimizations.\u003c/p\u003e\n\u003cp\u003eIn August, the \u003ca href=\"/blog/go1.17\"\u003eGo 1.17 release\u003c/a\u003e\nadded Windows ARM64 support,\nmade \u003ca href=\"/blog/tls-cipher-suites\"\u003eTLS cipher suite decisions easier and more secure\u003c/a\u003e,\nintroduced \u003ca href=\"/doc/go1.17#go-command\"\u003epruned module graphs\u003c/a\u003e\nto make modules even more efficient in large projects,\nand added\n\u003ca href=\"https://pkg.go.dev/cmd/go#hdr-Build_constraints\" rel=\"noreferrer\" target=\"_blank\"\u003enew, more readable build constraint syntax\u003c/a\u003e.\nUnder the hood, Go 1.17 also switched to a register-based calling convention for Go functions\non x86-64, improving performance in CPU-bound applications by 5–15%.\u003c/p\u003e\n\u003cp\u003eOver the course of the year, we\npublished \u003ca href=\"/doc/tutorial/\"\u003emany new tutorials\u003c/a\u003e,\na \u003ca href=\"/doc/database/\"\u003eguide to databases in Go\u003c/a\u003e,\na \u003ca href=\"/doc/#developing-modules\"\u003eguide to developing modules\u003c/a\u003e,\nand a \u003ca href=\"/ref/mod\"\u003eGo modules reference\u003c/a\u003e.\nOne highlight is the new tutorial\n“\u003ca href=\"/doc/tutorial/web-service-gin\"\u003eDeveloping a RESTful API with Go and Gin\u003c/a\u003e”,\nwhich is also available in\n\u003ca href=\"/s/cloud-shell-web-tutorial\"\u003einteractive form using Google Cloud Shell\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe’ve been busy on the IDE side,\n\u003ca href=\"/blog/gopls-vscode-go\"\u003eenabling gopls by default in VS Code Go\u003c/a\u003e\nand delivering countless improvements to both \u003ccode\u003egopls\u003c/code\u003e and VS Code Go,\nincluding a \u003ca href=\"https://github.com/golang/vscode-go/blob/master/docs/debugging.md\" rel=\"noreferrer\" target=\"_blank\"\u003epowerful debugging experience\u003c/a\u003e\npowered by Delve.\u003c/p\u003e\n\u003cp\u003eWe also launched the \u003ca href=\"/blog/fuzz-beta\"\u003eGo fuzzing beta\u003c/a\u003e\nand \u003ca href=\"/blog/generics-proposal\"\u003eofficially proposed adding generics to Go\u003c/a\u003e,\nboth of which are now expected in Go 1.18.\u003c/p\u003e\n\u003cp\u003eContinuing to adapt to “virtual-first”, the Go team hosted our second annual\n\u003ca href=\"https://opensourcelive.withgoogle.com/events/go-day-2021\" rel=\"noreferrer\" target=\"_blank\"\u003eGo day at Google Open Source Live\u003c/a\u003e.\nYou can watch the talks on YouTube:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e“\u003ca href=\"https://www.youtube.com/watch?v=nr8EpUO9jhw\" rel=\"noreferrer\" target=\"_blank\"\u003eUsing Generics in Go\u003c/a\u003e”,\nby Ian Lance Taylor, introduces generics and how to use them effectively.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e“\u003ca href=\"https://www.youtube.com/watch?v=5fgG1qZaV4w\" rel=\"noreferrer\" target=\"_blank\"\u003eModern Enterprise Applications\u003c/a\u003e”,\nby Steve Francia, shows how Go plays a role in enterprise modernization.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e“\u003ca href=\"https://www.youtube.com/watch?v=jMyzsp2E_0U\" rel=\"noreferrer\" target=\"_blank\"\u003eBuilding Better Projects with the Go Editor\u003c/a\u003e”,\nby Suzy Mueller, demonstrates how VS Code Go’s integrated tooling\nhelps you navigate code, debug tests, and more.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e“\u003ca href=\"https://www.youtube.com/watch?v=e7PtBOsTpXE\" rel=\"noreferrer\" target=\"_blank\"\u003eFrom Proof of Concept to Production\u003c/a\u003e”,\nby Benjamin Cane, a Distinguished Engineer at American Express,\nexplains how American Express came to use Go for its payments and rewards platforms.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"going-forward\"\u003eGoing Forward\u003c/h2\u003e\n\u003cp\u003eWe’re incredibly excited about what’s in store for Go’s 13th year.\nNext month, we will have two talks at \u003ca href=\"https://www.gophercon.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eGopherCon 2021\u003c/a\u003e,\nalong with \u003ca href=\"https://www.gophercon.com/agenda\" rel=\"noreferrer\" target=\"_blank\"\u003emany talented speakers from across the Go community\u003c/a\u003e.\nRegister for free and mark your calendars!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e“Why and How to Use Go Generics”,\nby Robert Griesemer and Ian Lance Taylor,\nwho led the design and implementation of this new feature. \u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/593015\" rel=\"noreferrer\" target=\"_blank\"\u003eDec 8, 11:00 AM (US Eastern)\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e“Debugging Go Code Using the Debug Adapter Protocol (DAP)”,\nby Suzy Mueller,\nshow how to use VS Code Go’s advanced debugging features with Delve. \u003cbr/\u003e\n\u003ca href=\"https://www.gophercon.com/agenda/session/593029\" rel=\"noreferrer\" target=\"_blank\"\u003eDec 9, 3:20 PM (US Eastern)\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn February, the Go 1.18 release will expand the new\nregister-based calling convention to non-x86 architectures,\nbringing dramatic performance improvements with it.\nIt will include the new Go fuzzing support.\nAnd it will be the first release to include support for generics.\u003c/p\u003e\n\u003cp\u003eGenerics will be one of our focuses for 2022.\nThe initial release in Go 1.18 is only the beginning.\nWe need to spend time using generics and learning what works\nand what doesn’t, so that we can write best practices\nand decide what should be added to the standard library\nand other libraries.\nWe expect that Go 1.19 (expected in August 2022)\nand later releases will further refine the design and implementation\nof generics as well as integrating them further into the overall Go experience.\u003c/p\u003e\n\u003cp\u003eAnother focus for 2022 is supply chain security.\nWe have been talking for years about the\n\u003ca href=\"https://research.swtch.com/deps\" rel=\"noreferrer\" target=\"_blank\"\u003eproblems of dependencies\u003c/a\u003e.\nThe design of Go modules provides\n\u003ca href=\"https://research.swtch.com/vgo-repro\" rel=\"noreferrer\" target=\"_blank\"\u003ereproducible, verifiable, verified builds\u003c/a\u003e,\nbut there is still more work to be done.\nStarting in Go 1.18, the \u003ccode\u003ego\u003c/code\u003e command will embed more information in binaries\nabout their build configurations, both to make reproducibility easier\nand to help projects that need to\n\u003ca href=\"https://en.wikipedia.org/wiki/Software_bill_of_materials\" rel=\"noreferrer\" target=\"_blank\"\u003egenerate an SBOM\u003c/a\u003e for Go binaries.\nWe have also started work on a\n\u003ca href=\"https://pkg.go.dev/golang.org/x/vuln\" rel=\"noreferrer\" target=\"_blank\"\u003eGo vulnerability database\u003c/a\u003e\nand an associated tool to report vulnerabilities in a program’s dependencies.\nOne of our goals in this work is to significantly improve the signal-to-noise ratio\nof this kind of tool:\nif a program doesn’t use the vulnerable function, we don’t want to report that.\nOver the course of 2022 we plan to make this available as a standalone tool\nbut also to add it to existing tooling, including \u003ccode\u003egopls\u003c/code\u003e and VS Code Go, and to \u003ca href=\"https://pkg.go.dev\" rel=\"noreferrer\" target=\"_blank\"\u003epkg.go.dev\u003c/a\u003e.\nThere is also more to do to improve other aspects of Go’s supply chain security posture.\nStay tuned for details.\u003c/p\u003e\n\u003cp\u003eOverall, we expect 2022 to be an eventful year for Go,\nand we will continue to deliver the timely releases and improvements\nyou’ve come to expect.\u003c/p\u003e\n\u003ch2 id=\"thank-you\"\u003eThank You!\u003c/h2\u003e\n\u003cp\u003eGo is far more than just us on the Go team at Google.\nThank you for your help making Go a success\nand joining us on this adventure.\nWe hope you are all staying safe and wish you all the best.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-11-10T00:00:00Z",
  "Author": "Russ Cox, for the Go team"
}