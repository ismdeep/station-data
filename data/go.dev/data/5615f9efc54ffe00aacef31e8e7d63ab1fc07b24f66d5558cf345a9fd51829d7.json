{
  "Source": "go.dev",
  "Title": "Gccgo in GCC 4.7.1",
  "Link": "https://go.dev/blog/gccgo-in-gcc-471",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/gccgo-in-gcc-471\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGccgo in GCC 4.7.1\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Ian Lance Taylor\u003cbr/\u003e\n      11 July 2012\n      \u003c/p\u003e\n      \n      \u003cp\u003eThe Go language has always been defined by a \u003ca href=\"/ref/spec\"\u003espec\u003c/a\u003e,\nnot an implementation.\nThe Go team has written two different compilers that implement that spec: gc and gccgo.\nHaving two different implementations helps ensure that the spec is complete and correct:\nwhen the compilers disagree, we fix the spec,\nand change one or both compilers accordingly.\nGc is the original compiler, and the go tool uses it by default.\nGccgo is a different implementation with a different focus,\nand in this post we’ll take a closer look at it.\u003c/p\u003e\n\u003cp\u003eGccgo is distributed as part of GCC, the GNU Compiler Collection.\nGCC supports several different frontends for different languages;\ngccgo is a Go frontend connected to the GCC backend.\nThe Go frontend is separate from the GCC project and is designed to be able\nto connect to other compiler backends,\nbut currently only supports GCC.\u003c/p\u003e\n\u003cp\u003eCompared to gc, gccgo is slower to compile code but supports more powerful optimizations,\nso a CPU-bound program built by gccgo will usually run faster.\nAll the optimizations implemented in GCC over the years are available,\nincluding inlining, loop optimizations, vectorization,\ninstruction scheduling, and more.\nWhile it does not always produce better code,\nin some cases programs compiled with gccgo can run 30% faster.\u003c/p\u003e\n\u003cp\u003eThe gc compiler supports only the most popular processors:\nx86 (32-bit and 64-bit) and ARM.\nGccgo, however, supports all the processors that GCC supports.\nNot all those processors have been thoroughly tested for gccgo,\nbut many have, including x86 (32-bit and 64-bit),\nSPARC, MIPS, PowerPC and even Alpha.\nGccgo has also been tested on operating systems that the gc compiler does\nnot support, notably Solaris.\u003c/p\u003e\n\u003cp\u003eGccgo provides the standard, complete Go library.\nMany of the core features of the Go runtime are the same in both gccgo and gc,\nincluding the goroutine scheduler, channels,\nthe memory allocator, and the garbage collector.\nGccgo supports splitting goroutine stacks as the gc compiler does,\nbut currently only on x86 (32-bit or 64-bit) and only when using the gold\nlinker (on other processors,\neach goroutine will have a large stack, and a deep series of function calls\nmay run past the end of the stack and crash the program).\u003c/p\u003e\n\u003cp\u003eGccgo distributions do not yet include a version of the go command.\nHowever, if you install the go command from a standard Go release,\nit already supports gccgo via the \u003ccode\u003e-compiler\u003c/code\u003e option:\ngo build \u003ccode\u003e-compiler gccgo myprog\u003c/code\u003e.\nThe tools used for calls between Go and C/C++,\ncgo and SWIG, also support gccgo.\u003c/p\u003e\n\u003cp\u003eWe have put the Go frontend under the same BSD license as the rest of the Go\ntools.  You can download the source code for the frontend at the\n\u003ca href=\"https://github.com/golang/gofrontend\" rel=\"noreferrer\" target=\"_blank\"\u003egofrontend project\u003c/a\u003e.\nNote that when the Go frontend is linked with the GCC backend to make gccgo,\nGCC’s GPL license takes precedence.\u003c/p\u003e\n\u003cp\u003eThe latest release of GCC, 4.7.1, includes gccgo with support for Go 1.\nIf you need better performance for CPU-bound Go programs,\nor you need to support processors or operating systems that the gc compiler does not support,\ngccgo might be the answer.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2012-07-11T00:00:00Z",
  "Author": "Ian Lance Taylor"
}