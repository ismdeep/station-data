{
  "Source": "go.dev",
  "Title": "Contributors Summit",
  "Link": "https://go.dev/blog/contributors-summit",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/contributors-summit\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eContributors Summit\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Sam Whited\u003cbr/\u003e\n      3 August 2017\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThe day before GopherCon, a group of Go team members and contributors gathered\nin Denver to discuss and plan for the future of the Go project.\nThis was the first ever event of its kind, a major milestone for the Go project.\nThe event comprised a morning session revolving around focused discussions on a\ntheme, and an afternoon session made up of round table discussions in small\nbreak-out groups.\u003c/p\u003e\n\u003ch3 id=\"compiler-and-runtime\"\u003eCompiler and runtime\u003c/h3\u003e\n\u003cp\u003eThe compiler and runtime session started out with a discussion about refactoring\n\u003ccode\u003egc\u003c/code\u003e and related tools into importable packages.\nThis would reduce overhead in the core tools and in IDEs which could embed the\ncompiler themselves to do quick syntax checking.\nCode could also be compiled entirely in memory, which is useful in environments\nthat don’t provide a filesystem, or to run tests continually while you develop\nto get a live report of breakages.\nMore discussion about whether or not to pursue this line of work will most\nlikely be brought up on the mailing lists in the future.\u003c/p\u003e\n\u003cp\u003eThere was also a great deal of discussion around bridging the gap between\noptimized assembly code and Go.\nMost crypto code in Go is written in assembly for performance reasons; this\nmakes it hard to debug, maintain, and read.\nFurthermore, once you’ve ventured into writing assembly, you often can’t call\nback into Go, limiting code reuse.\nA rewrite in Go would make maintenance easier.\nAdding processor intrinsics and better support for 128-bit math would improve\nGo’s crypto performance.\nIt was proposed that the new \u003ccode\u003emath/bits\u003c/code\u003e package coming in 1.9 could be expanded\nfor this purpose.\u003c/p\u003e\n\u003cp\u003eNot being all that familiar with the development of the compiler and runtime,\nthis for me was one of the more interesting sessions of the day.\nI learned a lot about the current state of the world, the problems, and where\npeople want to go from here.\u003c/p\u003e\n\u003ch3 id=\"dependency-management\"\u003eDependency management\u003c/h3\u003e\n\u003cp\u003eAfter a quick update from the \u003ca href=\"https://github.com/golang/dep\" rel=\"noreferrer\" target=\"_blank\"\u003edep\u003c/a\u003e team on the\nstatus of the project, the dependency management session gravitated towards how\nthe Go world will work once dep (or something dep-like) becomes the primary\nmeans of package management.\nWork to make Go easier to get started with and make dep easier to use has\nalready started.\nIn Go 1.8, a default value for \u003ccode\u003eGOPATH\u003c/code\u003e was introduced, meaning users will only\nhave to add Go’s bin directory to their \u003ccode\u003e$PATH\u003c/code\u003e before they can get started\nwith dep.\u003c/p\u003e\n\u003cp\u003eAnother future usability improvement that dep might enable, is allowing Go to\nwork from any directory (not just a workspace in the GOPATH), so that people can\nuse the directory structures and workflows they’re used to using with other\nlanguages.\nIt may also be possible to make \u003ccode\u003ego install\u003c/code\u003e easier in the future by guiding\nusers through the process of adding the bin directory to their path, or even\nautomating the process.\nThere are many good options for making the Go tooling easier to use, and\ndiscussion will likely continue on the mailing lists.\u003c/p\u003e\n\u003ch3 id=\"the-standard-library\"\u003eThe standard library\u003c/h3\u003e\n\u003cp\u003eThe discussions we had around the future of the Go language are mostly covered\nin Russ Cox’s blog post: \u003ca href=\"/blog//toward-go2\"\u003eToward Go 2\u003c/a\u003e, so\nlet’s move on to the standard library session.\u003c/p\u003e\n\u003cp\u003eAs a contributor to the standard library and subrepos, this session was\nparticularly interesting to me.\nWhat goes in the standard library and subrepos, and how much it can change, is a\ntopic that isn’t well defined.\nIt can be hard on the Go team to maintain a huge number of packages when they\nmay or may not have anyone with specific expertise in the subject matter.\nTo make critical fixes to packages in the standard library, one must wait 6\nmonths for a new version of Go to ship (or a point release has to be shipped in\nthe case of security issues, which drains team resources).\nBetter dependency management may facilitate the migration of some packages out\nof the standard library and into their own projects with their own release\nschedules.\u003c/p\u003e\n\u003cp\u003eThere was also some discussion about things that are difficult to achieve with\nthe interfaces in the standard library.\nFor instance, it would be nice if \u003ccode\u003eio.Reader\u003c/code\u003e accepted a context so that\nblocking read operations could be canceled.\u003c/p\u003e\n\u003cp\u003eMore \u003ca href=\"/wiki/experiencereports\"\u003eexperience reports\u003c/a\u003e are\nnecessary before we can determine what will change in the standard library.\u003c/p\u003e\n\u003ch3 id=\"tooling-and-editors\"\u003eTooling and editors\u003c/h3\u003e\n\u003cp\u003eA language server for editors to use was a hot topic in the tooling session,\nwith a number of people advocating for IDE and tool developers to adopt a common\n“Go Language Server” to index and display information about code and packages.\nMicrosoft’s \u003ca href=\"https://www.github.com/Microsoft/language-server-protocol\" rel=\"noreferrer\" target=\"_blank\"\u003eLanguage Server Protocol\u003c/a\u003e\nwas suggested as a good starting point because of its wide support in editors\nand IDEs.\u003c/p\u003e\n\u003cp\u003eJaana Burcu Dogan also discussed her work on distributed tracing and how\ninformation about runtime events could be made easier to acquire and attached to\ntraces.\nHaving a standard “counter” API to report statistics was proposed, but specific\nexperience reports from the community will be required before such an API can be\ndesigned.\u003c/p\u003e\n\u003ch3 id=\"the-contributor-experience\"\u003eThe contributor experience\u003c/h3\u003e\n\u003cp\u003eThe final session of the day was on the contributor experience.\nThe first discussion was all about how the current Gerrit workflow could be made\neasier for new contributors which has already resulted in improvements to the\ndocumentation for several repos, and influenced the new contributors workshop a\nfew days later!\u003c/p\u003e\n\u003cp\u003eMaking it easier to find tasks to work on, empowering users to perform gardening\ntasks on the issue tracker, and making it easier to find reviewers were also\nconsidered.\nHopefully we’ll see improvements to these and many more areas of the\ncontribution process in the coming weeks and months!\u003c/p\u003e\n\u003ch3 id=\"breakout-sessions\"\u003eBreakout sessions\u003c/h3\u003e\n\u003cp\u003eIn the afternoon, participants broke out into smaller groups to have more\nin-depth discussions about some of the topics from the morning session.\nThese discussions had more specific goals.\nFor example, one group worked on identifying the useful parts of an experience\nreport and a list of existing literature documenting Go user experiences,\nresulting in the experience report\n\u003ca href=\"/wiki/experiencereports\"\u003ewiki page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnother group considered the future of errors in Go.\nMany Go users are initially confused by, or don’t understand the fact that\n\u003ccode\u003eerror\u003c/code\u003e is an interface, and it can be difficult to attach more information to\nerrors without masking sentinel errors such as \u003ccode\u003eio.EOF\u003c/code\u003e.\nThe breakout session discussed specific ways it might be possible to fix some of\nthese issues in upcoming Go releases, but also ways error handling could be\nimproved in Go 2.\u003c/p\u003e\n\u003ch2 id=\"community\"\u003eCommunity\u003c/h2\u003e\n\u003cp\u003eOutside of the technical discussions, the summit also provided an opportunity\nfor a group of people from all over the world who often talk and work together\nto meet in person, in many cases for the first time.\nThere is no substitute for a little face-to-face time to build a sense of mutual\nrespect and comradeship, which is critical when a diverse group with different\nbackgrounds and ideas needs to come together to work in a single community.\nDuring the breaks, Go team members dispersed themselves among the contributors\nfor discussions both about Go and a little general socialization, which really\nhelped to put faces to the names that review our code every day.\u003c/p\u003e\n\u003cp\u003eAs Russ discussed in \u003ca href=\"/blog//toward-go2\"\u003eToward Go 2\u003c/a\u003e,\ncommunicating effectively requires knowing your audience.\nHaving a broad sample of Go contributors in a room together helped us all to\nunderstand the Go audience better and start many productive discussions about\nthe future of Go.\nGoing forward, we hope to do more frequent events like this to facilitate\ndiscourse and a sense of community.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"contributors-summit/IMG_20170712_145844.jpg\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"contributors-summit/IMG_20170712_145854.jpg\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"contributors-summit/IMG_20170712_145905.jpg\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"contributors-summit/IMG_20170712_145911.jpg\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"contributors-summit/IMG_20170712_145950.jpg\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003ePhotos by Steve Francia\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-08-03T00:00:00Z",
  "Author": "Sam Whited"
}