{
  "Source": "go.dev",
  "Title": "Thirteen Years of Go",
  "Link": "https://go.dev/blog/13years",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/13years\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eThirteen Years of Go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Russ Cox, for the Go team\u003cbr/\u003e\n      10 November 2022\n      \u003c/p\u003e\n      \n      \u003cimg src=\"../doc/gopher/gopherbelly300.jpg\" height=\"300\" width=\"300\" align=\"right\" style=\"margin: 0 0 1em 1em;\"/\u003e\n\u003cp\u003eToday we celebrate the thirteenth birthday of the Go open source release.\n\u003ca href=\"/doc/gopher\"\u003eThe Gopher\u003c/a\u003e is a teenager!\u003c/p\u003e\n\u003cp\u003eIt’s been an eventful year for Go.\nThe most significant event was the release of\n\u003ca href=\"/blog/go1.18\"\u003eGo 1.18 in March\u003c/a\u003e,\nwhich brought many improvements but most notably\nGo workspaces, fuzzing, and generics.\u003c/p\u003e\n\u003cp\u003eWorkspaces make it easy to work on multiple modules simultaneously,\nwhich is most helpful when you are maintaining a set of related modules with\nmodule dependencies between them.\nTo learn about workspaces, see Beth Brown’s blog post\n“\u003ca href=\"/blog/get-familiar-with-workspaces\"\u003eGet familiar with workspaces\u003c/a\u003e”\nand the \u003ca href=\"/ref/mod#workspaces\"\u003eworkspace reference\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFuzzing is a new feature of \u003ccode\u003ego\u003c/code\u003e \u003ccode\u003etest\u003c/code\u003e that\nhelps you find inputs that your code doesn’t handle properly:\nyou define a fuzz test that should pass for any input at all,\nand then fuzzing tries different random inputs, guided by code coverage,\nto try to make the fuzz test fail.\nFuzzing is particularly useful when developing code that must be\nrobust against arbitrary (even attacker-controlled) inputs.\nTo learn more about fuzzing, see the tutorial\n“\u003ca href=\"/doc/tutorial/fuzz\"\u003eGetting started with fuzzing\u003c/a\u003e”\nand the \u003ca href=\"/security/fuzz/\"\u003efuzzing reference\u003c/a\u003e,\nand keep an eye out for Katie Hockman’s GopherCon 2022 talk\n“Fuzz Testing Made Easy”,\nwhich should be online soon.\u003c/p\u003e\n\u003cp\u003eGenerics, quite possibly Go’s most requested feature,\nadds parametric polymorphism to Go, to allow writing\ncode that works with a variety of different types but is still\nstatically checked at compile time.\nTo learn more about generics, see the tutorial\n“\u003ca href=\"/doc/tutorial/generics\"\u003eGetting started with generics\u003c/a\u003e”.\nFor more detail see\nthe blog posts\n“\u003ca href=\"/blog/intro-generics\"\u003eAn Introduction to Generics\u003c/a\u003e”\nand\n“\u003ca href=\"/blog/when-generics\"\u003eWhen to Use Generics\u003c/a\u003e”,\nor the talks\n“\u003ca href=\"https://www.youtube.com/watch?v=nr8EpUO9jhw\" rel=\"noreferrer\" target=\"_blank\"\u003eUsing Generics in Go\u003c/a\u003e”\nfrom Go Day on Google Open Source Live 2021,\nand\n“\u003ca href=\"https://www.youtube.com/watch?v=Pa_e9EeCdy8\" rel=\"noreferrer\" target=\"_blank\"\u003eGenerics!\u003c/a\u003e” from GopherCon 2021,\nby Robert Griesemer and Ian Lance Taylor.\u003c/p\u003e\n\u003cp\u003eCompared to Go 1.18, the \u003ca href=\"/blog/go1.19\"\u003eGo 1.19 release in August\u003c/a\u003e was a relatively quiet one:\nit focused on refining and improving the features that Go 1.18 introduced\nas well as internal stability improvements and optimizations.\nOne visible change in Go 1.19 was the addition of\nsupport for \u003ca href=\"/doc/comment\"\u003elinks, lists, and headings in Go doc comments\u003c/a\u003e.\nAnother was the addition of a \u003ca href=\"/doc/go1.19#runtime\"\u003esoft memory limit\u003c/a\u003e\nfor the garbage collector, which is particularly useful in container workloads.\nFor more about recent garbage collector improvements,\nsee Michael Knyszek’s blog post “\u003ca href=\"/blog/go119runtime\"\u003eGo runtime: 4 years later\u003c/a\u003e”,\nhis talk “\u003ca href=\"https://www.youtube.com/watch?v=07wduWyWx8M\u0026amp;list=PLtoVuM73AmsJjj5tnZ7BodjN_zIvpULSx\" rel=\"noreferrer\" target=\"_blank\"\u003eRespecting Memory Limits in Go\u003c/a\u003e”,\nand the new “\u003ca href=\"/doc/gc-guide\"\u003eGuide to the Go Garbage Collector\u003c/a\u003e”.\u003c/p\u003e\n\u003cp\u003eWe’ve continued to work on making Go development scale gracefully to ever larger code bases,\nespecially in our work on VS Code Go and the Gopls language server.\nThis year, Gopls releases focused on improving stability and performance,\nwhile delivering support for generics as well as new analyses and code lenses.\nIf you aren’t using VS Code Go or Gopls yet, give them a try.\nSee Suzy Mueller’s talk\n“\u003ca href=\"https://www.youtube.com/watch?v=jMyzsp2E_0U\" rel=\"noreferrer\" target=\"_blank\"\u003eBuilding Better Projects with the Go Editor\u003c/a\u003e”\nfor an overview.\nAnd as a bonus,\n\u003ca href=\"/s/vscode-go-debug\"\u003eDebugging Go in VS Code\u003c/a\u003e\ngot more reliable and powerful with Delve’s native\n\u003ca href=\"https://microsoft.github.io/debug-adapter-protocol/\" rel=\"noreferrer\" target=\"_blank\"\u003eDebug Adapter Protocol\u003c/a\u003e support.\nTry Suzy’s “\u003ca href=\"https://www.youtube.com/watch?v=ZPIPPRjwg7Q\" rel=\"noreferrer\" target=\"_blank\"\u003eDebugging Treasure Hunt\u003c/a\u003e”!\u003c/p\u003e\n\u003cp\u003eAnother part of development scale is the number of dependencies in a project.\nA month or so after Go’s 12th birthday,\nthe \u003ca href=\"https://en.wikipedia.org/wiki/Log4Shell\" rel=\"noreferrer\" target=\"_blank\"\u003eLog4shell vulnerability\u003c/a\u003e served\nas a wake-up call for the industry\nabout the importance of supply chain security.\nGo’s module system was designed specifically for this purpose,\nto help you understand and track your dependencies,\nidentify which specific ones you are using,\nand determine whether any of them have known vulnerabilities.\nFilippo Valsorda’s blog post\n“\u003ca href=\"/blog/supply-chain\"\u003eHow Go Mitigates Supply Chain Attacks\u003c/a\u003e”\ngives an overview of our approach.\nIn September, we previewed\nGo’s approach to vulnerability management\nin Julie Qiu’s blog post “\u003ca href=\"/blog/vuln\"\u003eVulnerability Management for Go\u003c/a\u003e”.\nThe core of that work is a new, curated vulnerability database\nand a new \u003ca href=\"https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck\" rel=\"noreferrer\" target=\"_blank\"\u003egovulncheck command\u003c/a\u003e,\nwhich uses advanced static analysis to eliminate most of the false positives\nthat would result from using module requirements alone.\u003c/p\u003e\n\u003cp\u003ePart of our effort to understand Go users is our annual end-of-year Go survey.\nThis year, our user experience researchers added a lightweight mid-year Go survey as well.\nWe aim to gather enough responses to be statistically significant\nwithout being a burden on the Go community as a whole.\nFor the results, see Alice Merrick’s blog post\n“\u003ca href=\"/blog/survey2021-results\"\u003eGo Developer Survey 2021 Results\u003c/a\u003e”\nand Todd Kulesza’s post\n“\u003ca href=\"/blog/survey2022-q2-results\"\u003eGo Developer Survey 2022 Q2 Results\u003c/a\u003e”.\u003c/p\u003e\n\u003cp\u003eAs the world starts traveling more,\nwe’ve also been happy to meet many of you in person at Go conferences in 2022,\nparticularly at GopherCon Europe in Berlin in July and at GopherCon in Chicago in October.\nLast week we held our annual virtual event,\n\u003ca href=\"https://opensourcelive.withgoogle.com/events/go-day-2022\" rel=\"noreferrer\" target=\"_blank\"\u003eGo Day on Google Open Source Live\u003c/a\u003e.\nHere are some of the talks we’ve given at those events:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“\u003ca href=\"https://www.youtube.com/watch?v=vQm_whJZelc\" rel=\"noreferrer\" target=\"_blank\"\u003eHow Go Became its Best Self\u003c/a\u003e”,\nby Cameron Balahan, at GopherCon Europe.\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://www.youtube.com/watch?v=KbOTTU9yEpI\" rel=\"noreferrer\" target=\"_blank\"\u003eGo team Q\u0026amp;A\u003c/a\u003e”,\nwith Cameron Balahan, Michael Knyszek, and Than McIntosh, at GopherCon Europe.\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://www.youtube.com/watch?v=v24wrd3RwGo\" rel=\"noreferrer\" target=\"_blank\"\u003eCompatibility: How Go Programs Keep Working\u003c/a\u003e”,\nby Russ Cox at GopherCon.\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://www.gophercon.com/agenda/session/998660\" rel=\"noreferrer\" target=\"_blank\"\u003eA Holistic Go Experience\u003c/a\u003e”,\nby Cameron Balahan at GopherCon (video not yet posted)\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://opensourcelive.withgoogle.com/events/go-day-2022/watch?talk=talk2\" rel=\"noreferrer\" target=\"_blank\"\u003eStructured Logging for Go\u003c/a\u003e”,\nby Jonathan Amsterdam at Go Day on Google Open Source Live\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://opensourcelive.withgoogle.com/events/go-day-2022/watch?talk=talk3\" rel=\"noreferrer\" target=\"_blank\"\u003eWriting your Applications Faster and More Securely with Go\u003c/a\u003e”,\nby Cody Oss at Go Day on Google Open Source Live\u003c/li\u003e\n\u003cli\u003e“\u003ca href=\"https://opensourcelive.withgoogle.com/events/go-day-2022/watch?talk=talk4\" rel=\"noreferrer\" target=\"_blank\"\u003eRespecting Memory Limits in Go\u003c/a\u003e,\nby Michael Knyszek at Go Day on Google Open Source Live\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOne other milestone for this year was the publication of\n“\u003ca href=\"https://cacm.acm.org/magazines/2022/5/260357-the-go-programming-language-and-environment/fulltext\" rel=\"noreferrer\" target=\"_blank\"\u003eThe Go Programming Language and Environment\u003c/a\u003e”,\nby Russ Cox, Robert Griesemer, Rob Pike, Ian Lance Taylor, and Ken Thompson,\nin \u003cem\u003eCommunications of the ACM\u003c/em\u003e.\nThe article, by the original designers and implementers of Go,\nexplains what we believe makes Go so popular and productive.\nIn short, it is that Go effort focuses on delivering a full development environment\ntargeting the entire software development process,\nwith a focus on scaling both to large software engineering efforts\nand large deployments.\u003c/p\u003e\n\u003cp\u003eIn Go’s 14th year, we’ll keep working to make Go the best environment\nfor software engineering at scale.\nWe plan to focus particularly on supply chain security, improved compatibility,\nand structured logging, all of which have been linked already in this post.\nAnd there will be plenty of other improvements as well,\nincluding profile-guided optimization.\u003c/p\u003e\n\u003ch2 id=\"thank-you\"\u003eThank You!\u003c/h2\u003e\n\u003cp\u003eGo has always been far more than what the Go team at Google does.\nThanks to all of you—our contributors and everyone in the Go community—for\nyour help making Go the successful programming environment that it is today.\nWe wish you all the best in the coming year.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-11-10T00:00:00Z",
  "Author": "Russ Cox, for the Go team"
}