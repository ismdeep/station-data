{
  "Source": "go.dev",
  "Title": "Go Developer Survey 2019 Results",
  "Link": "https://go.dev/blog/survey2019-results",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/survey2019-results\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo Developer Survey 2019 Results\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Todd Kulesza\u003cbr/\u003e\n      20 April 2020\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"what-a-response\"\u003eWhat a response!\u003c/h2\u003e\n\u003cp\u003eI want to start with an enormous \u003cstrong\u003ethank you\u003c/strong\u003e to the thousands of Go developers\nwho participated in this year’s survey.\nFor 2019, we saw 10,975 responses, nearly \u003ca href=\"/blog/survey2018-results\"\u003etwice as many as last year\u003c/a\u003e!\nOn behalf of the rest of the team, I cannot adequately stress how much we\nappreciate you taking the time and effort to tell us about your experiences with Go. Thank you!\u003c/p\u003e\n\u003ch2 id=\"a-note-about-prior-years\"\u003eA note about prior years\u003c/h2\u003e\n\u003cp\u003eSharp-eyed readers may notice that our year-over-year comparisons don’t\nquite square with numbers we’ve shared in the past.\nThe reason is that from 2016–2018, we calculated percentages for each\nquestion using the total number of people who started the survey as the denominator.\nWhile that’s nice and consistent, it ignores the fact that not everyone\nfinishes the survey—up to 40% of participants stop before reaching the final page,\nwhich meant questions that occurred later in the survey appeared to perform\nworse solely because they were later.\nThus, this year we’ve recalculated all of our results (including the 2016–2018\nresponses shown in this post) to use the number of people who responded\nto a given question as the denominator for that question.\nWe’ve included the number of 2019 responses for each chart—in the form\nof “n=[number of respondents]” on the x-axis or in the chart’s legend—to\ngive readers a better understanding of the weight of evidence underlying each finding.\u003c/p\u003e\n\u003cp\u003eSimilarly, we learned that in prior surveys options that appeared earlier\nin response lists had a disproportionate response rate.\nTo address this, we added an element of randomization into the survey.\nSome of our multiple-choice questions have lists of choices with no logical ordering,\nsuch as “I write the following in Go:\n[list of types of applications]”.\nPreviously these choices had been alphabetized,\nbut for 2019 they were presented in a random order to each participant.\nThis means year-over-year comparison for certain questions are invalid for 2018 → 2019,\nbut trends from 2016–2018 are not invalidated.\nYou can think of this as setting a more accurate baseline for 2019.\nWe retained alphabetical ordering in cases where respondents are likely\nto scan for a particular name,\nsuch as their preferred editor.\nWe explicitly call out which questions this applies to below.\u003c/p\u003e\n\u003cp\u003eA third major change was to improve our analysis of questions with open-ended,\nfree-text responses.\nLast year we used machine learning to roughly—but quickly—categorize these responses.\nThis year two researchers manually analyzed and categorized these responses,\nallowing for a more granular analysis but preventing valid comparisons with\nlast year’s numbers.\nLike the randomization discussed above, the purpose of this change is to\ngive us a reliable baseline for 2019 onward.\u003c/p\u003e\n\u003ch2 id=\"without-further-ado\"\u003eWithout further ado…\u003c/h2\u003e\n\u003cp\u003eThis is a long post. Here’s the tl;dr of our major findings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe demographics of our respondents are similar to Stack Overflow’s survey respondents,\nwhich increases our confidence that these results are representative of\nthe larger Go developer audience.\u003c/li\u003e\n\u003cli\u003eA majority of respondents use Go every day, and this number has been trending up each year.\u003c/li\u003e\n\u003cli\u003eGo’s use is still concentrated in technology companies,\nbut Go is increasingly found in a wider variety of industries,\nsuch as finance and media.\u003c/li\u003e\n\u003cli\u003eMethodology changes showed us that most of our year-over-year metrics\nare stable and higher than we previously realized.\u003c/li\u003e\n\u003cli\u003eRespondents are using Go to solve similar problems,\nparticularly building API/RPC services and CLIs,\nregardless of the size of organization they work at.\u003c/li\u003e\n\u003cli\u003eMost teams try to update to the latest Go release quickly;\nwhen third-party providers are late to support the current Go release,\nthis creates an adoption blocker for developers.\u003c/li\u003e\n\u003cli\u003eAlmost everyone in the Go ecosystem is now using modules, but some confusion around package management remains.\u003c/li\u003e\n\u003cli\u003eHigh-priority areas for improvement include improving the developer experience for debugging,\nworking with modules, and working with cloud services.\u003c/li\u003e\n\u003cli\u003eVS Code and GoLand have continued to see increased use; they’re now preferred by 3 out of 4 respondents.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"who-did-we-hear-from\"\u003eWho did we hear from?\u003c/h2\u003e\n\u003cp\u003eThis year we asked some new demographic questions to help us better understand\nthe people who’ve responded to this survey.\nIn particular, we asked about the duration of professional programming experience\nand the size of the organizations where people work.\nThese were modeled on questions that StackOverflow asks in their annual survey,\nand the distribution of responses we saw is very close to StackOverflow’s 2019 results.\nOur take-away is the respondents to this survey have similar levels of professional\nexperience and proportional representation of different sizes of organizations\nas the StackOverflow survey audience (with the obvious difference that we’re\nprimarily hearing from developers working with Go).\nThat increases our confidence when generalizing these findings to the estimated\n1 million Go developers worldwide.\nThese demographic questions will also help us in the future to identify\nwhich year-over-year changes may be the result of a shift in who responded to the survey,\nrather than changes in sentiment or behavior.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig1.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig2.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eLooking at Go experience, we see that a majority of respondents (56%) are\nrelatively new to Go,\nhaving used it for less than two years.\nMajorities also said they use Go at work (72%) and outside of work (62%).\nThe percentage of respondents using Go professionally appears to be trending up each year.\u003c/p\u003e\n\u003cp\u003eAs you can see in the chart below, in 2018 we saw a spike in these numbers,\nbut that increase disappeared this year.\nThis is one of many signals suggesting that the audience who answered the\nsurvey in 2018 was significantly different than in the other three years.\nIn this case they were significantly more likely to be using Go outside\nof work and a different language while at work,\nbut we see similar outliers across multiple survey questions.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig3.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig4.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eRespondents who have been using Go the longest have different backgrounds\nthan newer Go developers.\nThese Go veterans were more likely to claim expertise in C/C++ and less\nlikely to claim expertise in JavaScript,\nTypeScript, and PHP.\nOne caveat is that this is self-reported “expertise”;\nit may be more helpful to think of it instead as “familiarity”.\nPython appears to be the language (other than Go) familiar to the most respondents,\nregardless of how long they’ve been working with Go.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig5.svg\" width=\"750\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eLast year we asked about which industries respondents work in,\nfinding that a majority reported working in software,\ninternet, or web service companies.\nThis year it appears respondents represent a broader range of industries.\nHowever, we also simplified the list of industries to reduce confusion from\npotentially overlapping categories (e.g.,\nthe separate categories for “Software” and “Internet / web services” from\n2018 were combined into “Technology” for 2019).\nThus, this isn’t strictly an apples-to-apples comparison.\nFor example, it’s possible that one effect of simplifying the category list\nwas to reduce the use of the “Software” category as a catch-all for respondents\nwriting Go software for an industry that wasn’t explicitly listed.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig6.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eGo is a successful open-source project, but that doesn’t mean the developers\nworking with it are also writing free or open-source software.\nAs in prior years, we found that most respondents are not frequent contributors\nto Go open-source projects,\nwith 75% saying they do so “infrequently” or “never”.\nAs the Go community expands, we see the proportion of respondents who’ve\nnever contributed to Go open-source projects slowly trending up.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig7.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"developer-tools\"\u003eDeveloper tools\u003c/h2\u003e\n\u003cp\u003eAs in prior years, the vast majority of survey respondents reported working\nwith Go on Linux and macOS systems.\nThis is one area of strong divergence between our respondents and StackOverflow’s 2019 results:\nin our survey, only 20% of respondents use Windows as a primary development platform,\nwhile for StackOverflow it was 45% of respondents.\nLinux is used by 66% and macOS by 53%—both much higher than the StackOverflow audience,\nwhich reported 25% and 30%, respectively.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig8.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig9.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThe trend in editor consolidation has continued this year.\nGoLand saw the sharpest increase in use this year,\nrising from 24% → 34%.\nVS Code’s growth slowed, but it remains the most popular editor among respondents at 41%.\nCombined, these two editors are now preferred by 3 out of 4 respondents.\u003c/p\u003e\n\u003cp\u003eEvery other editor saw a small decrease. This doesn’t mean those editors\naren’t being used at all,\nbut they’re not what respondents say they \u003cem\u003eprefer\u003c/em\u003e to use for writing Go code.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig10.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThis year we added a question about internal Go documentation tooling,\nsuch as \u003ca href=\"https://github.com/golang/gddo\" rel=\"noreferrer\" target=\"_blank\"\u003egddo\u003c/a\u003e.\nA small minority of respondents (6%) reported that their organization runs\nits own Go documentation server,\nthough this proportion nearly doubles (to 11%) when we look at respondents\nat large organizations (those with at least 5,000 employees).\nA follow-up asked of respondents who said their organization had stopped\nrunning its own documentation server suggests that the top reason to retire\ntheir server was a combination of low perceived benefits (23%) versus the\namount of effort required to initially set it up and maintain it (38%).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig11.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"sentiments-towards-go\"\u003eSentiments towards Go\u003c/h2\u003e\n\u003cp\u003eLarge majorities of respondents agreed that Go is working well for their\nteams (86%) and that they’d prefer to use it for their next project (89%).\nWe also found that over half of respondents (59%) believe Go is critical\nto the success of their companies.\nAll of these metrics have remained stable since 2016.\u003c/p\u003e\n\u003cp\u003eNormalizing the results changed most of these numbers for prior years.\nFor example, the percentage of respondents who agreed with the statement\n“Go is working well for my team” was previously in the 50’s and 60’s because\nof participant drop-off;\nwhen we remove participants who never saw the question,\nwe see it’s been fairly stable since 2016.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig12.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eLooking at sentiments toward problem solving in the Go ecosystem,\nwe see similar results.\nLarge percentages of respondents agreed with each statement (82%–88%),\nand these rates have been largely stable over the past four years.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig13.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThis year we took a more nuanced look at satisfaction across industries\nto establish a baseline.\nOverall, respondents were positive about using Go at work,\nregardless of industry sector.\nWe do see small variations in dissatisfaction in a few areas,\nmost notably manufacturing, which we plan to investigate with follow-up research.\nSimilarly, we asked about satisfaction with—and the importance of—various\naspects of Go development.\nPairing these measures together highlighted three topics of particular focus:\ndebugging (including debugging concurrency),\nusing modules, and using cloud services.\nEach of these topics was rated “very” or “critically” important by a majority\nof respondents but had significantly lower satisfaction scores compared to other topics.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig14.svg\" width=\"800\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig15.svg\" width=\"750\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eTurning to sentiments toward the Go community,\nwe see some differences from prior years.\nFirst, there is a dip in the percentage of respondents who agreed with the\nstatement “I feel welcome in the Go community”, from 82% to 75%.\nDigging deeper revealed that the proportion of respondents who “slightly”\nor “moderately agreed” decreased,\nwhile the proportions who “neither agree nor disagree” and “strongly agree”\nboth increased (up 5 and 7 points, respectively).\nThis polarizing split suggests two or more groups whose experiences in the\nGo community are diverging,\nand is thus another area we plan to further investigate.\u003c/p\u003e\n\u003cp\u003eThe other big differences are a clear upward trend in responses to the statement\n“I feel welcome to contribute to the Go project” and a large year-over-year\nincrease in the proportion of respondents who feel Go’s project leadership\nunderstands their needs.\u003c/p\u003e\n\u003cp\u003eAll of these results show a pattern of higher agreement correlated with\nincreased Go experience,\nbeginning at about two years.\nIn other words, the longer a respondent has been using Go,\nthe more likely they were to agree with each of these statements.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig16.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThis likely comes as no surprise, but people who responded to the Go Developer\nSurvey tended to like Go.\nHowever, we also wanted to understand which \u003cem\u003eother\u003c/em\u003e languages respondents enjoy working with.\nMost of these numbers have not significantly changed from prior years,\nwith two exceptions:\nTypeScript (which has increased 10 points),\nand Rust (up 7 points).\nWhen we break these results down by duration of Go experience,\nwe see the same pattern as we found for language expertise.\nIn particular, Python is the language and ecosystem that Go developers are\nmost likely to also enjoy building with.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig17.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eIn 2018 we first asked the “Would you recommend…” \u003ca href=\"https://en.wikipedia.org/wiki/Net_Promoter\" rel=\"noreferrer\" target=\"_blank\"\u003eNet Promoter Score\u003c/a\u003e (NPS) question,\nyielding a score of 61.\nThis year our NPS result is a statistically unchanged 60 (67% “promoters”\nminus 7% “detractors”).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig18.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"working-with-go\"\u003eWorking with Go\u003c/h2\u003e\n\u003cp\u003eBuilding API/RPC services (71%) and CLIs (62%) remain the most common uses of Go.\nThe chart below appears to show major changes from 2018,\nbut these are most likely the result of randomizing the order of choices,\nwhich used to be listed alphabetically:\n3 of the 4 choices beginning with ’A’ decreased,\nwhile everything else remained stable or increased.\nThus, this chart is best interpreted as a more accurate baseline for 2019\nwith trends from 2016–2018.\nFor example, we believe that the proportion of respondents building web\nservices which return HTML has been decreasing since 2016 but were likely\nundercounted because this response was always at the bottom of a long list of choices.\nWe also broke this out by organization size and industry but found no significant differences:\nit appears respondents use Go in roughly similar ways whether they work\nat a small tech start-up or a large retail enterprise.\u003c/p\u003e\n\u003cp\u003eA related question asked about the larger areas in which respondents work with Go.\nThe most common area by far was web development (66%),\nbut other common areas included databases (45%),\nnetwork programming (42%), systems programming (38%),\nand DevOps tasks (37%).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig19.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig20.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eIn addition to what respondents are building,\nwe also asked about some of the development techniques they use.\nA large majority of respondents said they depend upon text logs for debugging (88%),\nand their free-text responses suggest this is because alternative tooling\nis challenging to use effectively.\nHowever, local stepwise debugging (e.g., with Delve),\nprofiling, and testing with the race detector were not uncommon,\nwith ~50% of respondents depending upon at least one of these techniques.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig21.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eRegarding package management, we found that the vast majority of respondents\nhave adopted modules for Go (89%).\nThis has been a big shift for developers,\nand nearly the entire community appears to be going through it simultaneously.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig22.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eWe also found that 75% of respondents evaluate the current Go release for production use,\nwith an additional 12% waiting one release cycle.\nThis suggests a large majority of Go developers are using (or at the least,\ntrying to use) the current or previous stable release,\nhighlighting the importance for platform-as-a-service providers to quickly\nsupport new stable releases of Go.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig23.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"go-in-the-clouds\"\u003eGo in the clouds\u003c/h2\u003e\n\u003cp\u003eGo was designed with modern distributed computing in mind,\nand we want to continue to improve the developer experience of building\ncloud services with Go.\nThis year we expanded the questions we asked about cloud development to\nbetter understand how respondents are working with cloud providers,\nwhat they like about the current developer experience,\nand what can be improved.\nAs mentioned earlier, some of the 2018 results appear to be outliers,\nsuch as an unexpectedly low result for self-owned servers,\nand an unexpectedly high result for GCP deployments.\u003c/p\u003e\n\u003cp\u003eWe see two clear trends:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe three largest global cloud providers (Amazon Web Services,\nGoogle Cloud Platform, and Microsoft Azure) all appear to be trending up\nin usage among survey respondents,\nwhile most other providers are used by a smaller proportion of respondents each year.\u003c/li\u003e\n\u003cli\u003eOn-prem deployments to self-owned or company-owned servers continue to\ndecrease and are now statistically tied with AWS (44% vs.\n42%) as the most common deployment targets.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLooking at which types of cloud platforms respondents are using,\nwe see differences between the major providers.\nRespondents deploying to AWS and Azure were most likely to be using VMs\ndirectly (65% and 51%,\nrespectively), while those deploying to GCP were almost twice as likely\nto be using the managed Kubernetes platform (GKE,\n64%) than VMs (35%).\nWe also found that respondents deploying to AWS were equally likely to be\nusing a managed Kubernetes platform (32%) as they were to be using a managed\nserverless platform (AWS Lambda, 33%).\nBoth GCP (17%) and Azure (7%) had lower proportions of respondents using\nserverless platforms,\nand free-text responses suggest a primary reason was delayed support for\nthe latest Go runtime on these platforms.\u003c/p\u003e\n\u003cp\u003eOverall, a majority of respondents were satisfied with using Go on all three\nmajor cloud providers.\nRespondents reported similar satisfaction levels with Go development for\nAWS (80% satisfied) and GCP (78%).\nAzure received a lower satisfaction score (57% satisfied),\nand free-text responses suggest that the main driver was a perception that\nGo lacks first-class support on this platform (25% of free-text responses).\nHere, “first-class support” refers to always staying up-to-date with the latest Go release,\nand ensuring new features are available to Go developers at time of launch.\nThis was the same top pain-point reported by respondents using GCP (14%),\nand particularly focused on support for the latest Go runtime in serverless deployments.\nRespondents deploying to AWS, in contrast,\nwere most likely to say the SDK could use improvements,\nsuch as being more idiomatic (21%).\nSDK improvements were also the second most common request for both GCP (9%)\nand Azure (18%) developers.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig24.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig25.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig26.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"pain-points\"\u003ePain points\u003c/h2\u003e\n\u003cp\u003eThe top reasons respondents say they are unable to use Go more remain working\non a project in another language (56%),\nworking on a team that prefers to use another language (37%),\nand the lack of a critical feature in Go itself (25%).\u003c/p\u003e\n\u003cp\u003eThis was one of the questions where we randomized the choice list,\nso year-over-year comparisons aren’t valid,\nthough 2016–2018 trends are.\nFor example, we are confident that the number of developers unable to use\nGo more frequently because their team prefers a different language is decreasing each year,\nbut we don’t know whether that decrease dramatically accelerated this year,\nor was always a bit lower than our 2016–2018 numbers estimated.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig27.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThe top two adoption blockers (working on an existing non-Go project and\nworking on a team that prefers a different language) don’t have direct technical solutions,\nbut the remaining blockers might.\nThus, this year we asked for more details,\nto better understand how we might help developers increase their use of Go.\nThe charts in the remainder of this section are based on free-text responses\nwhich were manually categorized,\nso they have \u003cem\u003every\u003c/em\u003e long tails;\ncategories totalling less than 3% of the total responses have been grouped\ninto the “Other” category for each chart.\nA single response may mention multiple topics,\nthus charts do not sum to 100%.\u003c/p\u003e\n\u003cp\u003eAmong the 25% of respondents who said Go lacks language features they need,\n79% pointed to generics as a critical missing feature.\nContinued improvements to error handling (in addition to the Go 1.13 changes) was cited by 22%,\nwhile 13% requested more functional programming features,\nparticularly built-in map/filter/reduce functionality.\nTo be clear, these numbers are from the subset of respondents who said they\nwould be able to use Go more were it not missing one or more critical features they need,\nnot the entire population of survey respondents.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig28.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eRespondents who said Go “isn’t an appropriate language” for what they work\non had a wide variety of reasons and use-cases.\nThe most common was that they work on some form of front-end development (22%),\nsuch as GUIs for web, desktop, or mobile.\nAnother common response was that the respondent said they worked in a domain\nwith an already-dominant language (9%),\nmaking it a challenge to use something different.\nSome respondents also told us which domain they were referring to (or simply\nmentioned a domain without mentioning another language being more common),\nwhich we show via the “I work on [domain]” rows below.\nAn additional top reason cited by respondents was a need for better performance (9%),\nparticularly for real-time computing.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig29.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThe biggest challenges respondents reported remain largely consistent with last year.\nGo’s lack of generics and modules/package management still top the list\n(15% and 12% of responses,\nrespectively), and the proportion of respondents highlighting tooling problems increased.\nThese numbers are different from the above charts because this question\nwas asked of \u003cem\u003eall\u003c/em\u003e respondents,\nregardless of what they said their biggest Go adoption blockers were.\nAll three of these are areas of focus for the Go team this year,\nand we hope to greatly improve the developer experience,\nparticularly around modules, tooling, and the getting started experience,\nin the coming months.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig30.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eDiagnosing faults and performance issues can be challenging in any language.\nRespondents told us their top challenge for both of these was not something\nspecific to Go’s implementation or tooling,\nbut a more fundamental issue:\na self-reported lack of knowledge, experience, or best practices.\nWe hope to help address these knowledge gaps via documentation and other\neducational materials later this year.\nThe other major problems do involve tooling,\nspecifically a perceived unfavorable cost/benefit trade-off to learning/using\nGo’s debugging and profiling tooling,\nand challenges making the tooling work in various environments (e.g.,\ndebugging in containers, or getting performance profiles from production systems).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig31.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig32.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eFinally, when we asked what would most improve Go support in respondents’\nediting environment,\nthe most common response was for general improvements or better support\nfor the language server (gopls, 19%).\nThis was expected, as gopls replaces about 80 extant tools and is still in beta.\nWhen respondents were more specific about what they’d like to see improved,\nthey were most likely to report the debugging experience (14%) and faster\nor more reliable code completion (13%).\nA number of participants also explicitly referenced the need to frequently\nrestart VS Code when using gopls (8%);\nin the time since this survey was in the field (late November – early December 2019),\nmany of these gopls improvements have already landed,\nand this continues to be a high-priority area for the team.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig33.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"the-go-community\"\u003eThe Go community\u003c/h2\u003e\n\u003cp\u003eRoughly two thirds of respondents used Stack Overflow to answer their Go-related questions (64%).\nThe other top sources of answers were godoc.org (47%),\ndirectly reading source code (42%), and golang.org (33%).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig34.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThe long tail on the previous chart highlights the large variety of different\nsources (nearly all of them community-driven) and modalities that respondents\nrely on to overcome challenges while developing with Go.\nIndeed, for many Gophers, this may be one of their main points of interaction\nwith the larger community:\nas our community expands, we’ve seen higher and higher proportions of respondents\nwho do not attend any Go-related events.\nFor 2019, that proportion nearly reached two thirds of respondents (62%).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig35.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eDue to updated Google-wide privacy guidelines,\nwe can no longer ask about which countries respondents live in.\nInstead we asked about preferred spoken/written language as a very rough\nproxy for Go’s worldwide usage,\nwith the benefit of providing data for potential localization efforts.\u003c/p\u003e\n\u003cp\u003eBecause this survey is in English, there is likely a strong bias toward\nEnglish speakers and people from areas where English is a common second or third language.\nThus, the non-English numbers should be interpreted as likely minimums rather\nthan an approximation of Go’s global audience.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig36.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eWe found 12% of respondents identify with a traditionally underrepresented group (e.g.,\nethnicity, gender identity, et al.) and 3% identify as female.\n(This question should have said “woman” instead of “female”.\nThe mistake has been corrected in our draft survey for 2020,\nand we apologize for it.)\nWe strongly suspect this 3% is undercounting women in the Go community.\nFor example, we know women software developers in the US respond to the\nStackOverflow Developer Survey at \u003ca href=\"https://insights.stackoverflow.com/survey/2019#developer-profile-_-developer-type\" rel=\"noreferrer\" target=\"_blank\"\u003eabout half the rate we’d expect based on US employment figures\u003c/a\u003e (11% vs 20%).\nSince we don’t know the proportion of responses in the US,\nwe can’t safely extrapolate from these numbers beyond saying the actual\nproportion is likely higher than 3%.\nFurthermore, GDPR required us to change how we ask about sensitive information,\nwhich includes gender and traditionally underrepresented groups.\nUnfortunately these changes prevent us from being able to make valid comparisons\nof these numbers with prior years.\u003c/p\u003e\n\u003cp\u003eRespondents who identified with underrepresented groups or preferred not\nto answer this question showed higher rates of disagreement with the statement\n“I feel welcome in the Go community” (8% vs.\n4%) than those who do not identify with an underrepresented group,\nhighlighting the importance of our continued outreach efforts.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig37.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig38.svg\" width=\"700\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2019/fig39.svg\" width=\"800\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWe hope you’ve enjoyed seeing the results of our 2019 developer survey.\nUnderstanding developers’ experiences and challenges helps us plan and prioritize work for 2020.\nOnce again, an enormous thank you to everyone who contributed to this survey—your\nfeedback is helping to steer Go’s direction in the coming year and beyond.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-04-20T00:00:00Z",
  "Author": "Todd Kulesza"
}