{
  "Source": "go.dev",
  "Title": "Go at I/O: Frequently Asked Questions",
  "Link": "https://go.dev/blog/io2010-faq",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/io2010-faq\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo at I/O: Frequently Asked Questions\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Andrew Gerrand\u003cbr/\u003e\n      27 May 2010\n      \u003c/p\u003e\n      \n      \u003cp\u003eAmong the high-profile product launches at Google I/O last week,\nour small team gave presentations to packed rooms and met many present and\nfuture Go programmers.\nIt was especially gratifying to meet with so many people who,\nafter learning a bit about Go, were excited by the potential benefits (both\nimmediate and long-term) they could gain from using it.\u003c/p\u003e\n\u003cp\u003eWe were asked a lot of good questions during I/O, and in this post I’d like to recap and expand upon some of them.\u003c/p\u003e\n\u003cp\u003eHow suitable is Go for production systems?\nGo is ready and stable now. We are pleased to report that Google is using\nGo for some production systems,\nand they are performing well.\nOf course there is still room for improvement - that’s why we’re continuing\nto work on the language,\nlibraries, tools, and runtime.\u003c/p\u003e\n\u003cp\u003eDo you have plans to implement generics?\nMany proposals for generics-like features have been mooted both publicly and internally,\nbut as yet we haven’t found a proposal that is consistent with the rest of the language.\nWe think that one of Go’s key strengths is its simplicity,\nso we are wary of introducing new features that might make the language\nmore difficult to understand.\nAdditionally, the more Go code we write (and thus the better we learn how\nto write Go code ourselves),\nthe less we feel the need for such a language feature.\u003c/p\u003e\n\u003cp\u003eDo you have any plans to support GPU programming?\nWe don’t have any immediate plans to do this,\nbut as Go is architecture-agnostic it’s quite possible.\nThe ability to launch a goroutine that runs on a different processor architecture,\nand to use channels to communicate between goroutines running on separate architectures,\nseem like good ideas.\u003c/p\u003e\n\u003cp\u003eAre there plans to support Go under App Engine?\nBoth the Go and App Engine teams would like to see this happen.\nAs always, it is a question of resources and priorities as to if and when\nit will become a reality.\u003c/p\u003e\n\u003cp\u003eAre there plans to support Go under Android?\nBoth Go compilers support ARM code generation, so it is possible.\nWhile we think Go would be a great language for writing mobile applications,\nAndroid support is not something that’s being actively worked on.\u003c/p\u003e\n\u003cp\u003eWhat can I use Go for?\nGo was designed with systems programming in mind.\nServers, clients, databases, caches, balancers,\ndistributors - these are applications Go is obviously useful for,\nand  this is how we have begun to use it within Google.\nHowever, since Go’s open-source release, the community has found a diverse\nrange of applications for the language.\nFrom web apps to games to graphics tools,\nGo promises to shine as a general-purpose programming language.\nThe potential is only limited by library support,\nwhich is improving at a tremendous rate.\nAdditionally, educators have expressed interest in using Go to teach programming,\nciting its succinct syntax and consistency as well-suited to the task.\u003c/p\u003e\n\u003cp\u003eThanks to everyone who attended our presentations,\nor came to talk with us at Office Hours.\nWe hope to see you again at future events.\u003c/p\u003e\n\u003cp\u003eThe video of Rob and Russ’ talk is \u003ca href=\"https://youtu.be/jgVhBThJdXc\" rel=\"noreferrer\" target=\"_blank\"\u003eavailable on YouTube\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2010-05-27T00:00:00Z",
  "Author": "Andrew Gerrand"
}