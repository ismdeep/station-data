{
  "Source": "go.dev",
  "Title": "Fuzzing is Beta Ready",
  "Link": "https://go.dev/blog/fuzz-beta",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/fuzz-beta\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eFuzzing is Beta Ready\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Katie Hockman and Jay Conrod\u003cbr/\u003e\n      3 June 2021\n      \u003c/p\u003e\n      \n      \u003cp\u003eWe are excited to announce that native fuzzing is ready for beta testing on tip!\u003c/p\u003e\n\u003cp\u003eFuzzing is a type of automated testing which continuously manipulates inputs to\na program to find issues such as panics or bugs. These semi-random data\nmutations can discover new code coverage that existing unit tests may miss, and\nuncover edge case bugs which would otherwise go unnoticed. Since fuzzing can\nreach these edge cases, fuzz testing is particularly valuable for finding\nsecurity exploits and vulnerabilities.\u003c/p\u003e\n\u003cp\u003eSee\n\u003ca href=\"/s/draft-fuzzing-design\"\u003egolang.org/s/draft-fuzzing-design\u003c/a\u003e\nfor more details about this feature.\u003c/p\u003e\n\u003ch2 id=\"getting-started\"\u003eGetting started\u003c/h2\u003e\n\u003cp\u003eTo get started, you may run the following\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go install golang.org/dl/gotip@latest\n$ gotip download\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis builds the Go toolchain from the master branch. After running this, \u003ccode\u003egotip\u003c/code\u003e\ncan act as a drop-in replacement for the \u003ccode\u003ego\u003c/code\u003e command. You can now run commands\nlike\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ gotip test -fuzz=Fuzz\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"writing-a-fuzz-test\"\u003eWriting a fuzz test\u003c/h2\u003e\n\u003cp\u003eA fuzz test must be in a *_test.go file as a function in the form \u003ccode\u003eFuzzXxx\u003c/code\u003e.\nThis function must be passed a\u003ccode\u003e *testing.F\u003c/code\u003e argument, much like a \u003ccode\u003e*testing.T\u003c/code\u003e\nargument is passed to a \u003ccode\u003eTestXxx\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003eBelow is an example of a fuzz test that’s testing the behavior of the \u003ca href=\"https://pkg.go.dev/net/url#ParseQuery\" rel=\"noreferrer\" target=\"_blank\"\u003enet/url\npackage\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e//go:build go1.18\n// +build go1.18\n\npackage fuzz\n\nimport (\n    \u0026#34;net/url\u0026#34;\n    \u0026#34;reflect\u0026#34;\n    \u0026#34;testing\u0026#34;\n)\n\nfunc FuzzParseQuery(f *testing.F) {\n    f.Add(\u0026#34;x=1\u0026amp;y=2\u0026#34;)\n    f.Fuzz(func(t *testing.T, queryStr string) {\n        query, err := url.ParseQuery(queryStr)\n        if err != nil {\n            t.Skip()\n        }\n        queryStr2 := query.Encode()\n        query2, err := url.ParseQuery(queryStr2)\n        if err != nil {\n            t.Fatalf(\u0026#34;ParseQuery failed to decode a valid encoded query %s: %v\u0026#34;, queryStr2, err)\n        }\n        if !reflect.DeepEqual(query, query2) {\n            t.Errorf(\u0026#34;ParseQuery gave different query after being encoded\\nbefore: %v\\nafter: %v\u0026#34;, query, query2)\n        }\n    })\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can read more about fuzzing at pkg.go.dev, including \u003ca href=\"https://pkg.go.dev/testing@master#hdr-Fuzzing\" rel=\"noreferrer\" target=\"_blank\"\u003ean overview\nof fuzzing with Go\u003c/a\u003e and the\n\u003ca href=\"https://pkg.go.dev/testing@master#F\" rel=\"noreferrer\" target=\"_blank\"\u003egodoc for the new \u003ccode\u003etesting.F\u003c/code\u003e type\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"expectations\"\u003eExpectations\u003c/h2\u003e\n\u003cp\u003eThis is a new feature that’s still in beta, so you should expect some bugs\nand an incomplete feature set. Check the \u003ca href=\"https://github.com/golang/go/issues?q=is%3Aopen+is%3Aissue+label%3Afuzz\" rel=\"noreferrer\" target=\"_blank\"\u003eissue tracker for issues labelled\n“fuzz”\u003c/a\u003e\nto stay up-to-date on existing bugs and missing features.\u003c/p\u003e\n\u003cp\u003ePlease be aware that fuzzing can consume a lot of memory and may impact your\nmachine’s performance while it runs. \u003ccode\u003ego test -fuzz\u003c/code\u003e defaults to running fuzzing\nin \u003ccode\u003e$GOMAXPROCS\u003c/code\u003e processes in parallel. You may lower the number of processes\nused while fuzzing by explicitly setting the \u003ccode\u003e-parallel\u003c/code\u003e flag with \u003ccode\u003ego test\u003c/code\u003e.\nRead the documentation for the \u003ccode\u003ego test\u003c/code\u003e command by running \u003ccode\u003egotip help testflag\u003c/code\u003e if you want more information.\u003c/p\u003e\n\u003cp\u003eAlso be aware that the fuzzing engine writes values that expand test coverage to\na fuzz cache directory within \u003ccode\u003e$GOCACHE/fuzz\u003c/code\u003e while it runs. There is currently\nno limit to the number of files or total bytes that may be written to the fuzz\ncache, so it may occupy a large amount of storage (i.e. several GBs). You can\nclear the fuzz cache by running \u003ccode\u003egotip clean -fuzzcache\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat’s next?\u003c/h2\u003e\n\u003cp\u003eThis feature will become available starting in Go 1.18.\u003c/p\u003e\n\u003cp\u003eIf you experience any problems or have an idea for a feature, please \u003ca href=\"/issue/new/?\u0026amp;labels=fuzz\"\u003efile an\nissue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFor discussion and general feedback about the feature, you can also participate\nin the \u003ca href=\"https://gophers.slack.com/archives/CH5KV1AKE\" rel=\"noreferrer\" target=\"_blank\"\u003e#fuzzing channel\u003c/a\u003e in\nGophers Slack.\u003c/p\u003e\n\u003cp\u003eHappy fuzzing!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-06-03T00:00:00Z",
  "Author": "Katie Hockman and Jay Conrod"
}