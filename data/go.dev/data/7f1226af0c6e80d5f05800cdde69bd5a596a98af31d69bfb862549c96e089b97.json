{
  "Source": "go.dev",
  "Title": "Go 1.7 is released",
  "Link": "https://go.dev/blog/go1.7",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.7\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.7 is released\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Chris Broadfoot\u003cbr/\u003e\n      15 August 2016\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday we are happy to announce the release of Go 1.7.\nYou can get it from the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\nThere are several significant changes in this release: a port for\n\u003ca href=\"https://en.wikipedia.org/wiki/IBM_System_z\" rel=\"noreferrer\" target=\"_blank\"\u003eLinux on IBM z Systems\u003c/a\u003e (s390x),\ncompiler improvements, the addition of the \u003ca href=\"/pkg/context/\"\u003econtext\u003c/a\u003e package,\nand support for \u003ca href=\"/pkg/testing/#hdr-Subtests_and_Sub_benchmarks\"\u003ehierarchical tests and benchmarks\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA new compiler back end, based on \u003ca href=\"https://en.wikipedia.org/wiki/Static_single_assignment_form\" rel=\"noreferrer\" target=\"_blank\"\u003estatic single-assignment\u003c/a\u003e form (SSA),\nhas been under development for the past year.\nBy representing a program in SSA form, a compiler may perform advanced optimizations more easily.\nThis new back end generates more compact, more efficient code that includes\noptimizations like\n\u003ca href=\"https://en.wikipedia.org/wiki/Bounds-checking_elimination\" rel=\"noreferrer\" target=\"_blank\"\u003ebounds check elimination\u003c/a\u003e and\n\u003ca href=\"https://en.wikipedia.org/wiki/Common_subexpression_elimination\" rel=\"noreferrer\" target=\"_blank\"\u003ecommon subexpression elimination\u003c/a\u003e.\nWe observed a 5–35% speedup across our benchmarks.\nFor now, the new backend is only available for the 64-bit x86 platform (“amd64”),\nbut we’re planning to convert more architecture backends to SSA in future releases.\u003c/p\u003e\n\u003cp\u003eThe compiler front end uses a new, more compact export data format, and\nprocesses import declarations more efficiently.\nWhile these \u003ca href=\"/doc/go1.7#compiler\"\u003echanges across the compiler toolchain\u003c/a\u003e are mostly invisible,\nusers have \u003ca href=\"http://dave.cheney.net/2016/04/02/go-1-7-toolchain-improvements\" rel=\"noreferrer\" target=\"_blank\"\u003eobserved\u003c/a\u003e\na significant speedup in compile time and a reduction in binary size by as much as 20–30%.\u003c/p\u003e\n\u003cp\u003ePrograms should run a bit faster due to speedups in the garbage collector and optimizations in the standard library.\nPrograms with many idle goroutines will experience much shorter garbage collection pauses than in Go 1.6.\u003c/p\u003e\n\u003cp\u003eOver the past few years, the \u003ca href=\"https://godoc.org/golang.org/x/net/context/\" rel=\"noreferrer\" target=\"_blank\"\u003egolang.org/x/net/context\u003c/a\u003e\npackage has proven to be essential to many Go applications.\nContexts are used to great effect in applications related to networking, infrastructure, and microservices\n(such as \u003ca href=\"http://kubernetes.io/\" rel=\"noreferrer\" target=\"_blank\"\u003eKubernetes\u003c/a\u003e and \u003ca href=\"https://www.docker.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eDocker\u003c/a\u003e).\nThey make it easy to enable cancellation, timeouts, and passing request-scoped data.\nTo make use of contexts within the standard library and to encourage more extensive use,\nthe package has been moved from the \u003ca href=\"https://godoc.org/golang.org/x/net/context/\" rel=\"noreferrer\" target=\"_blank\"\u003ex/net\u003c/a\u003e repository\nto the standard library as the \u003ca href=\"/pkg/context/\"\u003econtext\u003c/a\u003e package.\nSupport for contexts has been added to the\n\u003ca href=\"/pkg/net/\"\u003enet\u003c/a\u003e,\n\u003ca href=\"/pkg/net/http/\"\u003enet/http\u003c/a\u003e, and\n\u003ca href=\"/pkg/os/exec/\"\u003eos/exec\u003c/a\u003e packages.\nFor more information about contexts, see the \u003ca href=\"/pkg/context\"\u003epackage documentation\u003c/a\u003e\nand the Go blog post \u003ca href=\"/blog/context\"\u003e\u003cem\u003eGo Concurrency Patterns: Context\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.5 introduced experimental support for a \u003ca href=\"/cmd/go/#hdr-Vendor_Directories\"\u003e“vendor” directory\u003c/a\u003e,\nenabled by the \u003ccode\u003eGO15VENDOREXPERIMENT\u003c/code\u003e environment variable.\nGo 1.6 enabled this behavior by default, and in Go 1.7, this switch has been removed and the “vendor” behavior is always enabled.\u003c/p\u003e\n\u003cp\u003eGo 1.7 includes many more additions, improvements, and fixes.\nFind the complete set of changes, and details of the points above, in the\n\u003ca href=\"/doc/go1.7.html\"\u003eGo 1.7 release notes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFinally, the Go team would like thank everyone who contributed to the release.\n170 people contributed to this release, including 140 from the Go community.\nThese contributions ranged from changes to the compiler and linker, to the standard library, to documentation, and code reviews.\nWe welcome contributions; if you’d like to get involved, check out the\n\u003ca href=\"/doc/contribute.html\"\u003econtribution guidelines\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-08-15T00:00:00Z",
  "Author": "Chris Broadfoot"
}