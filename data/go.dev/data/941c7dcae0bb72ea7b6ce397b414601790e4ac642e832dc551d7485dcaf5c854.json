{
  "Source": "go.dev",
  "Title": "Go 1.23 is released",
  "Link": "https://go.dev/blog/go1.23",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.23\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.23 is released\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Dmitri Shuralyov, on behalf of the Go team\u003cbr/\u003e\n      13 August 2024\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday the Go team is happy to release Go 1.23,\nwhich you can get by visiting the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you already have Go 1.22 or Go 1.21 installed on your machine,\nyou can also try \u003ccode\u003ego get toolchain@go1.23.0\u003c/code\u003e in an existing module.\nThis will download the new toolchain and let you begin using it\nin your module right away. At some later point, you can follow up\nwith \u003ccode\u003ego get go@1.23.0\u003c/code\u003e when you’re ready to fully switch to Go 1.23\nand have that be your module’s minimum required Go version.\nSee \u003ca href=\"/doc/toolchain#get\"\u003eManaging Go version module requirements with go get\u003c/a\u003e\nfor more information on this functionality.\u003c/p\u003e\n\u003cp\u003eGo 1.23 comes with many improvements over Go 1.22. Some of the highlights include:\u003c/p\u003e\n\u003ch2 id=\"language-changes\"\u003eLanguage changes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRange expressions in a “for-range” loop may now be iterator functions,\nsuch as \u003ccode\u003efunc(func(K) bool)\u003c/code\u003e.\nThis supports user-defined iterators over arbitrary sequences.\nThere are several additions to the standard \u003ccode\u003eslices\u003c/code\u003e and \u003ccode\u003emaps\u003c/code\u003e\npackages that work with iterators, as well as a new \u003ccode\u003eiter\u003c/code\u003e package.\nAs an example, if you wish to collect the keys of a map \u003ccode\u003em\u003c/code\u003e into a slice\nand then sort its values, you can do that in Go 1.23 with \u003ccode\u003eslices.Sorted(maps.Keys(m))\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.23 also includes preview support for generic type aliases.\u003c/p\u003e\n\u003cp\u003eRead more about \u003ca href=\"/doc/go1.23#language\"\u003elanguage changes\u003c/a\u003e and \u003ca href=\"/doc/go1.23#iterators\"\u003eiterators\u003c/a\u003e\nin the release notes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"tool-improvements\"\u003eTool improvements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eStarting with Go 1.23, it’s possible for the Go toolchain to collect usage and breakage\nstatistics to help understand how the Go toolchain is used, and how well it is working.\nThis is Go telemetry, an \u003cem\u003eopt-in system\u003c/em\u003e. Please consider opting in to help us keep Go\nworking well and better understand Go usage.\nRead more on \u003ca href=\"/doc/go1.23#telemetry\"\u003eGo telemetry\u003c/a\u003e in the release notes.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ego\u003c/code\u003e command has new conveniences. For example, running \u003ccode\u003ego env -changed\u003c/code\u003e makes it easier to\nsee only those settings whose effective value differs from the default value, and\n\u003ccode\u003ego mod tidy -diff\u003c/code\u003e helps determine the necessary changes to the go.mod and go.sum files\nwithout modifying them.\nRead more on the \u003ca href=\"/doc/go1.23#go-command\"\u003eGo command\u003c/a\u003e in the release notes.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ego vet\u003c/code\u003e subcommand now reports symbols that are too new for the intended Go version.\nRead more on \u003ca href=\"/doc/go1.23#tools\"\u003etools\u003c/a\u003e in the release notes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"standard-library-improvements\"\u003eStandard library improvements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGo 1.23 improves the implementation of \u003ccode\u003etime.Timer\u003c/code\u003e and \u003ccode\u003etime.Ticker\u003c/code\u003e.\nRead more on \u003ca href=\"/doc/go1.23#timer-changes\"\u003etimer changes\u003c/a\u003e in the release notes.\u003c/li\u003e\n\u003cli\u003eThere are a total of 3 new packages in the Go 1.23 standard library: \u003ccode\u003eiter\u003c/code\u003e, \u003ccode\u003estructs\u003c/code\u003e, and \u003ccode\u003eunique\u003c/code\u003e.\nPackage \u003ccode\u003eiter\u003c/code\u003e is mentioned above.\nPackage \u003ccode\u003estructs\u003c/code\u003e defines marker types to modify the properties of a struct.\nPackage \u003ccode\u003eunique\u003c/code\u003e provides facilities for canonicalizing (“interning”) comparable\nvalues.\nRead more on \u003ca href=\"/doc/go1.23#new-unique-package\"\u003enew standard library packages\u003c/a\u003e\nin the release notes.\u003c/li\u003e\n\u003cli\u003eThere are many improvements and additions to the standard library enumerated\nin the \u003ca href=\"/doc/go1.23#minor_library_changes\"\u003eminor changes to the library\u003c/a\u003e\nsection of the release notes.\nThe “Go, Backwards Compatibility, and GODEBUG” documentation\nenumerates \u003ca href=\"/doc/godebug#go-123\"\u003enew to Go 1.23 GODEBUG settings\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eGo 1.23 supports the new \u003ccode\u003egodebug\u003c/code\u003e directive in \u003ccode\u003ego.mod\u003c/code\u003e and \u003ccode\u003ego.work\u003c/code\u003e files to\nallow separate control of the default GODEBUGs and the “go” directive of \u003ccode\u003ego.mod\u003c/code\u003e,\nin addition to \u003ccode\u003e//go:debug\u003c/code\u003e directive comments made available two releases ago (Go 1.21).\nSee the updated documentation on \u003ca href=\"/doc/godebug#default\"\u003eDefault GODEBUG Values\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"more-improvements-and-changes\"\u003eMore improvements and changes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eGo 1.23 adds experimental support for OpenBSD on 64-bit RISC-V (\u003ccode\u003eopenbsd/riscv64\u003c/code\u003e).\nThere are several minor changes relevant to Linux, macOS, ARM64, RISC-V, and WASI.\nRead more on \u003ca href=\"/doc/go1.23#ports\"\u003eports\u003c/a\u003e in the release notes.\u003c/li\u003e\n\u003cli\u003eBuild time when using profile-guided optimization (PGO) is reduced, and performance\nwith PGO on 386 and amd64 architectures is improved.\nRead more on \u003ca href=\"/doc/go1.23#runtime\"\u003eruntime, compiler, and linker\u003c/a\u003e in the release notes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe encourage everyone to read the \u003ca href=\"/doc/go1.23\"\u003eGo 1.23 release notes\u003c/a\u003e for the\ncomplete and detailed information on these changes, and everything else that’s\nnew to Go 1.23.\u003c/p\u003e\n\u003cp\u003eOver the next few weeks, look out for follow-up blog posts that will go in more depth\non some of the topics mentioned here, including “range-over-func”, the new \u003ccode\u003eunique\u003c/code\u003e package,\nGo 1.23 timer implementation changes, and more.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eThank you to everyone who contributed to this release by writing code and\ndocumentation, reporting bugs, sharing feedback, and testing the release\ncandidates. Your efforts helped to ensure that Go 1.23 is as stable as possible.\nAs always, if you notice any problems, please \u003ca href=\"/issue/new\"\u003efile an issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEnjoy Go 1.23!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2024-08-13T00:00:00Z",
  "Author": "Dmitri Shuralyov, on behalf of the Go team"
}