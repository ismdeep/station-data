{
  "Source": "go.dev",
  "Title": "Go: one year ago today",
  "Link": "https://go.dev/blog/1year",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/1year\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo: one year ago today\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Andrew Gerrand\u003cbr/\u003e\n      10 November 2010\n      \u003c/p\u003e\n      \n      \u003cp\u003eOn the 10th of November 2009 we launched the Go project:\nan open-source programming language with a focus on simplicity and efficiency.\nThe intervening year has seen a great many developments both in the Go project\nitself and in its community.\u003c/p\u003e\n\u003cp\u003eWe set out to build a language for systems programming - the kinds of programs\none might typically write in C or C++ - and we were surprised by Go’s\nutility as a general purpose language.\nWe had anticipated interest from C, C++, and Java programmers,\nbut the flurry of interest from users of dynamically-typed languages like\nPython and JavaScript was unexpected.\nGo’s combination of native compilation,\nstatic typing, memory management, and lightweight syntax seemed to strike\na chord with a broad cross-section of the programming community.\u003c/p\u003e\n\u003cp\u003eThat cross-section grew to become a dedicated community of enthusiastic Go coders.\nOur \u003ca href=\"http://groups.google.com/group/golang-nuts\" rel=\"noreferrer\" target=\"_blank\"\u003emailing list\u003c/a\u003e has over 3,800 members,\nwith around 1,500 posts each month.\nThe project has over 130 contributors\n(people who have submitted code or documentation),\nand of the 2,800 commits since launch almost one third were contributed\nby programmers outside the core team.\nTo get all that code into shape, nearly 14,000 emails were exchanged on\nour \u003ca href=\"http://groups.google.com/group/golang-dev\" rel=\"noreferrer\" target=\"_blank\"\u003edevelopment mailing list\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThose numbers reflect a labor whose fruits are evident in the project’s code base.\nThe compilers have improved substantially,\nwith faster and more efficient code generation,\nmore than one hundred reported bugs fixed,\nand support for a widening range of operating systems and architectures.\nThe Windows port is approaching completion thanks to a dedicated group of\ncontributors (one of whom became our first non-Google committer to the project).\nThe ARM port has also made great progress,\nrecently reaching the milestone of passing all tests.\u003c/p\u003e\n\u003cp\u003eThe Go tool set has been expanded and improved.\nThe Go documentation tool, \u003ca href=\"/cmd/godoc/\"\u003egodoc\u003c/a\u003e,\nnow supports the documentation of other source trees (you can browse and\nsearch your own code) and provides a \u003ca href=\"/doc/codewalk/\"\u003e“code walk”\u003c/a\u003e\ninterface for presenting tutorial materials (among many more improvements).\n\u003ca href=\"/cmd/goinstall/\"\u003eGoinstall\u003c/a\u003e ,\na new package management tool, allows users to install and update external\npackages with a single command.\n\u003ca href=\"/cmd/gofmt/\"\u003eGofmt\u003c/a\u003e,\nthe Go pretty-printer, now makes syntactic simplifications where possible.\nGoplay,\na web-based “compile-as-you-type” tool,\nis a convenient way to experiment with Go for those times when you don’t\nhave access to the \u003ca href=\"/doc/play/\"\u003eGo Playground\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe standard library has grown by over 42,000 lines of code and includes\n20 new \u003ca href=\"/pkg/\"\u003epackages\u003c/a\u003e.\nAmong the additions are the \u003ca href=\"/pkg/image/jpeg/\"\u003ejpeg\u003c/a\u003e,\n\u003ca href=\"/pkg/rpc/jsonrpc/\"\u003ejsonrpc\u003c/a\u003e,\n\u003ca href=\"/pkg/mime/\"\u003emime\u003c/a\u003e, \u003ca href=\"/pkg/netchan/\"\u003enetchan\u003c/a\u003e,\nand \u003ca href=\"/pkg/smtp/\"\u003esmtp\u003c/a\u003e packages,\nas well as a slew of new \u003ca href=\"/pkg/crypto/\"\u003ecryptography\u003c/a\u003e packages.\nMore generally, the standard library has been continuously refined and revised\nas our understanding of Go’s idioms deepens.\u003c/p\u003e\n\u003cp\u003eThe debugging story has gotten better, too.\nRecent improvements to the DWARF output of the gc compilers make the GNU debugger,\nGDB, useful for Go binaries, and we’re actively working on making that\ndebugging information more complete.\n(See the \u003ca href=\"/blog/debugging-go-code-status-report\"\u003erecent blog post\u003c/a\u003e for details.)\u003c/p\u003e\n\u003cp\u003eIt’s now easier than ever to link against existing libraries written in\nlanguages other than Go.\nGo support is in the most recent \u003ca href=\"http://www.swig.org/\" rel=\"noreferrer\" target=\"_blank\"\u003eSWIG\u003c/a\u003e release,\nversion 2.0.1, making it easier to link against C and C++ code,\nand our \u003ca href=\"/cmd/cgo/\"\u003ecgo\u003c/a\u003e tool has seen many fixes and improvements.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/doc/install/gccgo\"\u003eGccgo\u003c/a\u003e,\nthe Go front end for the GNU C Compiler, has kept pace with the gc compiler\nas a parallel Go implementation.\nIt now has a working garbage collector, and has been accepted into the GCC core.\nWe’re now working toward making \u003ca href=\"http://code.google.com/p/gofrontend/\" rel=\"noreferrer\" target=\"_blank\"\u003egofrontend\u003c/a\u003e\navailable as a BSD-licensed Go compiler front end,\nfully decoupled from GCC.\u003c/p\u003e\n\u003cp\u003eOutside the Go project itself Go is starting to be used to build real software.\nThere are more than 200 Go programs and libraries listed on our \u003ca href=\"http://godashboard.appspot.com/project\" rel=\"noreferrer\" target=\"_blank\"\u003eProject dashboard\u003c/a\u003e,\nand hundreds more on \u003ca href=\"http://code.google.com/hosting/search?q=label:Go\" rel=\"noreferrer\" target=\"_blank\"\u003eGoogle Code\u003c/a\u003e\nand \u003ca href=\"https://github.com/search?q=language:Go\" rel=\"noreferrer\" target=\"_blank\"\u003eGitHub\u003c/a\u003e.\nOn our mailing list and IRC channel you can find coders from around the\nworld who use Go for their programming projects.\n(See our \u003ca href=\"/blog/real-go-projects-smarttwitter-and-webgo\"\u003eguest blog post\u003c/a\u003e\nfrom last month for a real-world example.) Internally at Google there are\nseveral teams that choose Go for building production software,\nand we have received reports from other companies that are developing sizable systems in Go.\nWe have also been in touch with several educators who are using Go as a teaching language.\u003c/p\u003e\n\u003cp\u003eThe language itself has grown and matured, too.\nIn the past year we have received many feature requests.\nBut Go is a small language, and we’ve worked hard to ensure that any new\nfeature strikes the right compromise between simplicity and utility.\nSince the launch we have made a number of language changes,\nmany of which were driven by feedback from the community.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSemicolons are now optional in almost all instances. \u003ca href=\"/doc/go_spec.html#Semicolons\"\u003espec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe new built-in functions \u003ccode\u003ecopy\u003c/code\u003e and \u003ccode\u003eappend\u003c/code\u003e make management of slices\nmore efficient and straightforward.\n\u003ca href=\"/doc/go_spec.html#Appending_and_copying_slices\"\u003espec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe upper and lower bounds may be omitted when making a sub-slice.\nThis means that \u003ccode\u003es[:]\u003c/code\u003e is shorthand for \u003ccode\u003es[0:len(s)]\u003c/code\u003e.\n\u003ca href=\"/doc/go_spec.html#Slices\"\u003espec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe new built-in function \u003ccode\u003erecover\u003c/code\u003e complements \u003ccode\u003epanic\u003c/code\u003e and \u003ccode\u003edefer\u003c/code\u003e as\nan error handling mechanism.\n\u003ca href=\"/blog/defer-panic-and-recover\"\u003eblog\u003c/a\u003e,\n\u003ca href=\"/doc/go_spec.html#Handling_panics\"\u003espec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe new complex number types (\u003ccode\u003ecomplex\u003c/code\u003e,\n\u003ccode\u003ecomplex64\u003c/code\u003e, and \u003ccode\u003ecomplex128\u003c/code\u003e) simplify certain mathematical operations.\n\u003ca href=\"/doc/go_spec.html#Complex_numbers\"\u003espec\u003c/a\u003e,\n\u003ca href=\"/doc/go_spec.html#Imaginary_literals\"\u003espec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe composite literal syntax permits the omission of redundant type information\n(when specifying two-dimensional arrays, for example).\n\u003ca href=\"/doc/devel/release.html#2010-10-27\"\u003erelease.2010-10-27\u003c/a\u003e,\n\u003ca href=\"/doc/go_spec.html#Composite_literals\"\u003espec\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA general syntax for variable function arguments (\u003ccode\u003e...T\u003c/code\u003e) and their propagation\n(\u003ccode\u003ev...\u003c/code\u003e) is now specified.\n\u003ca href=\"/doc/go_spec.html#Function_Types\"\u003espec\u003c/a\u003e,\n\u003ca href=\"/doc/go_spec.html#Passing_arguments_to_..._parameters\"\u003e spec\u003c/a\u003e,\n\u003ca href=\"/doc/devel/release.html#2010-09-29\"\u003erelease.2010-09-29\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGo is certainly ready for production use,\nbut there is still room for improvement.\nOur focus for the immediate future is making Go programs faster and more\nefficient in the context of high performance systems.\nThis means improving the garbage collector,\noptimizing generated code, and improving the core libraries.\nWe’re also exploring some further additions to the type system to make\ngeneric programming easier.\nA lot has happened in a year; it’s been both thrilling and satisfying.\nWe hope that this coming year will be even more fruitful than the last.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIf you’ve been meaning to get [back] into Go, now is a great time to do so! Check out the\u003c/em\u003e\n\u003ca href=\"/doc/docs.html\"\u003e\u003cem\u003eDocumentation\u003c/em\u003e\u003c/a\u003e \u003cem\u003eand\u003c/em\u003e \u003ca href=\"/doc/install.html\"\u003e\u003cem\u003eGetting Started\u003c/em\u003e\u003c/a\u003e\n\u003cem\u003epages for more information, or just go nuts in the\u003c/em\u003e \u003ca href=\"/doc/play/\"\u003e\u003cem\u003eGo Playground\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2010-11-10T00:00:00Z",
  "Author": "Andrew Gerrand"
}