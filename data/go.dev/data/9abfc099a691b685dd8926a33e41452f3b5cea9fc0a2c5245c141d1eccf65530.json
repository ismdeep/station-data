{
  "Source": "go.dev",
  "Title": "A conversation with the Go team",
  "Link": "https://go.dev/blog/io2013-chat",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/io2013-chat\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eA conversation with the Go team\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      \n      6 June 2013\n      \u003c/p\u003e\n      \n      \u003cp\u003eAt Google I/O 2013, several members of the Go team hosted a “Fireside chat.”\nRobert Griesemer, Rob Pike, David Symonds, Andrew Gerrand, Ian Lance Taylor,\nSameer Ajmani, Brad Fitzpatrick, and Nigel Tao took questions from the audience\nand people around the world about various aspects of the Go project.\u003c/p\u003e\n\u003cdiv class=\"iframe\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/p9VUCp98ay4\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\" mozallowfullscreen=\"\" webkitallowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\u003cp\u003eWe also hosted a similar session at I/O last year:\n\u003ca href=\"http://www.youtube.com/watch?v=sln-gJaURzk\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003cem\u003eMeet the Go team\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere were many more questions from Google Moderator than we were able to\nanswer in the short 40 minute session.\nHere we answer some of those we missed in the live session.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eLinking speed (and memory usage) for the gc toolchain are a known problem.\u003c/em\u003e\n\u003cem\u003eAre there any plans to address this during the 1.2 cycle?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRob:\u003c/strong\u003e Yes. We are always thinking about ways to improve performance of the\ntools as well as the language and libraries.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eI have been very pleased to see how quickly Go appears to be gaining traction.\u003c/em\u003e\n\u003cem\u003eCan you talk about the reactions you have experienced working with other\u003c/em\u003e\n\u003cem\u003edevelopers inside and outside Google? Are there any major sticking points remaining?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRobert:\u003c/strong\u003e A lot of developers that seriously tried Go are very happy with it.\nMany of them report a much smaller, more readable and thus maintainable code\nbase: A 50% code size reduction or more when coming from C++ seems common.\nDevelopers that switched to Go from Python are invariably pleased with the\nperformance gain. The typical complaints are about small inconsistencies in the\nlanguage (some of which we might iron out at some point). What surprises me is\nthat almost nobody complains about the lack of generics.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWhen will Go be a first-class language for Android development?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAndrew:\u003c/strong\u003e This would be great, but we don’t have anything to announce.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIs there a roadmap for the next version of Go?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAndrew:\u003c/strong\u003e We have no feature roadmap as such. The contributors tend to work on\nwhat interests them. Active areas of development include the gc and gccgo\ncompilers, the garbage collector and runtime, and many others. We expect the\nmajority of exciting new additions will be in the form of improvements to our\ntools. You can find design discussions and code reviews on the\n\u003ca href=\"http://groups.google.com/group/golang-dev\" rel=\"noreferrer\" target=\"_blank\"\u003egolang-dev mailing list\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs for the timeline, we do have\n\u003ca href=\"https://docs.google.com/document/d/106hMEZj58L9nq9N9p7Zll_WKfo-oyZHFyI6MttuZmBU/edit?usp=sharing\" rel=\"noreferrer\" target=\"_blank\"\u003econcrete plans\u003c/a\u003e:\nwe expect to release Go 1.2 on December 1, 2013.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWhere do you guys want to see Go used externally?\u003c/em\u003e\n\u003cem\u003eWhat would you consider a big win for Go adoption outside Google?\u003c/em\u003e\n\u003cem\u003eWhere do you think Go has the potential to make a significant impact?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRob:\u003c/strong\u003e Where Go is deployed is up to its users, not to us. We’re happy to see\nit gain traction anywhere it helps. It was designed with server-side software\nin mind, and is showing promise there, but has also shown strengths in many\nother areas and the story is really just beginning. There are many surprises to\ncome.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIan:\u003c/strong\u003e It’s easier for startups to use Go, because they don’t have an\nentrenched code base that they need to work with. So I see two future big wins\nfor Go. One would be a significant use of Go by an existing large software\ncompany other than Google. Another would be a significant IPO or acquisition\nof a startup that primarily uses Go. These are both indirect: clearly choice\nof programming language is a very small factor in the success of a company.\nBut it would be another way to show that Go can be part of a successful\nsoftware system.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHave you thought any (more) about the potential of dynamically loading\u003c/em\u003e\n\u003cem\u003eGo packages or objects and how it could work in Go?\u003c/em\u003e\n\u003cem\u003eI think this could enable some really interesting and expressive constructs,\u003c/em\u003e\n\u003cem\u003eespecially coupled with interfaces.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRob:\u003c/strong\u003e This is an active topic of discussion. We appreciate how powerful the\nconcept can be and hope we can find a way to implement it before too long.\nThere are serious challenges in the design approach to take and the need to\nmake it work portably.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThere was a discussion a while ago about collecting some best-of-breed\u003c/em\u003e\n\u003ccode\u003edatabase/sql\u003c/code\u003e \u003cem\u003edrivers in a more central place.\u003c/em\u003e\n\u003cem\u003eSome people had strong opinions to the contrary though.\u003c/em\u003e\n\u003cem\u003eWhere is\u003c/em\u003e \u003ccode\u003edatabase/sql\u003c/code\u003e \u003cem\u003eand its drivers going in the next year?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBrad:\u003c/strong\u003e While we could create an official subrepo (“go.db”) for database\ndrivers, we fear that would unduly bless certain drivers. At this point we’d\nstill rather see healthy competition between different drivers. The\n\u003ca href=\"/wiki/SQLDrivers\"\u003eSQLDrivers wiki page\u003c/a\u003e\nlists some good ones.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003edatabase/sql\u003c/code\u003e package didn’t get much attention for a while, due to lack of\ndrivers. Now that drivers exist, usage of the package is increasing and\ncorrectness and performance bugs are now being reported (and fixed). Fixes will\ncontinue, but no major changes to the interface of \u003ccode\u003edatabase/sql\u003c/code\u003e are planned.\n There might be small extensions here and there as needed for performance or to\nassist some drivers.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWhat is the status of versioning?\u003c/em\u003e\n\u003cem\u003eIs importing some code from GitHub a best practice recommended by the Go team?\u003c/em\u003e\n\u003cem\u003eWhat happens when we publish our code that is dependent on a GitHub repo and\u003c/em\u003e\n\u003cem\u003ethe API of the dependee changes?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIan:\u003c/strong\u003e This is frequently discussed on the mailing list. What we do internally\nis take a snapshot of the imported code, and update that snapshot from time to\ntime. That way, our code base won’t break unexpectedly if the API changes.\nBut we understand that that approach doesn’t work very well for people who are\nthemselves providing a library. We’re open to good suggestions in this area.\nRemember that this is an aspect of the tools that surround the language rather\nthan the language itself; the place to fix this is in the tools, not the\nlanguage.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWhat about Go and Graphical User Interfaces?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRob:\u003c/strong\u003e This is a subject close to my heart. Newsqueak, a very early precursor\nlanguage, was designed specifically for writing graphics programs (that’s what\nwe used to call apps). The landscape has changed a lot but I think Go’s\nconcurrency model has much to offer in the field of interactive graphics.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAndrew:\u003c/strong\u003e There are many\n\u003ca href=\"/wiki/Projects#Graphics_and_Audio\"\u003ebindings for existing graphics libraries\u003c/a\u003e\nout there, and a few Go-specific projects. One of the more promising ones is\n\u003ca href=\"https://github.com/skelterjohn/go.uik\" rel=\"noreferrer\" target=\"_blank\"\u003ego.uik\u003c/a\u003e, but it’s still in its early\ndays. I think there’s a lot of potential for a great Go-specific UI toolkit for\nwriting native applications (consider handling user events by receiving from a\nchannel), but developing a production-quality package is a significant\nundertaking. I have no doubt one will come in time.\u003c/p\u003e\n\u003cp\u003eIn the meantime, the web is the most broadly available platform for user\ninterfaces. Go provides great support for building web apps, albeit only on the\nback end.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIn the mailing lists Adam Langley has stated that the TLS code has not been\u003c/em\u003e\n\u003cem\u003ereviewed by outside groups, and thus should not be used in production.\u003c/em\u003e\n\u003cem\u003eAre there plans to have the code reviewed?\u003c/em\u003e\n\u003cem\u003eA good secure implementation of concurrent TLS would be very nice.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdam\u003c/strong\u003e: Cryptography is notoriously easy to botch in subtle and surprising ways\nand I’m only human. I don’t feel that I can warrant that Go’s TLS code is\nflawless and I wouldn’t want to misrepresent it.\u003c/p\u003e\n\u003cp\u003eThere are a couple of places where the code is known to have side-channel\nissues: the RSA code is blinded but not constant time, elliptic curves other\nthan P-224 are not constant time and the Lucky13 attack might work. I hope to\naddress the latter two in the Go 1.2 timeframe with a constant-time P-256\nimplementation and AES-GCM.\u003c/p\u003e\n\u003cp\u003eNobody has stepped forward to do a review of the TLS stack however and I’ve not\ninvestigated whether we could get Matasano or the like to do it. That depends\non whether Google wishes to fund it.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWhat do you think about\u003c/em\u003e \u003ca href=\"http://www.gophercon.com/\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003cem\u003eGopherCon 2014\u003c/em\u003e\u003c/a\u003e\u003cem\u003e?\u003c/em\u003e\n\u003cem\u003eDoes anyone from the team plan to attend?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAndrew:\u003c/strong\u003e It’s very exciting. I’m sure some of us will be there.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2013-06-06T00:00:00Z",
  "Author": "go.dev"
}