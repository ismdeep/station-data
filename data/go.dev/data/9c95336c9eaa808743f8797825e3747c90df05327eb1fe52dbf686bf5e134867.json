{
  "Source": "go.dev",
  "Title": "Go 1.18 is released!",
  "Link": "https://go.dev/blog/go1.18",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.18\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.18 is released!\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      The Go Team\u003cbr/\u003e\n      15 March 2022\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday the Go team is thrilled to release Go 1.18,\nwhich you can get by visiting the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.18 is a massive release that includes new features,\nperformance improvements, and our biggest change ever to the language.\nIt isn’t a stretch to say that the design for parts of Go 1.18\nstarted over a decade ago when we first released Go.\u003c/p\u003e\n\u003ch2 id=\"generics\"\u003eGenerics\u003c/h2\u003e\n\u003cp\u003eIn Go 1.18, we’re introducing new support for\n\u003ca href=\"/blog/why-generics\"\u003egeneric code using parameterized types\u003c/a\u003e.\nSupporting generics has been Go’s most often requested feature,\nand we’re proud to deliver the generic support that the majority of users need today.\nSubsequent releases will provide additional support for some of\nthe more complicated generic use cases.\nWe encourage you to get to know this new feature using our\n\u003ca href=\"/doc/tutorial/generics\"\u003egenerics tutorial\u003c/a\u003e,\nand to explore the best ways to use generics to optimize and simplify your code today.\nThe \u003ca href=\"/doc/go1.18\"\u003erelease notes\u003c/a\u003e have more details about using generics in Go 1.18.\u003c/p\u003e\n\u003ch2 id=\"fuzzing\"\u003eFuzzing\u003c/h2\u003e\n\u003cp\u003eWith Go 1.18, Go is the first major language with fuzzing\nfully integrated into its standard toolchain.\nLike generics, fuzzing has been in design for a long time,\nand we’re delighted to share it with the Go ecosystem with this release.\nPlease check out our\n\u003ca href=\"/doc/tutorial/fuzz\"\u003efuzzing tutorial\u003c/a\u003e\nto help you get started with this new feature.\u003c/p\u003e\n\u003ch2 id=\"workspaces\"\u003eWorkspaces\u003c/h2\u003e\n\u003cp\u003eGo modules have been almost universally adopted,\nand Go users have reported very high satisfaction scores in our annual surveys.\nIn our 2021 user survey, the most common challenge\nusers identified with modules\nwas working across multiple modules.\nIn Go 1.18, we’ve addressed this with a new\n\u003ca href=\"/doc/tutorial/workspaces\"\u003eGo workspace mode\u003c/a\u003e,\nwhich makes it simple to work with multiple modules.\u003c/p\u003e\n\u003ch2 id=\"20-performance-improvements\"\u003e20% Performance Improvements\u003c/h2\u003e\n\u003cp\u003eApple M1, ARM64, and PowerPC64 users rejoice!\nGo 1.18 includes CPU performance improvements of up to 20%\ndue to the expansion of Go 1.17’s register ABI calling convention to these architectures.\nJust to underscore how big this release is, a 20% performance improvement\nis the fourth most important headline!\u003c/p\u003e\n\u003cp\u003eFor a more detailed description of everything that’s in 1.18,\nplease consult the \u003ca href=\"/doc/go1.18\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.18 is a huge milestone for the entire Go community.\nWe want to thank every Go user who filed a bug, sent in a change, wrote a tutorial,\nor helped in any way to make Go 1.18 a reality.\nWe couldn’t do it without you.\nThank you.\u003c/p\u003e\n\u003cp\u003eEnjoy Go 1.18!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-03-15T00:00:00Z",
  "Author": "The Go Team"
}