{
  "Source": "go.dev",
  "Title": "Smaller Go 1.7 binaries",
  "Link": "https://go.dev/blog/go1.7-binary-size",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.7-binary-size\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eSmaller Go 1.7 binaries\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      David Crawshaw\u003cbr/\u003e\n      18 August 2016\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eGo was designed for writing servers.\nThat is how it is most widely used today, and as a result a lot of\nwork on the runtime and compiler is focused on issues that matter to\nservers: latency, ease of deployment, precise garbage collection,\nfast startup time, performance.\u003c/p\u003e\n\u003cp\u003eAs Go gets used for a wider variety of programs, there are new issues that must be considered.\nOne of these is binary size.\nIt has been on the radar for a long time\n(issue \u003ca href=\"/issue/6853\"\u003e#6853\u003c/a\u003e was filed over two\nyears ago), but the growing interest in using Go for\ndeploying binaries on smaller devices — such as the Raspberry Pi or\nmobile devices — means it received some attention for the Go 1.7\nrelease.\u003c/p\u003e\n\u003ch2 id=\"work-done-in-go-17\"\u003eWork done in Go 1.7\u003c/h2\u003e\n\u003cp\u003eThree significant changes in Go 1.7 affect binary size.\u003c/p\u003e\n\u003cp\u003eThe first is the new SSA backend that was enabled for AMD64 in this release.\nWhile the primary motivation for SSA was improved performance, the\nbetter generated code is also smaller.\nThe SSA backend shrinks Go binaries by ~5%.\nWe expect larger gains for the more RISC-like architectures\nlike ARM and MIPS when those backends have been converted to SSA in Go 1.8.\u003c/p\u003e\n\u003cp\u003eThe second change is method pruning.\nUntil 1.6, all methods on all used types were kept, even if some of\nthe methods were never called.\nThis is because they might be called through an interface, or called\ndynamically using the reflect package.\nNow the compiler discards any unexported methods that do not match an\ninterface.\nSimilarly the linker can discard other exported methods, those that are only\naccessible through reflection, if the corresponding\n\u003ca href=\"/pkg/reflect/#Value.Call\"\u003ereflection features\u003c/a\u003e\nare not used anywhere in the program.\nThat change shrinks binaries by 5–20%.\u003c/p\u003e\n\u003cp\u003eThe third change is a more compact format for run-time type\ninformation used by the reflect package.\nThe encoding format was originally designed to make the decoder in\nthe runtime and reflect packages as simple as possible. By making this\ncode a bit harder to read we can compress the format without affecting\nthe run-time performance of Go programs.\nThe new format shrinks Go binaries by a further 5–15%.\nLibraries built for Android and archives built for iOS shrink further\nas the new format contains fewer pointers, each of which requires\ndynamic relocations in position independent code.\u003c/p\u003e\n\u003cp\u003eIn addition, there were many small improvements such as improved\ninterface data layout, better static data layout, and simplified\ndependencies. For example, the HTTP client no longer links in the entire HTTP\nserver.\nThe full list of changes can be found in issue\n\u003ca href=\"/issue/6853\"\u003e#6853\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"results\"\u003eResults\u003c/h2\u003e\n\u003cp\u003eTypical programs, ranging from tiny toys to large production programs,\nare about 30% smaller when built with Go 1.7.\u003c/p\u003e\n\u003cp\u003eThe canonical hello world program goes from 2.3MB to 1.6MB:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epackage main\n\nimport \u0026#34;fmt\u0026#34;\n\nfunc main() {\n    fmt.Println(\u0026#34;Hello, World!\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen compiled without debugging information the statically\nlinked binary is now under a megabyte.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"go1.7-binary-size/graph.png\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eA large production program used for testing this cycle, \u003ccode\u003ejujud\u003c/code\u003e, went from 94MB\nto 67MB.\u003c/p\u003e\n\u003cp\u003ePosition-independent binaries are 50% smaller.\u003c/p\u003e\n\u003cp\u003eIn a position-independent executable (PIE), a pointer in a read-only\ndata section requires a dynamic relocation.\nBecause the new format for type information replaces pointers by\nsection offsets, it saves 28 bytes per pointer.\u003c/p\u003e\n\u003cp\u003ePosition-independent executables with debugging information removed\nare particularly important to mobile developers, as this is the kind\nof program shipped to phones.\nBig downloads make for a poor user experience, so the reduction here\nis good news.\u003c/p\u003e\n\u003ch2 id=\"future-work\"\u003eFuture Work\u003c/h2\u003e\n\u003cp\u003eSeveral changes to the run-time type information were too late for the\nGo 1.7 freeze, but will hopefully make it into 1.8, further shrinking\nprograms, especially position-independent ones.\u003c/p\u003e\n\u003cp\u003eThese changes are all conservative, reducing binary size without increasing\nbuild time, startup time, overall execution time, or memory usage.\nWe could take more radical steps to reduce binary size: the\n\u003ca href=\"http://upx.sourceforge.net/\" rel=\"noreferrer\" target=\"_blank\"\u003eupx\u003c/a\u003e tool for compressing executables\nshrinks binaries by another 50% at the cost of increased startup time\nand potentially increased memory use.\nFor extremely small systems (the kind that might live on a keychain)\nwe could build a version of Go without reflection, though it is\nunclear whether such a restricted language would be sufficiently\nuseful.\nFor some algorithms in the runtime we could use slower but more\ncompact implementations when every kilobyte counts.\nAll of these call for more research in later development cycles.\u003c/p\u003e\n\u003cp\u003eTo the many contributors who helped make Go 1.7 binaries smaller,\nthank you!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-08-18T00:00:00Z",
  "Author": "David Crawshaw"
}