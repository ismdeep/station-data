{
  "Source": "go.dev",
  "Title": "Real Go Projects: SmartTwitter and web.go",
  "Link": "https://go.dev/blog/smarttwitter",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/smarttwitter\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eReal Go Projects: SmartTwitter and web.go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Michael Hoisie\u003cbr/\u003e\n      19 October 2010\n      \u003c/p\u003e\n      \n      \u003cp\u003e\u003cem\u003eThis week’s article is written by\u003c/em\u003e \u003ca href=\"http://www.hoisie.com/\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003cem\u003eMichael Hoisie\u003c/em\u003e\u003c/a\u003e.\n\u003cem\u003eA programmer based in San Francisco, he is one of Go’s early adopters and the author of several popular Go libraries. He describes his experiences using Go:\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI was introduced to Go by a post on \u003ca href=\"http://news.ycombinator.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eHacker News\u003c/a\u003e.\nAbout an hour later I was hooked. At the time I was working at a web start-up,\nand had been developing internal testing apps in Python.\nGo offered speed, better concurrency support,\nand sane Unicode handling, so I was keen to port my programs to the language.\nAt that time there wasn’t an easy way to write web apps in Go,\nso I decided to build a simple web framework,\n\u003ca href=\"http://github.com/hoisie/web.go\" rel=\"noreferrer\" target=\"_blank\"\u003eweb.go\u003c/a\u003e.\nIt was modeled after a popular Python framework,\n\u003ca href=\"http://webpy.org/\" rel=\"noreferrer\" target=\"_blank\"\u003eweb.py\u003c/a\u003e, which I had worked with previously.\nWhile working on web.go I got involved in the Go community,\nsubmitted a bunch of bug reports, and hacked on some standard library packages\n(mainly \u003ca href=\"/pkg/http/\"\u003ehttp\u003c/a\u003e and \u003ca href=\"/pkg/json/\"\u003ejson\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eAfter a few weeks I noticed that web.go was getting attention at GitHub.\nThis was surprising because I’d never really promoted the project.\nI think there’s a niche for simple, fast web applications,\nand I think Go can fill it.\u003c/p\u003e\n\u003cp\u003eOne weekend I decided to write a simple Facebook application:\nit would re-post your Twitter status updates to your Facebook profile.\nThere is an official Twitter application to do this,\nbut it re-posts everything, creating noise in your Facebook feed.\nMy application allowed you to filter retweets,\nmentions, hashtags, replies, and more.\nThis turned into \u003ca href=\"http://www.facebook.com/apps/application.php?id=135488932982\" rel=\"noreferrer\" target=\"_blank\"\u003eSmart Twitter\u003c/a\u003e,\nwhich currently has nearly 90,000 users.\u003c/p\u003e\n\u003cp\u003eThe entire program is written in Go, and uses \u003ca href=\"https://redis.io/\" rel=\"noreferrer\" target=\"_blank\"\u003eRedis\u003c/a\u003e\nas its storage back-end.\nIt is very fast and robust. It currently processes about two dozen tweets per second,\nand makes heavy use of Go’s channels.\nIt runs on a single Virtual Private Server instance with 2GB of RAM,\nwhich has no problem handling the load.\nSmart Twitter uses very little CPU time, and is almost entirely memory-bound\nas the entire database is kept in memory.\nAt any given time there are around 10 goroutines running concurrently:\none accepting HTTP connections, another reading from the Twitter Streaming API,\na couple for error handling, and the rest either processing web requests\nor re-posting incoming tweets.\u003c/p\u003e\n\u003cp\u003eSmart Twitter also spawned other open-source Go projects:\n\u003ca href=\"http://github.com/hoisie/mustache.go\" rel=\"noreferrer\" target=\"_blank\"\u003emustache.go\u003c/a\u003e,\n\u003ca href=\"http://github.com/hoisie/redis.go\" rel=\"noreferrer\" target=\"_blank\"\u003eredis.go\u003c/a\u003e,\nand \u003ca href=\"http://github.com/hoisie/twitterstream\" rel=\"noreferrer\" target=\"_blank\"\u003etwitterstream\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI see a lot of work left to do on web.go.\nFor instance, I’d like to add better support for streaming connections,\nwebsockets, route filters, better support in shared hosts,\nand improving the documentation.\nI recently left the start-up to do software freelancing,\nand I’m planning to use Go where possible.\nThis means I’ll probably use it as a back end for personal apps,\nas well as for clients that like working with cutting edge technology.\u003c/p\u003e\n\u003cp\u003eFinally, I’d like to thank the Go team for all their effort.\nGo is a wonderful platform and I think it has a bright future.\nI hope to see the language grow around the needs of the community.\nThere’s a lot of interesting stuff happening in the community,\nand I look forward to seeing what people can hack together with the language.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2010-10-19T00:00:00Z",
  "Author": "Michael Hoisie"
}