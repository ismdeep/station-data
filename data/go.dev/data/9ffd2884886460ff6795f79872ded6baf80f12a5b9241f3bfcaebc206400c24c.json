{
  "Source": "go.dev",
  "Title": "Go 1.22 is released!",
  "Link": "https://go.dev/blog/go1.22",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.22\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.22 is released!\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Eli Bendersky, on behalf of the Go team\u003cbr/\u003e\n      6 February 2024\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday the Go team is thrilled to release Go 1.22,\nwhich you can get by visiting the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.22 comes with several important new features and improvements. Here are\nsome of the notable changes; for the full list, refer to the \u003ca href=\"/doc/go1.22\"\u003erelease\nnotes\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"language-changes\"\u003eLanguage changes\u003c/h2\u003e\n\u003cp\u003eThe long-standing “for” loop gotcha with accidental sharing of loop variables\nbetween iterations is now resolved. Starting with Go 1.22, the following code\nwill print “a”, “b”, and “c” in some order:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunc main() {\n    done := make(chan bool)\n\n    values := []string{\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;}\n    for _, v := range values {\n        go func() {\n            fmt.Println(v)\n            done \u0026lt;- true\n        }()\n    }\n\n    // wait for all goroutines to complete before exiting\n    for _ = range values {\n        \u0026lt;-done\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more information about this change and the tooling that helps keep code from\nbreaking accidentally, see the earlier \u003ca href=\"/blog/loopvar-preview\"\u003eloop variable blog\npost\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe second language change is support for ranging over integers:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epackage main\n\nimport \u0026#34;fmt\u0026#34;\n\nfunc main() {\n    for i := range 10 {\n        fmt.Println(10 - i)\n    }\n    fmt.Println(\u0026#34;go1.22 has lift-off!\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe values of \u003ccode\u003ei\u003c/code\u003e in this countdown program go from 0 to 9, inclusive. For more\ndetails, please refer to \u003ca href=\"/ref/spec#For_range\"\u003ethe spec\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"improved-performance\"\u003eImproved performance\u003c/h2\u003e\n\u003cp\u003eMemory optimization in the Go runtime improves CPU performance by 1-3%, while\nalso reducing the memory overhead of most Go programs by around 1%.\u003c/p\u003e\n\u003cp\u003eIn Go 1.21, \u003ca href=\"/blog/pgo\"\u003ewe shipped\u003c/a\u003e profile-guided optimization (PGO) for the Go\ncompiler and this functionality continues to improve. One of the optimizations\nadded in 1.22 is improved devirtualization, allowing static dispatch of more\ninterface method calls. Most programs will see improvements between 2-14% with\nPGO enabled.\u003c/p\u003e\n\u003ch2 id=\"standard-library-additions\"\u003eStandard library additions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eA new \u003ca href=\"/pkg/math/rand/v2\"\u003emath/rand/v2\u003c/a\u003e package\nprovides a cleaner, more consistent API and uses higher-quality,\nfaster pseudo-random generation algorithms. See\n\u003ca href=\"/issue/61716\"\u003ethe proposal\u003c/a\u003e for additional details.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe patterns used by \u003ca href=\"/pkg/net/http#ServeMux\"\u003enet/http.ServeMux\u003c/a\u003e\nnow accept methods and wildcards.\u003c/p\u003e\n\u003cp\u003eFor example, the router accepts a pattern like \u003ccode\u003eGET /task/{id}/\u003c/code\u003e, which\nmatches only \u003ccode\u003eGET\u003c/code\u003e requests and captures the value of the \u003ccode\u003e{id}\u003c/code\u003e segment\nin a map that can be accessed through \u003ca href=\"/pkg/net/http#Request\"\u003eRequest\u003c/a\u003e values.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA new \u003ccode\u003eNull[T]\u003c/code\u003e type in \u003ca href=\"/pkg/database/sql\"\u003edatabase/sql\u003c/a\u003e provides\na way to scan nullable columns.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA \u003ccode\u003eConcat\u003c/code\u003e function was added in package \u003ca href=\"/pkg/slices\"\u003eslices\u003c/a\u003e, to\nconcatenate multiple slices of any type.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003cp\u003eThanks to everyone who contributed to this release by writing code and\ndocumentation, filing bugs, sharing feedback, and testing the release\ncandidates. Your efforts helped to ensure that Go 1.22 is as stable as possible.\nAs always, if you notice any problems, please \u003ca href=\"/issue/new\"\u003efile an issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEnjoy Go 1.22!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2024-02-06T00:00:00Z",
  "Author": "Eli Bendersky, on behalf of the Go team"
}