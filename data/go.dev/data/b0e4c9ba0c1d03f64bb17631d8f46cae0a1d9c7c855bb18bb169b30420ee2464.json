{
  "Source": "go.dev",
  "Title": "Go Developer Survey 2022 Q2 Results",
  "Link": "https://go.dev/blog/survey2022-q2-results",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/survey2022-q2-results\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo Developer Survey 2022 Q2 Results\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Todd Kulesza\u003cbr/\u003e\n      8 September 2022\n      \u003c/p\u003e\n      \n      \u003cstyle type=\"text/css\" scoped=\"\"\u003e\n  .chart {\n    margin-left: 1.5rem;\n    margin-right: 1.5rem;\n    width: 800px;\n  }\n  .quote {\n    margin-left: 2rem;\n    margin-right: 2rem;\n    color: #999;\n    font-style: italic;\n    font-size: 120%;\n  }\n  @media (prefers-color-scheme: dark) {\n    .chart {\n      border-radius: 8px;\n    }\n  }\n\u003c/style\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis article shares the results of the 2022 June edition of the Go Developer\nSurvey. On behalf of the Go team, thank you to the 5,752 people who told us\nabout their experience working with new features introduced in Go 1.18,\nincluding generics, security tooling, and workspaces. You‚Äôve helped us better\nunderstand how developers are discovering and using this functionality, and as\nthis article will discuss, provided useful insights for additional\nimprovements. Thank you! üíô\u003c/p\u003e\n\u003ch3 id=\"key-findings\"\u003eKey findings\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGenerics has seen quick adoption\u003c/strong\u003e. A large majority of respondents were\naware generics had been included in the Go 1.18 release, and about 1 in 4\nrespondents said they‚Äôve already started using generics in their Go code.\nThe most common single piece of generics-related feedback was ‚Äúthank you!‚Äù,\nbut it is clear developers are already running into some limitations of the\ninitial generics implementation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFuzzing is new to most Go developers\u003c/strong\u003e. Awareness of Go‚Äôs built-in fuzz\ntesting was much lower than generics, and respondents had much more\nuncertainty around why or when they might consider using fuzz testing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThird-party dependencies are a top security concern\u003c/strong\u003e. Avoiding\ndependencies with known vulnerabilities was the top security-related\nchallenge for respondents. More broadly, security work can often be\nunplanned and unrewarded, implying that tooling needs to be respectful of\ndevelopers‚Äô time and attention.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWe can do better when announcing new functionality\u003c/strong\u003e. Randomly sampled\nparticipants were less likely to know about recent Go tooling releases than\npeople who found the survey via the Go blog. This suggests we should either\nlook beyond blog articles to communicate changes in the Go ecosystem, or\nexpand efforts to share these articles more widely.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eError handling remains a challenge\u003c/strong\u003e. Following the release of generics,\nrespondents‚Äô top challenge when working with Go shifted to error handling.\nOverall, however, satisfaction with Go remains very high, and we found no\nsignificant changes in how respondents said they were using Go.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"how-to-read-these-results\"\u003eHow to read these results\u003c/h3\u003e\n\u003cp\u003eThroughout this post, we use charts of survey responses to provide supporting\nevidence for our findings. All of these charts use a similar format. The title\nis the exact question that survey respondents saw. Unless otherwise noted,\nquestions were multiple choice and participants could only select a single\nresponse choice; each chart‚Äôs subtitle will tell you if the question allowed\nmultiple response choices or was an open-ended text box instead of a multiple\nchoice question. For charts of open-ended text responses, a Go team member\nread and manually categorized all of the responses. Many open-ended questions\nelicited a wide variety of responses; to keep the chart sizes reasonable, we\ncondensed them to a maximum of the top 10 themes, with additional themes all\ngrouped under ‚ÄúOther‚Äù.\u003c/p\u003e\n\u003cp\u003eTo help readers understand the weight of evidence underlying each finding, we\ninclude error bars showing the 95% confidence interval for responses; narrower\nbars indicate increased confidence. Sometimes two or more responses have\noverlapping error bars, which means the relative order of those responses is\nnot statistically meaningful (i.e., the responses are effectively tied). The\nlower right of each chart shows the number of people whose responses are\nincluded in the chart, in the form ‚Äú\u003cem\u003en = [number of respondents]\u003c/em\u003e‚Äù.\u003c/p\u003e\n\u003ch3 id=\"a-note-on-methodology\"\u003eA note on methodology\u003c/h3\u003e\n\u003cp\u003eMost survey respondents ‚Äúself-selected‚Äù to take the survey, meaning they found\nit on \u003ca href=\"/blog\"\u003ethe Go blog\u003c/a\u003e,   \u003ca href=\"https://twitter.com/golang\" rel=\"noreferrer\" target=\"_blank\"\u003e@golang on\nTwitter\u003c/a\u003e, or other social Go channels. A potential\nproblem with this approach is that people who don‚Äôt follow these channels are\nless likely to learn about the survey, and might respond differently than\npeople who \u003cem\u003edo\u003c/em\u003e closely follow them. About one third of respondents were\nrandomly sampled, meaning they responded to the survey after seeing a prompt\nfor it in VS Code (everyone using the VS Code Go plugin between June 1 - June\n21st 2022 had a 10% of receiving this random prompt). This randomly sampled\ngroup helps us generalize these findings to the larger community of Go\ndevelopers. Most survey questions showed no meaningful difference between\nthese groups, but in the few cases with important differences, readers will\nsee charts that break down responses into ‚ÄúRandom sample‚Äù and ‚ÄúSelf-selected‚Äù\ngroups.\u003c/p\u003e\n\u003ch2 id=\"generics\"\u003eGenerics\u003c/h2\u003e\n\u003cdiv class=\"quote\"\u003e\u0026#34;[Generics] seemed like the only obvious missing feature from the first time I used the language. Has helped reduce code duplication a lot.\u0026#34; ‚Äî A survey respondent discussing generics\u003c/div\u003e\n\u003cp\u003eAfter Go 1.18 was released with support for type parameters (more commonly\nreferred to as \u003cem\u003egenerics\u003c/em\u003e), we wanted to understand what the initial awareness\nand adoption of generics looked like, as well as identify common challenges or\nblockers for using generics.\u003c/p\u003e\n\u003cp\u003eThe vast majority of survey respondents (86%) were already aware generics\nshipped as part of the Go 1.18 release. We had hoped to see a simple majority\nhere, so this was much more awareness than we‚Äôd been expecting. We also found\nthat about a quarter of respondents had begun using generics in Go code (26%),\nincluding 14% who said they are already using generics in production or\nreleased code. A majority of respondents (54%) were not opposed to using\ngenerics, but didn‚Äôt have a need for them today. We also found that 8% of\nrespondents \u003cem\u003ewanted\u003c/em\u003e to use generics in Go, but were currently blocked by\nsomething.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/generics_awareness.svg\" alt=\"Chart showing most\nrespondents were aware Go 1.18 included generics\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/generics_use.svg\" alt=\"Chart showing 26% of respondents are\nalready using Go generics\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhat was blocking some developers from using generics? A majority of\nrespondents fell into one of two categories. First, 30% of respondents said\nthey hit a limit of the current implementation of generics, such as wanting\nparameterized methods, improved type inference, or switching on types.\nRespondents said these issues limited the potential use cases for generics or\nfelt they made generic code unnecessarily verbose. The second category\ninvolved depending on something that didn‚Äôt (yet) support generics‚Äîlinters\nwere the most common tool preventing adoption, but this list also included\nthings like organizations remaining on an earlier Go release or depending on a\nLinux distribution that did not yet provide Go 1.18 packages (26%). A steep\nlearning curve or lack of helpful documentation was cited by 12% of\nrespondents. Beyond these top issues, respondents told us about a wide range\nof less-common (though still meaningful) challenges, as shown in the chart\nbelow. To avoid focusing on hypotheticals, this analysis only includes people\nwho said they were already using generics, or who tried to use generics but\nwere blocked by something.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/text_gen_challenge.svg\" alt=\"Chart showing the top\ngeneric challenges\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe also asked survey respondents who had tried using generics to share any\nadditional feedback. Encouragingly, one in ten respondents said generics had\nalready simplified their code, or resulted in less code duplication. The most\ncommon response was some variation of ‚Äúthank you!‚Äù or a general positive\nsentiment (43%); for comparison, only 6% of respondents evinced a negative\nreaction or sentiment. Mirroring the findings from the ‚Äúbiggest challenge‚Äù\nquestion above, nearly one third of respondents discussed hitting a limitation\nof Go‚Äôs implementation of generics. The Go team is using this set of results\nto help decide if or how some of these limitations could be relaxed.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/text_gen_feedback.svg\" alt=\"Chart showing most generics\nfeedback was positive or referenced a limitation of the current\nimplementation\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"security\"\u003eSecurity\u003c/h2\u003e\n\u003cdiv class=\"quote\"\u003e\u0026#34;[The biggest challenge is] finding time given competing priorities; business customers want their features over security.\u0026#34; ‚Äî A survey respondent discussing security challenges\u003c/div\u003e\n\u003cp\u003eFollowing the \u003ca href=\"https://en.wikipedia.org/wiki/2020_United_States_federal_government_data_breach#SolarWinds_exploit\" rel=\"noreferrer\" target=\"_blank\"\u003e2020 SolarWinds\nbreach\u003c/a\u003e,\nthe practice of developing software securely has received renewed attention.\nThe Go team has prioritized work in this area, including tools for creating \u003ca href=\"https://pkg.go.dev/debug/buildinfo\" rel=\"noreferrer\" target=\"_blank\"\u003ea\nsoftware bill of materials (SBOM)\u003c/a\u003e, \u003ca href=\"/doc/fuzz/\"\u003efuzz\ntesting\u003c/a\u003e, and most recently, \u003ca href=\"/blog/vuln/\"\u003evulnerability\nscanning\u003c/a\u003e. To support these efforts, this survey\nasked several questions about software development security practices and\nchallenges. We specifically wanted to understand:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhat types of security tools are Go developers using today?\u003c/li\u003e\n\u003cli\u003eHow do Go developers find and resolve vulnerabilities?\u003c/li\u003e\n\u003cli\u003eWhat are the biggest challenges to writing secure Go software?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOur results suggest that while static analysis tooling is in widespread use\n(65% of respondents), a minority of respondents currently use it to find\nvulnerabilities (35%) or otherwise improve code security (33%). Respondents\nsaid that security tooling is most commonly run during CI/CD time (84%), with\na minority saying developers run these tools locally during development (22%).\nThis aligns with additional security research our team has conducted, which\nfound that security scanning at CI/CD time is a desired backstop, but\ndevelopers often considered this too late for a first notification: they would\nprefer to know a dependency may be vulnerable \u003cem\u003ebefore\u003c/em\u003e building upon it, or to\nverify that a version update resolved a vulnerability without waiting for CI\nto run a full battery of additional tests against their PR.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/dev_techniques.svg\" alt=\"Chart showing prevalence of 9\ndifferent development techniques\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/security_sa_when.svg\" alt=\"Chart showing most respondents\nrun security tools during CI\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe also asked respondents about their biggest challenges around developing\nsecure software. The most wide-spread difficulty was evaluating the security\nof third-party libraries (57% of respondents), a topic vulnerability scanners\n(such as \u003ca href=\"https://github.com/dependabot\" rel=\"noreferrer\" target=\"_blank\"\u003eGitHub‚Äôs dependabot\u003c/a\u003e or the Go team‚Äôs\n\u003ca href=\"https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck\" rel=\"noreferrer\" target=\"_blank\"\u003egovulncheck\u003c/a\u003e) can help\naddress. The other top challenges suggest opportunities for additional\nsecurity tooling: respondents said it‚Äôs hard to consistently apply best\npractices while writing code, and validating that the resulting code doesn‚Äôt\nhave vulnerabilities.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/security_challenges.svg\" alt=\"Chart showing the most\ncommon security challenge is evaluating the security of third-party libraries\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eFuzz testing, another approach for increasing application security, was still\nquite new to most respondents. Only 12% said they use it at work, and 5% said\nthey‚Äôve adopted Go‚Äôs built-in fuzzing tools. An open-ended follow-up question\nasking what made fuzzing difficult to use found that the main reasons were not\ntechnical problems: the top three responses discussed not understanding how to\nuse fuzz testing (23%), a lack of time to devote to fuzzing or security more\nbroadly (22%), and understanding why and when developers might want to use\nfuzz testing (14%). These findings indicate that we still have work to do in\nterms of communicating the value of fuzz testing, what should be fuzz tested,\nand how to apply it to a variety of different code bases.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/fuzz_use.svg\" alt=\"Chart showing most respondents have\nnot tried fuzz testing yet\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/text_fuzz_challenge.svg\" alt=\"Chart showing the biggest fuzz\ntesting challenges relate to understanding, rather than technical issues\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo better understand common tasks around vulnerability detection and\nresolution, we asked respondents whether they‚Äôd learned of any vulnerabilities\nin their Go code or its dependencies during the past year. For those who did,\nwe followed up with questions asking how the most recent vulnerability was\ndiscovered, how they investigated and/or resolved it, and what was most\nchallenging about the whole process.\u003c/p\u003e\n\u003cp\u003eFirst, we found evidence that vulnerability scanning is effective. One quarter\nof respondents said they‚Äôd learned of a vulnerability in one of their\nthird-party dependencies. Recall, however, that only about ‚Öì of respondents\nwere using vulnerability scanning at all‚Äîwhen we look at responses from\npeople who said they ran some sort of vulnerability scanner, this proportion\nnearly doubles, from 25% ‚Üí 46%. Besides vulnerabilities in dependencies or in\nGo itself, 12% of respondents said they learned about vulnerabilities in their\nown code.\u003c/p\u003e\n\u003cp\u003eA majority of respondents said they learned of vulnerabilities via security\nscanners (65%). The single most common tool respondents cited was \u003ca href=\"https://github.com/dependabot\" rel=\"noreferrer\" target=\"_blank\"\u003eGitHub‚Äôs\ndependabot\u003c/a\u003e (38%), making it more frequently\nreferenced than all other vulnerability scanners combined (27%). After\nscanning tools, the most common method for learning about vulnerabilities were\npublic reports, such as release notes and CVEs (22%).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/security_found_vuln.svg\" alt=\"Chart showing that most\nrespondents have not found security vulnerabilities during the past year\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/text_vuln_find.svg\" alt=\"Chart showing\nthat vulnerability scanners are the most common way to learn about security\nvulnerabilities\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eOnce respondents learned about a vulnerability, the most common resolution was\nto upgrade the vulnerable dependency (67%). Among respondents who also\ndiscussed using a vulnerability scanner (a proxy for participants who were\ndiscussing a vulnerability in a third-party dependency), this increased to\n85%. Less than one third of respondents discussed reading the CVE or\nvulnerability report (31%), and only 12% mentioned a deeper investigation to\nunderstand whether (and how) their software was impacted by the vulnerability.\u003c/p\u003e\n\u003cp\u003eThat only 12% of respondents said they performed an investigation into whether\na vulnerability was reachable in their code, or the potential impact it may\nhave had on their service, was surprising. To understand this better, we also\nlooked at what respondents said was most challenging about responding to\nsecurity vulnerabilities. They described several different topics in roughly\nequal proportions, from ensuring that dependency updates didn‚Äôt break\nanything, to understanding how to update indirect dependencies via go.mod\nfiles. Also in this list is the type of investigation needed to understand a\nvulnerability‚Äôs impact or root cause. When we focus on only the respondents\nwho said they performed these investigations, however, we see a clear\ncorrelation: 70% of respondents who said they performed an investigation into\nthe vulnerability‚Äôs potential impact cited it as the most challenging part of\nthis process. Reasons included not just the difficulty of the task, but the\nfact that it was often both unplanned and unrewarded work.\u003c/p\u003e\n\u003cp\u003eThe Go team believes these deeper investigations, which require an\nunderstanding of \u003cem\u003ehow\u003c/em\u003e an application uses a vulnerable dependency, are\ncrucial for understanding the risk the vulnerability may present to an\norganization, as well as understanding whether a data breach or other security\ncompromise occurred. Thus, \u003ca href=\"/blog/vuln\"\u003ewe designed\n\u003ccode\u003egovulncheck\u003c/code\u003e\u003c/a\u003e to only alert developers when a\nvulnerability is invoked, and point developers to the exact places in their\ncode using the vulnerable functions. Our hope is that this will make it easier\nfor developers to quickly investigate the vulnerabilities that truly matter to\ntheir application, thus reducing the overall amount of unplanned work in this\nspace.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/text_vuln_resolve.svg\" alt=\"Chart showing most\nrespondents resolved vulnerabilities by upgrading dependencies\" class=\"chart\"/\u003e\n\u003cimg src=\"survey2022q2/text_vuln_challenge.svg\" alt=\"Chart showing a 6-way\ntie for tasks that were most challenging when investigating and resolving\nsecurity vulnerabilities\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"tooling\"\u003eTooling\u003c/h2\u003e\n\u003cp\u003eNext, we investigated three questions focused on tooling:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHas the editor landscape shifted since our last survey?\u003c/li\u003e\n\u003cli\u003eAre developers using workspaces? If so, what challenges have they\nencountered while getting started?\u003c/li\u003e\n\u003cli\u003eHow do developers handle internal package documentation?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eVS Code appears to be continuing to grow in popularity among survey\nrespondents, with the proportion of respondents saying it‚Äôs their preferred\neditor for Go code increasing from 42% ‚Üí 45% since 2021. VS Code and GoLand,\nthe two most popular editors, showed no differences in popularity between\nsmall and large organizations, though hobbyist developers were more likely to\nprefer VS Code to GoLand. This analysis excludes the randomly sampled VS Code\nrespondents‚Äîwe‚Äôd expect people we invited to the survey to show a preference\nfor the tool used to distribute the invitation, which is exactly what we saw\n(91% of the randomly sampled respondents preferred VS Code).\u003c/p\u003e\n\u003cp\u003eFollowing the 2021 switch to \u003ca href=\"/blog/gopls-vscode-go\"\u003epower VS Code‚Äôs Go support via the gopls\nlanguage server\u003c/a\u003e, the Go team has been\ninterested in understanding developer pain points related to gopls. While we\nreceive a healthy amount of feedback from developers currently using gopls, we\nwondered whether a large proportion of developers had disabled it shortly\nafter release, which could mean we weren‚Äôt hearing feedback about particularly\nproblematic use cases. To answer this question, we asked respondents who said\nthey preferred an editor which supports gopls whether or not they \u003cem\u003eused\u003c/em\u003e\ngopls, finding that only 2% said they had disabled it; for VS Code\nspecifically, this dropped to 1%. This increases our confidence that we‚Äôre\nhearing feedback from a representative group of developers. For readers who\nstill have unresolved issues with gopls, please let us know by \u003ca href=\"https://github.com/golang/go/issues\"\u003efiling an issue on GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/editor_self_select.svg\" alt=\"Chart showing the top\npreferred editors for Go are VS Code, GoLand, and Vim / Neovim\" class=\"chart\"/\u003e\n\u003cimg src=\"survey2022q2/use_gopls.svg\" alt=\"Chart showing only 2% of\nrespondents disabled gopls\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eRegarding workspaces, it seems many people first learned about Go‚Äôs support\nfor multi-module workspaces via this survey. Respondents who learned of the\nsurvey through VS Code‚Äôs randomized prompt were especially likely to say they\nhad not heard of workspaces before (53% of randomly sampled respondents vs.\n33% of self-selecting respondents), a trend we also observed with awareness of\ngenerics (though this was higher for both groups, with 93% of self-selecting\nrespondents aware that generics landed in Go 1.18 vs. 68% of randomly sampled\nrespondents). One interpretation is that there is a large audience of Go\ndevelopers we do not currently reach through the Go blog or existing social\nmedia channels, which has traditionally been our primary mechanism for sharing\nnew functionality.\u003c/p\u003e\n\u003cp\u003eWe found that 9% of respondents said they had tried workspaces, and an\nadditional 5% would like to but are blocked by something. Respondents\ndiscussed a variety of challenges when trying to use Go workspaces. A lack of\ndocumentation and helpful error message from the \u003ccode\u003ego work\u003c/code\u003e command top the\nlist (21%), followed by technical challenges such as refactoring existing\nrepositories (13%). Similar to challenges discussed in the security section,\nwe again see ‚Äúlack of time / not a priority‚Äù in this list‚Äîwe interpret this\nto mean the bar to understand and setup workspaces is still a bit too high\ncompared to the benefits they provide, potentially because developers already\nhad workarounds in place.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/workspaces_use_s.svg\" alt=\"Chart showing a majority of\nrandomly sampled respondents were not aware of workspaces prior to this\nsurvey\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/text_workspace_challenge.svg\" alt=\"Chart showing that documentation and error messages were the top\nchallenge when trying to use Go workspaces\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003ePrior to the release of Go modules, organizations were able to run internal\ndocumentation servers (such as \u003ca href=\"https://github.com/golang/gddo\" rel=\"noreferrer\" target=\"_blank\"\u003ethe one that powered\ngodoc.org\u003c/a\u003e) to provide employees with\ndocumentation for private, internal Go packages. This remains true with\n\u003ca href=\"https://pkg.go.dev\" rel=\"noreferrer\" target=\"_blank\"\u003epkg.go.dev\u003c/a\u003e, but setting up such a server is more complex\nthan it used to be. To understand if we should invest in making this process\neasier, we asked respondents how they view documentation for internal Go\nmodules today, and whether that‚Äôs their preferred way of working.\u003c/p\u003e\n\u003cp\u003eThe results show the most common way to view internal Go documentation today\nis by reading the code (81%), and while about half of the respondents were\nhappy with this, a large proportion would prefer to have an internal\ndocumentation server (39%). We also asked who might be most likely to\nconfigure and maintain such a server: by a 2-to-1 margin, respondents thought\nit would be a software engineer rather than someone from a dedicated IT\nsupport or operations team. This strongly suggests that a documentation server\nshould be a turn-key solution, or at least easy for a single developer to get\nrunning quickly (over, say, a lunch break), on the theory that this type of\nwork is yet one more responsibility on developers‚Äô already full plates.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/doc_viewing_today.svg\" alt=\"Chart showing most\nrespondents use source code directly for internal package documentation\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/doc_viewing_ideal.svg\" alt=\"Chart\nshowing 39% of respondents would prefer to use a documentation server instead\nof viewing source for docs\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/doc_server_owner.svg\" alt=\"Chart showing most respondents\nexpect a software engineer to be responsible for such a documentation server\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"who-we-heard-from\"\u003eWho we heard from\u003c/h2\u003e\n\u003cp\u003eOverall, the demographics and firmographics of respondents did not\nmeaningfully shift since \u003ca href=\"/blog/survey2021-results\"\u003eour 2021\nsurvey\u003c/a\u003e. A small majority of\nrespondents (53%) have at least two years of experience using Go, while the\nrest are newer to the Go community. About ‚Öì of respondents work at small\nbusinesses (\u0026lt; 100 employees), ¬º work at medium-sized businesses (100 ‚Äì 1,000\nemployees), and ¬º work at enterprises (\u0026gt; 1,000 employees). Similar to last\nyear, we found that our VS Code prompt helped encourage survey participation\noutside of North America and Europe.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/go_exp.svg\" alt=\"Chart showing distribution of\nrespondents\u0026#39; Go experience\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/where.svg\" alt=\"Chart showing distribution of where respondents\u0026#39; use Go\" class=\"chart\"/\u003e\n\u003cimg src=\"survey2022q2/org_size.svg\" alt=\"Chart showing distribution of\norganization sizes for survey respondents\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/industry.svg\" alt=\"Chart showing distribution of industry\nclassifications for survey respondents\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/location_s.svg\" alt=\"Chart showing where in the world survey\nrespondents live\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"how-respondents-use-go\"\u003eHow respondents use Go\u003c/h2\u003e\n\u003cp\u003eSimilar to the previous section, we did not find any statistically significant\nyear-over-year changes in how respondents are using Go. The two most common\nuse cases remain building API/RPC services (73%) and writing CLIs (60%). We\nused linear models to investigate whether there was a relationship between how\nlong a respondent had been using Go and the types of things they were building\nwith it. We found that respondents with \u0026lt; 1 year of Go experience are more\nlikely to be building something in the bottom half of this chart (GUIs, IoT,\ngames, ML/AI, or mobile apps), suggesting that there is interest in using Go\nin these domains, but the drop-off after one year of experience also implies\nthat developers hit significant barriers when working with Go in these areas.\u003c/p\u003e\n\u003cp\u003eA majority of respondents use either Linux (59%) or macOS (52%) when\ndeveloping with Go, and the vast majority deploy to Linux systems (93%). This\ncycle we added a response choice for developing on Windows Subsystem for Linux\n(WSL), finding that 13% of respondents use this when working with Go.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/go_app.svg\" alt=\"Chart showing distribution of what\nrespondents build with Go\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/os_dev.svg\" alt=\"Chart showing Linux and macOS are the most common development systems\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/os_deploy.svg\" alt=\"Chart showing\nLinux is the most common deployment platform\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"sentiment-and-challenges\"\u003eSentiment and challenges\u003c/h2\u003e\n\u003cp\u003eFinally, we asked respondents about their overall level of satisfaction or\ndissatisfaction with Go during that past year, as well as the biggest\nchallenge they face when using Go. We found that 93% of respondents said they\nwere ‚Äúsomewhat‚Äù (30%) or ‚Äúvery‚Äù (63%) satisfied, which is not statistically\ndifferent from the 92% of respondents who said they were satisfied during the\n2021 Go Developer Survey.\u003c/p\u003e\n\u003cp\u003eAfter years of generics consistently being the most commonly discussed\nchallenge when using Go, the support for type parameters in Go 1.18 finally\nresulted in a new top challenge: our old friend, error handling. To be sure,\nerror handling is statistically tied with several other challenges, including\nmissing or immature libraries for certain domains, helping developers learn\nand implement best practices, and other revisions to the type system, such as\nsupport for enums or more functional programming syntax. Post-generics, there\nappears to be a very long tail of challenges facing Go developers.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2022q2/csat.svg\" alt=\"Chart showing 93% of survey respondents\nare satisfied using Go, with 4% dissatisfied\" class=\"chart\"/\u003e \u003cimg src=\"survey2022q2/text_biggest_challenge.svg\" alt=\"Chart showing a long tail\nof challenges reported by survey respondents\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"survey-methodology\"\u003eSurvey methodology\u003c/h2\u003e\n\u003cp\u003eWe publicly announced this survey on June 1st, 2022 via\n\u003ca href=\"/blog\"\u003ego.dev/blog\u003c/a\u003e and \u003ca href=\"https://twitter.com/golang\" rel=\"noreferrer\" target=\"_blank\"\u003e@golang\u003c/a\u003e\non Twitter. We also randomly prompted 10% of \u003ca href=\"https://code.visualstudio.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eVS\nCode\u003c/a\u003e users via the Go plugin between June 1st\n‚Äì 21st. The survey closed on June 22nd, and partial responses (i.e., people\nwho started but did not finish the survey) were also recorded. We filtered out\ndata from respondents who completed the survey especially quickly (\u0026lt; 30\nseconds) or tended to check all of the response choices for multi-select\nquestions. This left 5,752 responses.\u003c/p\u003e\n\u003cp\u003eAbout ‚Öì of respondents came from the randomized VS Code prompt, and this group\ntended to have less experience with Go than people who found the survey via\nthe Go blog or Go‚Äôs social media channels. We used linear and logistic models\nto investigate whether apparent differences between these groups were better\nexplained by this difference in experience, which was usually the case. The\nexceptions are noted in the text.\u003c/p\u003e\n\u003cp\u003eThis year we very much hoped to also share the raw dataset with the community,\nsimilar to developer surveys from \u003ca href=\"https://insights.stackoverflow.com/survey\" rel=\"noreferrer\" target=\"_blank\"\u003eStack\nOverflow\u003c/a\u003e,\n\u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2021/\" rel=\"noreferrer\" target=\"_blank\"\u003eJetBrains\u003c/a\u003e, and others.\nRecent legal guidance unfortunately prevents us from doing that right now, but\nwe‚Äôre working on this and expect to be able to share the raw dataset for our\nnext Go Developer Survey.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThis iteration of the Go Developer Survey focused on new functionality from\nthe Go 1.18 release. We found that generics adoption is well under way, with\ndevelopers already hitting some limitations of the current implementation.\nFuzz testing and workspaces have seen slower adoption, though largely not for\ntechnical reasons: the primary challenge with both was understanding when and\nhow to use them. A lack of developer time to focus on these topics was another\nchallenge, and this theme carried into security tooling as well. These\nfindings are helping the Go team prioritize our next efforts and will\ninfluence how we approach the design of future tooling.\u003c/p\u003e\n\u003cp\u003eThank you for joining us in the tour of Go developer research‚Äîwe hope it‚Äôs\nbeen insightful and interesting. Most importantly, thank you to everyone who\nhas responded to our surveys over the years. Your feedback helps us understand\nthe constraints Go developers work under and identify challenges they face. By\nsharing these experiences, you‚Äôre helping to improve the Go ecosystem for\neveryone. On behalf of Gophers everywhere, we appreciate you!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-09-08T00:00:00Z",
  "Author": "Todd Kulesza"
}