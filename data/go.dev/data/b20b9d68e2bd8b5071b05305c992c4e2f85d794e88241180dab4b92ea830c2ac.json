{
  "Source": "go.dev",
  "Title": "Portable Cloud Programming with Go Cloud",
  "Link": "https://go.dev/blog/go-cloud",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go-cloud\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003ePortable Cloud Programming with Go Cloud\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Eno Compton and Cassandra Salisbury\u003cbr/\u003e\n      24 July 2018\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eToday, the Go team at Google is releasing a new open source project,\n\u003ca href=\"https://github.com/google/go-cloud\" rel=\"noreferrer\" target=\"_blank\"\u003eGo Cloud\u003c/a\u003e,\na library and tools for developing on the \u003ca href=\"https://cloud.google.com/open-cloud/\" rel=\"noreferrer\" target=\"_blank\"\u003eopen cloud\u003c/a\u003e.\nWith this project, we aim to make Go the language of choice for developers\nbuilding portable cloud applications.\u003c/p\u003e\n\u003cp\u003eThis post explains why we started this project, the details of how Go Cloud works, and how to get involved.\u003c/p\u003e\n\u003ch2 id=\"why-portable-cloud-programming-why-now\"\u003eWhy portable cloud programming? Why now?\u003c/h2\u003e\n\u003cp\u003eWe estimate there are now \u003ca href=\"https://research.swtch.com/gophercount\" rel=\"noreferrer\" target=\"_blank\"\u003eover one million\u003c/a\u003e\nGo developers worldwide.\nGo powers many of the most critical cloud infrastructure projects,\nincluding Kubernetes, Istio, and Docker.\nCompanies like Lyft, Capital One, Netflix and \u003ca href=\"/wiki/GoUsers\"\u003emany more\u003c/a\u003e\nare depending on Go in production.\nOver the years, we’ve found that developers love Go for cloud development\nbecause of its efficiency,\nproductivity, built-in concurrency, and low latency.\u003c/p\u003e\n\u003cp\u003eAs part of our work to support Go’s rapid growth,\nwe have been interviewing teams who work with Go to understand how they\nuse the language and how the Go ecosystem can improve further.\nOne common theme with many organizations is the need for portability across cloud providers.\nThese teams want to deploy robust applications in \u003ca href=\"https://en.wikipedia.org/wiki/Cloud_computing#Multicloud\" rel=\"noreferrer\" target=\"_blank\"\u003emulti-cloud\u003c/a\u003e\nand \u003ca href=\"https://en.wikipedia.org/wiki/Cloud_computing#Hybrid_cloud\" rel=\"noreferrer\" target=\"_blank\"\u003ehybrid-cloud\u003c/a\u003e environments,\nand migrate their workloads between cloud providers without significant\nchanges to their code.\u003c/p\u003e\n\u003cp\u003eTo achieve this, some teams attempt to decouple their applications from\nprovider-specific APIs in order to produce simpler and more portable code.\nHowever the short-term pressure to ship features means teams often sacrifice\nlonger-term efforts toward portability.\nAs a result, most Go applications running in the cloud are tightly coupled\nto their initial cloud provider.\u003c/p\u003e\n\u003cp\u003eAs an alternative, teams can use Go Cloud,\na set of open generic cloud APIs, to write simpler and more portable cloud applications.\nGo Cloud also sets the foundation for an ecosystem of portable cloud libraries\nto be built on top of these generic APIs.\nGo Cloud makes it possible for teams to meet their feature development goals\nwhile also preserving the long-term flexibility for multi-cloud and hybrid-cloud architectures.\nGo Cloud applications can also migrate to the cloud providers that best meet their needs.\u003c/p\u003e\n\u003ch2 id=\"what-is-go-cloud\"\u003eWhat is Go Cloud?\u003c/h2\u003e\n\u003cp\u003eWe have identified common services used by cloud applications and have created\ngeneric APIs to work across cloud providers.\nToday, Go Cloud is launching with blob storage,\nMySQL database access, runtime configuration,\nand an HTTP server configured with request logging,\ntracing, and health checking.\nGo Cloud offers support for Google Cloud Platform (GCP) and Amazon Web Services (AWS).\nWe plan to work with cloud industry partners and the Go community to add\nsupport for additional cloud providers very soon.\u003c/p\u003e\n\u003cp\u003eGo Cloud aims to develop vendor-neutral generic APIs for the most-used services\nacross cloud providers such that deploying a Go application on another cloud is simple and easy.\nGo Cloud also lays the foundation for other open source projects to write\ncloud libraries that work across providers.\nCommunity feedback, from all types of developers at all levels,\nwill inform the priority of future APIs in Go Cloud.\u003c/p\u003e\n\u003ch2 id=\"how-does-it-work\"\u003eHow does it work?\u003c/h2\u003e\n\u003cp\u003eAt the core of Go Cloud is a collection of generic APIs for portable cloud programming.\nLet’s look at an example of using blob storage.\nYou can use the generic type \u003ca href=\"https://godoc.org/github.com/google/go-cloud/blob#Bucket\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003e*blob.Bucket\u003c/code\u003e\u003c/a\u003e\nto copy a file from a local disk to a cloud provider.\nLet’s start by opening an S3 bucket using the included \u003ca href=\"https://godoc.org/github.com/google/go-cloud/blob/s3blob\" rel=\"noreferrer\" target=\"_blank\"\u003es3blob package\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// setupBucket opens an AWS bucket.\nfunc setupBucket(ctx context.Context) (*blob.Bucket, error) {\n    // Obtain AWS credentials.\n    sess, err := session.NewSession(\u0026amp;aws.Config{\n        Region: aws.String(\u0026#34;us-east-2\u0026#34;),\n    })\n    if err != nil {\n        return nil, err\n    }\n    // Open a handle to s3://go-cloud-bucket.\n    return s3blob.OpenBucket(ctx, sess, \u0026#34;go-cloud-bucket\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce a program has a \u003ccode\u003e*blob.Bucket\u003c/code\u003e, it can create a \u003ccode\u003e*blob.Writer\u003c/code\u003e,\nwhich implements \u003ccode\u003eio.Writer\u003c/code\u003e.\nFrom there, the program can use the \u003ccode\u003e*blob.Writer\u003c/code\u003e to write data to the bucket,\nchecking that \u003ccode\u003eClose\u003c/code\u003e does not report an error.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ectx := context.Background()\nb, err := setupBucket(ctx)\nif err != nil {\n    log.Fatalf(\u0026#34;Failed to open bucket: %v\u0026#34;, err)\n}\ndata, err := ioutil.ReadFile(\u0026#34;gopher.png\u0026#34;)\nif err != nil {\n    log.Fatalf(\u0026#34;Failed to read file: %v\u0026#34;, err)\n}\nw, err := b.NewWriter(ctx, \u0026#34;gopher.png\u0026#34;, nil)\nif err != nil {\n    log.Fatalf(\u0026#34;Failed to obtain writer: %v\u0026#34;, err)\n}\n_, err = w.Write(data)\nif err != nil {\n    log.Fatalf(\u0026#34;Failed to write to bucket: %v\u0026#34;, err)\n}\nif err := w.Close(); err != nil {\n    log.Fatalf(\u0026#34;Failed to close: %v\u0026#34;, err)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how the logic of using the bucket does not refer to AWS S3.\nGo Cloud makes swapping out cloud storage a matter of changing the function\nused to open the \u003ccode\u003e*blob.Bucket\u003c/code\u003e.\nThe application could instead use Google Cloud Storage by constructing a\n\u003ccode\u003e*blob.Bucket\u003c/code\u003e using \u003ca href=\"https://godoc.org/github.com/google/go-cloud/blob/gcsblob#OpenBucket\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003egcsblob.OpenBucket\u003c/code\u003e\u003c/a\u003e\nwithout changing the code that copies the file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// setupBucket opens a GCS bucket.\nfunc setupBucket(ctx context.Context) (*blob.Bucket, error) {\n    // Open GCS bucket.\n    creds, err := gcp.DefaultCredentials(ctx)\n    if err != nil {\n        return nil, err\n    }\n    c, err := gcp.NewHTTPClient(gcp.DefaultTransport(), gcp.CredentialsTokenSource(creds))\n    if err != nil {\n        return nil, err\n    }\n    // Open a handle to gs://go-cloud-bucket.\n    return gcsblob.OpenBucket(ctx, \u0026#34;go-cloud-bucket\u0026#34;, c)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile different steps are needed to access buckets on different cloud providers,\nthe resulting type used by your application is the same: \u003ccode\u003e*blob.Bucket\u003c/code\u003e.\nThis isolates application code from cloud-specific code.\nTo increase interoperability with existing Go libraries,\nGo Cloud leverages established interfaces like \u003ccode\u003eio.Writer\u003c/code\u003e,\n\u003ccode\u003eio.Reader\u003c/code\u003e, and \u003ccode\u003e*sql.DB\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe setup code needed to access cloud services tends to follow a pattern:\nhigher abstractions are constructed from more basic abstractions.\nWhile you could write this code by hand, Go Cloud automates this with \u003cstrong\u003eWire\u003c/strong\u003e,\na tool that generates cloud-specific setup code for you.\nThe \u003ca href=\"https://github.com/google/go-cloud/tree/master/wire\" rel=\"noreferrer\" target=\"_blank\"\u003eWire documentation\u003c/a\u003e\nexplains how to install and use the tool and the \u003ca href=\"https://github.com/google/go-cloud/tree/master/samples/guestbook\" rel=\"noreferrer\" target=\"_blank\"\u003eGuestbook sample\u003c/a\u003e\nshows Wire in action.\u003c/p\u003e\n\u003ch2 id=\"how-can-i-get-involved-and-learn-more\"\u003eHow can I get involved and learn more?\u003c/h2\u003e\n\u003cp\u003eTo get started, we recommend following \u003ca href=\"https://github.com/google/go-cloud/tree/master/samples/tutorial\" rel=\"noreferrer\" target=\"_blank\"\u003ethe tutorial\u003c/a\u003e\nand then trying to build an application yourself.\nIf you’re already using AWS or GCP, you can try migrating parts of your\nexisting application to use Go Cloud.\nIf you’re using a different cloud provider or an on-premise service,\nyou can extend Go Cloud to support it by implementing the driver interfaces\n(like \u003ca href=\"https://godoc.org/github.com/google/go-cloud/blob/driver#Bucket\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003edriver.Bucket\u003c/code\u003e\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eWe appreciate any and all input you have about your experience.\n\u003ca href=\"https://github.com/google/go-cloud\" rel=\"noreferrer\" target=\"_blank\"\u003eGo Cloud’s\u003c/a\u003e development is conducted on GitHub.\nWe are looking forward to contributions, including pull requests.\n\u003ca href=\"https://github.com/google/go-cloud/issues/new\" rel=\"noreferrer\" target=\"_blank\"\u003eFile an issue\u003c/a\u003e to tell\nus what could be better or what future APIs the project should support.\nFor updates and discussion about the project,\njoin \u003ca href=\"https://groups.google.com/forum/#!forum/go-cloud\" rel=\"noreferrer\" target=\"_blank\"\u003ethe project’s mailing list\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe project requires contributors to sign the same Contributor License Agreement\nas that of the Go project.\nRead the \u003ca href=\"https://github.com/google/go-cloud/blob/master/CONTRIBUTING.md\" rel=\"noreferrer\" target=\"_blank\"\u003econtribution guidelines\u003c/a\u003e for more details.\nPlease note, Go Cloud is covered by the Go \u003ca href=\"https://github.com/google/go-cloud/blob/master/CODE_OF_CONDUCT.md\" rel=\"noreferrer\" target=\"_blank\"\u003eCode of Conduct\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThank you for taking the time to learn about Go Cloud.\nWe are excited to work with you to make Go the language of choice for developers\nbuilding portable cloud applications.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2018-07-24T00:00:00Z",
  "Author": "Eno Compton and Cassandra Salisbury"
}