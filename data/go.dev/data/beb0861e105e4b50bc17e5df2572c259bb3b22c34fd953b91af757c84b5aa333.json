{
  "Source": "go.dev",
  "Title": "Go 1.19 is released!",
  "Link": "https://go.dev/blog/go1.19",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.19\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.19 is released!\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      The Go Team\u003cbr/\u003e\n      2 August 2022\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday the Go team is thrilled to release Go 1.19,\nwhich you can get by visiting the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGo 1.19 refines and improves our massive \u003ca href=\"/blog/go1.18\"\u003eGo 1.18 release\u003c/a\u003e earlier this year.\nWe focused Go 1.19’s generics development on addressing the subtle issues\nand corner cases reported to us by the community,\nas well as important performance improvements (up to 20% for some generic programs).\u003c/p\u003e\n\u003cp\u003eDoc comments now support \u003ca href=\"/doc/comment\"\u003elinks, lists, and clearer heading syntax\u003c/a\u003e.\nThis change helps users write clearer, more navigable doc comments,\nespecially in packages with large APIs.\nAs part of this change \u003ccode\u003egofmt\u003c/code\u003e now reformats doc comments to apply a\nstandard formatting to uses of these features.\nSee “\u003ca href=\"/doc/comment\"\u003eGo Doc Comments\u003c/a\u003e” for all the details.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/ref/mem\"\u003eGo’s memory model\u003c/a\u003e now explicitly defines\nthe behavior of the \u003ca href=\"/pkg/sync/atomic/\"\u003esync/atomic package\u003c/a\u003e.\nThe formal definition of the happens-before relation has been revised\nto align with the memory models used by C, C++, Java, JavaScript, Rust, and Swift.\nExisting programs are unaffected.\nAlong with the memory model update, there are\n\u003ca href=\"/doc/go1.19#atomic_types\"\u003enew types in the sync/atomic package\u003c/a\u003e,\nsuch as \u003ca href=\"/pkg/sync/atomic/#Int64\"\u003eatomic.Int64\u003c/a\u003e and \u003ca href=\"/pkg/sync/atomic/#Pointer\"\u003eatomic.Pointer[T]\u003c/a\u003e,\nto make it easier to use atomic values.\u003c/p\u003e\n\u003cp\u003eFor \u003ca href=\"/blog/path-security\"\u003esecurity reasons\u003c/a\u003e, the os/exec package\nno longer respects relative paths in PATH lookups.\nSee the \u003ca href=\"/pkg/os/exec/#hdr-Executables_in_the_current_directory\"\u003epackage documentation\u003c/a\u003e\nfor details.\nExisting uses of \u003ca href=\"https://pkg.go.dev/golang.org/x/sys/execabs\" rel=\"noreferrer\" target=\"_blank\"\u003egolang.org/x/sys/execabs\u003c/a\u003e\ncan be moved back to os/exec in programs that only build using Go 1.19 or later.\u003c/p\u003e\n\u003cp\u003eThe garbage collector has added support for a soft memory limit,\ndiscussed in detail in \u003ca href=\"/doc/gc-guide#Memory_limit\"\u003ethe new garbage collection guide\u003c/a\u003e.\nThe limit can be particularly helpful for optimizing Go programs to\nrun as efficiently as possible in containers with dedicated amounts of memory.\u003c/p\u003e\n\u003cp\u003eThe new build constraint \u003ccode\u003eunix\u003c/code\u003e is satisfied when the target operating system (\u003ccode\u003eGOOS\u003c/code\u003e)\nis any Unix-like system.\nToday, Unix-like means all of\nGo’s target operating systems except \u003ccode\u003ejs\u003c/code\u003e, \u003ccode\u003eplan9\u003c/code\u003e, \u003ccode\u003ewindows\u003c/code\u003e, and \u003ccode\u003ezos\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFinally, Go 1.19 includes a wide variety of performance and implementation improvements, including\ndynamic sizing of initial goroutine stacks to reduce stack copying,\nautomatic use of additional file descriptors on most Unix systems,\njump tables for large switch statements on x86-64 and ARM64,\nsupport for debugger-injected function calls on ARM64,\nregister ABI support on RISC-V,\nand experimental support for\nLinux running on Loongson 64-bit architecture LoongArch (\u003ccode\u003eGOARCH=loong64\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThanks to everyone who contributed to this release by writing code, filing bugs, sharing feedback,\nand testing the beta and release candidates.\nYour efforts helped to ensure that Go 1.19 is as stable as possible.\nAs always, if you notice any problems, please \u003ca href=\"/issue/new\"\u003efile an issue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEnjoy Go 1.19!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2022-08-02T00:00:00Z",
  "Author": "The Go Team"
}