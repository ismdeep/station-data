{
  "Source": "go.dev",
  "Title": "Go 1.9 is released",
  "Link": "https://go.dev/blog/go1.9",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.9\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 1.9 is released\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Francesc Campoy\u003cbr/\u003e\n      24 August 2017\n      \u003c/p\u003e\n      \n      \u003cp\u003eToday the Go team is happy to announce the release of Go 1.9.\nYou can get it from the \u003ca href=\"/dl/\"\u003edownload page\u003c/a\u003e.\nThere are many changes to the language, standard library, runtime, and tooling.\nThis post covers the most significant visible ones.\nMost of the engineering effort put into this release went to improvements of the runtime and tooling,\nwhich makes for a less exciting announcement, but nonetheless a great release.\u003c/p\u003e\n\u003cp\u003eThe most important change to the language is the introduction of type aliases: a feature\ncreated to support gradual code repair. A type alias declaration has the form:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etype T1 = T2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis declaration introduces an alias name \u003ccode\u003eT1\u003c/code\u003e for the type \u003ccode\u003eT2\u003c/code\u003e, in the same way that \u003ccode\u003ebyte\u003c/code\u003e has\nalways been an alias for \u003ccode\u003euint8\u003c/code\u003e.\nThe \u003ca href=\"/design/18130-type-alias\"\u003etype alias design document\u003c/a\u003e and\n\u003ca href=\"/talks/2016/refactor.article\"\u003ean article on refactoring\u003c/a\u003e cover this addition in more detail.\u003c/p\u003e\n\u003cp\u003eThe new \u003ca href=\"/pkg/math/bits\"\u003emath/bits\u003c/a\u003e package provides bit counting and manipulation functions\nfor unsigned integers, implemented by special CPU instructions when possible.\nFor example, on x86-64 systems, \u003ccode\u003ebits.TrailingZeros(x)\u003c/code\u003e uses the\n\u003ca href=\"https://pdos.csail.mit.edu/6.828/2010/readings/i386/BSF.htm\" rel=\"noreferrer\" target=\"_blank\"\u003eBSF\u003c/a\u003e instruction.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esync\u003c/code\u003e package has added a new \u003ca href=\"/pkg/sync#Map\"\u003eMap\u003c/a\u003e type, safe for concurrent access.\nYou can read more about it from its documentation and learn more about why it was created from this\n\u003ca href=\"https://www.youtube.com/watch?v=C1EtfDnsdDs\" rel=\"noreferrer\" target=\"_blank\"\u003eGopherCon 2017 lightning talk\u003c/a\u003e\n(\u003ca href=\"https://github.com/gophercon/2017-talks/blob/master/lightningtalks/BryanCMills-AnOverviewOfSyncMap/An%20Overview%20of%20sync.Map.pdf\" rel=\"noreferrer\" target=\"_blank\"\u003eslides\u003c/a\u003e).\nIt is not a general replacement for Goâ€™s map type; please see the documentation to learn when it should be used.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003etesting\u003c/code\u003e package also has an addition. The new \u003ccode\u003eHelper\u003c/code\u003e method, added to both\n\u003ca href=\"/pkg/testing#T.Helper\"\u003etesting.T\u003c/a\u003e and \u003ca href=\"/pkg/testing#B.Helper\"\u003etesting.B\u003c/a\u003e,\nmarks the calling function as a test helper function.\nWhen the testing package prints file and line information, it shows the location of the call to a helper function\ninstead of a line in the helper function itself.\u003c/p\u003e\n\u003cp\u003eFor example, consider this test:\u003c/p\u003e\n\u003cdiv class=\"code\"\u003e\n\u003cpre\u003epackage p\n\nimport \u0026#34;testing\u0026#34;\n\nfunc failure(t *testing.T) {\n    t.Helper() \u003cspan class=\"comment\"\u003e// This call silences this function in error reports.\u003c/span\u003e\n    t.Fatal(\u0026#34;failure\u0026#34;)\n}\n\nfunc Test(t *testing.T) {\n    failure(t)\n}\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eBecause \u003ccode\u003efailure\u003c/code\u003e identifies itself as a test helper, the error message printed during \u003ccode\u003eTest\u003c/code\u003e will indicate line 11,\nwhere \u003ccode\u003efailure\u003c/code\u003e is called, instead of line 7, where \u003ccode\u003efailure\u003c/code\u003e calls \u003ccode\u003et.Fatal\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003etime\u003c/code\u003e package now transparently tracks monotonic time in each \u003ccode\u003eTime\u003c/code\u003e value,\nmaking computing durations between two \u003ccode\u003eTime\u003c/code\u003e values a safe operation in the presence of wall clock adjustments.\nFor example, this code now computes the right elapsed time even across a leap second clock reset:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estart := time.Now()\nf()\nelapsed := time.Since(start)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee the \u003ca href=\"http://beta.golang.org/pkg/time/#hdr-Monotonic_Clocks\" rel=\"noreferrer\" target=\"_blank\"\u003epackage docs\u003c/a\u003e and\n\u003ca href=\"https://github.com/golang/proposal/blob/master/design/12914-monotonic.md\" rel=\"noreferrer\" target=\"_blank\"\u003edesign document\u003c/a\u003e for details.\u003c/p\u003e\n\u003cp\u003eFinally, as part of the efforts to make the Go compiler faster, Go 1.9 compiles functions in a package concurrently.\u003c/p\u003e\n\u003cp\u003eGo 1.9 includes many more additions, improvements, and fixes. Find the complete set of changes,\nand more information about the improvements listed above, in the\n\u003ca href=\"/doc/go1.9\"\u003eGo 1.9 release notes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo celebrate the release, Go User Groups around the world are holding\n\u003ca href=\"https://github.com/golang/cowg/blob/master/events/2017-08-go1.9-release-party.md\" rel=\"noreferrer\" target=\"_blank\"\u003erelease parties\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-08-24T00:00:00Z",
  "Author": "Francesc Campoy"
}