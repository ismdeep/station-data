{
  "Source": "go.dev",
  "Title": "Go on ARM and Beyond",
  "Link": "https://go.dev/blog/ports",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/ports\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo on ARM and Beyond\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Russ Cox\u003cbr/\u003e\n      17 December 2020\n      \u003c/p\u003e\n      \n      \u003cp\u003eThe industry is abuzz about non-x86 processors recently,\nso we thought it would be worth a brief post about Go’s support for them.\u003c/p\u003e\n\u003cp\u003eIt has always been important to us for Go to be portable,\nnot overfitting to any particular operating system or architecture.\nThe \u003ca href=\"https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html\" rel=\"noreferrer\" target=\"_blank\"\u003einitial open source release of Go\u003c/a\u003e\nincluded support for two operating systems (Linux and Mac OS X) and three\narchitectures (64-bit x86,\n32-bit x86, and 32-bit ARM).\u003c/p\u003e\n\u003cp\u003eOver the years, we’ve added support for many more operating systems and architecture combinations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGo 1 (March 2012) supported the original systems as well as FreeBSD,\nNetBSD, and OpenBSD on 64-bit and 32-bit x86,\nand Plan 9 on 32-bit x86.\u003c/li\u003e\n\u003cli\u003eGo 1.3 (June 2014) added support for Solaris on 64-bit x86.\u003c/li\u003e\n\u003cli\u003eGo 1.4 (December 2014) added support for Android on 32-bit ARM and Plan 9 on 64-bit x86.\u003c/li\u003e\n\u003cli\u003eGo 1.5 (August 2015) added support for Linux on 64-bit ARM and 64-bit PowerPC,\nas well as iOS on 32-bit and 64-bit ARM.\u003c/li\u003e\n\u003cli\u003eGo 1.6 (February 2016) added support for Linux on 64-bit MIPS,\nas well as Android on 32-bit x86.\nIt also added an official binary download for Linux on 32-bit ARM,\nprimarily for Raspberry Pi systems.\u003c/li\u003e\n\u003cli\u003eGo 1.7 (August 2016) added support for Linux on z Systems (S390x) and Plan 9 on 32-bit ARM.\u003c/li\u003e\n\u003cli\u003eGo 1.8 (February 2017) added support for Linux on 32-bit MIPS,\nand it added official binary downloads for Linux on 64-bit PowerPC and z Systems.\u003c/li\u003e\n\u003cli\u003eGo 1.9 (August 2017) added official binary downloads for Linux on 64-bit ARM.\u003c/li\u003e\n\u003cli\u003eGo 1.12 (February 2018) added support for Windows 10 IoT Core on 32-bit ARM,\nsuch as the Raspberry Pi 3.\nIt also added support for AIX on 64-bit PowerPC.\u003c/li\u003e\n\u003cli\u003eGo 1.14 (February 2019) added support for Linux on 64-bit RISC-V.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlthough the x86-64 port got most of the attention in the early days of Go,\ntoday all our target architectures are well supported by our \u003ca href=\"https://www.youtube.com/watch?v=uTMvKVma5ms\" rel=\"noreferrer\" target=\"_blank\"\u003eSSA-based compiler back end\u003c/a\u003e\nand produce excellent code.\nWe’ve been helped along the way by many contributors,\nincluding engineers from Amazon, ARM, Atos,\nIBM, Intel, and MIPS.\u003c/p\u003e\n\u003cp\u003eGo supports cross-compiling for all these systems out of the box with minimal effort.\nFor example, to build an app for 32-bit x86-based Windows from a 64-bit Linux system:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eGOARCH=386 GOOS=windows go build myapp  # writes myapp.exe\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the past year, several major vendors have made announcements of new ARM64\nhardware for servers,\nlaptops and developer machines.\nGo was well-positioned for this. For years now,\nGo has been powering Docker, Kubernetes, and the rest of the Go ecosystem\non ARM64 Linux servers,\nas well as mobile apps on ARM64 Android and iOS devices.\u003c/p\u003e\n\u003cp\u003eSince Apple’s announcement of the Mac transitioning to Apple Silicon this summer,\nApple and Google have been working together to ensure that Go and the broader\nGo ecosystem work well on them,\nboth running Go x86 binaries under Rosetta 2 and running native Go ARM64 binaries.\nEarlier this week, we released the first Go 1.16 beta,\nwhich includes native support for Macs using the M1 chip.\nYou can download and try the Go 1.16 beta for M1 Macs and all your other\nsystems on \u003ca href=\"/dl/#go1.16beta1\"\u003ethe Go download page\u003c/a\u003e.\n(Of course, this is a beta release and, like all betas,\nit certainly has bugs we don’t know about.\nIf you run into any problems, please report them at \u003ca href=\"/issue/new\"\u003egolang.org/issue/new\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eIt’s always nice to use the same CPU architecture for local development as in production,\nto remove one variation between the two environments.\nIf you deploy to ARM64 production servers,\nGo makes it easy to develop on ARM64 Linux and Mac systems too.\nBut of course, it’s still as easy as ever to work on one system and cross-compile\nfor deployment to another,\nwhether you’re working on an x86 system and deploying to ARM,\nworking on Windows and deploying to Linux,\nor some other combination.\u003c/p\u003e\n\u003cp\u003eThe next target we’d like to add support for is ARM64 Windows 10 systems.\nIf you have expertise and would like to help,\nwe’re coordinating work on \u003ca href=\"/issue/36439\"\u003egolang.org/issue/36439\u003c/a\u003e.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-12-17T00:00:00Z",
  "Author": "Russ Cox"
}