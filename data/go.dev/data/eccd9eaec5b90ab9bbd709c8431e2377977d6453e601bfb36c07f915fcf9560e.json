{
  "Source": "go.dev",
  "Title": "Proposals for Go 1.15",
  "Link": "https://go.dev/blog/go1.15-proposals",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/go1.15-proposals\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eProposals for Go 1.15\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Robert Griesemer, for the Go team\u003cbr/\u003e\n      28 January 2020\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"status\"\u003eStatus\u003c/h2\u003e\n\u003cp\u003eWe are close to the Go 1.14 release, planned for February assuming all goes\nwell, with an RC1 candidate almost ready. Per the process outlined in the\n\u003ca href=\"/blog/go2-here-we-come\"\u003eGo 2, here we come!\u003c/a\u003e blog post,\nit is again the time in our development and release cycle to consider if and\nwhat language or library changes we might want to include for our next release,\nGo 1.15, scheduled for August of this year.\u003c/p\u003e\n\u003cp\u003eThe primary goals for Go remain package and version management, better error\nhandling support, and generics. Module support is in good shape and getting\nbetter with each day, and we are also making progress on the generics front\n(more on that later this year). Our attempt seven months ago at providing a\nbetter error handling mechanism, the\n\u003ca href=\"/issue/32437\"\u003e\u003ccode\u003etry\u003c/code\u003e proposal\u003c/a\u003e, met good support\nbut also strong opposition and we decided to abandon it. In its aftermath there\nwere many follow-up proposals, but none of them seemed convincing enough,\nclearly superior to the \u003ccode\u003etry\u003c/code\u003e proposal, or less likely to cause similar\ncontroversy. Thus, we have not further pursued changes to error handling\nfor now. Perhaps some future insight will help us to improve upon the status\nquo.\u003c/p\u003e\n\u003ch2 id=\"proposals\"\u003eProposals\u003c/h2\u003e\n\u003cp\u003eGiven that modules and generics are actively being worked on, and with error\nhandling changes out of the way for the time being, what other changes should\nwe pursue, if any? There are some perennial favorites such as requests for\nenums and immutable types, but none of those ideas are sufficiently developed\nyet, nor are they urgent enough to warrant a lot of attention by the Go team,\nespecially when also considering the cost of making a language change.\u003c/p\u003e\n\u003cp\u003eAfter reviewing all potentially viable proposals, and more importantly, because\nwe don’t want to incrementally add new features without a long-term plan, we\nconcluded that it is better to hold off with major changes this time. Instead\nwe concentrate on a couple of new \u003ccode\u003evet\u003c/code\u003e checks and a minor adjustment to the\nlanguage. We have selected the following three proposals:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/32479\"\u003e#32479\u003c/a\u003e.\nDiagnose \u003ccode\u003estring(int)\u003c/code\u003e conversion in \u003ccode\u003ego vet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWe were planning to get this done for the upcoming Go 1.14 release but we didn’t\nget around to it, so here it is again. The \u003ccode\u003estring(int)\u003c/code\u003e conversion was introduced\nearly in Go for convenience, but it is confusing to newcomers (\u003ccode\u003estring(10)\u003c/code\u003e is\n\u003ccode\u003e\u0026#34;\\n\u0026#34;\u003c/code\u003e not \u003ccode\u003e\u0026#34;10\u0026#34;\u003c/code\u003e) and not justified anymore now that the conversion is available\nin the \u003ccode\u003eunicode/utf8\u003c/code\u003e package.\nSince \u003ca href=\"/issue/3939\"\u003eremoving this conversion\u003c/a\u003e is\nnot a backwards-compatible change, we propose to start with a \u003ccode\u003evet\u003c/code\u003e error instead.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/4483\"\u003e#4483\u003c/a\u003e.\nDiagnose impossible interface-interface type assertions in \u003ccode\u003ego vet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eCurrently, Go permits any type assertion \u003ccode\u003ex.(T)\u003c/code\u003e (and corresponding type switch case)\nwhere the type of \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003eT\u003c/code\u003e are interfaces. Yet, if both \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003eT\u003c/code\u003e have a method\nwith the same name but different signatures it is impossible for any value assigned\nto \u003ccode\u003ex\u003c/code\u003e to also implement \u003ccode\u003eT\u003c/code\u003e; such type assertions will always fail at runtime\n(panic or evaluate to \u003ccode\u003efalse\u003c/code\u003e). Since we know this at compile time, the compiler\nmight as well report an error. Reporting a compiler error in this case is not a\nbackwards-compatible change, thus we also propose to start with a \u003ccode\u003evet\u003c/code\u003e error\ninstead.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/issue/28591\"\u003e#28591\u003c/a\u003e.\nConstant-evaluate index and slice expressions with constant strings and indices.\u003c/p\u003e\n\u003cp\u003eCurrently, indexing or slicing a constant string with a constant index, or indices,\nproduces a non-constant \u003ccode\u003ebyte\u003c/code\u003e or \u003ccode\u003estring\u003c/code\u003e value, respectively. But if all operands\nare constant, the compiler can constant-evaluate such expressions and produce a\nconstant (possibly untyped) result. This is a fully backward-compatible change\nand we propose to make the necessary adjustments to the spec and compilers.\u003c/p\u003e\n\u003cp\u003e(Correction: We found out after posting that this change is not backward-compatible;\nsee \u003ca href=\"/issue/28591#issuecomment-579993684\"\u003ecomment\u003c/a\u003e for details.)\u003c/p\u003e\n\u003ch2 id=\"timeline\"\u003eTimeline\u003c/h2\u003e\n\u003cp\u003eWe believe that none of these three proposals are controversial but there’s\nalways a chance that we missed something important. For that reason we plan\nto have the proposals implemented at the beginning of the Go 1.15 release cycle\n(at or shortly after the Go 1.14 release) so that there is plenty of time to\ngather experience and provide feedback. Per the\n\u003ca href=\"/blog/go2-here-we-come\"\u003eproposal evaluation process\u003c/a\u003e,\nthe final decision will be made at the end of the development cycle, at the\nbeginning of May, 2020.\u003c/p\u003e\n\u003ch2 id=\"and-one-more-thing\"\u003eAnd one more thing…\u003c/h2\u003e\n\u003cp\u003eWe receive many more language change proposals\n(\u003ca href=\"https://github.com/golang/go/labels/LanguageChange\" rel=\"noreferrer\" target=\"_blank\"\u003eissues labeled LanguageChange\u003c/a\u003e)\nthan we can review thoroughly. For instance, just for error handling alone,\nthere are 57 issues, of which five are currently still open. Since the cost\nof making a language change, no matter how small, is high and the benefits\nare often unclear, we must err on the side of caution. Consequently, most\nlanguage change proposals get rejected sooner or later, sometimes with minimal\nfeedback. This is unsatisfactory for all parties involved. If you have spent a\nlot of time and effort outlining your idea in detail, it would be nice to not\nhave it immediately rejected. On the flip side, because the general\n\u003ca href=\"https://github.com/golang/proposal/blob/master/README.md\" rel=\"noreferrer\" target=\"_blank\"\u003eproposal process\u003c/a\u003e\nis deliberately simple, it is very easy to create language change proposals\nthat are only marginally explored, causing the review committee significant\namounts of work. To improve this experience for everybody we are adding a new\n\u003ca href=\"https://github.com/golang/proposal/blob/master/go2-language-changes.md\" rel=\"noreferrer\" target=\"_blank\"\u003equestionnaire\u003c/a\u003e\nfor language changes: filling out that template will help reviewers evaluate\nproposals more efficiently because they don’t need to try to answer those\nquestions themselves. And hopefully it will also provide better guidance for\nproposers by setting expectations right from the start. This is an experiment\nthat we will refine over time as needed.\u003c/p\u003e\n\u003cp\u003eThank you for helping us improve the Go experience!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-01-28T00:00:00Z",
  "Author": "Robert Griesemer, for the Go team"
}