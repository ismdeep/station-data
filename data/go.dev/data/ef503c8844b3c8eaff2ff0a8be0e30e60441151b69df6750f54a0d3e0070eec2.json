{
  "Source": "go.dev",
  "Title": "A Proposal for Adding Generics to Go",
  "Link": "https://go.dev/blog/generics-proposal",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/generics-proposal\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eA Proposal for Adding Generics to Go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Ian Lance Taylor\u003cbr/\u003e\n      12 January 2021\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"generics-proposal\"\u003eGenerics proposal\u003c/h2\u003e\n\u003cp\u003eWe’ve filed \u003ca href=\"/issue/43651\"\u003ea Go language change\nproposal\u003c/a\u003e to add support for type\nparameters for types and functions, permitting a form of generic\nprogramming.\u003c/p\u003e\n\u003ch2 id=\"why-generics\"\u003eWhy generics?\u003c/h2\u003e\n\u003cp\u003eGenerics can give us powerful building blocks that let us share code\nand build programs more easily.\nGeneric programming means writing functions and data structures where\nsome types are left to be specified later.\nFor example, you can write a function that operates on a slice of some\narbitrary data type, where the actual data type is only specified when\nthe function is called.\nOr, you can define a data structure that stores values of any type,\nwhere the actual type to be stored is specified when you create an\ninstance of the data structure.\u003c/p\u003e\n\u003cp\u003eSince Go was first released in 2009, support for generics has been one\nof the most commonly requested language features.\nYou can read more about why generics are useful in\n\u003ca href=\"/blog/why-generics\"\u003ean earlier blog post\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAlthough generics have clear use cases, fitting them cleanly into a\nlanguage like Go is a difficult task.\nOne of the \u003ca href=\"/design/15292/2010-06-type-functions\"\u003efirst (flawed) attempts to add generics to\nGo\u003c/a\u003e dates back\nall the way to 2010.\nThere have been several others over the last decade.\u003c/p\u003e\n\u003cp\u003eFor the last couple of years we’ve been working on a series of design\ndrafts that have culminated in \u003ca href=\"/design/go2draft-type-parameters\"\u003ea design based on type\nparameters\u003c/a\u003e.\nThis design draft has had a lot of input from the Go programming\ncommunity, and many people have experimented with it using the\n\u003ca href=\"https://go2goplay.golang.org\" rel=\"noreferrer\" target=\"_blank\"\u003egenerics playground\u003c/a\u003e described in \u003ca href=\"/blog/generics-next-step\"\u003ean\nearlier blog post\u003c/a\u003e.\nIan Lance Taylor gave \u003ca href=\"https://www.youtube.com/watch?v=WzgLqE-3IhY\" rel=\"noreferrer\" target=\"_blank\"\u003ea talk at GopherCon\n2019\u003c/a\u003e\nabout why to add generics and the strategy we are now following.\nRobert Griesemer gave \u003ca href=\"https://www.youtube.com/watch?v=TborQFPY2IM\" rel=\"noreferrer\" target=\"_blank\"\u003ea follow-up talk about changes in the design,\nand the implementation, at GopherCon\n2020\u003c/a\u003e.\nThe language changes are fully backward compatible, so existing Go\nprograms will continue to work exactly as they do today.\nWe have reached the point where we think that the design draft is good\nenough, and simple enough, to propose adding it to Go.\u003c/p\u003e\n\u003ch2 id=\"what-happens-now\"\u003eWhat happens now?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"/s/proposal\"\u003elanguage change proposal process\u003c/a\u003e\nis how we make changes to the Go language.\nWe have now \u003ca href=\"/issue/43651\"\u003estarted this process\u003c/a\u003e\nto add generics to a future version of Go.\nWe invite substantive criticisms and comments, but please try to avoid\nrepeating earlier comments, and please try to \u003ca href=\"/wiki/NoPlusOne\"\u003eavoid simple plus-one\nand minus-one comments\u003c/a\u003e.\nInstead, add thumbs-up/thumbs-down emoji reactions to comments with\nwhich you agree or disagree, or to the proposal as a whole.\u003c/p\u003e\n\u003cp\u003eAs with all language change proposals, our goal is to drive toward a\nconsensus to either add generics to the language or let the proposal\ndrop.\nWe understand that for a change of this magnitude it will be\nimpossible to make everybody in the Go community happy, but we intend\nto get to a decision that everybody is willing to accept.\u003c/p\u003e\n\u003cp\u003eIf the proposal is accepted, our goal will be to have a complete,\nthough perhaps not fully optimized, implementation for people to try\nby the end of the year, perhaps as part of the Go 1.18 betas.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-01-12T00:00:00Z",
  "Author": "Ian Lance Taylor"
}