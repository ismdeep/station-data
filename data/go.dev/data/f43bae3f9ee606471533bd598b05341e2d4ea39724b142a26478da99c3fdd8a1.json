{
  "Source": "go.dev",
  "Title": "Go 2018 Survey Results",
  "Link": "https://go.dev/blog/survey2018-results",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/survey2018-results\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo 2018 Survey Results\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Todd Kulesza, Steve Francia\u003cbr/\u003e\n      28 March 2019\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"thank-you\"\u003eThank you\u003c/h2\u003e\n\u003cstyle\u003e\n    p.note {\n        font-size: 0.80em;\n        font-family: \"Helvetica Neue\", Arial, sans-serif;  \n    }\n\u003c/style\u003e\n\u003cp\u003eThis post summarizes the results of our 2018 user survey and draws comparisons\nbetween the results of our prior surveys from \u003ca href=\"/blog/survey2016-results\"\u003e2016\u003c/a\u003e\nand \u003ca href=\"/blog/survey2017-results\"\u003e2017\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis year we had 5,883 survey respondents from 103 different countries.\nWe are grateful to everyone who provided their feedback through this survey\nto help shape the future of Go. Thank you!\u003c/p\u003e\n\u003ch2 id=\"summary-of-findings\"\u003eSummary of findings\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFor the first time, \u003cstrong\u003ehalf of survey respondents are now using Go as part of their daily routine\u003c/strong\u003e.\nThis year also saw significant increases in the number of respondents who\ndevelop in Go as part of their jobs and use Go outside of work responsibilities.\u003c/li\u003e\n\u003cli\u003eThe most \u003cstrong\u003ecommon uses for Go remain API/RPC services and CLI tools\u003c/strong\u003e.\nAutomation tasks, while not as common as CLI tools and API services,\nare a fast-growing area for Go.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWeb development remains the most common domain\u003c/strong\u003e that survey respondents work in,\nbut \u003cstrong\u003eDevOps showed the highest year-over-year growth\u003c/strong\u003e and is now the second most common domain.\u003c/li\u003e\n\u003cli\u003eA large majority of survey respondents said \u003cstrong\u003eGo is their most-preferred programming language\u003c/strong\u003e,\ndespite generally feeling less proficient with it than at least one other language.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVS Code and GoLand are surging in popularity\u003c/strong\u003e and are now the most popular code editors among survey respondents.\u003c/li\u003e\n\u003cli\u003eHighlighting the portable nature of Go,\n\u003cstrong\u003emany Go developers use more than one primary OS\u003c/strong\u003e for development.\nLinux and macOS are particularly popular,\nwith a large majority of survey respondents using one or both of these operating\nsystems to write Go code.\u003c/li\u003e\n\u003cli\u003eSurvey respondents appear to be \u003cstrong\u003eshifting away from on-prem Go deployments\u003c/strong\u003e\nand moving towards containers and serverless cloud deployments.\u003c/li\u003e\n\u003cli\u003eThe majority of respondents said they feel welcome in the Go community,\nand most ideas for improving the Go community specifically focus on \u003cstrong\u003eimproving the experience of newcomers\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRead on for all of the details.\u003c/p\u003e\n\u003ch2 id=\"programming-background\"\u003eProgramming background\u003c/h2\u003e\n\u003cp\u003eThis year’s results show a significant increase in the number of survey\nrespondents who are paid to write Go as part of their jobs (68% → 72%),\ncontinuing a year-over-year trend that has been growing since our first survey in 2016.\nWe also see an increase in the number of respondents who program in Go outside\nof work (64% → 70%).\nFor the first time, the number of survey respondents who write in Go as\npart of their daily routine reached 50% (up from 44% in 2016).\nThese findings suggest companies are continuing to embrace Go for professional\nsoftware development at a consistent pace,\nand that Go’s general popularity with developers remains strong.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig1.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig2.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eTo better understand where developers use Go,\nwe broke responses down into three groups:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003epeople who are using Go both in and outside of work,\u003c/li\u003e\n\u003cli\u003epeople who use Go professionally but not outside of work,\nand 3) people who only write Go outside of their job responsibilities.\nNearly half (46%) of respondents write Go code both professionally and on\ntheir own time (a 10-point increase since 2017),\nwhile the remaining respondents are closely split between either only writing Go at work,\nor only writing Go outside of work.\nThe large percentage of respondents who both use Go at work and choose to\nuse it outside of work suggests that the language appeals to developers\nwho do not view software engineering as a day job:\nthey also choose to hack on code outside of work responsibilities,\nand (as evidenced by 85% of respondents saying they’d prefer Go for their next project,\nsee section \u003cem\u003eAttitudes towards Go\u003c/em\u003e below) Go is the top language they’d\nprefer to use for these non-work-related projects.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig4.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eWhen asked how long they’ve been using Go,\nparticipants’ answers are strongly trending upward over time,\nwith a higher percentage of responses in the 2-4 and 4+ year buckets each year.\nThis is expected for a newer programming language,\nand we’re glad to see that the percentage of respondents who are new to\nGo is dropping more slowly than the percentage of respondents who have been\nusing Go for 2+ years is increasing,\nas this suggests that developers are not dropping out of the ecosystem after\ninitially learning the language.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig5.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eAs in prior years, Go ranks at the top of respondents’ preferred languages\nand languages in which they have expertise.\nA majority of respondents (69%) claimed expertise in 5 different languages,\nhighlighting that their attitudes towards Go are influenced by experiences\nwith other programming stacks.\nThe charts below are sorted by the number of respondents who ranked each\nlanguage as their most preferred/understood (the darkest blue bars),\nwhich highlights three interesting bits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhile about ⅓ of respondents consider Go to be the language in which\nthey have the most expertise,\ntwice that many respondents consider it their most preferred programming language.\nSo even though many respondents feel they haven’t become as proficient with\nGo as with some other language,\nthey still frequently prefer to develop with Go.\u003c/li\u003e\n\u003cli\u003eFew survey respondents rank Rust as a language in which they have expertise (6.8%),\nyet 19% rank it as a top preferred language,\nindicating a high level of interest in Rust among this audience.\u003c/li\u003e\n\u003cli\u003eOnly three languages have more respondents who say they prefer the language\nthan say they have expertise with it:\nRust (2.41:1 ratio of preference:expertise),\nKotlin (1.95:1), and Go (1.02:1).\nHigher preference than expertise implies interest—but little direct experience—in a language,\nwhile lower preference than expertise numbers suggests barriers to proficient use.\nRatios near 1.0 suggest that most developers are able to work effectively\n\u003cem\u003eand\u003c/em\u003e enjoyably with a given language.\nThis data is corroborated by \u003ca href=\"https://insights.stackoverflow.com/survey/2018/#most-loved-dreaded-and-wanted\" rel=\"noreferrer\" target=\"_blank\"\u003eStack Overflow’s 2018 developer survey\u003c/a\u003e,\nwhich also found Rust, Kotlin, and Go to be among the most-preferred programming languages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig6.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig7.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp class=\"note\"\u003e\n    \u003ci\u003eReading the data\u003c/i\u003e: Participants could rank their top 5 languages. The color coding starts with dark blue for the top rank and lightens for each successive rank. These charts are sorted by the percentage of participants who ranked each language as their top choice.\n\u003c/p\u003e\n\u003ch2 id=\"development-domains\"\u003eDevelopment domains\u003c/h2\u003e\n\u003cp\u003eSurvey respondents reported working on a median of three different domains,\nwith a large majority (72%) working in 2-5 different areas.\nWeb development is the most prevalent at 65%,\nand it increased its dominance as the primary area survey respondents work\nin (up from 61% last year):\nweb development has been the most common domain for Go development since 2016.\nThis year DevOps noticeably increased, from 36% to 41% of respondents,\ntaking over the number two spot from Systems Programming.\nWe did not find any domains with lower usage in 2018 than in 2017,\nsuggesting that respondents are adopting Go for a wider variety of projects,\nrather than shifting usage from one domain to another.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig8.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eSince 2016, the top two uses of Go have been writing API/RPC services and\ndeveloping CLI applications.\nWhile CLI usage has remained stable at 63% for three years,\nAPI/RPC usage has increased from 60% in 2016 to 65% in 2017 to 73% today.\nThese domains play to core strengths of Go and are both central to cloud-native\nsoftware development,\nso we expect them to remain two of the primary scenarios for Go developers into the future.\nThe percentage of respondents who write web services that directly return\nHTML has steadily dropped while API/RPC usage has increased,\nsuggesting some migration to the API/RPC model for web services.\nAnother year-over-year trend suggests that automation is also a growing area for Go,\nwith 38% of respondents now using Go for scripts and automation tasks (up from 31% in 2016).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig9.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eTo better understand the contexts in which developers are using Go,\nwe added a question about Go adoption across different industries.\nPerhaps unsurprisingly for a relatively new language,\nover half of survey respondents work in companies in the \u003cem\u003eInternet/web services\u003c/em\u003e\nand \u003cem\u003eSoftware\u003c/em\u003e categories (i.e., tech companies).\nThe only other industries with \u0026gt;3% responses were \u003cem\u003eFinance, banking, or insurance\u003c/em\u003e\nand \u003cem\u003eMedia, advertising, publishing, or entertainment\u003c/em\u003e.\n(In the chart below, we’ve condensed all of the categories with response\nrates below 3% into the “Other” category.) We’ll continue tracking Go’s\nadoption across industries to better understand developer needs outside\nof technology companies.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig10.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"attitudes-towards-go\"\u003eAttitudes towards Go\u003c/h2\u003e\n\u003cp\u003eThis year we added a question asking “How likely are you to recommend Go\nto a friend or colleague?” to calculate our \u003ca href=\"https://en.wikipedia.org/wiki/Net_Promoter\" rel=\"noreferrer\" target=\"_blank\"\u003eNet Promoter Score\u003c/a\u003e.\nThis score attempts to measure how many more “promoters” a product has than\n“detractors” and ranges from -100 to 100;\na positive value suggests most people are likely to recommend using a product,\nwhile negative values suggest most people are likely to recommend against using it.\nOur 2018 score is 61 (68% promoters - 7% detractors) and will serve as a\nbaseline to help us gauge community sentiment towards the Go ecosystem over time.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig11.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eIn addition to NPS, we asked several questions about developer satisfaction with Go.\nOverall, survey respondents indicated a high level of satisfaction,\nconsistent with prior years.\nLarge majorities say they are happy with Go (89%),\nwould prefer to use Go for their next project (85%),\nand feel that it is working well for their team (66%),\nwhile a plurality feel that Go is at least somewhat critical to their company’s success (44%).\nWhile all of these metrics showed an increase in 2017,\nthey remained mostly stable this year.\n(The wording of the first question changed in 2018 from “\u003cem\u003eI would recommend using Go to others\u003c/em\u003e”\nto “\u003cem\u003eOverall, I’m happy with Go\u003c/em\u003e”,\nso those results are not directly comparable.)\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig12.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eGiven the strong sentiment towards preferring Go for future development,\nwe want to understand what prevents developers from doing so.\nThese remained largely unchanged since last year:\nabout ½ of survey respondents work on existing projects written in other languages,\nand ⅓ work on a team or project that prefers to use a different language.\nMissing language features and libraries round out the most common reasons\nrespondents did not use Go more.\nWe also asked about the biggest challenges developers face while using Go;\nunlike most of our survey questions, respondents could type in anything\nthey wished to answer this question.\nWe analyzed the results via machine learning to identify common themes and\ncounting the number of responses that supported each theme.\nThe top three major challenges we identified are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePackage management (e.g., “Keeping up with vendoring”,\n“dependency / packet [sic] management / vendoring not unified”)\u003c/li\u003e\n\u003cli\u003eDifferences from more familiar programming languages (e.g.,\n“syntax close to C-languages with slightly different semantics makes me\nlook up references somewhat more than I’d like”,\n“coworkers who come from non-Go backgrounds trying to use Go as a version\nof their previous language but with channels and Goroutines”)\u003c/li\u003e\n\u003cli\u003eLack of generics (e.g., “Lack of generics makes it difficult to persuade\npeople who have not tried Go that they would find it efficient.”,\n“Hard to build richer abstractions (want generics)”)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig13.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig14.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThis year we added several questions about developer satisfaction with different aspects of Go.\nSurvey respondents were very satisfied with Go applications’ CPU performance (46:1,\nmeaning 46 respondents said they were satisfied for every 1 respondent who\nsaid they were not satisfied),\nbuild speed (37:1), and application memory utilization (32:1).\nResponses for application debuggability (3.2:1)  and binary size (6.4:1),\nhowever, suggest room for improvement.\u003c/p\u003e\n\u003cp\u003eThe dissatisfaction with binary size largely comes from developers building CLIs,\nonly 30% of whom are satisfied with the size of Go’s generated binaries.\nFor all other types of applications, however,\ndeveloper satisfaction was \u0026gt; 50%, and binary size was consistently ranked\nat the bottom of the list of important factors.\u003c/p\u003e\n\u003cp\u003eDebuggability, conversely, stands out when we look at how respondents ranked\nthe importance of each aspect;\n44% of respondents ranked debuggability as their most or second-most important aspect,\nbut only 36% were satisfied with the current state of Go debugging.\nDebuggability was consistently rated about as important as memory usage\nand build speed but with significantly lower satisfaction levels,\nand this pattern held true regardless of the type of software respondents were building.\nThe two most recent Go releases, Go 1.11 and 1.12,\nboth contained significant improvements to debuggability.\nWe plan to investigate how developers debug Go applications in more depth this year,\nwith a goal of improving the overall debugging experience for Go developers.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig15.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig29.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"development-environments\"\u003eDevelopment environments\u003c/h2\u003e\n\u003cp\u003eWe asked respondents which operating systems they primarily use when writing Go code.\nA majority (65%) of respondents said they use Linux,\n50% use macOS, and 18% use Windows, consistent with last year.\nThis year we also looked at how many respondents develop on multiple OSes vs. a single OS.\nLinux and macOS remain the clear leaders,\nwith 81% of respondents developing on some mix of these two systems.\nOnly 3% of respondents evenly split their time between all three OSes.\nOverall, 41% of respondents use multiple operating systems for Go development,\nhighlighting the cross-platform nature of Go.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig16.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eLast year, VS Code edged out Vim as the most popular Go editor among survey respondents.\nThis year it significantly expanded its lead to become the preferred editor\nfor over ⅓ of our survey respondents (up from 27% last year).\nGoLand also experienced strong growth and is now the second most-preferred editor at 22%,\nswapping places with Vim (down to 17%).\nThe surging popularity of VS Code and GoLand appear to be coming at the\nexpense of Sublime Text and Atom.\nVim also saw the number of respondents ranking it their top choice drop,\nbut it remains the most popular second-choice editor at 14%.\nInterestingly, we found no differences in the level of satisfaction respondents\nreported for their editor(s) of choice.\u003c/p\u003e\n\u003cp\u003eWe also asked respondents what would most improve Go support in their preferred editor.\nLike the “biggest challenge” question above,\nparticipants could write in their own response rather than select from a\nmultiple-choice list.\nA thematic analysis on the responses revealed that \u003cem\u003eimproved debugging support\u003c/em\u003e (e.g.,\n“Live debugging”, “Integrated debugging”,\n“Even better debugging”) was the most-common request,\nfollowed by \u003cem\u003eimproved code completion\u003c/em\u003e (e.g.,\n“autocomplete performance and quality”, “smarter autocomplete”).\nOther requests include better integration with Go’s CLI toolchain,\nbetter support for modules/packages, and general performance improvements.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig17.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig18.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThis year we also added a question asking which deployment architectures\nare most important to Go developers.\nUnsurprisingly, survey respondents overwhelmingly view x86/x86-64 as their\ntop deployment platform (76% of respondents listed it as their most important\ndeployment architecture,\nand 84% had it in their top 3).\nThe ranking of the second- and third-choice architectures,\nhowever, is informative:\nthere is significant interest in ARM64 (45%),\nWebAssembly (30%), and ARM (22%), but very little interest in other platforms.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig19.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"deployments-and-services\"\u003eDeployments and services\u003c/h2\u003e\n\u003cp\u003eFor 2018 we see a continuation of the trend from on-prem to cloud hosting\nfor both Go and non-Go deployments.\nThe percentage of survey respondents who deploy Go applications to on-prem\nservers dropped from 43% → 32%,\nmirroring the 46% → 36% drop reported for non-Go deployments.\nThe cloud services which saw the highest year-over-year growth include AWS\nLambda (4% → 11% for Go,\n10% → 15% non-Go) and Google Kubernetes Engine (8% → 12% for Go,\n5% → 10% non-Go), suggesting that serverless and containers are becoming\nincreasingly popular deployment platforms.\nThis service growth appears to be driven by respondents who had already\nadopted cloud services,\nhowever, as we found no meaningful growth in the percentage of respondents\nwho deploy to at least one cloud service this year (55% → 56%).\nWe also see steady growth in Go deployments to GCP since 2016,\nincreasing from 12% → 19% of respondents.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig20.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003ePerhaps correlated with the decrease in on-prem deployments,\nthis year we saw cloud storage become the second-most used service by survey respondents,\nincreasing from 32% → 44%.\nAuthentication \u0026amp; federation services also saw a significant increase (26% → 33%).\nThe primary service survey respondents access from Go remains open-source\nrelational databases,\nwhich ticked up from 61% → 65% of respondents.\nAs the below chart shows, service usage increased across the board.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig21.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"go-community\"\u003eGo community\u003c/h2\u003e\n\u003cp\u003eThe top community sources for finding answers to Go questions continue to\nbe Stack Overflow (23% of respondents marked it as their top source),\nGo web sites (18% for godoc.org, 14% for golang.org),\nand reading source code (8% for source code generally,\n4% for GitHub specifically).\nThe order remains largely consistent with prior years.\nThe primary sources for Go news remain the Go blog,\nReddit’s r/golang, Twitter, and Hacker News.\nThese were also the primary distribution methods for this survey,\nhowever, so there is likely some bias in this result.\nIn the two charts below, we’ve grouped sources used by less than \u0026lt; 5% of\nrespondents into the “Other” category.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig24.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig25.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eThis year, 55% of survey respondents said they have or are interested in\ncontributing to the Go community,\nslightly down from 59% last year.\nBecause the two most common areas for contribution (the standard library\nand official Go tools) require interacting with the core Go team,\nwe suspect this decrease may be related to a dip in the percentage of participants\nwho agreed with the statements “I feel comfortable approaching the Go project\nleadership with questions and feedback” (30% → 25%) and “I am confident\nin the leadership of Go (54% → 46%).\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig26.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig27.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eAn important aspect of community is helping everyone feel welcome,\nespecially people from traditionally under-represented demographics.\nTo better understand this, we asked an optional question about identification\nacross several under-represented groups.\nIn 2017 we saw year-over-year increases across the board.\nFor 2018, we saw a similar percentage of respondents (12%) identify as part\nof an under-represented group,\nand this was paired with a significant decrease in the percentage of respondents\nwho do \u003cstrong\u003enot\u003c/strong\u003e identify as part of an under-represented group.\nIn 2017, for every person who identified as part of an under-represented group,\n3.5 people identified as not part of an under-represented group (3.5:1 ratio).\nIn 2018 that ratio improved to 3.08:1. This suggests that the Go community\nis at least retaining the same proportions of under-represented members,\nand may even be increasing.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig28.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eMaintaining a healthy community is extremely important to the Go project,\nso for the past three years we’ve been measuring the extent to which developers\nfeel welcome in the Go community.\nThis year we saw a drop in the percentage of survey respondents who agree\nwith the statement “I feel welcome in the Go community”, from 66% → 59%.\u003c/p\u003e\n\u003cp\u003eTo better understand this decrease, we looked more closely at who reported\nfeeling less welcome.\nAmong traditionally under-represented groups,\nfewer people reported feeling unwelcome in 2018,\nsuggesting that outreach in that area has been helpful.\nInstead, we found a linear relationship between the length of time someone\nhas used Go and how welcome they feel:\nnewer Go developers felt significantly less welcome (at 50%) than developers\nwith 1-2 years of experience (62%),\nwho in turn felt less welcome than developers with a few years of experience (73%).\nThis interpretation of the data is supported by responses to the question\n“What changes would make the Go community more welcoming?”.\nRespondents’ comments can be broadly grouped into four categories:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReduce a perception of elitism, especially for newcomers to Go (e.g.,\n“less dismissiveness”, “Less defensiveness and hubris”)\u003c/li\u003e\n\u003cli\u003eIncrease transparency at the leadership level (e.g.,\n“Future direction and planning discussions”,\n“Less top down leadership”, “More democratic”)\u003c/li\u003e\n\u003cli\u003eIncrease introductory resources (e.g., “A more clear introduction for contributors”,\n“Fun challenges to learn best practices”)\u003c/li\u003e\n\u003cli\u003eMore events and meetups, with a focus on covering a larger geographic area (e.g.,\n“More meetups \u0026amp; social events”, “Events in more cities”)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis feedback is very helpful and gives us concrete areas we can focus on\nto improve the experience of being a Go developer.\nWhile it doesn’t represent a large percentage of our user base,\nwe take this feedback very seriously and are working on improving each area.\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig22.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"survey2018/fig23.svg\" width=\"600\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWe hope you’ve enjoyed seeing the results of our 2018 developer survey.\nThese results are impacting our 2019 planning,\nand in the coming months we’ll share some ideas with you to address specific\nissues and needs the community has highlighted for us.\nOnce again, thank you to everyone who contributed to this survey!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-03-28T00:00:00Z",
  "Author": "Todd Kulesza, Steve Francia"
}