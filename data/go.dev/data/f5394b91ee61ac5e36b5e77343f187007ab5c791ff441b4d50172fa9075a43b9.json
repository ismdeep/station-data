{
  "Source": "go.dev",
  "Title": "Godoc: documenting Go code",
  "Link": "https://go.dev/blog/godoc",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/godoc\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGodoc: documenting Go code\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Andrew Gerrand\u003cbr/\u003e\n      31 March 2011\n      \u003c/p\u003e\n      \n      \u003cp\u003e[\u003cem\u003e\u003cstrong\u003eNote, June 2022\u003c/strong\u003e: For updated guidelines about documenting Go code,\nsee “\u003ca href=\"/doc/comment\"\u003eGo Doc Comments\u003c/a\u003e.”\u003c/em\u003e]\u003c/p\u003e\n\u003cp\u003eThe Go project takes documentation seriously.\nDocumentation is a huge part of making software accessible and maintainable.\nOf course it must be well-written and accurate,\nbut it also must be easy to write and to maintain.\nIdeally, it should be coupled to the code itself so the documentation evolves\nalong with the code.\nThe easier it is for programmers to produce good documentation,\nthe better for everyone.\u003c/p\u003e\n\u003cp\u003eTo that end, we have developed the \u003ca href=\"/cmd/godoc/\"\u003egodoc\u003c/a\u003e documentation tool.\nThis article describes godoc’s approach to documentation,\nand explains how you can use our conventions and tools to write good documentation\nfor your own projects.\u003c/p\u003e\n\u003cp\u003eGodoc parses Go source code - including comments - and produces documentation\nas HTML or plain text.\nThe end result is documentation tightly coupled with the code it documents.\nFor example, through godoc’s web interface you can navigate from a function’s\n\u003ca href=\"/pkg/strings/#HasPrefix\"\u003edocumentation\u003c/a\u003e to its \u003ca href=\"/src/strings/strings.go?s=11163:11200#L434\"\u003eimplementation\u003c/a\u003e with one click.\u003c/p\u003e\n\u003cp\u003eGodoc is conceptually related to Python’s \u003ca href=\"https://www.python.org/dev/peps/pep-0257/\" rel=\"noreferrer\" target=\"_blank\"\u003eDocstring\u003c/a\u003e\nand Java’s \u003ca href=\"https://www.oracle.com/java/technologies/javase/javadoc-tool.html\" rel=\"noreferrer\" target=\"_blank\"\u003eJavadoc\u003c/a\u003e\nbut its design is simpler.\nThe comments read by godoc are not language constructs (as with Docstring)\nnor must they have their own machine-readable syntax (as with Javadoc).\nGodoc comments are just good comments, the sort you would want to read even\nif godoc didn’t exist.\u003c/p\u003e\n\u003cp\u003eThe convention is simple: to document a type,\nvariable, constant, function, or even a package,\nwrite a regular comment directly preceding its declaration,\nwith no intervening blank line.\nGodoc will then present that comment as text alongside the item it documents.\nFor example, this is the documentation for the \u003ccode\u003efmt\u003c/code\u003e package’s \u003ca href=\"/pkg/fmt/#Fprint\"\u003e\u003ccode\u003eFprint\u003c/code\u003e\u003c/a\u003e function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Fprint formats using the default formats for its operands and writes to w.\n// Spaces are added between operands when neither is a string.\n// It returns the number of bytes written and any write error encountered.\nfunc Fprint(w io.Writer, a ...interface{}) (n int, err error) {\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice this comment is a complete sentence that begins with the name of\nthe element it describes.\nThis important convention allows us to generate documentation in a variety of formats,\nfrom plain text to HTML to UNIX man pages,\nand makes it read better when tools truncate it for brevity,\nsuch as when they extract the first line or sentence.\u003c/p\u003e\n\u003cp\u003eComments on package declarations should provide general package documentation.\nThese comments can be short, like the \u003ca href=\"/pkg/sort/\"\u003e\u003ccode\u003esort\u003c/code\u003e\u003c/a\u003e\npackage’s brief description:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Package sort provides primitives for sorting slices and user-defined\n// collections.\npackage sort\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThey can also be detailed like the \u003ca href=\"/pkg/encoding/gob/\"\u003egob package\u003c/a\u003e’s overview.\nThat package uses another convention for packages that need large amounts\nof introductory documentation:\nthe package comment is placed in its own file,\n\u003ca href=\"/src/pkg/encoding/gob/doc.go\"\u003edoc.go\u003c/a\u003e,\nwhich contains only those comments and a package clause.\u003c/p\u003e\n\u003cp\u003eWhen writing a package comment of any size,\nkeep in mind that its \u003ca href=\"/pkg/go/doc/#Package.Synopsis\"\u003efirst sentence\u003c/a\u003e\nwill appear in godoc’s \u003ca href=\"/pkg/\"\u003epackage list\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eComments that are not adjacent to a top-level declaration are omitted from godoc’s output,\nwith one notable exception.\nTop-level comments that begin with the word \u003ccode\u003e\u0026#34;BUG(who)”\u003c/code\u003e are recognized as known bugs,\nand included in the “Bugs” section of the package documentation.\nThe “who” part should be the user name of someone who could provide more information.\nFor example, this is a known issue from the \u003ca href=\"/pkg/bytes/#pkg-note-BUG\"\u003ebytes package\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// BUG(r): The rule Title uses for word boundaries does not handle Unicode punctuation properly.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSometimes a struct field, function, type, or even a whole package becomes\nredundant or unnecessary, but must be kept for compatibility with existing\nprograms.\nTo signal that an identifier should not be used, add a paragraph to its doc\ncomment that begins with “Deprecated:” followed by some information about the\ndeprecation.\u003c/p\u003e\n\u003cp\u003eThere are a few formatting rules that Godoc uses when converting comments to HTML:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eSubsequent lines of text are considered part of the same paragraph;\nyou must leave a blank line to separate paragraphs.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePre-formatted text must be indented relative to the surrounding comment\ntext (see gob’s \u003ca href=\"/src/pkg/encoding/gob/doc.go\"\u003edoc.go\u003c/a\u003e for an example).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eURLs will be converted to HTML links; no special markup is necessary.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that none of these rules requires you to do anything out of the ordinary.\u003c/p\u003e\n\u003cp\u003eIn fact, the best thing about godoc’s minimal approach is how easy it is to use.\nAs a result, a lot of Go code, including all of the standard library,\nalready follows the conventions.\u003c/p\u003e\n\u003cp\u003eYour own code can present good documentation just by having comments as described above.\nAny Go packages installed inside \u003ccode\u003e$GOROOT/src/pkg\u003c/code\u003e and any \u003ccode\u003eGOPATH\u003c/code\u003e work\nspaces will already be accessible via godoc’s command-line and HTTP interfaces,\nand you can specify additional paths for indexing via the \u003ccode\u003e-path\u003c/code\u003e flag or\njust by running \u003ccode\u003e\u0026#34;godoc .\u0026#34;\u003c/code\u003e in the source directory.\nSee the \u003ca href=\"/cmd/godoc/\"\u003egodoc documentation\u003c/a\u003e for more details.\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2011-03-31T00:00:00Z",
  "Author": "Andrew Gerrand"
}