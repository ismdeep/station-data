{
  "Source": "go.dev",
  "Title": "Testable Examples in Go",
  "Link": "https://go.dev/blog/examples",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/examples\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eTestable Examples in Go\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Andrew Gerrand\u003cbr/\u003e\n      7 May 2015\n      \u003c/p\u003e\n      \n      \u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eGodoc \u003ca href=\"/pkg/testing/#hdr-Examples\"\u003eexamples\u003c/a\u003e are snippets of\nGo code that are displayed as package documentation and that are verified by\nrunning them as tests.\nThey can also be run by a user visiting the godoc web page for the package\nand clicking the associated “Run” button.\u003c/p\u003e\n\u003cp\u003eHaving executable documentation for a package guarantees that the information\nwill not go out of date as the API changes.\u003c/p\u003e\n\u003cp\u003eThe standard library includes many such examples\n(see the \u003ca href=\"/pkg/strings/#Contains\"\u003e\u003ccode\u003estrings\u003c/code\u003e package\u003c/a\u003e,\nfor instance).\u003c/p\u003e\n\u003cp\u003eThis article explains how to write your own example functions.\u003c/p\u003e\n\u003ch2 id=\"examples-are-tests\"\u003eExamples are tests\u003c/h2\u003e\n\u003cp\u003eExamples are compiled (and optionally executed) as part of a package’s test\nsuite.\u003c/p\u003e\n\u003cp\u003eAs with typical tests, examples are functions that reside in a package’s\n\u003ccode\u003e_test.go\u003c/code\u003e files.\nUnlike normal test functions, though, example functions take no arguments\nand begin with the word \u003ccode\u003eExample\u003c/code\u003e instead of \u003ccode\u003eTest\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://pkg.go.dev/golang.org/x/example/hello/reverse/\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003ereverse\u003c/code\u003e package\u003c/a\u003e\nis part of the \u003ca href=\"https://cs.opensource.google/go/x/example\" rel=\"noreferrer\" target=\"_blank\"\u003eGo example repository\u003c/a\u003e.\nHere’s an example that demonstrates its \u003ccode\u003eString\u003c/code\u003e function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epackage reverse_test\n\nimport (\n    \u0026#34;fmt\u0026#34;\n\n    \u0026#34;golang.org/x/example/hello/reverse\u0026#34;\n)\n\nfunc ExampleString() {\n    fmt.Println(reverse.String(\u0026#34;hello\u0026#34;))\n    // Output: olleh\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code might live in \u003ccode\u003eexample_test.go\u003c/code\u003e in the \u003ccode\u003ereverse\u003c/code\u003e directory.\u003c/p\u003e\n\u003cp\u003eThe Go package documentation server \u003cem\u003epkg.go.dev\u003c/em\u003e presents this\nexample alongside the \u003ca href=\"https://pkg.go.dev/golang.org/x/example/hello/reverse/#String\" rel=\"noreferrer\" target=\"_blank\"\u003e\u003ccode\u003eString\u003c/code\u003e function’s documentation\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"image\"\u003e\n  \u003cimg src=\"examples/pkgdoc.png\" width=\"517\" alt=\"\"/\u003e\n\u003c/div\u003e\n\u003cp\u003eRunning the package’s test suite, we can see the example function is executed\nwith no further arrangement from us:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go test -v\n=== RUN   TestString\n--- PASS: TestString (0.00s)\n=== RUN   ExampleString\n--- PASS: ExampleString (0.00s)\nPASS\nok      golang.org/x/example/hello/reverse  0.209s\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"output-comments\"\u003eOutput comments\u003c/h2\u003e\n\u003cp\u003eWhat does it mean that the \u003ccode\u003eExampleString\u003c/code\u003e function “passes”?\u003c/p\u003e\n\u003cp\u003eAs it executes the example,\nthe testing framework captures data written to standard output\nand then compares the output against the example’s “Output:” comment.\nThe test passes if the test’s output matches its output comment.\u003c/p\u003e\n\u003cp\u003eTo see a failing example we can change the output comment text to something\nobviously incorrect\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunc ExampleString() {\n    fmt.Println(reverse.String(\u0026#34;hello\u0026#34;))\n    // Output: golly\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand run the tests again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go test\n--- FAIL: ExampleString (0.00s)\ngot:\nolleh\nwant:\ngolly\nFAIL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we remove the output comment entirely\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunc ExampleString() {\n    fmt.Println(reverse.String(\u0026#34;hello\u0026#34;))\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ethen the example function is compiled but not executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ go test -v\n=== RUN   TestString\n--- PASS: TestString (0.00s)\nPASS\nok      golang.org/x/example/hello/reverse  0.110s\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExamples without output comments are useful for demonstrating code that cannot\nrun as unit tests, such as that which accesses the network,\nwhile guaranteeing the example at least compiles.\u003c/p\u003e\n\u003ch2 id=\"example-function-names\"\u003eExample function names\u003c/h2\u003e\n\u003cp\u003eGodoc uses a naming convention to associate an example function with a\npackage-level identifier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunc ExampleFoo()     // documents the Foo function or type\nfunc ExampleBar_Qux() // documents the Qux method of type Bar\nfunc Example()        // documents the package as a whole\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFollowing this convention, godoc displays the \u003ccode\u003eExampleString\u003c/code\u003e example\nalongside the documentation for the \u003ccode\u003eString\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003eMultiple examples can be provided for a given identifier by using a suffix\nbeginning with an underscore followed by a lowercase letter.\nEach of these examples documents the \u003ccode\u003eString\u003c/code\u003e function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunc ExampleString()\nfunc ExampleString_second()\nfunc ExampleString_third()\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"larger-examples\"\u003eLarger examples\u003c/h2\u003e\n\u003cp\u003eSometimes we need more than just a function to write a good example.\u003c/p\u003e\n\u003cp\u003eFor instance, to demonstrate the \u003ca href=\"/pkg/sort/\"\u003e\u003ccode\u003esort\u003c/code\u003e package\u003c/a\u003e\nwe should show an implementation of \u003ccode\u003esort.Interface\u003c/code\u003e.\nSince methods cannot be declared inside a function body, the example must\ninclude some context in addition to the example function.\u003c/p\u003e\n\u003cp\u003eTo achieve this we can use a “whole file example.”\nA whole file example is a file that ends in \u003ccode\u003e_test.go\u003c/code\u003e and contains exactly one\nexample function, no test or benchmark functions, and at least one other\npackage-level declaration.\nWhen displaying such examples godoc will show the entire file.\u003c/p\u003e\n\u003cp\u003eHere is a whole file example from the \u003ccode\u003esort\u003c/code\u003e package:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epackage sort_test\n\nimport (\n    \u0026#34;fmt\u0026#34;\n    \u0026#34;sort\u0026#34;\n)\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) String() string {\n    return fmt.Sprintf(\u0026#34;%s: %d\u0026#34;, p.Name, p.Age)\n}\n\n// ByAge implements sort.Interface for []Person based on\n// the Age field.\ntype ByAge []Person\n\nfunc (a ByAge) Len() int           { return len(a) }\nfunc (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a ByAge) Less(i, j int) bool { return a[i].Age \u0026lt; a[j].Age }\n\nfunc Example() {\n    people := []Person{\n        {\u0026#34;Bob\u0026#34;, 31},\n        {\u0026#34;John\u0026#34;, 42},\n        {\u0026#34;Michael\u0026#34;, 17},\n        {\u0026#34;Jenny\u0026#34;, 26},\n    }\n\n    fmt.Println(people)\n    sort.Sort(ByAge(people))\n    fmt.Println(people)\n\n    // Output:\n    // [Bob: 31 John: 42 Michael: 17 Jenny: 26]\n    // [Michael: 17 Jenny: 26 Bob: 31 John: 42]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA package can contain multiple whole file examples; one example per file.\nTake a look at the \u003ca href=\"/src/sort/\"\u003e\u003ccode\u003esort\u003c/code\u003e package’s source code\u003c/a\u003e\nto see this in practice.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eGodoc examples are a great way to write and maintain code as documentation.\nThey also present editable, working, runnable examples your users can build on.\nUse them!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2015-05-07T00:00:00Z",
  "Author": "Andrew Gerrand"
}