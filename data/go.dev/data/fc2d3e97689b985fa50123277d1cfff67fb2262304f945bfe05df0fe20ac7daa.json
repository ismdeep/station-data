{
  "Source": "go.dev",
  "Title": "Go Developer Survey 2024 H1 Results",
  "Link": "https://go.dev/blog/survey2024-h1-results",
  "Content": "\u003cdiv class=\"Article\" data-slug=\"/blog/survey2024-h1-results\"\u003e\n    \n    \u003ch1 class=\"small\"\u003e\u003ca href=\"/blog/\"\u003eThe Go Blog\u003c/a\u003e\u003c/h1\u003e\n    \n\n    \u003ch1\u003eGo Developer Survey 2024 H1 Results\u003c/h1\u003e\n      \n      \u003cp class=\"author\"\u003e\n      Alice Merrick and Todd Kulesza\u003cbr/\u003e\n      9 April 2024\n      \u003c/p\u003e\n      \n      \u003cstyle type=\"text/css\" scoped=\"\"\u003e\n  .chart {\n    margin-left: 1.5rem;\n    margin-right: 1.5rem;\n    width: 800px;\n  }\n  blockquote p {\n    color: var(--color-text-subtle) !important;\n  }\n\n  .quote_source {\n    font-style: italic;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    .chart {\n      border-radius: 8px;\n    }\n  }\n\u003c/style\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eThis post shares the results of our most recent Go Developer Survey, conducted\nin January and February 2024. Along with capturing sentiments and challenges\naround using Go and Go tooling, our primary focus areas for this survey were\nabout how developers are starting to use Go (or other languages) for\nAI-related use cases, and particular challenges for those who are learning Go\nor looking to expand their Go skill set.\u003c/p\u003e\n\u003cp\u003eWe recruited participants from the Go blog and through randomized prompts in\nthe VS Code Go plug-in. This year, with the help of\n\u003ca href=\"https://jetbrains.com\" rel=\"noreferrer\" target=\"_blank\"\u003eJetBrains\u003c/a\u003e, we also included a randomized survey prompt in the\n\u003ca href=\"https://jetbrains.com/go/\" rel=\"noreferrer\" target=\"_blank\"\u003eGoLand IDE\u003c/a\u003e, allowing us to recruit a more\nrepresentative sample of Go developers. We received a total of 6,224\nresponses! A huge thank you to all those who contributed to making this\npossible.\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eHighlights\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloper sentiment remains high, with 93% of respondents expressing\nsatisfaction with Go over the past year.\u003c/li\u003e\n\u003cli\u003eA majority of respondents (80%) said they trust the Go team to “do what’s\nbest” for developers like themselves when maintaining and evolving the\nlanguage.\u003c/li\u003e\n\u003cli\u003eAmong survey respondents who build AI-powered applications and services,\nthere is a shared sense that Go is a strong platform for running these types\nof applications in production. For example, a majority of respondents\nworking with AI-powered applications already use Go or would like to migrate\nto Go for their AI-powered workloads, and the most serious challenges\ndevelopers encounter are related to the library and documentation ecosystems\nrather than the core language and runtime. That said, the most commonly\ndocumented paths for getting started are currently Python-centric, resulting\nin many organizations starting AI-powered work in Python before moving to a\nmore production-ready language.\u003c/li\u003e\n\u003cli\u003eThe most common kinds of AI-powered services respondents are building\ninclude summarization tools, text generation tools, and chatbots. Responses\nsuggest that many of these use cases are internal-facing, such as chatbots\ntrained upon an organization’s internal documentation and intended to answer\nemployee questions. We hypothesize that organizations are intentionally\nstarting with internal use cases to develop in-house expertise with LLMs\nwhile avoiding potential public embarrassment when AI-powered agents behave\nunexpectedly.\u003c/li\u003e\n\u003cli\u003eLack of time or opportunities was the most commonly cited challenge for\nrespondents to reaching their Go-related learning goals, suggesting that\nlanguage learning is difficult to prioritize without a specific goal or\nbusiness case in mind. The next most common challenge was in learning new\nbest practices, concepts, and idioms that are particular to Go when coming\nfrom other language ecosystems.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"contents\"\u003eContents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#sentiment\"\u003eDeveloper sentiment\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#devenv\"\u003eDeveloper environments\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#priorities\"\u003eResource and performance priorities\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mlai\"\u003eUnderstanding AI use cases for Go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#learn\"\u003eLearning challenges\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#demographics\"\u003eDemographics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#firmographics\"\u003eFirmographics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#methodology\"\u003eMethodology\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#closing\"\u003eClosing\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sentiment\"\u003eDeveloper sentiment\u003c/h2\u003e\n\u003cp\u003eOverall satisfaction remains high in the survey with 93% of respondents saying\nthey were somewhat or very satisfied with Go during the last year. This isn’t\nsurprising, considering our audience is those who have voluntarily taken our\nsurvey. But even among those who were randomly sampled from both VS Code and\nGoLand, we still see comparable rates of satisfaction (92%). Although the\nexact percentages fluctuate slightly from survey to survey, we do not see any\nstatistically significant differences from \u003ca href=\"/blog/survey2023-h2-results\"\u003e2023\nH2\u003c/a\u003e, when the satisfaction rate was\n90%.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/csat.svg\" alt=\"Chart of developer satisfaction with Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"trust\"\u003eTrust\u003c/h3\u003e\n\u003cp\u003eThis year we introduced a new metric for measuring developer trust. This was\nan experimental question and its wording may change over time as we learn more\nabout how respondents interpreted it. Because this is the first time we asked\nthis question, we don’t have previous years to give us context for our\nresults. We found that 80% of respondents somewhat or strongly agree that they\ntrust the Go team to do what’s best for users like them. Respondents with 5 or\nmore years of experience with Go tended to agree more (83%) than those with\nless than 2 years of experience (77%). This could reflect \u003ca href=\"https://en.wikipedia.org/wiki/Survivorship_bias\" rel=\"noreferrer\" target=\"_blank\"\u003esurvivorship\nbias\u003c/a\u003e in that those who trust\nthe Go team more are more likely to continue using Go, or may reflect how\ntrust is calibrated over time.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/trust_go.svg\" alt=\"Chart of developer trust with the Go\nteam\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"community\"\u003eCommunity satisfaction\u003c/h3\u003e\n\u003cp\u003eIn the last year, almost a third of respondents (32%) said they participated\nin the Go developer community either online or at in-person events. More\nexperienced Go developers were more likely to have participated in a community\nevent and were more satisfied with community events overall. Although we can’t\ndraw causal conclusions from this data, we did see a positive correlation\nbetween community satisfaction and overall satisfaction with Go. It could be\nthat participating in the Go community increases satisfaction through\nincreased social interaction or technical support. In general, we also found\nthat respondents with less experience were less likely to have participated in\nevents in the last year. This may mean they haven’t discovered events or found\nopportunities yet to be involved.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/community_events.svg\" alt=\"Chart of participation in\ncommunity events\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/community_sat.svg\" alt=\"Chart of community satisfaction\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"biggestchallenge\"\u003eBiggest challenges\u003c/h3\u003e\n\u003cp\u003eFor several years, this survey has asked participants about their biggest\nchallenge when using Go. This has always been in the form of an open text box\nand has elicited a wide variety of responses. In this cycle we introduced a\nclosed form of the question, where we provided the most common write-in\nresponses from prior years. Respondents were randomly shown either the open or\nclosed forms of the question. The closed form helps us validate how we’ve\nhistorically interpreted these responses, while also increasing the number of\nGo developers we hear from: this year participants who saw the closed form\nwere 2.5x more likely to answer than those who saw the open form. This higher\nnumber of responses narrows our margin of error and increases our confidence\nwhen interpreting survey results.\u003c/p\u003e\n\u003cp\u003eIn the closed-form, only 8% of respondents selected “Other”, which suggests we\ncaptured the majority of common challenges with our response choices.\nInterestingly, 13% of respondents said they don’t face any challenges using\nGo. In the open text version of this question, only 2% of respondents gave\nthis response. The top responses in the closed-form were learning how to write\nGo effectively (15%) and the verbosity of error handling (13%). This matches\nwhat we saw in the open-text form, where 11% of responses mentioned learning\nGo, learning best practices, or issues with documentation as their biggest\nchallenge, and another 11% mentioned error handling.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/biggest_challenge_closed.svg\" alt=\"Chart of closed form\nbiggest challenges using Go\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/text_biggest_challenge.svg\" alt=\"Chart of open text biggest\nchallenges using Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eRespondents who saw the closed form of the question also received a follow-up\nopen-text question to give them an opportunity to tell us more about their\nbiggest challenge in case they had wanted to provide more nuanced answers,\nadditional challenges, or anything else they felt was important.The most\ncommon response mentioned Go’s type system, and often asked specifically for\nenums, option types, or sum types in Go. Often we did not get much context for\nthese requests, but we suspect this is due to some recent proposals and\ncommunity discussions related to enums, an increase in folks coming from other\nlanguage ecosystems where these features are common, or the expectation that\nthese features will reduce writing boilerplate code. One of the more\ncomprehensive comments related to the type system explained as follows:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“These aren’t big challenges, but more conveniences I miss in the language.\nThere’s ways around all of them, but it would be nice not to have to think\nabout it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSum types/closed enums can be emulated but its a lot of faff. It’s a very\nhandy feature to have when interacting with APIs that only have a limited\nset of values for a particular element/field in a response and a value\noutside of it is an error. It helps with validation and catching issues at\nthe point of entry and can often directly be generated from API\nspecifications like JSON Schema, OpenAPI or heaven forbid XML Schema\nDefinitions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI don’t mind the error checking verbosity at all, but the nil-checking with\npointers gets tedious especially when [I] need to drill into a deeply nested\nstruct of pointer fields. Some form of Optional/Result type or an ability to\nchase through a chain of pointers and simply get a nil back instead of\ntriggering a runtime panic would be appreciated.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/text_biggest_challenge_anything.svg\" alt=\"Chart of\nanything else related to biggest challenges using Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"devenv\"\u003eDeveloper environments\u003c/h2\u003e\n\u003cp\u003eAs in previous years, most survey respondents develop with Go on Linux (61%)\nand macOS (58%) systems. Although the numbers haven’t changed much from year\nto year, we did see some interesting differences in our self-selected sample.\nThe randomly sampled groups from JetBrains and VS Code were more likely (31%\nand 33%, respectively) to develop on Windows than the self-selected group\n(19%). We don’t know exactly why the self-selected group is so different, but\nwe hypothesize that, because they likely encountered the survey from reading\nthe Go Blog, these respondents are some of the most engaged and experienced\ndevelopers in the community. Their operating system preferences might be\nreflective of historical priorities of the core development team who typically\ndeveloped on Linux and macOS. Thankfully we have the random samples from\nJetBrains and VS Code to provide a more representative view of developer\npreferences.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/os_dev.svg\" alt=\"Chart of operating systems respondents\nuse when developing Go software\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/os_dev_src.svg\" alt=\"Chart of operating systems respondents\nuse when developing Go software, split by difference sample sources\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/os_dev_exp.svg\" alt=\"Chart of\noperating systems respondents use when developing Go software, split by\nduration of experience\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs a followup for the 17% of respondents who develop on WSL, we asked which\nversion they’re using. 93% of respondents who develop on WSL are using version\n2, so going forward, \u003ca href=\"/issue/63503\"\u003ethe Go team at Microsoft has decided to focus their\nefforts on WSL2.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/wsl_version.svg\" alt=\"Chart of WSL versions usage\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eGiven that two of our sample populations were recruited from within VS Code or\nGoLand, they are strongly biased towards preferring those editors. To avoid\nskewing the results, we show the data here from the self-selected group only.\nSimilar to previous years, the most common code editors among Go Developer\nSurvey respondents continue to be \u003ca href=\"https://code.visualstudio.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eVS Code\u003c/a\u003e\n(43%) and \u003ca href=\"https://www.jetbrains.com/go/\" rel=\"noreferrer\" target=\"_blank\"\u003eGoLand\u003c/a\u003e (33%). We don’t see any\nstatistically significant differences from mid-2023, (44% and 31%,\nrespectively).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/editor.svg\" alt=\"Chart of code editors respondents\nprefer to use with Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWith the prevalence of Go for cloud development and containerized workloads,\nit’s no surprise that Go developers primarily deploy to Linux environments\n(93%). We didn’t see any significant changes from last year.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/os_deploy.svg\" alt=\"Chart of platforms respondents\ndeploy Go software to\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eGo is a popular language for modern cloud-based development, so we typically\ninclude survey questions to help us understand which cloud platforms Go\ndevelopers are using and how satisfied they are with the three most popular\nplatforms: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud. This\nsection was only shown to respondents who said they use Go for their primary\njob, about 76% of total respondents. 98% of those who saw this question work\non Go software that integrates with cloud services. Over half of respondents\nused AWS (52%), while 27% used GCP for their Go development and deployments.\nFor both AWS and Google Cloud, we don’t see any differences between small or\nlarge companies in their likelihood to use either provider. Microsoft Azure is\nthe only cloud provider that is significantly more likely to be used in large\norganizations (companies with \u0026gt; 1,000 employees) than smaller shops. We didn’t\nsee any significant differences in usage based on the size of the organization\nfor any other cloud providers.\u003c/p\u003e\n\u003cp\u003eThe rates of satisfaction for using Go with AWS and Google Cloud were both\n77%. Historically these rates have been about the same. As in previous years,\nthe satisfaction rate for Microsoft Azure was lower (57%).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/cloud_platform.svg\" alt=\"Chart of cloud platforms\nrespondents\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/cloud_sat_aws.svg\" alt=\"Chart of satisfaction with Go on AWS in the last year\" class=\"chart\"/\u003e\n\u003cimg src=\"survey2024h1/cloud_sat_gcp.svg\" alt=\"Chart of satisfaction with\nusing Go on Google Cloud in the last year\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/cloud_sat_azure.svg\" alt=\"Chart of satisfaction with using\nGo on Microsoft Azure in the last year\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"priorities\"\u003eResource and Security Priorities\u003c/h2\u003e\n\u003cp\u003eTo help prioritize the Go team’s work, we wanted to understand the top\nresource cost and security concerns for teams using Go. About half of\nrespondents using Go at work reported having at least one resource cost\nconcern in the last year (52%). The engineering costs of writing and maintaining Go\nservices was more common (28%) than concern for the costs of running Go\nservices (10%) or both about equally (12%). We didn’t see any significant\ndifferences in resource concerns between small and large organizations. To\naddress concerns about resource costs, the Go team is continuing to optimize\nGo and enhance profile-guided optimization (PGO).\u003c/p\u003e\n\u003cimg src=\"survey2024h1/cost_concern.svg\" alt=\"Chart of cost concerns respondents have had related to their Go usage in the last year\" class=\"chart\"/\u003e\n\u003cp\u003eAs for security priorities, we asked respondents to tell us up to three of\ntheir top concerns. Of those who did have security concerns, overall, the top\nconcern was insecure coding practices (42%), followed by system\nmisconfiguration (29%). Our main takeaway is that respondents are especially\ninterested in tooling to help find and fix potential security issues while\nthey’re writing code. This aligns with what we’ve learned from prior research\ninto how developers find and address security vulnerabilities.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/security_concern.svg\" alt=\"Chart of cost concerns\nrespondents have had related Go usage in the last year\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"perf\"\u003ePerformance Tooling\u003c/h3\u003e\n\u003cp\u003eOur goals for this section were to measure how respondents perceive the ease\nor difficulty of diagnosing performance issues and determine whether this task\nis more or less difficult depending on their editor or IDE usage.\nSpecifically, we wanted to know if it’s more difficult to diagnose performance\nissues from the command line, and if we should invest in improving the\nintegration of performance diagnostic tooling within VS Code to make this task\neasier. In our analyses, we show comparisons between respondents who prefer VS\nCode or GoLand to highlight what we learned about the experience of using VS\nCode compared to another common editor.\u003c/p\u003e\n\u003cp\u003eWe first asked a general question about different kinds of tools and\ntechniques respondents use with Go to have some points of comparison. We found\nthat only 40% of respondents use tools to improve code performance or\nefficiency. We didn’t see any significant differences based on editor or IDE\npreference, that is, VS Code users and GoLand users were about equally likely\nto use tools to improve code performance or efficiency.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/dev_techniques.svg\" alt=\"Chart of different techniques\nused for security, quality and performance\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eMost respondents (73%) told us that identifying and addressing performance\nissues is at least moderately important. Again, we didn’t see any significant\ndifferences here between GoLand and VS Code users in how important they found\ndiagnosing performance issues.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/perf_importance.svg\" alt=\"Chart of the importance of\nidentifying and addressing performance issues \" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eOverall, respondents did not find diagnosing performance issues easy, with 30%\nreporting it was somewhat or very difficult and 46% saying it was neither easy\nnor difficult. Contrary to our hypothesis, VS Code users were not more likely\nto report challenges when diagnosing performance issues vs. other respondents.\nThose using their command line for diagnosing performance issues, regardless\nof their preferred editor, also did not report this task as more challenging\nthan those using their IDE. Years of experience was the only significant\nfactor we observed, where less experienced Go developers found it overall more\ndifficult to diagnose performance issues than more experienced Go developers.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/perf_easiness.svg\" alt=\"Chart of how easy or difficult\nrespondents found diagnosing performance issues \" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/perf_easiness_exp.svg\" alt=\"Chart of how easy or difficult\nrespondents found diagnosing performance issues split by duration of\nexperience\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/perf_easiness_where.svg\" alt=\"Chart of how easy or difficult respondents found diagnosing performance\nissues split by where they use performance diagnostic tools \" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo answer our original question, most developers found it difficult to\ndiagnose performance issues in Go, regardless of their preferred editor or\ntooling. This was especially true for developers with less than two years of\nexperience in Go.\u003c/p\u003e\n\u003cp\u003eWe also included a follow-up for respondents who rated diagnosing performance\nissues as at least slightly important to understand which issues were most\nimportant to them. Latency, total memory, and total CPU were the top concerns.\nThere could be several explanations to the significance of these areas. First,\nthey are measurable and easily convertible into business costs. Secondly,\ntotal memory and CPU usage represent physical constraints that necessitate\nhardware upgrades or software optimizations for improvement. Moreover,\nlatency, total memory, and total CPU are more manageable by developers and can\nimpact even straightforward services. In contrast, GC performance and memory\nallocation may only be relevant in rare cases or for exceptionally heavy\nworkloads. Additionally, latency stands out as the most user-visible metric,\nas high latency results in slow services and dissatisfied users.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/perf_concerns.svg\" alt=\"Chart of which performance\nissues are the highest concern to respondents\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"mlai\"\u003eUnderstanding AI use cases for Go\u003c/h2\u003e\n\u003cp\u003eOur \u003ca href=\"/blog/survey2023-h2-results#mlai\"\u003eprevious survey\u003c/a\u003e asked Go\ndevelopers about their early experiences with generative AI systems. To go a\nbit deeper this cycle, we asked several AI-related questions to understand how\nrespondents are building AI-powered (more specifically, LLM-powered) services.\nWe found that half of survey respondents (50%) work at organizations that are\nbuilding or exploring AI-powered services. Of these, just over half (56%) said\nthey were involved with adding AI capabilities to their organization’s\nservices. Our remaining AI-related questions were only shown to this slice of\nrespondents.\u003c/p\u003e\n\u003cp\u003ePlease be cautious about generalizing these participant responses to the\noverall population of Go developers. Because only about ¼ of survey\nrespondents are working with AI-powered services, we suggest using this data\nto understand the early adopters in this space, with the caveat that early\nadopters tend to be a bit different than the majority of people who will\neventually adopt a technology. As an example, we expect that this audience is\nexperimenting with more models and SDKs than may be the case a year or two\nfrom now, and encountering more challenges related to integrating those\nservices into their existing code base.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/ai_org.svg\" alt=\"Chart of respondents whose org is\ncurrently building or exploring ML/AI based services\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/ai_involved.svg\" alt=\"Chart of respondents who are currently\ninvolved in their orgs AI based development\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eAmong the audience of Go developers working professionally with generative AI\n(GenAI) systems, a solid majority (81%) reported using OpenAI’s ChatGPT or\nDALL-E models. A collection of open-source models also saw high adoption, with\na majority of respondents (53%) using at least one of Llama, Mistral, or\nanother OSS model. We see some early evidence that larger organizations\n(1,000+ employees) are a bit less likely to be using OpenAI models (74% vs.\n83%) and a bit more likely to be using other proprietary models (22% vs. 11%).\nWe do not, however, see any evidence of differences in adoption of OSS models\nbased on organization size–both smaller companies and larger enterprises show\nsmall majorities adopting OSS models (51% and 53%, respectively). Overall we\nfound that a plurality of respondents prefer to use open-source models (47%)\nwith only 19% preferring proprietary models; 37% said they had no preference.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/generative_models.svg\" alt=\"Chart of which generative\nAI models respondents\u0026#39; orgs are using\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/ai_libs.svg\" alt=\"Chart of which AI related services and\nlibraries respondents\u0026#39; orgs are using\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe most common kinds of services respondents are building include\nsummarization tools (56%), text generation tools (55%), and chatbots (46%).\nOpen-text responses suggested that many of these use cases are\ninternal-facing, such as chat bots trained upon an organization’s internal\ndocumentation and intended to answer employee questions. Respondents raised\nseveral concerns about external-facing AI features, most notably due to\nreliability (e.g., do slight changes in my question lead to very different\nresults?) and accuracy (e.g., are the results trustworthy?) issues. An\ninteresting theme running through these responses was a sense of tension\nbetween the risk of not adopting AI tooling at all (and thereby losing a\npotential competitive advantage should generative AI become necessary in the\nfuture), balanced against the risk of negative publicity or violating\nregulations/laws by using untested AI in high-criticality customer-facing\ndomains.\u003c/p\u003e\n\u003cp\u003eWe found evidence that Go is already being used in the GenAI space, and there\nappears to be an appetite for more. Roughly ⅓ of respondents who were building\nAI-powered features told us they were already using Go for a variety of GenAI\ntasks, including prototyping new features and integrating services with LLMs.\nThese proportions tick up slightly for two areas where we believe Go is a\nparticularly well-suited tool: data pipelines for ML/AI systems (37%) and\nhosting API endpoints for ML/AI models (41%). In addition to these (likely\nearly) adopters, we found that about ¼ of respondents \u003cem\u003ewant\u003c/em\u003e to use Go for\nthese types of uses, but are currently blocked by something. We’ll return to\nthese blockers shortly, after exploring why respondents wanted to use Go for\nthese tasks in the first place.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/ai_apps.svg\" alt=\"Chart of the kinds of Generative AI\napps respondents work on\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/ai_uses_interest.svg\" alt=\"Chart of the kinds of AI apps\nrespondents\u0026#39; orgs are currently working on or considering\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"reasons-for-using-go-with-generative-ai-systems\"\u003eReasons for using Go with generative AI systems\u003c/h3\u003e\n\u003cp\u003eTo help us understand what benefits developers hope to derive from using Go in\ntheir AI/ML services, we asked developers why they feel Go is a good choice\nfor this domain. A clear majority (61%) of respondents mentioned one or more\nof Go’s core principles or features, such as simplicity, runtime safety,\nconcurrency, or single-binary deployments. One third of respondents cited\nexisting familiarity with Go, including a desire to avoid introducing new\nlanguages if they can avoid it. Rounding out the most common responses were\nvarious challenges with Python (particularly for running production services)\nat 14%.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“I think that the robustness, simplicity, performance and native binaries\nthat the language offers make it a far stronger choice for AI workloads.”\n\u003cspan class=\"quote_source\"\u003e— Open-source Go developer at a large\norganization with up to 1 year of experience\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“We want to keep our tech stack as homogenous as possible across the\norganization to make it easier for everybody to develop on all areas. Since\nwe are already writing all our backends in Go, it is of interest to us to be\nable to write ML model deployments in Go and avoid having to rewrite parts\nof the stack for logging, monitoring, etc… in a separate language [like]\nPython.” \u003cspan class=\"quote_source\"\u003e— Professional Go developer at a\nmid-sized organization with 5 – 7 years of experience\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“Go is better for us at running API servers and background tasks on worker\npools. Go’s lower resource usage has allowed us to grow without using more\nresources. And we have found that Go projects are easier to maintain over\ntime both in code changes and when updating dependencies. We run the models\nas a separate service written in Python and interact with them in Go.”\n\u003cspan class=\"quote_source\"\u003e— Professional Go developer at a large\norganization with 5 – 7 years of experience\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt appears that among Go developers who are interested in ML/AI, there is a\nshared sense that 1) Go is inherently a good language for this domain (for the\nreasons articulated above), and 2) there is reluctance to introduce a new\nlanguage once organizations have already invested in Go (this point reasonably\ngeneralizes to any language). Some respondents also expressed frustration with\nPython for reasons such as type safety, code quality, and challenging\ndeployments.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/text_ml_interest.svg\" alt=\"Chart of respondents\u0026#39;\nreasons for why Go is a good choice for their AI related use case\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"challenges-when-using-go-with-genai-systems\"\u003eChallenges when using Go with GenAI systems\u003c/h3\u003e\n\u003cp\u003eRespondents were largely unified on what currently prevents them from using Go\nwith AI-powered services: the ecosystem is centered around Python, their\nfavorite libraries/frameworks are all in Python, getting started documentation\nassumes Python familiarity, and the data scientists or researchers exploring\nthese models are already familiar with Python.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“Python just seems to have all the libraries. PyTorch for example is widely\nused to run models. If there were frameworks in Go to run these models, we’d\nmuch rather be doing that.” \u003cspan class=\"quote_source\"\u003e— Professional Go\ndeveloper at a large organization with 2 – 4 years of experience\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“Python tools are substantially more mature and usable out of the box,\nmaking them a significantly lower cost to implement.”\n\u003cspan class=\"quote_source\"\u003e— Professional Go developer at a small\norganization with 2 – 4 years of experience\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“[The] Go world is missing many AI libraries. If I have a LLM PyTorch model,\nI can’t even serve it (or I’m unaware how to do it). With Python it’s\nbasically a few lines of code.” \u003cspan class=\"quote_source\"\u003e— Professional\nGo developer at a small organization with up to 1 year of experience\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThese findings triangulate well with our observation above that Go developers\nbelieve Go \u003cem\u003eshould\u003c/em\u003e be a great language for building production-ready AI\nservices: only 3% of respondents said that something specific to Go was\nblocking their path forward, and only 2% cited specific interoperability\nchallenges with Python. In other words, most blockers developers face could be\nresolved in the module and documentation ecosystem, rather than necessitating\ncore language or runtime changes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/text_ml_blockers.svg\" alt=\"Chart of what is blocking\nrespondents from using Go with their AI powered apps\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe also asked survey participants whether they were already working with\nPython for GenAI, and if so, whether they’d prefer to use Go. Respondents who\nsaid they’d prefer to use Go rather than Python also received a follow-up\nabout what would enable them to use Go with GenAI systems.\u003c/p\u003e\n\u003cp\u003eA solid majority (62%) of respondents reported already using Python to\nintegrate with generative AI models; of this group, 57% would rather use Go\ninstead. Given that our survey audience are all Go developers, we should\nexpect this to be an approximate upper bound on the proportion of overall\ndevelopers who are interested in moving from Python to Go for GenAI tasks,\ngiven the state of each ecosystem today.\u003c/p\u003e\n\u003cp\u003eOf the respondents who are already using Python but would prefer to use Go,\nthe vast majority (92%) said that the availability of Go equivalents for\nPython libraries would enable them to integrate Go with GenAI systems.\nHowever, we should be cautious when interpreting this result; the open-text\nresponses and a separate set of contextual interviews with developers working\non GenAI services describe a Python-centric ecosystem around GenAI; it’s not\nonly that Go lacks many libraries when compared with the Python ecosystem, but\nalso that the perceived level of investment into Go libraries is lower,\ndocumentation and examples are predominantly in Python, and the network of\nexperts working in this area are already comfortable with Python.\nExperimenting and building proofs-of-concept in Python is almost certain to\ncontinue, and the lack of Go variants of Python libraries (for example,\n\u003ca href=\"https://pandas.pydata.org/\" rel=\"noreferrer\" target=\"_blank\"\u003epandas\u003c/a\u003e) is only the first barrier developers\nwould encounter when trying to port from Python to Go. Libraries and SDKs are\nnecessary, but unlikely by themselves to be sufficient, to build a robust Go\necosystem for production ML/AI applications.\u003c/p\u003e\n\u003cp\u003eFurther, contextual interviews with Go developers building AI-powered services\nsuggest that \u003cem\u003ecalling\u003c/em\u003e APIs from Go is not a major issue, particularly with\nhosted models such as \u003ca href=\"https://openai.com/gpt-4\" rel=\"noreferrer\" target=\"_blank\"\u003eGPT-4\u003c/a\u003e or\n\u003ca href=\"https://gemini.google.com/\" rel=\"noreferrer\" target=\"_blank\"\u003eGemini\u003c/a\u003e. Building, evaluating, and hosting custom\nmodels is seen as challenging in Go (primarily due to the lack of frameworks\nand libraries that support this in Python), but interview participants\ndistinguished between hobbyist use cases (e.g., playing around with custom\nmodels at home) and business use cases. The hobbyist cases are dominated by\nPython for all of the reasons enumerated above, but the business use cases are\nmore focused around reliability, accuracy, and performance while calling\nhosted models. This is an area where Go can shine \u003cem\u003ewithout\u003c/em\u003e building a large\necosystem of ML/AI/data science libraries, though we expect developers will\nstill benefit from documentation, best practice guidance, and examples.\u003c/p\u003e\n\u003cp\u003eBecause the field of GenAI is so novel, best practices are still being\nidentified and tested. Initial contextual interviews with developers have\nsuggested that one of their goals is to be prepared for a future in which\nGenAI becomes a competitive advantage; by making some investment in this area\nnow, they hope to moderate future risk. They’re also still trying to\nunderstand what GenAI systems might be helpful for and what the return on\ninvestment (if any) may look like. Due to these unknowns, our early data\nsuggests that organizations (especially outside the tech industry) may be\nhesitant to make long-term commitments here, and will instead pursue a lean or\nscrappy approach until either a reliable use case with clear benefits emerges,\nor their industry peers begin to make large, public investments in this space.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/python_usage.svg\" alt=\"Chart showing high usage of\nPython to integrate with gen AI models\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/go_python_pref.svg\" alt=\"Chart showing preference to use Go\nrather than Python to integrate with gen AI models\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/enable_go.svg\" alt=\"Chart of what would enable respondents\nto use Go where they are currently using Python\" class=\"chart\"/\u003e \u003cimg src=\"survey2024h1/text_ml_challenge.svg\" alt=\"Chart of biggest challenges for\nrespondents integrating backend services with gen AI models\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"learn\"\u003eLearning challenges\u003c/h2\u003e\n\u003cp\u003eIn order to improve the experience of learning Go, we wanted to hear from\ninexperienced Go developers, as well as those who might have already mastered\nthe basics on what they see as their biggest challenge to meeting their\nlearning goals. We also wanted to hear from developers who might primarily be\nfocused on helping others get started with Go rather than their own learning\ngoals, since they might have some insights on common challenges they see when\nonboarding developers.\u003c/p\u003e\n\u003cp\u003eOnly 3% of respondents said that they were currently learning the basics of\nGo. This isn’t too surprising, considering  most of our survey respondents\nhave at least a year of experience with Go. Meanwhile, 40% of respondents said\nthat they have already learned the basics but want to learn more advanced\ntopics and another 40% said that they help other developers learn Go. Only 15%\nsaid they didn’t have any learning goals related to Go.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/learning_goal.svg\" alt=\"Chart of respondents\u0026#39; learning\ngoals for Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen we looked at more finely grained time segments of Go experience, we found\nthat 30% of those who’ve been using Go for less than three months say they’re\nlearning the basics of Go, while about two-thirds of them say that they’ve\nalready learned the basics. That’s good evidence that someone can at least\nfeel like they’ve learned the basics of Go in a short amount of time, but it\nalso means we don’t have as much feedback from this group who are at the\nbeginning of their learning journey.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/learning_goal_go_exp.svg\" alt=\"Chart of respondents\u0026#39;\nlearning goals for Go split by finer units of time\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo determine what kinds of learning materials might be most needed in the\ncommunity, we asked what kind of learning content respondents preferred for\ntopics related to software development. They were able to select multiple\noptions so the numbers here exceed 100%. 87% of respondents said they\npreferred written content, which was by far the most preferred format. 52%\nsaid they preferred video content, and in particular this format was more\noften preferred by developers with less experience. This could indicate a\ngrowing desire for learning content in video format. The less experienced\ndemographic did not prefer written content any less than other groups,\nhowever.  \u003ca href=\"https://www.sciencedirect.com/science/article/abs/pii/S0360131514001353\" rel=\"noreferrer\" target=\"_blank\"\u003eProviding both written and video formats together has been shown to\nimprove learning\noutcomes\u003c/a\u003e\nand \u003ca href=\"https://udlguidelines.cast.org/representation/perception\" rel=\"noreferrer\" target=\"_blank\"\u003ehelps developers with different learning preferences and\nabilities\u003c/a\u003e, which\ncould increase the accessibility of learning content in the Go community.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/learning_content_exp.svg\" alt=\"Chart of respondents\u0026#39;\npreferred formats for learning content, split by years of Go experience\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe asked respondents who said they had a learning goal related to Go what\ntheir biggest challenge was to reaching their goal. This was intentionally\nleft broad enough that someone who was just getting started or who had already\nmastered the basics could respond to this question. We also wanted to give\nrespondents the opportunity to tell us about a wide range of challenges, not\njust topics they find difficult.\u003c/p\u003e\n\u003cp\u003eOverwhelmingly, the most common challenge mentioned was a lack of time or\nother personal limitations such as focus or motivation to learn or  (44%).\nAlthough we can’t give respondents more time, we should be mindful when we’re\nproducing learning materials or introducing changes in the ecosystem that\nusers may be operating under significant time constraints. There may also be\nopportunities for educators to produce resources that are \u003ca href=\"https://web.cortland.edu/frieda/id/IDtheories/26.html\" rel=\"noreferrer\" target=\"_blank\"\u003edigestible in\nsmaller portions\u003c/a\u003e or\n\u003ca href=\"https://psychology.ucsd.edu/undergraduate-program/undergraduate-resources/academic-writing-resources/effective-studying/spaced-practice.html#:~:text=This%20is%20known%20as%20spaced,information%20and%20retain%20it%20longer.\" rel=\"noreferrer\" target=\"_blank\"\u003eat a regular\ncadence\u003c/a\u003e\nto keep learners motivated.\u003c/p\u003e\n\u003cp\u003eOther than time, the top challenge was learning new concepts, idioms or best\npractices that are unique to Go (11%). In particular, adapting to a statically\ntyped compiled language from Python or JavaScript and learning how to organize\nGo code can be particularly challenging. Respondents also asked for more\nexamples (6%), both in documentation and real world applications to learn\nfrom. Developers coming from a larger developer community expected to be able\nto find more existing solutions and examples.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“Moving from a language like Python to a statically typed, compiled language\nhas been challenging, but Go itself hasn’t been. I like to learn through\nquick feedback, so Python’s REPL was great for that. So now I need to focus\non really reading documentation and examples to be able to learn. Some of\nthe documentation for Go is quite sparse and could do with more examples.”\n\u003cspan class=\"quote_source\"\u003e— Respondent with less than 3 years of\nexperience with Go.\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“My main challenge is the lack of example projects for enterprise-level\napplications. How to organize a big Go project is something I would like to\nhave more examples as reference. I would like to refactor the current\nproject I am working [on] to a more modular/clean architecture style, and I\nfind it difficult in Go due to lack of examples / a more opinionated\n‘folder/package’ reference.” \u003cspan class=\"quote_source\"\u003e— Respondent with\n1–2 years of experience with Go.\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“It’s a smaller ecosystem than I am used to so online searches don’t yield\nas many results to specific issues. The resources that are out there are\nincredibly helpful and I usually am able to solve issues eventually, it just\ntakes a little longer.\u0026#34;\u003cspan class=\"quote_source\"\u003e— Respondent with less\nthan 3 months of experience with Go.\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/text_learning_challenge.svg\" alt=\"Chart of biggest\nchallenges to reaching respondents\u0026#39; learning goals\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eFor respondents whose primary learning goal was to help others get started\nwith Go, we asked what might make it easier for developers to get started with\nGo. We got a wide range of responses including documentation suggestions,\ncomments on difficult topics (e.g., using pointers or concurrency), as well as\nrequests for adding more familiar features from other languages. For\ncategories that made up less than 2% of responses, we lumped them into “Other”\nresponses. Interestingly, nobody mentioned “more time.” We think this is\nbecause lack of time or motivation is most often a challenge when there isn’t\nan immediate necessity to learn something new related to Go. For those helping\nothers get started with Go, there may be a business reason for doing so,\nmaking it easier to prioritize, and hence “lack of time” is not as much of a\nchallenge.\u003c/p\u003e\n\u003cp\u003eConsistent with the previous results, 16% of those who help others get started\nwith Go told us that new Go developers would benefit from having more\nrealistic examples or project-based exercises to learn from. They also saw the\nneed to help developers coming from other language ecosystems through\ncomparisons between them. \u003ca href=\"https://dl.acm.org/doi/abs/10.1145/3377811.3380352\" rel=\"noreferrer\" target=\"_blank\"\u003ePrevious research tells us that experience with one\nprogramming language can interfere with learning a new\none\u003c/a\u003e, especially when new\nconcepts and tooling are different from what developers are used to. There are\nexisting resources that aim to address this issue (just try searching for\n“Golang for [language] developers” for examples),  but it could be difficult\nfor new Go developers to search for concepts they don’t have the vocabulary\nfor yet or these kinds of resources might not adequately address specific\ntasks. In the future we would like to learn more about how and when to present\nlanguage comparisons to facilitate learning new concepts.\u003c/p\u003e\n\u003cp\u003eA related need that this group reported was more explanations behind Go’s\nphilosophy and best practices. It could be the case that learning not only\n\u003cem\u003ewhat\u003c/em\u003e makes Go different but also \u003cem\u003ewhy\u003c/em\u003e would help new Go developers\nunderstand new concepts or ways of doing tasks that might be different from\ntheir previous experience.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/text_onboard_others.svg\" alt=\"Chart of ideas from\nrespondents  who help others get started with Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"demographics\"\u003eDemographics\u003c/h2\u003e\n\u003cp\u003eWe ask similar demographic questions during each cycle of this survey so we\ncan understand how comparable the year-over-year results may be. For example,\nif a majority of respondents reported having less than one year of experience\nwith Go in one survey cycle, it’d be very likely that any other differences in\nresults from prior cycles stem from this major demographic shift. We also use\nthese questions to provide comparisons between groups, such as satisfaction\naccording to how long respondents have been using Go.\u003c/p\u003e\n\u003cp\u003eThis year we introduced some minor changes to how we ask about experience with\nGo to match the JetBrains developer survey. This allowed us to make\ncomparisons between our survey populations and facilitated data analysis.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/go_exp.svg\" alt=\"Chart of how long respondents have\nbeen working with Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe saw some differences in experience level depending on how developers\ndiscovered our survey. The population who responded to survey notifications in\nVS Code skewed toward less experience with Go; we suspect this a reflection of\nVS Code’s popularity with new Go developers, who may not be ready to invest in\nan IDE license while they’re still learning. With respect to years of  Go\nexperience, the respondents randomly selected from GoLand are more similar to\nour self-selected population who found the survey through the Go Blog. Seeing\nconsistencies between samples such as these allows us to more confidently\ngeneralize findings to the rest of the community.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/go_exp_src.svg\" alt=\"Chart of how long respondents have\nbeen working with Go, split by different sample sources\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn addition to years of experience with Go, this year we also measured years\nof professional coding experience. We were surprised to find that 26% of\nrespondents have 16 or more years of professional coding experience. For\ncomparison, the \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2023/demographics/#code_yrs\" rel=\"noreferrer\" target=\"_blank\"\u003eJetBrains Developer Survey\naudience\u003c/a\u003e\nfrom 2023 had a majority of respondents with 3–5 years of professional\nexperience. Having a more experienced demographic could affect differences in\nresponses. For example, we saw significant differences in what kinds of\nlearning content respondents with different levels of experience preferred.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/dev_exp.svg\" alt=\"Chart of respondents\u0026#39; years of\nprofessional developer experience\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen we looked at our different samples, the self-selected group was even more\nexperienced than the randomly selected groups, with 29% having 16 or more\nyears of professional experience. This suggests that our self-selected group\nis generally more experienced than our randomly selected groups and can help\nexplain some of the differences we see in this group.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/dev_exp_src.svg\" alt=\"Chart of respondents\u0026#39; years of\nprofessional developer experience\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe introduced another demographic question during this cycle on employment\nstatus to help us make comparisons with \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2023/demographics/#employment_status\" rel=\"noreferrer\" target=\"_blank\"\u003eJetBrains’ Developer\nSurvey\u003c/a\u003e.\nWe found that 81% of respondents were fully employed, significantly more than\n63% on the JetBrains survey. We also found significantly fewer students in our\npopulation (4%) compared to 15% on the JetBrains survey. When we look at our\nindividual samples, we see a small but significant difference within our\nrespondents from VS Code, who are slightly less likely to be fully employed\nand slightly more likely to be students. This makes sense given that VS Code\nis free.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/employment.svg\" alt=\"Chart of respondents\u0026#39; employment\nstatus\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003eSimilar to previous years, the most common use cases for Go were API/RPC\nservices (74%) and command line tools (63%). We’ve heard that Go’s built-in\nHTTP server and concurrency primitives, ease of cross-compilation, and\nsingle-binary deployments make Go a good choice for these kinds of\napplications.\u003c/p\u003e\n\u003cp\u003eWe also looked for differences based on respondents’ level of experience with\nGo and organization size. More experienced Go developers reported building a\nwider variety of applications in Go. This trend was consistent across every\ncategory of app or service. We did not find any notable differences in what\nrespondents are building based on their organization size.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/what.svg\" alt=\"Chart of the types of things respondents\nare building with Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"firmographics\"\u003eFirmographics\u003c/h2\u003e\n\u003cp\u003eWe heard from respondents at a variety of different organizations. About 27%\nworked at large organizations with 1,000 or more employees, 25% were from\nmidsize organizations of 100–1,000 employees, and 43% worked at smaller\norganizations with less than 100 employees. As in previous years, the most\ncommon industry people work in was technology (48%) while the second most\ncommon was financial services (13%) .\u003c/p\u003e\n\u003cp\u003eThis is statistically unchanged from the past few Go Developer Surveys—we\ncontinue to hear from people in different countries and in organizations of\ndifferent sizes and industries at consistent rates year after year.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/org_size.svg\" alt=\"Chart of the different organization\nsizes where respondents use Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/industry.svg\" alt=\"Chart of the different industries\nwhere respondents use Go\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/location.svg\" alt=\"Chart of countries or regions where\nrespondents are located\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"methodology\"\u003eMethodology\u003c/h2\u003e\n\u003cp\u003ePrior to 2021, we announced the survey primarily through the Go Blog, where it\nwas picked up on various social channels like Twitter, Reddit, or Hacker News.\nIn 2021 we introduced a new way to recruit respondents by using the VS Code Go\nplugin to randomly select users to be shown a prompt asking if they’d like to\nparticipate in the survey. This created a random sample that we used to\ncompare the self-selected respondents from our traditional channels and helped\nidentify potential effects of \u003ca href=\"https://en.wikipedia.org/wiki/Self-selection_bias\" rel=\"noreferrer\" target=\"_blank\"\u003eself-selection\nbias\u003c/a\u003e. For this cycle, our\nfriends at JetBrains generously provided us with an additional random sample\nby prompting a random subset of GoLand users to take the survey!\u003c/p\u003e\n\u003cp\u003e64% of survey respondents “self-selected” to take the survey, meaning they\nfound it on the Go blog or other social Go channels. People who don’t follow\nthese channels are less likely to learn about the survey from them, and in\nsome cases, they respond differently than people who do closely follow them.\nFor example, they might be new to the Go community and not yet aware of the Go\nblog. About 36% of respondents were randomly sampled, meaning they responded\nto the survey after seeing a prompt in VS Code (25%) or GoLand (11%). Over the\nperiod of January 23 – February 13, there was roughly a 10% chance that users\nwould have seen this prompt. By examining how the randomly sampled groups\ndiffer from the self-selected responses, as well as from each other, we’re\nable to more confidently generalize findings to the larger community of Go\ndevelopers.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"survey2024h1/source.svg\" alt=\"Chart of different sources of survey\nrespondents\" class=\"chart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"how-to-read-these-results\"\u003eHow to read these results\u003c/h3\u003e\n\u003cp\u003eThroughout this report we use charts of survey responses to provide supporting\nevidence for our findings. All of these charts use a similar format. The title\nis the exact question that survey respondents saw. Unless otherwise noted,\nquestions were multiple choice and participants could only select a single\nresponse choice; each chart’s subtitle will tell the reader if the question\nallowed multiple response choices or was an open-ended text box instead of a\nmultiple choice question. For charts of open-ended text responses, a Go team\nmember read and manually categorized all of the responses. Many open-ended\nquestions elicited a wide variety of responses; to keep the chart sizes\nreasonable, we condensed them to a maximum of the top 10-12 themes, with\nadditional themes all grouped under “Other”. The percentage labels shown in\ncharts are rounded to the nearest integer (e.g., 1.4% and 0.8% will both be\ndisplayed as 1%), but the length of each bar and row ordering are based on the\nunrounded values.\u003c/p\u003e\n\u003cp\u003eTo help readers understand the weight of evidence underlying each finding, we\nincluded error bars showing the 95% \u003ca href=\"https://en.wikipedia.org/wiki/Confidence_interval\" rel=\"noreferrer\" target=\"_blank\"\u003econfidence\ninterval\u003c/a\u003e for responses;\nnarrower bars indicate increased confidence. Sometimes two or more responses\nhave overlapping error bars, which means the relative order of those responses\nis not statistically meaningful (i.e., the responses are effectively tied).\nThe lower right of each chart shows the number of people whose responses are\nincluded in the chart, in the form “n = [number of respondents]”. In cases\nwhere we found interesting differences in responses between groups, (e.g.,\nyears of experience, organization size, or sample source) we showed a\ncolor-coded breakdown of the differences.\u003c/p\u003e\n\u003ch2 id=\"closing\"\u003eClosing\u003c/h2\u003e\n\u003cp\u003eAnd that’s it for our semi-annual Go Developer Survey. Many thanks to everyone\nwho shared their thoughts on Go and everyone who contributed to making this\nsurvey happen! It means the world to us and truly helps us improve Go.\u003c/p\u003e\n\u003cp\u003eThis year we’re also excited to announce the forthcoming release of this survey’s\ndataset. We expect to share this anonymized data by the end of April, allowing\nanyone to slice and dice survey responses as needed to answer their own\nquestions about the Go ecosystem.\u003c/p\u003e\n\u003cp\u003eUpdated 2024-05-03: We unfortunately need to delay the release of this\ndataset. We’re still working to make this happen, but we don’t expect to be\nable to share it until the second half of 2024.\u003c/p\u003e\n\u003cp\u003e— Alice and Todd (on behalf of the Go team at Google)\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2024-04-09T00:00:00Z",
  "Author": "Alice Merrick and Todd Kulesza"
}