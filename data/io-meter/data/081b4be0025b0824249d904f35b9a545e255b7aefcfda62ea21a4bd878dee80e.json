{
  "Source": "io-meter",
  "Title": "Let Rocket Fly",
  "Link": "https://io-meter.com/2014/04/05/let-rocket-fly/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e最近完成了我第一个相对完整的 WebGL 页面 \u003ca href=\"http://sjtug.github.io\" target=\"_blank\" rel=\"noopener\"\u003e(点这里)\u003c/a\u003e，\n主要内容是一只可以旋转交互的小火箭。这篇文章就主要记录一下这个小项目的制作\n过程。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003ch2 id=\"Logo__u8BBE_u8BA1\"\u003e\u003ca href=\"#Logo__u8BBE_u8BA1\" class=\"headerlink\" title=\"Logo 设计\"\u003e\u003c/a\u003eLogo 设计\u003c/h2\u003e\u003cp\u003e这个项目是作为我们新近成立的一个同好会类型的组织 SJTUG 的第一个页面。在\n开始制作时，对于作为页面主题的组织 Logo 其实还没有什么想法。偶然的情况下\n发现小火箭这种形象很适合作为 Logo，适当调整一下，做一个交互的东西也比较方便，\n因此就果断的朝这个方向构思了。\u003c/p\u003e\n\u003cp\u003e首先是在矢量绘图软件中大概的完成 Logo 的平面形象，主要是从 Google Image 上搜索\n出来一些已有的图案作为参考。用 CorelDRAW 绘制的 Logo 成图如下。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/Rocket480.png\" alt=\"rocket\" title=\"Rocket Logo\"/\u003e\u003c/p\u003e\n\u003cp\u003e在这里，记得要将 Logo 输出成不同的分辨率，以便于适配 Retina 的屏幕分辨率，\n对于移动设备和不支持 WebGL 的浏览器，应该要能 fallback 到静态的图片。\n支持 Retina 显示图片的话，可以用 \u003ca href=\"http://retinajs.com\" target=\"_blank\" rel=\"noopener\"\u003eretina.js\u003c/a\u003e，也可以像\n我这里一样使用 CSS 。一个可以支持大多数设备的 CSS Media 选择代码如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight css\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e@\u003cspan class=\"keyword\"\u003emedia\u003c/span\u003e\tonly screen and (-webkit-min-device-pixel-ratio: \u003cspan class=\"number\"\u003e1.3\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eonly screen and (-o-min-device-pixel-ratio: \u003cspan class=\"number\"\u003e13\u003c/span\u003e/\u003cspan class=\"number\"\u003e10\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eonly screen and (min-resolution: \u003cspan class=\"number\"\u003e120dpi\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* Things for retina display */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"selector-id\"\u003e#logo\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attribute\"\u003ebackground-image\u003c/span\u003e: \u003cspan class=\"built_in\"\u003eurl\u003c/span\u003e(/img/Rocket960.png);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e``` \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e## \u003cspan class=\"selector-tag\"\u003eBlender\u003c/span\u003e 建模与导出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e得益于 \u003cspan class=\"selector-tag\"\u003eThree\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.js\u003c/span\u003e 提供了一个方便的 \u003cspan class=\"selector-tag\"\u003eBlender\u003c/span\u003e 导出脚本， 制作基于 \u003cspan class=\"selector-tag\"\u003eWeb\u003c/span\u003e 的 3\u003cspan class=\"selector-tag\"\u003eD\u003c/span\u003e 交互也方便很多。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e在这里使用的 [Blender](http://blender.org) 虽然不及总所周知的 MAYA 或者 3Ds MAX 那么出名，\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e但是作为一个开源的软件，其功能、易用性都是可圈可点的，自 2\u003cspan class=\"selector-class\"\u003e.50\u003c/span\u003e 版本其\u003cspan class=\"selector-tag\"\u003eUI\u003c/span\u003e变得非常成熟了。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e这个小火箭的形体是非常简单的，建模并不需要花费很多时间，在建模的时候简单的绘制一个参考\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e图作为参考会方便很多。最后得到的模型截图如下：\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e![blender model](/img/posts/blender-rocket.png \u0026#34;blender model\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e在图中显示的橘色条纹并不是贴图的效果。实际上，在这个例子中，既没有必要，也应该尽量避免\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e使用贴图。因为贴图的文件大小本身除了会拖慢页面的加载速度，在制作过程中为了得到比较好的\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e效果，还要模型进行 \u003cspan class=\"selector-tag\"\u003eUV\u003c/span\u003e 展开等操作。此外使用贴图的话，条纹的边缘很有可能变的略显模糊。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e那么该如何制作这个条纹呢？其实很简单，就是在飞船主体的表面用 \u003cspan class=\"selector-tag\"\u003eknife\u003c/span\u003e 工具切出条纹所在的\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e表面，然后选择起来作为一个组赋予一个颜色。着这个过程中难免会出现非四边形的表面，\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e之前的 \u003cspan class=\"selector-tag\"\u003eBlender\u003c/span\u003e 是不支持超过四个边的多边形的，那时必须要非常小心的增加不少边才能达到目的，\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e而且线框显示出来也不好看，还好较新的版本已经基本解决这个问题了。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e虽然如此，超过四条边的多边形还是不建议出现的，不过由于我们的材质是纯色的，\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e而且并不需要移动节点位置，因此显示出来不会有很大的问题。条纹的基本情况就是下图所示了。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e![stripe on rocket](/img/posts/blender-rocket-faces-knife.png \u0026#34;stripe on rocket\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e接下来是导出的工作，虽然 \u003cspan class=\"selector-tag\"\u003eThree\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.js\u003c/span\u003e 提供的导出工具是支持导出颜色和材质的，但是在使用中\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e发现，也许是因为色彩系统的不一致，输出的模型在显示出来颜色并不正确，因此需要再手动\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e编辑一下输出的文件来调整颜色。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e主要需要修改的是 `\u003cspan class=\"selector-tag\"\u003ematerials\u003c/span\u003e` 字段下每个材质的 `\u003cspan class=\"selector-tag\"\u003ecolor\u003c/span\u003e` 属性\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e这个属性实质上相当于整形值，比如白色的十六进制表示 `0\u003cspan class=\"selector-tag\"\u003exffffff\u003c/span\u003e` 转化过来应该是 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e`255^3 + 255^2 +255 = 16777215`。此外，在 `embeds` 字段当中内嵌的 `material` \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e字段也是需要修改 `\u003cspan class=\"selector-tag\"\u003ecolorDiffuse\u003c/span\u003e` 属性的， 只不过此时颜色是由 \u003cspan class=\"selector-tag\"\u003eRGB\u003c/span\u003e 三个颜色值组成的列表，值\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e最大是 `1\u003cspan class=\"selector-class\"\u003e.0\u003c/span\u003e`，因此要把整形的颜色分量值除以 `255`。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e因为这里使用的是纯色的材质，不需要 \u003cspan class=\"selector-tag\"\u003eLambert\u003c/span\u003e 光照模型，因此我们在输出的 \u003cspan class=\"selector-tag\"\u003ejson\u003c/span\u003e 中把所有的\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e`\u003cspan class=\"selector-tag\"\u003elambert\u003c/span\u003e` 和 `\u003cspan class=\"selector-tag\"\u003eMeshLambertMaterial\u003c/span\u003e` 都分别改成 `\u003cspan class=\"selector-tag\"\u003ebasic\u003c/span\u003e` 和 `\u003cspan class=\"selector-tag\"\u003eMeshBasicMaterial\u003c/span\u003e`。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e## 使用 \u003cspan class=\"selector-tag\"\u003eThree\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.js\u003c/span\u003e 导入模型\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"selector-tag\"\u003eThree\u003c/span\u003e\u003cspan class=\"selector-class\"\u003e.js\u003c/span\u003e 提供了将模型导入的类和函数，将其导入的代码很简单:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e```\u003cspan class=\"selector-tag\"\u003ejavascript\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evar loader = new THREE.SceneLoader();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eloader.load(\u0026#34;/js/rocket.json\u0026#34;, function(s){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  scene = s.scene;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  // do something to the scene\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e})\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e回调函数中的 \u003ccode\u003es.scene\u003c/code\u003e 参数就是读出来的场景对象。为了能对火焰和飞船主体分别制作动画，我将他们\n分成两个对象放置在场景中，然后在这里要分别取出来。在上面代码 do something 注释的地方\n将两个物体分别赋给两个全局变量以便于之后调用。顺便还要旋转调整物体，让它和静态 Logo\n 的位置角度都接近一致。最后把事先建立好的摄影机放到场景中。因为是使用\u003ccode\u003eBasicMaterial\u003c/code\u003e\n所以灯光不是必须的。\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003erocket = s.objects[\u003cspan class=\"string\"\u003e\u0026#39;Rocket\u0026#39;\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efire = s.objects[\u003cspan class=\"string\"\u003e\u0026#39;Fire\u0026#39;\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// rotate objects here\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erocket.rotateOnAxis(rot_axis, \u003cspan class=\"number\"\u003e1.508\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erocket.translateOnAxis(trans_axis, \u003cspan class=\"number\"\u003e-2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erocket.rotateOnAxis(rot_lean, \u003cspan class=\"number\"\u003e-0.63\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efire.rotateOnAxis(rot_axis, \u003cspan class=\"number\"\u003e1.508\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efire.translateOnAxis(trans_axis, \u003cspan class=\"number\"\u003e-2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efire.rotateOnAxis(rot_lean, \u003cspan class=\"number\"\u003e-0.63\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escene.add(camera);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e至于将 webGL 的 \u003ccode\u003ecanvas\u003c/code\u003e 对象放置到页面中的过程这里就不赘述了。为了和静态logo一致，放置\n一个橘色的带有 \u003ccode\u003eborder-radis: 50%\u003c/code\u003e 属性的 \u003ccode\u003ediv\u003c/code\u003e 到 \u003ccode\u003ecanvas\u003c/code\u003e 对象后面，正好是一个圆形背景。\u003c/p\u003e\n\u003ch2 id=\"u521B_u5EFA_u4EA4_u4E92\"\u003e\u003ca href=\"#u521B_u5EFA_u4EA4_u4E92\" class=\"headerlink\" title=\"创建交互\"\u003e\u003c/a\u003e创建交互\u003c/h2\u003e\u003cp\u003e在上面的代码已经提到过创建动态交互的基础函数了。在较新版本的 Three.js 里，可以用\u003ccode\u003erotateOnAxis\u003c/code\u003e \n来实现物体绕轴旋转的变换，而不仅仅只能绕直角坐标系的 XYZ 轴旋转了。我们使用这个函数使小火箭可以\n绕自己指向的轴进行旋转。\u003c/p\u003e\n\u003cp\u003e此外还可以对摄像机进行变换。摄像机最有用一个属性是 \u003ccode\u003eposition\u003c/code\u003e，用来设定摄像机的位置。此外还有一个\n非常神奇的函数，那就是 \u003ccode\u003elookAt\u003c/code\u003e。\u003ccode\u003elookAt\u003c/code\u003e 函数指定摄像机指向的点，Three.js 会调整摄像机的朝向使得\n摄像机恰好“看向”这个点。\u003c/p\u003e\n\u003cp\u003e在最后的交互中，不但火箭会绕着自己的轴旋转，在鼠标扫过指定链接时还需要有一种加速感觉，\n也就是让小火箭产生些微的震动。这其实就是通过让摄像机 \u003ccode\u003elookAt\u003c/code\u003e 的点不断随机震动实现的。\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eaxis_s.set(-\u003cspan class=\"built_in\"\u003eMath\u003c/span\u003e.random(), -\u003cspan class=\"built_in\"\u003eMath\u003c/span\u003e.random(), \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaxis_s.multiplyScalar(\u003cspan class=\"number\"\u003e0.4\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecamera.lookAt(axis_s);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e让火箭的火焰不断震动则是通过设定 \u003ccode\u003escale\u003c/code\u003e 属性:\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e(firescale\u0026gt;=\u003cspan class=\"number\"\u003e1\u003c/span\u003e) firescale = firel - firer*\u003cspan class=\"built_in\"\u003eMath\u003c/span\u003e.random();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e firescale = firel + firer*\u003cspan class=\"built_in\"\u003eMath\u003c/span\u003e.random();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efire.scale.z = firescale;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e最后就是动画的效果了，如何让小火箭旋转的动画看起来更平滑？经过各种尝试，最后是通过限制\n火箭旋转的速度来实现的。抽象来说，把页面上每个点映射到火箭的一个旋转和角度。当鼠标\n移动时，并不是实时的就把火箭调整到这个位置，而是假设鼠标是一个目标，代表火箭实际状态的\n点去不断追击鼠标。同时我们还考虑两点之间的距离作为追击速度的的参数，距离越近，速度越慢。\n最后就形成了这种有加速的动画的感觉。\u003c/p\u003e\n\u003ch2 id=\"u603B_u7ED3\"\u003e\u003ca href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e这个小火箭算是我第一个 webGL 的小尝试，得益于 Three.js 的强大功能，最后实际手写的 JavaScript\n只有 136 行，时间大约花费在两天。在这个过程中，主要的精力都放在调整模型和交互上面了，具体来说\n就是需要对于模型和动画的感觉进行细致的调整，不断地尝试最后才能得到一个比较好的效果。实际上，\n往往实现在脑海里觉得不错的效果，真正制作出来真正看在眼里就会觉得非常奇怪。\u003c/p\u003e\n\u003cp\u003e这个小项目的代码是静态托管在 Github pages 上的，源代码可以在 \u003ca href=\"https://github.com/sjtug/sjtug.github.io\" target=\"_blank\" rel=\"noopener\"\u003e这里\u003c/a\u003e\n找到。  \u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-04-05T06:53:12Z",
  "Author": "Chase Zhang"
}