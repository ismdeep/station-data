{
  "Source": "io-meter",
  "Title": "使用 WebGL 实现素描效果的渲染",
  "Link": "https://io-meter.com/2014/12/31/sketch-rendering/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e这次来介绍一下我最近刚完成的一个小玩意儿：通过 WebGL 在网页上显示一个素描风格的场景。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e欢迎先使用支持 WebGL 的浏览器浏览一下本文对应的 \u003ca href=\"http://chasezhang.me/sketch-rendering/\" target=\"_blank\" rel=\"noopener\"\u003eLive Demo\u003c/a\u003e。\n本文的代码以及场景文件也以 BSD 的协议在 Github 上发布了(\u003ca href=\"https://github.com/shanzi/sketch-rendering\" target=\"_blank\" rel=\"noopener\"\u003e这里\u003c/a\u003e)。\u003c/p\u003e\n\u003cp\u003e开始之前先说点题外话，在过去的两个月里，我还开发了一个用来管理矢量图标并生成图标字体的工具：\n\u003ca href=\"https://io-meter.com/myicons\"\u003eMyIcons\u003c/a\u003e。这是一个 Web-based 的工具，很方便部署到 Heroku，有需要的朋友欢迎围观和体验！\n我也会在之后的博文中逐步给出这个工具有关问题的解说。\u003c/p\u003e\n\u003ch2 id=\"u4E00_u70B9_u70B9_u7EFC_u8FF0\"\u003e\u003ca href=\"#u4E00_u70B9_u70B9_u7EFC_u8FF0\" class=\"headerlink\" title=\"一点点综述\"\u003e\u003c/a\u003e一点点综述\u003c/h2\u003e\u003cp\u003e这次的素描渲染 Demo 是基于 Three.js 的，跟之前的文章 \u003ca href=\"https://io-meter.com/2014/04/05/let-rocket-fly/\"\u003eLet Rocket Fly\u003c/a\u003e\n不同，这次要涉及到 Shader 的编写，因此复杂度也要比原来高很多。\u003c/p\u003e\n\u003cp\u003e实现一个这样的渲染效果，主要的步骤包括：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e准备模型和场景\u003c/li\u003e\n\u003cli\u003e通过 WebGL (Three.js) 导入场景\u003c/li\u003e\n\u003cli\u003e实现 Shader 以表现接近素描的效果\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在最重要的第3步中，我们要实现的主要有两个效果：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e模型边缘的描边(不同于单纯的线框)\u003c/li\u003e\n\u003cli\u003e模型表面类似于素描的线条效果\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e为了实现这样的效果，我们实际并不能直接在单一的 3D 的空间上完成的，而需要另外准备一个二维场景用于合成。\n总体的渲染与合成流程如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/sketch-rendering-pipeline.png\" alt=\"Pipeline\"/\u003e\u003c/p\u003e\n\u003cp\u003e其中的 3D 场景，就是我们想要处理成素描效果的场景。这里使用了一个小技巧，\n那就是我们并非直接将 3D 场景中的渲染效果输出到屏幕，而是先将三种不同类型的渲染结果输出到位于显存中的 Buffer\n(Three.js 中的\u003ccode\u003eWebGLRenderTarget\u003c/code\u003e)里。再在 2D 场景中合成这些输出结果。\u003c/p\u003e\n\u003cp\u003e这个 2D 场景非常简单，里面只有一个恰好和视口大小一样的矩形平面和一个非透视类型的 Camera，\n将我们从 3D 场景得到的不同类型的渲染图作为矩形平面的贴图，这样我们就可以编写 Shader\n来高效地处理合成效果了。最终输出的结果其实是 2D 场景的渲染结果，但是观看的人不会感觉到任何差异。\u003c/p\u003e\n\u003cp\u003e使用这样一个简单的 2D 场景进行后期合成可以说是一个非常常用的技巧，因为这样可以通过 OpenGL 充分利用显卡的渲染性能。\u003c/p\u003e\n\u003ch2 id=\"u51C6_u5907_u573A_u666F\"\u003e\u003ca href=\"#u51C6_u5907_u573A_u666F\" class=\"headerlink\" title=\"准备场景\"\u003e\u003c/a\u003e准备场景\u003c/h2\u003e\u003cp\u003e首先要做的工作是准备用来渲染的场景，选用的建模软件当然是我最喜欢的 \u003ca href=\"http://blender.org\" target=\"_blank\" rel=\"noopener\"\u003eBlender\u003c/a\u003e。我参考\nBlenderNation 上刊登的一副\u003ca href=\"http://www.blendernation.com/2014/08/06/image-entropy/\" target=\"_blank\" rel=\"noopener\"\u003e室内场景作品\u003c/a\u003e进行了仿制。\n我仿制的场景渲染结果如下:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/room-output.png\" alt=\"Scene\"/\u003e\u003c/p\u003e\n\u003cp\u003e选用这个场景的主要原因是场景的主体结构都非常简单，大多数物体都可以通过简单的立方体变换和修改而成。\n大量的平面也方便表现素描的效果。\u003c/p\u003e\n\u003cp\u003e建模的细节不再赘述。在这一阶段还有一个主要的工序需要完成，那就是 UV 展开和阴影明暗的烘焙(Bake)。\u003c/p\u003e\n\u003cp\u003e模型的 UV 展开实质上就是确定模型的贴图坐标与模型坐标的映射关系。一个好的 UV 映射决定了模型渲染时贴图的显示效果。\n因为模型表面的素描效果实际是通过贴图实现的，因此如果没有一个好的 UV 映射，显示出来的笔触可能会出现扭曲、变形、\n粗细不一等各种问题。UV 展开可以说是一个非常繁琐耗时的工序。最后为了减少工作量，我不得不删除了一些比较复杂的模型。\u003c/p\u003e\n\u003cp\u003e我将场景中的所有模型合并为一个物体，并完成 UV 展开后的结果如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/room-uv-mapping.png\" alt=\"UV Mapping\"/\u003e\u003c/p\u003e\n\u003cp\u003e完成 UV 展开之后将会进行烘焙。所谓的烘焙(Bake)就是将模型在场景环境下的明暗变化、阴影等事先渲染并映射到模型的贴图上。\n这个技术常用于静态场景中。在这种静态场景里，灯光的位置和角度不会变化，只有摄像机的方向会改变。\n因此实际上物体的明暗阴影都是固定的，将其固定在贴图中之后，使用 OpenGL 渲染时不再进行明暗处理和阴影生成。\n这样可以节约大量的计算时间。而且使用 CPU 渲染的阴影往往可以使用更为复杂的算法以获得真实的效果。\u003c/p\u003e\n\u003cp\u003eBlender 的烘焙选项在 Render 选项卡的最下方，这里选择 Full Render 来将一切光源产生的明暗阴影都固定下来。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/bake-panel.png\" alt=\"Bake Panel\"/\u003e\u003c/p\u003e\n\u003cp\u003e对照之前的 UV 展开，我烘焙出来的光影贴图如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/room-baked.png\" alt=\"Room Baked\"/\u003e\u003c/p\u003e\n\u003cp\u003e最后，使用 Three.js 提供的\u003ca href=\"https://github.com/mrdoob/three.js/tree/master/utils/exporters/blender\" target=\"_blank\" rel=\"noopener\"\u003e输出插件\u003c/a\u003e，将我们的场景输出成 Three.js 可以识别的\u003ccode\u003e.json\u003c/code\u003e文件。\n我输出的模型文件和相关贴图都已经上传到 GitHub 的\u003ca href=\"https://github.com/shanzi/sketch-rendering\" target=\"_blank\" rel=\"noopener\"\u003e仓库\u003c/a\u003e里。\u003c/p\u003e\n\u003cp\u003e这里再为有兴趣的同学推荐一个来自台湾同胞的 Blender 基础教程(\u003ca href=\"https://www.youtube.com/playlist?list=PLE885296A496C3D38\" target=\"_blank\" rel=\"noopener\"\u003eYouTube\u003c/a\u003e)。\n个人感觉是 Blender 的中文视频教程中比较好的一个，虽然时间录制早了些，但是讲解很清晰。\n而且本文制作时使用的建模、UV 展开、贴图和烘焙技巧都有介绍。\u003c/p\u003e\n\u003ch2 id=\"u7F16_u5199_Shader\"\u003e\u003ca href=\"#u7F16_u5199_Shader\" class=\"headerlink\" title=\"编写 Shader\"\u003e\u003c/a\u003e编写 Shader\u003c/h2\u003e\u003cp\u003e终于到了这篇文章的重中之重了，Shader 是通过 GPU 实现图形渲染的核心，通过 OpenGL\n实现的任何 2D 或 3D 效果都离不开它。\u003c/p\u003e\n\u003ch3 id=\"u4E00_u70B9_u70B9_u57FA_u7840_u77E5_u8BC6\"\u003e\u003ca href=\"#u4E00_u70B9_u70B9_u57FA_u7840_u77E5_u8BC6\" class=\"headerlink\" title=\"一点点基础知识\"\u003e\u003c/a\u003e一点点基础知识\u003c/h3\u003e\u003cp\u003e众所周知， WebGL 使用的 Shader 语言其实是 OpenGL 的一个嵌入式版本\nOpenGL ES 所定义的，这一 Shader 语言使用了类似 C 语言的语法，但是有下面几个区别：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eShader 语言没有动态分配内存的机制，所有内存(变量)的空间都是静态分配的\u003c/li\u003e\n\u003cli\u003eShader 语言是强类型的，不同类型的数不能隐式转换(比如整形不能隐式转换为浮点型)\u003c/li\u003e\n\u003cli\u003eShader 语言提供的一些数据结构，如向量类型\u003ccode\u003evec2\u003c/code\u003e、\u003ccode\u003evec3\u003c/code\u003e、\u003ccode\u003evec4\u003c/code\u003e\n和矩阵类型\u003ccode\u003emat2\u003c/code\u003e、\u003ccode\u003emat2\u003c/code\u003e、\u003ccode\u003emat4\u003c/code\u003e是直接可以使用加减乘除运算符进行操作的。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在 WebGL 中，我们可以自己编写的 Shader 有两种类型\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eVertex Shader: 模型的每个顶点上调用\u003c/li\u003e\n\u003cli\u003eFragment Shader: 模型三个顶点组成的面上显示出来的每个像素上执行\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在渲染时，GPU 会先在每个顶点上执行 Vertex Shader，再在每个像素上执行 Fragment Shader。\nVertex Shader 主要用来计算每个定点投影在视平面上的位置，但是也可以用来进行一些颜色的计算并将结果传送给 Fragment Shader。\nFragment Shader 则决定了最终显示出来的每个像素的颜色。\u003c/p\u003e\n\u003cp\u003e接下来介绍 Shader 的变量修饰词。Shader 的变量修饰词可以分为5种:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e(无): 默认的变量修饰符，作用域只限本地\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econst\u003c/code\u003e: 只读常量\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eattribute\u003c/code\u003e: 用来将每个节点的数据和 Vertex Shader 联系起来的变量，简单来说就是在某一个顶点上执行\nVertex Shader 时，变量的值就是这个顶点对应的值。这种对应关系是在初始化 WebGL 的程序时手动指定的。\n不过幸好 Three.js 已经为我们完成这一任务了。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euniform\u003c/code\u003e: 这种类型的变量也是运行在 CPU 的主程序向 Shader 传递数据的一个途径，主要用于与所处理的 Vertex 和 Fragment\n无关的值，比如摄像机的位置、灯光光源的位置方向等，这些参数在每一帧的渲染时都不变，因此使用\u003ccode\u003euniform\u003c/code\u003e传递进来。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evarying\u003c/code\u003e: 用来从 Vertex Shader 向 Fragment Shader 传递数据的变量。在 Vertex Shader 和 Fragment Shader\n上定义相同变量名的\u003ccode\u003evarying\u003c/code\u003e变量，在运行时 Fragment Shader 中变量的值将会是组成这个面的三个顶点所提供的值的线性插值。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThree.js 已经为我们预设了必要的\u003ccode\u003eattribute\u003c/code\u003e和\u003ccode\u003euniform\u003c/code\u003e，\n预设变量列表可以参见\u003ca href=\"http://threejs.org/docs/#Reference/Renderers.WebGL/WebGLProgram\" target=\"_blank\" rel=\"noopener\"\u003e文档\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e两种 Shader 都有一个\u003ccode\u003emain\u003c/code\u003e函数，不过执行的参数并非通过\u003ccode\u003emain\u003c/code\u003e函数的参数传入程序，\n输出结果也不是通过\u003ccode\u003emain\u003c/code\u003e函数的返回值返回的。实际上，OpenGL 已经固定了每种 Shader 的默认输入变量和输出变量的名称与类型，\n程序可以直接访问和设置这些变量。当然，外部程序也可以通过\u003ccode\u003eattribute\u003c/code\u003e和\u003ccode\u003euniform\u003c/code\u003e机制来指定额外的输入。\u003c/p\u003e\n\u003cp\u003e一个典型的 Vertex Shader 如下面的代码所示：\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e main(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003egl_Position\u003c/span\u003e = projectionMatrix * modelViewMatrix * \u003cspan class=\"type\"\u003evec4\u003c/span\u003e(position, \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e其中，\u003ccode\u003eposition\u003c/code\u003e、\u003ccode\u003eprojectionMatrix\u003c/code\u003e、\u003ccode\u003emodelViewMatrix\u003c/code\u003e 这些变量都是 Three.js 默认设置好并传递进 Shader 的。\n\u003ccode\u003eposition\u003c/code\u003e是\u003ccode\u003eattribute\u003c/code\u003e类型，它代表了每个 Vertex 在 3D 空间中的坐标，另外两个变量是\u003ccode\u003euniform\u003c/code\u003e，是 Three.js\n根据场景的属性而设定的。\u003ccode\u003egl_Position\u003c/code\u003e 就是 OpenGL 指定的 Vertex Shader 的输出值。\u003c/p\u003e\n\u003cp\u003e一个典型的 Vertex Shader 是通过给出的顶点\u003ccode\u003eposition\u003c/code\u003e，以及相关的一些变换投影矩阵，\n计算出这个顶点做透视投影后显示在屏幕中的 2D 坐标。因此在这里也可以实现各种透视效果，\n如常见的投影透视(近大远小)、平视透视(远近一样大)，甚至超现实的反投影透视(近小远大)等。\u003c/p\u003e\n\u003cp\u003eFragment Shader 的主要用处是确定某个像素的颜色，其已经指定的输出值为\u003ccode\u003egl_FragColor\u003c/code\u003e，这是一个\u003ccode\u003evec4\u003c/code\u003e类型的变量，\n代表了 RGBA 类型的颜色表示，为每一个表面输出白色的 Fragment Shader 如下:\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e main(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003egl_FragColor\u003c/span\u003e = \u003cspan class=\"type\"\u003evec4\u003c/span\u003e(\u003cspan class=\"number\"\u003e1.0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e除了直接计算颜色，还可以通过贴图(texture)来确定某个 Fragment 的颜色。在 WebGL 中，贴图是通过\u003ccode\u003euniform\u003c/code\u003e的方式传递进\nShader 里的，其类型是\u003ccode\u003esample2D\u003c/code\u003e。随后，我们可以使用\u003ccode\u003etexture2D(texture, uv)\u003c/code\u003e函数获得某一个像素的颜色，这里的\u003ccode\u003euv\u003c/code\u003e\n是一个二维向量，可以通过 Vertex Shader 获得。\u003c/p\u003e\n\u003cp\u003e在 Three.js 实现访问贴图的一个简单的例子是：\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Vertex Shader\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evarying\u003c/span\u003e vUv;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e main(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003egl_Position\u003c/span\u003e = projectionMatrix * modelViewMatrix * \u003cspan class=\"type\"\u003evec4\u003c/span\u003e(position, \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  vUv = uv;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Fragment Shader\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003euniform\u003c/span\u003e sample2D aTexture;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evarying\u003c/span\u003e vUv;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e main(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003egl_FragColor\u003c/span\u003e = \u003cspan class=\"built_in\"\u003etexture2D\u003c/span\u003e(aTexture, vUv);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在 Vertex Shader 中使用的\u003ccode\u003euv\u003c/code\u003e变量，也是 Three.js 中已经提供好的\u003ccode\u003eattribute\u003c/code\u003e。接下来就是在 Three.js 中使用 Shader 的方法了。\u003c/p\u003e\n\u003ch3 id=\"u5728_Three-js__u4E2D_u4F7F_u7528_Shader\"\u003e\u003ca href=\"#u5728_Three-js__u4E2D_u4F7F_u7528_Shader\" class=\"headerlink\" title=\"在 Three.js 中使用 Shader\"\u003e\u003c/a\u003e在 Three.js 中使用 Shader\u003c/h3\u003e\u003cp\u003eThree.js 提供了\u003ccode\u003eShaderMaterial\u003c/code\u003e用于实现自定义 Shader 的\nMaterial。下面是一个来自其\u003ca href=\"http://threejs.org/docs/#Reference/Materials/ShaderMaterial\" target=\"_blank\" rel=\"noopener\"\u003e官方文档\u003c/a\u003e的例子。\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e material = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.ShaderMaterial( {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  uniforms: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    time: { \u003cspan class=\"attr\"\u003etype\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;f\u0026#34;\u003c/span\u003e, \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resolution: { \u003cspan class=\"attr\"\u003etype\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;v2\u0026#34;\u003c/span\u003e, \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e: \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.Vector2() }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  attributes: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    vertexOpacity: { \u003cspan class=\"attr\"\u003etype\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#39;f\u0026#39;\u003c/span\u003e, \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e: [] }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  vertexShader: \u003cspan class=\"built_in\"\u003edocument\u003c/span\u003e.getElementById( \u003cspan class=\"string\"\u003e\u0026#39;vertexShader\u0026#39;\u003c/span\u003e ).textContent,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  fragmentShader: \u003cspan class=\"built_in\"\u003edocument\u003c/span\u003e.getElementById( \u003cspan class=\"string\"\u003e\u0026#39;fragmentShader\u0026#39;\u003c/span\u003e ).textContent\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e});\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e你可以通过设置\u003ccode\u003euniforms\u003c/code\u003e和\u003ccode\u003eattributes\u003c/code\u003e等参数向 Shader 传递数据，传递的格式文档中都有介绍。\n我们也是在这里将 Shader 需要用到的 Texture 通过\u003ccode\u003euniforms\u003c/code\u003e传递进去的。Texture 写在 unifroms 里的\u003ccode\u003etype\u003c/code\u003e是\u003ccode\u003et\u003c/code\u003e，\n\u003ccode\u003evalue\u003c/code\u003e可以是一个 Three.js 的\u003ccode\u003eTexture\u003c/code\u003e对象，也可以是\u003ccode\u003eWebGLRenderTarget\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这里只是将值传递了进去，你还是要在 Shader 源码里自己声明这些变量才能访问他们，\n在 Shader 里定义的名称应该与你在 JavaScript 中给出的键名相同。\u003c/p\u003e\n\u003ch2 id=\"u663E_u793A_u6A21_u578B_u7684_Outline\"\u003e\u003ca href=\"#u663E_u793A_u6A21_u578B_u7684_Outline\" class=\"headerlink\" title=\"显示模型的 Outline\"\u003e\u003c/a\u003e显示模型的 Outline\u003c/h2\u003e\u003cp\u003e模型的 Outline 就是在卡通风格的图画中围绕在物体边缘的线，因为卡通风格中物体的总体色调都比较平面化，\n所以需要这样的线来强调物体与物体之间的区分。\u003c/p\u003e\n\u003cp\u003e实现这种 Outline 有两种简单直观的方法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e使用深度作为特征，将深度变化大的地方标记出来\u003c/li\u003e\n\u003cli\u003e使用表面法线的方向作为特征，将发现变化大的地方标记出来\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这两种方法都各自有自己的缺点。比如深度特征时，很容易将一个与观察方向夹角比较小的面全部标记为黑色；\n而法线特征时，又无法将前后两个法线相近但是距离较远的表面区分开。这里参考另一篇相关内容的英文博客\n\u003ca href=\"http://floored.com/blog/2014/sketch-rendering.html\" target=\"_blank\" rel=\"noopener\"\u003eSketch Rendering\u003c/a\u003e 的方法来实现。\u003c/p\u003e\n\u003cp\u003e这种方法结合了深度和法线，假设有两个点 A 和 B，通过计算 A 的空间位置到 B 的法线所构成的平面的距离作为衡量，\n判断是否应该标记为 Outline。A 和 B 的空间位置则需要通过 A 和 B 的深度来计算出来。\n因此，我们需要先将我们的 3D 场景的深度和法线渲染图输出出来。\u003c/p\u003e\n\u003cp\u003eThree.js 已经提供了\u003ccode\u003eMeshDepthMaterial\u003c/code\u003e和\u003ccode\u003eMeshNormalMaterial\u003c/code\u003e分别用来输出深度和法线渲染图。\n我们直接使用这两个类就好了。假设我们已经初始化了一个\u003ccode\u003edepthMaterial\u003c/code\u003e和一个\u003ccode\u003enormalMaterial\u003c/code\u003e，\n那么将整个场景里的物体都用某一个 Material 进行渲染的话，我们可以使用\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eobjectScene.overrideMaterial = depthMaterial; \u003cspan class=\"comment\"\u003e// 或 normalMaterial\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e这样的方法实现。\u003c/p\u003e\n\u003cp\u003e此外，我们不希望渲染结果直接输出到屏幕，因此我们需要先新建一个 \u003ccode\u003eWebGLRenderTarget\u003c/code\u003e 作为一个 FrameBuffer 来存放结果。\n此后这个\u003ccode\u003eWebGLRenderTarget\u003c/code\u003e可以直接作为贴图传入用于合成的 2D 场景。\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e pars = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  minFilter: THREE.LinearFilter,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  magFilter: THREE.LinearFilter,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  format: THREE.RGBFormat,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  stencilBuffer: \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e depthTexture = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.WebGLRenderTarget(width, height, pars)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e normalTexture = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.WebGLRenderTarget(width, height, pars)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e使用下面的代码，将渲染结果输出到 FrameBuffer 里:\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// render depth\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eobjectScene.overrideMaterial = depthMaterial;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erenderer.setClearColor(\u003cspan class=\"string\"\u003e\u0026#39;#000000\u0026#39;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erenderer.clearTarget(depthTexture, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erenderer.render(objectScene, objectCamera, depthTexture);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// render normal\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eobjectScene.overrideMaterial = normalMaterial;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erenderer.setClearColor(\u003cspan class=\"string\"\u003e\u0026#39;#000000\u0026#39;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erenderer.clearTarget(normalTexture, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e, \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erenderer.render(objectScene, objectCamera, normalTexture);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在输出之前，别忘记使用\u003ccode\u003erenderer\u003c/code\u003e的\u003ccode\u003eclearTarget\u003c/code\u003e函数将 Buffer 清空。\n如果将我们在这一步生成的贴图显示出来的话，大概是下面的样子：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/sketch-depth-and-normal.png\" alt=\"Depth \u0026amp; Normal Texture\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"u751F_u6210_u7D20_u63CF_u7B14_u89E6\"\u003e\u003ca href=\"#u751F_u6210_u7D20_u63CF_u7B14_u89E6\" class=\"headerlink\" title=\"生成素描笔触\"\u003e\u003c/a\u003e生成素描笔触\u003c/h2\u003e\u003cp\u003e接下来就是在物体的表面生成绘制的素描线条效果了。这个方面其实比想象中更简单一点，\n我们的素描效果是使用的是如下一系列贴图组成的:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/hatch-maps.png\" alt=\"Hatching Maps\"/\u003e\u003c/p\u003e\n\u003cp\u003e接下来的问题就是找一种方法将这种不同密度的贴图融合在一起，这种问题被称为 Hatching。\n这里使用的 Hatching 方法是 MicroSoft Research\n在 2001 年发表的一篇\u003ca href=\"http://research.microsoft.com/en-us/um/people/hoppe/proj/hatching/\" target=\"_blank\" rel=\"noopener\"\u003e论文\u003c/a\u003e中给出的。\u003c/p\u003e\n\u003cp\u003e不同于原文中使用 6 张贴图合成的方法，这里采用了使用 3 张贴图合成，然后将贴图旋转90度再合成一次，\n从而获得交叉的笔划。\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e main() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003evec2\u003c/span\u003e uv = vUv * \u003cspan class=\"number\"\u003e15.0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003evec2\u003c/span\u003e uv2 = vUv.yx * \u003cspan class=\"number\"\u003e10.0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003efloat\u003c/span\u003e shading = \u003cspan class=\"built_in\"\u003etexture2D\u003c/span\u003e(bakedshadow, vUv).r + \u003cspan class=\"number\"\u003e0.1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003efloat\u003c/span\u003e crossedShading = shade(shading, uv) * shade(shading, uv2) * \u003cspan class=\"number\"\u003e0.6\u003c/span\u003e + \u003cspan class=\"number\"\u003e0.4\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003egl_FragColor\u003c/span\u003e = \u003cspan class=\"type\"\u003evec4\u003c/span\u003e(\u003cspan class=\"type\"\u003evec3\u003c/span\u003e(crossedShading), \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003ccode\u003eshade\u003c/code\u003e函数就是用合成多个贴图的函数，具体代码可以参见 GitHub\n上的\u003ca href=\"https://github.com/shanzi/sketch-rendering/blob/master/coffee/hatch_material.coffee\" target=\"_blank\" rel=\"noopener\"\u003e这个文件\u003c/a\u003e。\n可以注意到，我其实使用了之前 bake 出来的明暗来作为素描线条深浅的参考因素，\n这样就可以表现出明暗和阴影了。\u003c/p\u003e\n\u003ch2 id=\"u6700_u540E_u7684_u5408_u6210\"\u003e\u003ca href=\"#u6700_u540E_u7684_u5408_u6210\" class=\"headerlink\" title=\"最后的合成\"\u003e\u003c/a\u003e最后的合成\u003c/h2\u003e\u003cp\u003e最后就是要在我们的二维场景里进行最后的合成了。构造这样一个二维场景的代码很简单:\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e composeCamera = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.OrthographicCamera(-width / \u003cspan class=\"number\"\u003e2\u003c/span\u003e, width / \u003cspan class=\"number\"\u003e2\u003c/span\u003e, height / \u003cspan class=\"number\"\u003e2\u003c/span\u003e, -height / \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e-10\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e composePlaneGeometry = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.PlaneBufferGeometry(width, height);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecomposePlaneMesh = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e THREE.Mesh(composePlaneGeometry, composeMaterial);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecomposeScene.add(composePlaneMesh);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e场景的主要构造就是一个和视口一样大小的矩形几何体，摄像机则是一个\u003ccode\u003eOrthographicCamera\u003c/code\u003e，这种摄像机没有透视效果，\n正合适用于我们这种合成的需求。\u003c/p\u003e\n\u003cp\u003e将前几步输出到 FrameBuffer (也就是\u003ccode\u003eWebGLRenderTarget\u003c/code\u003e)的结果作为这个矩形表面的贴图，\n然后我们编写一个 Shader 来进行合成。\u003c/p\u003e\n\u003cp\u003e这一次，我们不再需要输出到 Buffer 上，而是直接输出到屏幕。而 Outline 的生成也是在这一步完成的。\n用来计算 Outline 的函数是:\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003efloat\u003c/span\u003e planeDistance(\u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"type\"\u003evec3\u003c/span\u003e positionA, \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"type\"\u003evec3\u003c/span\u003e normalA, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"type\"\u003evec3\u003c/span\u003e positionB, \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"type\"\u003evec3\u003c/span\u003e normalB) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003evec3\u003c/span\u003e positionDelta = positionB-positionA;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003efloat\u003c/span\u003e planeDistanceDelta = \u003cspan class=\"built_in\"\u003emax\u003c/span\u003e(\u003cspan class=\"built_in\"\u003eabs\u003c/span\u003e(\u003cspan class=\"built_in\"\u003edot\u003c/span\u003e(positionDelta, normalA)), \u003cspan class=\"built_in\"\u003eabs\u003c/span\u003e(\u003cspan class=\"built_in\"\u003edot\u003c/span\u003e(positionDelta, normalB)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e planeDistanceDelta;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在当前坐标周围取一个十字形的采样，对于上下和左右取出的点分别执行上面的函数，\n最后使用\u003ccode\u003esmoothstep\u003c/code\u003e来获得 Outline 的颜色:\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evec2\u003c/span\u003e planeDist = \u003cspan class=\"type\"\u003evec2\u003c/span\u003e(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    planeDistance(leftpos, leftnor, rightpos, rightnor),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    planeDistance(uppos, upnor, downpos, downnor));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003efloat\u003c/span\u003e planeEdge = \u003cspan class=\"number\"\u003e2.5\u003c/span\u003e * \u003cspan class=\"built_in\"\u003elength\u003c/span\u003e(planeDist);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eplaneEdge = \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e - \u003cspan class=\"number\"\u003e0.5\u003c/span\u003e * \u003cspan class=\"built_in\"\u003esmoothstep\u003c/span\u003e(\u003cspan class=\"number\"\u003e0.0\u003c/span\u003e, depthCenter, planeEdge);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在最后实现的版本里，我还尝试了再混入法线方式生成的边缘线的效果。最终生成的 Outline 效果如下:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/sketch-outline.png\" alt=\"Outline\"/\u003e\u003c/p\u003e\n\u003cp\u003e最后，将 Hatching 过程输出的结果混合进来:\u003c/p\u003e\n\u003cfigure class=\"highlight glsl\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evec4\u003c/span\u003e hatch = \u003cspan class=\"built_in\"\u003etexture2D\u003c/span\u003e(hatchtexture, vUv);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003egl_FragColor\u003c/span\u003e = \u003cspan class=\"type\"\u003evec4\u003c/span\u003e(\u003cspan class=\"type\"\u003evec3\u003c/span\u003e(hatch * edge), \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e完整的实现可以参见我放在 GitHub\n上的\u003ca href=\"https://github.com/shanzi/sketch-rendering/blob/master/coffee/compose_material.coffee\" target=\"_blank\" rel=\"noopener\"\u003e源码\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e大功告成！最后的合成效果如图:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/sketch-result.png\" alt=\"Final Result\"/\u003e\u003c/p\u003e\n\u003cp\u003e各位可以访问我使用简单添加了一点交互之后得到的 \u003ca href=\"http://chasezhang.me/sketch-rendering/\" target=\"_blank\" rel=\"noopener\"\u003eLive Demo\u003c/a\u003e\n(请使用支持 WebGL 的现代浏览器进行访问，加载模型和全部贴图可能需要一小会，请耐心等待)。\u003c/p\u003e\n\u003cp\u003e我实现的所有代码以及模型都已经以 BSD 协议发布到 GitHub\n上了(\u003ca href=\"https://github.com/shanzi/sketch-rendering\" target=\"_blank\" rel=\"noopener\"\u003e这里\u003c/a\u003e)。\u003c/p\u003e\n\u003ch2 id=\"u603B_u7ED3_u4E00_u4E0B\"\u003e\u003ca href=\"#u603B_u7ED3_u4E00_u4E0B\" class=\"headerlink\" title=\"总结一下\"\u003e\u003c/a\u003e总结一下\u003c/h2\u003e\u003cp\u003e虽然是作为我在学校一门课程的 Final Project 的一部分完成的项目，\n但是在这个过程中我总算是对于 Shader 的编写方面有所入门。此外，这次进行 Blender\n进行建模也感觉比以前顺利了许多。\u003c/p\u003e\n\u003cp\u003e虽然对 Blender 和 WebGL 的爱好现在看起来还没有什么现实价值，但是能够自己完成一个有趣的 Project\n还是很有成就感的！\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-12-31T07:48:27Z",
  "Author": "Chase Zhang"
}