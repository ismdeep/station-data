{
  "Source": "io-meter",
  "Title": "写个 Icon Font Viewer : 初",
  "Link": "https://io-meter.com/2014/04/12/iconfontr-1/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e得益于现代浏览器的普及，使用以 Web Font 作为基础的 Icon Font 来显示图标越来越流行了。\nIcon Font 本身作为一种矢量素材，具有很多优点，比如可以在不同缩放和 Retina 显示屏上获得很好的显示效果，\n可以用 CSS 指定颜色等。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e现在比较流行的 Icon Fonts 包括 \u003ca href=\"http://fontawesome.io\" target=\"_blank\" rel=\"noopener\"\u003eFontawesome\u003c/a\u003e、\n\u003ca href=\"http://zurb.com/playground/foundation-icon-fonts-3\" target=\"_blank\" rel=\"noopener\"\u003eFoundation Icon\u003c/a\u003e、\n社交类的 \u003ca href=\"http://zocial.smcllns.com/\" target=\"_blank\" rel=\"noopener\"\u003eZocial\u003c/a\u003e等。\n当然还有我最喜欢的无论数量还是质量都是上上乘的 \u003ca href=\"http://ionicons.com/\" target=\"_blank\" rel=\"noopener\"\u003eionicons\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e在线制作 Icon Font 的网站，比如 \u003ca href=\"http://fontastic.me\" target=\"_blank\" rel=\"noopener\"\u003eFontastic\u003c/a\u003e、\u003ca href=\"http://icomoon.io/\" target=\"_blank\" rel=\"noopener\"\u003eIconMoon\u003c/a\u003e\n可算是层出不穷。将 Icon Font 用于 iOS 开发的框架 \u003ca href=\"https://github.com/PrideChung/FontAwesomeKit\" target=\"_blank\" rel=\"noopener\"\u003eFontAwesomeKit\u003c/a\u003e\n也值得关注。\u003c/p\u003e\n\u003cp\u003e总结了这么多资源，接下来进入正题。为了方便将已有 Icon Font 当做参考来设计风格统一的自定义图标，\n自然需要一个方便的将 Icon Font 中的 Glyphs 导出成图片或者 SVG 的工具。\n这个系列的文章就来记录一下如何编写一个 OSX 下的 Icon Font 浏览器和导出器。\u003c/p\u003e\n\u003cp\u003e第一篇的内容是：浏览功能的实现。项目代码托管在\u003ca href=\"https://github.com/shanzi/iconfontr/\" target=\"_blank\" rel=\"noopener\"\u003e这里\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"u5EFA_u7ACB_u9879_u76EE\"\u003e\u003ca href=\"#u5EFA_u7ACB_u9879_u76EE\" class=\"headerlink\" title=\"建立项目\"\u003e\u003c/a\u003e建立项目\u003c/h2\u003e\u003cp\u003eOK，在 Xcode 里建立一个 cocoa 应用先。在新建项目的时候选中 Document-Based Application 的选项，\n以方便实现打开文件的功能。然后把 Document Extension 设为 ttf。如下图所示，我给这个 App 起名叫 Iconfontr。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/iconfontr/document-base.png\" alt=\"create project\"/\u003e\u003c/p\u003e\n\u003cp\u003e在开始编写代码之前先对项目做一个设置：在项目 Target 的 Info 标签页下的 Document Type\n设置为 Viewer (因为我们只需要浏览而不需要编辑 Icon Font)。\u003c/p\u003e\n\u003ch2 id=\"u8BFB_u5165_Font\"\u003e\u003ca href=\"#u8BFB_u5165_Font\" class=\"headerlink\" title=\"读入 Font\"\u003e\u003c/a\u003e读入 Font\u003c/h2\u003e\u003cp\u003e接下来是把 TTF 文件读入的工作，因为 \u003ccode\u003eNSFont\u003c/code\u003e 类并没有提供读取任意路径字体的方法(只能读取已安装字体)，我们需要先将字体\n读入为 \u003ccode\u003eCGFontRef\u003c/code\u003e 类型，再经过\u003ccode\u003eCTFontRef\u003c/code\u003e转换回\u003ccode\u003eNSFont\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在 IFDocument.h 中为 IFDocument 类添加一个属性。\u003c/p\u003e\n\u003cfigure class=\"highlight objectivec\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// IFDocument.h\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e@property\u003c/span\u003e(\u003cspan class=\"keyword\"\u003enonatomic\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ereadonly\u003c/span\u003e) \u003cspan class=\"built_in\"\u003eNSFont\u003c/span\u003e *font;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e重载 IFDocument 读入文件的函数：\u003c/p\u003e\n\u003cfigure class=\"highlight objectivec\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e- (\u003cspan class=\"built_in\"\u003eBOOL\u003c/span\u003e)readFromURL:(\u003cspan class=\"built_in\"\u003eNSURL\u003c/span\u003e *)url ofType:(\u003cspan class=\"built_in\"\u003eNSString\u003c/span\u003e *)typeName error:(\u003cspan class=\"built_in\"\u003eNSError\u003c/span\u003e *__autoreleasing *)outError\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// read font from url\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eCFURLRef\u003c/span\u003e theCFURL = (__bridge \u003cspan class=\"built_in\"\u003eCFURLRef\u003c/span\u003e)url;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eCGDataProviderRef\u003c/span\u003e dataProvider = \u003cspan class=\"built_in\"\u003eCGDataProviderCreateWithURL\u003c/span\u003e(theCFURL);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eCGFontRef\u003c/span\u003e theCGFont = \u003cspan class=\"built_in\"\u003eCGFontCreateWithDataProvider\u003c/span\u003e(dataProvider);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (theCGFont == \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e) \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eNO\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// cast CGFont back to NSFont\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eCTFontRef\u003c/span\u003e theCTFont = \u003cspan class=\"built_in\"\u003eCTFontCreateWithGraphicsFont\u003c/span\u003e(theCGFont, \u003cspan class=\"number\"\u003e16\u003c/span\u003e, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  _font = (__bridge \u003cspan class=\"built_in\"\u003eNSFont\u003c/span\u003e *) theCTFont;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eYES\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e怎么样获取某个字体文件包含的所有 Glyphs 呢？\u003ccode\u003eNSFont\u003c/code\u003e没有提供简单直接的函数，因此要自己想办法解决这个问题。\n首先可以通过 \u003ccode\u003e[font numberOfGlyphs]\u003c/code\u003e 获得到字体包含的 Glyphs 总数，而\u003ccode\u003eNSGlyph\u003c/code\u003e本身是整数类型，因此我们尝试使 \n\u003ccode\u003eglyph\u003c/code\u003e的值从\u003ccode\u003e1\u003c/code\u003e开始向后遍历，直到取出所有的 Glyphs 为止。\u003c/p\u003e\n\u003cp\u003e同时我们还可以用函数\u003ccode\u003e[font boundingRectForGlyph:glyph]\u003c/code\u003e获得到 Glyph 的 \u003ccode\u003eboundingRect\u003c/code\u003e，因此可以通过检测一个\nGlyph 的\u003ccode\u003eboundingRect\u003c/code\u003e是不是空来检查这个 Glyphs 是否存在。在上面的函数中\u003ccode\u003ereturn YES\u003c/code\u003e之前的地方加入如下代码。\n其中\u003ccode\u003e_glyphPathArray\u003c/code\u003e是一个\u003ccode\u003eNSMutableArray\u003c/code\u003e。 \u003c/p\u003e\n\u003cfigure class=\"highlight objectivec\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// get available glyphs\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eNSUInteger\u003c/span\u003e glyphCount = [_font numberOfGlyphs];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e_glyphPathArray = [[\u003cspan class=\"built_in\"\u003eNSMutableArray\u003c/span\u003e alloc] initWithCapacity:glyphCount];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"built_in\"\u003eNSUInteger\u003c/span\u003e i=\u003cspan class=\"number\"\u003e1\u003c/span\u003e; i\u0026lt;=glyphCount; i++) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eNSRect\u003c/span\u003e boundingRect = [_font boundingRectForGlyph:(\u003cspan class=\"built_in\"\u003eNSGlyph\u003c/span\u003e)i];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!\u003cspan class=\"built_in\"\u003eNSIsEmptyRect\u003c/span\u003e(boundingRect)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// convert glyph into bezier path\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eNSBezierPath\u003c/span\u003e *path = [[\u003cspan class=\"built_in\"\u003eNSBezierPath\u003c/span\u003e alloc] init];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [path moveToPoint:\u003cspan class=\"built_in\"\u003eNSMakePoint\u003c/span\u003e(-\u003cspan class=\"built_in\"\u003eNSMidX\u003c/span\u003e(boundingRect), -\u003cspan class=\"built_in\"\u003eNSMidY\u003c/span\u003e(boundingRect))];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [path appendBezierPathWithGlyph:(\u003cspan class=\"built_in\"\u003eNSGlyph\u003c/span\u003e)i inFont:_font];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [_glyphPathArray addObject:path];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e为什么这里不从\u003ccode\u003e0\u003c/code\u003e开始遍历呢？因为\u003ccode\u003eNSGlyph\u003c/code\u003e有两个保留的值，分别是\u003ccode\u003eNSControlGlyph = 0x00FFFFFF\u003c/code\u003e\n和\u003ccode\u003eNSNullGlyph = 0x0\u003c/code\u003e。因此值为\u003ccode\u003e0\u003c/code\u003e的 glyph 是不存在的，强制读取反而会产生乱码。\u003c/p\u003e\n\u003cp\u003e在上面的代码中值得注意的还有\u003ccode\u003eNSBezierPath\u003c/code\u003e的\u003ccode\u003eappendBezierPathWithGlyph: inFont:\u003c/code\u003e方法，\n就是这个方法使得我们有可能将某个字符的外形抽取出来，这也是整个 Viewer 的核心所在。\u003c/p\u003e\n\u003ch2 id=\"u663E_u793A_Glyphs\"\u003e\u003ca href=\"#u663E_u793A_Glyphs\" class=\"headerlink\" title=\"显示 Glyphs\"\u003e\u003c/a\u003e显示 Glyphs\u003c/h2\u003e\u003cp\u003e一般来说，是要用\u003ccode\u003eNSCollectionView\u003c/code\u003e来显示 Glyphs 的，不过习惯了 iOS 开发的开发者可能会觉得\n\u003ccode\u003eNSCollectionView\u003c/code\u003e的使用方法没有\u003ccode\u003eUICollectionView\u003c/code\u003e那么直观。\u003ccode\u003eNSCollectionView\u003c/code\u003e主要依赖 Bindings\n来显示内容，在某些时候可以节省很多代码，但是在需要细致定制的时候却有些麻烦。\u003c/p\u003e\n\u003cp\u003e这里采用一个模仿\u003ccode\u003eUICollectionView\u003c/code\u003e的第三方库 \u003ca href=\"https://github.com/jwilling/JNWCollectionView\" target=\"_blank\" rel=\"noopener\"\u003eJNWCollectionView\u003c/a\u003e，\n用 CocoaPods 安装这个依赖。运行\u003ccode\u003epod install\u003c/code\u003e 之后打开 \u003ccode\u003eiconfontr.xcworkspace\u003c/code\u003e 进行下一步的操作。\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003eIFDocument.xib\u003c/code\u003e 里加入并设置好\u003ccode\u003eJNWCollectionView\u003c/code\u003e，这里不再赘述。记得要将\u003ccode\u003eJNWCollectionView\u003c/code\u003e的\n\u003ccode\u003edataSource\u003c/code\u003e 指定为 \u003ccode\u003eFile\u0026#39;s Owner\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e显示 Glyph 的要点在于\u003ccode\u003eIFGlyphView\u003c/code\u003e(这个类是\u003ccode\u003eJNWCollectionViewCell\u003c/code\u003e的子类)。\n这个 View 重载了以下方法来将 Bezier 曲线绘制出来。\u003c/p\u003e\n\u003cfigure class=\"highlight objectivec\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e- (\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e)drawRect:(\u003cspan class=\"built_in\"\u003eNSRect\u003c/span\u003e)dirtyRect\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [\u003cspan class=\"keyword\"\u003esuper\u003c/span\u003e drawRect:dirtyRect];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [\u003cspan class=\"built_in\"\u003eNSGraphicsContext\u003c/span\u003e saveGraphicsState];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// selection\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"keyword\"\u003eself\u003c/span\u003e.selected) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eNSBezierPath\u003c/span\u003e *border = [\u003cspan class=\"built_in\"\u003eNSBezierPath\u003c/span\u003e bezierPathWithRect:\u003cspan class=\"keyword\"\u003eself\u003c/span\u003e.bounds];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [[\u003cspan class=\"built_in\"\u003eNSColor\u003c/span\u003e colorWithCalibratedRed:\u003cspan class=\"number\"\u003e0.3\u003c/span\u003e green:\u003cspan class=\"number\"\u003e0.5\u003c/span\u003e blue:\u003cspan class=\"number\"\u003e1.0\u003c/span\u003e alpha:\u003cspan class=\"number\"\u003e1.0\u003c/span\u003e] setStroke];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [border setLineWidth:\u003cspan class=\"number\"\u003e4.0\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [border stroke];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// transform coordinates\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eNSAffineTransform\u003c/span\u003e *transform = [\u003cspan class=\"built_in\"\u003eNSAffineTransform\u003c/span\u003e transform];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [transform translateXBy:\u003cspan class=\"built_in\"\u003eNSMidX\u003c/span\u003e(\u003cspan class=\"keyword\"\u003eself\u003c/span\u003e.bounds) yBy:\u003cspan class=\"built_in\"\u003eNSMidY\u003c/span\u003e(\u003cspan class=\"keyword\"\u003eself\u003c/span\u003e.bounds)];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [transform concat];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// draw path\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [[\u003cspan class=\"built_in\"\u003eNSColor\u003c/span\u003e blackColor] setFill];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [_bezierPath fill];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [\u003cspan class=\"built_in\"\u003eNSGraphicsContext\u003c/span\u003e restoreGraphicsState];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch2 id=\"u521D_u4E4B_u7ED3_u8BED\"\u003e\u003ca href=\"#u521D_u4E4B_u7ED3_u8BED\" class=\"headerlink\" title=\"初之结语\"\u003e\u003c/a\u003e初之结语\u003c/h2\u003e\u003cp\u003e在上文介绍的方法之后再加上一点交互，iconfontr 就初具雏形了。下图为用 iconfontr 浏览\n\u003ca href=\"http://ionicons.com/\" target=\"_blank\" rel=\"noopener\"\u003eionicons\u003c/a\u003e 图标的效果。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/iconfontr/result1.png\" alt=\"Basic Viewer\"/\u003e\u003c/p\u003e\n\u003cp\u003e可以发现，截止目前这个小 App 其实不限于显示 Icon Font，而是可以打开任何\nTTF 类型的字体。实际上，如果使用现在的 iconfontr 打开一个比较大的字体文件（比如包含上万字的中文字形）\n很可能会出现性能问题，好在一般的 Icon Font 只有不到1000个字形，因此就不做进一步的优化了。\u003c/p\u003e\n\u003cp\u003e当然，如果只是一个字体浏览器，就没有必要叫做 iconfontr 了。接下来还要针对 Icon Font\n的特点做一些特殊的优化，以下的功能会留到之后的文章中介绍：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用\u003ccode\u003eWindowController\u003c/code\u003e管理 Window 以实现更细致的控制\u003c/li\u003e\n\u003cli\u003e设置选中的 Glyph 的前景和背景颜色以便预览效果\u003c/li\u003e\n\u003cli\u003e缩放 Glyph\u003c/li\u003e\n\u003cli\u003e导出图片和 SVG\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e截止于这一步的代码在项目仓库的 \u003ca href=\"https://github.com/shanzi/iconfontr/tree/R01_BASIC_VIEWER\" target=\"_blank\" rel=\"noopener\"\u003eR01_BASIC_VIEWER\u003c/a\u003e\nTAG 上。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-04-12T13:03:28Z",
  "Author": "Chase Zhang"
}