{
  "Source": "io-meter",
  "Title": "More on Bezier Path",
  "Link": "https://io-meter.com/2014/05/14/more-detail-on-bezier-path/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e在之前讲解 Icon Font Viewer 和 SVG 的文章中，曾经简单介绍过 Bezier Path。\n这次再稍微介绍一点数学原理，另外针对 Bezier Path 使用上的一些问题进行更多的探讨。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e贝塞尔曲线最初应用于汽车主体设计，由法国工程师 Pierre Bézier 最早提出。\n现在在计算机图形学中具有的应用非常广泛，可以说，\n你在计算机上所看到的大多数矢量曲线，都是由 Bezier Path 绘制出来的。\u003c/p\u003e\n\u003cp\u003e目前常用的 Bezier 曲线有二阶和三阶两种。广泛使用的 TrueType 以二阶 Bezier 曲线为基础的，\nPostscript 则是使用三阶 Bezier 曲线的代表。三阶 Bezier 曲线已经可以满足大多数需求了，\n对于更高阶的曲线，可以使用这两种 Bezier 曲线来进行分段拟合。\u003c/p\u003e\n\u003cp\u003e下面先介绍 Bezier 曲线的数学表达式。\u003c/p\u003e\n\u003ch2 id=\"Bezier__u66F2_u7EBF_u7684_u6570_u5B66_u8868_u8FBE_u5F0F\"\u003e\u003ca href=\"#Bezier__u66F2_u7EBF_u7684_u6570_u5B66_u8868_u8FBE_u5F0F\" class=\"headerlink\" title=\"Bezier 曲线的数学表达式\"\u003e\u003c/a\u003eBezier 曲线的数学表达式\u003c/h2\u003e\u003cp\u003e最简单的 Bezier 曲线是一阶的——其实就是线段。它的参数形式是：\u003c/p\u003e\n\u003cp\u003e$$\\mathbf{B}^{(1)}(t)=\\mathbf{P}_0 + (\\mathbf{P}_1-\\mathbf{P}_0)t=(1-t)\\mathbf{P}_0 + t\\mathbf{P}_1 \\mbox{ , } t \\in [0,1]$$\u003c/p\u003e\n\u003cp\u003e观察上面的公式，在$t$取0到1之间的值时，$\\mathbf{B}(t)$的值就是在$\\mathbf{P}_0$和$\\mathbf{P}_1$之间线段上某一点的坐标。\n我们把$\\mathbf{P}_0$和$\\mathbf{P}_1$称为曲线的控制点，那么一阶 Bezier 曲线需要的控制点数量就是2。\n实际上，$n$阶 Bezier 曲线需要$n+1$个控制点。\u003c/p\u003e\n\u003cp\u003e一阶 Bezier 曲线还称不上“曲线”，使用最多的两种 Bezier 曲线是二阶和三阶的。\n二阶 Bezier 曲线的参数方程为：\u003c/p\u003e\n\u003cp\u003e$$\\mathbf{B}^{(2)}(t) = (1 - t)^{2}\\mathbf{P}_0 + 2t(1 - t)\\mathbf{P}_1 + t^{2}\\mathbf{P}_2 \\mbox{ , } t \\in [0,1]$$\u003c/p\u003e\n\u003cp\u003e三阶 Bezier 曲线的参数方程为：\u003c/p\u003e\n\u003cp\u003e$$\\mathbf{B}^{(3)}(t)=\\mathbf{P}_0(1-t)^3+3\\mathbf{P}_1t(1-t)^2+3\\mathbf{P}_2t^2(1-t)+\\mathbf{P}_3t^3 \\mbox{ , } t \\in [0,1]$$\u003c/p\u003e\n\u003cp\u003e对于$n$阶的 Bezier 曲线，有一个一般化的参数方程，这里就不再赘述。\n在目前的使用的计算机图形绘制系统中，最广泛使用的就是三阶 Beizer 的曲线，\n因为它的复杂度比较适中，尤其是用来拟合圆弧的时候非常方便，\nOSX 和 iOS 的绘图系统 CoreGraphic 就是使用的三阶 Bezier 曲线，\nSVG 标准上来说同时支持二阶和三阶 Bezier 曲线，但是不同浏览器在绘制的时候可能会有所不同。\u003c/p\u003e\n\u003cp\u003e下面有两个重要的性质在后面的讨论中可能会用到：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e$n$阶 Bezier 曲线经过它第一个控制点和最后一个控制点。\n只需要$t$分别设为$0$和$1$就可以看出来。\u003c/li\u003e\n\u003cli\u003e对于二阶以上的 Bezier 曲线，\n$\\mathbf{P}_0\\mathbf{P}_1$ 和 $\\mathbf{P}_{n-2}\\mathbf{P}_{n-1}$ 这两条线段同曲线相切。\u003c/li\u003e\n\u003cli\u003e$\\mathbf{B}(t) = (1-t)\\mathbf{B}(t) + t\\mathbf{B}(t)$\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"u4F7F_u7528_u9AD8_u9636_Bezier__u66F2_u7EBF_u62DF_u5408_u4F4E_u9636_Bezier__u66F2_u7EBF_u3002\"\u003e\u003ca href=\"#u4F7F_u7528_u9AD8_u9636_Bezier__u66F2_u7EBF_u62DF_u5408_u4F4E_u9636_Bezier__u66F2_u7EBF_u3002\" class=\"headerlink\" title=\"使用高阶 Bezier 曲线拟合低阶 Bezier 曲线。\"\u003e\u003c/a\u003e使用高阶 Bezier 曲线拟合低阶 Bezier 曲线。\u003c/h2\u003e\u003cp\u003e之前曾经提到过，一些图形系统只支持某一个阶次的 Bezier 曲线，\n比如 PostScript 和 Cocoa 就只支持三阶 Bezier 曲线。但是有些图形系统，\n比如 TrueType 和 SVG，都是支持 二阶 Bezier 曲线的。\n因此我们需要能够在只支持高阶 Bezier 曲线的图形系统中绘制低阶 Bezier 曲线。\u003c/p\u003e\n\u003cp\u003e实际上利用上面的第三个属性，这件事是可以精确做到的(每个点都可以相吻合)。\n这里只给出二阶升三阶的过程：\u003c/p\u003e\n\u003cp\u003e对于二阶 Bezier 曲线 $\\mathbf{B}^{(2)}(t)$，将其表达式带入第三条性质，有\u003c/p\u003e\n\u003cp\u003e$$\\begin{eqnarray*}\n\\mathbf{B}^{(2)}(t) \u0026amp; = \u0026amp; (1-t)\\mathbf{B}^{(2)}(t)+t\\mathbf{B}^{(2)}(t)\\\\\n \u0026amp; = \u0026amp; (1-t)^{3}\\mathbf{P}_{0}+(1-t)^{2}t\\mathbf{P}_{0}+2(1-t)^{2}t\\mathbf{P}_{1}+\\\\\n \u0026amp;  \u0026amp; 2(1-t)t^{2}\\mathbf{P}_{1}+(1-t)t^{2}\\mathbf{P}_{2}+t^{3}\\mathbf{P}_{2}\\\\\n \u0026amp; = \u0026amp; (1-t)^{3}\\mathbf{P}_{0}+3(1-t)^{2}t\\frac{\\mathbf{P}_{0}+2\\mathbf{P}_{1}}{3}+\\\\\n \u0026amp;  \u0026amp; 3(1-t)t^{2}\\frac{2\\mathbf{P}_{1}+\\mathbf{P}_{2}}{3}+t^{3}\\mathbf{P}_{2}\n\\end{eqnarray*}$$\u003c/p\u003e\n\u003cp\u003e取下列变换代入原式\u003c/p\u003e\n\u003cp\u003e$$\\begin{eqnarray*}\n\\mathbf{P}’_{0} \u0026amp; = \u0026amp; \\mathbf{P}_{0}\\\\\n\\mathbf{P}’_{1} \u0026amp; = \u0026amp; \\frac{\\mathbf{P}_{0}+2\\mathbf{P}_{1}}{3}\\\\\n\\mathbf{P}’_{2} \u0026amp; = \u0026amp; \\frac{2\\mathbf{P}_{1}+\\mathbf{P_{2}}}{3}\\\\\n\\mathbf{P}’_{3} \u0026amp; = \u0026amp; \\mathbf{P}_{2}\n\\end{eqnarray*}$$\u003c/p\u003e\n\u003cp\u003e恰好可以得到三阶 Bezier 曲线$\\mathbf{B}^{(3)}(t)$的表达形式。这样我们就可以使用三阶 Bezier 曲线来精确绘制出二阶\nBezier 曲线。也正因为如此，在目前绝大部分的计算机图形系统中，都是只提供三阶 Bezier 曲线的绘制函数。\u003c/p\u003e\n\u003cp\u003e下面是一个使用 SVG 绘制的例子(需浏览器支持才能查看)，你可以通过查看页面源码看到具体的实现。\n从左往右，依次是二阶 Bezier 曲线、三阶 Bezier 曲线和将二者重叠起来的效果。可以看到两条曲线是完全吻合的。\u003c/p\u003e\n\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"auto\" viewBox=\"0 0 400 150\" enable-background=\"new 0 0 400 200\" xml:space=\"preserve\"\u003e\n\u003cpath fill=\"transparent\" stroke=\"#F00\" stroke-width=\"2\" d=\"M30,30 Q30,90 90,90\"\u003e\u003c/path\u003e\n\u003cpath fill=\"transparent\" stroke=\"#000\" stroke-width=\"2\" d=\"M130,30 C130,70 150,90 190,90\"\u003e\u003c/path\u003e\n\u003cpath fill=\"transparent\" stroke=\"#F00\" stroke-width=\"4\" d=\"M230,30 Q230,90 290,90\"\u003e\u003c/path\u003e\n\u003cpath fill=\"transparent\" stroke=\"#000\" stroke-width=\"1\" d=\"M230,30 C230,70 250,90 290,90\"\u003e\u003c/path\u003e\n\u003ctext x=\"30\" y=\"110\"\u003eQuadratic\u003c/text\u003e\n\u003ctext x=\"130\" y=\"110\"\u003eCubic\u003c/text\u003e\n\u003ctext x=\"230\" y=\"110\"\u003eOverlap\u003c/text\u003e\n\u003ccircle cx=\"30\" cy=\"30\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"30\" cy=\"90\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"90\" cy=\"90\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"130\" cy=\"30\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"130\" cy=\"70\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"150\" cy=\"90\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"190\" cy=\"90\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003cpolyline fill=\"transparent\" stroke=\"#999\" points=\"30,30 30,90 90,90\"\u003e\u003c/polyline\u003e\n\u003cpolyline fill=\"transparent\" stroke=\"#999\" points=\"130,30 130,70 150,90 190,90\"\u003e\u003c/polyline\u003e\n\u003c/svg\u003e\n\n\u003ch2 id=\"u7528_u4F4E_u9636_u66F2_u7EBF_u8868_u793A_u9AD8_u9636_u66F2_u7EBF_uFF1F\"\u003e\u003ca href=\"#u7528_u4F4E_u9636_u66F2_u7EBF_u8868_u793A_u9AD8_u9636_u66F2_u7EBF_uFF1F\" class=\"headerlink\" title=\"用低阶曲线表示高阶曲线？\"\u003e\u003c/a\u003e用低阶曲线表示高阶曲线？\u003c/h2\u003e\u003cp\u003e接下来自然有一个问题，如果我有一个高阶的曲线需要绘制，而系统只支持低阶曲线，那么应该如何实现呢？\n很不幸的是，使用有限条低阶的曲线是没有办法精确的绘制出需要的高阶曲线的，一般使用的方法是逼近法。\n一个比较常用的技巧是将高阶曲线分割为两个部分，对这两个部分分别使用低一阶的曲线进行逼近，从而获得一个比较好的效果。\u003c/p\u003e\n\u003cp\u003e关于这个主题，\u003ca href=\"http://www.caffeineowl.com/graphics/2d/vectorial/cubic2quad01.html\" target=\"_blank\" rel=\"noopener\"\u003e这篇文章\u003c/a\u003e\n中有详细的介绍，涵盖了：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e使用一条低阶曲线逼近高一阶曲线的方法\u003c/li\u003e\n\u003cli\u003e使用两条曲线逼近高一阶曲线前后两部分的方法\u003c/li\u003e\n\u003cli\u003e可变数量的曲线动态逼近高一阶曲线的算法\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e使用低阶曲线逼近高阶曲线是一个比较复杂的问题，而且没有一个很简洁且效果很好的通用公式。\n这里就不赘述了。\u003c/p\u003e\n\u003cp\u003e一个更实用的方法是直接用折线去逼近高阶曲线。实际上，即使是二阶和三阶 Bezier 曲线，\n具体实现中也是使用同样的方法。既然知道了高阶曲线的参数方程，直接使用方程来分段成折线绘制自然最好不过了。\n需要注意的是，为了获得较好的效果和性能，一般来说不会使用均匀的折线分段。\n一个比较简单的算法就是在曲线曲率较大的地方多安排分段，反之少安排分段。\u003c/p\u003e\n\u003ch2 id=\"u4F7F_u7528_u4E09_u9636_Bezier__u66F2_u7EBF_u903C_u8FD1_u5706_u5F27\"\u003e\u003ca href=\"#u4F7F_u7528_u4E09_u9636_Bezier__u66F2_u7EBF_u903C_u8FD1_u5706_u5F27\" class=\"headerlink\" title=\"使用三阶 Bezier 曲线逼近圆弧\"\u003e\u003c/a\u003e使用三阶 Bezier 曲线逼近圆弧\u003c/h2\u003e\u003cp\u003e圆弧是另一个我们经常使用的平面曲线，下面是圆的参数方程：\u003c/p\u003e\n\u003cp\u003e$$\n\\begin{eqnarray*}\nx=r\\cos\\theta\\\\\ny=r\\sin\\theta\n\\end{eqnarray*}.\n$$\u003c/p\u003e\n\u003cp\u003e可以看出，如果要精确绘制圆弧，我们不得不计算$\\sin\\theta$和$\\cos\\theta$的值，\n这对于计算机来说，是一个成本很高、得不偿失的工作。使用具有多项式表达式的三阶 Bezier \n曲线来逼近圆弧就成为了一个很好的选择。\u003c/p\u003e\n\u003cp\u003e我们是无法使用一条完整的 Bezier 曲线来绘制整个圆的，常用的方法是用一条 Bezier 曲线去逼近一个四分之一圆弧，\n使用四条曲线组成一个圆。\u003c/p\u003e\n\u003cp\u003e简便起见，取圆心在原点的单位圆在第一象限的四分之一圆弧进行讨论。由上面所提到的\nBezier 曲线的第一条性质，可以得到用来用来逼近这个圆弧的 Bezier 曲线一定满足：\u003c/p\u003e\n\u003cp\u003e$$\n\\begin{eqnarray*}\n\\mathbf{P}_{0} \u0026amp; = \u0026amp; (0,1)\\\\\n\\mathbf{P}_{3} \u0026amp; = \u0026amp; (1,0)\n\\end{eqnarray*}\n$$\u003c/p\u003e\n\u003cp\u003e这是因为我们指定的圆弧必定经过$(0,1)$和$(1,0)$这两个点，因此用来逼近的 Bezier 曲线也应该经过这个点。\u003c/p\u003e\n\u003cp\u003e同理，因为圆弧在这两点的切线分别平行于$x$轴和$y$轴，由第二条性质，$\\mathbf{P}_1$的$x$坐标必定为$1$，\n$\\mathbf{P}_2$的$y$坐标必定为$1$。同时因为圆弧是对称的，$\\mathbf{P}_1$的$y$坐标和\n$\\mathbf{P}_2$的$x$坐标一定是相同的，将其设为$\\lambda$，此时 Bezier 曲线的表达式可以化简为：\u003c/p\u003e\n\u003cp\u003e$$\n\\begin{eqnarray*}\nC_{x}(t) \u0026amp; = \u0026amp; 3(1-t^{2})t\\lambda+3(1-t)t^{2}+t^{3}\\\\\nC_{y}(t) \u0026amp; = \u0026amp; (1-t)+3(1-t^{2})t+3(1-t)t^{2}\\lambda\n\\end{eqnarray*}\n$$\u003c/p\u003e\n\u003cp\u003e其中$C_{x}(t)$和$C_{y}(t)$分别代表三阶 Bezier 曲线的$x$和$y$坐标关于参数$t$的函数。\u003c/p\u003e\n\u003cp\u003e此外，我们的圆弧肯定经过$(\\frac{\\sqrt{2}}{2}, \\frac{\\sqrt{2}}{2})$这个点，\n使 Bezier 曲线经过这个点，且由对称性此时需有$t=0.5$。 代入上面的式子，我们可以解出。\u003c/p\u003e\n\u003cp\u003e$$\n\\lambda = \\frac{4}{3}(\\sqrt{2}-1)\\approx 0.5522847498\n$$\u003c/p\u003e\n\u003cp\u003e至此我们就可以绘制出来一个比较完美的四分之一圆弧了，为了绘制一整个圆，\n可以使用四个这样的 Bezier 曲线来实现。不同半径的圆只要按比例缩放上面这个参数就可以达到目的。\n实际上使用三阶 Bezier 曲线，我们还可以方便的绘制出非$\\frac{\\pi}{2}$弧度的圆弧。\n具体的公式可以在这个\u003ca href=\"http://itc.ktu.lt/itc354/Riskus354.pdf\" target=\"_blank\" rel=\"noopener\"\u003e参考文献\u003c/a\u003e中找到。\u003c/p\u003e\n\u003cp\u003e下面是一个使用 SVG 的绘制演示，最左边是使用三阶圆弧绘制的效果，中间是使用 SVG 内置的 Arc 命令绘制的效果，\n最右边的是将两个结果重叠在一起的效果，可以看出来是完全吻合的。这是因为在绝大部分 SVG 的绘制系统中，\n其实就是使用三阶 Bezier 曲线来绘制圆弧的。\u003c/p\u003e\n\u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"auto\" viewBox=\"0 0 400 150\" enable-background=\"new 0 0 400 200\" xml:space=\"preserve\"\u003e\n\u003cpath fill=\"transparent\" stroke=\"#F00\" stroke-width=\"2\" d=\"M10,10 C54.1824,10 90,45.8176 90,90\"\u003e\u003c/path\u003e\n\u003cpath fill=\"transparent\" stroke=\"#000\" stroke-width=\"2\" d=\"M100,10 A80,80 0 0 1 180,90\"\u003e\u003c/path\u003e\n\u003cpath fill=\"transparent\" stroke=\"#F00\" stroke-width=\"4\" d=\"M200,10 C244.1827,10 280,45.8176 280,90\"\u003e\u003c/path\u003e\n\u003cpath fill=\"transparent\" stroke=\"#000\" stroke-width=\"2\" d=\"M200,10 A80,80 0 0 1 280,90\"\u003e\u003c/path\u003e\n\u003ctext x=\"10\" y=\"110\"\u003eBezier Path\u003c/text\u003e\n\u003ctext x=\"130\" y=\"110\"\u003eArc\u003c/text\u003e\n\u003ctext x=\"210\" y=\"110\"\u003eOverlap\u003c/text\u003e\n\u003ccircle cx=\"10\" cy=\"10\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"54.1824\" cy=\"10\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"90\" cy=\"45.8176\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003ccircle cx=\"90\" cy=\"90\" r=\"2\" fill=\"#F0F\"\u003e\u003c/circle\u003e\n\u003cpolyline fill=\"transparent\" stroke=\"#999\" points=\"10,10 54.1824,10 90,45.8176 90,90\"\u003e\u003c/polyline\u003e\n\u003cpolyline fill=\"transparent\" stroke=\"#99f\" points=\"10,10 10,90, 90,90\"\u003e\u003c/polyline\u003e\n\u003cpolyline fill=\"transparent\" stroke=\"#99f\" points=\"100,10 100,90, 180,90\"\u003e\u003c/polyline\u003e\n\u003cpolyline fill=\"transparent\" stroke=\"#99f\" points=\"200,10 200,90, 280,90\"\u003e\u003c/polyline\u003e\n\u003c/svg\u003e\n\n\u003ch2 id=\"u603B_u7ED3_u548C_u6269_u5C55\"\u003e\u003ca href=\"#u603B_u7ED3_u548C_u6269_u5C55\" class=\"headerlink\" title=\"总结和扩展\"\u003e\u003c/a\u003e总结和扩展\u003c/h2\u003e\u003cp\u003e在这篇文章讨论了二维平面上的 Bezier 曲线的一些特性，只要改变控制点的维度，\n就可以很容易地将其推广到三维甚至更高维空间上去。\u003c/p\u003e\n\u003cp\u003e现在，在 Bezier 曲线的基础上还发展出了 B 样条，并能够进一步推广为 NURBS (非均匀有理B样条)。\nNURBS 在 3D 建模和工业设计上使用非常广泛，常用的 3D 制作软件，如 Maya、Rhino、Blender 等都支持 NURBS。\n下图是在 Blender 中显示一个简单 NURBS 表面的效果。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/NURBS-blender.png\" alt=\"NURBS on blener\"/\u003e\u003c/p\u003e\n\u003cp\u003e关于 Bezier 曲线还有很多值得讨论的东西，希望这篇文章对相关学习提供一定的帮助。\u003c/p\u003e\n\u003ch3 id=\"u53C2_u8003_u6587_u732E\"\u003e\u003ca href=\"#u53C2_u8003_u6587_u732E\" class=\"headerlink\" title=\"参考文献\"\u003e\u003c/a\u003e参考文献\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/B-spline\" target=\"_blank\" rel=\"noopener\"\u003ehttp://en.wikipedia.org/wiki/B-spline\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\" target=\"_blank\" rel=\"noopener\"\u003ehttp://en.wikipedia.org/wiki/B%C3%A9zier_curve\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://itc.ktu.lt/itc354/Riskus354.pdf\" target=\"_blank\" rel=\"noopener\"\u003ehttp://itc.ktu.lt/itc354/Riskus354.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.caffeineowl.com/graphics/2d/vectorial/cubic2quad01.html\" target=\"_blank\" rel=\"noopener\"\u003ehttp://www.caffeineowl.com/graphics/2d/vectorial/cubic2quad01.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\" target=\"_blank\" rel=\"noopener\"\u003ehttps://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-05-14T11:04:51Z",
  "Author": "Chase Zhang"
}