{
  "Source": "io-meter",
  "Title": "分布式索引设计实验 in Go",
  "Link": "https://io-meter.com/2014/06/22/distribute-indexing-experimentin-go/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e作为一个 Go 语言门外汉，这段时间刚刚使用 Go 实现了一个分布式索引系统的仿真实验，\n这篇文章就来总结一下实现过程和经验。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e分布式储存的索引技术是分布式储存的一个技术重点，为了验证一种索引的设计，\n自然要设计一个仿真测试来验证各项性能指标是否令人满意。\u003c/p\u003e\n\u003cp\u003e在实现系统之前，我对 Go 语言的认知水平还很初级，选择并不熟悉的 Go 语言作为实现语言的原因主要由以下几条：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGo 语言有比较方便的包管理方案，譬如使用\u003ccode\u003ego get\u003c/code\u003e命令和第三方的 \u003ca href=\"https://github.com/tools/godep\" target=\"_blank\" rel=\"noopener\"\u003egodep\u003c/a\u003e\n包来实现依赖管理非常方便。在实验中因为要使用第三方的 B+ Tree 实现，因此 Go\n语言成为了一个很好的选择\u003c/li\u003e\n\u003cli\u003eGo 语言有出色的编译和执行速度。作为一种编译执行的语言，既能像脚本语言那样获得这么好的编译速度，\n又可以获得较好的执行效率，这对于一个要填充较大数据量的仿真实验来说是一个相当吸引人的特性。\u003c/li\u003e\n\u003cli\u003eGo 语言的语法相对简洁又不失强大。虽然最初接触时，感觉 Go 语言的语法比较纠结。\n但是相比起来要比 C++ 简洁很多，功能反过来又比 C 更为丰富。带有垃圾回收的特性使其最终脱颖而出。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下面详细介绍系统的设计。\u003c/p\u003e\n\u003ch2 id=\"Problem_Description\"\u003e\u003ca href=\"#Problem_Description\" class=\"headerlink\" title=\"Problem Description\"\u003e\u003c/a\u003eProblem Description\u003c/h2\u003e\u003cp\u003e在介绍我设计的系统之前，先介绍一下问题以及对应的需求。同时，在这一步还会尽可能地将问题简化。\u003c/p\u003e\n\u003cp\u003e假定我们有一个由 $n$ 个储存节点组成的分布式储存系统，每个节点分别储存了总体数据的一部分。\n随后有一段连续的查询请求，这些查询请求可能随机访问系统中的任何一个节点。\n如果被请求的节点当中不包含这个数据，那么它要负责到对应的节点中去寻找数据并返回给客户端。\u003c/p\u003e\n\u003cp\u003e一个简单的双层索引的设计是：每个节点都有一个 Local Index 和一个 Global Index。\n在接收到查询之后，先在 Local Index 当中查找，查找失败之后，再在 Global Index 中查找可能包含目标数据的节点。\n此外我们还希望，如果一个查询多对应的目标数据在整个系统中都不存在，那么应该尽可能早的发现，\n从而避免转发查询这个成本较高的操作。所以在双层索引中，我们希望在查找 Global Index 的时候，\n就可以尽可能确定查询的目标数据是否存在。\u003c/p\u003e\n\u003cp\u003e一般用 False Positive 这个指标来衡量上述需求。所谓 False Positive，简单来说可以认为是一个系统中不存在的数据，\n在 Global Index 当中查询的时候认为他是存在的。Global Index 最直接的设计就是把每个节点的 Local Index\n原封不动地放在一起。这种方法可以保证没有 False Positive，但是却要占用较大的空间，\n必须要进行一定的 Trade Off，使得在空间可以接受的范围内实现尽可能低的 False Positive 值。\u003c/p\u003e\n\u003cp\u003e此外还要求查询 Global Index 的查询成本要远少于 Local Index，\n在这种情况下，我们可以把双层的索引模型改为总是先查找 Global Index，决定所在节点之后，再查找 Local Index。\u003c/p\u003e\n\u003cp\u003e为了简化问题，整个测试的系统中储存的数据看成是静态的。也就是说，实验的步骤是先将所有的测试数据插入系统，\n再执行测试查询。测试过程中，也不考虑为数据建立冗余备份等问题。\u003c/p\u003e\n\u003ch2 id=\"Model\"\u003e\u003ca href=\"#Model\" class=\"headerlink\" title=\"Model\"\u003e\u003c/a\u003eModel\u003c/h2\u003e\u003cp\u003e在我设计的系统中，使用的三个重要的模型和数据结构分别是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFat Tree\u003c/li\u003e\n\u003cli\u003eB+ Tree\u003c/li\u003e\n\u003cli\u003eBloom Filter\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下面分别介绍这几个模型及其作用。\u003c/p\u003e\n\u003ch3 id=\"Fat_Tree\"\u003e\u003ca href=\"#Fat_Tree\" class=\"headerlink\" title=\"Fat Tree\"\u003e\u003c/a\u003eFat Tree\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Fat_tree\" target=\"_blank\" rel=\"noopener\"\u003eFat Tree\u003c/a\u003e 并不是什么储存数据的数据结构，而是一种常见的网络拓扑模型。\n为了计算搜索请求从一个服务器转发到另一个服务器的时间消耗，就可以使用 Fat Tree 这种结构。\u003c/p\u003e\n\u003cp\u003e将 Fat Tree 称为树其实有点不准确，他其实更像是一种星型的网络。一个三层的 Fat Tree 结构包含核心层、\n聚合层和边缘层三个层次，都有路由器构成。设 Fat Tree 中的每个路由有 $k$ 个端口，\n我们把边缘层的每个路由的端口一半用来连接主机，一半用来链接聚合层。同时把\n$\\frac{k}{2}$ 个边缘层的路由与 $\\frac{k}{2}$ 个聚合层的节点放在一起，构成一个完全二分图，称之为一个 Pod。\n每个聚合层的路由和 $\\frac{k}{2}$ 个核心层的节点链接，同一个 Pod 中不同的聚合层路由连接的核心层路由是不重复的。\n显而易见，我们需要 $\\frac{k^2}{4}$ 个核心层路由，可以连接的主机总数是 $\\frac{k^3}{4}$ 。\u003c/p\u003e\n\u003cp\u003e由以上方式构造出的网络，有一个特点是每个路由的 $k$ 个端口都被利用了。整个网络中，任意两个主机之间通信，\n经过的边数只有三种可能：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e同一个边缘层路由所连接的主机之间需经过 2 条边\u003c/li\u003e\n\u003cli\u003e同一个 Pod 不同边缘层路由所连接的主机之间需经过 4 条边\u003c/li\u003e\n\u003cli\u003e不同 Pod 中的主机之间需经过 6 条边\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e一个 $k=4$ 的 Fat Tree 的例子如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/fattree.png\" alt=\"Fat Tree\"/\u003e\u003c/p\u003e\n\u003cp\u003e将主机从左到右编号，给定 $k$ 、通信发起节点 a 和目标节点 b，用 Go 编写的计算跳转次数的函数如下。\n因在我们的系统中，b 要把查找结果返回给 a，因此所有的路由次数都乘了二。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eTransferCost\u003c/span\u003e\u003cspan class=\"params\"\u003e(k, a, b \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"title\"\u003eint\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    hk := k / \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eswitch\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e a/hk == b/hk:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e a/k == b/k:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e8\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e12\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch3 id=\"B+_Tree\"\u003e\u003ca href=\"#B+_Tree\" class=\"headerlink\" title=\"B+ Tree\"\u003e\u003c/a\u003eB+ Tree\u003c/h3\u003e\u003cp\u003e关于 \u003ca href=\"https://en.wikipedia.org/wiki/B%2B_tree\" target=\"_blank\" rel=\"noopener\"\u003eB+ Tree\u003c/a\u003e 的内容不用赘述了，它是一种常见的索引结构。\n它用于储存 $n$ 个元素的空间复杂度是 $O(n)$，插入、查找和删除的时间复杂度都是 $O(\\log_b n)$，\n是一种非常有效率的索引方式。\u003c/p\u003e\n\u003cp\u003e前面说过，之所以选择 Go 语言来编写这个实验，一个重要的原因就在于 Go 方便的依赖管理机制，\n你可以直接使用托管在 Github 等处的代码，只需要使用\u003ccode\u003ego get\u003c/code\u003e命令将代码抓取过来即可。\n在这里，我使用了 \u003ca href=\"https://github.com/cznic/b/\" target=\"_blank\" rel=\"noopener\"\u003ecznic/b\u003c/a\u003e 这个第三方库。\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ego get github.com/cznic/b/\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在本文中只使用了一个依赖关系，但是对于有多个依赖的项目，我们可能需要一个类似于 Python 的 pip 或者 ruby 的 gem\n这样的工具。更近一步，为了隔离不同项目的环境，一个类似 ruby bundle 的工具将会极大地提高生产力。\n\u003ca href=\"https://github.com/pote/gpm\" target=\"_blank\" rel=\"noopener\"\u003egpm\u003c/a\u003e 和 \u003ca href=\"https://github.com/pote/gvp\" target=\"_blank\" rel=\"noopener\"\u003egvp\u003c/a\u003e 搭档使用是一个比较好的解决方案。\u003c/p\u003e\n\u003cp\u003e我使用 B+ Tree 作为实验中每个节点的 Local Index，为了计算查询 B+ Tree 的计算成本，\n可以充分利用 Go 语言提供的函数式编程的能力，使用闭包获得上下文环境来统计比较次数。\n\u003ccode\u003ecznic/b\u003c/code\u003e这个 B+ Tree 实现允许传入一个函数作为比较 Key 大小的函数。我使用了下面的结构体定义一个 Node 。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e Node \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    id          \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    bloomSize   \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    hashCount   \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cmpCount    \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"comment\"\u003e// a field to count comparing on this node\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    bplusTree   *b.Tree\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    bloomFilter []\u003cspan class=\"keyword\"\u003euint64\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    itemCount   \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e用下面的方法来初始化一个 Node 及其 B+ Tree。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003en := \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e(Node)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003en.bplusTree = b.TreeNew(\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e(a, b \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e \u003cspan class=\"title\"\u003eint\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        na := a.(\u003cspan class=\"keyword\"\u003euint64\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        nb := b.(\u003cspan class=\"keyword\"\u003euint64\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        n.cmpCount++ \u003cspan class=\"comment\"\u003e// count comparing\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eswitch\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e na \u0026gt; nb:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e na == nb:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003edefault\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e-1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    })\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e得益于 Go 支持匿名函数以及闭包，我们能够比较优雅的实现这个功能。\u003c/p\u003e\n\u003ch3 id=\"Bloom_Filter\"\u003e\u003ca href=\"#Bloom_Filter\" class=\"headerlink\" title=\"Bloom Filter\"\u003e\u003c/a\u003eBloom Filter\u003c/h3\u003e\u003cp\u003e在 Global Index 这里，我选择了一个非常简单的解决方案：\u003ca href=\"https://en.wikipedia.org/wiki/Bloom_filter\" target=\"_blank\" rel=\"noopener\"\u003eBloom Filter\u003c/a\u003e。\n简单来说， Bloom Filter 就是在插入数据时使用 $k$ 个不同的哈希函数，把一个 Key 映射到一个整型数组上的不同的位置，\n并将对应的位置标记为1。在查询的时候，对请求的键使用相同的哈希函数进行哈希，检查对应的 $k$ 个位置是否都为 1。\n如果是的话，键对应的就值很可能存在，否则一定不存在。\u003c/p\u003e\n\u003cp\u003e为了节省空间，我们以单个二进制位为单位进行标记，设数组中的所有\u003ccode\u003eInt\u003c/code\u003e元素共有 $m$ 个比特位，储存的数据共有 $n$ 个，\n那么理论上对 Bloom Filter 查询的 False Positive 概率的估计公式为：\u003c/p\u003e\n\u003cp\u003e$$\\left(1-e^{-kn/m} \\right)^k$$\u003c/p\u003e\n\u003cp\u003e从上面的公式可以看出，Bloom Filter 虽然有实现简单、占用空间小的优点，但是储存的数据量越大，False Positive 的概率越高，\n过滤的效果也越差。同时，Bloom Filter 对于删除元素的操作没有很方便的处理方法，\n在删除时维护 Bloom Filter 的复杂度比较高。\u003c/p\u003e\n\u003cp\u003e在不考虑删除元素的情况下， Bloom Filter 还是很好的一个选择。\n而且 Go 语言的标准库中，已经提供了 MD5、SHA1、ADLER32 以及 CRC64 等哈希算法的实现，只需 import 进来即可使用，\n非常方便：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;crypto/md5\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;crypto/sha1\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;hash/adler32\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;hash/crc64\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch2 id=\"u6D4B_u8BD5_u6570_u636E_u7684_u751F_u6210_u53CA_u6587_u4EF6_u8BFB_u53D6\"\u003e\u003ca href=\"#u6D4B_u8BD5_u6570_u636E_u7684_u751F_u6210_u53CA_u6587_u4EF6_u8BFB_u53D6\" class=\"headerlink\" title=\"测试数据的生成及文件读取\"\u003e\u003c/a\u003e测试数据的生成及文件读取\u003c/h2\u003e\u003cp\u003e为了测试我们设计的系统的性能，需要生成一些特定分布的测试数据以及对应的查询数据。\n两种比较常用的分布是均匀分布和 \u003ca href=\"https://en.wikipedia.org/wiki/Zipf_distribution\" target=\"_blank\" rel=\"noopener\"\u003eZipf\u003c/a\u003e 分布。\n特别值得一提的是 Zipf 分布，包括英语中单词的出现频率在内，很多重要的数据都服从这一分布。\n因此在搜索引擎使用的关键词索引系统中就应该特别重视这种分布。\u003c/p\u003e\n\u003cp\u003e为了简化问题，这里采取了事先生成一批两种分布的测试数据，在测试的时候依次读出并插入索引的方案。\n测试数据都是整型数字，并且作为键插入到 B+ Tree 中。使用 Python 中的 numpy 库生成特定分布的随机数据的方法如下：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enp.random.normal(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1280000\u003c/span\u003e, \u003cspan class=\"number\"\u003e100000\u003c/span\u003e).astype(int) \u003cspan class=\"comment\"\u003e# 生成 100000 个 0~1280000 之内的均匀分布随机数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enp.random.zipf(\u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e100000\u003c/span\u003e) \u003cspan class=\"comment\"\u003e# 生成参数 a=2 的 100000 个 Zipf 分布的随机数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e将生成的数据保存成文本文件，接下来只要在 Go 程序里读取出来就好了。作为一个 Python 重度用户，\n在这里我很想使用类似 Generator 那样的语法，让函数每次输出一个文件中的数字。 Go 语言虽然没有\u003ccode\u003eyield\u003c/code\u003e那样的语法，\n但是可以通过 channel 和 goroutine 来实现相近的功能。写出来是像下面这样：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eiterFile\u003c/span\u003e\u003cspan class=\"params\"\u003e(filepath \u003cspan class=\"keyword\"\u003estring\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"title\"\u003echan\u003c/span\u003e \u003cspan class=\"title\"\u003euint64\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ch := \u003cspan class=\"built_in\"\u003emake\u003c/span\u003e(\u003cspan class=\"keyword\"\u003echan\u003c/span\u003e \u003cspan class=\"keyword\"\u003euint64\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ego\u003c/span\u003e \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fi, err := os.Open(filepath)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003epanic\u003c/span\u003e(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003edefer\u003c/span\u003e fi.Close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e i \u003cspan class=\"keyword\"\u003euint64\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            _, err := fmt.Fscanf(fi, \u003cspan class=\"string\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e, \u0026amp;i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err == io.EOF {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"built_in\"\u003epanic\u003c/span\u003e(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ch \u0026lt;- i\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eclose\u003c/span\u003e(ch)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ch\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e值得注意的是\u003ccode\u003edefer fi.Close()\u003c/code\u003e这行，\u003ccode\u003edefer\u003c/code\u003e关键字生成的指令会在当前 goroutine\n结束的时候执行，避免忘记释放文件的问题，是一个很优雅的语法。\n更方便是，我们还可以可以使用\u003ccode\u003efor\u003c/code\u003e循环来不断从 channel 中取数值。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efor i := range iterFile(\u0026#34;somefile.txt\u0026#34;) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // do somthing ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在研究 channel 的时候，我发现尽管在函数中可以同时返回多个值，但 Go 语言中并没有元组这样的类型。\n所以也就不能建立一次传输多个值的 channel （除非使用\u003ccode\u003einterface{}\u003c/code\u003e），这也算关于 Go 语言的一个小细节吧。\u003c/p\u003e\n\u003ch2 id=\"u8FDB_u884C_u4EFF_u771F_u5B9E_u9A8C\"\u003e\u003ca href=\"#u8FDB_u884C_u4EFF_u771F_u5B9E_u9A8C\" class=\"headerlink\" title=\"进行仿真实验\"\u003e\u003c/a\u003e进行仿真实验\u003c/h2\u003e\u003cp\u003e为了均衡各个服务器储存的数据量，可以先对要插入的键进行哈希处理，\n再根据哈希过的值决定存放在哪个节点。这样可以很好地将 Zipf 这样密度分布不平衡的数据均匀的分散开。\n接下来就可以进行仿真实验了。\u003c/p\u003e\n\u003cp\u003e对均匀分布和 Zipf 分布的数据进行 100000 次查询的仿真结果如下：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e* Testing Uniform Distribution Sparse Set\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eInserting Keys ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eKeys Inserted:               235195\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTesting Point Search ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Comparing:           2.18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage OK Comparing:        10.02\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Fail Comparing:      10.90\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Transfer Cost:       2.50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFalse Positive Proportion:   3.92%\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* Testing Zipf Distribution Sparse Set\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eInserting Keys ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eKeys Inserted:               230581\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTesting Point Search ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Comparing:           8.06\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage OK Comparing:        9.58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Fail Comparing:      10.92\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Transfer Cost:       9.78\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFalse Positive Proportion:   3.42%\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch2 id=\"u603B_u7ED3\"\u003e\u003ca href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e这篇文章总结了我最近实现的一个简单的分布式索引仿真测试的程序。\n当前的系统设计其实过于简单了，譬如没有考虑到数据的冗余备份等问题。但是总体来看对于两种分布，\n系统的表现还是令人满意的。 \u003c/p\u003e\n\u003cp\u003e在实现程序的过程中，我对 Go 语言的一些方面有了更多的了解。\n在我看来， Go 语言是一种很有前景的语言，也许在一些场合下仍然无法取代 C，但是相比起来 C++ 似乎不再有竞争力。\n当然，Go 现在还缺乏一些 GUI 库、科学计算库等等，不过我相信随着时间的流逝它会展现出越来越强的生命力。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-06-22T08:34:07Z",
  "Author": "Chase Zhang"
}