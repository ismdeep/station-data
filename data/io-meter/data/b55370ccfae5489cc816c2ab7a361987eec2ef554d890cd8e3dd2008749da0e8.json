{
  "Source": "io-meter",
  "Title": "自己动手写 Git HTTP Server",
  "Link": "https://io-meter.com/2014/07/09/simple-git-http-server/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e在 Github 上可以使用 HTTP 协议 fetch 和 push 仓库中的代码，\n其实想要写一个简单的 Git HTTP Server 是相当容易的。\n这篇文章总结了使用 Go 语言实现这样一个 Server 的过程和相关知识。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003ch1 id=\"u57FA_u672C_u539F_u7406\"\u003e\u003ca href=\"#u57FA_u672C_u539F_u7406\" class=\"headerlink\" title=\"基本原理\"\u003e\u003c/a\u003e基本原理\u003c/h1\u003e\u003cp\u003e先介绍一下 Git HTTP Server 的实现原理。本地的 Git 在使用 HTTP 协议访问远程的 Git 仓库时，\n会分别发起如下三种类型的请求：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eGET /:working_path/*\u003c/code\u003e 直接 Serve 远程仓库的静态文件到客户端，这里就是本地的仓库从上游获得数据的地方\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGET /:working_path/info/refs\u003c/code\u003e 用于访问远程仓库的 refs 数据，比如都有哪些 Branch 和 Tags 等等\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePOST /:working_path/git-\u0026lt;command\u0026gt;\u003c/code\u003e 用于在远程仓库执行指令，进行数据交流。Git 的 push\n和 fetch 都要依赖这个请求来完成\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在开始之前，我们首先定义一个 gitRoot 路径，所有的远程仓库在服务端都存放在这下面。譬如：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e gitRoot = path.Join(os.TempDir(), \u003cspan class=\"string\"\u003e\u0026#34;git_repo\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e此外，为了方便路由，我选用了一个相当轻量级的 Go Web 库 \u003ca href=\"http://goji.io/\" target=\"_blank\" rel=\"noopener\"\u003eGoji\u003c/a\u003e。\n用下面的命令安装这个依赖:\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ego get github.com/zenazn/goji\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e做完准备工作就要开始实现 Server 了。接下来由从最简单的第一类请求讲起：\u003c/p\u003e\n\u003ch1 id=\"u5904_u7406_u9759_u6001_u6587_u4EF6_u8BF7_u6C42\"\u003e\u003ca href=\"#u5904_u7406_u9759_u6001_u6587_u4EF6_u8BF7_u6C42\" class=\"headerlink\" title=\"处理静态文件请求\"\u003e\u003c/a\u003e处理静态文件请求\u003c/h1\u003e\u003cp\u003e静态文件请求，也就是前面所说的第一类请求，Git 会直接通过这类请求来访问远程仓库的数据文件，\n譬如\u003ccode\u003eHEAD\u003c/code\u003e、\u003ccode\u003erefs\u003c/code\u003e等。客户端的 Git 主要通过这种方式来获取一些 Git 自己产生的文件的详细内容，\n一般来说并不会直接请求仓库里的代码等文件。类似\u003ccode\u003egit clone\u003c/code\u003e和\u003ccode\u003egit fetch\u003c/code\u003e这样的操作会交给第二类请求。\u003c/p\u003e\n\u003cp\u003e在 Go 中使用\u003ccode\u003ehttp\u003c/code\u003e库实现处理静态文件请求是非常方便的。我们定义一个名为\u003ccode\u003egeneric\u003c/code\u003e的函数用来处理相关请求：\n\u003c/p\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003egeneric\u003c/span\u003e\u003cspan class=\"params\"\u003e(c web.C, w http.ResponseWriter, r *http.Request)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    reponame := c.URLParams[\u003cspan class=\"string\"\u003e\u0026#34;reponame\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    repopath := path.Join(gitRoot, reponame)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    filepath := path.Join(gitRoot, r.URL.String())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e strings.HasPrefix(filepath, repopath) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        http.ServeFile(w, r, filepath)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        w.WriteHeader(\u003cspan class=\"number\"\u003e404\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e这里使用了\u003ccode\u003efilepath := path.Join(gitRoot, r.URL.String())\u003c/code\u003e这行代码来计算远程仓库在文件系统上的真实位置，\n这行代码也可以改写成任何其他策略产生的路径。只要这个路径指向的位置是一个通过\u003ccode\u003egit init --bare\u003c/code\u003e方式创建的仓库。\n在\u003ccode\u003emain\u003c/code\u003e函数中用下列方法绑定路由并开启服务器。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// access file contents\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    goji.Get(\u003cspan class=\"string\"\u003e\u0026#34;/:reponame/*\u0026#34;\u003c/span\u003e, generic)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    goji.Head(\u003cspan class=\"string\"\u003e\u0026#34;/:reponame/*\u0026#34;\u003c/span\u003e, generic)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// start serving\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    goji.Serve()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e这样，对于所有指向\u003ccode\u003e/:reponame/\u003c/code\u003e下任意路径的请求都会用\u003ccode\u003egeneric\u003c/code\u003e函数处理，这里允许请求方法为\u003ccode\u003eGET\u003c/code\u003e和\u003ccode\u003eHEAD\u003c/code\u003e。\n返回静态文件则使用\u003ccode\u003ehttp\u003c/code\u003e包中的\u003ccode\u003eServeFile\u003c/code\u003e函数直接完成。\u003c/p\u003e\n\u003cp\u003e这样，第一类请求就可以被轻松处理了。\u003c/p\u003e\n\u003ch1 id=\"info/refs\"\u003e\u003ca href=\"#info/refs\" class=\"headerlink\" title=\"info/refs\"\u003e\u003c/a\u003einfo/refs\u003c/h1\u003e\u003cp\u003e接下来是稍微复杂一点的\u003ccode\u003einfo/refs\u003c/code\u003e请求。本地的 Git 一般会在\u003ccode\u003egit fetch\u003c/code\u003e的时候进行这样的请求。\n这个请求主要用来返回仓库的 References 数据，包括 Branch、Tags 等。跟上面讲过的第一类请求不同，\n这个请求需要服务端将相关数据总结整理成特定的格式返回给客户端，从而节省请求次数。\u003c/p\u003e\n\u003cp\u003e根据用户操作类型的不同，Git 还会附加一个 URL 参数\u003ccode\u003eservice\u003c/code\u003e。\u003ccode\u003eservice\u003c/code\u003e一般的取值包括\n\u003ccode\u003egit-upload-pack\u003c/code\u003e、\u003ccode\u003egit-receive-pack\u003c/code\u003e等。分别是客户端\u003ccode\u003efetch\u003c/code\u003e和\u003ccode\u003epush\u003c/code\u003e时的状态。\u003c/p\u003e\n\u003cp\u003e我们并不需要了解这些请求的细节，只需要按照格式返回数据即可。那么该怎么返回正确的数据呢？\n如果是对 Git 非常熟悉的同学可能会知道\u003ccode\u003eupload-pack\u003c/code\u003e和\u003ccode\u003ereceive-pack\u003c/code\u003e本身就是 Git 可以使用的命令。\n这两个命令都可以接受一个\u003ccode\u003e--advertise-refs\u003c/code\u003e参数。\u003c/p\u003e\n\u003cp\u003e根据 Git 的\u003ca href=\"http://git-scm.com/book/en/Git-Internals-Transfer-Protocols\" target=\"_blank\" rel=\"noopener\"\u003e文档\u003c/a\u003e\n\u003ccode\u003e--advertise-refs\u003c/code\u003e可以使 Git 列出仓库所拥有的 References 以及那些客户端希望抓取到的 References。\n而这些数据就被称为 Advertise Refs。\u003c/p\u003e\n\u003cp\u003e此外我们还可以使用\u003ccode\u003e--stateless-rpc\u003c/code\u003e参数。这个参数使强制 Git 使用无状态的\n\u003ca href=\"https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\"\u003eRPC\u003c/a\u003e。\n简单来说，可以让 Git 返回的 References 列表中，代表每个 Reference 的字段长度恰好和一个数据包的长度相同，\n这样每个 Reference 都可以被放在单独一个数据包上传输，不依赖于前面的数据包(也就是实现了所谓的“无状态”)。\n有些时候，在这里获得到了某个 Reference 还需要再去请求更详细的信息，这种方式下提高了并行性。\u003c/p\u003e\n\u003cp\u003e返回的数据的 MIME type 必须是 \u003ccode\u003eapplication/x-\u0026lt;command\u0026gt;-advertisement\u003c/code\u003e\n其中\u003ccode\u003e\u0026lt;command\u0026gt;\u003c/code\u003e就是调用时用的命令。此外在\u003ccode\u003egit receive-pack\u003c/code\u003e和\u003ccode\u003egit upload-pack\u003c/code\u003e返回的数据的基础上，\n我们还需要给数据添加一个头信息。其格式如下图所示:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/git-info-refs-head.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e把以上这些写成函数就是下面这样。请重点注意其中有关\u003ccode\u003eserverAdvert\u003c/code\u003e的操作。\n这里还使用了 Go 语言标准库中的\u003ccode\u003eexec\u003c/code\u003e包。\n\u003c/p\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003einforefs\u003c/span\u003e\u003cspan class=\"params\"\u003e(c web.C, w http.ResponseWriter, r *http.Request)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    reponame := c.URLParams[\u003cspan class=\"string\"\u003e\u0026#34;reponame\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    repopath := path.Join(gitRoot, reponame)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    service := r.FormValue(\u003cspan class=\"string\"\u003e\u0026#34;service\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(service) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        w.Header().Add(\u003cspan class=\"string\"\u003e\u0026#34;Content-type\u0026#34;\u003c/span\u003e, fmt.Sprintf(\u003cspan class=\"string\"\u003e\u0026#34;application/x-%s-advertisement\u0026#34;\u003c/span\u003e, service))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        gitLocalCmd := exec.Command(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003estring\u003c/span\u003e(service[\u003cspan class=\"number\"\u003e4\u003c/span\u003e:]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;--stateless-rpc\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"string\"\u003e\u0026#34;--advertise-refs\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            repopath)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        out, err := gitLocalCmd.CombinedOutput()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            w.WriteHeader(\u003cspan class=\"number\"\u003e500\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            fmt.Fprintln(w, \u003cspan class=\"string\"\u003e\u0026#34;Internal Server Error\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            w.Write(out)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            serverAdvert := fmt.Sprintf(\u003cspan class=\"string\"\u003e\u0026#34;# service=%s\u0026#34;\u003c/span\u003e, service)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            length := \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(serverAdvert) + \u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            fmt.Fprintf(w, \u003cspan class=\"string\"\u003e\u0026#34;%04x%s0000\u0026#34;\u003c/span\u003e, length, serverAdvert)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            w.Write(out)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fmt.Fprintln(w, \u003cspan class=\"string\"\u003e\u0026#34;Invalid request\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        w.WriteHeader(\u003cspan class=\"number\"\u003e400\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003ch1 id=\"RPC__u8FDC_u7A0B_u8C03_u7528\"\u003e\u003ca href=\"#RPC__u8FDC_u7A0B_u8C03_u7528\" class=\"headerlink\" title=\"RPC 远程调用\"\u003e\u003c/a\u003eRPC 远程调用\u003c/h1\u003e\u003cp\u003e第三类请求是数据调用请求。简单来说就是由客户端 Git 指定命令在服务端对应仓库执行，\n执行的过程中，客户端 Git 将命令需要的输入当做 HTTP 的 POST 数据发送到服务端，\n服务端需要将这些输入转发给本地 Git 命令的标准输入流(stdin)，反过来还要将命令的标准输出(stdout)\n当做 HTTP 请求的返回数据转发给客户端。\u003c/p\u003e\n\u003cp\u003e这个流程说起来很绕，但其实还蛮简单的。其通讯的模型可以用下图来表示：\n\u003cimg src=\"/img/posts/git-server-rpc-model.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e为了在 Go 中完成这样的转发，我们首先要设法从 Request 对象中读出 Body 的内容来。\n为了节约传输大量数据时消耗的内存，把所有发送来的数据都读取出来再写入是不能接受的，\n因此我们要以串流的方式来从 Body 中读取数据并同时写入 stdin。\u003c/p\u003e\n\u003cp\u003e为了获取所执行的命令的输入输出流，我们需要调用\u003ccode\u003eexec.Command\u003c/code\u003e类提供的\u003ccode\u003eStdinPipe()\u003c/code\u003e和\u003ccode\u003eStdoutPipe()\u003c/code\u003e方法。\n串流转发的功能只需要方便地使用\u003ccode\u003eio.Copy\u003c/code\u003e方法即可。\u003ccode\u003eio.Copy\u003c/code\u003e方法默认将会以每次 32KB 的块大小读出数据然后写入到目标文件中。\u003c/p\u003e\n\u003cp\u003e众所周知，基本的 HTTP 是一种半双工的通讯协议，数据的发送和接收是不能交错进行的。所以我们也只能先把 HTTP \n请求的内容串流给 Git 命令的 stdin，完成后再从 stdout 里读取数据发送回客户端。\u003c/p\u003e\n\u003cp\u003e最后执行完\u003ccode\u003ereceive-pack\u003c/code\u003e命令，还要执行\u003ccode\u003egit update-server-info\u003c/code\u003e命令来更新服务端仓库的信息。\nResponse 的 MIME 是\u003ccode\u003eapplication/x-git-\u0026lt;command\u0026gt;-result\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e具体实现如下:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003erpc\u003c/span\u003e\u003cspan class=\"params\"\u003e(c web.C, w http.ResponseWriter, r *http.Request)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    reponame := c.URLParams[\u003cspan class=\"string\"\u003e\u0026#34;reponame\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    repopath := path.Join(gitRoot, reponame)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    command := c.URLParams[\u003cspan class=\"string\"\u003e\u0026#34;command\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(command) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        w.Header().Add(\u003cspan class=\"string\"\u003e\u0026#34;Content-type\u0026#34;\u003c/span\u003e, fmt.Sprintf(\u003cspan class=\"string\"\u003e\u0026#34;application/x-git-%s-result\u0026#34;\u003c/span\u003e, command))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        w.WriteHeader(\u003cspan class=\"number\"\u003e200\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        gitCmd := exec.Command(\u003cspan class=\"string\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e, command, \u003cspan class=\"string\"\u003e\u0026#34;--stateless-rpc\u0026#34;\u003c/span\u003e, repopath)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmdIn, _ := gitCmd.StdinPipe()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmdOut, _ := gitCmd.StdoutPipe()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        body := r.Body\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        gitCmd.Start()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        io.Copy(cmdIn, body)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        io.Copy(w, cmdOut)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e command == \u003cspan class=\"string\"\u003e\u0026#34;receive-pack\u0026#34;\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            updateCmd := exec.Command(\u003cspan class=\"string\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;--git-dir\u0026#34;\u003c/span\u003e, repopath, \u003cspan class=\"string\"\u003e\u0026#34;update-server-info\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            updateCmd.Start()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        w.WriteHeader(\u003cspan class=\"number\"\u003e400\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fmt.Fprintln(w, \u003cspan class=\"string\"\u003e\u0026#34;Invalid Request\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch1 id=\"u8DEF_u7531_u7684_u5B89_u6392\"\u003e\u003ca href=\"#u8DEF_u7531_u7684_u5B89_u6392\" class=\"headerlink\" title=\"路由的安排\"\u003e\u003c/a\u003e路由的安排\u003c/h1\u003e\u003cp\u003e为了使路由按照正确的顺序匹配，应该要注意绑定请求时候的顺序。第一类请求虽然最简单，\n但是他的匹配模式可以完全包含后两种，因此正确的顺序应该是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e优先匹配 info/refs 请求\u003c/li\u003e\n\u003cli\u003e其次匹配 RPC 请求\u003c/li\u003e\n\u003cli\u003e以上两个都没有匹配，则匹配静态文件请求\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e实现为:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// get repo info/refs\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egoji.Get(\u003cspan class=\"string\"\u003e\u0026#34;/:reponame/info/refs\u0026#34;\u003c/span\u003e, inforefs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egoji.Head(\u003cspan class=\"string\"\u003e\u0026#34;/:reponame/info/refs\u0026#34;\u003c/span\u003e, inforefs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// RPC request on repo\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egoji.Post(regexp.MustCompile(\u003cspan class=\"string\"\u003e\u0026#34;^/(?P\u0026lt;reponame\u0026gt;[^/]+)/git-(?P\u0026lt;command\u0026gt;[^/]+)$\u0026#34;\u003c/span\u003e), rpc)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// access file contents\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egoji.Get(\u003cspan class=\"string\"\u003e\u0026#34;/:reponame/*\u0026#34;\u003c/span\u003e, generic)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egoji.Head(\u003cspan class=\"string\"\u003e\u0026#34;/:reponame/*\u0026#34;\u003c/span\u003e, generic)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e值得注意的是，只有 RPC 请求因需要写入文件而允许使用 POST 方法，另外两种请求都是 GET 或 HEAD 方法。\u003c/p\u003e\n\u003ch1 id=\"Security\"\u003e\u003ca href=\"#Security\" class=\"headerlink\" title=\"Security\"\u003e\u003c/a\u003eSecurity\u003c/h1\u003e\u003cp\u003e为了限制对仓库的访问，我们还可以使用 HTTP 的 \u003ca href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\" target=\"_blank\" rel=\"noopener\"\u003eBasic Auth\u003c/a\u003e\n协议对进行用户认证。\u003c/p\u003e\n\u003cp\u003e首先，对于未认证的请求，需要返回 Code 为 \u003ccode\u003e401 Unauthorized\u003c/code\u003e 的 HTTP Response，\n并在 Response 的 Header 上加上如下格式的字段。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eWWW-Authenticate: Basic realm=\u0026#34;[your realm]\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e其中\u003ccode\u003erealm\u003c/code\u003e用来指定服务器的名称或者 UID，Git 会根据 realm 的值的不同，\n使用本地缓存的不同用户名/密码组合。如果没有对应密码，Git 就会请求用户输入。\u003c/p\u003e\n\u003cp\u003e如果用户输入了密码，在 HTTP 请求的 Header 中将会出现下面格式的一个字段，其中\u003ccode\u003e[username:password]\u003c/code\u003e\n的内容使用\u003ccode\u003ebase64\u003c/code\u003e编码，需先解码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eAuthenticate: Basic [username:password]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以将上述 Authenticate 的逻辑通过 Goji 提供的 Middleware 机制实现，这样可以使对所有请求都会要求认证。\n实现细节不再赘述，可以参见\u003ca href=\"https://gist.github.com/shanzi/1aa571f8f3b8f4608d60#file-gittp-go-L173\" target=\"_blank\" rel=\"noopener\"\u003e我实现的版本\u003c/a\u003e。\u003c/p\u003e\n\u003ch1 id=\"u603B_u7ED3\"\u003e\u003ca href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h1\u003e\u003cp\u003e为了方便使用，我还为 Server 添加了创建和删除远程仓库的代码，具体实现已经全部放在\n\u003ca href=\"https://gist.github.com/shanzi/1aa571f8f3b8f4608d60\" target=\"_blank\" rel=\"noopener\"\u003eGist\u003c/a\u003e上。当服务器开始运行之后，可以简单的使用 curl \n命令在服务器上创建空白仓库以及删除已有仓库。\n\u003c/p\u003e\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# create remote repo\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecurl -u username:password -X PUT http://localhost:8000/new_repo\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# delete remote repo\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecurl -u username:password -X DELETE http://localhost:8000/exists_repo\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e我们目前实现的版本得益于 Git 本身和 Go 语言的强大，总行数还不超过 250 行，\n请\u003ca href=\"https://gist.github.com/shanzi/1aa571f8f3b8f4608d60\" target=\"_blank\" rel=\"noopener\"\u003e查看完整代码\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e不过我们还没有考虑到 Git 对 GZip的支持。尤其对于第一类对静态文件的请求，\n支持 GZip 将能够显著提高传输效率。这个需求使用 Go 语言自带的\u003ccode\u003ecompass/gzip\u003c/code\u003e包可以很方便的实现。\u003c/p\u003e\n\u003cp\u003e最后来看一下成果吧！\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/git-simple-server-result.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-07-09T13:26:54Z",
  "Author": "Chase Zhang"
}