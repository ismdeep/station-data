{
  "Source": "io-meter",
  "Title": "用 Go 写个小工具：wu 的炼成",
  "Link": "https://io-meter.com/2016/08/14/build-a-go-commmand-line-tool/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e最近使用 Golang 编写完成了一个命令行下的小工具: \u003ca href=\"https://github.com/shanzi/wu\" target=\"_blank\" rel=\"noopener\"\u003ewu\u003c/a\u003e，\n这个小工具的主要用途是监视文件改动并执行指定的命令。尽管有点重新发明轮子的嫌疑，\n但是设计和实现它的过程中我还是有不少收获的。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e我很早就对 Golang 有兴趣了，之前在没有经过系统学习的情况下跌跌撞撞地完成了一个很小的应用，\n并最终总结成 \u003ca href=\"https://io-meter.com/2014/07/09/simple-git-http-server/\"\u003e自己动手写 Git HTTP Server\u003c/a\u003e 这篇文章，\n之后又稍微研究和总结了一下现有的 \u003ca href=\"https://io-meter.com/2014/07/30/go\u0026#39;s-package-management/\"\u003eGo 语言的包依赖管理\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e自那以后，Go 语言又有了一些新的进展，比如从 1.6 版本引入的 \u003ccode\u003evendor\u003c/code\u003e 的概念， \n算是在解决包管理问题上的出现新趋势，也催生出 \u003ca href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\"\u003egovendor\u003c/a\u003e\n这样新的工具出来。\u003c/p\u003e\n\u003cp\u003e不过包管理并不是这篇文章想要主要讨论的问题。此前，通过 \u003ca href=\"http://www.gopl.io/\" target=\"_blank\" rel=\"noopener\"\u003eThe Go Programming Language\u003c/a\u003e\n这本书，我系统地对 Go 语言各个方面的使用以及部分设计和实践有了更全面的了解，\n因此这次以更加“正确”的方法实现了 wu 这个小工具，在此将从构思到实现各方面的思考记录一些下来，\n也算是分享一点经验。在这篇文章中，我们会谈到\u003ccode\u003eos/exec\u003c/code\u003e、\u003ccode\u003eflag\u003c/code\u003e、\u003ccode\u003etime\u003c/code\u003e、\u003ccode\u003eencoding/json\u003c/code\u003e、\u003ccode\u003eos/signal\u003c/code\u003e等库的使用。\u003c/p\u003e\n\u003cp\u003ewu 的代码已经\u003ca href=\"https://github.com/shanzi/wu/\" target=\"_blank\" rel=\"noopener\"\u003e开源在 GitHub 上\u003c/a\u003e并提供 macOS 和 Linux 平台下\n\u003ca href=\"https://github.com/shanzi/wu/releases\" target=\"_blank\" rel=\"noopener\"\u003e编译好的可执行文件\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"u6784_u601D_u548C_u51C6_u5907\"\u003e\u003ca href=\"#u6784_u601D_u548C_u51C6_u5907\" class=\"headerlink\" title=\"构思和准备\"\u003e\u003c/a\u003e构思和准备\u003c/h2\u003e\u003cp\u003e在开始着手实现之前，对于要写什么和怎么实现等方面都进行了一些思考。简单来说，\n我首先确定了想要写一个通过监听文件系统修改，从而可以自动重启命令的工具。\n写这样一个工具的原因是部分 Light weight 的 web framework 并没有内置自动重新加载的功能。\n这样每次修改完代码就需要手动的结束原来的 Server 并重新启动。写一个小工具来自动化这一过程看起来是个不错的主意。\u003c/p\u003e\n\u003cp\u003e在进一步的构思之前，我简单的进行了一些检索，参考了一些同类的工具（主要是 NodeJS 社区内的一些解决方案），\n确定了一些实现的目标：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e这个工具应该非常简单和轻量，它所完成的事情就应该是简单的监视文件和执行命令，\n最多添加一些简单的配置，不应需要繁复的设置\u003c/li\u003e\n\u003cli\u003e这个工具应该具有最少的依赖，相比于 Gulp 和 Grunt 等 NodeJS 的解决方案，\n这一工具应该可以说以便携式可执行文件的方式分发，这也是选择 Go 来实现的一个优势\u003c/li\u003e\n\u003cli\u003e可配置，应该有一个简单的配置文件，使得用户可以记录下来执行的选项，从而不需要每次敲打复杂的命令\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e以上三点决定了 wu 的大部分设计，除此之外，在实现之前我也预先考虑了一下可能遇到的问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e进程通讯的问题：因为 wu 本质上是需要通过启动子进程来运行命令的，因此就需要考虑如何与子进程进行通讯，\n如何获得子进程运行的状态，如何强制结束子进程等等问题都需要事先进行一定的研究\u003c/li\u003e\n\u003cli\u003e并发和并行的问题：除了需要启动和维护子进程，我们的工具还要侦听文件系统的改变，\n随着用户的操作很多事件会并发的产生，如何正确地处理这些并发也是一个重要的问题。\n幸好我们是在使用 Golang 解决这一问题，在很多地方 Go 语言确实为并发控制提供了很棒的解决方案。\u003c/li\u003e\n\u003cli\u003e多个文件同时写入问题：这个问题和并发问题比较类似，因为用户可能同时写入多个文件，\n这时激发多次进程重启绝不是我们想要的结果。把一段时间内接受到的写入事件合并成一个来处理是一种可能的解决方案。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我们的应用的主要流程大体上可以用下图表示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/wu-main-loop.png\" alt=\"Main Loop\"/\u003e\u003c/p\u003e\n\u003cp\u003e从图中可以看出应用的主循环是不断的 Start 和 Terminate 子进程的过程。其中只有红色的\u003ccode\u003eWait and gather changed files\u003c/code\u003e\n步骤会处理文件系统传来的信号，这一步骤也是阻塞的，也就是说如果如果没有信号出现，应用会一直停留在这一步。\n我们在这里可以做一个等待，也就是说可以给这一步设定一个最短运行事件，让程序将这一段时间出现的所有文件处理事件都捕捉下来，\n从而避免一次保存多个文件导致的重复执行。反过来，在这个阶段之后接收到的文件修改事件将会被留到下一个循环当中处理。\nGo 语言的 channel 设计可以让我们方便地做到这一点。\u003c/p\u003e\n\u003ch3 id=\"u6587_u4EF6_u7CFB_u7EDF_u4FA6_u542C\"\u003e\u003ca href=\"#u6587_u4EF6_u7CFB_u7EDF_u4FA6_u542C\" class=\"headerlink\" title=\"文件系统侦听\"\u003e\u003c/a\u003e文件系统侦听\u003c/h3\u003e\u003cp\u003e除了预先考虑一些可能会遇到的问题，我们还要对实现要用到的工具做一个预先的调查。\n其中最重要的当然是文件系统改变如何进行侦听的问题。在这里我们使用了一个提供了 Go 语言接口库\n\u003ca href=\"https://github.com/fsnotify/fsnotify\" target=\"_blank\" rel=\"noopener\"\u003efsnotify\u003c/a\u003e，使用之前我们需要使用\u003ccode\u003ego get\u003c/code\u003e命令先将对应包下载到本地环境中。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ego get github.com/fsnotify/fsnotify\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e这个工具提供了获得文件修改事件的一个较为底层的访问接口，当指定侦听的文件或文件夹之后，\n我们可以获得一个 channel 用来接收事件。fsnotify 的一点不足在于侦听文件夹并不会递归进行，\n也就是当使用它侦听了某一文件夹时，这个文件夹子目录下的修改并不会被捕捉到，因此我们必须手动完成这一工作。\u003c/p\u003e\n\u003ch3 id=\"u8FD0_u884C_u5B50_u8FDB_u7A0B\"\u003e\u003ca href=\"#u8FD0_u884C_u5B50_u8FDB_u7A0B\" class=\"headerlink\" title=\"运行子进程\"\u003e\u003c/a\u003e运行子进程\u003c/h3\u003e\u003cp\u003e解决的监视文件系统修改的问题，就要考虑如何该进行子进程的启动、守护和结束控制的方法了。\nGo 语言的标准库\u003ccode\u003eos/exec\u003c/code\u003e完全提供了我们所需的接口。我们使用:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecmd := exec.Command(name, args...)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以获得一个 Command 对象，通过调用\u003ccode\u003ecmd.Start()\u003c/code\u003e方法就可以启动子进程。我们有两种方法结束子进程，\n一个是通过\u003ccode\u003ecmd.Process.Signal\u003c/code\u003e方法为进程发送一个终止信号，比如\u003ccode\u003eSIGINT\u003c/code\u003e或\u003ccode\u003eSIGQUIT\u003c/code\u003e，\n但是有的程序可能会忽略这些信号继续运行，因此一个必要的逻辑就是在一个 Timeout 之后应用还没有结束，\n我们需要通过发送\u003ccode\u003eSIGTERM\u003c/code\u003e或\u003ccode\u003eSIGKILL\u003c/code\u003e信号强制终止进程。在最初的实现中，我使用了\u003ccode\u003ecmd.Process.Kill()\u003c/code\u003e\n方法来结束进程，却发现了一些意外的问题，在后文中会详细的介绍遇到的问题及其解决方案。\u003c/p\u003e\n\u003ch3 id=\"u547D_u4EE4_u884C_u53C2_u6570_u89E3_u6790\"\u003e\u003ca href=\"#u547D_u4EE4_u884C_u53C2_u6570_u89E3_u6790\" class=\"headerlink\" title=\"命令行参数解析\"\u003e\u003c/a\u003e命令行参数解析\u003c/h3\u003e\u003cp\u003e接下来就是用户交互的方式了。尽管我们的 App 是一个极简的设计，但是还是要给用户一些命令行的接口，\nGo 语言的标准库提供了\u003ccode\u003eflag\u003c/code\u003e库方便我们完成这一任务。\u003ccode\u003eflag\u003c/code\u003e的功能非常简单，他有两种的使用方式，\n一种是在\u003ccode\u003emain\u003c/code\u003e包的包层级声明指针变量作为接受参数值的位置:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003evar value = flag.String(\u0026#34;option\u0026#34;, \u0026#34;default value\u0026#34;, \u0026#34;help text\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e这种方法的内部原理是 flag 在内部声明了一个变量并返回了他的指针。同样，\n\u003ccode\u003eflag\u003c/code\u003e包也会在全局的一个单例对象上保存一个对这一变量的引用。当\u003ccode\u003eflag.Parse()\u003c/code\u003e被执行时，\n保存在单例对象上的所有变量会被赋予解析出来的值。因为我们得到的是变量的一个指针，\n因此当我们使用\u003ccode\u003e*value\u003c/code\u003e来获得变量值的时候，将会获得\u003ccode\u003eflag\u003c/code\u003e内部解析出来的值。\u003c/p\u003e\n\u003cp\u003e如果觉得每次都需要用取指针值操作\u003ccode\u003e*value\u003c/code\u003e来获得变量值的话，我们可以通过在\u003ccode\u003emain\u003c/code\u003e包中的\n\u003ccode\u003einit\u003c/code\u003e方法中获取值的方法来实现同样的功能。比如说:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003evar value string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc init() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    flag.StringVar(\u0026amp;value, \u0026#34;option\u0026#34;, \u0026#34;default value\u0026#34;, \u0026#34;help text\u0026#34;)    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可见，我们传给\u003ccode\u003eStringVar\u003c/code\u003e的仍然是\u003ccode\u003evalue\u003c/code\u003e变量的指针，\u003ccode\u003eStringVar\u003c/code\u003e在内部实际进行的是跟以前类似的操作，\n最终当我们执行\u003ccode\u003eflag.Parse()\u003c/code\u003e后，\u003ccode\u003evalue\u003c/code\u003e的值也会被变成解析出来的值。这里我们可以看到，\n指针的存在使得一些原来可能很难表现的操作变得简单，但是同时也产生了很多的副作用。\n比如说，在并发程序中，因为一个变量的引用被传递到多个未知的地方，一段简单的函数的运行过程当中，\n变量的值可能会发生意想不到的改变，因而造成了预期之外的结果。在我们实现这一工具的过程当中也会遇到类似的问题需要解决。\u003c/p\u003e\n\u003cp\u003e好在\u003ccode\u003eflag\u003c/code\u003e操作本身比较简单，也不会并发和重复，这样使用还是安全的。另外，上述情况中我们都是在\u003ccode\u003emain\u003c/code\u003e\n函数执行之前进行\u003ccode\u003eflag\u003c/code\u003e参数的声明工作，这是为了确保\u003ccode\u003emain\u003c/code\u003e函数一开始执行\u003ccode\u003eflag.Parse\u003c/code\u003e的时候，所有参数已经声明完毕。\n我们自然也可以在函数里再进行这些工作，只要能确保执行的顺序即可。此外，如果你在同一个包的多个文件里声明了多个\u003ccode\u003einit\u003c/code\u003e函数，\n这些函数虽然都会被执行，但是执行的顺序是未定义的行为，这也是需要注意的地方。\u003c/p\u003e\n\u003ch3 id=\"u65F6_u95F4\"\u003e\u003ca href=\"#u65F6_u95F4\" class=\"headerlink\" title=\"时间\"\u003e\u003c/a\u003e时间\u003c/h3\u003e\u003cp\u003e接下来是\u003ccode\u003etime\u003c/code\u003e库的一点介绍，我们使用\u003ccode\u003etime\u003c/code\u003e库来实现\u003ccode\u003esleep\u003c/code\u003e和\u003ccode\u003ewait\u003c/code\u003e的功能。简单来说，如果想要阻塞一个 goroutine 一段时间，\n\u003ccode\u003etime.Sleep(duration)\u003c/code\u003e和\u003ccode\u003e\u0026lt;-time.After(duration)\u003c/code\u003e两种方法都可以使用。请注意第二种方法中的\u003ccode\u003e\u0026lt;-\u003c/code\u003e，\n\u003ccode\u003etime.After\u003c/code\u003e方法实际上返回一个\u003ccode\u003e\u0026lt;-chan struct{}\u003c/code\u003e，这个通道会在给定事件之后接受到一个消息，因此当你一开始使用\u003ccode\u003e\u0026lt;-\u003c/code\u003e\n操作符试图从通道中取消息时，通道会被阻塞，从而获得与\u003ccode\u003eSleep\u003c/code\u003e一样的效果。这个方法实际上是非常有用的——尤其是跟\n\u003ccode\u003eselect\u003c/code\u003e语句配合使用的。当然\u003ccode\u003etime\u003c/code\u003e库还提供了\u003ccode\u003etime.Tick\u003c/code\u003e等多种方法，可供我们获得各种各样基于时间信号的通道。\u003c/p\u003e\n\u003ch3 id=\"JSON__u8BFB_u5199\"\u003e\u003ca href=\"#JSON__u8BFB_u5199\" class=\"headerlink\" title=\"JSON 读写\"\u003e\u003c/a\u003eJSON 读写\u003c/h3\u003e\u003cp\u003e为了引进配置文件功能，我们还引入了\u003ccode\u003eencoding/json\u003c/code\u003e库，在这一工具当中，我们只使用了非常简单的\u003ccode\u003eDecode\u003c/code\u003e和\u003ccode\u003eEncode\u003c/code\u003e功能。\n要\u003ccode\u003eDecode\u003c/code\u003e一个文件当中包含的 JSON，使用下面的方法:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc readJSON(filename string) SomeType {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file, err := os.Open(filename)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    defer file.Close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if err == nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    var obj SomeType\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if err := json.NewDecoder(file).Decode(\u0026amp;obj); err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // Fatal\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return obj\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // Fatal\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e由于我们希望输出的 Config 文件的 JSON 是有缩进的，在写入时我们使用\u003ccode\u003ejson.MarshalIntent\u003c/code\u003e方法将 JSON\n输出到\u003ccode\u003e[]byte\u003c/code\u003e中，再直接用\u003ccode\u003efile\u003c/code\u003e的\u003ccode\u003eWrite\u003c/code\u003e方法写入文件。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc writeJson(filename string, obj SomeType) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file, err := os.Create(filename)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    defer file.Close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // Fatal\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if bytes, err := json.MarsalIntent(conf, \u0026#34;\u0026#34;, \u0026#34;  \u0026#34;); err == nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file.Write(bytes)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } else {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // Fatal\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e其中，\u003ccode\u003eSomeType\u003c/code\u003e是一个为接受 JSON 数据而定义的\u003ccode\u003estrunt{}\u003c/code\u003e，值得注意的是，只有 Public 的元素才能被\u003ccode\u003eencoding/json\u003c/code\u003e\n库读出和写入。\u003c/p\u003e\n\u003ch2 id=\"POSIX_Signal__u5904_u7406\"\u003e\u003ca href=\"#POSIX_Signal__u5904_u7406\" class=\"headerlink\" title=\"POSIX Signal 处理\"\u003e\u003c/a\u003ePOSIX Signal 处理\u003c/h2\u003e\u003cp\u003e最后一个值得注意的地方就是，如果用户通过\u003ccode\u003eCTRL-C\u003c/code\u003e向我们发送了终止进程的信号的话，我们如何才能优雅地结束程序。\n不做任何操作的情况下程序可能会立刻停止，从而导致我们启动的子进程仍然在持续运行，从而形成了无人监管的幽灵进程。\n因此我们有必要捕捉应用程序接受到的 Interrupt 信号，从而可以在此后执行一定的清理操作并终止子进程。\u003c/p\u003e\n\u003cp\u003e这一点可以通过\u003ccode\u003eos/signal\u003c/code\u003e库完成，下面的代码给出了一个简单的例子:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc main() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ch := make(chan os.Signal)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    signal.Notify(ch, os.Interrupt)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for sig := range ch {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // Signal received!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch2 id=\"u5B9E_u73B0_u4E0E_u8C03_u8BD5\"\u003e\u003ca href=\"#u5B9E_u73B0_u4E0E_u8C03_u8BD5\" class=\"headerlink\" title=\"实现与调试\"\u003e\u003c/a\u003e实现与调试\u003c/h2\u003e\u003cp\u003e经过多方研究做好了充分的准备之后，我们终于可以着手编写我们的主程序了。在下面的实现当中，\n我们将会大量使用通道(channel)作为 goroutine 之间通讯和同步的工具。同时我们也用到了一些 Go \n语言的使用模式和最佳实践。\u003c/p\u003e\n\u003ch3 id=\"Runner__u7684_u5B9E_u73B0\"\u003e\u003ca href=\"#Runner__u7684_u5B9E_u73B0\" class=\"headerlink\" title=\"Runner 的实现\"\u003e\u003c/a\u003eRunner 的实现\u003c/h3\u003e\u003cp\u003e首先的需求就是，我们希望以面向对象的方式将我们的主运行循环包装成对象，这样当我们通过\u003ccode\u003eos/signal\u003c/code\u003e\n捕捉到用户传来的信号时，就可以通过一个方法来执行退出循环的方法。同样我们也需要一个结构体来保存进行执行的状态，\n比如说保留一个对执行 Command 的引用等。\u003c/p\u003e\n\u003cp\u003e在这里我们要使用到一个简单的模式，那就是如何模仿一般面向对象当中的构造函数模式。总所周知，\n由于 Go 语言面向对象的实现模式不同，我们没法强制用户在新建对象和结构体的时候一定要执行我们指定的某一函数。\n比如说用户总可以通过\u003ccode\u003eSomeType{\u0026#34;some\u0026#34;, \u0026#34;params\u0026#34;}\u003c/code\u003e字面量的形式来生成新的\u003ccode\u003estruct{}\u003c/code\u003e对象。\n这在需要对结构体字段正确性进行验证或对某些字段进行自动初始化的时候很不方便。\u003c/p\u003e\n\u003cp\u003e然而如果更换一个思路，我们其实可以保证用户新建对象时一定要通过构造函数进行。最简单的方法就是通过定义子包来进行访问控制。\n我们知道，在一个包中小写字母开通的类型、函数和变量外部都不可以访问，因此通过如下步骤我们就可以模仿传统的构造函数模式了:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e定义一个子包，比如\u003ccode\u003egithub.com/shanzi/wu/runner\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在子包中定义一个公共的接口，比如\u003ccode\u003eRunner\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在子包中定义一个私有的结构体类型，比如\u003ccode\u003erunner\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e为公共的接口\u003ccode\u003eRunner\u003c/code\u003e声明一个构造函数，这个构造函数返回私有的结构体类型\u003ccode\u003erunner\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e由于\u003ccode\u003eRunner\u003c/code\u003e是一个接口(\u003ccode\u003einterface\u003c/code\u003e)，它为外界提供了一个类似鸭子类型的方法提示。在 Go 语言的设计当中，\n一个类型服从一个接口并不需要显式地声明出来——只要类型提供了接口所声明的所有方法即可。\n这一有趣的设定使得外界可以通过接口的定义在一定成都上窥探出所接受到的对象的内部结构而不需要知道对象具体的类型，\n因此如果我们在\u003ccode\u003eRunner\u003c/code\u003e的构造函数中放回一个\u003ccode\u003erunner\u003c/code\u003e对象的时候，外界就将\u003ccode\u003erunner\u003c/code\u003e当作\u003ccode\u003eRunner\u003c/code\u003e所定义的那样使用，\n从而实现了暴露\u003ccode\u003erunner\u003c/code\u003e所提供的方法的目的。反过来，因此\u003ccode\u003erunner\u003c/code\u003e是私有的结构体，外界也不能直接访问和构造出它的对象来。\u003c/p\u003e\n\u003cp\u003e由于 Go 语言的接口只能定义方法，如果外界想要获得结构体的属性，就必须通过\u003ccode\u003eGetter\u003c/code\u003e和\u003ccode\u003eSetter\u003c/code\u003e方法。\n在我们的设计中，希望将应用侦听的目录路径、侦听的文件匹配模式和命令暴露出来，因此定义了如下的接口和结构体:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etype Runner interface {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Path() string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Patterns() []string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Command() command.Command\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Start()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Exit()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype runner struct {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    path     string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    patterns []string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    command  command.Command\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    abort chan struct{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc New(path string, patterns []string, command command.Command) Runner {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return \u0026amp;runner{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        path:     path,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        patterns: patterns,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        command:  command,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e注意到，我们在\u003ccode\u003erunner\u003c/code\u003e结构体当中添加了一个没有暴露的\u003ccode\u003eabort\u003c/code\u003e通道，这个通道配合\u003ccode\u003eselect\u003c/code\u003e\n将会为我们提供一个优雅地结束 goroutine 的方法: 由于我们并不能从外部强制结束另一运行当中的 goroutine，\n因此我们需要通过通道传递信号来通知 goroutine 结束运行。在介绍这个以前，我们先来看 \u003ccode\u003eStart\u003c/code\u003e 方法的实现:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc (r *runner) Start() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r.abort = make(chan struct{})\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    changed, err := watch(r.path, r.abort)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.Fatal(\u0026#34;Failed to initialize watcher:\u0026#34;, err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    matched := match(changed, r.patterns)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    log.Println(\u0026#34;Start watching...\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    // Run the command once at initially\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r.command.Start(200 * time.Millisecond)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for fp := range matched {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        files := gather(fp, matched, 500*time.Millisecond)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // Terminate previous running command\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        r.command.Terminate(2 * time.Second)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.Println(\u0026#34;File changed:\u0026#34;, strings.Join(files, \u0026#34;, \u0026#34;))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // Run new command\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        r.command.Start(200 * time.Millisecond)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以看到，\u003ccode\u003eStart\u003c/code\u003e函数其实包含了我们应用主循环的全部内容，它首先构造一个新的\u003ccode\u003eabort\u003c/code\u003e通道，\n传递进入\u003ccode\u003ewatch\u003c/code\u003e函数调用\u003ccode\u003efsnotify\u003c/code\u003e开始监听工作，然后通过\u003ccode\u003erange\u003c/code\u003e开始我们的主循环。\n在这里\u003ccode\u003echanged\u003c/code\u003e和\u003ccode\u003ematched\u003c/code\u003e都是新生成的通道，\u003ccode\u003echanged\u003c/code\u003e输出对当前目录下所有文件监听获得的事件，\n\u003ccode\u003ematched\u003c/code\u003e输出将\u003ccode\u003echanged\u003c/code\u003e当中事件以文件模式匹配过滤后的机构。在这里我们对通道的使用非常像 Python\n当中的生成器。不但如此，我们通过将通道串联起来，还可以进行逐级过滤，从而在最后只获得我们关心的内容。\n在这里通道不但可以被看作生成器，也可以被看作有些编程语言提供的 Lazy Sequence (惰性求值列表)。\n实际上，很多 Gopher 直接将 Channel 当成一个高效且线程安全的队列使用。这种生成器/过滤器也是一种常用的模式。\u003c/p\u003e\n\u003cp\u003e回到我们的\u003ccode\u003ewatch\u003c/code\u003e函数，我们将从这一函数的实现中看到\u003ccode\u003eabort\u003c/code\u003e通道是如何发挥作用的。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc watch(path string, abort \u0026lt;-chan struct{}) (\u0026lt;-chan string, error) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    watcher, err := fsnotify.NewWatcher()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return nil, err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for p := range list(path) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        err = watcher.Add(p)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            log.Printf(\u0026#34;Failed to watch: %s, error: %s\u0026#34;, p, err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    out := make(chan string)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    go func() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        defer close(out)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        defer watcher.Close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           for {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            select {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            case \u0026lt;-abort:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                // Abort watching\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                err := watcher.Close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                if err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    log.Fatalln(\u0026#34;Failed to stop watch\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                return\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            case fp := \u0026lt;-watcher.Events:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                if fp.Op == fsnotify.Create {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    info, err := os.Stat(fp.Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    if err == nil \u0026amp;\u0026amp; info.IsDir() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        // Add newly created sub directories to watch list\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        watcher.Add(fp.Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                out \u0026lt;- fp.Name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            case err := \u0026lt;-watcher.Errors:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                log.Println(\u0026#34;Watch Error:\u0026#34;, err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return out, nil\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e我们可以看到，在\u003ccode\u003ewatch\u003c/code\u003e函数中，我们开启了一个新的 goroutine，在这个 goroutine 当中我们进行了以下工作:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e如果 abort 通道返回，结束监听，函数返回\u003c/li\u003e\n\u003cli\u003e如果有文件事件产生，进行初步过滤和处理，对于新建的文件夹，要在这里显式加入侦听当中\u003c/li\u003e\n\u003cli\u003e发现文件错误，通过 Log 打印出来并忽略\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我们把这个\u003ccode\u003eselect\u003c/code\u003e语句包含在一个永真\u003ccode\u003efor\u003c/code\u003e循环中，这样除非\u003ccode\u003eabort\u003c/code\u003e信号获得消息，其他的消息处理之后就会立即进入新的循环。\u003c/p\u003e\n\u003cp\u003e看过了\u003ccode\u003eStart\u003c/code\u003e函数，我们来看\u003ccode\u003eExit\u003c/code\u003e函数的实现:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc (r *runner) Exit() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.Println()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.Println(\u0026#34;Shutting down...\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        r.abort \u0026lt;- struct{}{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        close(r.abort)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        r.command.Terminate(2 * time.Second)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以看到，除了一些打 Log 的工作，\u003ccode\u003eExit\u003c/code\u003e函数的主要工作就是向\u003ccode\u003eabort\u003c/code\u003e通道中传递信息并关闭它。最后结束我们的 Command。\u003c/p\u003e\n\u003cp\u003e在这里必须简单提到一点，对于这种传递的消息不包含信息量而只有消息的到达本身有含义的通道为什么我们要通过传递\u003ccode\u003estruct{}\u003c/code\u003e\n类型而不是写起来更短的\u003ccode\u003eint\u003c/code\u003e或者\u003ccode\u003ebool\u003c/code\u003e来完成呢？这是因为在 Go 语言中只有\u003ccode\u003estruct{}{}\u003c/code\u003e是不占用空间的——他的\u003ccode\u003esize\u003c/code\u003e是\u003ccode\u003e0\u003c/code\u003e。\n其他任何类型都不能保证除了通道内部本身的空间使用之外不添加新的空间占用。因此无论是这种通道，还是我们希望使用\u003ccode\u003emap\u003c/code\u003e\n模拟集合，都应该用\u003ccode\u003estruct{}{}\u003c/code\u003e做为值的类型。\u003c/p\u003e\n\u003ch2 id=\"Command__u7684_u5B9E_u73B0\"\u003e\u003ca href=\"#Command__u7684_u5B9E_u73B0\" class=\"headerlink\" title=\"Command 的实现\"\u003e\u003c/a\u003eCommand 的实现\u003c/h2\u003e\u003cp\u003e为了方便我们对子进程的管理，wu 的实现当中，我们还将 Command 相关的操作封装到了\u003ccode\u003egithub.com/shanzi/wu\u003c/code\u003e包当中，\n下面给出了 Command 包定义的接口和构造函数的定义是:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etype Command interface {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        String() string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Start(delay time.Duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Terminate(wait time.Duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype command struct {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        name   string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        args   []string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd    *exec.Cmd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        mutex  *sync.Mutex\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        exited chan struct{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc New(cmdstring []string) Command {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if len(cmdstring) == 0 {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                return Empty()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        name := cmdstring[0]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        args := cmdstring[1:]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return \u0026amp;command{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                name,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                args,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                nil,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u0026amp;sync.Mutex{},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                nil,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以看到，在结构体当中，我们除了保存一些传进来的参数，还用\u003ccode\u003ecmd\u003c/code\u003e字段保存了当前运行的 Command 的引用，\n此外，因为多个方法可能会并发地修改结构体中元素的值，我们使用\u003ccode\u003esync\u003c/code\u003e类提供的\u003ccode\u003eMutex\u003c/code\u003e锁来实现对象的互斥访问。\n最后还保留了一个 Channel 用来在进程结束之后获得通知。\u003c/p\u003e\n\u003cp\u003eCommand 的\u003ccode\u003eStart\u003c/code\u003e方法是 wu 当中最复杂的一部分，它首先会强制\u003ccode\u003eSleep\u003c/code\u003e一段时间，以免子进程在很短的时间里被重复启动，\n此后通过\u003ccode\u003emutex\u003c/code\u003e加锁获得对\u003ccode\u003ecommand\u003c/code\u003e结构体对象修改的权限，随后构造和启动子进程，并在新的 goroutine 里通过\u003ccode\u003ecmd.Wait()\u003c/code\u003e\n来等待进程结束。当进程结束之后将会打印 Log 并通过\u003ccode\u003eexited\u003c/code\u003e通道发布结束消息。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc (c *command) Start(delay time.Duration) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        time.Sleep(delay) // delay for a while to avoid start too frequently\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        c.mutex.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        defer c.mutex.Unlock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if c.cmd != nil \u0026amp;\u0026amp; !c.cmd.ProcessState.Exited() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                log.Fatalln(\u0026#34;Failed to start command: previous command hasn\u0026#39;t exit.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd := exec.Command(c.name, c.args...)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd.Stdin = os.Stdin\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd.Stdout = os.Stdout\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd.Stderr = os.Stdout // Redirect stderr of sub process to stdout of parent\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // Make process group id available for the command to run\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd.SysProcAttr = \u0026amp;syscall.SysProcAttr{Setpgid: true}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        log.Println(\u0026#34;- Running command:\u0026#34;, c.String())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        err := cmd.Start()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        exited := make(chan struct{})\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if err != nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                log.Println(\u0026#34;Failed:\u0026#34;, err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } else {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                c.cmd = cmd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                c.exited = exited\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                go func() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        defer func() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                exited \u0026lt;- struct{}{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                close(exited)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        cmd.Wait()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        if cmd.ProcessState.Success() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                log.Println(\u0026#34;- Done.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        } else {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                log.Println(\u0026#34;- Terminated.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                }()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eCommand 的\u003ccode\u003eTerminate\u003c/code\u003e方法也利用到了\u003ccode\u003eselect\u003c/code\u003e语句，它的主要逻辑是，先给子进程发送\u003ccode\u003eSIGINT\u003c/code\u003e信号促使子进程自然退出，\n此后用\u003ccode\u003eselect\u003c/code\u003e同时侦听\u003ccode\u003eexited\u003c/code\u003e通道和\u003ccode\u003etime.After(wait)\u003c/code\u003e通道，以便在\u003ccode\u003eSIGINT\u003c/code\u003e失效的情况下设法强制退出。\n前面提到过，\u003ccode\u003etime.After(wait)\u003c/code\u003e会返回一个在给定时间后发送消息的通道，这里使用\u003ccode\u003eselect\u003c/code\u003e从两个通道当中选择先得到的消息，\n因此当\u003ccode\u003ewait\u003c/code\u003e时间过后\u003ccode\u003eexited\u003c/code\u003e还没有消息传来，就会进入强制退出的分支。这就是一般在 Go 语言中实现 Timeout\n的模式或者说方法。\u003c/p\u003e\n\u003cp\u003e目前为止，已经将 wu 的主要代码逻辑介绍完了，在之后的调试当中，主要发现和修正了两个比较严重且有代表性的问题，\n那就是空命令的问题和结束命令的问题。\u003c/p\u003e\n\u003ch3 id=\"Empty_Command\"\u003e\u003ca href=\"#Empty_Command\" class=\"headerlink\" title=\"Empty Command\"\u003e\u003c/a\u003eEmpty Command\u003c/h3\u003e\u003cp\u003e第一个问题在于，如果用户没有给定运行的 Command 程序应该如何处理的问题。在 wu 里，我选择了什么也不做。\n在这里，我们并没有通过分支语句来在函数中进行判断。得益于 Go 语言接口类型的设计，我们并不一定要在\u003ccode\u003eCommand\n构造函数里返回\u003c/code\u003ecommand\u003ccode\u003e结构体——任何服从\u003c/code\u003eRunner`接口的类型皆可。为此，我们可以使用最简单的方式定义一个空的 Command 类。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e// An empty command is a command that do nothing\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype empty string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc Empty() Command {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return empty(\u0026#34;Empty command\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc (c empty) String() string {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return string(c)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc (c empty) Start(delay time.Duration) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // Start an empty command just do nothing but delay for given duration\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;-time.After(delay)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc (c empty) Terminate(wait time.Duration) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        // Terminate empty command just return immediately without any error\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch3 id=\"Kill_Command\"\u003e\u003ca href=\"#Kill_Command\" class=\"headerlink\" title=\"Kill Command\"\u003e\u003c/a\u003eKill Command\u003c/h3\u003e\u003cp\u003e之前提到过，\u003ccode\u003eos/exec\u003c/code\u003e包中的\u003ccode\u003eCommand\u003c/code\u003e类其实可以通过\u003ccode\u003ecmd.Process.Kill()\u003c/code\u003e方法来结束。在一般的执行当中都取得了成功。\n但是我却发现当使用\u003ccode\u003ewu go run main.go\u003c/code\u003e启动一个 Web Server 时，在文件修改后旧的子进程总是不能被正确地结束。\n显示发送\u003ccode\u003eSIGINT\u003c/code\u003e没有效果，之后执行了\u003ccode\u003eKill\u003c/code\u003e函数之后，尽管\u003ccode\u003ego run\u003c/code\u003e命令退出，但是 Web Server 仍然在运行，\n因此导致了端口占用的问题，使得新的 Command 执行失败。\u003c/p\u003e\n\u003cp\u003e经过检索后发现，这是因为\u003ccode\u003ego run\u003c/code\u003e命令实际上相当于\u003ccode\u003ebuild\u003c/code\u003e和执行两条命令，它本身也是通过子进程来运行编译好的新进程，\n因此当信号发送给\u003ccode\u003ego run\u003c/code\u003e时，它运行的子进程本身没有收到\u003ccode\u003eSIGINT\u003c/code\u003e因此并不会退出。\u003ccode\u003ego run\u003c/code\u003e也因为一直等待子进程而保持运行。\n最后当执行\u003ccode\u003eKill\u003c/code\u003e函数之后，只有\u003ccode\u003ego run\u003c/code\u003e命令被结束，而他的子进程仍然在执行当中。\u003c/p\u003e\n\u003cp\u003e知道原因之后就可以提出解决方案了，首先在执行 Command 之前，我们要强制新的 Command 和他的子进程可以获得 Group PID。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e// Make process group id available for the command to run\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecmd.SysProcAttr = \u0026amp;syscall.SysProcAttr{Setpgid: true}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e此后，我们需要自己实现一个\u003ccode\u003ekill\u003c/code\u003e函数，为整个子进程组都发送同样的信号:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc (c *command) kill(sig syscall.Signal) error {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cmd := c.cmd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pgid, err := syscall.Getpgid(cmd.Process.Pid)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if err == nil {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                return syscall.Kill(-pgid, sig)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e由此，我们模拟了用户在按下\u003ccode\u003eCTRL-C\u003c/code\u003e后 Shell 的行: 为整个进程组发送结束信号。这样，我们运行的 Command\n就可以保证被正确结束了。当然，这一套操作只在 *NIX 操作系统上可用。在 Windows 上并没有这样的信号机制——\n还好，wu 并不需要支持 Windows。\u003c/p\u003e\n\u003ch2 id=\"u603B_u7ED3\"\u003e\u003ca href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"/img/posts/wu-screenshot.png\" alt=\"Screen Shot\"/\u003e\u003c/p\u003e\n\u003cp\u003ewu 是我完成的又一个有点规模的 Go 语言的应用。由于这次对于 Channel 和 Go 的一些理念有了更深的认识，\n编写代码也更加顺畅，也更能体会出一歇 Go 设计上的优点了。\u003c/p\u003e\n\u003cp\u003eGo 语言在很多方面的设计上确实有独到之处，比如使用通道作为并发同步的工具，而 Channel 的作用又不仅限于此，\n它还可以用来模拟队列、生成器、惰性列表，用来实现多级过滤模式等等。Go 语言的接口和面向对象的设计在很多时候也非常灵活。\u003c/p\u003e\n\u003cp\u003e然而，没有范型使得容器类难以实现，没有异常捕捉使得很多函数调用有点啰嗦等问题也确实为代码的编写引入了一些麻烦。\n虽然引入了 Vendor ，支持\u003ccode\u003einternal\u003c/code\u003e包的概念，但是总体来说 Go 语言在包管理上仍然有很大的提升空间。\u003c/p\u003e\n\u003cp\u003e我个人使用 Go 语言的体验还是不错的，接下来一段时间仍将在这门语言上在做一些研究。\u003c/p\u003e\n\u003cp\u003e最后，如果你对 wu 的详细实现感兴趣，它的代码已经\u003ca href=\"https://github.com/shanzi/wu\" target=\"_blank\" rel=\"noopener\"\u003e开源在 GitHub 上\u003c/a\u003e，\n我还上传了编译好的可执行文件\u003ca href=\"https://github.com/shanzi/wu/releases\" target=\"_blank\" rel=\"noopener\"\u003e可供下载\u003c/a\u003e，欢迎 Bug 反馈和代码贡献。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-08-14T10:02:47Z",
  "Author": "Chase Zhang"
}