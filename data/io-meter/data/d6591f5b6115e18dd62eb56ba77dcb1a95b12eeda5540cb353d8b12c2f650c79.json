{
  "Source": "io-meter",
  "Title": "Functional Go: Vector Trie 的实现",
  "Link": "https://io-meter.com/2016/09/15/functional-go-implement-vector-trie/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003e\u003ca href=\"/2016/09/03/Functional-Go-persist-datastructure-intro/\"\u003e上一篇\u003c/a\u003e 文章介绍了多种实现函数式编程当中持久化数据结构的思路，\n其中重点对 Vector Trie 这种数据结构的实现原理进行了解释。这一次我们就使用 Golang 来初步地实现这种数据结构。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e这篇文章是系列文章的一部分，如果还没有浏览过文章的其它部分请参考：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://io-meter.com/2016/09/03/Functional-Go-persist-datastructure-intro/\"\u003e持久化数据结构简介\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://io-meter.com/2016/09/15/functional-go-implement-vector-trie/\"\u003eVector Trie 的实现\u003c/a\u003e (本文)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://io-meter.com/2016/10/01/Functional-Go-Transient-and-Persistent/\"\u003eTransient 及持久化\u003c/a\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e首先我们来回顾一下 Vector Trie 的设计思路，为了代替 ArrayList 这种数据结构以及兼顾高性能的随机访问和内存使用，\nVector Trie 主要采用了以下几种设计：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e将 ArrayList 连续的地址空间切分成一段一段定长的数组\u003c/li\u003e\n\u003cli\u003e使用 Trie 树结构将这些分段组织起来\u003c/li\u003e\n\u003cli\u003e读取和写入的时候，利用 Trie 树检索的方法查找目标元素所在的位置\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e值得注意的是，Vector Trie 作为一种高效的 ArrayList 替代，并非一定要用来实现持久化操作，\n在这篇文章当中，我们将会先完成一个不具备持久化能力的 Vector Trie 实现。将 Vector Trie\n转变为不可变数据结构以及 Transient 的实现将会留作下一篇文章的内容。\u003c/p\u003e\n\u003ch2 id=\"List__u7684_u8BBE_u8BA1\"\u003e\u003ca href=\"#List__u7684_u8BBE_u8BA1\" class=\"headerlink\" title=\"List 的设计\"\u003e\u003c/a\u003eList 的设计\u003c/h2\u003e\u003cp\u003e首先我们定义一些常数：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003econst\u003c/span\u003e (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    SHIFT     = \u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    NODE_SIZE = (\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; SHIFT)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    MASK      = NODE_SIZE - \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e其中，\u003ccode\u003eNODE_SIZE\u003c/code\u003e 是 List 内部节点的宽度，这里我们选用了通用的$2^{5}$，也就是 32 作为 Trie 树节点的宽度。\n这意味着每个 Trie 树节点将会最多有 32 个子节点。\u003ccode\u003eSHIFT\u003c/code\u003e 和 \u003ccode\u003eMASK\u003c/code\u003e 这两个常数将会在我们实现 Trie 树的过程中被用到。\u003c/p\u003e\n\u003cp\u003e我们将要完成的 List 在 Golang 下接口定义是:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e List \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Get(n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e) (\u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}, \u003cspan class=\"keyword\"\u003ebool\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Set(n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    PushBack(value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    RemoveBack() \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Len() \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在这一步我们还未考虑持久化的实现，每个操作会直接在原来的基础上进行修改，因此在这里不会返回新的对象。\n可以看到，目前的 List 定义非常简单，只包含四种基本的操作和获取当前 List 长度的 \u003ccode\u003eLen\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cp\u003e由于我们的 List 是以 Trie 树为基础的，先给出 Trie 节点的定义和构造函数：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e trieNode \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    children []\u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003enewTrieNode\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e *\u003cspan class=\"title\"\u003etrieNode\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u0026amp;trieNode{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        children: \u003cspan class=\"built_in\"\u003emake\u003c/span\u003e([]\u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}, NODE_SIZE),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以看到目前为止我们的内部节点非常简单，结构体只包含一个数组用来保存子节点。\n我们要将 List 的值元素保存在 Trie 树最底层的叶子节点，因此使用了\u003ccode\u003einterface{}\u003c/code\u003e这种通用类型的数组。\n这样我们就既可以使用它指向子节点，又可以用来保存值元素。\n在这里我为\u003ccode\u003etrieNode\u003c/code\u003e编写了两个方便的工具函数来分别获取子节点和值。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(node *trieNode)\u003c/span\u003e \u003cspan class=\"title\"\u003egetChildNode\u003c/span\u003e\u003cspan class=\"params\"\u003e(index \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e *\u003cspan class=\"title\"\u003etrieNode\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e child := node.children[index]; child != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e child.(*trieNode)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(node *trieNode)\u003c/span\u003e \u003cspan class=\"title\"\u003egetChildValue\u003c/span\u003e\u003cspan class=\"params\"\u003e(index \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"title\"\u003einterface\u003c/span\u003e\u003c/span\u003e{} {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e node.children[index]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e由于在 Trie 树的内部节点中，最底层保存的是值，其它节点的\u003ccode\u003echildren\u003c/code\u003e数组则保存指向子节点的引用，\n维护和记录 Trie 树的高度\u003ccode\u003elevel\u003c/code\u003e是必要的。通过\u003ccode\u003elevel\u003c/code\u003e的值访问 Trie 树的时候我们就可以知道什么时候改获取子节点，\n什么时候该获得值。这个\u003ccode\u003elevel\u003c/code\u003e在查询 Trie 树的时候也很有用。\u003c/p\u003e\n\u003cp\u003e作为访问 List 元素的入口， 我们数据的 Head 的定义如下:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e listHead \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e    \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    level  \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    root   *trieNode\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e这一结构体保存了 List 的长度、Trie 树的深度以及 Trie 树根节点的引用等信息，我们所有的 List 操作都将会由\u003ccode\u003elistHead\u003c/code\u003e\n来实现，因此它必须服从我们的\u003ccode\u003eList\u003c/code\u003e接口。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elistHead\u003c/code\u003e的构造函数就是\u003ccode\u003eList\u003c/code\u003e的构造函数，在这里我们返回一个空的\u003ccode\u003elistHead\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eNew\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"title\"\u003eList\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u0026amp;listHead{\u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"literal\"\u003enil\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e在上述定义下，我们的\u003ccode\u003eList\u003c/code\u003e实现具有如下图所示的结构:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/vector-trie-impl.png\" alt=\"Vector Trie\"/\u003e\u003c/p\u003e\n\u003cp\u003e为了简便起见，图中的 TrieNode 宽度只有 4。在这一结构的基础上，我们就可以实现 List 的一些基本操作了。\u003c/p\u003e\n\u003ch2 id=\"Get__u548C_Set\"\u003e\u003ca href=\"#Get__u548C_Set\" class=\"headerlink\" title=\"\u0026lt;code\u0026gt;Get\u0026lt;/code\u0026gt; 和 \u0026lt;code\u0026gt;Set\u0026lt;/code\u0026gt;\"\u003e\u003c/a\u003e\u003ccode\u003eGet\u003c/code\u003e 和 \u003ccode\u003eSet\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e我们先来看 Vector Trie 的查询和修改操作。这两个操作非常相似，都需要根据给定的 Index 在 Trie 树中找到对应的位置，\n区别在于\u003ccode\u003eGet\u003c/code\u003e操作将会返回目标位置储存的元素而\u003ccode\u003eSet\u003c/code\u003e操作将会修改它。\u003c/p\u003e\n\u003cp\u003eTrie 树的中文名称是前缀树，从这个名字当中就可以一窥这类数据结构的查询方法。\n简单来说，对于由 $n$ 个 Symbol $s_i$ 组成的关键字 $\\mathcal{K}={s_0, s_1, \\cdots, s_n}$，\n我们先使根节点为当前节点，之后使用 $s_0$ 查询得到的子节点作为当前节点，然后再依次使用 $s_1, s_2, \\cdots$\n在当前节点上查询得到的子节点作为当前节点，得到一个最终节点作为结果。\u003c/p\u003e\n\u003cp\u003e具体来说，在这里用户用来查询的关键字 $\\mathcal{K}$ 是一个32位类型的整型数。\n我们要将这个整形数看作一连串符号的连接，最简单的做法当然是把这个整型树看作其二进制表示，\n每隔 $m$ 位看作一个独立的符号，这样从这个整型数的二进制表示的高位开始往下，就依次可以被划分成$s_0, s_1, \\cdots, s_n$。\n由此我们也就可以将其用于 Trie 的查询。这也是为什么我们选择 $2^{m}$ 作为 TrieNode 的宽度的原因了，\n通过使用二进制位运算，我们可以非常快速的从整数当中获得 $s_i$ 的值。在程序中 $m$ 的值由 \u003ccode\u003eSHIFT\u003c/code\u003e 定义，我们使用 5 作为\n$m$，则每个 Symbol 的取值范围则是 $[0, 31]$，恰好是长度 32 的数组当中元素 Index 的范围，得到 Symbol 的值之后，\n我们可以直接从数组当中取得目标元素。\u003c/p\u003e\n\u003cp\u003e下图展示了 $m = 2$ 时的这一过程:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/persist-ds-trie-traverse.png\" alt=\"Trie Traverse\"/\u003e\u003c/p\u003e\n\u003cp\u003e另外需要注意的一点是，我们显然不会直接从 32 位的整数的最高位开始编码 $s_i$。原因在于，当数组元素较少时，\n列表里每个元素的 Index 数值都比较小，因此二进制位表示当中高位基本上都是 0， 因此创建这样一连串的只有 0\n位置不为空的树是非常不划算的行为，这也是为什么我们要记录和维护当前 Trie 树的高度。\u003c/p\u003e\n\u003cp\u003e下面给出了 \u003ccode\u003eGet\u003c/code\u003e 方法的实现。由于 \u003ccode\u003eGet\u003c/code\u003e 方法是不会修改列表中的元素的，直接使用循环获取到目标元素即可。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(head *listHead)\u003c/span\u003e \u003cspan class=\"title\"\u003eGet\u003c/span\u003e\u003cspan class=\"params\"\u003e(n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}, \u003cspan class=\"keyword\"\u003ebool\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e || n \u0026gt;= head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    root := head.root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e lv := head.level - \u003cspan class=\"number\"\u003e1\u003c/span\u003e; ; lv-- {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    index := (n \u0026gt;\u0026gt; \u003cspan class=\"keyword\"\u003euint\u003c/span\u003e(lv*SHIFT)) \u0026amp; MASK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e lv \u0026lt;= \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Arrived at leaves node, return value\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e root.getChildValue(index), \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Update root node\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root = root.getChildNode(index)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003ccode\u003eSet\u003c/code\u003e 操作与之类似，但是我们这里使用递归的方法进行，这样做的目的是为了让 \u003ccode\u003eSet\u003c/code\u003e\n函数在递归调用的每次返回时可以复写当前节点，直至最后复写 \u003ccode\u003eroot\u003c/code\u003e 节点。\n但是在未来实现持久化的时候，可以通过返回新的节点的方式获得从根节点到叶子节点这条路径的一个副本。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(head *listHead)\u003c/span\u003e \u003cspan class=\"title\"\u003eSet\u003c/span\u003e\u003cspan class=\"params\"\u003e(n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e || n \u0026gt;= head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003epanic\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Index out of bound\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    head.root = setInNode(head.root, n, head.level, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003esetInNode\u003c/span\u003e\u003cspan class=\"params\"\u003e(root *trieNode, n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, level \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e *\u003cspan class=\"title\"\u003etrieNode\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    index := (n \u0026gt;\u0026gt; \u003cspan class=\"keyword\"\u003euint\u003c/span\u003e((level\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)*SHIFT)) \u0026amp; MASK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e level == \u003cspan class=\"number\"\u003e1\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root.children[index] = value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        child := root.getChildNode(index)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root.children[index] = setInNode(child, n, level\u003cspan class=\"number\"\u003e-1\u003c/span\u003e, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e特别值得注意的是 \u003ccode\u003eindex = (n \u0026gt;\u0026gt; uint((level - 1)*SHIFT)) \u0026amp; MASK\u003c/code\u003e 这一语句了，\n它根据\u003ccode\u003elevel\u003c/code\u003e的值计算当前应该用来查询子元素的$s_i$，也就是目标子元素在数组中的位置。\n其中 \u003ccode\u003eSHIFT = 5\u003c/code\u003e，\u003ccode\u003eMASK = (1 \u0026lt;\u0026lt; SHIFT) - 1 = 31\u003c/code\u003e，\u003ccode\u003eMASK\u003c/code\u003e的二进制表示从最低位开始向上恰好是 5 个 1，\n这样我们就把 \u003ccode\u003en\u003c/code\u003e 每 5 位一组分为一个 Symbol 进行查询了。\u003c/p\u003e\n\u003ch1 id=\"tail__u4F18_u5316\"\u003e\u003ca href=\"#tail__u4F18_u5316\" class=\"headerlink\" title=\"\u0026lt;code\u0026gt;tail\u0026lt;/code\u0026gt; 优化\"\u003e\u003c/a\u003e\u003ccode\u003etail\u003c/code\u003e 优化\u003c/h1\u003e\u003cp\u003e可以在 List 当中查询和修改元素之后，我们还需要允许在 List 当中添加和删除元素，\n不过在此之前，我们要先介绍我们将要采用的一种针对 Vector Trie 的优化手段：\u003ccode\u003etail\u003c/code\u003e 优化。\u003c/p\u003e\n\u003cp\u003e在 Vector Trie 所支持的 4 种基础操作 \u003ccode\u003eGet\u003c/code\u003e、\u003ccode\u003eSet\u003c/code\u003e、\u003ccode\u003ePushBack\u003c/code\u003e和\u003ccode\u003eRemoveBack\u003c/code\u003e中，\n只有后两种会修改列表中所储存的元素长度。同时也只有 \u003ccode\u003ePushBack\u003c/code\u003e 操作可能会分配新的内存空间。\n由于 \u003ccode\u003ePushBack\u003c/code\u003e 和 \u003ccode\u003eRemoveBack\u003c/code\u003e 是 List 所应该支持的高频操作，针对这两个操作进行性能优化是一件很有必要的事情。\n这两种操作都是直接作用于 List 尾部，参考链表的尾指针的思想，我们容易想到可以直接保留一个指向 Trie\n树最末尾元素节点的引用，这样每次对尾部进行操作就不需要进行耗时的 Trie 树查询操作了。\u003c/p\u003e\n\u003cp\u003eTail 优化技巧的应用思路如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ePushBack\u003c/code\u003e 和 \u003ccode\u003eRemoveBack\u003c/code\u003e 操作直接作用于\u003ccode\u003etail\u003c/code\u003e指针所指向的 \u003ccode\u003etrieNode\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePushBack\u003c/code\u003e 之前如果当前的 \u003ccode\u003etail\u003c/code\u003e 已满，则将\u003ccode\u003etail\u003c/code\u003e放回到 Trie 树上再创建一个新的\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRemoveBack\u003c/code\u003e 之后，如果当前 \u003ccode\u003etail\u003c/code\u003e 已空，则释放当前 \u003ccode\u003etail\u003c/code\u003e，并将 Trie 树的最后一个 \u003ccode\u003etrieNode\u003c/code\u003e 取出作为新的 \u003ccode\u003etail\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我们总是保持 \u003ccode\u003etail\u003c/code\u003e 段非空，也就是说 \u003ccode\u003etail\u003c/code\u003e 要么是 \u003ccode\u003enil\u003c/code\u003e，代表整个 List 当中没有储存任何元素，\n要么至少包含一个元素。这样的设计可以简化 \u003ccode\u003eRemoveBack\u003c/code\u003e 的实现，也可以提高未来可能会提供的 \u003ccode\u003eGetLast\u003c/code\u003e 等方法的操作性能。\u003c/p\u003e\n\u003cp\u003e为了实现上述的操作，我们需要维护一个\u003ccode\u003eoffset\u003c/code\u003e值，它代表的是列表中在 \u003ccode\u003etail\u003c/code\u003e 节点之前的节点当中储存的元素的数量，\n同时也是 \u003ccode\u003etail\u003c/code\u003e 节点中下标\u003ccode\u003e0\u003c/code\u003e的元素在整个 List 当中的 Index。在\u003ccode\u003eGet\u003c/code\u003e、\u003ccode\u003eSet\u003c/code\u003e操作之时，我们先检查目标 Index\n是否大于等于\u003ccode\u003eoffset\u003c/code\u003e，如果为真，我们就直接在 \u003ccode\u003etail\u003c/code\u003e 节点上进行操作。\n否则说明目标元素在 Trie 树当中，我们仍然使用之前的 Trie 树操作。\n下图展示添加 \u003ccode\u003etail\u003c/code\u003e 之后的数据结构：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/vector-trie-impl-with-tail.png\" alt=\"Vector Trie with Tail\"/\u003e\u003c/p\u003e\n\u003cp\u003e修改之后的\u003ccode\u003eGet\u003c/code\u003e和\u003ccode\u003eSet\u003c/code\u003e方法如下：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(head *listHead)\u003c/span\u003e \u003cspan class=\"title\"\u003eGet\u003c/span\u003e\u003cspan class=\"params\"\u003e(n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}, \u003cspan class=\"keyword\"\u003ebool\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e || n \u0026gt;= head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026gt;= head.offset {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e head.tail.getChildValue(n - head.offset), \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Get elements in the trie\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(head *listHead)\u003c/span\u003e \u003cspan class=\"title\"\u003eSet\u003c/span\u003e\u003cspan class=\"params\"\u003e(n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e || n \u0026gt;= head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003epanic\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Index out of bound\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026gt;= head.offset {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.tail = setTail(head.tail, n-head.offset, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.root = setInNode(head.root, n, head.level, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003esetTail\u003c/span\u003e\u003cspan class=\"params\"\u003e(tail *trieNode, n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e *\u003cspan class=\"title\"\u003etrieNode\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e tail == \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tail = newTrieNode()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    tail.children[n] = value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e tail\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch2 id=\"PushBack__u548C_RemoveBack\"\u003e\u003ca href=\"#PushBack__u548C_RemoveBack\" class=\"headerlink\" title=\"\u0026lt;code\u0026gt;PushBack\u0026lt;/code\u0026gt; 和 \u0026lt;code\u0026gt;RemoveBack\u0026lt;/code\u0026gt;\"\u003e\u003c/a\u003e\u003ccode\u003ePushBack\u003c/code\u003e 和 \u003ccode\u003eRemoveBack\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e在加入 \u003ccode\u003etail\u003c/code\u003e 之后，我们终于可以开始实现把元素插入和删除的操作了，目前我们只支持从数组尾部添加和删除元素。\n由于使用了 \u003ccode\u003etail\u003c/code\u003e 优化，两个操作的主要实质内容其实都发生在 \u003ccode\u003etail\u003c/code\u003e 节点上，\n但是在这一过程中需要考虑维护\u003ccode\u003etail\u003c/code\u003e节点的问题。\u003c/p\u003e\n\u003cp\u003e如前文所述，我们如果我们在试图进行\u003ccode\u003ePushBack\u003c/code\u003e的时候\u003ccode\u003etail\u003c/code\u003e中的元素已满，那么我们需要将当前的\u003ccode\u003etail\u003c/code\u003e节点放入 Trie 中，\n维护和更新\u003ccode\u003eoffset\u003c/code\u003e的值，然后新建一个\u003ccode\u003etail\u003c/code\u003e出来并把元素插入到新的\u003ccode\u003etail\u003c/code\u003e上。\n由于\u003ccode\u003eoffset\u003c/code\u003e是\u003ccode\u003etail\u003c/code\u003e当中第一个元素在 List 中的位置，利用这一特点，\n我们可以在 Trie 树中找出\u003ccode\u003eoffset\u003c/code\u003e位置的元素应该存在的位置，那里自然也就是\u003ccode\u003etail\u003c/code\u003e应该被放置的地方。\n参考\u003ccode\u003esetInNode\u003c/code\u003e的递归实现，我们容易得到如下代码:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eputTail\u003c/span\u003e\u003cspan class=\"params\"\u003e(root *trieNode, tail *trieNode, n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, level \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e *\u003cspan class=\"title\"\u003etrieNode\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    index := (n \u0026gt;\u0026gt; \u003cspan class=\"keyword\"\u003euint\u003c/span\u003e((level\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)*SHIFT)) \u0026amp; MASK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e root == \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root = newTrieNode()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e level == \u003cspan class=\"number\"\u003e1\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e tail\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root.children[index] = putTail(root.getChildNode(index), tail, n, level\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e但是这一步过程当中存在一个问题，那就是如果当前的 Trie 树也是满的，在放入 \u003ccode\u003etail\u003c/code\u003e 之时，\n必须先提高 Trie 树的深度，也就是使 \u003ccode\u003elevel\u003c/code\u003e 增加 $1$。Trie 树等层数增长很容易实现，\n我们只需要新建一个\u003ccode\u003eroot\u003c/code\u003e节点，然后将原来的\u003ccode\u003eroot\u003c/code\u003e节点设置为新节点的第一个子节点。\u003c/p\u003e\n\u003cp\u003e那我们该如何判断是否需要进行层增长的操作呢？在这里我们依然要利用\u003ccode\u003eoffset\u003c/code\u003e的特点，\n由于在增加后的 Trie 树中\u003ccode\u003eoffset\u003c/code\u003e所代表的 Index 将会可以在 Trie 树中查询到，\n因此对于 Trie 树的高度\u003ccode\u003elevel\u003c/code\u003e，必须满足\u003ccode\u003e(offset \u0026gt;\u0026gt; (level * SHIFT)) == 0\u003c/code\u003e。\n通过这个表达式，我们就可以保证在\u003ccode\u003eputTail\u003c/code\u003e时 Trie 树的层数是足够高的了。\u003c/p\u003e\n\u003cp\u003e下面的是\u003ccode\u003ePushBack\u003c/code\u003e的实现代码：\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(head *listHead)\u003c/span\u003e \u003cspan class=\"title\"\u003ePushBack\u003c/span\u003e\u003cspan class=\"params\"\u003e(value \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{})\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Increase the depth of tree while the capacity is not enough\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e-head.offset \u0026lt; NODE_SIZE {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Tail node has free space\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.tail = setTail(head.tail, head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e-head.offset, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Tail node is full\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        n := head.offset\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lv := head.level\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root := head.root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e lv == \u003cspan class=\"number\"\u003e0\u003c/span\u003e || (n\u0026gt;\u0026gt;\u003cspan class=\"keyword\"\u003euint\u003c/span\u003e(lv*SHIFT)) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            parent := newTrieNode()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            parent.children[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] = root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            root = parent\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lv++\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.root = putTail(root, head.tail, n, lv)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.tail = \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.tail = setTail(head.tail, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.level = lv\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.offset += NODE_SIZE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e++\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e因为我们会保证\u003ccode\u003etail\u003c/code\u003e节点非空，所以\u003ccode\u003eRemoveBack\u003c/code\u003e也总是作用在\u003ccode\u003etail\u003c/code\u003e上。它的实现很容易，需要注意的主要有以下3点:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e如果执行\u003ccode\u003eRemoveBack\u003c/code\u003e之后\u003ccode\u003etail\u003c/code\u003e变成空的，则需要从 Trie 树里取出最后一个\u003ccode\u003etrieNode\u003c/code\u003e作为新的\u003ccode\u003etail\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e如果执行\u003ccode\u003eRemoveBack\u003c/code\u003e之后 List 长度变为 0，则直接重置列表到空的状态\u003c/li\u003e\n\u003cli\u003e如果从 Trie 树中取出节点之后\u003ccode\u003eroot\u003c/code\u003e节点只有一个孩子，那么我们把\u003ccode\u003eroot\u003c/code\u003e节点替换成它的孩子，由此 Trie 的高度减小 $1$\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e下面是从 Trie 当中获得一个节点的代码:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003egetTail\u003c/span\u003e\u003cspan class=\"params\"\u003e(root *trieNode, n \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e, level \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"params\"\u003e(*trieNode, *trieNode)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    index := (n \u0026gt;\u0026gt; \u003cspan class=\"keyword\"\u003euint\u003c/span\u003e((level\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)*SHIFT)) \u0026amp; MASK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e level == \u003cspan class=\"number\"\u003e1\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        child, tail := getTail(root.getChildNode(index), n, level\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e index == \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u0026amp;\u0026amp; child == \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// The first element has been removed, which means current node\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// becomes empty, remove current node by returning nil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, tail\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// Current node is not empty\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e root, tail\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e为了能使用上述函数获得最后一个\u003ccode\u003etrieNode\u003c/code\u003e，我们使\u003ccode\u003en = len - 1\u003c/code\u003e，也就是最后一个元素 Index。\n在取出\u003ccode\u003etail\u003c/code\u003e之后，我们需要检查 Trie 是否需要降低层数。由于我们总是保证 Trie 树中的元素编号是从 0\n开始连续到达\u003ccode\u003eoffset - 1\u003c/code\u003e的，因此如果\u003ccode\u003eroot\u003c/code\u003e只剩下一个孩子，那么它一定是第\u003ccode\u003e0\u003c/code\u003e号孩子。\n设 Trie 的高度是\u003ccode\u003elevel\u003c/code\u003e，\u003ccode\u003en = offset - 1\u003c/code\u003e，那么也就有 \u003ccode\u003e(n\u0026gt;\u0026gt;uint((lv-1)*SHIFT)) == 0\u003c/code\u003e为真。\n通过这个判断我们就可以决定是否降低 Trie 树的层数了。\u003c/p\u003e\n\u003cp\u003e完整的 \u003ccode\u003eRemoveBack\u003c/code\u003e 实现如下:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(head *listHead)\u003c/span\u003e \u003cspan class=\"title\"\u003eRemoveBack\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003cspan class=\"title\"\u003einterface\u003c/span\u003e\u003c/span\u003e{} {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e == \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003epanic\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Remove from empty list\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    value := head.tail.getChildValue(head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e - head.offset - \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    head.tail = setTail(head.tail, head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e-head.offset\u003cspan class=\"number\"\u003e-1\u003c/span\u003e, \u003cspan class=\"literal\"\u003enil\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// clear reference to release memory\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e--\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e == \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.level = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.offset = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.root = \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.tail = \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e \u0026lt;= head.offset {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"comment\"\u003e// tail is empty, retrieve new tail from root\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            head.root, head.tail = getTail(head.root, head.\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e\u003cspan class=\"number\"\u003e-1\u003c/span\u003e, head.level)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            head.offset -= NODE_SIZE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// Reduce the depth of tree if root only have one child\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        n := head.offset - \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lv := head.level\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        root := head.root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e lv \u0026gt; \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026amp;\u0026amp; (n\u0026gt;\u0026gt;\u003cspan class=\"keyword\"\u003euint\u003c/span\u003e((lv\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)*SHIFT)) == \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            root = root.getChildNode(\u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            lv--\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.root = root\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        head.level = lv\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch2 id=\"u6027_u80FD_u6D4B_u8BD5\"\u003e\u003ca href=\"#u6027_u80FD_u6D4B_u8BD5\" class=\"headerlink\" title=\"性能测试\"\u003e\u003c/a\u003e性能测试\u003c/h2\u003e\u003cp\u003e至此我们的 Vector Trie 就实现了，虽然持久化的功能尚未完成，但是我们已经拥有了一个可用的 List 容器类。\n接下来让我们测试一下这一容器的性能。我编写了如下的 Benchmark 代码:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eBenchmarkPushBack\u003c/span\u003e\u003cspan class=\"params\"\u003e(b *testing.B)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    list := New()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e v \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i := \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; b.N; i++ {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        list.PushBack(v)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eBenchmarkGet\u003c/span\u003e\u003cspan class=\"params\"\u003e(b *testing.B)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mask := (\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    list := generateList(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, mask+\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i := \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; b.N; i++ {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        list.Get(i \u0026amp; mask)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eBenchmarkSet\u003c/span\u003e\u003cspan class=\"params\"\u003e(b *testing.B)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mask := (\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    list := generateList(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, mask+\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e v \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e{} = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i := \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; b.N; i++ {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        list.Set(i\u0026amp;mask, v)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eBenchmarkRemoveBack\u003c/span\u003e\u003cspan class=\"params\"\u003e(b *testing.B)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mask := (\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"number\"\u003e20\u003c/span\u003e) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    list := generateList(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, mask+\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i := \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; b.N; i++ {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e list.Len() \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list.RemoveBack()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            b.StopTimer()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            list = generateList(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, mask+\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            b.StartTimer()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e值得注意得是，在 Golang 中将原始数据类型如\u003ccode\u003eint\u003c/code\u003e等转换为\u003ccode\u003einterface{}\u003c/code\u003e其实会产生内存分配操作，\n因此会拖慢程序的运行，为了了解原始的操作性能，\u003ccode\u003eSet\u003c/code\u003e和\u003ccode\u003ePushBack\u003c/code\u003e操作使用的都是固定的\u003ccode\u003evalue\u003c/code\u003e。\n\u003ccode\u003eGet\u003c/code\u003e操作则是在一个长度为 $1024$ 的 List 上进行循环的读操作。下面是 Benchmark 的结果:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eBenchmarkPushBack-2     20000000           67.8 ns/op       34 B/op     0 allocs/op\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eBenchmarkGet-2          100000000          11.4 ns/op        0 B/op     0 allocs/op\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eBenchmarkSet-2          50000000           20.6 ns/op        0 B/op     0 allocs/op\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eBenchmarkRemoveBack-2   50000000           25.3 ns/op        0 B/op     0 allocs/op\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e由此可见，我们实现的 Vector trie 在 \u003ccode\u003eGet\u003c/code\u003e、\u003ccode\u003eSet\u003c/code\u003e和\u003ccode\u003eRemoveBack\u003c/code\u003e上的性能比较让人满意，基本控制在\u003ccode\u003e30ns\u003c/code\u003e以下，\n\u003ccode\u003ePushBack\u003c/code\u003e操作的时间略高于预期，经过进一步的分析发现时间主要花费在\u003ccode\u003eruntime.scanobject\u003c/code\u003e方法上，\n也就是说 Golang 自己的 GC 性能影响了我们的实现性能。在未来也许可以对我们\u003ccode\u003ePushBack\u003c/code\u003e时所进行的内存操作进行进一步的优化，\n从另一个角度来说，Golang 自己的 GC 性能也还有进一步提升的空间。\u003c/p\u003e\n\u003ch2 id=\"u603B_u7ED3\"\u003e\u003ca href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e在这篇文章中，我们初步实现了不带持久化功能的 Vector Trie 并对其进行了简单的性能分析。\u003c/p\u003e\n\u003cp\u003e从当前的实现中已经可以看到将其转变为不可变数据结构的曙光。在下一篇文章中我们将会继续讨论 Vector Trie，\n给出将其变化为不可变数据结构的最终实现方法和使其具备高性能读写的 Transient 数据结构的实现。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-09-15T08:47:52Z",
  "Author": "Chase Zhang"
}