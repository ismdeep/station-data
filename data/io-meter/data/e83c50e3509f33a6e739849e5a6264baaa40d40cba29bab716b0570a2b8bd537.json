{
  "Source": "io-meter",
  "Title": "Swift の 函数式编程",
  "Link": "https://io-meter.com/2014/06/04/swift's-functional-programing/",
  "Content": "\u003cdiv class=\"entry\"\u003e\n      \u003cp\u003eSwift 相比原先的 Objective-C 最重要的优点之一，就是对函数式编程提供了更好的支持。\nSwift 提供了更多的语法糖和一些新特性来增强函数式编程的能力，本文就在这方面进行一些讨论。\u003c/p\u003e\n\u003ca id=\"more\"\u003e\u003c/a\u003e\n\u003cp\u003e##Swift 概览\u003c/p\u003e\n\u003cp\u003e对编程语言有了一些经验的程序员，尤其是那些对多种不同类型的编程语言都有经验的开发者，\n在学习新的语言的时候更加得心应手。原因在于编程语言本身也是有各种范式的，\n把握住这些特点就可以比较容易的上手了。\u003c/p\u003e\n\u003cp\u003e在入手一门新的语言的时候，一般关注的内容有：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e原生数据结构\u003c/li\u003e\n\u003cli\u003e运算符\u003c/li\u003e\n\u003cli\u003e分支控制\u003c/li\u003e\n\u003cli\u003e如果是面向对象的编程语言，其面向对象的实现是怎样的\u003c/li\u003e\n\u003cli\u003e如果是函数式编程语言，其面向函数式编程的实现是怎样的\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e通过这几个点，其实只要阅读 Swift 文档的第一章，你就可以对这个语言有一个大概的印象。\n比如对于数据结构，Swift 和其他的编程语言大体一样，有 Int, Float, Array, Dictionary 等，\n运算符也基本与 C 语言一致等。\n本文主要集中于对 Swift 函数式编程方面的特点进行一些盘点，因此在这里假设大家对 Swift 的基本语法已经有所了解。\u003c/p\u003e\n\u003cp\u003e对于一种编程范式，要掌握它也要抓住一些要点。对于支持函数式编程的语言，其一般的特点可能包含以下几种：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e支持递归\u003c/li\u003e\n\u003cli\u003e函数本身是语言 First Class 的组成要素，且支持高阶函数和闭包\u003c/li\u003e\n\u003cli\u003e函数调用尽可能没有副作用\n(\u003ca href=\"https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29\" target=\"_blank\" rel=\"noopener\"\u003eSide Effect\u003c/a\u003e)的条件\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e接下来我们来逐个盘点这些内容。\u003c/p\u003e\n\u003ch1 id=\"u9012_u5F52\"\u003e\u003ca href=\"#u9012_u5F52\" class=\"headerlink\" title=\"递归\"\u003e\u003c/a\u003e递归\u003c/h1\u003e\u003cp\u003eSwift 是支持递归的，事实上现在不支持递归的编程语言已经很难找到了。在 \nSwift 里写一个递归调用和其他编程语言并没有什么区别：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc fib(n: Int) -\u0026gt; Int {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  if n \u0026lt;= 1 {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  else {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return fib(n-1) + fib(n-2)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efib(6) // output 13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e关于 Swift 的递归没有什么好说的。作为一个常识，我们知道递归是需要消耗栈空间的。\n在函数式编程语言中，递归是一个非常常用的方法，然而使用不慎很容易导致栈溢出的问题。\n如果将代码改写为非递归实现，又可能会导致代码的可读性变差，因此有一个技巧是使用“尾递归”，\n然后让编译器来优化代码。\u003c/p\u003e\n\u003cp\u003e一个 Common Lisp 的尾递归的例子是\u003c/p\u003e\n\u003cfigure class=\"highlight lisp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e(\u003cspan class=\"name\"\u003edefun\u003c/span\u003e fib(\u003cspan class=\"name\"\u003en\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    (\u003cspan class=\"name\"\u003efib-iter\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e n))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(\u003cspan class=\"name\"\u003edefun\u003c/span\u003e fib-iter(\u003cspan class=\"name\"\u003ea\u003c/span\u003e b count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    (\u003cspan class=\"name\"\u003eif\u003c/span\u003e (\u003cspan class=\"name\"\u003e=\u003c/span\u003e count \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"name\"\u003efib-iter\u003c/span\u003e (\u003cspan class=\"name\"\u003e+\u003c/span\u003e a b) a (\u003cspan class=\"name\"\u003e-\u003c/span\u003e count \u003cspan class=\"number\"\u003e1\u003c/span\u003e))))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e我们可以把我们上述的 Swift 代码也改写成相同形式\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc fibiter(a: Int, b: Int, count: Int) -\u0026gt; Int {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  if count==0 {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  else {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return fibiter(a + b, a, count-1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc fib(n: Int) -\u0026gt; Int {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  return fibiter(1, 1, n);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e我们可以 Playground 里观察是否使用尾递归时的迭代结果变化。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/posts/recurrence-fib.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e值得注意的是，这里出现了一个 Swift 的问题。虽然 Swift 支持嵌套函数，但是当我们将\u003ccode\u003efibiter\u003c/code\u003e\n作为一个高阶函数包含在\u003ccode\u003efib\u003c/code\u003e函数之内的时候却发生了 EXC_BAD_ACCESS 报错，\n并不清楚这是语言限制还是 Bug。\u003c/p\u003e\n\u003ch2 id=\"Swift__u7684_u9AD8_u9636_u51FD_u6570_u548C_u95ED_u5305\"\u003e\u003ca href=\"#Swift__u7684_u9AD8_u9636_u51FD_u6570_u548C_u95ED_u5305\" class=\"headerlink\" title=\"Swift 的高阶函数和闭包\"\u003e\u003c/a\u003eSwift 的高阶函数和闭包\u003c/h2\u003e\u003cp\u003e在 Objective-C 时代，使用 block 来实现高阶函数或者闭包已经是非常成熟的技术了。\nSwift 相比 Objective-C 的提高在于为函数式编程添加了诸多语法上的方便。\u003c/p\u003e\n\u003cp\u003e首先是高阶函数的支持，可以在函数内定义函数，下面就是一个很简洁的例子。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc greetingGenerator(object:String) -\u0026gt; (greeting:String) -\u0026gt; String {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  func sayGreeting(greeting:String) -\u0026gt; String {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return greeting + \u0026#34;, \u0026#34; + object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  return sayGreeting\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elet sayToWorld = greetingGenerator(\u0026#34;world\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esayToWorld(greeting: \u0026#34;Hello\u0026#34;) // \u0026#34;Hello, World\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esayToWorld(greeting: \u0026#34;你好\u0026#34;) // \u0026#34;你好, World\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e如果使用 block 实现上述功能，可读性就不会有这么好。而且 block 的语法本身也比较怪异，\n之前没少被人吐槽。Swift 从这个角度来看比较方便。事实上，在 Swift 里可以将函数当做对象赋值，\n这和很多函数式编程语言是一样的。\u003c/p\u003e\n\u003cp\u003e作为一盘大杂烩，Swift 的函数系统也很有 JavaScript 的影子在里面。比如可以向下面这样定义函数：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003elet add = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  (a:Int, b:Int) -\u0026gt; Int in\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  return a+b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eadd(1, 2) // 3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e等号之后被赋予变量\u003ccode\u003eadd\u003c/code\u003e的是一个闭包表达式，因此更准确的说，\n这是将一个闭包赋值给常量了。注意在闭包表达式中，\u003ccode\u003ein\u003c/code\u003e关键字之前是闭包的形式定义，之后是具体代码实现。\nSwift 中的闭包跟匿名函数没有什么区别。\n如果你将它赋值给对象，就跟 JavaScript 中相同的实践是一样的了。幸好 Swift 作为 C 系列的语言，\n其分支语句 if 等本身是有作用域的，因此不会出现下列 JavaScript 的坑：\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (someNum\u0026gt;\u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title\"\u003ea\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ alert(\u003cspan class=\"string\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e) };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title\"\u003ea\u003c/span\u003e(\u003cspan class=\"params\"\u003e\u003c/span\u003e)\u003c/span\u003e{ alert(\u003cspan class=\"string\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e) };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea() \u003cspan class=\"comment\"\u003e// will always alert \u0026#34;two\u0026#34; in most of browsers\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eSwift 的闭包表达式和函数都可以作为函数的参数，从下面的代码我们可以看出闭包和函数的一致性：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc function() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  println(\u0026#34;this is a function\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elet closure = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  () -\u0026gt; () in\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  println(\u0026#34;this is a closure\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc run(somethingCanRun:()-\u0026gt; ()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  somethingCanRun()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun(function)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun(closure)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e类似于 Ruby，Swift 作为函数参数的闭包做了一点语法糖。\n在 Ruby 中使用 Block 的时候，我们可以这样写:\n\u003c/p\u003e\u003cfigure class=\"highlight ruby\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e(\u003cspan class=\"number\"\u003e1\u003c/span\u003e...\u003cspan class=\"number\"\u003e5\u003c/span\u003e).map {\u003cspan class=\"params\"\u003e|x|\u003c/span\u003e x*\u003cspan class=\"number\"\u003e2\u003c/span\u003e} /\u003cspan class=\"regexp\"\u003e/ =\u0026gt; [2, 4, 6, 8]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e在 Swift 当中我们可以得到几乎一样的表达式。\n\u003c/p\u003e\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003evar a = Array(1..5).map {x in x*2}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e// a = [2, 4, 6, 8]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e也就是说， 如果一个函数的最后一个参数是闭包，那么它在语法上可以放在函数调用的外面。\n闭包还可以用\u003ccode\u003e$0\u003c/code\u003e、\u003ccode\u003e$1\u003c/code\u003e等分别来表示第0、第1个参数等。 基本的运算符也可以看做函数。\n下面的几种方式都可以实现逆序倒排的功能。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003elet thingsToSort = Array(1..5)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evar reversed1 = sort(thingsToSort) { a, b in a\u0026lt;b}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evar reversed2 = sort(thingsToSort) { $0 \u0026lt; $1}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evar reversed3 = sort(thingsToSort, \u0026lt;) // operator as a function\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e// all the above are [5, 4, 3, 2, 1]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e总体来说，Swift 在添加方便函数操作、添加相关语法糖方面走的很远，基本上整合了目前各种语言中比较方便的特性。\n实用性较好。\u003c/p\u003e\n\u003ch2 id=\"Side_Effects\"\u003e\u003ca href=\"#Side_Effects\" class=\"headerlink\" title=\"Side Effects\"\u003e\u003c/a\u003eSide Effects\u003c/h2\u003e\u003cp\u003e在计算机科学中，函数副作用指当调用函数时，除了返回函数值之外，还对主调用函数产生附加的影响。例如修改全局变量\n(函数外的变量)或修改参数(\u003ca href=\"https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29\" target=\"_blank\" rel=\"noopener\"\u003ewiki\u003c/a\u003e)。\n函数副作用会给程序带来一些不必要的麻烦。\u003c/p\u003e\n\u003cp\u003e为了减少函数副作用，很多函数式编程语言都力求达到所谓的“纯函数”。\n纯函数是指函数与外界交换数据的唯一渠道是参数和返回值， 而不会受到函数的外部变量的干扰。\n乍看起来这似乎跟闭包的概念相抵触，因为闭包本身的一个重要特点就是可以访问到函数定义时的上下文环境。\u003c/p\u003e\n\u003cp\u003e事实上，为了在这种情况下支持纯函数，一些编程语言如 Clojure 等提供的数据结构都是不可变(或者说 Persist)的。\n因此其实也就没有我们传统意义上的所认为的“变量”的概念。比如说，在 Python 中，字符串\u003ccode\u003estr\u003c/code\u003e就是一类不可变的数据结构。\n你不能在原来的字符串上进行修改，每次想要进行类似的操作，其实都是生成了一个新的\u003ccode\u003estr\u003c/code\u003e对象。\n然而 Python 中的链表结构则是可变的。且看下面的代码，在 Python 中对\u003ccode\u003ea\u003c/code\u003e字符串进行修改并不会影响\u003ccode\u003eb\u003c/code\u003e，\n但是同样的操作作用于链表就会产生不一样的结果：\n\u003c/p\u003e\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ea = \u003cspan class=\"string\"\u003e\u0026#34;hello, \u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eb = a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea += \u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprint\u003c/span\u003e a \u003cspan class=\"comment\"\u003e# hello, world\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprint\u003c/span\u003e b \u003cspan class=\"comment\"\u003e# hello,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eSwift 的数据结构的 Persist 性质跟 Python 有点类似。需要注意的是，Swift 有变量和常量两种概念，\n变量使用\u003ccode\u003evar\u003c/code\u003e声明，常量使用\u003ccode\u003elet\u003c/code\u003e声明，使用\u003ccode\u003evar\u003c/code\u003e声明的时候，Swift 中的字符串的行为跟 Python 相似，\n因此修改字符串可以被理解为生成了一个新的字符串并修改了指针。同样，\n使用\u003ccode\u003evar\u003c/code\u003e声明的数组和字典也都是可变的。\u003c/p\u003e\n\u003cp\u003e在 Swift 中使用\u003ccode\u003elet\u003c/code\u003e声明的对象不能被赋值，基本数据结果也会变得不可变，但是情况更复杂一点。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003elet aDict = [\u0026#34;k1\u0026#34;:\u0026#34;v1\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elet anArray = [1, 2, 3, 4]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaDict[\u0026#34;k1\u0026#34;] = \u0026#34;newVal\u0026#34; // !! will fail !!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eanArray.append(5) // !! will fail !!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eanArray[0] = 5 // anArray = [5, 2, 3, 4] now !\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e从上面的代码中可以看出，使用\u003ccode\u003elet\u003c/code\u003e声明的字典是完全不可变的，但是数组虽然不可以改变长度，\n却可以改变数组元素的值！Swift 的文档中指出这里其实是将 Array 理解为定长数组从而方便编译优化，\n来获得更好的访问性能。\u003c/p\u003e\n\u003cp\u003e综上所述，对象是否可变的关系其实略有复杂的，可以总结为：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e使用\u003ccode\u003evar\u003c/code\u003e和\u003ccode\u003elet\u003c/code\u003e，\u003ccode\u003eInt\u003c/code\u003e和\u003ccode\u003eString\u003c/code\u003e类型都是不可变的，但是\u003ccode\u003evar\u003c/code\u003e时可以对变量重新赋值\u003c/li\u003e\n\u003cli\u003e使用\u003ccode\u003elet\u003c/code\u003e声明的常量不可以被重新赋值\u003c/li\u003e\n\u003cli\u003e使用\u003ccode\u003elet\u003c/code\u003e声明的\u003ccode\u003eDictionary\u003c/code\u003e是完全不可变的\u003c/li\u003e\n\u003cli\u003e使用\u003ccode\u003elet\u003c/code\u003e声明的\u003ccode\u003eArray\u003c/code\u003e长度不可变，但是可以修改元素的值\u003c/li\u003e\n\u003cli\u003e使用\u003ccode\u003elet\u003c/code\u003e声明的类对象是可变的\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e综上所述，即使是使用\u003ccode\u003elet\u003c/code\u003e声明的对象也有可能可变，因此在多线程情况下就无法达到“无副作用”的要求了。\u003c/p\u003e\n\u003cp\u003e此外 Swift 的函数虽然没有指针，但是仍通过参数来修改变量的。只要在函数的参数定义中加入\u003ccode\u003einout\u003c/code\u003e关键字即可。\n这个特性很有 C 的风格。\u003c/p\u003e\n\u003cp\u003e个人觉得在支持通过元组来实现多返回值的情况下，这个特性不但显得鸡肋，也是一个导致程序产生“副作用”的特性。\nSwift 支持这样的特性，恐怕更多的是为了兼容 Objective-C 以及方便在两个语言之间搭建 Bridge。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc inc(inout a:Int) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  a += 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evar num = 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einc(\u0026amp;num) // num = 2 now!\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e综上所述，使用 Swift 自带的数据结构并不能很好的实现“无副作用”的“纯函数式”编程，\n它并没有比 Python、Ruby 这类语言走的更远。幸好作为一种关注度很高的语言，\n已经有开发者为其实现了一套完全满足不可变要求的数据结构和库：\u003ca href=\"https://github.com/maxpow4h/swiftz\" target=\"_blank\" rel=\"noopener\"\u003eSwiftz\u003c/a\u003e。\n坚持使用\u003ccode\u003elet\u003c/code\u003e和 Swiftz 提供的数据结构来操作，就可以实现“纯函数式”编程。\u003c/p\u003e\n\u003ch2 id=\"u603B_u7ED3\"\u003e\u003ca href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e在我看来，Swift 虽然实现了很多其他语言的亮点特性，但是总体实现来说并不是很整齐。\n它在函数式编程方面添加了很多特性，但在控制副作用方面仅能达到平均水准。\n有些特性看起来像是为了兼容原来的 Objective-C 才加入的。\u003c/p\u003e\n\u003cp\u003eSwift 写起来相对比 Objective-C 更方便一点，脱离 Xcode 这样的 IDE 来写也是应该是可以的。\n目前 Swift 只支持集中少量的原生数据结构而没有标准库，更不具备跨平台特性，这是一个缺点。\n在仔细阅读了文档之后发现 Swift 本身的语法细节还是很多的，就比如\u003ccode\u003eswitch\u003c/code\u003e分置语句的用法就有很多内容。\n入门学习的容易程度并没有原来想象的那么好。我个人并不觉得这门语言会对其他平台的开发者有很大吸引力。\u003c/p\u003e\n\u003cp\u003eSwift 是一门很强大的语言，在其稳定版本发布之后我认为我会从 Objective-C 专向 Swift 来进行编程，\n它在未来很可能成为 iOS 和 Mac 开发的首选。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-06-04T14:59:16Z",
  "Author": "Chase Zhang"
}