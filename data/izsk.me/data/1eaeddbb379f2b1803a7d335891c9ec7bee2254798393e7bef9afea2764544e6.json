{
  "Source": "izsk.me",
  "Title": "golang学习(使用new跟make)",
  "Link": "https://izsk.me/2019/08/11/golang-new-make/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003egolang中经常会用到make来初始化变量, 另外还有new也可以用来定义及初始化变量,这两者有啥区别呢?\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"new-T\"\u003e\u003ca href=\"#new-T\" class=\"headerlink\" title=\"new(T)\"\u003e\u003c/a\u003enew(T)\u003c/h3\u003e\u003cp\u003e\u003ccode\u003efunc new(Type) *Type\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003enew(T)会为T类型的新项目，分配被\u003cstrong\u003e置零\u003c/strong\u003e的存储，并且返回它的地址，一个类型为*T的值\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ep1 := \u003cspan class=\"built_in\"\u003enew\u003c/span\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;p1 --\u0026gt; %#v \\n \u0026#34;\u003c/span\u003e, p1) \u003cspan class=\"comment\"\u003e//(*int)(0xc42000e250) \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;p1 point to --\u0026gt; %#v \\n \u0026#34;\u003c/span\u003e, *p1) \u003cspan class=\"comment\"\u003e//0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e p2 *\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ei := \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ep2 = \u0026amp;i\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;p2 --\u0026gt; %#v \\n \u0026#34;\u003c/span\u003e, p2) \u003cspan class=\"comment\"\u003e//(*int)(0xc42000e278) \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;p2 point to --\u0026gt; %#v \\n \u0026#34;\u003c/span\u003e, *p2) \u003cspan class=\"comment\"\u003e//0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e一般情况下, 能够使用new的方式也可以使用下面这种方式，效果是一样的.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003enew不常用\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"make-T\"\u003e\u003ca href=\"#make-T\" class=\"headerlink\" title=\"make(T)\"\u003e\u003c/a\u003emake(T)\u003c/h3\u003e\u003cp\u003emake只能用于初始化slice, map, channel这三种数据类型.\u003c/p\u003e\n\u003cp\u003eslice 的零值是 nil，使用 make 之后 slice 是一个初始化的 slice，即 slice 的长度、容量、底层指向的 array 都被 make 完成初始化，此时 slice 内容被类型 int 的零值填充，形式是 [0 0 0]，map 和 channel 也是类似的\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Slice\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e aSlice []\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(aSlice == \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, aSlice) \u003cspan class=\"comment\"\u003e// true, nil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebSlice := \u003cspan class=\"built_in\"\u003emake\u003c/span\u003e([]\u003cspan class=\"type\"\u003eint\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// 定义一个len=1, cap=2的slice\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(bSlice == \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, bSlice) \u003cspan class=\"comment\"\u003e// false, [0, 0]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// map\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebMap := \u003cspan class=\"built_in\"\u003emake\u003c/span\u003e(\u003cspan class=\"keyword\"\u003emap\u003c/span\u003e[\u003cspan class=\"type\"\u003eint\u003c/span\u003e]\u003cspan class=\"type\"\u003eint\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// channel \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaChan := \u003cspan class=\"built_in\"\u003emake\u003c/span\u003e(\u003cspan class=\"keyword\"\u003echan\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e, \u003cspan class=\"number\"\u003e100\u003c/span\u003e) \u003cspan class=\"comment\"\u003e// 长度为100的channel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"两者区别\"\u003e\u003ca href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"\u003e\u003c/a\u003e两者区别\u003c/h3\u003e\u003cp\u003e主要的区别分为两点:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e两者都是内建函数\u003c/li\u003e\n\u003cli\u003emake的作用是初始化内置的数据结构，只能用于slice, map, channel这3种结构, 返回对应的\u003cstrong\u003e数据类型\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003enew只接收一种类型, 根据传入的类型在堆上分配一片内存空间并返回指向这片内存空间的\u003cstrong\u003e指针\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e在内存上分配上很难说使用两者golang编译器会如何进行分配, 关于内存分配可再深入研究一番.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/\"\u003ehttps://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2019-08-11T23:30:53+08:00",
  "Author": "Z.S.K."
}