{
  "Source": "izsk.me",
  "Title": "Opentelemetry调研实践三(全链路追踪的TraceID与SpanID)",
  "Link": "https://izsk.me/2021/10/31/OpenTelemetry-Trace/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e历史文章:\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2021/10/19/OpenTelemetry-what-is-observability/\"\u003e可观测性到底在说什么\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2021/10/31/OpenTelemetry-Introduct/\"\u003eopentelemetry架构及名词介绍\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2021/10/31/OpenTelemetry-Introduct/\"\u003eopentelemetry架构及名词介绍\u003c/a\u003e 中就引出了一个问题: \u003cstrong\u003e无论在数据平面如何做流量劫持，如何透传信息，以及如何生成或者继承Span，入口流量和出口流量之间的链路都存在无法串联的问题， 这个问题要解决还是需服务来埋点透传，将链路信息透传到下一次请求当中去\u003c/strong\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003cp\u003e一个最简单的golang的例子\u003c/p\u003e\n\u003cp\u003eMain of ServiceA – \u0026gt; FuncionA of ServiceA  – \u0026gt; FunctionB of ServiceA  – \u0026gt; Main of ServiceB\u003c/p\u003e\n\u003cp\u003e调用从主函数Main of ServiceA(\u003cstrong\u003e入口流量\u003c/strong\u003e)到调用Main of ServiceB(\u003cstrong\u003e出口流量\u003c/strong\u003e）的中间的这段调用，对于大多数的APM都无法捕捉得到，原因是APM不能理解\u003cstrong\u003e业务逻辑\u003c/strong\u003e，现在大热的Istio也做不到，它本质上还是通过劫持入口及出口流量，对于方法级的调用也无法实现追踪(这里不考虑java使用字节码技术实现)，如果想知道这层调用关系，则需要:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e生成一个ID1: 使用该ID可以将所有经过的节点串连起来，按时间排序就是\u003cstrong\u003etimeline\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e生成一个ID2:可以通过该ID体现父子关系，串起来就是\u003cstrong\u003e调用栈\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这在分布式链路跟踪中刚好对应两个重要的概念：跟踪（trace）和 跨度（ span）\u003c/p\u003e\n\u003cp\u003etrace 是请求在分布式系统中的整个链路视图，span 则代表整个链路中不同服务内部的视图(有向无环图，DAG)\u003c/p\u003e\n\u003cp\u003e一个span代表系统中具有开始时间和执行时长的逻辑运行单元, 所有span 组合在一起就是整个 trace 的视图\u003c/p\u003e\n\u003cp\u003e这就是Trace要解决的问题， 对于ID1,一般称之为TraceID, 对于ID2，一般称之为Span\u003c/p\u003e\n\u003ch3 id=\"TraceID\"\u003e\u003ca href=\"#TraceID\" class=\"headerlink\" title=\"TraceID\"\u003e\u003c/a\u003eTraceID\u003c/h3\u003e\u003cp\u003e这个很好理解，如果要标记一次请求经过的所有路径，那么给这条请求经过的所有节点都使用同一个标记即可，那么反过来，通过这个标志即可得到这条请求经过的所有节点。\u003c/p\u003e\n\u003cp\u003e所以一般情况下，都会在网关处给每次请求都生成一个全局唯一的ID做为TraceID,将该TraceID放在Header中向后传递下去，后面的服务都使用该ID\u003c/p\u003e\n\u003ch3 id=\"SpanID\"\u003e\u003ca href=\"#SpanID\" class=\"headerlink\" title=\"SpanID\"\u003e\u003c/a\u003eSpanID\u003c/h3\u003e\u003cp\u003e很多人不理解为什么需要SpanID？\u003c/p\u003e\n\u003cp\u003e既然有了TraceID，如果再加上节点的被调用的时间，是不是也可以还原出整个请求的调用链路视图呢?\u003c/p\u003e\n\u003cp\u003e答案是可行的，但是使用调用时间远不如SpanID方便。\u003c/p\u003e\n\u003cp\u003e当请求到达每个服务后，服务都会为请求生成spanid，第一个spanid称之为root span，而随请求一起从上游传过来的上游服务的 spanid 会被记录成parent-spanid或者叫 pspanid。当前服务生成的 spanid 随着请求一起再传到下游服务时，这个spanid 又会被下游服务当做 pspanid 记录\u003c/p\u003e\n\u003cp\u003e所以，SpanID本身就已经形成了父子关系，而使用调用时间的话，还需要进行时间戳的比对，这在一定量级的场景下对性能是个考验。\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e Span \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    TraceID    \u003cspan class=\"type\"\u003eint64\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 用于标示一次完整的请求id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Name       \u003cspan class=\"type\"\u003estring\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ID         \u003cspan class=\"type\"\u003eint64\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 当前这次调用span_id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ParentID   \u003cspan class=\"type\"\u003eint64\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 上层服务的调用span_id  最上层服务parent_id为null\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Annotation []Annotation \u003cspan class=\"comment\"\u003e// 用于标记的时间戳\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Debug      \u003cspan class=\"type\"\u003ebool\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"调用链\"\u003e\u003ca href=\"#调用链\" class=\"headerlink\" title=\"调用链\"\u003e\u003c/a\u003e调用链\u003c/h3\u003e\u003cp\u003e先来看一张经典图:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20211031225945.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e当用户发起一个请求时，首先到达前端A服务，然后分别对B服务和C服务进行RPC调用；B服务处理完给A做出响应，但是C服务还需要和后端的D服务和E服务交互之后再返还给A服务，最后由A服务来响应用户的请求\u003c/p\u003e\n\u003cp\u003e整个调用过程追踪\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e请求到来生成一个全局TraceID，通过TraceID可以串联起整个调用链，一个TraceID代表一次请求。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e除了TraceID外，还需要SpanID用于记录调用父子关系。每个服务会记录下parent id和span id，通过他们可以组织一次完整调用链的父子关系。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e一个没有parent id的span成为root span，可以看成调用链入口。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e所有这些ID可用全局唯一的64位整数表示；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e整个调用过程中每个请求都要透传TraceID和SpanID。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e每个服务将该次请求附带的TraceID和附带的SpanID作为parent id记录下，并且将自己生成的SpanID也记录下。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e要查看某次完整的调用则 只要根据TraceID查出所有调用记录，然后通过parent id和span id组织起整个调用父子关系。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e调用链核心工作\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cul\u003e\n\u003cli\u003e调用链数据生成，对整个调用过程的所有应用进行埋点并输出日志。\u003c/li\u003e\n\u003cli\u003e调用链数据采集，对各个应用中的日志数据进行采集。\u003c/li\u003e\n\u003cli\u003e调用链数据存储及查询，对采集到的数据进行存储，由于日志数据量一般都很大，不仅要能对其存储，还需要能提供快速查询。\u003c/li\u003e\n\u003cli\u003e指标运算、存储及查询，对采集到的日志数据进行各种指标运算，将运算结果保存起来。\u003c/li\u003e\n\u003cli\u003e告警功能，提供各种阀值警告功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e目前大部分的全链路追踪实现都是基于Google的Dapper实现\u003c/p\u003e\n\u003cp\u003e下面介绍几种可做为ID的方案.\u003c/p\u003e\n\u003ch3 id=\"nginx生成TraceID\"\u003e\u003ca href=\"#nginx生成TraceID\" class=\"headerlink\" title=\"nginx生成TraceID\"\u003e\u003c/a\u003enginx生成TraceID\u003c/h3\u003e\u003cp\u003enginx为每一条请求都生成一个唯一的ID，这个ID由nginx本身保证了唯一性，天然是个做为TraceID的好方案，只需要在nginx的配置中开启以下参数即可\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eupstream app_server {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    server 10.0.0.1:80;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eserver {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    listen 80;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    add_header X-Request-ID \u003cspan class=\"variable\"\u003e$request_id\u003c/span\u003e; \u003cspan class=\"comment\"\u003e# Return to client\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    location / {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        proxy_pass http://app_server;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        proxy_set_header X-Request-ID \u003cspan class=\"variable\"\u003e$request_id\u003c/span\u003e; \u003cspan class=\"comment\"\u003e# Pass to app server\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参考\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.nginx.com/blog/application-tracing-nginx-plus/\"\u003eapplication-tracing-nginx-plus\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e后端代码可直接从http header中获取相应的X-Request-ID的值做为ctx传递即可\u003c/p\u003e\n\u003ch3 id=\"kong生成TraceID\"\u003e\u003ca href=\"#kong生成TraceID\" class=\"headerlink\" title=\"kong生成TraceID\"\u003e\u003c/a\u003ekong生成TraceID\u003c/h3\u003e\u003cp\u003ekong做为ingress controller的场景下，可通过\u003cstrong\u003ecorrelation-id\u003c/strong\u003e插件来生成uuid做为traceID\u003c/p\u003e\n\u003cp\u003e可以定义全局使用(全局的plugins不需要手工在ingress中进行绑定)\u003c/p\u003e\n\u003cfigure class=\"highlight yaml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eapiVersion:\u003c/span\u003e \u003cspan class=\"string\"\u003econfiguration.konghq.com/v1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003ekind:\u003c/span\u003e \u003cspan class=\"string\"\u003eKongClusterPlugin\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003emetadata:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003ename:\u003c/span\u003e \u003cspan class=\"string\"\u003ekong-global-correlation-id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003eannotations:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003ekubernetes.io/ingress.class:\u003c/span\u003e \u003cspan class=\"string\"\u003ekong\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003elabels:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003eglobal:\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003econfig:\u003c/span\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003eheader_name:\u003c/span\u003e \u003cspan class=\"string\"\u003eX-Request-Id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003egenerator:\u003c/span\u003e \u003cspan class=\"string\"\u003euuid\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003eecho_downstream:\u003c/span\u003e \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eplugin:\u003c/span\u003e \u003cspan class=\"string\"\u003ecorrelation-id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eheader_name指定header名字\u003c/p\u003e\n\u003cp\u003egenerator指定使用uuid生产ID\u003c/p\u003e\n\u003cp\u003eecho_downstream指定将header返回给调用方\u003c/p\u003e\n\u003cp\u003e参考\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.konghq.com/hub/kong-inc/correlation-id/\"\u003ecorrelation-id\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果不是全局的，可在ingress中进行绑定\u003c/p\u003e\n\u003cfigure class=\"highlight yaml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eapiVersion:\u003c/span\u003e \u003cspan class=\"string\"\u003eextensions/v1beta1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003ekind:\u003c/span\u003e \u003cspan class=\"string\"\u003eIngress\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003emetadata:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"attr\"\u003eannotations:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003ekonghq.com/override:\u003c/span\u003e \u003cspan class=\"string\"\u003ekong-global-correlation-id\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对于已经存在相同名字的header，correlation-id会进行忽略，不进行任何操作\u003c/p\u003e\n\u003ch3 id=\"opentelemetry生成TraceID\"\u003e\u003ca href=\"#opentelemetry生成TraceID\" class=\"headerlink\" title=\"opentelemetry生成TraceID\"\u003e\u003c/a\u003eopentelemetry生成TraceID\u003c/h3\u003e\u003cfigure class=\"highlight golang\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// IDGenerator allows custom generators for TraceID and SpanID.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e IDGenerator \u003cspan class=\"keyword\"\u003einterface\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// DO NOT CHANGE: any modification will not be backwards compatible and\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// must never be done outside of a new major release.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// NewIDs returns a new trace and span ID.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tNewIDs(ctx context.Context) (trace.TraceID, trace.SpanID)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// DO NOT CHANGE: any modification will not be backwards compatible and\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// must never be done outside of a new major release.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// NewSpanID returns a ID for a new span in the trace with traceID.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tNewSpanID(ctx context.Context, traceID trace.TraceID) trace.SpanID\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// DO NOT CHANGE: any modification will not be backwards compatible and\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// must never be done outside of a new major release.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e randomIDGenerator \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tsync.Mutex\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\trandSource *rand.Rand\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e _ IDGenerator = \u0026amp;randomIDGenerator{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// NewSpanID returns a non-zero span ID from a randomly-chosen sequence.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(gen *randomIDGenerator)\u003c/span\u003e\u003c/span\u003e NewSpanID(ctx context.Context, traceID trace.TraceID) trace.SpanID {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003edefer\u003c/span\u003e gen.Unlock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tsid := trace.SpanID{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen.randSource.Read(sid[:])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e sid\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// NewIDs returns a non-zero trace ID and a non-zero span ID from a\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// randomly-chosen sequence.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(gen *randomIDGenerator)\u003c/span\u003e\u003c/span\u003e NewIDs(ctx context.Context) (trace.TraceID, trace.SpanID) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003edefer\u003c/span\u003e gen.Unlock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\ttid := trace.TraceID{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen.randSource.Read(tid[:])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tsid := trace.SpanID{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen.randSource.Read(sid[:])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e tid, sid\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003edefaultIDGenerator\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e IDGenerator {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen := \u0026amp;randomIDGenerator{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e rngSeed \u003cspan class=\"type\"\u003eint64\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t_ = binary.Read(crand.Reader, binary.LittleEndian, \u0026amp;rngSeed)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgen.randSource = rand.New(rand.NewSource(rngSeed))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e gen\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上述是opentelemetry默认生成TraceID跟SpanID的方法，同时，opentelemetry支持使用自定义算法去生成，只需要生写上述的NewIDs及NewSpanID即可，比如:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 自定义ID生成规则\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e Generator \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(g *Generator)\u003c/span\u003e\u003c/span\u003e NewIDs(ctx context.Context) (trace.TraceID, trace.SpanID) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  val := ctx.Value(\u003cspan class=\"string\"\u003e\u0026#34;request_id\u0026#34;\u003c/span\u003e).(uuid.UUID)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  tid := trace.TraceID{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  req, _ := val.MarshalText()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003ecopy\u003c/span\u003e(tid[:], req)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  sid := trace.SpanID{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  rand.Read(sid[:])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e tid, sid\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 定义NewTracerProvider时使用WithIDGenerator\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etp := sdktrace.NewTracerProvider(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  sdktrace.WithSpanProcessor(processor),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  sdktrace.WithResource(resource.NewWithAttributes(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    semconv.ServiceNameKey.String(\u003cspan class=\"string\"\u003e\u0026#34;vault-observe\u0026#34;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  )),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  sdktrace.WithIDGenerator(\u0026amp;Generator{}),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eotel.SetTracerProvider(tp)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\n\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e参考文章:\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cloud.tencent.com/developer/article/1832719\"\u003ehttps://cloud.tencent.com/developer/article/1832719\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.nginx.com/blog/application-tracing-nginx-plus/\"\u003ehttps://www.nginx.com/blog/application-tracing-nginx-plus/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.konghq.com/hub/kong-inc/correlation-id/\"\u003ehttps://docs.konghq.com/hub/kong-inc/correlation-id/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://andydote.co.uk/2021/05/27/vault-observe/\"\u003ehttps://andydote.co.uk/2021/05/27/vault-observe/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2021-10-31T20:30:53+08:00",
  "Author": "Z.S.K."
}