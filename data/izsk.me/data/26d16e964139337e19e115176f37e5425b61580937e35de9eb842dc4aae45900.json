{
  "Source": "izsk.me",
  "Title": "HTTP之长连接及短连接",
  "Link": "https://izsk.me/2017/08/12/HTTP%E4%B9%8B%E9%95%BF%E8%BF%9E%E6%8E%A5%E5%8F%8A%E7%9F%AD%E8%BF%9E%E6%8E%A5/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e我们都说HTTP协议是无状态的,我们又都说HTTP分长连接及短连接,’无状态’到底是个什么意思？\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch3 id=\"无状态\"\u003e\u003ca href=\"#无状态\" class=\"headerlink\" title=\"无状态\"\u003e\u003c/a\u003e\u003cstrong\u003e无状态\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eHTTP无状态其实指的是协议对于事务处理没有记忆能力,服务器不知道客户端是什么状态.也就是说,打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系.HTTP是一个无状态的面向连接的协议,无状态不代表HTTP不能保持TCP连接,更不能代表HTTP使用的是UDP协议(无连接).\u003c/p\u003e\n\u003cp\u003e那http又是如何保持长连接的呢?\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003eHTTP/1.0\u003c/code\u003e中,默认使用的是短连接.也就是说,浏览器和服务器每进行一次HTTP操作,就建立一次连接,但任务结束就中断连接.如果客户端浏览器访问的某个HTML或其他类型的 Web页中包含有其他的Web资源,如JavaScript文件、图像文件、CSS文件等；当浏览器每遇到这样一个Web资源,就会建立一个HTTP会话.\u003cbr/\u003e但从\u003ccode\u003e HTTP/1.1\u003c/code\u003e起,默认使用长连接,用以保持连接特性.使用长连接的HTTP协议,会在响应头有加入这行代码:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eConnection:keep-alive\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e　　在使用长连接的情况下,当一个网页打开完成后,客户端和服务器之间用于传输HTTP数据的 TCP连接不会关闭,如果客户端再次访问这个服务器上的网页,会继续使用这一条已经建立的连接.\u003ccode\u003eKeep-Alive\u003c/code\u003e不会永久保持连接,它有一个保持时间,可以在不同的服务器软件（如Apache）中设定这个时间.实现长连接要客户端和服务端都支持长连接.\u003c/p\u003e\n\u003cp\u003e当然,在很多web服务器中可以设置这个keep-Alive的保持时间,比如nginx的配置文件nginx.conf中可直接使用:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ekeepalive_timeout  60;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP协议的长连接和短连接,实质上是TCP协议的长连接和短连接.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e那长短连接各自对应的场景有哪些呢(各自的优缺点)?\u003c/p\u003e\n\u003ch3 id=\"短连接\"\u003e\u003ca href=\"#短连接\" class=\"headerlink\" title=\"短连接\"\u003e\u003c/a\u003e\u003cstrong\u003e短连接\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e场景: client向server发起连接请求,server接到请求,然后双方建立连接.client向server 发送消息,server回应client,然后一次读写就完成了,这时候双方任何一个都可以发起close操作,不过一般都是client先发起 close操作.为什么呢,一般的server不会回复完client后立即关闭连接的,当然不排除有特殊的情况.从上面的描述看,短连接一般只会在 client/server间传递一次读写操作\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e短连接管理起来比较简单,存在的连接都是有用的连接,不需要额外的控制手段,但是频繁的创建大量的连接也很耗资源\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"长连接\"\u003e\u003ca href=\"#长连接\" class=\"headerlink\" title=\"长连接\"\u003e\u003c/a\u003e\u003cstrong\u003e长连接\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e流程是:client向server发起连接,server接受client连接,双方建立连接.Client与server完成一次读写之后,它们之间的连接并不会主动关闭,后续的读写操作会继续使用这个连接.\u003c/p\u003e\n\u003cp\u003e首先说一下TCP/IP详解上讲到的TCP保活功能,保活功能主要为服务器应用提供,服务器应用希望知道客户主机是否崩溃,从而可以代表客户使用资源.如果客户已经消失,使得服务器上保留一个半开放的连接,而服务器又在等待来自客户端的数据,则服务器将应远等待客户端的数据,保活功能就是试图在服务 器端检测到这种半开放的连接.\u003c/p\u003e\n\u003cp\u003e如果一个给定的连接在两小时内没有任何的动作,服务器就向客户发一个探测报文段,客户主机必须处于以下4个状态之一:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e客户主机依然正常运行,并从服务器可达.客户的TCP响应正常,而服务器也知道对方是正常的,服务器在两小时后将保活定时器复位.\u003c/li\u003e\n\u003cli\u003e客户主机已经崩溃,并且关闭或者正在重新启动.在任何一种情况下,客户的TCP都没有响应.服务端将不能收到对探测的响应,并在75秒后超时.服务器总共发送10个这样的探测 ,每个间隔75秒.如果服务器没有收到一个响应,它就认为客户主机已经关闭并终止连接.\u003c/li\u003e\n\u003cli\u003e客户主机崩溃并已经重新启动.服务器将收到一个对其保活探测的响应,这个响应是一个复位,使得服务器终止这个连接.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e客户机正常运行,但是服务器不可达,这种情况与2类似,TCP能发现的就是没有收到探查的响应.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e从上可以看出http要保持长连接需要做很多次的向客户端试探是否存活,这对性能是个很大的损耗,但是从另一方面来说长连接减少了很多的创关闭连接带来的开销,节约时间.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"场景\"\u003e\u003ca href=\"#场景\" class=\"headerlink\" title=\"场景\"\u003e\u003c/a\u003e\u003cstrong\u003e场景\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e长连接\u003c/code\u003e多用于操作频繁,点对点的通讯,而且连接数不能太多情况,.每个TCP连接都需要三步握手,这需要时间,如果每个操作都是先连接,再操作的话那么处理速度会降低很多,所以每个操作完后都不断开,次处理时直接发送数据包就OK了,不用建立TCP连接.例如：数据库的连接用长连接, 如果用短连接频繁的通信会造成socket错误,而且频繁的socket 创建也是对资源的浪费. \u003c/p\u003e\n\u003cp\u003e而像WEB网站的http服务一般都用\u003ccode\u003e短链接\u003c/code\u003e,因为长连接对于服务端来说会耗费一定的资源,而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源,如果用长连接,而且同时有成千上万的用户,如果每个用户都占用一个连接的话,那可想而知吧.所以并发量大,但每个用户无需频繁操作情况下需用短连好.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e没有哪一个更好,只有哪一个最适合,一切跟着场景走,总有一款适合你!\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\u003chr/\u003e\n\n      \n    \u003c/div\u003e",
  "Date": "2017-08-12T22:50:53+08:00",
  "Author": "Z.S.K."
}