{
  "Source": "izsk.me",
  "Title": "pod的状态出现UnexpectedAdmissionError是什么鬼?",
  "Link": "https://izsk.me/2022/01/27/Kubernetes-pod-status-is-UnexpectedAdmissionError/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e今天在排查集群一个问题时，发现相关的pod的状态为\u003ccode\u003eUnexpectedAdmissionError\u003c/code\u003e,在这之前从未没遇到过pod还有这种状态的，一脸好奇，在解决问题的过程中，发现越挖越深, 里面涉及到的信息也是相当的多，特此记录一下.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"集群信息\"\u003e\u003ca href=\"#集群信息\" class=\"headerlink\" title=\"集群信息\"\u003e\u003c/a\u003e集群信息\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ek8s\u003c/code\u003e版本为\u003ccode\u003eK8s v1.15.5, 3 master + N node\u003c/code\u003e的形式，由于业务特殊，集群中同时存在的\u003ccode\u003enode\u003c/code\u003e有\u003ccode\u003eamd64\u003c/code\u003e及\u003ccode\u003earm64\u003c/code\u003e两种异构节点，但这些都不重要，重要的一点是，集群中同时存在2种\u003ccode\u003escheduler\u003c/code\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003edefault scheduler\u003c/code\u003e: 这个不用多说，\u003ccode\u003ek8s\u003c/code\u003e默认的调度器，本质上来说，是个串行的调度器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex-scheduler\u003c/code\u003e: 自定义调度器, 用于批量去调度资源，如果有任一请求的资源不满足，其它的资源也不会调度，pod处于一直Pending状态，直到资源都满足\u003c/li\u003e\n\u003cli\u003e在不同的业务中会使用不现的调度器，以实现资源的合理分配，记住，\u003cstrong\u003e集群中有两个调度器\u003c/strong\u003e, 这个是本次问题的关键\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e同时还要说明一点的是，这次引起问题的资源是\u003ccode\u003envidia.com/gpu\u003c/code\u003e,涉及到\u003cstrong\u003ekubelet对于device是如何管理的\u003c/strong\u003e，这部分是本次的重点内容\u003c/p\u003e\n\u003cp\u003e下述出现的资源，device，其实是一个意思，资源可能在日常中使用的较多，而官方都把资源比较是一种\u003ccode\u003edevice\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e慢慢道来…\u003c/p\u003e\n\u003ch3 id=\"问题现象\"\u003e\u003ca href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"\u003e\u003c/a\u003e问题现象\u003c/h3\u003e\u003cp\u003e问题现象就是工作流(这里不展开细说，简单理解就是运行完就销毁的\u003ccode\u003epod\u003c/code\u003e吧)的\u003ccode\u003epod\u003c/code\u003e出现了如下图的状态\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20220125180525.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e在作者多年丰富的工作(自吹)经验中，\u003ccode\u003epod\u003c/code\u003e的状态从未出现\u003ccode\u003eUnexpectedAdmissionError\u003c/code\u003e这种状态，甚至作者都不知道除了常见的那几种状态外还有其它的状态，看到这作者还是有点高兴的，因为作者知道，嗯，应该会挖出个盲区\u003c/p\u003e\n\u003cp\u003e另外，工作流控制器返回的信息为: \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePod Update plugin resources failed due to  requested number of devices unavailable for nvidia.com/gpu. Requested: 1, Available: 0, which is unexpected\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e该报错在\u003ccode\u003ekubelet\u003c/code\u003e的日志中也有出现\u003c/p\u003e\n\u003cp\u003e另外，经过作者的多次尝试，发现上述问题并不总是存在，也有成功的时候\u003c/p\u003e\n\u003ch3 id=\"排查过程\"\u003e\u003ca href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"\u003e\u003c/a\u003e排查过程\u003c/h3\u003e\u003cp\u003e看到上述的报错\u003ccode\u003emessage\u003c/code\u003e，翻译一下:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003epod更新Plugin资源失败, 失败的原因是由于请求的nvidia.com/gpu资源需要1个，但现在只有0个\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e报错意思很明显，但作者第一时间想到的是以下3个问题:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e正常来讲不会出现因为资源不够而调度的情况，如果资源不够，是不应该被调度的，但从上面的报错来看，已经过了调度那个环节,因为已经配置到了\u003ccode\u003enode\u003c/code\u003e上\u003c/li\u003e\n\u003cli\u003e如果忽略问题1，就算是资源不够，也应该是\u003ccode\u003ePending\u003c/code\u003e状态，而不应该是\u003ccode\u003eUnexpectedAdmissionError\u003c/code\u003e这种状态\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epod\u003c/code\u003e去更新plugin的什么资源，为什么需要更新？\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e问题1跟问题2应该是同一个问题，就放一起排查吧\u003c/p\u003e\n\u003cp\u003e作者的猜测: 由于集群中同时存在2种调度器，对于同一\u003ccode\u003edevice\u003c/code\u003e(比如\u003ccode\u003envidia.com/gpu\u003c/code\u003e)就可能会发生竞争关系,比如以下场景:\u003c/p\u003e\n\u003cp\u003e某一\u003ccode\u003enode\u003c/code\u003e上\u003ccode\u003envidia.com/gpu\u003c/code\u003e资源只有1个\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePod1\u003c/code\u003e，使用了\u003ccode\u003edefault-scheduler\u003c/code\u003e,消耗了\u003ccode\u003envidia.com/gpu=1\u003c/code\u003e，此时，\u003ccode\u003envidia.com/gpu\u003c/code\u003e为0\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePod2\u003c/code\u003e，使用了\u003ccode\u003edefault-scheduler\u003c/code\u003e,请求了\u003ccode\u003envidia.com/gpu=1\u003c/code\u003e，状态\u003ccode\u003ePending\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePod3\u003c/code\u003e，使用了\u003ccode\u003ex-scheduler\u003c/code\u003e,请求了\u003ccode\u003envidia.com/gpu=1\u003c/code\u003e,状态\u003ccode\u003ePending\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在特定的场景下，存在\u003ccode\u003epod2\u003c/code\u003e,\u003ccode\u003epod3\u003c/code\u003e都调度到这个\u003ccode\u003enode\u003c/code\u003e上的可能，那么在\u003ccode\u003epod1\u003c/code\u003e执行完成之后，就有可能出现\u003ccode\u003edefault-scheduler\u003c/code\u003e与\u003ccode\u003ex-scheduler\u003c/code\u003e同时拿到\u003ccode\u003envidia.com/gpu=1\u003c/code\u003e,对\u003ccode\u003ePod2\u003c/code\u003e及\u003ccode\u003ePod3\u003c/code\u003e从\u003ccode\u003ePending\u003c/code\u003e状态唤醒，但是在接下来的某一时候，只会有一个\u003ccode\u003ePod\u003c/code\u003e创建成功，另一个\u003ccode\u003ePod\u003c/code\u003e就有可能会出现\u003ccode\u003eUnexpectedAdmissionError\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e如果这样的Pod越多的话,发生的可能性就越大\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e因为是\u003ccode\u003erace\u003c/code\u003e,所以也不一定总是会发生，这也解释了【问题现】中提到的\u003cstrong\u003e问题并不总是存在\u003c/strong\u003e的问题\u003c/p\u003e\n\u003cp\u003e从后续的排查情况来看，也证实了上述猜想，开发侧对调度器引用不当，对于\u003ccode\u003envidia.com/gpu\u003c/code\u003e的资源，应该使用\u003ccode\u003ex-scheduler\u003c/code\u003e，但有些被调整成了\u003ccode\u003edefault-scheduler\u003c/code\u003e也就是说，如果上面的场景，所有请求同一资源的\u003ccode\u003epod\u003c/code\u003e，使用相同的\u003ccode\u003escheduler\u003c/code\u003e那么就不会出现这种问题，因为相同的\u003ccode\u003escheduler\u003c/code\u003e内部的加锁机制是相同的.\u003c/p\u003e\n\u003cp\u003e解决也很简单，\u003cstrong\u003e对同一资源的请求，\u003ccode\u003eschedulerName\u003c/code\u003e设成一致即可\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e问题虽然解决，但依然没有解决很多疑惑，比如:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eUnexpectedAdmissionError\u003c/code\u003e状态怎么来的\u003c/li\u003e\n\u003cli\u003epod去更新plugin的什么资源，什么时候更新等？\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e没办法，只能去查源码了\u003c/p\u003e\n\u003ch3 id=\"源码分析\"\u003e\u003ca href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"\u003e\u003c/a\u003e源码分析\u003c/h3\u003e\u003cp\u003e首先，从\u003ccode\u003ekubelet\u003c/code\u003e中看到了相关的报错信息，那么就从\u003ccode\u003ekubelet\u003c/code\u003e开始吧, 由于环境中的\u003ccode\u003ekubelet\u003c/code\u003e的日志级别不高，先调整成\u003ccode\u003e--v 4\u003c/code\u003e,代表\u003ccode\u003edebug\u003c/code\u003e日志，发现以下日志:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20220126203956.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e结合\u003ccode\u003ekubelet\u003c/code\u003e侧关于\u003ccode\u003ecm(containermanager的缩写)\u003c/code\u003e代码,大体的调用过程: \u003ccode\u003escheduler(predicate.go) --\u0026gt; kubelet(predicate.go) --\u0026gt; manager.go \u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes/kubernetes/blob/v1.15.5/pkg/kubelet/lifecycle/predicate.go\"\u003epredictate.go\u003c/a\u003e中也确认存在\u003ccode\u003eUnexpectedAdmissionError\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(w *predicateAdmitHandler)\u003c/span\u003e\u003c/span\u003e Admit(attrs *PodAdmitAttributes) PodAdmitResult {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tnode, err := w.getNodeAnyWayFunc()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tklog.Errorf(\u003cspan class=\"string\"\u003e\u0026#34;Cannot get Node info: %v\u0026#34;\u003c/span\u003e, err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e PodAdmitResult{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tAdmit:   \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tReason:  \u003cspan class=\"string\"\u003e\u0026#34;InvalidNodeInfo\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tMessage: \u003cspan class=\"string\"\u003e\u0026#34;Kubelet cannot get node info.\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tadmitPod := attrs.Pod\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tpods := attrs.OtherPods\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tnodeInfo := schedulernodeinfo.NewNodeInfo(pods...)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tnodeInfo.SetNode(node)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// ensure the node has enough plugin resources for that required in pods\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err = w.pluginResourceUpdateFunc(nodeInfo, attrs); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tmessage := fmt.Sprintf(\u003cspan class=\"string\"\u003e\u0026#34;Update plugin resources failed due to %v, which is unexpected.\u0026#34;\u003c/span\u003e, err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tklog.Warningf(\u003cspan class=\"string\"\u003e\u0026#34;Failed to admit pod %v - %s\u0026#34;\u003c/span\u003e, format.Pod(admitPod), message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e PodAdmitResult{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tAdmit:   \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tReason:  \u003cspan class=\"string\"\u003e\u0026#34;UnexpectedAdmissionError\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tMessage: message,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e// 省略代码 ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e跟上面\u003ccode\u003ekubelet\u003c/code\u003e中打印出来的日志是吻合的，经过摸排发现，调用路径主要集中在\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes/kubernetes/blob/v1.15.5/pkg/kubelet/cm/devicemanager/manager.go\"\u003emanager.go\u003c/a\u003e如下:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eAllocate --\u0026gt; allocatePodResources --\u0026gt; allocateContainerResources --\u0026gt; devicesToAllocate\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最终在\u003ccode\u003edevicesToAllocate\u003c/code\u003e中报出\u003ccode\u003erequested number of devices unavailable for \u003c/code\u003e的错误一直按上述路径返向传回给\u003ccode\u003eAllocate\u003c/code\u003e，也就是上图中红色的部分\u003c/p\u003e\n\u003cp\u003e同时又可以知道，\u003ccode\u003epredictate\u003c/code\u003e一般属于调度相关，因此，应该是从scheduler传过来的, 从Allocate函数定义就可以看出\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(m *ManagerImpl)\u003c/span\u003e\u003c/span\u003e Allocate(node *schedulernodeinfo.NodeInfo, attrs *lifecycle.PodAdmitAttributes)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e再根据\u003ccode\u003enode *schedulernodeinfo.NodeInfo\u003c/code\u003e就可一层层追到\u003ccode\u003escheduler\u003c/code\u003e的代码中，由于篇幅原因，就不在这里贴了\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAllocate()\u003c/code\u003e方法作用是根据\u003ccode\u003escheduler\u003c/code\u003e传来的条件为某pod分配\u003ccode\u003edevice\u003c/code\u003e，而\u003ccode\u003edevice\u003c/code\u003e则是根据\u003ccode\u003eresource.limit\u003c/code\u003e做为条件进行计算\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(m *ManagerImpl)\u003c/span\u003e\u003c/span\u003e allocateContainerResources(pod *v1.Pod, container *v1.Container, devicesToReuse \u003cspan class=\"keyword\"\u003emap\u003c/span\u003e[\u003cspan class=\"type\"\u003estring\u003c/span\u003e]sets.String) \u003cspan class=\"type\"\u003eerror\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tpodUID := \u003cspan class=\"type\"\u003estring\u003c/span\u003e(pod.UID)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tcontName := container.Name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tallocatedDevicesUpdated := \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e k, v := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e container.Resources.Limits { \u003cspan class=\"comment\"\u003e//根据limit进行计算\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tresource := \u003cspan class=\"type\"\u003estring\u003c/span\u003e(k)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tneeded := \u003cspan class=\"type\"\u003eint\u003c/span\u003e(v.Value())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tklog.V(\u003cspan class=\"number\"\u003e3\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;needs %d %s\u0026#34;\u003c/span\u003e, needed, resource) \u003cspan class=\"comment\"\u003e//这行在kubelet代码中也出现过\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e !m.isDevicePluginResource(resource) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003econtinue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 省略代码 ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里面有个有意思的对象:\u003ccode\u003edeviceToReuse\u003c/code\u003e,可重用的设备, \u003ccode\u003eAllocate\u003c/code\u003e调了的\u003ccode\u003eallocatePodResources\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(m *ManagerImpl)\u003c/span\u003e\u003c/span\u003e allocatePodResources(pod *v1.Pod) \u003cspan class=\"type\"\u003eerror\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tdevicesToReuse := \u003cspan class=\"built_in\"\u003emake\u003c/span\u003e(\u003cspan class=\"keyword\"\u003emap\u003c/span\u003e[\u003cspan class=\"type\"\u003estring\u003c/span\u003e]sets.String)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, container := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e pod.Spec.InitContainers {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := m.allocateContainerResources(pod, \u0026amp;container, devicesToReuse); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 对于initContainer，将所分配的device不断地加入到可重用设置列表中，以便提供给container使用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tm.podDevices.addContainerAllocatedResources(\u003cspan class=\"type\"\u003estring\u003c/span\u003e(pod.UID), container.Name, devicesToReuse)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, container := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e pod.Spec.Containers {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := m.allocateContainerResources(pod, \u0026amp;container, devicesToReuse); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 而对于container，则不断地从可重用设置列表中将分配出去的设备删除\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tm.podDevices.removeContainerAllocatedResources(\u003cspan class=\"type\"\u003estring\u003c/span\u003e(pod.UID), container.Name, devicesToReuse)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e原因是\u003ccode\u003ek8s\u003c/code\u003e中有\u003ccode\u003einitContainer\u003c/code\u003e，\u003ccode\u003einitContainer\u003c/code\u003e可以有多个，先于\u003ccode\u003econtainer\u003c/code\u003e执行，每个\u003ccode\u003einitContainer\u003c/code\u003e按顺序依次执行完毕后\u003ccode\u003econtainer\u003c/code\u003e才会开始创建，而在为\u003ccode\u003econtainer\u003c/code\u003e或\u003ccode\u003einitContainer\u003c/code\u003e分配设备的时候会优先利用\u003ccode\u003edeviceToReuse\u003c/code\u003e的设备，这样可避免资源浪费\u003c/p\u003e\n\u003cp\u003e还有一些比较重要的功能，比如:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eupdateAllocatedDevices\u003c/code\u003e函数的功能是从\u003ccode\u003epodDevices\u003c/code\u003e中删除所有处于终结状态的\u003ccode\u003epod\u003c/code\u003e，并回收其占用的资源，所以有时会在\u003ccode\u003ekubelet\u003c/code\u003e的日志中看到\u003ccode\u003epods to be removed:xxxx\u003c/code\u003e字样 \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edevicesToAllocate\u003c/code\u003e用来生成需要向\u003ccode\u003eplugin\u003c/code\u003e请求的设备列表，如果可重用设备已经够用或者没有设备需求时则不向\u003ccode\u003eplugin\u003c/code\u003e请求分配新的设备，否则调用\u003ccode\u003egrpc\u003c/code\u003e向\u003ccode\u003eplugin\u003c/code\u003e申请分配新的设备。\u003cbr/\u003e设备分配的逻辑是首先看\u003ccode\u003econtainer\u003c/code\u003e中是否已经分配了设备，如果设备够用则返回\u003ccode\u003enil\u003c/code\u003e，否则查看\u003ccode\u003ereusableDevices\u003c/code\u003e，取出里面的设备分配，否则根据最终缺少的设备量返回\u003ccode\u003ehealthdevice - inusedevice(m.allocatedDevices[resource])\u003c/code\u003e，中的前\u003ccode\u003eneeded\u003c/code\u003e个，这便是其分配设备的策略\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(m *ManagerImpl)\u003c/span\u003e\u003c/span\u003e devicesToAllocate(podUID, contName, resource \u003cspan class=\"type\"\u003estring\u003c/span\u003e, required \u003cspan class=\"type\"\u003eint\u003c/span\u003e, reusableDevices sets.String) (sets.String, \u003cspan class=\"type\"\u003eerror\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 省略代码...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"comment\"\u003e// Gets Devices in use.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tdevicesInUse := m.allocatedDevices[resource]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Gets a list of available devices.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tavailable := m.healthyDevices[resource].Difference(devicesInUse)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e available.Len() \u0026lt; needed {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e, fmt.Errorf(\u003cspan class=\"string\"\u003e\u0026#34;requested number of devices unavailable for %s. Requested: %d, Available: %d\u0026#34;\u003c/span\u003e, resource, needed, available.Len())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// 省略代码... \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因此，\u003cstrong\u003e报错的最终原因也是在这里，因为pod此时已经分配到了node上，但node上的可用device小于pod申请的device\u003c/strong\u003e,导致在启动\u003ccode\u003econtainer\u003c/code\u003e时\u003ccode\u003epredicate.go\u003c/code\u003e报错返回\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edevice\u003c/code\u003e的\u003ccode\u003epredicate\u003c/code\u003e过程会执行二次，第一次是对\u003ccode\u003escheduler\u003c/code\u003e对\u003ccode\u003enode\u003c/code\u003e进行筛选的时候，第二次\u003ccode\u003ekubelet\u003c/code\u003e在\u003ccode\u003econtainer\u003c/code\u003e启动之前会再次进行\u003ccode\u003edevice\u003c/code\u003e的确认，而上述报错则是出现在\u003ccode\u003ekubelet\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e最后除一张牛人的\u003ccode\u003emanager.go\u003c/code\u003e中代码调用图吧，非常清晰，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/s812289480/article/details/84314239\"\u003e原图地址\u003c/a\u003e在这里\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://img-blog.csdnimg.cn/20181122102312898.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3M4MTIyODk0ODA=,size_16,color_FFFFFF,t_70\" alt=\"Allocate()\"/\u003e\u003c/p\u003e\n\u003cp\u003e到这里，其实第2个问题还是没有讲的很清楚，即\u003cstrong\u003ekubelet怎么去管理devie-plugin资源,device-plugin注册、跟api-server同步等\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这个主要涉及到\u003ccode\u003ekubelet\u003c/code\u003e是如何管理\u003ccode\u003edevice\u003c/code\u003e的，即\u003ccode\u003edevice-plugin\u003c/code\u003e是实现原理，做为下次作业吧\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.dockone.io/article/8653\"\u003ehttp://www.dockone.io/article/8653\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.kubernetes.org.cn/4391.html\"\u003ehttps://www.kubernetes.org.cn/4391.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/oolo/p/11672720.html#dm-%E8%B0%83%E7%94%A8-dp-listandwatch-%E7%9A%84%E6%97%B6%E6%9C%BA\"\u003ehttps://www.cnblogs.com/oolo/p/11672720.html#dm-%E8%B0%83%E7%94%A8-dp-listandwatch-%E7%9A%84%E6%97%B6%E6%9C%BA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes/kubernetes/issues/60176\"\u003ehttps://github.com/kubernetes/kubernetes/issues/60176\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/s812289480/article/details/84314239\"\u003ehttps://blog.csdn.net/s812289480/article/details/84314239\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zwforrest.github.io/post/devicemanager%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/#allocate%E5%88%86%E9%85%8D%E8%B5%84%E6%BA%90\"\u003ehttps://zwforrest.github.io/post/devicemanager%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/#allocate%E5%88%86%E9%85%8D%E8%B5%84%E6%BA%90\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes-sigs/kube-batch/issues/931\"\u003ehttps://github.com/kubernetes-sigs/kube-batch/issues/931\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://sourcegraph.com/github.com/kubernetes/kubernetes/-/blob/pkg/kubelet/lifecycle/predicate.go\"\u003ehttps://sourcegraph.com/github.com/kubernetes/kubernetes/-/blob/pkg/kubelet/lifecycle/predicate.go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes/kubernetes/blob/v1.15.9/pkg/kubelet/cm/devicemanager/manager.go\"\u003ehttps://github.com/kubernetes/kubernetes/blob/v1.15.9/pkg/kubelet/cm/devicemanager/manager.go\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2022-01-27T23:30:53+08:00",
  "Author": "Z.S.K."
}