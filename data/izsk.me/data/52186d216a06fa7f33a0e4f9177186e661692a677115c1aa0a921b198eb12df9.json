{
  "Source": "izsk.me",
  "Title": "Kubernetes学习(为什么Pod突然就不见了?)",
  "Link": "https://izsk.me/2021/07/26/Kubernetes-podGC/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e最近发生一件很诡异的事情, 某个ns下的pods会莫名其妙地被删了, 困扰了好一阵子，排查后发现问题的起因还是挺有意思。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"问题现象\"\u003e\u003ca href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"\u003e\u003c/a\u003e问题现象\u003c/h3\u003e\u003cp\u003e交代一下背景, 这些pod都是由argo-workflow发起的pod, 执行完特定的任务之后就会变成Succeeded, 如果执行时有问题，状态可能是Failed.\u003c/p\u003e\n\u003cp\u003e结果很直接，就是在ns下的某些状态为 Failed pod会被删掉(后来证实Succeeded状态的也会被删掉)，所以会出现尴尬的情况是想找这个pod的时候，发现这个pod却没了，之前反映过类似的问题，但一直以为是被别人删了，没有在意，但是第二次出现，感觉不是偶然\u003c/p\u003e\n\u003cp\u003e开发同学肯定没权限做这个事，运维侧也可以肯定没有这类操作，排查了一圈几乎可以肯定的是，\u003cstrong\u003e不是人为的\u003c/strong\u003e, 那不是人做的，就只能中k8s这边的某些机制触发了这个删除的操作，kubernetes可以管理千千万万的pod资源，因此gc机制是必不可少的，作者也是第一时间想到了可能是gc机制引起的.\u003c/p\u003e\n\u003cp\u003e在详细追踪k8s的podGC问题之前，其实还有一个嫌疑犯需要排查，那就是argo-workflow, argo-workflow做为一种任务workflow的实现方式，argo-workflow本身也可以通过\u003cstrong\u003eCRD\u003c/strong\u003e来检测当workflow执行到达什么状态时进行podGC, 如下图:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/wecom-temp-ea679872d1ef4371071b5871e226a2c3.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e但作者可以肯定的是，那些被删除的pod中并未使用argo-workflow的podGC，因此argo-workflow的嫌疑可以排除.\u003c/p\u003e\n\u003cp\u003e那么现在就剩k8s本身的机制了\u003c/p\u003e\n\u003ch3 id=\"PodGC\"\u003e\u003ca href=\"#PodGC\" class=\"headerlink\" title=\"PodGC\"\u003e\u003c/a\u003ePodGC\u003c/h3\u003e\u003cp\u003ek8s中存在在各种各样的controller(感兴趣的可以看看controllermanager.go中的NewControllerInitializers中列出来的controllers对象), 每一个controller专注于解决一个方面的问题， podGC controller也是如此，专门回收pod。\u003c/p\u003e\n\u003cp\u003e既然pod被回收了，是不是可以从controllermanager的日志中看到什么呢?果然\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20210725211611.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从上面的日志也可以证实，pod确实是controller被回收了，但是怎么个回收法呢？依据是什么,时间间隔多久等等一系列问题相继涌出\u003c/p\u003e\n\u003ch3 id=\"gc-controller-go\"\u003e\u003ca href=\"#gc-controller-go\" class=\"headerlink\" title=\"gc_controller.go\"\u003e\u003c/a\u003egc_controller.go\u003c/h3\u003e\u003cp\u003e源码能够得到一切答案，大多数都来自于\u003ccode\u003epkg/controller/podgc/gc_controller.go\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003econst\u003c/span\u003e (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// gcCheckPeriod defines frequency of running main controller loop\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgcCheckPeriod = \u003cspan class=\"number\"\u003e20\u003c/span\u003e * time.Second\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// quarantineTime defines how long Orphaned GC waits for nodes to show up\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// in an informer before issuing a GET call to check if they are truly gone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tquarantineTime = \u003cspan class=\"number\"\u003e40\u003c/span\u003e * time.Second\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e首先是gc的时间间隔，很显然是20s，而且这个数值不支持从命令参数中配置\u003c/p\u003e\n\u003cp\u003equarantineTime是在删除孤儿pod时等待节点ready前的时间\u003c/p\u003e\n\u003cp\u003e那根据什么删除的呢， 同样，在源码中给了答案\u003c/p\u003e\n\u003ch4 id=\"pod-status-phase\"\u003e\u003ca href=\"#pod-status-phase\" class=\"headerlink\" title=\"pod.status.phase\"\u003e\u003c/a\u003epod.status.phase\u003c/h4\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(gcc *PodGCController)\u003c/span\u003e\u003c/span\u003e gcTerminated(pods []*v1.Pod) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tterminatedPods := []*v1.Pod{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, pod := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e pods {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e isPodTerminated(pod) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tterminatedPods = \u003cspan class=\"built_in\"\u003eappend\u003c/span\u003e(terminatedPods, pod)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tterminatedPodCount := \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(terminatedPods)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tdeleteCount := terminatedPodCount - gcc.terminatedPodThreshold\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e deleteCount \u0026gt; terminatedPodCount {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tdeleteCount = terminatedPodCount\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e deleteCount \u0026lt;= \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tklog.Infof(\u003cspan class=\"string\"\u003e\u0026#34;garbage collecting %v pods\u0026#34;\u003c/span\u003e, deleteCount)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// sort only when necessary\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tsort.Sort(byCreationTimestamp(terminatedPods))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003evar\u003c/span\u003e wait sync.WaitGroup\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i := \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; deleteCount; i++ {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\twait.Add(\u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ego\u003c/span\u003e \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e(namespace \u003cspan class=\"type\"\u003estring\u003c/span\u003e, name \u003cspan class=\"type\"\u003estring\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003edefer\u003c/span\u003e wait.Done()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := gcc.deletePod(namespace, name); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"comment\"\u003e// ignore not founds\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"keyword\"\u003edefer\u003c/span\u003e utilruntime.HandleError(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}(terminatedPods[i].Namespace, terminatedPods[i].Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\twait.Wait()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里的日志输出刚好也是controllermanager.go中的日志输出，主要的逻辑在如何判定一个pod是否需要被删除\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eisPodTerminated\u003c/span\u003e\u003cspan class=\"params\"\u003e(pod *v1.Pod)\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"type\"\u003ebool\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e phase := pod.Status.Phase; phase != v1.PodPending \u0026amp;\u0026amp; phase != v1.PodRunning \u0026amp;\u0026amp; phase != v1.PodUnknown {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e判断一个pod是否需要被删除，主要看一个pod的状态，在k8s，一个pod大概会有以下的状态(phases)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePending\u003c/li\u003e\n\u003cli\u003eRunning\u003c/li\u003e\n\u003cli\u003eSucceeded\u003c/li\u003e\n\u003cli\u003eFailed\u003c/li\u003e\n\u003cli\u003eUnknown\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e得到所有的pods实例，对于status.phase不等于Pending、Running、Unknown的且与terminatedPodThreshold的差值的部分的pod进行清除，会对要删除的pod的创建时间戳进行排序后删除差值个数的pod，注意这里也会把succeeded的状态pod给删除,作者对这个把succeeded状态的pod给gc了还是比较奇怪的\u003c/p\u003e\n\u003ch4 id=\"gcOrphaned\"\u003e\u003ca href=\"#gcOrphaned\" class=\"headerlink\" title=\"gcOrphaned\"\u003e\u003c/a\u003egcOrphaned\u003c/h4\u003e\u003cp\u003e另外，回收那些Binded的Nodes已经不存在的pods，这个没什么好说的，node都不存在了，pod也没存在的必要了\u003c/p\u003e\n\u003cp\u003e逻辑是调用apiserver接口，获取所有的Nodes,然后遍历所有pods，如果pod bind的NodeName不为空且不包含在刚刚获取的所有Nodes中，最后串行逐个调用gcc.deletePod删除对应的pod\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(gcc *PodGCController)\u003c/span\u003e\u003c/span\u003e gcOrphaned(pods []*v1.Pod, nodes []*v1.Node) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tklog.V(\u003cspan class=\"number\"\u003e4\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;GC\u0026#39;ing orphaned\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\texistingNodeNames := sets.NewString()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, node := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e nodes {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\texistingNodeNames.Insert(node.Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Add newly found unknown nodes to quarantine\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, pod := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e pods {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e pod.Spec.NodeName != \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u0026amp;\u0026amp; !existingNodeNames.Has(pod.Spec.NodeName) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tgcc.nodeQueue.AddAfter(pod.Spec.NodeName, quarantineTime)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Check if nodes are still missing after quarantine period\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tdeletedNodesNames, quit := gcc.discoverDeletedNodes(existingNodeNames)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e quit {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Delete orphaned pods\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, pod := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e pods {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e !deletedNodesNames.Has(pod.Spec.NodeName) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003econtinue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tklog.V(\u003cspan class=\"number\"\u003e2\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;Found orphaned Pod %v/%v assigned to the Node %v. Deleting.\u0026#34;\u003c/span\u003e, pod.Namespace, pod.Name, pod.Spec.NodeName)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := gcc.deletePod(pod.Namespace, pod.Name); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tutilruntime.HandleError(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tklog.V(\u003cspan class=\"number\"\u003e0\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;Forced deletion of orphaned Pod %v/%v succeeded\u0026#34;\u003c/span\u003e, pod.Namespace, pod.Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch4 id=\"gcUnscheduledTerminating\"\u003e\u003ca href=\"#gcUnscheduledTerminating\" class=\"headerlink\" title=\"gcUnscheduledTerminating\"\u003e\u003c/a\u003egcUnscheduledTerminating\u003c/h4\u003e\u003cp\u003e另外，回收Unscheduled并且Terminating的pods，逻辑是遍历所有pods，过滤那些terminating(\u003ccode\u003epod.DeletionTimestamp != nil\u003c/code\u003e)并且未调度成功的(pod.Spec.NodeName为空)的pods， 然后串行逐个调用gcc.deletePod删除对应的pod\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(gcc *PodGCController)\u003c/span\u003e\u003c/span\u003e gcUnscheduledTerminating(pods []*v1.Pod) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tklog.V(\u003cspan class=\"number\"\u003e4\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;GC\u0026#39;ing unscheduled pods which are terminating.\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, pod := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e pods {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e pod.DeletionTimestamp == \u003cspan class=\"literal\"\u003enil\u003c/span\u003e || \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(pod.Spec.NodeName) \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003econtinue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tklog.V(\u003cspan class=\"number\"\u003e2\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;Found unscheduled terminating Pod %v/%v not assigned to any Node. Deleting.\u0026#34;\u003c/span\u003e, pod.Namespace, pod.Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := gcc.deletePod(pod.Namespace, pod.Name); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tutilruntime.HandleError(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tklog.V(\u003cspan class=\"number\"\u003e0\u003c/span\u003e).Infof(\u003cspan class=\"string\"\u003e\u0026#34;Forced deletion of unscheduled terminating Pod %v/%v succeeded\u0026#34;\u003c/span\u003e, pod.Namespace, pod.Name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"disable-podGC-controller\"\u003e\u003ca href=\"#disable-podGC-controller\" class=\"headerlink\" title=\"disable podGC controller\"\u003e\u003c/a\u003edisable podGC controller\u003c/h3\u003e\u003cp\u003ePodgc 是不是可以配置呢?\u003c/p\u003e\n\u003cp\u003e很遗憾的是，配置项不是很多，可以定义是否开启podgc controller\u003c/p\u003e\n\u003cp\u003econtroller-manager的启动参数中有个参数:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e--terminated-pod-gc-threshold int32     Default: 12500\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNumber of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods. If \u0026lt;= 0, the terminated pod garbage collector is disabled.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个参数指的是在pod gc前可以保留多少个terminated pods, 默认是12500个，这个数值还是挺大的，一般集群怕是很难能到,作者由于是训练集群，存在着大量的短时间任务，因此会出现大于该值的pod，当该值小于等于0时，\u003cstrong\u003e相当于不对terminated pods进行删除，但还是会对孤儿pod及处于terminating状态且没有绑定到node的pod进行清除\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e参考: \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/\"\u003ehttps://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e作者只查到这一个跟podgc相关的参数，目测好像在不修改controllermanager的情况下是没办法直接禁用podgc\u003c/p\u003e\n\u003cp\u003e到此，真相大白:\u003c/p\u003e\n\u003cp\u003e同时也给作者纠正了一个错误， 不是只有Failed状态的pod才会被gc，Successed状态的pod也会被gc掉，这个出乎作者意料之外\u003c/p\u003e\n\u003cp\u003e最后，想说的是，podgc跟k8s中的垃圾回收还不是一回事，虽然他们都是以controller运行，\u003c/p\u003e\n\u003cp\u003epodgc解决的是pod到达gc的条件后会被delete掉.\u003c/p\u003e\n\u003cp\u003e而garbage则解决的是\u003cstrong\u003e对节点上的无用镜像和容器的清除\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e从k8s的源码也能够看出来这两者的不同.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/\"\u003ehttps://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cloud.tencent.com/developer/article/1097385\"\u003ehttps://cloud.tencent.com/developer/article/1097385\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2021-07-26T20:10:53+08:00",
  "Author": "Z.S.K."
}