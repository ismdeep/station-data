{
  "Source": "izsk.me",
  "Title": "Kube-batch学习(nodeorder插件使用)",
  "Link": "https://izsk.me/2021/07/07/Kubernetes-kubebatch-plugin-nodeorder/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003eAI场景跟大多数的业务不太一样的是: 网络端需要尽可能地靠近，对于大多数业务来说，为了保证其可用性，一般副本都会分散地部署在不同node，而AI业务通常伴随着海量的数据交换，一个job中的多个pod需要协同处理，如果分散在多个node上，task间的任务交换的快慢就得依赖于网络的传输的快慢，而如果是在一台node上的话，那就没有这部分的消耗，一个job中的pods如何做到尽可能地调度在同一台机器上呢, kube-batch除了能够支持poggroup外，也是能够支持的podaffinit的.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003cp\u003e一个job中的pods如何做到尽可能地调度在同一台机器上呢， 最容易让人想到的是podAffinit，podAffinit是针对于在集群中已经存在的pod，其它的pod可以通过podAffinit来让他们部署在一起，这里有个很大的问题在于， 如果同时使用了podgroup，也就是说在podgroup中的pod在绑定节点之前在集群中是不存在的，也就是办法通过labelsector找到这些pod，那要怎么办呢? \u003c/p\u003e\n\u003cp\u003e为解决这个问题，kube-batch进行了详细的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes-sigs/kube-batch/pull/587\"\u003eissue讨论\u003c/a\u003e，为此，kube-batch引入了一个全新的plugins, 最开始叫Prioritize，后改名为nodeorder.\u003c/p\u003e\n\u003cp\u003e假使kube-batch使用以下的配置:\u003c/p\u003e\n\u003cfigure class=\"highlight yaml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eactions:\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;allocate, backfill\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003etiers:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003eplugins:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003ename:\u003c/span\u003e \u003cspan class=\"string\"\u003egang\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003eplugins:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003ename:\u003c/span\u003e \u003cspan class=\"string\"\u003enodeorder\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003ename:\u003c/span\u003e \u003cspan class=\"string\"\u003epredicates\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e之前提到过，actions指定了kube-batch在调度时需要执行的操作，同时，这些操作会关联一些plugins(简单来说就是一些算法)来实现相关功能，比如说，actions是allocate，allocate意为分配资源，但是在分配资源时有时也会有一些要求，比如优先级高的先分配，或者把某个任务当成一个整体进行分配(gang)等等，同时，不同的actions可能关联同一个plugins，比如对于资源回收时，也可能存在先回收优先级低的pod的资源，这就是actions及plugins之间的关系\u003c/p\u003e\n\u003cp\u003e这里将nodeorder放在靠前的位置，同时启用gang插件.\u003c/p\u003e\n\u003cp\u003enodeorder的流程如下:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20210707221640.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从图中可看出Prioritize只发生在Allocate及Preempt actions中， 上面的配置中只启用了Allocate,当kube-batch从所有机器中筛选出所有符合条件的node列表后，在Allocate中开始执行Prioritize的function，详细流程:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e并行地在筛选出来的node列表中执行所有的priority functions\u003c/li\u003e\n\u003cli\u003e根据优先级规则是否满足工作负载调度标准对节点进行评分\u003c/li\u003e\n\u003cli\u003e一旦从所有优先级返回分数，则聚合分数并确定得分最高的节点\u003c/li\u003e\n\u003cli\u003e将最后一步中选定的节点委托给AllocateFn，以将工作负载绑定到该节点\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e从上图中可以看出priority functions包含interpodAffinityFn，从这个命名来看是跟podAffinity有关的，假如我的job定义了这样的podAffinity\u003c/p\u003e\n\u003cfigure class=\"highlight yaml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eaffinity:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"attr\"\u003epodAffinity:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attr\"\u003epreferredDuringSchedulingIgnoredDuringExecution:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003eweight:\u003c/span\u003e \u003cspan class=\"number\"\u003e100\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"attr\"\u003epodAffinityTerm:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"attr\"\u003elabelSelector:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              \u003cspan class=\"attr\"\u003ematchExpressions:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"attr\"\u003ekey:\u003c/span\u003e \u003cspan class=\"string\"\u003eargo-workflow/mpi-task\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"attr\"\u003eoperator:\u003c/span\u003e \u003cspan class=\"string\"\u003eIn\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"attr\"\u003evalues:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"bullet\"\u003e-\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\u003cspan class=\"template-variable\"\u003e{{workflow.parameters.CURRENT_OP_RUN_ID}}\u003c/span\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"attr\"\u003etopologyKey:\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;kubernetes.io/hostname\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用了preferredDuringSchedulingIgnoredDuringExecution，尽可能地调度到一台节点上，确实是interpodAffinityFn起了作用\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTalk is cheap, show me the code\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e主要的逻辑代码位于\u003ccode\u003ekube-batch/vendor/k8s.io/kubernetes/pkg/scheduler/algorithm/priorities/interpod_affinity.go\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprocessNode := \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e(i \u003cspan class=\"type\"\u003eint\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tnodeInfo := nodeNameToInfo[allNodeNames[i]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e nodeInfo.Node() != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e hasAffinityConstraints || hasAntiAffinityConstraints {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t    \u003cspan class=\"comment\"\u003e// We need to process all the nodes.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, existingPod := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e nodeInfo.Pods() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\t    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := processPod(existingPod); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\t\t  pm.setError(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\t  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t} \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"comment\"\u003e// The pod doesn\u0026#39;t have any constraints - we need to check only existing\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"comment\"\u003e// ones that have some.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, existingPod := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e nodeInfo.PodsWithAffinity() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err := processPod(existingPod); err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\t\tpm.setError(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中\u003c/p\u003e\n\u003cp\u003epod                                                         一个\u003cstrong\u003e需被调度的Pod\u003c/strong\u003e\u003cbr/\u003e hasAffinityConstraints                        “被调度的pod”是否有定义亲和配置\u003cbr/\u003e hasAntiAffinityConstraints                “被调度的pod”是否有定义亲和配置\u003cbr/\u003e existingPod                                            一个待处理的\u003cstrong\u003e亲和目标pod\u003c/strong\u003e\u003cbr/\u003e existingPodNode                                  运行此“亲和目标pod”的节点–“\u003cstrong\u003e目标Node\u003c/strong\u003e\u003cbr/\u003e existingHasAffinityConstraints          “亲和目标pod”是否存在亲和约束\u003cbr/\u003e existingHasAntiAffinityConstraints    “亲和目标pod”是否存在反亲和约束\u003c/p\u003e\n\u003cp\u003e上面调用的processPod，传入的是一个existingPod，\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprocessPod := \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e(existingPod *v1.Pod)\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"type\"\u003eerror\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\texistingPodNode, err := ipa.info.GetNodeInfo(existingPod.Spec.NodeName)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e apierrors.IsNotFound(err) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\tklog.Errorf(\u003cspan class=\"string\"\u003e\u0026#34;Node not found, %v\u0026#34;\u003c/span\u003e, existingPod.Spec.NodeName)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\texistingPodAffinity := existingPod.Spec.Affinity\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\texistingHasAffinityConstraints := existingPodAffinity != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e \u0026amp;\u0026amp; existingPodAffinity.PodAffinity != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\texistingHasAntiAffinityConstraints := existingPodAffinity != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e \u0026amp;\u0026amp; existingPodAffinity.PodAntiAffinity != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e hasAffinityConstraints {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"comment\"\u003e// For every soft pod affinity term of \u0026lt;pod\u0026gt;, if \u0026lt;existingPod\u0026gt; matches the term,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"comment\"\u003e// increment \u0026lt;pm.counts\u0026gt; for every node in the cluster with the same \u0026lt;term.TopologyKey\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"comment\"\u003e// value as that of \u0026lt;existingPods\u0026gt;`s node by the term`s weight.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tterms := affinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tpm.processTerms(terms, pod, existingPod, existingPodNode, \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e第一次循环的时候通过亲和性规则显然是找不到pod的\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(p *podAffinityPriorityMap)\u003c/span\u003e\u003c/span\u003e processTerm(term *v1.PodAffinityTerm, podDefiningAffinityTerm, podToCheck *v1.Pod, fixedNode *v1.Node, weight \u003cspan class=\"type\"\u003efloat64\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tnamespaces := priorityutil.GetNamespacesFromPodAffinityTerm(podDefiningAffinityTerm, term)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tselector, err := metav1.LabelSelectorAsSelector(term.LabelSelector)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tp.setError(err)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tmatch := priorityutil.PodMatchesTermsNamespaceAndSelector(podToCheck, namespaces, selector)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e match { \u003cspan class=\"comment\"\u003e// 第一次无法匹配\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tp.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003edefer\u003c/span\u003e p.Unlock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _, node := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e p.nodes {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e priorityutil.NodesHaveSameTopologyKey(node, fixedNode, term.TopologyKey) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t\tp.counts[node.Name] += weight\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"params\"\u003e(p *podAffinityPriorityMap)\u003c/span\u003e\u003c/span\u003e processTerms(terms []v1.WeightedPodAffinityTerm, podDefiningAffinityTerm, podToCheck *v1.Pod, fixedNode *v1.Node, multiplier \u003cspan class=\"type\"\u003eint\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e terms {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tterm := \u0026amp;terms[i]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tp.processTerm(\u0026amp;term.PodAffinityTerm, podDefiningAffinityTerm, podToCheck, fixedNode, \u003cspan class=\"type\"\u003efloat64\u003c/span\u003e(term.Weight*\u003cspan class=\"type\"\u003eint32\u003c/span\u003e(multiplier)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是第二次循环的时候就能发现第1个pod了,在整个循环期间需要计算weight值，最后得分最高的node为最终选中的node\u003c/p\u003e\n\u003cp\u003e更加详细的代码详解可参考: \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/a931ad4f0242\"\u003ehttps://www.jianshu.com/p/a931ad4f0242\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes-sigs/kube-batch/pull/587\"\u003ehttps://github.com/kubernetes-sigs/kube-batch/pull/587\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.openshift.com/container-platform/3.6/admin_guide/scheduling/pod_affinity.html#admin-guide-sched-affinity-examples3-pods\"\u003ehttps://docs.openshift.com/container-platform/3.6/admin_guide/scheduling/pod_affinity.html#admin-guide-sched-affinity-examples3-pods\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/a931ad4f0242\"\u003ehttps://www.jianshu.com/p/a931ad4f0242\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2021-07-07T23:10:53+08:00",
  "Author": "Z.S.K."
}