{
  "Source": "izsk.me",
  "Title": "Istio学习(grpc-gateway在istio(kubernetes)中的负载均衡)",
  "Link": "https://izsk.me/2020/02/18/grpc-gateway-loadbalance-on-kubernetes-and-istio/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e业务中要在kubernetes中接入grpc， 之前写过一篇\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2020/01/17/grpc-service-on-kubernetes/\"\u003e文章\u003c/a\u003e测试过grpc服务在kubernetes中由于http/2长连接的特性无法达到负载均衡效果, 上次使用的是直接在业务中引用kubernetes的list/watch机制，这次使用istio，同样可以实现grpc的负载均衡.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003cp\u003e如上所说, 直接在业务代码中引用\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/sercand/kuberesolver\"\u003e第三方库\u003c/a\u003e来实时地获取服务的ep变化情况，从而实现grpc的负载均衡, 测试情况可参考\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2020/01/17/grpc-service-on-kubernetes/\"\u003e这里\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e近期在调研istio, 学习一段时间之内, 发现istio中的eds对象是实时地获取服务的ep情况, 这个特性是不是可以直接实现grpc的负载均衡功能. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e需要指出的是，这次grpc服务端的svc使用的是clusterip类型,而不必一定是headless svc.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"Kubernetes-amp-Istio\"\u003e\u003ca href=\"#Kubernetes-amp-Istio\" class=\"headerlink\" title=\"Kubernetes \u0026amp; Istio\"\u003e\u003c/a\u003eKubernetes \u0026amp; Istio\u003c/h3\u003e\u003cp\u003e首先有个kubernetes跟istio环境, 在这里就不细说安装流程了，各自的官网都有详细说明\u003c/p\u003e\n\u003ch3 id=\"grpc\"\u003e\u003ca href=\"#grpc\" class=\"headerlink\" title=\"grpc\"\u003e\u003c/a\u003egrpc\u003c/h3\u003e\u003cp\u003e准备一个grpc服务的demo，代码很简单，\u003cstrong\u003e服务端跟客户端各自打印对方的容器地址\u003c/strong\u003e，来反映负载均衡效果，详细的代码及使用方法在\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/zhoushuke/grpc-loadbalance-on-kubernetes-and-istio\"\u003e这里\u003c/a\u003e, 大家可参考\u003c/p\u003e\n\u003ch3 id=\"测试\"\u003e\u003ca href=\"#测试\" class=\"headerlink\" title=\"测试\"\u003e\u003c/a\u003e测试\u003c/h3\u003e\u003cp\u003e先启动\u003cstrong\u003e一个服务端，一个客户端\u003c/strong\u003e，很平常,\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/grpc-on-kubernetes-loadbalance00.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e服务端个数一个保持不变，客户端进行扩容\u003c/strong\u003e，从一个扩到三个，这时在服务端显示有3个客户端的请求\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/grpc-on-kubernetes-loadbalance01.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e客户端个数三个保持不变, 服务端进行扩容，从一个扩容至五个\u003c/strong\u003e，这下图可以从客户端发现，请求被均匀地分配给了服务端的5个地址, 说明，通过istio是可以实现grpc服务的负载均衡效果的\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/grpc-on-kubernetes-loadbalance03.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e最后，测试了服务端的缩容操作,\u003cstrong\u003e从五个降至一个\u003c/strong\u003e, 客户端也能实时地发现服务的变动, 如上图下半部分所示。\u003c/p\u003e\n\u003ch3 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h3\u003e\u003cp\u003e从测试的结论可以看出, \u003cstrong\u003e在istio的流量管理的作用下, grpc服务不需要做额外的操作即可实现负载均衡效果, 原因就是因为istio的xds是动态模型, 得到cluster后，根据cluster 实时地查询endpoint列表，然后再根据istio中配置的负载均衡配置(默认是roundbalance)直接路由到endpoint，而不需要经过kubernetes中的service(kube-proxy)机制\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2020/01/17/grpc-service-on-kubernetes/\"\u003ehttps://izsk.me/2020/01/17/grpc-service-on-kubernetes/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/zhoushuke/grpc-loadbalance-on-kubernetes-and-istio\"\u003ehttps://github.com/zhoushuke/grpc-loadbalance-on-kubernetes-and-istio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/sercand/kuberesolver\"\u003ehttps://github.com/sercand/kuberesolver\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2020-02-18T13:30:53+08:00",
  "Author": "Z.S.K."
}