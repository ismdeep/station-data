{
  "Source": "izsk.me",
  "Title": "mysql学习(mysql基础架构)",
  "Link": "https://izsk.me/2017/09/02/mysql%E5%AD%A6%E4%B9%A0%E4%B8%80(mysql%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84)/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003ch3 id=\"Mysql与MariaDB\"\u003e\u003ca href=\"#Mysql与MariaDB\" class=\"headerlink\" title=\"Mysql与MariaDB\"\u003e\u003c/a\u003e\u003cstrong\u003eMysql与MariaDB\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e引用\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/MySQL\"\u003ewikipedia\u003c/a\u003e上对mysql的定义: 由于性能高、成本低、可靠性好,已经成为最流行的开源数据库,因此被广泛地应用在Internet上的中小型网站中,MySQL有点与众不同,它的架构可以在多种不同场景中应用并发挥良好作用.主要体现在存储引擎的架构上,插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离.这种架构可以根据业务的需求和实际需要选择合适的存储引擎.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003emysql最新版为mysql-5.7,\u003cstrong\u003eMariaDB\u003c/strong\u003e数据库管理系统是\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/MySQL\"\u003eMySQL\u003c/a\u003e的一个分支,主要由开源社区在维护,采用\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/GPL\"\u003eGPL\u003c/a\u003e授权许可.开发这个分支的原因之一是：\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/%E7%94%B2%E9%AA%A8%E6%96%87%E5%85%AC%E5%8F%B8\"\u003e甲骨文公司\u003c/a\u003e收购了MySQL后,有将MySQL\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/%E9%97%AD%E6%BA%90\"\u003e闭源\u003c/a\u003e的潜在风险,因此社区采用分支的方式来避开这个风险\u003c/p\u003e\n\u003ch3 id=\"Mysql的底层架构\"\u003e\u003ca href=\"#Mysql的底层架构\" class=\"headerlink\" title=\"Mysql的底层架构\"\u003e\u003c/a\u003e\u003cstrong\u003eMysql的底层架构\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e网上翻到一张图,非常直接的展示了mysql内部的基础架构\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/mysqlbasic1.jpg\" alt=\"mysqlbasic1\"/\u003e\u003c/p\u003e\n\u003cp\u003e从这张图可以看出mysql从上到下分为以下几个大块:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eConnectors\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e与其他编程语言中的sql 语句进行交互,如php、java等.包含本地sock通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信.主要完成一些类似于连接处理、授权认证、及相关的安全方案.在该层上引入了线程池的概念,为通过认证安全接入的客户端提供线程.同样在该层上可以实现基于SSL的安全链接.服务器也会为安全接入的每个客户端验证它所具有的操作权限\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eManagement Services \u0026amp;Utilities\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e系统管理和控制工具,主要负责备份、恢复、主从复制等工作\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eConnection Pool\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e管理缓冲用户连接,线程处理等需要缓存的需求,连接控制等\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eSQL Interface\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e接受用户的SQL命令,并且返回用户需要查询的结果.比如select from就是调用SQL Interface\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eParser\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSQL命令传递到解析器的时候会被解析器验证和解析.\u003cbr/\u003e主要功能：\u003cbr/\u003ea. 将SQL语句分解成数据结构,并将这个结构传递到后续步骤,后面SQL语句的传递和处理就是基于这个结构的\u003cbr/\u003eb. 如果在分解构成中遇到错误,那么就说明这个sql语句是不合理的,语句将不会继续执行下去\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eOptimizer\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e服务器会解析查询并创建相应的内部解析树,并对其完成相应的优化如确定查询表的顺序,是否利用索引等,最后生成相应的执行操作\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCache \u0026amp; Buffer\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果查询缓存有命中的查询结果,查询语句就可以直接去查询缓存中取数据.这个缓存机制是由一系列小缓存组成的.比如表缓存,记录缓存,key缓存,权限缓存等,这样在解决大量读操作的环境中能够很好的提升系统的性能\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eStorage Engines\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e存储引擎真正的负责了MySQL中数据的存储和提取,服务器通过API与存储引擎进行通信.不同的存储引擎具有的功能不同,这样我们可以根据自己的实际需要进行选取\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eFile System(属于操作系统级别)\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e要是将数据存储在运行于裸设备的文件系统之上,并完成与存储引擎的交互\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"Mysql存储引擎\"\u003e\u003ca href=\"#Mysql存储引擎\" class=\"headerlink\" title=\"Mysql存储引擎\"\u003e\u003c/a\u003e\u003cstrong\u003eMysql存储引擎\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e存储引擎说白了就是如何存储数据、如何为存储的数据建立索引和如何更新、查询数据等技术的实现方法.因为在关系数据库中数据的存储是以表的形式存储的,所以存储引擎也可以称为表类型（即存储和操作此表的类型）.\u003c/p\u003e\n\u003cp\u003e在Oracle 和SQL Server等数据库中只有一种存储引擎,所有数据存储管理机制都是一样的.而MySql数据库提供了多种存储引擎.用户可以根据不同的需求为数据表选择不同的存储引擎,用户也可以根据自己的需要编写自己的存储引擎\u003c/p\u003e\n\u003cp\u003e从上图中可看到mysql有着非常多的存储引擎,而且还支持自定义,常用的mysql的存储引擎有如下几种:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003col\u003e\n\u003cli\u003eMyISAM\u003c/li\u003e\n\u003cli\u003eInnoDB\u003c/li\u003e\n\u003cli\u003eArchive\u003c/li\u003e\n\u003cli\u003eMemory\u003c/li\u003e\n\u003cli\u003eNDB\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e关于存储引擎的区别及场景,下次再更.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/MySQL\"\u003ehttps://zh.wikipedia.org/wiki/MySQL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://zh.wikipedia.org/wiki/MariaDB\"\u003ehttps://zh.wikipedia.org/wiki/MariaDB\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\u003chr/\u003e\n\n      \n    \u003c/div\u003e",
  "Date": "2017-09-02T18:32:53+08:00",
  "Author": "Z.S.K."
}