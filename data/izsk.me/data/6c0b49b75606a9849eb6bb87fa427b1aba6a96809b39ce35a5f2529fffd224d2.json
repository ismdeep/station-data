{
  "Source": "izsk.me",
  "Title": "golang学习(string)",
  "Link": "https://izsk.me/2019/09/13/golang-string/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e字符串在所有语言中可以说是用的最频繁的一种数据结构, 在golang中当然也存在.虽然字符串往往被看做一个整体，但是实际上字符串是一片连续的内存空间，我们也可以将它理解成一个由字符组成的数组\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003cp\u003egolang中的字符串是个只读的, 它实际上是由字符组成的数组，会占用一片连续的内存空间， 这里的只读是说无法直接改变字符串, 在运行时我们其实还是可以将这段内存拷贝到堆或者栈上，将变量的类型转换成 \u003ccode\u003e[]byte\u003c/code\u003e 之后就可以进行，修改后通过类型转换就可以变回 \u003ccode\u003estring\u003c/code\u003e，Go 语言只是不支持直接修改 \u003ccode\u003estring\u003c/code\u003e 类型变量的内存空间\u003c/p\u003e\n\u003ch3 id=\"数据结构\"\u003e\u003ca href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"\u003e\u003c/a\u003e数据结构\u003c/h3\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e StringHeader \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tData \u003cspan class=\"type\"\u003euintptr\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tLen  \u003cspan class=\"type\"\u003eint\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"字符串定义\"\u003e\u003ca href=\"#字符串定义\" class=\"headerlink\" title=\"字符串定义\"\u003e\u003c/a\u003e字符串定义\u003c/h3\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用\u0026#34;\u0026#34;, 如果字符串内部出现双引号，需要使用 \\ 符号转义\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaString := \u003cspan class=\"string\"\u003e\u0026#34;我\\\u0026#34;是\\\u0026#34;中国人\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecString := \u003cspan class=\"string\"\u003e\u0026#34;我\\n是中国人\u0026#34;\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 使用显式的换行也是可以的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edString := \u003cspan class=\"string\"\u003e\u0026#34;我\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e是中国人\u0026#34;\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 这样是不行的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用``, 可以由多行组成，但不支持转义，并且可以包含除了反引号外其他所有字符\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebString := \u003cspan class=\"string\"\u003e`我\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e是\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e中国人\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e！@\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e`\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(aString, \u003cspan class=\"string\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e, bString)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(bString[\u003cspan class=\"number\"\u003e1\u003c/span\u003e]) \u003cspan class=\"comment\"\u003e// 136 这里输出的是unicode码\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"常用操作\"\u003e\u003ca href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"\u003e\u003c/a\u003e常用操作\u003c/h3\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 访问\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 由于字符串的底层是个字节数组, 因此也是通过下标进行访问, 如果下标越界会提示index out of range\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaString[\u003cspan class=\"number\"\u003e1\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 如果强制去修改字符串的元素会提示 cannot assign to xxx\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 求长度\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 直接使用len(bString)即可求得长度\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 字符串是 UTF-8 字符的一个序列（当字符为 ASCII 码时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebString := \u003cspan class=\"string\"\u003e\u0026#34;我是中国人\u0026#34;\u003c/span\u003e  \u003cspan class=\"comment\"\u003e// 长度15, 一个汉字占3个字节\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecString := \u003cspan class=\"string\"\u003e\u0026#34;我是\\n中国人\u0026#34;\u003c/span\u003e \u003cspan class=\"comment\"\u003e// 长度16, \\n是可以用ascii表示, 因此只占用一个字节\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efString := \u003cspan class=\"string\"\u003e\u0026#34;youareme\u0026#34;\u003c/span\u003e    \u003cspan class=\"comment\"\u003e// 长度8\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 拼接\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edString := aString + bString\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edString += aString \u003cspan class=\"comment\"\u003e// == dString = dString + aString\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 拷贝\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eeString := aString\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 但是在正常情况下，运行时会调用 copy 将输入的多个字符串拷贝到目标字符串所在的内存空间中，新的字符串是一片新的内存空间，与原来的字符串也没有任何关联，一旦需要拼接的字符串非常大，拷贝带来的性能损失就是无法忽略的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 切片\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 由于字符串底组是字节数组, 因此也支持切片操作\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// gString跟eString指向的底层数组为同一个\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egString := eString[\u003cspan class=\"number\"\u003e2\u003c/span\u003e:\u003cspan class=\"number\"\u003e3\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"类型转换\"\u003e\u003ca href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"\u003e\u003c/a\u003e类型转换\u003c/h3\u003e\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ebString := \u003cspan class=\"string\"\u003e\u0026#34;abc我是中国人\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i, v := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e bString {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tfmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;(%d, %x) \u0026#34;\u003c/span\u003e, i, v)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tfmt.Println()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (0, 61) (1, 62) (2, 63) (3, 6211) (6, 662f) (9, 4e2d) (12, 56fd) (15, 4eba) \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 遍历bString,取出的是Unicode码，可以看到“我”这个汉字的Unicode是 6211，它是从第3个开始的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i, v := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e []\u003cspan class=\"type\"\u003ebyte\u003c/span\u003e(bString) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tfmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;(%d, %x) \u0026#34;\u003c/span\u003e, i, v)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tfmt.Println()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (0, 61) (1, 62) (2, 63) (3, e6) (4, 88) (5, 91) (6, e6) (7, 98) (8, af) (9, e4) (10, b8) (11, ad) (12, e5) (13, 9b) (14, bd) (15, e4) (16, ba) (17, ba) \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 把字符串转为[]bype数组，打印出utf-8的字节，可以看到“我”这个汉字占了e6 88 91三个16进制字节。看到一个汉字占3个字节，一个英文字母占1个字节，utf-8是可变宽度\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i, v := \u003cspan class=\"keyword\"\u003erange\u003c/span\u003e []\u003cspan class=\"type\"\u003erune\u003c/span\u003e(bString) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tfmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;(%d, %c) \u0026#34;\u003c/span\u003e, i, v)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tfmt.Println()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// (0, a) (1, b) (2, c) (3, 我) (4, 是) (5, 中) (6, 国) (7, 人)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 将字符串转为[]rune 也就是int32的别名，占4个字节。打印出了abc好好学习。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"strings包的使用\"\u003e\u003ca href=\"#strings包的使用\" class=\"headerlink\" title=\"strings包的使用\"\u003e\u003c/a\u003estrings包的使用\u003c/h3\u003e\u003cp\u003estrings包中包含非常多的实用函数, 这里挑几个比较常用的记录一下\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 判断给定字符串s中是否包含子串substr, 找到返回true, 找不到返回false\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(\u003cspan class=\"string\"\u003e\u0026#34;包含子串返回：\u0026#34;\u003c/span\u003e, strings.Contains(\u003cspan class=\"string\"\u003e\u0026#34;oldboy\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;boy\u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// true\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 在字符串s中查找sep所在的位置, 返回位置值, 找不到返回-1, 如果存在多个, 只返回第一个匹对的位置\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(\u003cspan class=\"string\"\u003e\u0026#34;存在返回第一个匹配字符的位置：\u0026#34;\u003c/span\u003e, strings.Index(\u003cspan class=\"string\"\u003e\u0026#34;heloboyboy\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;boy\u0026#34;\u003c/span\u003e))  \u003cspan class=\"comment\"\u003e// 4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 统计给定子串sep的出现次数, sep为空时, 返回字符串的长度 + 1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(\u003cspan class=\"string\"\u003e\u0026#34;子字符串出现次数：\u0026#34;\u003c/span\u003e, strings.Count(\u003cspan class=\"string\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;o\u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// 2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(\u003cspan class=\"string\"\u003e\u0026#34;子字符串为空时, 返回：\u0026#34;\u003c/span\u003e, strings.Count(\u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// 6\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 重复s字符串count次, 最后返回新生成的重复的字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.Repeat(\u003cspan class=\"string\"\u003e\u0026#34;嘀嗒\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e), \u003cspan class=\"string\"\u003e\u0026#34;时针它不停在转动\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 在s字符串中, 把old字符串替换为new字符串，n表示替换的次数，如果n\u0026lt;0会替换所有old子串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.Replace(\u003cspan class=\"string\"\u003e\u0026#34;hel hel hel\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;l\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// hello hello hel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.Replace(\u003cspan class=\"string\"\u003e\u0026#34;hel hel hel\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;l\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;llo\u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e-1\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// hello hello hello\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 删除在s字符串的头部和尾部中由cutset指定的字符, 并返回删除后的字符串\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.Trim(\u003cspan class=\"string\"\u003e\u0026#34;   hello   \u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// hello\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 给定字符串转换为英文标题的首字母大写的格式(不能正确处理unicode标点)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.Title(\u003cspan class=\"string\"\u003e\u0026#34;It is never too late to learn.\u0026#34;\u003c/span\u003e)) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 返回将所有字母都转为对应的小写版本的拷贝\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.ToLower(\u003cspan class=\"string\"\u003e\u0026#34;It Is Never Too Late To Learn.\u0026#34;\u003c/span\u003e)) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 返回将所有字母都转为对应的大写版本的拷贝\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(strings.ToUpper(\u003cspan class=\"string\"\u003e\u0026#34;It is never too late to learn.\u0026#34;\u003c/span\u003e)) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// It Is Never Too Late To Learn.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// it is never too late to learn.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// IT IS NEVER TOO LATE TO LEARN.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 判断字符串是否包含前缀prefix，大小写敏感\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(\u003cspan class=\"string\"\u003e\u0026#34;前缀是以hello开头的：\u0026#34;\u003c/span\u003e, strings.HasPrefix(\u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// true\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 判断s是否有后缀字符串suffix，大小写敏感\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Println(\u003cspan class=\"string\"\u003e\u0026#34;后缀是以world开头的：\u0026#34;\u003c/span\u003e, strings.HasSuffix(\u003cspan class=\"string\"\u003e\u0026#34;helloworld\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;world\u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// true\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 用去掉s中出现的sep的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;%q\\n\u0026#34;\u003c/span\u003e, strings.Split(\u003cspan class=\"string\"\u003e\u0026#34;a mountain a temple\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;a \u0026#34;\u003c/span\u003e)) \u003cspan class=\"comment\"\u003e// [\u0026#34;\u0026#34; \u0026#34;mountain \u0026#34; \u0026#34;temple\u0026#34;]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 返回将字符串按照空白（unicode.IsSpace确定，可以是一到多个连续的空白字符）分割的多个字符串。如果字符串全部是空白或者是空字符串的话，会返回空切片。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;Fields are: %q\\n\u0026#34;\u003c/span\u003e, strings.Fields(\u003cspan class=\"string\"\u003e\u0026#34; Linux Python Golang  Java \u0026#34;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// [\u0026#34;Linux\u0026#34; \u0026#34;Python\u0026#34; \u0026#34;Golang\u0026#34; \u0026#34;Java\u0026#34;]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"注意点\"\u003e\u003ca href=\"#注意点\" class=\"headerlink\" title=\"注意点\"\u003e\u003c/a\u003e注意点\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e字符串是不可变值类型，内部⽤指针指向 UTF-8 字节数组。\u003c/li\u003e\n\u003cli\u003e默认值是空字符串 “”。\u003c/li\u003e\n\u003cli\u003e⽤索引号访问某字节，如 s[i], 取出的是字节，不是字符\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e由于字符串是只读的, 因此不能⽤序号获取字节元素指针， \u0026amp;s[i] ⾮法, 提示cannot take the address of xxx,原因在于如果支持取地址操作,则就可以使用指针对改地址指向的值进行修改, 这就违背了字符串只读的前提\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e不可变类型，⽆法修改字节数组。使用[]rune进行修改是重新分配内存，并复制字节数组\u003c/li\u003e\n\u003cli\u003e字符串可以用==和\u0026lt;进行比较\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-string/\"\u003ehttps://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-string/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2019-09-13T17:30:53+08:00",
  "Author": "Z.S.K."
}