{
  "Source": "izsk.me",
  "Title": "Grafana学习(grafana资源备份工具)",
  "Link": "https://izsk.me/2019/11/15/grafana-source-backup-tools/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e目前，Grafana是使用statefulset的形式部署的, 单实例，底层存储也没有使用分布式容灾, 里面有很配置好的模板，整天提醒吊胆地怕这个实例磁盘出问题,在不给分配更多资源的情况下，必须要找个合适的备份方案, 当然，可以直接备份整个目录, 这里介绍下使用kubernetes的cronjob进行定时备份\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch3 id=\"Grafana-backup-tool\"\u003e\u003ca href=\"#Grafana-backup-tool\" class=\"headerlink\" title=\"Grafana-backup-tool\"\u003e\u003c/a\u003e\u003cstrong\u003eGrafana-backup-tool\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e在github上找到一个比较好用的grafana数据的备份工具, 用python写的, 地址在\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/ysde/grafana-backup-tool\"\u003e这里\u003c/a\u003e, ReadMe写的挺详细，一看就明白, 这个工具能备份 datasource, dashboard及配置的alert. 需要备份的也就这些数据了,其它的数据用处不大,\u003c/p\u003e\n\u003cp\u003e也有直接的docker 镜像可用，我们发布到kubernetes中,在发布之前需要一个Grafana的token来访问数据\u003c/p\u003e\n\u003ch3 id=\"Grafana-Token\"\u003e\u003ca href=\"#Grafana-Token\" class=\"headerlink\" title=\"Grafana Token\"\u003e\u003c/a\u003e\u003cstrong\u003eGrafana Token\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e新建一个grafana token，这个token需要配置到备份工具脚本中，使用这个token通过api访问grafana的数据\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200119164352.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e在新建的时候可以限定角色, 需要注意的是这个token只有在第一次新建的时候会显示，所以最好保存在其它地方，要不然后续都无法再显示.\u003c/p\u003e\n\u003ch3 id=\"CronJob\"\u003e\u003ca href=\"#CronJob\" class=\"headerlink\" title=\"CronJob\"\u003e\u003c/a\u003e\u003cstrong\u003eCronJob\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e将该容器在Kubernetes集群中发布成CronJob定时执行, 详细的CronJob，大家可参考\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/\"\u003e这里\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eyaml文件中需要指定两个环境变量\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200119165403.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e同时，最好也指定successfulJobsHistoryLimit 及failedJobsHistoryLimit, 不然会遗留很多的pod.\u003c/p\u003e\n\u003cp\u003e指定备份目录,因为我这里使用了NodeName直接让该pod定向调度到指定机器，每次执行完之后都会在该机器的目录下生成备份数据，之后通过rsync工具同步到其它机器上，实现灾备.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200119165704.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e确认部署成功后:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200119172338.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e至此, 每天的22:33即会备份一次数据.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/ysde/grafana-backup-tool\"\u003egrafana-backup-tool\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2019-11-15T13:30:53+08:00",
  "Author": "Z.S.K."
}