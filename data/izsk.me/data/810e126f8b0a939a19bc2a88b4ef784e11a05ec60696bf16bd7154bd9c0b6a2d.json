{
  "Source": "izsk.me",
  "Title": "访问https时为何会出现x509 certificate signed by unknown authority",
  "Link": "https://izsk.me/2020/06/18/why-x509-error-when-curl-https/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e今天排查了一个HTTPS证书的问题, 虽然很快的就解决了, 但里面涉及到的东西学是蛮多啊的，学习一下\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003e问题是这样, 一个运行在容器中的服务给一个https地址发送POST请求时提示\u003ccode\u003ex509: certificate signed by unknown authority\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e大家都知道, 一般https都需要通过ca认证，问题很显然, 证书认证不过, 但是为何会出这个问题呢?\u003c/p\u003e\n\u003cp\u003e要回答这个问题, 自然就引出另一个问题:\u003ccode\u003e当我们访问https的问题, 一般不会带上跟证书相关的参数，那又是如何验证网站身份的呢\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这里使用curl来模拟，效果一样\u003c/p\u003e\n\u003ch3 id=\"curl\"\u003e\u003ca href=\"#curl\" class=\"headerlink\" title=\"curl\"\u003e\u003c/a\u003ecurl\u003c/h3\u003e\u003cp\u003e在ubuntu上16.04， 内核\u003ccode\u003e4.4.0-130-generic\u003c/code\u003e上运行curl\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl https://baidu.com -v\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* Rebuilt URL to: https://baidu.com/\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*   Trying 39.156.69.79...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* Connected to baidu.com (39.156.69.79) port 443 (\u003cspan class=\"comment\"\u003e#0)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* found 148 certificates \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e /etc/ssl/certs/ca-certificates.crt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* found 592 certificates \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e /etc/ssl/certs\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* ALPN, offering http/1.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* SSL connection using TLS1.2 / ECDHE_RSA_AES_128_GCM_SHA256\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t server certificate verification OK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t server certificate status verification SKIPPED\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t common name: www.baidu.cn (matched)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t server certificate expiration \u003cspan class=\"built_in\"\u003edate\u003c/span\u003e OK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t server certificate activation \u003cspan class=\"built_in\"\u003edate\u003c/span\u003e OK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t certificate public key: RSA\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t certificate version: \u003cspan class=\"comment\"\u003e#3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t subject: C=CN,ST=Beijing,O=BeiJing Baidu Netcom Science Technology Co.\\, Ltd,OU=service operation department,CN=www.baidu.cn\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t start \u003cspan class=\"built_in\"\u003edate\u003c/span\u003e: Thu, 27 Feb 2020 00:00:00 GMT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t expire \u003cspan class=\"built_in\"\u003edate\u003c/span\u003e: Fri, 26 Feb 2021 12:00:00 GMT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t issuer: C=US,O=DigiCert Inc,CN=DigiCert SHA2 Secure Server CA\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* \t compression: NULL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* ALPN, server accepted to use http/1.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ....\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e关注重点信息:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e* found 148 certificates \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e /etc/ssl/certs/ca-certificates.crt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* found 592 certificates \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e /etc/ssl/certs\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"x2F-etc-x2F-ssl\"\u003e\u003ca href=\"#x2F-etc-x2F-ssl\" class=\"headerlink\" title=\"/etc/ssl\"\u003e\u003c/a\u003e/etc/ssl\u003c/h3\u003e\u003cp\u003e从上面可以看出, 在\u003ccode\u003e/etc/ssl\u003c/code\u003e中发现大量的\u003ccode\u003ecertificates\u003c/code\u003e, 可以来看看\u003ccode\u003e/etc/ssl\u003c/code\u003e,\u003c/p\u003e\n\u003cp\u003e这个目录在使用命令\u003ccode\u003eapt install ca-certificates\u003c/code\u003e后生成\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e/etc/ssl\u003c/code\u003e 该目录下只有\u003ccode\u003ecerts  openssl.cnf  private\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这几个文件,有用的为certs目录，这个目录下有大量跟证书相关的pem文件, 其中就包含\u003ccode\u003eca-certificates.crt\u003c/code\u003e文件.\u003c/p\u003e\n\u003cp\u003epem跟crt都是证书相关的文件，不同的格式罢了，这个不是重点\u003c/p\u003e\n\u003cp\u003e重点在于,在使用curl的时候，如果不带证书相关的参数,则会引用默认的证书路径(依操作系统不同而不同)\u003c/p\u003e\n\u003cp\u003e这个默认值怎么来确定呢? 可以确认是curl底层的代码根据环境因素定义的默认值，可以通过\u003ccode\u003estrace\u003c/code\u003e方式来查看\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estrace curl https://www.baidu.com |\u0026amp; grep open\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200618211710.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从上面可以看到, curl如果不指定ca参数的话,则会到\u003ccode\u003e/etc/ssl\u003c/code\u003e目录下查找\u003c/p\u003e\n\u003cp\u003e同时, curl也是支持传递参数来实现https的访问\u003c/p\u003e\n\u003cp\u003e我们可以通过 \u003ccode\u003eman curl\u003c/code\u003e来查看几个重要的跟参数相关的参数,写的很详细，这里就不翻译了\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e--cacert \u0026lt;CA certificate\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              (SSL)  Tells  curl  to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The cer‐\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              tificate(s) must be \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e PEM format. Normally curl is built to use a default file \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e this, so this option is typically used  to  alter\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              that default file.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              curl  recognizes the environment variable named \u003cspan class=\"string\"\u003e\u0026#39;CURL_CA_BUNDLE\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e it is \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e, and uses the given path as a path to a CA cert bundle.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              This option overrides that variable.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              The windows version of curl will automatically look \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e a CA certs file named ´curl-ca-bundle.crt´, either \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e the same  directory  as\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              curl.exe, or \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e the Current Working Directory, or \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e any folder along your PATH.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              If curl is built against the NSS SSL library, the NSS PEM PKCS\u003cspan class=\"comment\"\u003e#11 module (libnsspem.so) needs to be available for this option to work\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              properly.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              If this option is used several \u003cspan class=\"built_in\"\u003etimes\u003c/span\u003e, the last one will be used.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e--capath \u0026lt;CA certificate directory\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              (SSL) Tells curl to use the specified certificate directory to verify the peer. Multiple paths can be  provided  by  separating  them\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              with  \u003cspan class=\"string\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e  (e.g.   \u003cspan class=\"string\"\u003e\u0026#34;path1:path2:path3\u0026#34;\u003c/span\u003e).  The certificates must be \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e PEM format, and \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e curl is built against OpenSSL, the directory\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              must have been processed using the c_rehash utility supplied with OpenSSL. Using --capath can allow OpenSSL-powered curl to make SSL-\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              connections much more efficiently than using --cacert \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e the --cacert file contains many CA certificates.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              If this option is \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e, the default capath value will be ignored, and \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e it is used several \u003cspan class=\"built_in\"\u003etimes\u003c/span\u003e, the last one will be used.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"ca-certificates\"\u003e\u003ca href=\"#ca-certificates\" class=\"headerlink\" title=\"ca-certificates\"\u003e\u003c/a\u003eca-certificates\u003c/h3\u003e\u003cp\u003eca-certificates则是一个包, 用于维护根证书库, 所有的 CA 根证书实际上是由 Mozilla 维护的\u003c/p\u003e\n\u003cp\u003e可以通过\u003ccode\u003edpkg  -L ca-certificates\u003c/code\u003e来查看证书相关信息\u003c/p\u003e\n\u003cp\u003e也可以通过\u003ccode\u003eapt-cache show ca-certificates\u003c/code\u003e 查看相关信息，当然太多，看不出什么来,就是一堆证书\u003c/p\u003e\n\u003cp\u003e那么可能有人会问, 一般情况下, 系统安装好之后基本就不会再做操作了，那如何更新根证书呢?\u003c/p\u003e\n\u003cp\u003e有一个工具\u003ccode\u003eupdate-ca-certificates\u003c/code\u003e可以手动更新根证书信息, 可以使用\u003ccode\u003eman \u003c/code\u003eupdate-ca-certificates`, 说的非常清楚\u003c/p\u003e\n\u003cp\u003e因此可以手工执行以下命令来更新根证书列表\t\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eupdate-ca-certificates\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 全输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eUpdating certificates \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e /etc/ssl/certs...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0 added, 0 removed; \u003cspan class=\"keyword\"\u003edone\u003c/span\u003e.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRunning hooks \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e /etc/ca-certificates/update.d...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edone\u003c/span\u003e.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"Resolve\"\u003e\u003ca href=\"#Resolve\" class=\"headerlink\" title=\"Resolve\"\u003e\u003c/a\u003eResolve\u003c/h3\u003e\u003cp\u003e通过curl可以知道, 访问https的时候默认会到/etc/ssl目录下查找根证书，通过根证书验证对端网站的身份,因为对端的证书一般也是由这些根证书签名我, 因此可以难通过\u003c/p\u003e\n\u003cp\u003e那么出现开头的问题的原因在于, \u003cstrong\u003e使用的镜像本身没有包含\u003ccode\u003e/etc/ssl\u003c/code\u003e目录，同时在Dockerfile中也没有使用\u003ccode\u003eapt install ca-certificates\u003c/code\u003e来安装, 因此在所有请求https时都会出现问题\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e这里提一下， 在安装\u003ccode\u003ecurl\u003c/code\u003e的时候，默认会安装\u003ccode\u003eca-certificates\u003c/code\u003e，实际上这个包由 OpenSSL 安装的\u003c/p\u003e\n\u003cp\u003eCurl 是通过 OpenSSL 实现客户端 HTTPS 协议的，就是说在 Curl/OpenSSL 平台下，Curl 使用的根证书库都是由 ca-certificates 包处理\u003c/p\u003e\n\u003cp\u003ecurl也是一种上层应用, 对于其它的比如golang程序出现这个问题，原理都是一样的.\u003c/p\u003e\n\u003cp\u003e修改镜像，问题解决\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://manpages.ubuntu.com/manpages/bionic/man8/update-ca-certificates.8.html\"\u003ehttp://manpages.ubuntu.com/manpages/bionic/man8/update-ca-certificates.8.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.jianshu.com/p/abcee3270e9a\"\u003ehttps://www.jianshu.com/p/abcee3270e9a\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://curl.haxx.se/docs/sslcerts.html\"\u003ehttps://curl.haxx.se/docs/sslcerts.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2020-06-18T21:10:53+08:00",
  "Author": "Z.S.K."
}