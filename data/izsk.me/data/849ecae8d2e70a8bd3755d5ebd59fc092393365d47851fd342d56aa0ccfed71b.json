{
  "Source": "izsk.me",
  "Title": "Kubernetes之ListOptions使用不当引发的ETCD网络风暴",
  "Link": "https://izsk.me/2023/12/14/Kubernetes-listOption-1/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e最近排查了一个因业务层使用List接口时因listOptions参数使用不当引起的etcd压力极速增长的问题,顺着listOptions把源码过了一遍, 知识又涨不少.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\u003ch3 id=\"业务背景\"\u003e\u003ca href=\"#业务背景\" class=\"headerlink\" title=\"业务背景\"\u003e\u003c/a\u003e业务背景\u003c/h3\u003e\u003cp\u003ekubernetes为任务型集群, 每天的任务量2k-4k, job保留时长为3天\u003c/p\u003e\n\u003ch3 id=\"问题现象\"\u003e\u003ca href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"\u003e\u003c/a\u003e问题现象\u003c/h3\u003e\u003cp\u003e在某个时刻，多个业务方反应如下情况:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e发布任务很慢，很久才能running起来\u003c/li\u003e\n\u003cli\u003e任务状态不对，有的任务实际已经执行完了，但过了很久状态才变成completion\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"问题排查\"\u003e\u003ca href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"\u003e\u003c/a\u003e问题排查\u003c/h3\u003e\u003ch4 id=\"apiserver\"\u003e\u003ca href=\"#apiserver\" class=\"headerlink\" title=\"apiserver\"\u003e\u003c/a\u003eapiserver\u003c/h4\u003e\u003cp\u003e在业务方反映的问题的同时，收到了关于apiserver的监控告警, 这个指标: \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/prometheus-operator/kube-prometheus/wiki/KubeAPIErrorBudgetBurn\"\u003eKubeAPIErrorBudgetBurn\u003c/a\u003e，\u003c/p\u003e\n\u003cp\u003elong/short时间内都出现了告警，给作者的第一感觉就是apiserver响应不过来了，接着查看监控dashboard, 发现apiserver的内存上涨很多,同时，Read/Write SLI Duration相关的指标都有明显的延时，特别是对于pod的Read SLI Duration, 涨了数十倍之多，这显然是不正常\u003c/p\u003e\n\u003cp\u003e然后查看apiserver的日志，同样出现很多List请求10s timeout, 日志如下:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eList etcd3 key \u003cspan class=\"string\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e ,resourceVersion:, resourceVersionMatch:,\u003cspan class=\"built_in\"\u003elimit\u003c/span\u003e: 0, \u003cspan class=\"built_in\"\u003econtinue\u003c/span\u003e: xxx, total: 10002ms\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003e这段日志很重要，下文分解\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e难道是etcd扛不住了???  \u003c/p\u003e\n\u003cp\u003e简单解释下上述提到的3个指标: \u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/prometheus-operator/kube-prometheus/wiki/KubeAPIErrorBudgetBurn\"\u003eKubeAPIErrorBudgetBurn\u003c/a\u003e: 按照时间范围长短分为紧急及不紧急，不紧急的不要求立刻解决，可能apiserver自己会慢慢消化，而紧急的则建议立即处理, 链接中有一些promsql可以查看具体的metrics.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eRead SLI Duration\u003c/strong\u003e: 对应prometheus中的promsql: 统计apiserver_request_total中verb为read的所有请求的SLI Duration,这是一个融合查询, 统计了在某个时间范围内所有的write操作的时延，如get、list请求\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eWrite SLI Duration\u003c/strong\u003e: 对应prometheus中的promsql: 统计apiserver_request_total中verb为write的所有请求的SLI Duration,这是一个融合查询, 统计了在某个时间范围内所有的write操作的时延， 如update、create等请求\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"etcd\"\u003e\u003ca href=\"#etcd\" class=\"headerlink\" title=\"etcd\"\u003e\u003c/a\u003eetcd\u003c/h4\u003e\u003cp\u003e接着查看etcd的监控dashboard, 发现etcd实例的内存同样上涨很多, \u003cstrong\u003eetcd_network_client_grpc_received_bytes_total\u003c/strong\u003e倒是很正常\u003c/p\u003e\n\u003cp\u003e但是另一个关键指标: \u003cstrong\u003eetcd_network_client_grpc_send_bytes_total\u003c/strong\u003e,5分钟的增量达到了惊人的500-600Mb/s, 1分钟的增量更是到了Gb/s ，\u003cstrong\u003e显然不正常\u003c/strong\u003e\u003cbr/\u003e这里也简单介绍下这2个metrics(\u003cstrong\u003e来自ChatGPT\u003c/strong\u003e):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eetcd_network_client_grpc_send_bytes_total\u003c/strong\u003e: 此指标衡量了通过 gRPC 客户端接收的总字节数，表示 etcd 通过客户端接收的网络流入量（以字节为单位）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eetcd_network_client_grpc_received_bytes_total\u003c/strong\u003e：相反，此指标衡量了通过 gRPC 客户端发送的总字节数，表示 etcd 通过客户端发送的网络流出量（以字节为单位）\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ccode\u003eetcd_network_client_grpc_received_bytes_total\u003c/code\u003e常态下很小可以理解，因为只是原始请求，最多带一些参数也不可能很大\u003c/p\u003e\n\u003cp\u003e但是\u003ccode\u003eetcd_network_client_grpc_send_bytes_total\u003c/code\u003e这个值很大，说明etcd要反馈给client端的数据量很大，第一时间想到的就是是不是有LIST接口使用不当查询了全量数据\u003c/p\u003e\n\u003ch3 id=\"问题解决\"\u003e\u003ca href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"\u003e\u003c/a\u003e问题解决\u003c/h3\u003e\u003cp\u003e结合上面在apiserver日志中看到了相关的接口:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eList etcd3 key \u003cspan class=\"string\"\u003e\u0026#34;xxx\u0026#34;\u003c/span\u003e ,resourceVersion:, resourceVersionMatch:,\u003cspan class=\"built_in\"\u003elimit\u003c/span\u003e: 0, \u003cspan class=\"built_in\"\u003econtinue\u003c/span\u003e: xxx, total: 10002ms\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看出有一个list接口中resourceVersion及limit都没有设置，而且时间都超过了10s, 有一些还引发了timeout.\u003c/p\u003e\n\u003cp\u003e所以第一时间优先排查这个LIST接口, 果然，在某个java业务(使用的是fabricio8/kubernetes-client库)新增了一个接口，功能是想每隔3秒查询一次某个namespace下某job下的所有pod状态，但是使用LIST时因参数使用不当导致在etcd中返回了全量数据，集群中存在大量的job数据量很庞大，由于出现问题时刚好是任务高峰期且任务的时效性非常重要， \u003cstrong\u003e对于这个接口是否合理的讨论并没有做为第一优先讨论的\u003c/strong\u003e，采取优先解决问题的做法，使用了一个最简单的修复方式上线，即在这个接口中指定resourceVerison=0\u003c/p\u003e\n\u003cp\u003e上线一段时间后观察所有的监控指标都趋于正常\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e问题解决\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e那么抛出另一个问题，\u003cstrong\u003e为什么在list中指定了resourceVersion=0就能解决问题呢?\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"问题复盘\"\u003e\u003ca href=\"#问题复盘\" class=\"headerlink\" title=\"问题复盘\"\u003e\u003c/a\u003e问题复盘\u003c/h3\u003e\u003cp\u003e问题在一开始时从apiserver的日志中就已经反应出来了, 也第一时间推动业务进行了调整,但要深入探讨起来，需要说的东西还不少\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e为什么在list中指定了resourceVersion=0就能解决问题呢?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e要回答这个问题，那么就得把数据在etcd及kube-apiserver中是如何存储及处理的说起\u003c/p\u003e\n\u003cp\u003e一个实际 etcd 集群存储的数据量可能很小，GB级别，甚至足够缓存到内存中。它的并发请求数量可能会高几个量级，单个 LIST 请求可能只需要返回几十 MB 到上 GB 的流量，但并发请求一多，etcd 显然也扛不住，所以最好在前面有 一层缓存，这就是 apiserver 的功能（之一）。K8s 的 LIST 请求大部分都应该被 apiserver 挡住，从它的本地缓存提供服务，但如果使用不当，就会跳过缓存直接到达 etcd，有很大的稳定性风险。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ekube-apiserver\u003c/code\u003e \u003ccode\u003eLIST\u003c/code\u003e 请求处理逻辑可以看到下图\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://arthurchiao.art/blog/k8s-reliability-list-data-zh/\"\u003e原图地址\u003c/a\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://arthurchiao.art/assets/img/k8s-reliability-list-data/apiserver-processing-list-request.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e以上可以看到，系统路径中存在\u003cstrong\u003e两级 List/ListWatch\u003c/strong\u003e（\u003cstrong\u003e但数据是同一份\u003c/strong\u003e）：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eapiserver List/ListWatch etcd\u003c/li\u003e\n\u003cli\u003e其它对象如controller/operator List/ListWatch apiserver\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e因此，从最简形式上来说，\u003cstrong\u003eapiserver 就是挡在 etcd 前面的一个代理\u003c/strong\u003e（proxy），\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e  +--------+              +---------------+                 +------------+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  | Client | -----------\u0026gt; | Proxy (cache) | --------------\u0026gt; | Data store |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  +--------+              +---------------+                 +------------+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einfra services               apiserver                         etcd\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e绝大部分情况下，apiserver 直接从本地缓存提供服务（因为\u003cstrong\u003e它缓存了集群全量数据\u003c/strong\u003e）；\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e某些特殊情况，例如如下比较常见的2种:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e客户端明确要求从 etcd 读数据\u003c/strong\u003e（追求最高的数据准确性），\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eapiserver本地缓存还没建好\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eapiserver就只能将请求转发给 etcd, \u003cstrong\u003e这里就要特别注意了客户端 LIST 参数设置不当也可能会走到这个逻辑\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e常见的List请求可归类为两种：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eList 全量数据：开销主要花在数据传输；\u003c/li\u003e\n\u003cli\u003eList指定用 label 或字段（field）过滤，只需要匹配的数据。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这里需要特别说明的是第二种情况，也就是 list 请求带了过滤条件，\u003cstrong\u003e不要以为list带了过滤条件就不会全量查询etcd\u003c/strong\u003e,也分两种情况:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e大部分情况下，apiserver 会用自己的缓存做过滤，走缓存的操作很快，直接从apiserver的内存中就可以返回，因此\u003cstrong\u003e耗时主要花在数据网络传输\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e需要将请求转给 etcd 的情况\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e注意，\u003cstrong\u003eetcd 只是 KV 存储，并不理解 label/field 信息，因此在etcd层面无法处理过滤请求\u003c/strong\u003e。 实际的过程是：apiserver 从 etcd 拉全量数据，然后在内存做过滤，再返回给客户端。\u003cstrong\u003e因此除了数据传输开销（网络带宽），这种情况下还会占用大量 apiserver CPU 和内存\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e以几个常见的LIST请求为例：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLIST apis/cilium.io/v2/ciliumendpoints?limit=500\u0026amp;resourceVersion=0\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这里同时传了两个参数，但 \u003ccode\u003eresourceVersion=0\u003c/code\u003e 会导致 apiserver 忽略 \u003ccode\u003elimit=500\u003c/code\u003e， 所以客户端拿到的是全量 ciliumendpoints 数据。\u003c/p\u003e\n\u003cp\u003e但由于指定了resourceVersion=0, 所以虽然是全量数据，但是会直接从apiserver的缓存中返回。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLIST api/v1/pods?fieldSelector=spec.nodeName%3Dnode1\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这个请求是获取 \u003ccode\u003enode1\u003c/code\u003e 上的所有 pods（\u003ccode\u003e%3D\u003c/code\u003e 是 \u003ccode\u003e=\u003c/code\u003e 的转义）。\u003c/p\u003e\n\u003cp\u003e根据 nodename 做过滤，给人的感觉可能是数据量不太大，但其实背后要比看上去复杂：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，这里没有指定 resourceVersion=0，导致 \u003cstrong\u003eapiserver 跳过缓存，直接去 etcd 读数据\u003c/strong\u003e；\u003c/li\u003e\n\u003cli\u003e其次，\u003cstrong\u003eetcd 只是 KV 存储，没有按 label/field 过滤功能\u003c/strong\u003e（只处理 \u003ccode\u003elimit/continue\u003c/code\u003e），所以apiserver 是从 etcd 拉全量的pod数据，然后在\u003cstrong\u003e内存做fieldselector过滤\u003c/strong\u003e，开销也是很大的\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这种行为是要避免的，除非对数据准确性有极高要求，特意要绕过 apiserver 缓存。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLIST api/v1/pods?filedSelector=spec.nodeName%3Dnode1\u0026amp;resourceVersion=0\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e跟 2 的区别是加上了 \u003ccode\u003eresourceVersion=0\u003c/code\u003e，因此 apiserver 会从缓存读数据，\u003cstrong\u003e性能会有量级的提升\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e但要注意，虽然实际上返回给客户端的可能只有\u003cstrong\u003e几百 KB 到上百 MB\u003c/strong\u003e, 但 apiserver 需要处理的数据量可能是\u003cstrong\u003e几个 GB\u003c/strong\u003e。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e以上可以看到，不同的 LIST 操作产生的影响是不一样的，而客户端看到数据还有可能只是 apiserver/etcd 处理数据的很小一部分。如果基础服务大规模启动或重启， 就极有可能把控制平面打爆。\u003c/p\u003e\n\u003cp\u003e总结一下resourceVersion作用: \u003cstrong\u003e保证客户端数据一致性和顺序性，乐观锁，实现并发控制\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e设置ListOptions时，resourceVersion有三种设置方法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e不设置(不传递ListOptions或者不设置resourceVersion字段)，此时会直接从etcd中读取，此时数据是最新的\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e设置为”0”，此时会从API Server Cache中获取数据\u003c/li\u003e\n\u003cli\u003e设置为指定的resourceVersion，获取resourceVersion大于指定版本的所有资源对象\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"分析源码\"\u003e\u003ca href=\"#分析源码\" class=\"headerlink\" title=\"分析源码\"\u003e\u003c/a\u003e分析源码\u003c/h3\u003e\u003cp\u003e从上面可以看出resourceVersion的重要性，现在来看看代码，以client-go为例list Jobs\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ListJobs lists all jobs details.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eListJobs\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"type\"\u003eerror\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    config, err := util.BuildConfig(listJobFlags.Master, listJobFlags.Kubeconfig)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e listJobFlags.allNamespace {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        listJobFlags.Namespace = \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    jobClient := versioned.NewForConfigOrDie(config)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    jobs, err := jobClient.BatchV1alpha1().Jobs(listJobFlags.Namespace).List(context.TODO(), metav1.ListOptions{})\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e err != \u003cspan class=\"literal\"\u003enil\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e err\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(jobs.Items) == \u003cspan class=\"number\"\u003e0\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fmt.Printf(\u003cspan class=\"string\"\u003e\u0026#34;No resources found\\n\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    PrintJobs(jobs, os.Stdout)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最重要的是\u003ccode\u003emetav1.ListOptions{}\u003c/code\u003e这个结构体,在很多的operator的代码中，大量地使用上述这种写法，可能有人会很奇怪，按照上面的说法，这不是没有传递参数么，它不是会全量获取数据吗？\u003c/p\u003e\n\u003cp\u003e别着急，来看一下它的定义，由于代码过长，这里就不全贴\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etype\u003c/span\u003e ListOptions \u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// A selector to restrict the list of returned objects by their labels.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Defaults to everything.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// +optional\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    LabelSelector \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"string\"\u003e`json:\u0026#34;labelSelector,omitempty\u0026#34; protobuf:\u0026#34;bytes,1,opt,name=labelSelector\u0026#34;`\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// A selector to restrict the list of returned objects by their fields.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Defaults to everything.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// +optional\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    FieldSelector \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"string\"\u003e`json:\u0026#34;fieldSelector,omitempty\u0026#34; protobuf:\u0026#34;bytes,2,opt,name=fieldSelector\u0026#34;`\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// resourceVersion sets a constraint on what resource versions a request may be served from.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// details.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e//\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Defaults to unset\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// +optional\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ResourceVersion \u003cspan class=\"type\"\u003estring\u003c/span\u003e \u003cspan class=\"string\"\u003e`json:\u0026#34;resourceVersion,omitempty\u0026#34; protobuf:\u0026#34;bytes,4,opt,name=resourceVersion\u0026#34;`\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e定义中ResourceVersion默认为unset, 但是\u003cstrong\u003e在client-go中 的 ListWatch/informer 接口, 那它默认已经设置了 \u003ccode\u003eResourceVersion=0\u003c/code\u003e\u003c/strong\u003e(如果客户端没传 \u003ccode\u003eListOption\u003c/code\u003e，则初始化一个默认值，其中的 \u003ccode\u003eResourceVersion\u003c/code\u003e 设置为空字符串)，这也就是为什么写operator时会直接传递\u003ccode\u003emetav1.ListOptions{}\u003c/code\u003e(ResourceVersion具体的设置方法将在下一篇中进行分析)\u003c/p\u003e\n\u003cp\u003e但是在其它语言的kubernetes client中就不一定，比如java fabric8 client中，可能就需要显式地指定resourceVersion\u003c/p\u003e\n\u003ch3 id=\"问题总结\"\u003e\u003ca href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"\u003e\u003c/a\u003e问题总结\u003c/h3\u003e\u003cp\u003e 所以可以看到，某些请求看起来很简单，只是客户端一行代码的事情，但背后的数据量是惊人的，集群规模比较小的时候，这个问题可能看不出来（etcd 在 LIST 响应延迟超过某个阈值 后才开始打印 warning 日志）；规模大了之后，如果这样的请求比较多，apiserver/etcd 肯定是扛不住的。\u003c/p\u003e\n\u003cp\u003e其实，\u003cstrong\u003e业务层每3秒去list resource结果显然也是不合适的，这本就是watch要做的事情\u003c/strong\u003e，这是后续在稳定性上要推进业务的todo之一\u003c/p\u003e\n\u003ch3 id=\"更多参数\"\u003e\u003ca href=\"#更多参数\" class=\"headerlink\" title=\"更多参数\"\u003e\u003c/a\u003e更多参数\u003c/h3\u003e\u003cp\u003e这里官方\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/zh-cn/docs/reference/using-api/api-concepts/#resourceVersion-in-metadata\"\u003eresourceVersion-in-metadata\u003c/a\u003e有个表格来说明Get/List接口中的一些参数\u003c/p\u003e\n\u003ch4 id=\"ListOptions\"\u003e\u003ca href=\"#ListOptions\" class=\"headerlink\" title=\"ListOptions{}\"\u003e\u003c/a\u003e\u003ccode\u003eListOptions{}\u003c/code\u003e\u003c/h4\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eresourceVersionMatch param\u003c/th\u003e\n\u003cth\u003epaging params\u003c/th\u003e\n\u003cth\u003eresourceVersion not set\u003c/th\u003e\n\u003cth\u003eresourceVersion=”0”\u003c/th\u003e\n\u003cth\u003eresourceVersion=”{value other than 0}”\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eunset\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003elimit unset\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003eMost Recent\u003c/td\u003e\n\u003ctd\u003eAny\u003c/td\u003e\n\u003ctd\u003eNot older than\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eunset\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003elimit=\u003cn\u003e, \u003cem\u003econtinue unset\u003c/em\u003e\u003c/n\u003e\u003c/td\u003e\n\u003ctd\u003eMost Recent\u003c/td\u003e\n\u003ctd\u003eAny\u003c/td\u003e\n\u003ctd\u003eExact\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003eunset\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003elimit=\u003cn\u003e, continue=\u003ctoken\u003e\u003c/token\u003e\u003c/n\u003e\u003c/td\u003e\n\u003ctd\u003eContinue Token, Exact\u003c/td\u003e\n\u003ctd\u003eInvalid, treated as Continue Token, Exact\u003c/td\u003e\n\u003ctd\u003eInvalid, HTTP \u003ccode\u003e400 Bad Request\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eresourceVersionMatch=Exact\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003elimit unset\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003eInvalid\u003c/td\u003e\n\u003ctd\u003eInvalid\u003c/td\u003e\n\u003ctd\u003eExact\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eresourceVersionMatch=Exact\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003elimit=\u003cn\u003e, \u003cem\u003econtinue unset\u003c/em\u003e\u003c/n\u003e\u003c/td\u003e\n\u003ctd\u003eInvalid\u003c/td\u003e\n\u003ctd\u003eInvalid\u003c/td\u003e\n\u003ctd\u003eExact\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eresourceVersionMatch=NotOlderThan\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003elimit unset\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003eInvalid\u003c/td\u003e\n\u003ctd\u003eAny\u003c/td\u003e\n\u003ctd\u003eNot older than\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eresourceVersionMatch=NotOlderThan\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003elimit=\u003cn\u003e, \u003cem\u003econtinue unset\u003c/em\u003e\u003c/n\u003e\u003c/td\u003e\n\u003ctd\u003eInvalid\u003c/td\u003e\n\u003ctd\u003eAny\u003c/td\u003e\n\u003ctd\u003eNot older than\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch4 id=\"GetOptions\"\u003e\u003ca href=\"#GetOptions\" class=\"headerlink\" title=\"GetOptions{}\"\u003e\u003c/a\u003e\u003ccode\u003eGetOptions{}\u003c/code\u003e\u003c/h4\u003e\u003cp\u003e基本原理与 \u003ccode\u003eListOption{}\u003c/code\u003e 一样，不设置 \u003ccode\u003eResourceVersion=0\u003c/code\u003e 会导致 apiserver 去 etcd 拿数据，应该尽量避免\u003c/p\u003e\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003eresourceVersion unset\u003c/td\u003e\u003ctd\u003eresourceVersion=”0”\u003c/td\u003e\u003ctd\u003eresourceVersion=”{value other than 0}”\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eMost Recent\u003c/td\u003e\u003ctd\u003eAny\u003c/td\u003e\u003ctd\u003eNot older than\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cul\u003e\n\u003cli\u003eMost Recent：去 etcd 拿数据；\u003c/li\u003e\n\u003cli\u003eAny：优先用最新的，但不保证一定是最新的；\u003c/li\u003e\n\u003cli\u003eNot older than：不低于某个版本号。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"未完待续\"\u003e\u003ca href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"\u003e\u003c/a\u003e未完待续\u003c/h3\u003e\u003cp\u003e上面【分析源码】一节中只是说明了可以通完传递resourceVersion=0给list以达到通过apiserver的缓存返回数据减少etcd的压力，但还有些其它情况apiserver的判断逻辑是如何的呢，比如确实是需要直接从etcd获取数据以保证数据是最新的，或者缓存没有建设又该如何及client-go中对resourceVersion判断赋值操作？\u003c/p\u003e\n\u003cp\u003e下回源码阅读分解\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/docs/reference/using-api/api-concepts/\"\u003eKubernetes API Concepts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://arthurchiao.art/blog/raft-paper-zh/\"\u003e(译) [论文] Raft 共识算法（及 etcd/raft 源码解析）（USENIX, 2014）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://arthurchiao.art/blog/k8s-reliability-list-data-zh/\"\u003eK8s 集群稳定性：LIST 请求源码分析、性能评估与大规模基础服务部署调优\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/lianngkyle/p/16272494.html\"\u003ek8s client-go源码分析 informer源码分析(3)-Reflector源码分析 - 良凯尔 - 博客园\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/lianngkyle/p/16272494.html\"\u003ehttps://www.cnblogs.com/lianngkyle/p/16272494.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2023-12-14T11:30:53+08:00",
  "Author": "Z.S.K."
}