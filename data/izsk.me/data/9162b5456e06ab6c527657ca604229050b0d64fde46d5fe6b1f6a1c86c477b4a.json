{
  "Source": "izsk.me",
  "Title": "Kubernetes学习(又是bridge-nf-call-iptables惹的祸)",
  "Link": "https://izsk.me/2021/08/18/Kubernetes-bridge-nf-call-iptables/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e使用kubernetes遇到最多的70%问题都可以归于网络问题，最近发现如果内核参数: \u003ccode\u003ebridge-nf-call-iptables\u003c/code\u003e设置不当的话会影响kubernetes中Node节点上的Pod通过ClusterIP去访问\u003cstrong\u003e同Node\u003c/strong\u003e上的其它pod时会有超时现象，复盘记录一下排查的前因后因.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"问题现象\"\u003e\u003ca href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"\u003e\u003c/a\u003e问题现象\u003c/h3\u003e\u003cp\u003e集群环境为K8s v1.15.9，cni指定了flannel-vxlan跟portmap, kube-proxy使用mode为ipvs\u003c/p\u003e\n\u003cp\u003e问题现象是，\u003cstrong\u003e某个Node节点上的pod通过service访问其它服务时，有些能通，有些不通，不通的都提示timeout\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e异常的请求:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl -v http://panorama-v2-frontend-service.spring-prod.svc.cluster.local:8080\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* Rebuilt URL to: http://panorama-v2-frontend-service.spring-prod.svc.cluster.local:8080/\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*   Trying 10.233.53.172...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* TCP_NODELAY \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 这里一直等待直到超时\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个节点上的很多pod都存在这个问题， 其它节点未发现异常.\u003c/p\u003e\n\u003cp\u003e正常请求:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl -v http://panorama-v2-frontend-service.spring-prod.svc.cluster.local:8080\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* Rebuilt URL to: http://panorama-v2-frontend-service.spring-prod.svc.cluster.local:8080/\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*   Trying 10.233.53.172...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* TCP_NODELAY \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e* Connected to panorama-v2-frontend-service.spring-prod.svc.cluster.local (10.233.53.172) port 8080 (\u003cspan class=\"comment\"\u003e#0)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; GET / HTTP/1.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; Host: panorama-v2-frontend-service.spring-prod.svc.cluster.local:8080\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; User-Agent: curl/7.52.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; Accept: */*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt; HTTP/1.1 200 OK\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"排查过程\"\u003e\u003ca href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"\u003e\u003c/a\u003e排查过程\u003c/h3\u003e\u003cp\u003e先对异常Node进行排查，因为其它节点是正常的,通过对异常Node的网络、kube-proxy、 iptables、ipvs规则、kubelet等排查后未发现有可疑的地方，就暂时排除嫌疑了.\u003c/p\u003e\n\u003cp\u003e第二个可疑的是DNS, coreDNS负责对service解析成ClusterIP, 在出问题的Node上经过多次测试均能正确解析，\u003cstrong\u003ecoreDNS排除嫌疑\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e可疑的地方都筛了一遍,无果, 那就只能再从现象来发现看看有没有相同点.\u003c/p\u003e\n\u003cp\u003e首先，访问路径为: \u003cstrong\u003eService – \u0026gt; ClusterIP – \u0026gt; PodIP\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e对service访问异常，coreDNS已经被排除了，那先绕过service，直接使用ClusterIP访问呢? 测试后现象依旧\u003c/p\u003e\n\u003cp\u003e那再绕过ClusterIP，直接使用PodIP呢? Bingo，之前会出问题的访问都是正常的了.\u003c/p\u003e\n\u003cp\u003e那么问题就出在CluterIP – \u0026gt; PodIP上, 那么又有以下可能:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003col\u003e\n\u003cli\u003eClusterIP没有正确转发到PodIP上可能导致超时\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e如果正确转发，响应没有返回也可能导致超时\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e第一种可能性很容易排查，之前已经确认了ipvs规则、iptables规则都是没有问题的，且通过ClusterIP发起的请求可以到达PodIP上, 基本就排除了可能性一\u003c/p\u003e\n\u003cp\u003e另外，对比正常跟异常请求会发现，异常的请求原Pod跟目标pod都是在同一个Node上，而正常的请求则处于不同的Node，会是这个影响吗？\u003c/p\u003e\n\u003cp\u003e上面的可能性二，只能祭出抓包神器了\u003cstrong\u003etcpdump\u003c/strong\u003e, 通过抓包发现(\u003cstrong\u003e抓包过程见文未\u003c/strong\u003e)会发现请求中出现了\u003cstrong\u003eReset\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e那么问题转换一下: 为什么相同Node上podA通过service/ClusterIP访问PodB响应会不返回呢，而通过PodIP访问就没问题？\u003c/p\u003e\n\u003cp\u003e补充一句就是，\u003cstrong\u003e相同Node上的pod相互访问是不需要经过Flannel的，因此Flannel可以排除嫌疑\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eso, 问题在哪?\u003c/p\u003e\n\u003cp\u003e回到tcpdump的抓包数据, 可以发现，响应的数据没有按照请求的路径返回，嗯，Interesting\u003c/p\u003e\n\u003ch3 id=\"罪魁祸首\"\u003e\u003ca href=\"#罪魁祸首\" class=\"headerlink\" title=\"罪魁祸首\"\u003e\u003c/a\u003e罪魁祸首\u003c/h3\u003e\u003cp\u003e不管是 iptables 还是 ipvs 模式，Kubernetes 中访问 service都会进行 DNAT，将原本访问 ClusterIP:Port 的数据包 \u003cstrong\u003eDNAT\u003c/strong\u003e 成 service 的某个 Endpoint (PodIP:Port)，然后内核将连接信息插入 conntrack 表以记录连接，目的端回包的时候内核从 conntrack 表匹配连接并\u003cstrong\u003eSNAT\u003c/strong\u003e，这样原路返回形成一个完整的连接链路.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20210818235131.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从tcpdump看到请求被reset了, 没错, \u003cstrong\u003ebridge-nf-call-iptables\u003c/strong\u003e(如果是ipv6的话则是\u003cstrong\u003enet.bridge.bridge-nf-call-ip6tables\u003c/strong\u003e)参数\u003c/p\u003e\n\u003cp\u003e但是不对，这个参数linux默认开启的呢?难道是有人修改了么？\u003c/p\u003e\n\u003cp\u003e使用命令查看该参数是否开启:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003ecat\u003c/span\u003e /proc/sys/net/bridge/bridge-nf-call-iptables\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回0，说明确实没有开启(后来被证实是被同事修改了)，那这个参数是如何影响的返回路径的呢?\u003c/p\u003e\n\u003cp\u003e那就不得不说\u003cstrong\u003elinux bridge\u003c/strong\u003e了\u003c/p\u003e\n\u003cp\u003e虽然CNI使用的是flannel, 但flannel封装的也是linux bridge，\u003cstrong\u003elinux bridge是虚拟的二层转发设备\u003c/strong\u003e，而 iptables conntrack 是在三层上，所以如果直接访问同一网桥内的地址(ip同一网段)，就会直接走二层转发，不经过 conntrack:\u003c/p\u003e\n\u003cp\u003e结合上面的图来看，同Node通过service访问pod的访问路径如下:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003col\u003e\n\u003cli\u003ePodA 访问 service, 经过coreDNS解析成Cluster IP，不是网桥内的地址(ClusterIP一般跟PodIP不在一个网段)，走Conntrack,进行DNAT，将ClusterIP转换成PodIP:Port\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eDNAT 后发现是要转发到了\u003cstrong\u003e同节点\u003c/strong\u003e上的 PodB，PodB 回包时发现目的 IP(此时是PodA的IP) 在同一网桥上(PodA与PodB的IP段一致)，就直接走二层转发了，不会去调 conntrack，这样就导致回包时没有原路返回\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e没有返回包就导致请求方一直等直到超时退出.\u003c/p\u003e\n\u003cp\u003e这样也解释了为何访问在其它节点的应用的ClusterIP没有问题，因为目标PodIP与源PodIP不在同一个网段上,肯定要走conntrack.\u003c/p\u003e\n\u003ch3 id=\"问题解决\"\u003e\u003ca href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"\u003e\u003c/a\u003e问题解决\u003c/h3\u003e\u003cp\u003e总述，开启参数后问题解决\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eecho\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;net.bridge.bridge-nf-call-iptables=1\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; /etc/sysctl.conf\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eecho\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;net.bridge.bridge-nf-call-ip6tables=1\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; /etc/sysctl.conf\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esysctl -p /etc/sysctl.conf\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"linux-conntrack\"\u003e\u003ca href=\"#linux-conntrack\" class=\"headerlink\" title=\"linux conntrack\"\u003e\u003c/a\u003elinux conntrack\u003c/h3\u003e\u003cp\u003e关于conntrack其实也是个值得好好研究一番的知识点, 各个发行版都有工具可以看到conntrack里的记录,格式如下:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# conntrack -L\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etcp      6 119 SYN_SENT src=10.224.1.34 dst=10.233.53.172 sport=56916 dport=8080 [UNREPLIED] src=10.224.1.56 dst=10.224.1.34 sport=8080 dport=56916 mark=0 use=1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e那个著名的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2020/06/10/Kubernetes-coredns-5s-timeout/\"\u003eDNS 5s timeout\u003c/a\u003e的问题就跟conntrack机制有关，由于篇幅有限，就不在这里展开.\u003c/p\u003e\n\u003ch3 id=\"tcpdump\"\u003e\u003ca href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"\u003e\u003c/a\u003etcpdump\u003c/h3\u003e\u003cp\u003e在容器中的抓包命令\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etcpdump -vvv host 10.224.1.34 or 10.233.53.172 or 10.224.1.56\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中的三个ip分别对应podA IP, podB的ClusterIP, podB的PodIP\u003c/p\u003e\n\u003cp\u003e这里由于篇幅的关系，只保存有关键信息，同时使用注释是作者加入的，方便理解.\u003c/p\u003e\n\u003cp\u003e对于异常请求的tcpdump，如下:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# podA 请求 PodB\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epanorama-frontend-deploy-c8f6fd4b6-52tvf.45954 \u0026gt; panorama-v2-frontend-service.spring-prod.svc.cluster.local.8080: Flags [S], \u003cspan class=\"built_in\"\u003ecksum\u003c/span\u003e 0x4cc5 (incorrect -\u0026gt; 0xba1b), \u003cspan class=\"built_in\"\u003eseq\u003c/span\u003e 1108986852, win 28200, options [mss 1410,sackOK,TS val 1345430037 ecr 0,nop,wscale 7], length 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 10-224-1-56是PodB的podIP, 这里省略了解析过程,可以看到返回数据给PodA\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10-224-1-56.panorama-v2-frontend-service.spring-prod.svc.cluster.local.8080 \u0026gt; panorama-frontend-deploy-c8f6fd4b6-52tvf.45954: Flags [S.], \u003cspan class=\"built_in\"\u003ecksum\u003c/span\u003e 0x1848 (incorrect -\u0026gt; 0x99ac), \u003cspan class=\"built_in\"\u003eseq\u003c/span\u003e 3860576650, ack 1108986853, win 27960, options [mss 1410,sackOK,TS val 2444502128 ecr 1345430037,nop,wscale 7], length 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 重点: podA直接reset了请求.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epanorama-frontend-deploy-c8f6fd4b6-52tvf.45954 \u0026gt; 10-224-1-56.panorama-v2-frontend-service.spring-prod.svc.cluster.local.8080: Flags [R], \u003cspan class=\"built_in\"\u003ecksum\u003c/span\u003e 0xb6b5 (correct), \u003cspan class=\"built_in\"\u003eseq\u003c/span\u003e 1108986853, win 0, length 0\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最后会发现PodA给PodB发送了个\u003cstrong\u003eR Flags\u003c/strong\u003e, 也就是\u003cstrong\u003ereset\u003c/strong\u003e, 就是因为当PodB返回\u003cstrong\u003e握手确认\u003c/strong\u003e给到PodA，PodA根本不认识这个请求，所以直接给reset掉了, \u003cstrong\u003e三手握手都没有建立\u003c/strong\u003e，this is why!\u003c/p\u003e\n\u003cp\u003e而对于\u003ccode\u003enet.bridge.bridge-nf-call-iptables=1\u003c/code\u003e的正常请求的tcpdump如下:\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 能看到正常的三次握手， 这里省略\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 开启传输数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epanorama-frontend-deploy-c8f6fd4b6-52tvf.36434 \u0026gt; panorama-v2-frontend-service.spring-prod.svc.cluster.local.8080: Flags [P.], \u003cspan class=\"built_in\"\u003ecksum\u003c/span\u003e 0x4d3c (incorrect -\u0026gt; 0x6f84), \u003cspan class=\"built_in\"\u003eseq\u003c/span\u003e 1:128, ack 1, win 221, options [nop,nop,TS val 1346139372 ecr 2445211463], length 127: HTTP, length: 127\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    GET / HTTP/1.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Host: panorama-v2-frontend-service.spring-prod.svc.cluster.local:8080\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    User-Agent: curl/7.52.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Accept: */*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epanorama-v2-frontend-service.spring-prod.svc.cluster.local.8080 \u0026gt; panorama-frontend-deploy-c8f6fd4b6-52tvf.36434: Flags [.], \u003cspan class=\"built_in\"\u003ecksum\u003c/span\u003e 0x4cbd (incorrect -\u0026gt; 0xe8a6), \u003cspan class=\"built_in\"\u003eseq\u003c/span\u003e 1, ack 128, win 219, options [nop,nop,TS val 2445211463 ecr 1346139372], length 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epanorama-v2-frontend-service.spring-prod.svc.cluster.local.8080 \u0026gt; panorama-frontend-deploy-c8f6fd4b6-52tvf.36434: Flags [P.], \u003cspan class=\"built_in\"\u003ecksum\u003c/span\u003e 0x4dac (incorrect -\u0026gt; 0x0421), \u003cspan class=\"built_in\"\u003eseq\u003c/span\u003e 1:240, ack 128, win 219, options [nop,nop,TS val 2445211463 ecr 1346139372], length 239: HTTP, length: 239\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    HTTP/1.1 200 OK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Server: nginx/1.17.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Date: Wed, 18 Aug 2021 15:10:17 GMT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Content-Type: text/html\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Content-Length: 1540\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Last-Modified: Fri, 09 Jul 2021 06:36:53 GMT\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Connection: keep-alive\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ETag: \u003cspan class=\"string\"\u003e\u0026#34;60e7ee85-604\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Accept-Ranges: bytes\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e相信这个请求路径还是很清晰的，就不再啰嗦.\u003c/p\u003e\n\u003ch3 id=\"结语\"\u003e\u003ca href=\"#结语\" class=\"headerlink\" title=\"结语\"\u003e\u003c/a\u003e结语\u003c/h3\u003e\u003cp\u003e禁用\u003cstrong\u003enet.bridge.bridge-nf-call-ip6tables\u003c/strong\u003e这个参数当然也有好外，那就是考虑同网段的IP访问没必要走conntrack，一定程度有助于性能.\u003c/p\u003e\n\u003cp\u003ekubernetes的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\"\u003e官方文档\u003c/a\u003e中\u003cstrong\u003e明确\u003c/strong\u003e提及Node节点上需要开启这个参数,不然碰到各种诡异的现象也只是时间问题，所以还是不要随意调整。\u003c/p\u003e\n\u003cp\u003e以防后患的话可以对该参数是否开启进行监控,防止被人误修改.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/2020/06/10/Kubernetes-coredns-5s-timeout\"\u003ehttps://izsk.me/2020/06/10/Kubernetes-coredns-5s-timeout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://wiki.libvirt.org/page/Net.bridge.bridge-nf-call_and_sysctl.conf\"\u003ehttps://wiki.libvirt.org/page/Net.bridge.bridge-nf-call_and_sysctl.conf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cloud.tencent.com/developer/article/1761367\"\u003ehttps://cloud.tencent.com/developer/article/1761367\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\"\u003ehttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://imroc.cc/post/202105/why-enable-bridge-nf-call-iptables/\"\u003ehttps://imroc.cc/post/202105/why-enable-bridge-nf-call-iptables/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/kubernetes/kubernetes/issues/85422#issuecomment-714629138\"\u003ehttps://github.com/kubernetes/kubernetes/issues/85422#issuecomment-714629138\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.stackrox.com/post/2020/01/kubernetes-networking-demystified/\"\u003ehttps://www.stackrox.com/post/2020/01/kubernetes-networking-demystified/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/u010278923/article/details/81735970\"\u003ehttps://blog.csdn.net/u010278923/article/details/81735970\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2021-08-18T23:20:53+08:00",
  "Author": "Z.S.K."
}