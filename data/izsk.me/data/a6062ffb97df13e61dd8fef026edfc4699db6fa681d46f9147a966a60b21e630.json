{
  "Source": "izsk.me",
  "Title": "记一次排查ES FGC导致的集群宕机异常",
  "Link": "https://izsk.me/2019/10/06/ES-FGC-Fix/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e有一个私有云环境的运维同事反应项目中的ES集群无法查询, 由于是私有云环境, 没有直接运维权限, 所以没有接收到一线报警, 远程登录上去后发现ES集群已经宕机了, 这次的排查过程也发现了几个比较容易忽视的细节, 在此记录一下,比较有意思.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"集群状态\"\u003e\u003ca href=\"#集群状态\" class=\"headerlink\" title=\"集群状态\"\u003e\u003c/a\u003e集群状态\u003c/h3\u003e\u003cp\u003eES集群为3节点.\u003c/p\u003e\n\u003cp\u003e首先肯定是查看集群状态\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl \u003cspan class=\"string\"\u003e\u0026#39;http://localhost:9200/_cluster/health?pretty\u0026#39;\u003c/span\u003e -u xxx:yyy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e#发现状态为Red\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查看节点状态\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl \u003cspan class=\"string\"\u003e\u0026#39;http://localhost:9200/_cat/node?v\u0026#39;\u003c/span\u003e -u xxx:yyy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e#节点数正常\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查看各节点使用的磁盘情况\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecurl -XGET \u003cspan class=\"string\"\u003e\u0026#39;localhost:9200/_cat/allocation?v\u0026amp;pretty\u0026#39;\u003c/span\u003e -u xxx:yyy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e#未发现异常\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"集群日志\"\u003e\u003ca href=\"#集群日志\" class=\"headerlink\" title=\"集群日志\"\u003e\u003c/a\u003e集群日志\u003c/h3\u003e\u003cp\u003e登录一个ES节点查看日志，发现以下报错，查看其它2个节点，情况相同\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200204134510.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从日志来看, 可以发现几个问题:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eFull GC很频繁, 而且时间也非常的长 \u003c/li\u003e\n\u003cli\u003e每次GC完之后所能释放的内存非常有限\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e到这，其它原因已经很明朗, \u003cstrong\u003e内存不够导致的full gc 频繁，但是又不能释放太多的空间，又导致full gc的恶意循环\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e如果大家对gc的日志不很了解的话, 这里解释下上面日志的各个字段含义, 假如有以下一条gc日志\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e[2018-06-30T17:57:29,020][INFO ][o.e.m.j.JvmGcMonitorService] [qoo--ES] [gc][old][228385][160772] duration [5s], collections [1]/[5.1s], total [5s]/[4.4d], memory [945.4mb]-\u0026gt;[958.5mb]/[1007.3mb], all_pools {[young] [87.8mb]-\u0026gt;[100.9mb]/[133.1mb]}{[survivor] [0b]-\u0026gt;[0b]/[16.6mb]}{[old] [857.6mb]-\u0026gt;[857.6mb]/[857.6mb]}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003egc old\u003c/strong\u003e 本次是 old GC 这是第228385次 GC 检查][从 JVM 启动至今发生的第 160772次 G]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eduration\u003c/strong\u003e [本次检查到的 GC 总耗时 \u003cstrong\u003e5\u003c/strong\u003e 秒，可能是多次的加和\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecollections\u003c/strong\u003e [从上次检查至今总共发生\u003cstrong\u003e1\u003c/strong\u003e次GC]/[从上次检查至今已过去 \u003cstrong\u003e5.1\u003c/strong\u003e 秒],\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etotal\u003c/strong\u003e [本次检查到的 GC 总耗时为 \u003cstrong\u003e5\u003c/strong\u003e 秒]/[从 JVM 启动至今发生的 GC 总耗时为 \u003cstrong\u003e4.4\u003c/strong\u003e 天]，\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ememory\u003c/strong\u003e [ GC 前 Heap memory 空间]-\u0026gt;[GC 后 Heap memory 空间]/[Heap memory 总空间],\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eall_pools\u003c/strong\u003e(分代部分的详情) {young 区][GC 前 Memory ]-\u0026gt;[GC后 Memory]/[young区 Memory 总大小] }\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esurvivor\u003c/strong\u003e [GC 前 Memory ]-\u0026gt;[GC后 Memory]/[Memory 总大小] }{old 区[GC 前 Memory ]-\u0026gt;[GC后 Memory]/[old区 Memory 总大小] }\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e那为何会内存不足呢, 想起前几天服务拓展，添加收集了几个服务的日志, 日志量不算小, 而且这3个ES节点所在的机器内存只分配了8个G, 显然, 加完这几个日志之后内存不够用了.\u003c/p\u003e\n\u003ch3 id=\"Index-Mapping\"\u003e\u003ca href=\"#Index-Mapping\" class=\"headerlink\" title=\"Index Mapping\"\u003e\u003c/a\u003eIndex Mapping\u003c/h3\u003e\u003cp\u003e而且，从日志中， 还发现几处很诡异的日志\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200204141415.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e红框中的错误: \u003cstrong\u003eobject mapping for [msg] tried to pasrse field [msg] as object, but found a concrete\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e翻译过来就是说, 日志中的msg这个字段的类型匹配不上, ES尽力把它解析为object类型，但是它却是个确切的值.\u003c/p\u003e\n\u003cp\u003e就好比你在python中定义了一个字典, 但是你给它赋值一个整形, 这确定要报错.\u003c/p\u003e\n\u003cp\u003e但是这个mapping是从何而来的呢.\u003c/p\u003e\n\u003cp\u003e经过网上搜索一翻, 终于明白:\u003c/p\u003e\n\u003cp\u003eES中为了加强性能，对于索引中的\u003cstrong\u003e第一条数据, ES会默认(可设置)按照这条数据建立index mapping, 相当于是一个索引模板, 好比是mysql中表的定义一个概念, 后续这个索引中的所有日志都按照该模板进行解析\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e后来经过查看源码, 我们发现，出现上图中的问题是因为代码中的日志打印不规范, 有一个地方如果抛出异常时，打印的是一个单一字符串, 而正常情况下打印的是一个json, 所以当第一条正常的日志传递给ES时，ES建立的索引 模板记录这个字段为object类型(可以类比为python中的字典, 本身是可以新增元素的), 当应用抛出异常时，日志中又传递了一个单一字符串, 但是索引模板已经记录为object类型，所以无法匹配, 这就是问题所在\u003c/p\u003e\n\u003ch3 id=\"Fix-Bug\"\u003e\u003ca href=\"#Fix-Bug\" class=\"headerlink\" title=\"Fix Bug\"\u003e\u003c/a\u003eFix Bug\u003c/h3\u003e\u003cp\u003e从3个方面解决上面的问题\u003c/p\u003e\n\u003cp\u003e首先是修复代码中日志不规范问题, 这个充暴露了code view不严谨.\u003c/p\u003e\n\u003cp\u003e第2个是加大ES的内存,毕竟日志量确实是上来了, 从8G添加到12G\u003c/p\u003e\n\u003cp\u003e第3个是优化ES的gc问题, ES中有个逻辑是：\u003cstrong\u003e默认情况下，主节点每30秒会去检查其他节点的状态，如果任何节点的垃圾回收时间超过30秒（Garbage collection duration）且在重复次数内都超时，则会导致主节点任务该节点脱离集群, 节点脱离集群后会引起分片的rebalance\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e这个机制让ES节点频繁的脱离集群，而又引起整个集群的rebalance，ES本身的内存就不够，rebalance更是雪上加霜, 如此往复就导致整个ES集群宕机.\u003c/p\u003e\n\u003cp\u003e可修改主节点的检查时间及重复次数,让其它节点有充分的时间进行full gc.\u003c/p\u003e\n\u003cp\u003e在ES的配置文件中添加以下配置:\u003c/p\u003e\n\u003cfigure class=\"highlight yml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003ediscovery.zen.fd.ping_timeout:\u003c/span\u003e \u003cspan class=\"string\"\u003e300s\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003ediscovery.zen.fd.ping_retriES:\u003c/span\u003e \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样, 达到这两个条件时才能触发节点脱离集群\u003c/p\u003e\n\u003cp\u003e至此, 依次重启ES节点, 问题圆满解决.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html\"\u003eelasticsearch index mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/sinat_35930259/article/details/80354732\"\u003eelasticsearch篇之mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://segmentfault.com/a/1190000016494488\"\u003e你看懂 Elasticsearch Log 中的 GC 日志了吗？\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2019-10-06T20:10:53+08:00",
  "Author": "Z.S.K."
}