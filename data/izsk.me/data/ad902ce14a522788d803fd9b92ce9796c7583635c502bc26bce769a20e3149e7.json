{
  "Source": "izsk.me",
  "Title": "Istio学习(架构)",
  "Link": "https://izsk.me/2020/02/09/Istio-Struct/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e上次在Kubernetes中安装好Istio之后, 忙了很长的时间在处理另一个事, 今天学习一下istio的架构及一些概念，后续分析整个数据的流向.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"WhatFor\"\u003e\u003ca href=\"#WhatFor\" class=\"headerlink\" title=\"WhatFor\"\u003e\u003c/a\u003eWhatFor\u003c/h3\u003e\u003cp\u003e先来看看istio能做什么，从\u003ca href=\"istio.io\"\u003e官网\u003c/a\u003e的首页很明确地指出了istio的作用\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200209153912.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e主要提供四个方面的能力, 简单总结一下:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eConnect: 主要用于工作负载之内的流量管理\u003c/li\u003e\n\u003cli\u003eSecure: 主要用于工作负载之间的认证\u003c/li\u003e\n\u003cli\u003eControl: 主要用于配置策略及遥测功能\u003c/li\u003e\n\u003cli\u003eObserve: 主要用于监控、日志、调用链等可观察性功能\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003e从实际来看, 虽然Istio支持了很多的平台, 但是与之最为紧密结合使用的还是Kubernetes.\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"Struct\"\u003e\u003ca href=\"#Struct\" class=\"headerlink\" title=\"Struct\"\u003e\u003c/a\u003eStruct\u003c/h3\u003e\u003cp\u003eistio的整体架构图\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200209154612.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e再细分, istio分为控制面及数据面, 如下: \u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200209212447.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e从架构图可以看出几个很重要的信息\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eistio在数据面的工作负载中使用了\u003ccode\u003esidecar\u003c/code\u003e(envoy)功能,这个是kubernets原生支持的\u003c/li\u003e\n\u003cli\u003eistio的原理借鉴了kubernetes的service设计理念, 在kubernetes中，kube-proxy劫持的是进出kubernetes节点的流量，而istio的sidecar则劫持的是进出pod的流量, Kubernetes 管理的对象是 Pod，那么 Service Mesh 中管理的对象就是一个个 Service\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eistio使用了Adapter来对接抽象各种平台能力, 这使得istio的拓展性更强.\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e具体sidecar是如何劫持流量并转发出去的，不在这篇说明. \u003c/p\u003e\n\u003cp\u003e再来简单说明一下各个组件的作用.\u003c/p\u003e\n\u003ch3 id=\"Components\"\u003e\u003ca href=\"#Components\" class=\"headerlink\" title=\"Components\"\u003e\u003c/a\u003eComponents\u003c/h3\u003e\u003ch4 id=\"数据面\"\u003e\u003ca href=\"#数据面\" class=\"headerlink\" title=\"数据面\"\u003e\u003c/a\u003e数据面\u003c/h4\u003e\u003ch5 id=\"envoy\"\u003e\u003ca href=\"#envoy\" class=\"headerlink\" title=\"envoy\"\u003e\u003c/a\u003eenvoy\u003c/h5\u003e\u003cp\u003e数据面很简单, 就一个proxy(envoy)\u003c/p\u003e\n\u003cp\u003eenvoy有如下的特点:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP 7层路由\u003c/li\u003e\n\u003cli\u003e支持gRPC、HTTP/2\u003c/li\u003e\n\u003cli\u003e服务发现和动态配置\u003c/li\u003e\n\u003cli\u003e健康检查\u003c/li\u003e\n\u003cli\u003e高级负载均衡\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003e简单来说, istio通过注入(手工注入入自动注入)等方式将envoy加入到业务Pod中, 然后通过initContainer生成的iptables规则将所在进出业务容器的流量都进行劫持\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"控制面\"\u003e\u003ca href=\"#控制面\" class=\"headerlink\" title=\"控制面\"\u003e\u003c/a\u003e控制面\u003c/h4\u003e\u003ch5 id=\"pilot\"\u003e\u003ca href=\"#pilot\" class=\"headerlink\" title=\"pilot\"\u003e\u003c/a\u003epilot\u003c/h5\u003e\u003cp\u003e\u003ccode\u003ePilot 是Istio实现流量管理的核心组件，它主要的作用是配置和管理Envoy代理\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e从平台（如Kubernetes）获取服务信息，完成服务发现\u003c/li\u003e\n\u003cli\u003e获取Istio的各项配置，转换成Envoy代理可读的格式并分发, 使用XDS协议.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003epiolt架构图:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200209155817.png\"/\u003e\u003c/p\u003e\n\u003ch5 id=\"Mixer\"\u003e\u003ca href=\"#Mixer\" class=\"headerlink\" title=\"Mixer\"\u003e\u003c/a\u003eMixer\u003c/h5\u003e\u003cp\u003e\u003ccode\u003eMixer的主要功能是提供策略控制，并从Envoy代理收集遥测数据\u003c/code\u003e。每次网络通信时Envoy代理都会向Mixer发出预检要求，用来检测调用者的合法性。调用之后Envoy代理会发送遥测数据供Mixer收集。一般情况下Sidecar代理可以缓存这些数据，不需要频繁地调用Mixer.\u003c/p\u003e\n\u003cp\u003e​\t同时,\u003ccode\u003eMixer彩用配器模式\u003c/code\u003e, 可以支持不同的后端，如日志后端，监控后端, 调用链后端.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/20200209160002.png\"/\u003e\u003c/p\u003e\n\u003ch5 id=\"Citadel\"\u003e\u003ca href=\"#Citadel\" class=\"headerlink\" title=\"Citadel\"\u003e\u003c/a\u003eCitadel\u003c/h5\u003e\u003cp\u003eCitadel是与安全相关的组件，主要负责密钥和证书的管理。它可以提供服务间和终端用户的身份认证，还可以加密服务网格中的流量。\u003c/p\u003e\n\u003ch5 id=\"galley\"\u003e\u003ca href=\"#galley\" class=\"headerlink\" title=\"galley\"\u003e\u003c/a\u003egalley\u003c/h5\u003e\u003cp\u003e在2019年3月份发布的1.1版本中，Gally作为一个独立的组件被添加到了架构当中（在此之前的版本中Gally并未独立出现），它现在是Istio主要的配置管理组件，负责配置的获取、处理和分发。Gally使用了一种叫作MCP（Mesh Configuration Protocol，网格配置协议）的协议与其他组件进行通信。\u003c/p\u003e\n\u003cp\u003e重点学习Pilot及Mix即可, citadel及galley一般都不会变动频繁, 知道怎么一回事就可以了.\u003c/p\u003e\n\u003cp\u003e上面主要学习了下istio整体的框架,没有说明地很详细, 至于istio如何注入sidecar, sidecar又是如何劫持流向转发, 又是如何找到对端的容器地址的，挺有意思, 后续再更.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://jimmysong.io/istio-handbook/concepts/sidecar-injection-deep-dive.html\"\u003ehttps://jimmysong.io/istio-handbook/concepts/sidecar-injection-deep-dive.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://jimmysong.io/istio-handbook/concepts/sidecar-traffic-routing-deep-dive.html\"\u003ehttps://jimmysong.io/istio-handbook/concepts/sidecar-traffic-routing-deep-dive.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://mp.weixin.qq.com/s/C-NoiknOj9cga7FYUjdKaA\"\u003ehttps://mp.weixin.qq.com/s/C-NoiknOj9cga7FYUjdKaA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://jimmysong.io/\"\u003ehttps://jimmysong.io\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://istio.io/\"\u003eHttps://istio.io\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2020-02-09T15:40:53+08:00",
  "Author": "Z.S.K."
}