{
  "Source": "izsk.me",
  "Title": "golang学习(zap二次封装, 支持动态修改日志级别)",
  "Link": "https://izsk.me/2019/08/14/golang-zap/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003egolang到现在还没出现一款类似log4j这么强大的日志打印工具, 在调研了一番之后发现，现在用的最多的是logrus跟zap, github上的star也比较多, logrus使用起来比较简单, 不需要做过多的设置, 导入就能使用, 非常方便, 而zap则侧重在高性能方面, 基本所有的参数都可配置,不过需要的代码比logrus多. \u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003cp\u003e对于日志打印工具的需求其实非常简单, \u003cstrong\u003e日志轮转，多点打印,  json格式\u003c/strong\u003e就可以了, logrus跟zap这些都支持, 如果是从易用性上来, 优先会选择logrus, 因为基本不需要写代码.\u003c/p\u003e\n\u003cp\u003e但是当看到\u003cstrong\u003ezap支持在运行时动态修改日志级别\u003c/strong\u003e这个功能时, 我眼前一亮, 而且在看完zap的性能比logrus高一个数量级时, 果断地选择了zap.\u003c/p\u003e\n\u003cp\u003e因为zap是高度可配置的, 文档也不是很完善, 做个简单的二次封装是个不错的选择\u003c/p\u003e\n\u003cp\u003e这样在不需要重启应用的情况下就能修改日志级别, 还是很爽的.\u003c/p\u003e\n\u003ch3 id=\"源码\"\u003e\u003ca href=\"#源码\" class=\"headerlink\" title=\"源码\"\u003e\u003c/a\u003e源码\u003c/h3\u003e\u003cp\u003eDemo在\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/zhoushuke/change-zap-LogLevel-by-restfulAPI-in-Runtime\"\u003e这里\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e当然封装的也比较简单, 有些参数是可以抽离出来的\u003c/p\u003e\n\u003cp\u003e下载下来后直接运行\u003ccode\u003ego run main.go\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"测试\"\u003e\u003ca href=\"#测试\" class=\"headerlink\" title=\"测试\"\u003e\u003c/a\u003e测试\u003c/h3\u003e\u003cp\u003e启动时默认的日志级别被设置为\u003cstrong\u003einfo\u003c/strong\u003e，因此不会打印\u003ccode\u003edebug\u003c/code\u003e日志\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304172512160.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e可以通过以下接口查看: \u003ccode\u003ecurl localhost:9090/handle/level\u003c/code\u003e 代码中已改成\u003ccode\u003ecurl localhost:9090/change/level\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304172527923.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e把日志级别修改为\u003ccode\u003edebug\u003c/code\u003e(向下修改)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304173749638.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e查看日志, 发现\u003ccode\u003edebug\u003c/code\u003e日志打印出来了, 说明动态修改生效\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304173732489.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e再把日志级别修改为\u003ccode\u003eerror\u003c/code\u003e(向上修改)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304173914389.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e查看日志, 只有\u003ccode\u003eerror\u003c/code\u003e的日志打印出来\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304173830840.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e最后把日志级别修改为\u003ccode\u003epanic\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304174008960.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e发现不打印日志了，因为main中最高级别为\u003ccode\u003ewarn\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/zhoushuke/BlogPhoto/master/githuboss/image-20200304173952284.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e总结\u003c/strong\u003e: 现在很多成熟的日志工具都支持在运行时通过http接口修改日志级别，比如Log4j, 不过log4j一般都会使用在java的项目上，golang下zap也原生提示了这个能力, 还是挺有用的, 生产环境下可以设置一个比较高的打印级别, 比如warn，这样可以节省大量磁盘空间同时提高效率, 如果发现问题，只需要通过http接口把日志级别调低, 很方便的可以不停应用排查问题，非常方便. \u003c/p\u003e\n\u003ch3 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h3\u003e\u003cp\u003e在测试时发现出现有以下的打印格式, 发现msg字段的格式有点诡异, 这样不太利于做日志分析.\u003c/p\u003e\n\u003cfigure class=\"highlight json\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"punctuation\"\u003e{\u003c/span\u003e\u003cspan class=\"attr\"\u003e\u0026#34;level\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e:\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;info\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003cspan class=\"attr\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e:\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;2020-03-04T16:41:12.828+0800\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003cspan class=\"attr\"\u003e\u0026#34;caller\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e:\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;github/demo.go:29\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003cspan class=\"attr\"\u003e\u0026#34;msg\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e:\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;无法获取网址{url 15 0 http://www.baidu.com \u0026lt;nil\u0026gt;} {attempt 11 3  \u0026lt;nil\u0026gt;} {backoff 8 1000000000  \u0026lt;nil\u0026gt;}\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003cspan class=\"attr\"\u003e\u0026#34;serviceName\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e:\u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在main.go中对应的代码\u003c/p\u003e\n\u003cfigure class=\"highlight json\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003elogger.Info(\u003cspan class=\"string\"\u003e\u0026#34;无法获取网址\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \t\tzap.String(\u003cspan class=\"string\"\u003e\u0026#34;url\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;http://www.baidu.com\u0026#34;\u003c/span\u003e)\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \t\tzap.Int(\u003cspan class=\"string\"\u003e\u0026#34;attempt\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e \u003cspan class=\"number\"\u003e3\u003c/span\u003e)\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \t\tzap.Duration(\u003cspan class=\"string\"\u003e\u0026#34;backoff\u0026#34;\u003c/span\u003e\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e time.Second)\u003cspan class=\"punctuation\"\u003e,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e原因在于, 现在的logger对象是一个zap.SugaredLogger, 而不是logger对象(最开始测试时用的是Logger对象), 因此在这里不能使用zap.String这种格式, 当然, zap.SugaredLogger跟zap.Logger是可以很方便地进行转换的, 可参考\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://godoc.org/go.uber.org/zap\"\u003e这里\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://godoc.org/go.uber.org/zap\"\u003ehttps://godoc.org/go.uber.org/zap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/zhoushuke/change-zap-LogLevel-by-restfulAPI-in-Runtime\"\u003ehttps://github.com/zhoushuke/change-zap-LogLevel-by-restfulAPI-in-Runtime\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://juejin.im/post/5bffa2f15188256693607d7c\"\u003ehttps://juejin.im/post/5bffa2f15188256693607d7c\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2019-08-14T11:10:53+08:00",
  "Author": "Z.S.K."
}