{
  "Source": "izsk.me",
  "Title": "golang学习(go mod入门)",
  "Link": "https://izsk.me/2019/07/09/golang-mod/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003cp\u003e在go初期都是使用GOPATH的方法管理依赖,说实话确认难用, 大部分的golang项目都是使用第三包的包管理工具, 如vendor，也只用过vendor，好在官方推出了go module，在go v1.12后基本stable了，也支持vendor, 赶紧来学习一下.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\n\n\u003ch3 id=\"GO111MODULE\"\u003e\u003ca href=\"#GO111MODULE\" class=\"headerlink\" title=\"GO111MODULE\"\u003e\u003c/a\u003eGO111MODULE\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eGO111MODULE\u003c/code\u003e 有三个值：\u003ccode\u003eoff\u003c/code\u003e, \u003ccode\u003eon\u003c/code\u003e和\u003ccode\u003eauto（默认值）\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eGO111MODULE=off\u003c/code\u003e，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eGO111MODULE=on\u003c/code\u003e，go命令行会使用modules，而一点也不会去GOPATH目录下查找。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e```\u003cbr/\u003eGO111MODULE=auto\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  - 当前目录在GOPATH/src之外且该目录包含go.mod文件\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  - 当前文件在包含go.mod文件的目录下面。\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e修改golang环境变量:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e`go env -w GO111MODULE=\u0026#34;on\u0026#34;`\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e当然也可以使用\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e`export GO111MODULE=\u0026#34;on\u0026#34;`\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e这两种方式是临时的,只对改终端有效,**在go1.12版本之后会自动识别，如果在目录下存在go.mod就会使用module方式**, 这个还是比较人性化的.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e### 使用\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ego modules使用起来也是非常方便\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#### go mod init\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e```bash\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emkdir govars \u0026amp;\u0026amp; cd govars\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ego mod init govars   #govars就是模块名, 当然官方推荐使用 aaa.bbb/xxx/yyy的形式\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#执行完成之后会在当前目录下生成go.mod及go.sum文件, go.sum是一个构建状态跟踪文件。它会记录当前module所有的顶层和间接依赖，以及这些依赖的校验和，从而提供一个可以100%复现的构建过程并对构建对象提供安全性的保证\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ecat go.mod\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emodule govars \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ego 1.13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最开始只有这两行，一个指定模块名，另一个就是go的版本, 一般情况下go.mod这个文件也不需要管理.\u003c/p\u003e\n\u003cp\u003ego.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件.\u003c/p\u003e\n\u003cp\u003e比如, 我在main.go中\u003ccode\u003eimport github.com/MatrixAI/Golang-Demo\u003c/code\u003e,那么这个文件就会自动地添加依赖:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecat go.mod\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emodule govars\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ego\u003c/span\u003e \u003cspan class=\"number\"\u003e1.13\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erequire (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgithub.com/MatrixAI/Golang-Demo v0\u003cspan class=\"number\"\u003e.0\u003c/span\u003e\u003cspan class=\"number\"\u003e.0\u003c/span\u003e\u003cspan class=\"number\"\u003e-20200103072352\u003c/span\u003e\u003cspan class=\"number\"\u003e-8\u003c/span\u003ed075351fdbd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgithub.com/pelletier/\u003cspan class=\"keyword\"\u003ego\u003c/span\u003e-toml v1\u003cspan class=\"number\"\u003e.6\u003c/span\u003e\u003cspan class=\"number\"\u003e.0\u003c/span\u003e \u003cspan class=\"comment\"\u003e// indirect indirect表示这个包是间接引用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以通过 \u003ccode\u003ego get ./...\u003c/code\u003e让它查找依赖，并记录在\u003ccode\u003ego.mod\u003c/code\u003e文件中\u003c/p\u003e\n\u003ch4 id=\"go-mod-replace\"\u003e\u003ca href=\"#go-mod-replace\" class=\"headerlink\" title=\"go mod replace\"\u003e\u003c/a\u003ego mod replace\u003c/h4\u003e\u003cp\u003e当需要使用本地包时, 可以直接通过go mod edit或者直接编译go.mod文件, 来添加/替换本地的包\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emodule github.com/learn-golang/golang-mod\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erequire (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgithub.com/learn-golang/golang-mod/first v0\u003cspan class=\"number\"\u003e.0\u003c/span\u003e\u003cspan class=\"number\"\u003e.0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgithub.com/learn-golang/golang-mod/second v0\u003cspan class=\"number\"\u003e.0\u003c/span\u003e\u003cspan class=\"number\"\u003e.0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tgithub.com/sirupsen/logrus v1\u003cspan class=\"number\"\u003e.4\u003c/span\u003e\u003cspan class=\"number\"\u003e.2\u003c/span\u003e \u003cspan class=\"comment\"\u003e// indirect\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 使用replace进行替换\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereplace github.com/learn-golang/golang-mod/first =\u0026gt; ./first\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereplace github.com/learn-golang/golang-mod/second =\u0026gt; ./second\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ego\u003c/span\u003e \u003cspan class=\"number\"\u003e1.13\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eindirect\u003c/code\u003e表示是间接依赖， 指在当前module中没有直接import，而被当前module使用的第三方module引入的包，相对的顶层依赖就是在当前module中被直接import的包。如果二者规则发生冲突，那么顶层依赖的规则覆盖间接依赖。\u003c/p\u003e\n\u003cp\u003e在这里\u003ccode\u003egithub.com/sirupsen/logrus\u003c/code\u003e被引入，但当前项目未直接import，所以是一个\u003cstrong\u003e间接依赖\u003c/strong\u003e，而\u003ccode\u003egithub.com/learn-golang/golang-mod/first\u003c/code\u003e被直接引入和使用，所以它是一个\u003cstrong\u003e顶层依赖\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e而我们的replace命令只能管理顶层依赖，对于间接引用是无法使用replace的，因此有时会出现在go.mod中使用了replace到本地包, 但还出现go build时仍然去网上下载的原因。\u003c/p\u003e\n\u003cp\u003e那么如果我把\u003ccode\u003e// indirect\u003c/code\u003e去掉了，那么不就变成顶层依赖了吗？答案当然是不行。不管是直接编辑还是\u003ccode\u003ego mod edit\u003c/code\u003e修改，我们为go.mod添加的信息都只是对\u003ccode\u003ego mod\u003c/code\u003e的一种提示而已，当运行\u003ccode\u003ego build\u003c/code\u003e或是\u003ccode\u003ego mod tidy\u003c/code\u003e时golang会自动更新go.mod导致某些修改无效，简单来说一个包是顶层依赖还是间接依赖，取决于它在本module中是否被直接import，而不是在go.mod文件中是否包含\u003ccode\u003e// indirect\u003c/code\u003e注释\u003c/p\u003e\n\u003ch4 id=\"go-mod-tidy\"\u003e\u003ca href=\"#go-mod-tidy\" class=\"headerlink\" title=\"go mod tidy\"\u003e\u003c/a\u003ego mod tidy\u003c/h4\u003e\u003cp\u003e\u003ccode\u003ego mod tidy\u003c/code\u003e主要是用于为\u003ccode\u003ego.mod\u003c/code\u003e增加丢失的依赖，删除不需要的依赖等.\u003c/p\u003e\n\u003ch4 id=\"go-list\"\u003e\u003ca href=\"#go-list\" class=\"headerlink\" title=\"go list\"\u003e\u003c/a\u003ego list\u003c/h4\u003e\u003cp\u003e显示所有Import库信息\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ego list -m all \u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003egovars\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egithub.com/BurntSushi/toml v0.3.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egithub.com/MatrixAI/Golang-Demo v0.0.0-20200103072352-8d075351fdbd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egithub.com/davecgh/go-spew v1.1.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egithub.com/pelletier/go-toml v1.6.0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egopkg.in/yaml.v2 v2.2.4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e也可查看json详细格式 \u003ccode\u003ego list -m all -json\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e当然还有一些其它的操作, 以后用到了再深入, 从上手的效果来看，确实比GOPATH、vendor省事, 很多事要可以交给go module去做了.\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://tonybai.com/2018/07/15/hello-go-module/\"\u003ehttps://tonybai.com/2018/07/15/hello-go-module/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cnblogs.com/apocelipes/p/10295096.html\"\u003ehttps://www.cnblogs.com/apocelipes/p/10295096.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\n      \n    \u003c/div\u003e",
  "Date": "2019-07-09T23:30:53+08:00",
  "Author": "Z.S.K."
}