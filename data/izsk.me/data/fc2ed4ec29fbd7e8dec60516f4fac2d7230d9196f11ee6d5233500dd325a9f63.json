{
  "Source": "izsk.me",
  "Title": "Kubernetes学习(Operator)",
  "Link": "https://izsk.me/2019/04/03/Kubernetes%E5%AD%A6%E4%B9%A0(Operator)/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n      \n\n      \n        \u003ch3 id=\"官方定义\"\u003e\u003ca href=\"#官方定义\" class=\"headerlink\" title=\"官方定义\"\u003e\u003c/a\u003e\u003cstrong\u003e官方定义\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eAn Operator is a method of packaging, deploying and managing a Kubernetes application.\u003c/p\u003e\n\u003cp\u003e旨在简化复杂有状态应用管理的框架，它是一个感知应用状态的控制器，通过扩展Kubernetes API来自动创建、管理和配置应用实例.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch3 id=\"车库故事\"\u003e\u003ca href=\"#车库故事\" class=\"headerlink\" title=\"车库故事\"\u003e\u003c/a\u003e\u003cstrong\u003e车库故事\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e诞生于车库, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://yq.aliyun.com/articles/685522\"\u003eKubernetes API 与 Operator，不为人知的开发者战争\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eoperator的初衷是为开发者解决运维工作\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"先从kubernetes说起\"\u003e\u003ca href=\"#先从kubernetes说起\" class=\"headerlink\" title=\"先从kubernetes说起\"\u003e\u003c/a\u003e\u003cstrong\u003e先从kubernetes说起\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e两大重要特性:\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e声明式API: 我们提交一个定义好的API对象来”声明”我所期望的状态是什么样子\u003c/li\u003e\n\u003cli\u003e控制器模式: 无条件的, 无限循环的watch每个api对象,确保每个集群的状态与声明的状态一致\u003c/li\u003e\n\u003cli\u003e标签选择器: 通过标签确认资源之间的联系\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e流程可概括如下:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-1.png\" alt=\"operator-c1-1\"/\u003e\u003c/p\u003e\n\u003cp\u003e为什么kubernetes会有ReplicSet, Deployment, statefulSet, Operator等多种api资源?\u003c/p\u003e\n\u003ch4 id=\"应用情景\"\u003e\u003ca href=\"#应用情景\" class=\"headerlink\" title=\"应用情景\"\u003e\u003c/a\u003e\u003cstrong\u003e应用情景\u003c/strong\u003e\u003c/h4\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e无状态: \u003c/li\u003e\n\u003cli\u003e有状态:  mysq, redis…\u003c/li\u003e\n\u003cli\u003e分布式: etcd, zookeeper…\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"StatefulSet与Operator\"\u003e\u003ca href=\"#StatefulSet与Operator\" class=\"headerlink\" title=\"StatefulSet与Operator\"\u003e\u003c/a\u003e\u003cstrong\u003eStatefulSet与Operator\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003estatefulSet为kubernetes运行有状态应用的资源类型, 一般都搭配共享存储来持久化\u003c/p\u003e\n\u003cp\u003eStatefulSet 的核心原理,其实是对分布式应用的两种状态进行了保持:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e分布式应用的拓扑状态, 或者说,节点之间的启动顺序;\u003c/li\u003e\n\u003cli\u003e分布式应用的存储状态, 或者说,每个节点依赖的持久化数据(比如容器 re-scheduler到另一node上,重新加载他的网络存储以及其中的数据)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e打个比方:  如果想部署一个3节点的etcd集群\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e直接使用deployment方式很难维护各节点之间的启动顺序\u003c/li\u003e\n\u003cli\u003e使用statefulSet部署一个etcd集群, statefulSet可以保证etcd节点的启动顺序按照yaml期望的方式部署, 但是还是需要指定各节点之间的连接关系\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果使用operator的话, 则只需要告诉operator, 这是一个3节点的etcd集群, etcd的版本是xxxx即可, 其它的工作都交由operator控制器去完成. operator声明的api对象\u003ccode\u003e不再是单体应用的描述,而是整个分布式应用集群的动态逻辑\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eoperator是在分布式应用领域发力,使用户自己定义kuberenetes的控制器来完成业务逻辑.\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/operator-framework/awesome-operators?spm=a2c4e.11153940.blogcont685522.11.1e4394133MN7B9\"\u003eopenrator项目列表\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e那openrator是如何做到对分布式应用如此清晰快捷?\u003c/p\u003e\n\u003ch3 id=\"TPR-x2F-CRD\"\u003e\u003ca href=\"#TPR-x2F-CRD\" class=\"headerlink\" title=\"TPR/CRD\"\u003e\u003c/a\u003e\u003cstrong\u003eTPR/CRD\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003eTPR: Thrid Part Resousrce 第三方资源\u003c/p\u003e\n\u003cp\u003eCRD:Custom Resource Definition 资源自定义\u003c/p\u003e\n\u003cp\u003e在kubernetes 1.7之后，TPR升级为CRD, 总结来说,\u003ccode\u003e用户可自己编写任何的资源类型,同时实现对该资源类型的控制器\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e本质上,CRD做为kubernetes的特殊资源,它的工作方式如下:\u003c/p\u003e\n\u003ch3 id=\"Operator的工作方式\"\u003e\u003ca href=\"#Operator的工作方式\" class=\"headerlink\" title=\"Operator的工作方式\"\u003e\u003c/a\u003e\u003cstrong\u003eOperator的工作方式\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-2.png\" alt=\"operator-c1-2\"/\u003e\u003c/p\u003e\n\u003cp\u003e一个operator案例应该实现以下特性:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eOperator自身以deployment的方式部署\u003c/li\u003e\n\u003cli\u003eOperator自动创建一个CRD资源类型,用户可以用该类型创建CR\u003c/li\u003e\n\u003cli\u003eOperator利用Kubernetes内置的Serivce/ReplicaSet等API管理应用\u003c/li\u003e\n\u003cli\u003eOperator应该向后兼容,并且在Operator自身退出或删除时不影响应用的状态\u003c/li\u003e\n\u003cli\u003eOperator应该支持应用版本更新\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"使用Operator部署etcd集群\"\u003e\u003ca href=\"#使用Operator部署etcd集群\" class=\"headerlink\" title=\"使用Operator部署etcd集群\"\u003e\u003c/a\u003e\u003cstrong\u003e使用Operator部署etcd集群\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e搭建一个kubernetes集群,这里使用的是kubeadm搭建\u003c/li\u003e\n\u003cli\u003e下载官方维护的etcd-operator-git\u003c/li\u003e\n\u003cli\u003e创建RBAC规则,主要声明对哪些资源有操作权限\u003c/li\u003e\n\u003cli\u003ekubectl apply -f etcd-operator-deployment.yaml\u003c/li\u003e\n\u003cli\u003e指定etcd的节点数及版本\u003c/li\u003e\n\u003cli\u003ekubectl apply -f example-etcd-cluster.yaml\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这样一个 etcd集群就部署完成,这些操作具体发生了什么?\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e当执行完etcd-operator-deployment.yaml后,启动一个容器,容器的entrypoing为etcd-operator\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e这个容器的作用是声明了一个CRD资源类型,在kubernetes中注册这个CRD,同时该CRD也是控制器,在集群中所有这个的CRD下的对象都将被watch\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e该类型名字为etcdclusters.etcd.database.coreos.com,这个名字在源代码的etcd-operator-master\\pkg\\apis\\etcd\\v1beta2\\register.go中被定义\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e再比如,etcd增删改查都写在etcd-operator中etcd-operator-master\\pkg\\util\\etcdutil\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e而在example-etcd-cluster.yaml则生成了etcdclusters.etcd.database.coreos.com的实例\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e该实例包含size跟version两个属性\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e查看etcd的pod数是不是与预期相符\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-3.PNG\" alt=\"operator-c1-3\"/\u003e\u003c/p\u003e\n\u003cp\u003e进容器查看etcd启动状态\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-4.PNG\" alt=\"ceph-c1-4\"/\u003e\u003c/p\u003e\n\u003cp\u003e大家一定很好奇,etcd启动命令里为什么不是etcd节点ip, 而且一大串的像域名一样的字符?\u003c/p\u003e\n\u003cp\u003e这是因为etcd的启动命令是在pod启动之前就已经生成好的,这个时候pod还没启动,也是没有分配ip,所以使用域名的形式\u003c/p\u003e\n\u003cp\u003e这个域名又是如何产生的,通过这个域名又是如何找到pod的呢?\u003c/p\u003e\n\u003cp\u003e其实在生成etcd集群的同时etcd-operator会自动生成一个与example-etcd-cluster同名的headless service资源\u003c/p\u003e\n\u003cp\u003eservice类型的资源会分配一个vip(可指定),访问service时由该vip转到后端某个pod上\u003c/p\u003e\n\u003cp\u003eheadless service(spec.clusterIP为None)类型资源不会分配vip, 访问该service直接返回所有后端pod列表\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-5.jpg\" alt=\"operator-c1-5\"/\u003e\u003c/p\u003e\n\u003cp\u003e查看生成的headless service与endpoints\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-6.PNG\" alt=\"operator-c1-6\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-7.PNG\" alt=\"operator-c1-7\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-8.PNG\" alt=\"operator-c1-8\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e当创建了一个headless service的资源时,它所代理的所有pod的ip地址都会绑定DNS记录,格式如下\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e比如: example-etcd-cluster-6n7hb78tkm.example-etcd-cluster.default.svc\u003c/p\u003e\n\u003cp\u003e尊崇以下规则 : pod名.service名.namespaces.svc\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e域名解析由kube-dns负责, endpoints由kube-proxy管理,kube-proxy会订阅所有service的变更从而更新iptalbes规则,endpointscontroller会订阅pod跟service对象的变更,并根据当前集群中的对象生成endpoint对象将service跟pod关联\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e关于kube-proxy与kube-dns,篇幅有限,可参考这两篇文章:\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/iiiiher/article/details/77099059\"\u003ekube-dns架构图解\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cizixs.com/2017/03/30/kubernetes-introduction-service-and-kube-proxy/\"\u003eservice 和 kube-proxy 原理\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e整个服务发现流程:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-9.jpg\" alt=\"operator-c1-9\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"etcd-operator常用命令\"\u003e\u003ca href=\"#etcd-operator常用命令\" class=\"headerlink\" title=\"etcd-operator常用命令\"\u003e\u003c/a\u003e\u003cstrong\u003eetcd-operator常用命令\u003c/strong\u003e\u003c/h3\u003e\u003ch4 id=\"扩缩容\"\u003e\u003ca href=\"#扩缩容\" class=\"headerlink\" title=\"扩缩容\"\u003e\u003c/a\u003e扩缩容\u003c/h4\u003e\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e当前的节点数为3, 版本为3.2.13\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e3--\u0026gt; 5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evim example/example-etcd-cluster.yaml\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ekubectl apply -f example/example-etcd-cluster.yaml\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-10.PNG\" alt=\"operator-c1-10\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-11.PNG\" alt=\"operator-c1-11\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"版本升级\"\u003e\u003ca href=\"#版本升级\" class=\"headerlink\" title=\"版本升级\"\u003e\u003c/a\u003e\u003cstrong\u003e版本升级\u003c/strong\u003e\u003c/h4\u003e\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e版本为3.2.13\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e3.2.13 --\u0026gt; 3.1.10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003evim example/example-etcd-cluster.yaml\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ekubectl apply -f example/example-etcd-cluster.yaml\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003ekubectl describe pod时会发现docker 的启动命令没有改变\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-12.PNG\" alt=\"operator-c1-12\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"节点宕机\"\u003e\u003ca href=\"#节点宕机\" class=\"headerlink\" title=\"节点宕机\"\u003e\u003c/a\u003e\u003cstrong\u003e节点宕机\u003c/strong\u003e\u003c/h4\u003e\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003e删除一个etcd pod, 这里删除种子节点\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ekubectl delete pod example-etcd-cluster-k6vklz2frv --now\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta prompt_\"\u003e#\u003c/span\u003e\u003cspan class=\"language-bash\"\u003eetcd-operator会创建一个新节点出来\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-13.PNG\" alt=\"operator-c1-13\"/\u003e\u003c/p\u003e\n\u003cp\u003eetcd-operator会创建一个新节点出来\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-14.PNG\" alt=\"operator-c1-14\"/\u003e\u003c/p\u003e\n\u003cp\u003e在原etcd容器中已无法ping通被删除pod\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-15.PNG\" alt=\"operator-c1-15\"/\u003e\u003c/p\u003e\n\u003cp\u003e而新生成的etcd节点的启动命令则不会包含被删除的节点\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-16.PNG\" alt=\"operator-c1-16\"/\u003e\u003c/p\u003e\n\u003cp\u003e查看etcd member list, 旧节点已删除,新节点加入\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://zskgithubblog.oss-cn-beijing.aliyuncs.com/blogpic/operator-c1-17.PNG\" alt=\"operator-c1-17\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"备份还原\"\u003e\u003ca href=\"#备份还原\" class=\"headerlink\" title=\"备份还原\"\u003e\u003c/a\u003e\u003cstrong\u003e备份还原\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003e目前官方维护了etcd-backup-operator,支持远程备份到AWS S3/ Azure Blob Service (ABS)/Google Cloud Storage (GCS)\u003c/p\u003e\n\u003cp\u003e或者从上述几个远程存储上还原etcd数据,etcd-restore-operator\u003c/p\u003e\n\u003cp\u003e同时官方维护了一个\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://coreos.com/operators/etcd/docs/latest/user/backup_cronjob/README.html\"\u003e定时备份任务\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"参考文章\"\u003e\u003ca href=\"#参考文章\" class=\"headerlink\" title=\"参考文章:\"\u003e\u003c/a\u003e\u003cstrong\u003e参考文章:\u003c/strong\u003e\u003c/h3\u003e\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.hi-linux.com/posts/40915.html\"\u003eetcd入门\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://coreos.com/operators/etcd/docs/latest/user/walkthrough/backup-operator.html\"\u003eetcd-backup-operator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/coreos/etcd-operator\"\u003eetcd-operator-git\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://yq.aliyun.com/articles/685522\"\u003eKubernetes API 与 Operator，不为人知的开发者战争\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://blog.csdn.net/iiiiher/article/details/77099059\"\u003ekube-dns架构图解\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cizixs.com/2017/03/30/kubernetes-introduction-service-and-kube-proxy/\"\u003eservice 和 kube-proxy 原理\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"转载请注明原作者-周淑科-https-izsk-me\"\u003e\u003ca href=\"#转载请注明原作者-周淑科-https-izsk-me\" class=\"headerlink\" title=\"转载请注明原作者: 周淑科(https://izsk.me)\"\u003e\u003c/a\u003e\u003cstrong\u003e转载请注明原作者: 周淑科(\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://izsk.me/\"\u003ehttps://izsk.me\u003c/a\u003e)\u003c/strong\u003e\u003c/h3\u003e\u003chr/\u003e\n\n      \n    \u003c/div\u003e",
  "Date": "2019-04-03T18:20:53+08:00",
  "Author": "Z.S.K."
}