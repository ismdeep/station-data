{
  "Source": "johnj.com",
  "Title": "From Elegance to Speed",
  "Link": "http://johnj.com/posts/from-elegance-to-speed/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eFrom Elegance to Speed\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/physics\"\u003e\u003cspan class=\"physics-tag\"\u003ephysics\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2019-09-25T00:00:00Z\"\u003e\n      September 25, 2019\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/another-migration/\"\u003eMigrating, Again\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/lisp-projects/\"\u003eCommon Lisp How-Tos\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nMaking Things Fast\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/plane.jpg\"\u003e\u003cimg class=\"resize\" src=\"/plane_hu7abd2a27a166d1f3ad7d1e403e556e33_15147_700x0_resize_q75_box.jpg\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\nA while back, we used \u003ca href=\"/posts/lazy-physics/\"\u003ea toy particle physics trigger\u003c/a\u003e to explore\nconcepts in lazy evaluation and functional programming in Clojure. We\ncame up with the following function which selected groups of eight\nevents clustered close together in time:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn smt-8 [times]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (-\u0026gt;\u0026gt; times\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (partition 8 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (map (juxt identity\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  (comp (partial apply -)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        (juxt last first))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (filter (comp (partial \u0026gt; 1000) second))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThough elegant, this function processed events at a rate of 250 kHz,\nwhich I found slightly disappointing, performance-wise.\u003c/p\u003e\n\u003cp\u003e\nI have been interested in writing faster programs lately, which is one\nof the reasons I\u0026#39;ve been \u003ca href=\"/posts/lisp-projects/\"\u003elearning Common Lisp\u003c/a\u003e. Common Lisp lets you\ncreate extremely high-level programming constructs, but also lets you\nget closer to the metal when you need to. In this post we\u0026#39;ll look at\nsome ways for improving performance and compare our results to the\noriginal 250 kHz event rate.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nFirst Steps\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nThe first step is to translate our code as is to Common Lisp. We\u0026#39;re\ngoing to punt entirely on the question of laziness for this post,\nthough we might take it up in the future.\u003c/p\u003e\n\u003cp\u003e\nHere\u0026#39;s my first attempt. We have to start with our source of random\ntimes. In Clojure, we had:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def times (iterate #(+ % (rand-int 1000)) 0))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nSince I\u0026#39;m going to benchmark performance, we\u0026#39;ll need to set a limit to the number of events (times) we\u0026#39;ll process. So, in Common Lisp:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun time-sequence (n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (loop repeat n\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     for y = 0 then (+ y (random 1000))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     collect y))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nwhere \u003ccode class=\"verbatim\"\u003en\u003c/code\u003e is the number of event times to process.  Here and\nthroughout what follows, I\u0026#39;m using the \u003ccode class=\"verbatim\"\u003eloop\u003c/code\u003e macro, which is a Swiss\narmy knife for iteration with a somewhat strange, non-Lispy, but\nreadable syntax.\u003c/p\u003e\n\u003cp\u003e\nWe also want to set our random state so as to guarantee different\nresults each time we execute our simulation:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(setf *random-state* (make-random-state t))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nMy first attempt in Common Lisp looked like this benchmarking snippet:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(timing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (length\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (-\u0026gt;\u0026gt; 1000000\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         time-sequence\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (partition-n 8 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (mapcar (juxt #\u0026#39;car (compose #\u0026#39;car #\u0026#39;last) #\u0026#39;identity))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (mapcar #\u0026#39;(lambda (l) `(,(- (cadr l) (car l)) ,(caddr l))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (remove-if-not #\u0026#39;(lambda (l) (\u0026lt; (car l) 1000))))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is less lovely than the Clojure, partly because of all the\nhash-quoting of functions (Common Lisp is a \u003ca href=\"https://stackoverflow.com/questions/4578574/what-is-the-difference-between-lisp-1-and-lisp-2\"\u003eLisp-2\u003c/a\u003e, and Clojure is a\nLisp 1). \u003ccode class=\"verbatim\"\u003e-\u0026gt;\u0026gt;\u003c/code\u003e is from the \u003ccode class=\"verbatim\"\u003earrow-macros\u003c/code\u003e library, and \u003ccode class=\"verbatim\"\u003ecompose\u003c/code\u003e is\nfrom the \u003ccode class=\"verbatim\"\u003ecl-utilities\u003c/code\u003e library.  The other Clojure-ish functions,\n\u003ccode class=\"verbatim\"\u003epartition-n\u003c/code\u003e (a replacement for Clojure\u0026#39;s \u003ccode class=\"verbatim\"\u003epartition\u003c/code\u003e, whose name\ncollides with an entirely different function in Common Lisp) and\n\u003ccode class=\"verbatim\"\u003ejuxt\u003c/code\u003e are from \u003ca href=\"https://github.com/eigenhombre/cl-oju\"\u003e\u003ccode class=\"verbatim\"\u003ecl-oju\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://github.com/eigenhombre/cl-oju\"\u003ea small library\u003c/a\u003e I\u0026#39;ve been writing for those\nstill-frequent times when I want a Clojure function or idiom in Common\nLisp. (The library ignores laziness for now, since I haven\u0026#39;t needed it\nyet.)\u003c/p\u003e\n\u003cp\u003e\n\u003ccode class=\"verbatim\"\u003etiming\u003c/code\u003e is a macro I adapted from \u003ca href=\"https://lispcookbook.github.io/cl-cookbook/dates_and_times.html\"\u003ethe Common Lisp Cookbook\u003c/a\u003e, which\ncaptures both the results of a computation and the elapsed CPU time\nused (not wall clock time) in msec:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro timing (\u0026amp;body forms)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let ((run1 (gensym))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t(run2 (gensym))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t(result (gensym)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    `(let ((,run1 (get-internal-run-time))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t   (,result (progn ,@forms))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t   (,run2 (get-internal-run-time)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       `(duration ,(- ,run2 ,run1) msec... result ,,result))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nFor now, \u003ccode class=\"verbatim\"\u003eresult\u003c/code\u003e is simply the number of eight-fold time clusters\noccuring within 1000 units of time. The execution time was roughly a\nsecond for the first few times I ran this:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 1045 MSEC... RESULT 235)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 1554 MSEC... RESULT 201)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 827 MSEC... RESULT 164)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis already processed events at 1 MHz, roughly 4x faster than the\nClojure speed of 250kHz.\u003c/p\u003e\n\u003cp\u003e\nLater, however, when I revisited the code, I noticed it ran significantly\nfaster:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 435 MSEC... RESULT 193)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 279 MSEC... RESULT 189)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 205 MSEC... RESULT 177)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(DURATION 601 MSEC... RESULT 180)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is 2.6 Mhz, \u003cstrong\u003e10x the Clojure code speed\u003c/strong\u003e.  It took me a while to\nfigure out that I had changed the SBCL heap size in order to handle\nlarger arrays for testing (this is one area where laziness would\nhelp!). The larger heap size was making the code run faster.\u003c/p\u003e\n\u003cp\u003e\nIt should be said at this point that I made no attempt in my original\nblog post to optimize the Clojure code for performance. Nevertheless,\nI think it\u0026#39;s interesting that my first attempt to write the same\nalgorithm in Common Lisp, using roughly the same idioms, performed so\nmuch faster.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-3\"\u003e\nInterlude\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nLooking back over my career, it seems I have been moving gradually\nfrom fast, lower-level languages to slower, more expressive,\nhigh-level languages: \u003ccode class=\"verbatim\"\u003eFORTRAN\u003c/code\u003e and C, to Perl and Python, then to\nClojure (which is faster than Python for most long-running programs,\nwhile being arguably more expressive\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-1\" href=\"#footnote-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e). I\u0026#39;ve enjoyed this\ntrajectory, because higher level languages let you implement so much, so\nquickly.\u003c/p\u003e\n\u003cp\u003e\nMy feelings on this are shifting, however. I wrote some code a decade\nago for \u003ca href=\"https://arxiv.org/abs/0810.4930\"\u003ea system\u003c/a\u003e that has been running constantly for a decade on\nthousands of devices. My code is not particularly CPU efficient and,\ntherefore, not as energy-efficient as it could be. As the planet\nwarms, I think it\u0026#39;s important to try and find small efficiencies where\nwe can… not necessarily under the assumption that it will make a\nmassive difference, but because it\u0026#39;s just the right thing to do as\nconscientious professionals. (The fact that the sins of my past are\nexecuting on processors running on top of and within Antarctic ice\nadds an extra bit of irony here).\u003c/p\u003e\n\u003cp\u003e\nCommon Lisp is particularly interesting to me of late because, having\nbeen designed largely for \u003ca href=\"https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence\"\u003eGood Old-Fashioned AI\u003c/a\u003e, it allows you to work\nat a very high level (you can, for example, add Prolog-like\nfunctionality to a Lisp in a few hundred lines of code \u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-2\" href=\"#footnote-2\"\u003e2\u003c/a\u003e\u003c/sup\u003e – but, you can generate very fast (i.e.,\nmore energy efficient) code as well, as we shall see shortly.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-4\"\u003e\nImprovements\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nThe next thing I tried was to separate the event generation from the trigger calculation and to use a vector for the input times, instead of a list:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun time-sequence-vec (n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (make-array `(,n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              :initial-contents\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (loop repeat n\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 for y = 0 then (+ y (random 1000))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 collect y)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defparameter array-size (* 100 1000 1000))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defparameter *s* (time-sequence-vec array-size))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nI also make the test sample much larger to improve the run durations and statistics.\u003c/p\u003e\n\u003cp\u003e\nBoth Graham\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-3\" href=\"#footnote-3\"\u003e3\u003c/a\u003e\u003c/sup\u003e and Norvig\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-4\" href=\"#footnote-4\"\u003e4\u003c/a\u003e\u003c/sup\u003e emphasize tuning your algorithm first before turning\nto other optimizations. In our case the problem is O(\u003cem\u003en\u003c/em\u003e), which is\nthe best time complexity we can hope for, but our use of function\ncomposition, while elegant, could be turned into something more\nefficient. To improve the algorithm proper, I perform the entire\ncomputation in a single \u003ccode class=\"verbatim\"\u003eloop\u003c/code\u003e statement. I also change the output\nslightly to show the index for matching 8-fold events, start and end\ntime, and event duration:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun second-try ()\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (loop for x below (- array-size 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     if (\u0026lt; (- (elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (elt *s* x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     collect `(index ,x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     startval ,(elt *s* x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     endval   ,(elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     diff     ,(- (elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                  (elt *s* x)))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(take 4 (second-try))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;((INDEX 69087 STARTVAL 34504666 ENDVAL 34505615 DIFF 949)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (INDEX 153990 STARTVAL 76991815 ENDVAL 76992630 DIFF 815)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (INDEX 237070 STARTVAL 118617491 ENDVAL 118618358 DIFF 867)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (INDEX 294951 STARTVAL 147513479 ENDVAL 147514346 DIFF 867))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Time it, a few times:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(timing (length (second-try)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 2158 MSEC... RESULT 2427)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 2167 MSEC... RESULT 2427)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 2162 MSEC... RESULT 2427)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nNote that the starting and ending time values increase monotonically,\nand the reported time differences (\u003ccode class=\"verbatim\"\u003eDIFF\u003c/code\u003e) are under 1000, as desired\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-5\" href=\"#footnote-5\"\u003e5\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\u003cp\u003e\nThe new trigger function improves the processing rate to 46.2 MHz. At\nthis point I\u0026#39;m starting to wonder what the assembly language looks\nlike:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(disassemble \u0026#39;second-try)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; disassembly for SECOND-TRY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; Size: 1061 bytes. Origin: #x228FE0B0                        ; SECOND-TRY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0B0:       498B7510         MOV RSI, [R13+16]               ; thread.binding-stack-pointer\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0B4:       488975F8         MOV [RBP-8], RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0B8:       488B3591FFFFFF   MOV RSI, [RIP-111]              ; \u0026#39;ARRAY-SIZE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0BF:       8B56F5           MOV EDX, [RSI-11]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0C2:       4A8B142A         MOV RDX, [RDX+R13]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0C6:       83FA61           CMP EDX, 97\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0C9:       480F4456F9       CMOVEQ RDX, [RSI-7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0CE:       83FA51           CMP EDX, 81\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0D1:       0F84BF030000     JEQ L17\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0D7:       BF10000000       MOV EDI, 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 0DC:       FF1425B000B021   CALL QWORD PTR [#x21B000B0]     ; GENERIC--\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; .................. many lines omitted ................\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4B6: L24:  CC18             BREAK 24                        ; UNBOUND-SYMBOL-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4B8:       27               BYTE #X27                       ; \u0026#39;*S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4B9: L25:  6880000000       PUSH 128\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4BE:       FF14252800B021   CALL QWORD PTR [#x21B00028]     ; ALLOC-TRAMP-R11\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4C5:       E9FFFEFFFF       JMP L12\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4CA: L26:  6A10             PUSH 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4CC:       FF14252800B021   CALL QWORD PTR [#x21B00028]     ; ALLOC-TRAMP-R11\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e; 4D3:       EB94             JMP L14\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n(258 lines in total.)\u003c/p\u003e\n\u003cp\u003e\nMy assembler-fu is not strong, but I notice the \u003ccode class=\"verbatim\"\u003eGENERIC--\u003c/code\u003e and we do\nnot need generic functions: there are many opportunities here to\nintroduce type declarations.\u003c/p\u003e\n\u003cp\u003e\nAfter declaring to the compiler we want more speed and less\ntype-checking (\u003ccode class=\"verbatim\"\u003e(declaim (optimize (speed 3) (debug 0) (safety 0)))\u003c/code\u003e),\nlet\u0026#39;s declare our array to be type \u003ccode class=\"verbatim\"\u003efixnum\u003c/code\u003e (which on SBCL is an\ninteger from -4611686018427387904 to 4611686018427387903).\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defparameter *s* (make-array array-size\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              :element-type \u0026#39;fixnum))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Initialize array:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(loop\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   for y = 0 then (+ y (random 1000))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   for i below array-size\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   do (setf (elt *s* i) y))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(timing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (length\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (loop for x below (- array-size 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      if (\u0026lt; (- (elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (elt *s* x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      collect `(index ,x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      startval ,(elt *s* x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      endval   ,(elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      diff     ,(- (elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                   (elt *s* x))))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1964 MSEC... RESULT 2435)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1939 MSEC... RESULT 2435)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 2010 MSEC... RESULT 2435)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n… maybe a slight improvement. Let\u0026#39;s now type-hint where we can throughout the tight loop:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(timing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (length\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (loop for x below (- array-size 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      if (\u0026lt; (- (the fixnum (elt *s* (the fixnum (+ x 8))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (the fixnum (elt *s* (the fixnum x))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      collect `(index ,x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      startval ,(elt *s* x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      endval   ,(elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      diff     ,(- (elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                   (elt *s* x))))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1740 MSEC... RESULT 2435)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1738 MSEC... RESULT 2435)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1753 MSEC... RESULT 2435)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nA 10% or so improvement… not too bad.\u003c/p\u003e\n\u003cp\u003e\nAt this point I\u0026#39;m tempted to look at the macroexpansion of my \u003ccode class=\"verbatim\"\u003eloop\u003c/code\u003e\nexpression and see what it\u0026#39;s doing. For simplicity, I \u003ccode class=\"verbatim\"\u003ecollect\u003c/code\u003e just\nthe starting time index for times satisfying the trigger:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(macroexpand-1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(loop for x below (- array-size 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     if (\u0026lt; (- (the fixnum (elt *s* (the fixnum (+ x 8))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (the fixnum (elt *s* (the fixnum x))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     collect x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(block nil\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let ((#:loop-limit-711 (- array-size 8)) (x 0))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (declare (type (and number real) x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             (type (and number real) #:loop-limit-711))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (sb-loop::with-loop-list-collection-head (#:loop-list-head-712\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                              #:loop-list-tail-713)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (tagbody\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sb-loop::next-loop\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (when (\u0026gt;= x #:loop-limit-711) (go sb-loop::end-loop))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (if (\u0026lt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (- (the fixnum (elt *s* (the fixnum (+ x 8))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 (the fixnum (elt *s* (the fixnum x))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             (sb-loop::loop-collect-rplacd\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (#:loop-list-head-712 #:loop-list-tail-713) (list x)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (sb-loop::loop-desetq x (1+ x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (go sb-loop::next-loop)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sb-loop::end-loop\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (return-from nil\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           (sb-loop::loop-collect-answer #:loop-list-head-712))))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nI notice that \u003ccode class=\"verbatim\"\u003ex\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003e:loop-limit-711\u003c/code\u003e have an overly-general type declaration. I\u0026#39;m not sure how to type-hint \u003ccode class=\"verbatim\"\u003ex\u003c/code\u003e, but I can type-hint the upper bound:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(timing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (length\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (loop for x below (- (the fixnum array-size) 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      if (\u0026lt; (- (the fixnum (elt *s* (+ (the fixnum x) 8)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (the fixnum (elt *s* (the fixnum x))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      collect `(index ,x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      startval ,(elt *s* x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      endval   ,(elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      diff     ,(- (elt *s* (+ x 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                   (elt *s* x))))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1460 MSEC... RESULT 2513)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1455 MSEC... RESULT 2513)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(DURATION 1486 MSEC... RESULT 2513)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nAnother modest but significant improvement.\u003c/p\u003e\n\u003cp\u003e\nAt this point I reached for the SBCL profiler to see what I could\nlearn from it. Most of the processing time is spent in array\nlookups, which I don\u0026#39;t think we can avoid.\u003c/p\u003e\n\u003cp\u003e\nLet\u0026#39;s look at the assembler again. Since our trigger matches are rare,\nmost of our time is going to be spent in finding the events, rather\nthan in collecting the detailed results for the matches. If we switch\nback to using \u003ccode class=\"verbatim\"\u003ecollect x\u003c/code\u003e to avoid the extra assembly associated with\nbuilding \u003ccode class=\"verbatim\"\u003e`(index ,x startval ...)\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun trigger ()\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(loop for x below (- (the fixnum array-size) 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     if (\u0026lt; (- (the fixnum (elt *s* (+ (the fixnum x) 8)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (the fixnum (elt *s* (the fixnum x))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     collect x))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(disassemble \u0026#39;trigger)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; disassembly for TRIGGER\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Size: 448 bytes. Origin: #x22610EA0                         ; TRIGGER\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EA0:       498B4510         MOV RAX, [R13+16]              ; thread.binding-stack-pointer\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EA4:       488945F8         MOV [RBP-8], RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EA8:       488B05B1FFFFFF   MOV RAX, [RIP-79]              ; \u0026#39;ARRAY-SIZE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EAF:       8B70F5           MOV ESI, [RAX-11]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EB2:       4A8B342E         MOV RSI, [RSI+R13]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EB6:       83FE61           CMP ESI, 97\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EB9:       480F4470F9       CMOVEQ RSI, [RAX-7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EBE:       83FE51           CMP ESI, 81\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EC1:       0F8477010000     JEQ L11\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EC7:       40F6C601         TEST SIL, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0ECB:       0F8568010000     JNE L10\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0ED1:       48D1FE           SAR RSI, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0ED4:       4883EE08         SUB RSI, 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0ED8:       488975F0         MOV [RBP-16], RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EDC:       31F6             XOR ESI, ESI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EDE:       49896D28         MOV [R13+40], RBP              ; thread.pseudo-atomic-bits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EE2:       4D8B5D68         MOV R11, [R13+104]             ; thread.alloc-region\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EE6:       498D4310         LEA RAX, [R11+16]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EEA:       493B4570         CMP RAX, [R13+112]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EEE:       0F874D010000     JNBE L12\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EF4:       49894568         MOV [R13+104], RAX             ; thread.alloc-region\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EF8: L0:   498D4307         LEA RAX, [R11+7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0EFC:       49316D28         XOR [R13+40], RBP              ; thread.pseudo-atomic-bits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F00:       7402             JEQ L1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F02:       CC09             BREAK 9                        ; pending interrupt trap\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F04: L1:   C740F917001020   MOV DWORD PTR [RAX-7], #x20100017  ; NIL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F0B:       C7400117001020   MOV DWORD PTR [RAX+1], #x20100017  ; NIL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F12:       488945E8         MOV [RBP-24], RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F16:       488945E0         MOV [RBP-32], RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F1A:       E9BB000000       JMP L4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F1F:       90               NOP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F20: L2:   8B142524144A20   MOV EDX, [#x204A1424]          ; tls_index: *S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F27:       4A8B142A         MOV RDX, [RDX+R13]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F2B:       83FA61           CMP EDX, 97\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F2E:       480F44142528144A20 CMOVEQ RDX, [#x204A1428]     ; *S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F37:       83FA51           CMP EDX, 81\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F3A:       0F840F010000     JEQ L13\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F40:       488D7E10         LEA RDI, [RSI+16]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F44:       4883EC10         SUB RSP, 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F48:       488975D8         MOV [RBP-40], RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F4C:       B904000000       MOV ECX, 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F51:       48892C24         MOV [RSP], RBP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F55:       488BEC           MOV RBP, RSP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F58:       B862934F22       MOV EAX, #x224F9362            ; #\u0026lt;FDEFN ELT\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F5D:       FFD0             CALL RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F5F:       488B75D8         MOV RSI, [RBP-40]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F63:       F6C201           TEST DL, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F66:       0F85CA000000     JNE L9\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F6C:       4C8BC2           MOV R8, RDX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F6F:       49D1F8           SAR R8, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F72:       4C8945D0         MOV [RBP-48], R8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F76:       8B142524144A20   MOV EDX, [#x204A1424]          ; tls_index: *S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F7D:       4A8B142A         MOV RDX, [RDX+R13]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F81:       83FA61           CMP EDX, 97\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F84:       480F44142528144A20 CMOVEQ RDX, [#x204A1428]     ; *S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F8D:       83FA51           CMP EDX, 81\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F90:       0F84BC000000     JEQ L14\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F96:       488BFE           MOV RDI, RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F99:       4883EC10         SUB RSP, 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0F9D:       488975D8         MOV [RBP-40], RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FA1:       B904000000       MOV ECX, 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FA6:       48892C24         MOV [RSP], RBP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FAA:       488BEC           MOV RBP, RSP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FAD:       B862934F22       MOV EAX, #x224F9362            ; #\u0026lt;FDEFN ELT\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FB2:       FFD0             CALL RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FB4:       4C8B45D0         MOV R8, [RBP-48]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FB8:       488B75D8         MOV RSI, [RBP-40]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FBC:       F6C201           TEST DL, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FBF:       7572             JNE L8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FC1:       488BC2           MOV RAX, RDX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FC4:       48D1F8           SAR RAX, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FC7:       498BD0           MOV RDX, R8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FCA:       4829C2           SUB RDX, RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FCD:       4881FAE8030000   CMP RDX, 1000\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FD4:       7C22             JL L5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FD6: L3:   4883C602         ADD RSI, 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FDA: L4:   488BC6           MOV RAX, RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FDD:       48D1F8           SAR RAX, 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FE0:       483B45F0         CMP RAX, [RBP-16]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FE4:       0F8C36FFFFFF     JL L2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FEA:       488B45E8         MOV RAX, [RBP-24]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FEE:       488B5001         MOV RDX, [RAX+1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FF2:       488BE5           MOV RSP, RBP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FF5:       F8               CLC\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FF6:       5D               POP RBP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FF7:       C3               RET\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FF8: L5:   4C8B45E0         MOV R8, [RBP-32]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 0FFC:       49896D28         MOV [R13+40], RBP              ; thread.pseudo-atomic-bits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1000:       4D8B5D68         MOV R11, [R13+104]             ; thread.alloc-region\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1004:       498D4310         LEA RAX, [R11+16]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1008:       493B4570         CMP RAX, [R13+112]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 100C:       7747             JNBE L15\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 100E:       49894568         MOV [R13+104], RAX             ; thread.alloc-region\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1012: L6:   498D4307         LEA RAX, [R11+7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1016:       49316D28         XOR [R13+40], RBP              ; thread.pseudo-atomic-bits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 101A:       7402             JEQ L7\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 101C:       CC09             BREAK 9                        ; pending interrupt trap\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 101E: L7:   488970F9         MOV [RAX-7], RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1022:       C7400117001020   MOV DWORD PTR [RAX+1], #x20100017  ; NIL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1029:       488945E0         MOV [RBP-32], RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 102D:       49894001         MOV [R8+1], RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1031:       EBA3             JMP L3\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1033: L8:   CC48             BREAK 72                       ; OBJECT-NOT-FIXNUM-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1035:       08               BYTE #X08                      ; RDX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1036: L9:   CC48             BREAK 72                       ; OBJECT-NOT-FIXNUM-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1038:       08               BYTE #X08                      ; RDX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1039: L10:  CC48             BREAK 72                       ; OBJECT-NOT-FIXNUM-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 103B:       18               BYTE #X18                      ; RSI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 103C:       CC10             BREAK 16                       ; Invalid argument count trap\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 103E: L11:  CC18             BREAK 24                       ; UNBOUND-SYMBOL-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1040:       00               BYTE #X00                      ; RAX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1041: L12:  6A10             PUSH 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1043:       FF14252800B021   CALL QWORD PTR [#x21B00028]    ; ALLOC-TRAMP-R11\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 104A:       E9A9FEFFFF       JMP L0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 104F: L13:  CC18             BREAK 24                       ; UNBOUND-SYMBOL-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1051:       27               BYTE #X27                      ; \u0026#39;*S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1052: L14:  CC18             BREAK 24                       ; UNBOUND-SYMBOL-ERROR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1054:       27               BYTE #X27                      ; \u0026#39;*S*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1055: L15:  6A10             PUSH 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 1057:       FF14252800B021   CALL QWORD PTR [#x21B00028]    ; ALLOC-TRAMP-R11\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; 105E:       EBB2             JMP L6\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n… this is almost a manageable amount of assembler, though I don\u0026#39;t\nclaim to understand all of it. If I needed more speed, though, I could\ndig into the assembler as a way to try and ferret out even more\nefficiency.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-5\"\u003e\nSummary\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nWe went from our initial POC in very functional-looking Clojure,\nrunning at 250 kHz, to optimized Common Lisp running at 100,000,000 /\n1467 msec = 68.2 MHz, which is nearly 300x faster.\u003c/p\u003e\n\u003cp\u003e\nChecking our intuition about how fast this really is: my processor is\n2.7 GHz, and our processing rate is 68.2 MHz, meaning we\u0026#39;re spending\nabout 40 clock ticks per event, which doesn\u0026#39;t strike me as too bad.\u003c/p\u003e\n\u003cp\u003e\nIn the end, we made the following changes to our initial attempt:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSeparated out the initial event time-sequence generation as a\nseparate step;\u003c/li\u003e\n\u003cli\u003eRewrote the algorithm as a single loop;\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003edeclaim\u003c/code\u003e\u0026#39;ed optimizations to the compiler;\u003c/li\u003e\n\u003cli\u003eType-hinted the input array, the variables used in the time\ndifference calculation, and the loop upper bound.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe also touched on profiling (which didn\u0026#39;t provide much benefit this\ntime, but can be very useful generally), and showed how to inspect the\ngenerated assembler code.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-6\"\u003e\nConclusion\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nCommon Lisp can be made pretty fast!  I should write a C-language\nversion of this toy problem to compare.  The final code is not nearly\nas beautiful as the original, but without too much effort we got much\nfaster code.  I\u0026#39;ll conclude with this line from ANSI Common Lisp:\n\u0026#34;Lisp is really two languages: a language for writing fast programs\nand a language for writing programs fast.\u0026#34; It seems quite powerful to\nme to have both of these on hand.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr class=\"footnotes-separatator\"/\u003e\n\u003cdiv class=\"footnote-definitions\"\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-1\"\u003e\u003ca href=\"#footnote-reference-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003eReasonable people can disagree on the relative expressiveness of languages; for me, Lisps win on expressiveness because I can bend the language to my will using macros in a way that I cannot with non-Lisps.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-2\"\u003e\u003ca href=\"#footnote-reference-2\"\u003e2\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003eSee Paul Graham, \u003cem\u003eOn Lisp\u003c/em\u003e p. vii\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-3\"\u003e\u003ca href=\"#footnote-reference-3\"\u003e3\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003ePaul Graham, ANSI Common Lisp\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-4\"\u003e\u003ca href=\"#footnote-reference-4\"\u003e4\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003ePeter Norvig, Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-5\"\u003e\u003ca href=\"#footnote-reference-5\"\u003e5\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003eThe original Clojure code reported the entire sequence of eight times for each triggered event, but we omit that level of detail for clarity. Since the triggered clusters are rare, this doesn\u0026#39;t significantly impact the timing measurements.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/another-migration/\"\u003eMigrating, Again\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/lisp-projects/\"\u003eCommon Lisp How-Tos\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2019-09-25T00:00:00Z",
  "Author": "John Jacobsen"
}