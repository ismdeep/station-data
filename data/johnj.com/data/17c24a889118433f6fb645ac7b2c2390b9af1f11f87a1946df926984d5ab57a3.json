{
  "Source": "johnj.com",
  "Title": "In Praise of Small Shell Scripts",
  "Link": "http://johnj.com/posts/in-praise-of-small-scripts/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eIn Praise of Small Shell Scripts\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/bash\"\u003e\u003cspan class=\"bash-tag\"\u003ebash\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2024-01-18T00:00:00Z\"\u003e\n      January 18, 2024\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/e-paper-rpi-display/\"\u003eMaking A Tiny E-Paper Status Display for the Raspberry Pi Zero\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/2024-blogging-intentions/\"\u003e2024 Blogging Intentions\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/tracks.png\"\u003e\u003cimg class=\"resize\" src=\"/tracks_hu740d5eb914adc5f4c0362909edc7ec13_1302496_700x0_resize_box_3.png\" style=\"width:400px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\nOver the decades I\u0026#39;ve relied heavily on \u003ccode class=\"verbatim\"\u003ebash\u003c/code\u003e aliases and functions to\nautomate common tasks, resulting in a \u003ccode class=\"verbatim\"\u003e.bash_profile\u003c/code\u003e that\u0026#39;s over a\nthousand lines long.  But lately I find myself writing many small\nscripts instead.\u003c/p\u003e\n\u003cp\u003e\nThese tiny scripts, which live in a directory on my\n\u003ccode class=\"verbatim\"\u003e$PATH\u003c/code\u003e, have several advantages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThey compose nicely, in line with \u003ca href=\"https://en.wikipedia.org/wiki/Unix_philosophy\"\u003ethe Unix philosophy\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThey are reasonably portable.  If it works for me on Linux,\nit\u0026#39;ll often work on my Mac, and \u003cem\u003evice versa\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eThey start quickly and are often as fast as something you\u0026#39;d write in\nPython, Ruby, etc.\u003c/li\u003e\n\u003cli\u003eTheir file creation / modification times are distinct and provide a\nhistory of what you worked on, when; by contrast, everything in\n\u003ccode class=\"verbatim\"\u003e.bash_profile\u003c/code\u003e is muddied together.\u003c/li\u003e\n\u003cli\u003eThey run in subprocesses without needing to get your\n\u003ccode class=\"verbatim\"\u003e.bash_profile\u003c/code\u003e involved (helpful for \u003ca href=\"https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-shell.html\"\u003eOrg Babel\u003c/a\u003e or any situation\nwhere you need to run your script from another program).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven something as trivial as an alias might get its own shell script,\nif I can give it a name that\u0026#39;s easier to remember than the original\nprogram name or combination of arguments.  Bash is an awkward language\nfor doing complex things, but expressive enough for simple tasks.  And\nChatGPT or other AI tools can often write simple scripts correctly for\nyou with little or no modification.\u003c/p\u003e\n\u003cp\u003e\nHere are some examples of small scripts I\u0026#39;ve been using recently:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003eghjobs\u003c/code\u003e : Show status of my active CI jobs on GitHub (wrapper around\n\u003ccode class=\"verbatim\"\u003egh\u003c/code\u003e tool); avoids having to go to the Web site, usable inside\n\u003ccode class=\"verbatim\"\u003ewatch\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003einprog\u003c/code\u003e / \u003ccode class=\"verbatim\"\u003eondeck\u003c/code\u003e : Show GitHub issues tagged as \u0026#34;in progress\u0026#34; or\n\u0026#34;on deck,\u0026#34; across all my \u0026#34;work\u0026#34; repositories;\u003c/li\u003e\n\u003cli\u003e(several programs) : Run one of many different build variants on the\nembedded system I\u0026#39;m working on (build for Mac, build for target\nhardware, build with fast tests, build all variants prior to pushing\ncode, etc.);\u003c/li\u003e\n\u003cli\u003e(several programs) : Select random figurative references for\ninspiration or to draw from (there are many variations of this one);\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003ebashscript\u003c/code\u003e : Create a new \u003ccode class=\"verbatim\"\u003ebash\u003c/code\u003e script in the appropriate place\n(on \u003ccode class=\"verbatim\"\u003e$PATH\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis last one is simple and helpful enough to show here:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003escript_name=$1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u0026lt;\u0026lt; EOF \u0026gt; ~/bin/$script_name\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eecho \u0026#34;OK\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEOF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003echmod +x ~/bin/$script_name\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nBash is boring and old (I still have \u003ccode class=\"verbatim\"\u003ecsh\u003c/code\u003e scripts from more than 30\nyears ago; \u003ccode class=\"verbatim\"\u003ecsh\u003c/code\u003e is \u003ca href=\"https://developer.ibm.com/tutorials/l-linux-shells/\"\u003ea close cousin\u003c/a\u003e of \u003ccode class=\"verbatim\"\u003ebash\u003c/code\u003e).  It\u0026#39;s also everywhere\nâ€“ on my Mac, inside my Docker containers, on my Raspberry Pi\u0026#39;s, on my\nclient\u0026#39;s servers, and on the cloud VMs I work on.\u003c/p\u003e\n\u003cp\u003e\nThe \u0026#34;many small scripts\u0026#34; approach is complementary to how I use\n\u003ccode class=\"verbatim\"\u003emake\u003c/code\u003e, which I \u003ca href=\"http://johnj.com/posts/practices/#using-a-common-build-tool\"\u003ewrote about previously\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nFinally, here\u0026#39;s the small script I wrote yesterday to hopefully \u003ca href=\"http://johnj.com/posts/2024-blogging-intentions/\"\u003eget me writing\nmore often\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBLOGHOME=${BLOGHOME:-$HOME/Docs/websites/johnj22}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecd $BLOGHOME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epwd\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eecho -n \u0026#34;Title for post: \u0026#34;; read title\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epostdate=$(date \u0026#39;+%Y-%m-%d\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eecho $title $postdate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e# Turn the title lower case/kebab case, remove extra characters.  Thanks, ChatGPT!\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etitle_kebab=$(echo \u0026#34;$title\u0026#34; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              tr -s \u0026#39;[:space:]\u0026#39; \u0026#39;-\u0026#39; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              sed \u0026#39;s/[^a-z0-9-]//g; s/^-//; s/-$//\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eecho -n \u0026#34;$title\u0026#34; | pbcopy\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efile=\u0026#34;content/posts/$title_kebab\u0026#34;\u0026#34;.org\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eif [ ! -e $file ]; then\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    cat \u0026lt;\u0026lt;EOF \u0026gt; $file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etitle: $title\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edate: $postdate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edraft: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etags:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e---\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e# Org Mode stuff in case I export the document on its own without using Hugo:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e#+OPTIONS: toc:nil num:nil\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEOF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eae $file  # `ae` is another small script: loads the resulting file in Emacs.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nTyping \u0026#34;newpost\u0026#34; asks me for a title and pops me in my editor with all the\nboilerplate needed to get me on my way.  Nice and easy.\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/e-paper-rpi-display/\"\u003eMaking A Tiny E-Paper Status Display for the Raspberry Pi Zero\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/2024-blogging-intentions/\"\u003e2024 Blogging Intentions\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2024-01-18T00:00:00Z",
  "Author": "John Jacobsen"
}