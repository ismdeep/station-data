{
  "Source": "johnj.com",
  "Title": "(Yet Another) Lisp In Go",
  "Link": "http://johnj.com/posts/l1/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003e(Yet Another) Lisp In Go\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/l1\"\u003e\u003cspan class=\"l1-tag\"\u003el1\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2022-03-27T00:00:00Z\"\u003e\n      March 27, 2022\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/tests-by-example/\"\u003eTests by Example in Clojure and Common Lisp\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/another-migration/\"\u003eMigrating, Again\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/l1.jpg\"\u003e\u003cimg class=\"resize\" src=\"/l1_huf7f11b13a3e48adcf8255b6a4ba1e0f5_1592483_700x0_resize_q75_box.jpg\" style=\"width:500px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\nFor the past month I\u0026#39;ve been spending some free time writing another\nLisp implementation, this time in Go.  \u003ca href=\"/posts/scheme-in-python/\"\u003eMy previous attempt\u003c/a\u003e was a\nsubset of Scheme made in preparation for a class on the classic\n\u003ca href=\"https://mitpress.mit.edu/sites/default/files/sicp/index.html\"\u003eStructure and Interpretation of Computer Programs\u003c/a\u003e.  That project\nwas great fun and I learned a lot.\u003c/p\u003e\n\u003cp\u003e\nI started learning Go late last year and began thinking about writing\nanother Lisp.  Go has garbage collection, a feature that has long\nbeen an essential part of most Lisps\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-1\" href=\"#footnote-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\nGetting GC essentially for free would save a lot of time and effort.\u003c/p\u003e\n\u003cp\u003e\nGo is also extremely fast. For applications where startup performance is\nnot an issue, I\u0026#39;m pretty happy with Clojure most of the time.  But\nworking with Common Lisp in recent years, and Go more recently, has\nspoiled me and made me hungry for more performance, especially for\nshort-running command-line utilities.\u003c/p\u003e\n\u003cp\u003e\nThere are obviously other Lisps written in Go already, including\n\u003ca href=\"https://github.com/candid82/joker\"\u003eJoker\u003c/a\u003e, a Clojure interpreter and linter.  But I wasn\u0026#39;t particularly\ninterested with implementing a particular Lisp dialect; rather, I\nwanted to try to implement a language core that one could extend in a\nvariety of different directions, including \u003ca href=\"http://www.paulgraham.com/rootsoflisp.html\"\u003eimplementing the language\nin itself\u003c/a\u003e.  Other possible directions include graphics programming,\ntext-based games, and scripting. The working name of this Lisp is \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e\n(\u0026#34;el-one\u0026#34;), hinting at a possible series of small, experimental Lisps.\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nFeatures\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nHere is a summary of what\u0026#39;s implemented \u0026amp; planned:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003el1 has\u003c/th\u003e\n\u003cth\u003edoesn\u0026#39;t have\u003c/th\u003e\n\u003cth\u003ewill have\u003c/th\u003e\n\u003cth\u003emight get\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eintegers (\u003ca href=\"https://stackoverflow.com/questions/17564335/golang-math-big-what-is-the-max-value-of-big-int\"\u003eessentially unlimited size\u003c/a\u003e)\u003c/td\u003e\n\u003ctd\u003ekeywords\u003c/td\u003e\n\u003ctd\u003emacros\u003c/td\u003e\n\u003ctd\u003ecurses\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecomments (\u003ccode class=\"verbatim\"\u003e;; ....\u003c/code\u003e)\u003c/td\u003e\n\u003ctd\u003emaps\u003c/td\u003e\n\u003ctd\u003esyntax quote\u003c/td\u003e\n\u003ctd\u003egraphics\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eatoms\u003c/td\u003e\n\u003ctd\u003estrings\u003c/td\u003e\n\u003ctd\u003ereader macros (`, \u0026#39;, â€¦)\u003c/td\u003e\n\u003ctd\u003esubprocess / shells\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003elists\u003c/td\u003e\n\u003ctd\u003enamespaces\u003c/td\u003e\n\u003ctd\u003eREPL / editor integration\u003c/td\u003e\n\u003ctd\u003ebig floats\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4 special forms: \u003ccode class=\"verbatim\"\u003econd\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003edef\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003elambda\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003equote\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eexceptions\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003elet\u003c/code\u003e (as a macro)\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003eerror\u003c/code\u003e equiv.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e16 built-in functions\u003c/td\u003e\n\u003ctd\u003eloops\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003edefun\u003c/code\u003e / \u003ccode class=\"verbatim\"\u003edefn\u003c/code\u003e (as a macro)\u003c/td\u003e\n\u003ctd\u003etail call optimization\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erecursion\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eclosures\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003ebyte code compilation/interpretation\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nPerformance\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nThe \u003ca href=\"https://github.com/eigenhombre/l1/\"\u003ecurrent implementation is on GitHub\u003c/a\u003e.  Its speed surprises me a bit.\u003c/p\u003e\n\u003cp\u003e\nConsider the following program in \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e, which computes a factorial:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; fact.l1: Return the factorial of `n`:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def fact\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (lambda (n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (cond ((eq 0 n) 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             (t (* n (fact (- n 1)))))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(print (fact 100))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eoutputting\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e933262154439441526816992388562667004907159682643816214685929638\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e952175999932299156089414639761565182862536979208272237582511852\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e10916864000000000000000000000000\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nIts equivalent in Clojure (or its nimble alternative implementations,\nBabashka or Joker) can be written as follows:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; fact.clj: Return the factorial of `n`:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def fact\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (fn [n]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (cond (= 0 n) 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          :else (*\u0026#39; n (fact (- n 1))))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(println (fact 100))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eâ€¦ and in my Python Scheme implementation as\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; fact.scm\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(define (fact n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (if (= n 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (* n (fact (- n 1)))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(display (fact 100))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nI also did the equivalent for Common Lisp.  I used \u003ca href=\"https://github.com/eigenhombre/oatmeal/\"\u003eOatmeal\u003c/a\u003e to make a\nskeleton Lisp project and used that to create an executable program\ncalled \u003ccode class=\"verbatim\"\u003efact\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nThe execution times break down thusly:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eLanguage\u003c/th\u003e\n\u003cth\u003eRunning It\u003c/th\u003e\n\u003cth class=\"align-right\"\u003eExecution Time (ms)\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eClojure\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003eclojure -M fact.clj\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e1729\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBabashka\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003ebb fact.clj\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e200\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003esmallscheme\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003escheme.py fact.scm\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e120\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCommon Lisp\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003e./fact\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e68\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eJoker\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003ejoker fact.clj\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e59\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003el1 fact.l1\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e8\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\nThis is a very limited benchmark!  However, it does give a flavor for\nstart-up times.  Note that \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e is a tree-walking interpreter; I\nwonder what speed might be possible if implemented with a byte code\ninterpreter.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-3\"\u003e\nLexing\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nI started the journey by writing the lexer.  A post on Hacker News led me\nto \u003ca href=\"https://www.youtube.com/watch?v=HxaD_trXwRE\"\u003ethis video\u003c/a\u003e where Rob Pike, of the core Go language team, describes\nan elegant design for a lexer used in the Go templating library.  I\nwas able to extract the relevant bits into a fairly \u003ca href=\"https://github.com/eigenhombre/lexutil/\"\u003egeneral-purpose\nlibrary\u003c/a\u003e that I then used for this Lisp with \u003ca href=\"https://github.com/eigenhombre/l1/blob/master/lex.go\"\u003erelatively little code\u003c/a\u003e (of\ncourse, one shouldn\u0026#39;t expect too much code when lexing a Lisp, since\nthere is not much syntax).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-4\"\u003e\nFun With Atoms and Lists\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nYou may have noticed the lack of character strings in the feature\ntable, above.  \u003ca href=\"https://github.com/norvig/paip-lisp\"\u003eMany interesting Lisp programs\u003c/a\u003e don\u0026#39;t use traditional\nstrings (arrays of characters encoded as bytes), and I am curious to\nsee what can be done strictly without them, though I could see adding\nthem at some point.\u003c/p\u003e\n\u003cp\u003e\nWithout strings, one will probably want to manipulate atoms in various\nways.  As a start, \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e introduces the notion of \u0026#34;splitting\u0026#34; (creating\na list from an atom or number) and \u0026#34;fusing\u0026#34; (joining such a list back\ntogether again):\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; (split (quote greenspun))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(g r e e n s p u n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; (split 1395871)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(1 3 9 5 8 7 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; (fuse (quote (1 2 3 4 5)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e12345\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; (randigits 10)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(6 1 5 4 4 8 8 3 0 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; (randigits 10)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(2 7 5 4 7 9 1 6 6 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; (fuse (randigits 1000))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e797522288353215977146173184650097900747324790200919947108552266\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e896559408664559755127840959435738695979408193086120089317097735\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e733247509700258597497415541421859295990446300938230591278544826\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e160148998280910399112793807480556810085222871423786728939605143\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e312291343715625109027024093962060686621901049553518883581864852\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e832439160531395519838325036388642484613231265974048363263732041\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e737675913066537856875008449087672272329301144164887429770199070\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e521721230755123684155760268379043481645391533460833091119801604\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e531684362848585264816725347753593965869286499060052823295397069\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e598147167103689429912992818647290966641807288375144076084638850\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e885562168375457674623070776900707693203757775691854059277861315\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e130019383408298242102129643369889134587749005021251080452606062\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e217504938911721968545635428643266561957454859338694605115003758\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e001930119736513921576952435852918640253473323143920762789645830\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e700672642264667728965761815048634636071828415705273836146286590\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e4892309215088593977646507232497245814663081971549675531\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-5\"\u003e\nTesting\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nAs with previous Lisps I\u0026#39;ve worked on, most of the tests were\nrepresented in Go code as strings containing \u003ca href=\"https://github.com/eigenhombre/l1/blob/master/eval_test.go\"\u003eLisp code and the\nexpressions they evaluate to\u003c/a\u003e.  Here are some examples, taken more or\nless at random.\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        // `split` function\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(split)\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;expects a single argument\u0026#34;))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(split 1)\u0026#34;, \u0026#34;(1)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(split -1)\u0026#34;, \u0026#34;(-1)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(split -321)\u0026#34;, \u0026#34;(-3 2 1)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(split (quote a))\u0026#34;, \u0026#34;(a)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(split (quote (a b c)))\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;expects an atom or a number\u0026#34;))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(split (quote greenspun))\u0026#34;, \u0026#34;(g r e e n s p u n)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(split (* 12345 67890))\u0026#34;, \u0026#34;(8 3 8 1 0 2 0 5 0)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(len (split (* 99999 99999 99999)))\u0026#34;, \u0026#34;15\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(split (quote greenspun))\u0026#34;, \u0026#34;(g r e e n s p u n)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(split (* 12345 67890))\u0026#34;, \u0026#34;(8 3 8 1 0 2 0 5 0)\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {Cases(S(\u0026#34;(fuse (quote (1 2)))\u0026#34;, \u0026#34;12\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(+ 2 (fuse (quote (1 2 3))))\u0026#34;, \u0026#34;125\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(fuse (split 1295807125987))\u0026#34;, \u0026#34;1295807125987\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;(len (randigits 10))\u0026#34;, \u0026#34;10\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(S(\u0026#34;((lambda (x) (+ 1 x)) 1)\u0026#34;, \u0026#34;2\u0026#34;, OK))},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        {ECases(\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                S(\u0026#34;(def incrementer (lambda (n) (lambda (x) (+ x n))))\u0026#34;, \u0026#34;\u0026lt;lambda(n)\u0026gt;\u0026#34;, OK),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                S(\u0026#34;(def inc (incrementer 1))\u0026#34;, \u0026#34;\u0026lt;lambda(x)\u0026gt;\u0026#34;, OK),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                S(\u0026#34;(inc 5)\u0026#34;, \u0026#34;6\u0026#34;, OK),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                S(\u0026#34;(def add2 (incrementer 2))\u0026#34;, \u0026#34;\u0026lt;lambda(x)\u0026gt;\u0026#34;, OK),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                S(\u0026#34;(add2 5)\u0026#34;, \u0026#34;7\u0026#34;, OK),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        )},\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nHere \u003ccode class=\"verbatim\"\u003eCases\u003c/code\u003e is a utility function that create a local environment (a\npossibly nested set of variable bindings) and evaluates one or more\nexpressions in that environment; \u003ccode class=\"verbatim\"\u003eECases\u003c/code\u003e (\u003ccode class=\"verbatim\"\u003eE\u003c/code\u003e for Exemplary) is the\nsame, but saves its test cases in an \u003ca href=\"https://github.com/eigenhombre/l1/blob/master/examples.txt\"\u003e\u003ccode class=\"verbatim\"\u003eexamples.txt\u003c/code\u003e\u003c/a\u003e file which stores\na reduced set of illustrative cases, e.g. for adding to the README.\n\u003ccode class=\"verbatim\"\u003eS\u003c/code\u003e is a function which takes an expression to evaluate, the result\nthat should obtain, or an error message fragment which is expected if\nthe expression should fail.\u003c/p\u003e\n\u003cp\u003e\nThis seems to be a good way to test a new language\nimplementation, though I plan to implement some generative / \u0026#34;fuzzing\u0026#34;\ntests as well, since I doubt all the bugs have been found yet.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-6\"\u003e\nFurther Work\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nMacros are next.  I\u0026#39;m pretty sure I know how I want to do them, and\nfor me the power of macros is the whole point of Lisp, or at least a\nbig part of the point.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-7\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-7\"\u003e\nA Final Note on Performance, and Conclusion\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-7\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nTo return to the performance discussion, above: a reasonable person\nmight object that \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e is so lean on features, that it\u0026#39;s not at all\nsurprising that it starts fast.  Clojure, on the other hand, leverages\nthe JVM, which has been tuned for decades for speed in long-running\nprocesses, and also provides a thoughtful and comprehensive language\ndesign that does many things no hobby language could easily support.\u003c/p\u003e\n\u003cp\u003e\nThat being said, one thing I am excited about with this project is\nthis: pretty much anything I can do in Go (which is very many things)\ncan be added to my Lisp without \u003cem\u003etoo\u003c/em\u003e much effort.  Conversely, to add\nfeatures to a Common Lisp or Clojure implementation would be very\ndifficult indeed.  Building a small language core that you can extend\nin a variety of directions is a fun, if not necessarily entirely\npractical, way to go.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr class=\"footnotes-separatator\"/\u003e\n\u003cdiv class=\"footnote-definitions\"\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-1\"\u003e\u003ca href=\"#footnote-reference-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003eI met a speaker at LambdaJam 2015 who used his own Lisp for music performance. It was not garbage-collected, for real-time performance.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/tests-by-example/\"\u003eTests by Example in Clojure and Common Lisp\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/another-migration/\"\u003eMigrating, Again\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2022-03-27T00:00:00Z",
  "Author": "John Jacobsen"
}