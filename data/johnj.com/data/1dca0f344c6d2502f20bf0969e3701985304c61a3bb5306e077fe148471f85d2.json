{
  "Source": "johnj.com",
  "Title": "Validating the Genome Decoder",
  "Link": "http://johnj.com/posts/validating-the-genome-decoder/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eValidating the Genome Decoder\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/genomics\"\u003e\u003cspan class=\"genomics-tag\"\u003egenomics\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2013-07-07T00:00:00Z\"\u003e\n      July 7, 2013\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/getting-our-hands-dirty/\"\u003eGetting Our Hands Dirty (with the Human Genome)\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/a-two-bit-decoder/\"\u003eA Two Bit Decoder\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cp\u003e\nToday we’ll validate the genome decoder \u003ca href=\"/posts/a-two-bit-decoder\"\u003ewe described yesterday\u003c/a\u003e, once\nagain with our friend the yeast Saccharomyces cerevisiae (you may want\nto enjoy a slice of freshly-baked bread and a stein of Pilsner with\nthis post).\u003c/p\u003e\n\u003cp\u003e\nWe are aided in this case by the availability of the SacCer3 genome in\nboth 2bit and FASTA formats. We can get \u003ca href=\"https://hgdownload.soe.ucsc.edu/goldenPath/sacCer3/chromosomes/\"\u003ethe FASTA version\u003c/a\u003e in the same\nplace \u003ca href=\"https://hgdownload.soe.ucsc.edu/goldenPath/sacCer3/chromosomes/\"\u003ewe got the 2bit file\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir /tmp/sacCer3_fasta\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecd /tmp/sacCer3_fasta\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewget http://hgdownload-test.cse.ucsc.edu/goldenPath/sacCer3/bigZips/\\\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003echromFa.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etar xvzf chromFa.tar.gz\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThere is one FASTA file per sequence, starting something like this:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt;chrI\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCCACACCACACCCACACACCCACACACCACACCACACACCACACCACACC\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCACACACACACATCCTAACACTACCCTAACACAGCCCTAATCTAACCCTG\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGCCAACCTGTCTCTCAACTTACCCTCCATTACCCTGCCTCCACTCGTTAC\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCCTGTCCCATTCAACCATACCACTCCGAACCACCATCCATCCCTCTACTT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eACTACCACTCACCCACCGTTACCCTCCAATTACCCATATCCAACCCACTG\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCCACTTACCCTACCATTACCCTACCATCCACCATGACCTACTCACCATAC\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nBack in the REPL, we can now spit out our own copy in the same format\n(carrying over \u003ccode class=\"verbatim\"\u003eyeast\u003c/code\u003e and other functions and vars from the previous\npost).\u003c/p\u003e\n\u003cp\u003e\nFirst we need a new directory for the FASTA files we’ll generate:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(.mkdir (clojure.java.io/file \u0026#34;/tmp/decoded\u0026#34;))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThen we convert the keywords in our sequence to strings:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn genome-str\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Convert e.g. [:A :G :T :C] to \\\u0026#34;AGTC\\\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (-\u0026gt;\u0026gt; s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (map name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (apply str)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nA simple function will spit out the files, given a seq:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn write-seq\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Write a (potentially very long) sequence of lines to a text file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [filename s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (with-open [wrt (clojure.java.io/writer filename)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (doseq [x s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.write wrt (str x \u0026#34;\\n\u0026#34;)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nAnd now for the actual converter:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(doseq [{:keys [name dna-offset dna-size]} (sequence-headers yeast)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [fname (str \u0026#34;/tmp/decoded/\u0026#34; name \u0026#34;.fa\u0026#34;)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (write-seq fname\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (cons (str \u0026#34;\u0026gt;\u0026#34; name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     (-\u0026gt;\u0026gt; (genome-sequence yeast dna-offset dna-size)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          (partition-all 50)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          (map genome-str))))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nDid it work?\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecd /tmp/sacCer3_fasta\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efor f in *.fa; do diff $f /tmp/decoded/$f; done\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nNo output – it succeeded! This builds more confidence that we didn’t\nscrew anything up in the decoder. (There are also a few other\nhard-coded unit tests in \u003ccode class=\"verbatim\"\u003etest_core.clj\u003c/code\u003e.)\u003c/p\u003e\n\u003cp\u003e\nComparing file sizes, the FASTA files are about 4 times larger than\nthe original 2bit file. If you tar and compress both versions, the\nFASTA files are still about 30% larger. It is left as as an exercise\nto the reader (with some spare hard disk) to do the same comparison\nwith the human genome. (Though larger, the FASTA files would clearly\nbe simpler to work with, and these days 4 GB isn’t too terribly much\ndata; nevertheless, we’ll continue to use the 2bit file and decoder\nfor our explorations.)\u003c/p\u003e\n\u003cp\u003e\nNow we are ready to begin playing with the actual data – \u003ca href=\"/posts/getting-our-hands-dirty\"\u003estarting in\nthe next post\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/getting-our-hands-dirty/\"\u003eGetting Our Hands Dirty (with the Human Genome)\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/a-two-bit-decoder/\"\u003eA Two Bit Decoder\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2013-07-07T00:00:00Z",
  "Author": "John Jacobsen"
}