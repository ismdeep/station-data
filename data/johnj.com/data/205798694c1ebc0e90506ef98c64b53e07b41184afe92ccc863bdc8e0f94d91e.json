{
  "Source": "johnj.com",
  "Title": "Common Lisp How-Tos",
  "Link": "http://johnj.com/posts/lisp-projects/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eCommon Lisp How-Tos\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2019-09-15T00:00:00Z\"\u003e\n      September 15, 2019\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/from-elegance-to-speed/\"\u003eFrom Elegance to Speed\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/journaling-procedure/\"\u003eA Daily Journal in Org Mode\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nIntro\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/lisp-sticks.jpeg\"\u003e\u003cimg class=\"resize\" src=\"/lisp-sticks_huae66a04b5bd3d3864b13a2c14b435ef7_1361741_700x0_resize_q75_box.jpeg\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\n\u003cem\u003eI\u0026#39;ve been writing this post as I go, and you may still see changes if you check back from time to time.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\nThis post is for writing about things I\u0026#39;m figuring out, and for\nkeeping notes on what I want to figure out next, as I get ramped up on\nCommon Lisp. When I\u0026#39;m done there will hopefully be stuff here other\npeople can use.\u003c/p\u003e\n\u003cp\u003e\nThere\u0026#39;s a lot to love and admire about Common Lisp, but the language\nhas some pointy bits that can at times make Clojure look friendly.\nWith so many things to sort out I\u0026#39;m going to try to keep a few notes\ngoing forward just to keep it all organized.  Caveat emptor, YMMV, USE\nAT YOUR OWN RISK, etc., etc.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nLessons Learned So Far\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-3\"\u003e\nHow Do I Set Up Common Lisp on a Mac?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/eigenhombre/mac-sbcl-quicklisp-install\"\u003eI made a repo\u003c/a\u003e to automate how I set up a fresh SBCL install on a Mac,\nincluding Quicklisp. This gets me from zero to a working Emacs REPL\nsystem fairly quickly.\u003c/p\u003e\n\u003cp\u003e\nNote that I also set a \u003ccode class=\"verbatim\"\u003eLISP_HOME\u003c/code\u003e environment variable in my\n\u003ccode class=\"verbatim\"\u003e.bash_profile\u003c/code\u003e which I use in the examples which follow.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-4\"\u003e\nHow Do I Get Environment Variables from Lisp?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nFrom the \u003ca href=\"https://lispcookbook.github.io/cl-cookbook/os.html\"\u003eCommon Lisp Cookbook\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(uiop:getenv \u0026#34;HOME\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-5\"\u003e\nHow Do I Quickly Create a New Project?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\n(There is \u003ca href=\"https://lispmethods.com/libraries.html\"\u003ea nice writeup\u003c/a\u003e on how Lisp projects are organized.)\u003c/p\u003e\n\u003cp\u003e\nFirst, it seems it\u0026#39;s best to pick a standard place to put your Lisp\nprojects. I have a deep directory tree on my filesystem so would\nprefer to set that path as an environment variable; this makes the\nsetup easy to port to another computer.\u003c/p\u003e\n\u003cp\u003e\nI made this \u003ccode class=\"verbatim\"\u003ebash\u003c/code\u003e script, \u003ccode class=\"verbatim\"\u003elisplib\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprojname=${1?}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esbcl --non-interactive  \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     --disable-debugger \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     --eval \u0026#39;(ql:quickload \u0026#34;cl-project\u0026#34;)\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     --eval \u0026#39;(ql:quickload \u0026#34;cl-utilities\u0026#34;)\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     --eval \u0026#39;(let* ((projname \u0026#34;\u0026#39;$projname\u0026#39;\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    (home (sb-unix::posix-getenv \u0026#34;LISP_HOME\u0026#34;))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    (projpath (concatenate \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;string home \u0026#34;/\u0026#34; projname)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (cl-project:make-project (pathname projpath)))\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopen -a /Applications/Emacs.app $LISP_HOME/$projname/src/main.lisp\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e(Omit the newlines inside the last single-quoted expression.)\u003c/p\u003e\n\u003cp\u003e\nWhen I, say, \u003ccode class=\"verbatim\"\u003elisplib foo\u003c/code\u003e, it creates the project using \u003ccode class=\"verbatim\"\u003emake-project\u003c/code\u003e\nand opens the editor on the main source file.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-6\"\u003e\nHow Do I Add Dependencies to One Of My Projects?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-3\"\u003e\n\u003cp\u003eAdd it to the \u003ccode class=\"verbatim\"\u003e.asd\u003c/code\u003e file in the \u003ccode class=\"verbatim\"\u003e:depends-on\u003c/code\u003e list.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-7\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-7\"\u003e\nHow Do I Get My Local Projects Loadable By Other Projects?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-7\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI did this once:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cd ~/quicklisp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ mv local-projects /tmp  # Mine was basically empty...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ln -s $LISP_HOME local-projects\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-8\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-8\"\u003e\nHow Do I Get Dependencies Loaded\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-8\" class=\"outline-text-3\"\u003e\n\u003col\u003e\n\u003cli\u003eput your project in the directory symlinked above;\u003c/li\u003e\n\u003cli\u003ejack into your REPL;\u003c/li\u003e\n\u003cli\u003eupdate \u003ccode class=\"verbatim\"\u003edepends-on\u003c/code\u003e in the project\u0026#39;s \u003ccode class=\"verbatim\"\u003e.asd\u003c/code\u003e file as you add dependencies;\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003e(ql:quickload \u0026lt;current-package\u0026gt;)\u003c/code\u003e to pick up its dependencies.\u003c/li\u003e\n\u003cli\u003eOptionally, to get the correct namespacing for the package you\u0026#39;re\nworking on, use \u003ccode class=\"verbatim\"\u003eslime-repl-set-package\u003c/code\u003e (\u003ccode class=\"verbatim\"\u003eC-c M-p\u003c/code\u003e) to set the\ndefault package to the one you\u0026#39;re working on (not 100% sure what\neffect this has yet)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-9\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-9\"\u003e\nHow Do I Build Binaries?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-9\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI use to Xach Beane\u0026#39;s \u003ca href=\"https://www.xach.com/lisp/buildapp/\"\u003e\u003ccode class=\"verbatim\"\u003ebuildapp\u003c/code\u003e\u003c/a\u003e, built like so:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit clone git@github.com:xach/buildapp.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecd buildapp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emake install\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eA small working build script using \u003ccode class=\"verbatim\"\u003ebuildapp\u003c/code\u003e can be found \u003ca href=\"https://github.com/eigenhombre/loam/blob/master/build.sh\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-10\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-10\"\u003e\nHow Do I Get My Project Into \u003ca href=\"https://www.quicklisp.org/beta/\"\u003eQuicklisp\u003c/a\u003e?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-10\" class=\"outline-text-3\"\u003e\n\u003cp\u003eMake a pull request with Xach Beane \u003ca href=\"https://github.com/quicklisp/quicklisp-projects/issues\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-11\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-11\"\u003e\nHow Do I Use \u003ccode class=\"verbatim\"\u003eCurses\u003c/code\u003e (or equivalent)?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-11\" class=\"outline-text-3\"\u003e\n\u003cp\u003eAfter some research I decided to follow in \u003ca href=\"http://stevelosh.com/blog/2016/08/lisp-jam-postmortem/\"\u003eSteve Losh\u0026#39;s footsteps\u003c/a\u003e and\nuse \u003ccode class=\"verbatim\"\u003ecl-charms\u003c/code\u003e (tutorial \u003ca href=\"http://turtleware.eu/posts/cl-charms-crash-course.html\"\u003ehere\u003c/a\u003e). This \u003ca href=\"https://stackoverflow.com/questions/57906498/package-lock-error-while-installing-sbcl-cffi-package-on-mac-via-quicklisp\"\u003ecost me multiple days\u003c/a\u003e due to some outdated\nHomebrew packages, but worked out in the end after updating those and\nreinstalling my Lisp setup.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-12\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-12\"\u003e\nHow Do I Get Help?\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-12\" class=\"outline-text-3\"\u003e\n\u003cp\u003eAside from Stack Overflow, \u003ca href=\"https://www.irccloud.com/irc/freenode/channel/lisp\"\u003ethe \u003ccode class=\"verbatim\"\u003e#lisp\u003c/code\u003e channel on IRC\u003c/a\u003e was helpful to\nme for the above issue.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-13\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-13\"\u003e\nFuture Projects\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-13\" class=\"outline-text-2\"\u003e\n\u003cul\u003e\n\u003cli\u003eFinish \u003ca href=\"https://github.com/eigenhombre/weeds\"\u003eWeeds\u003c/a\u003e (redo of my blog software in CL)\u003c/li\u003e\n\u003cli\u003ePort \u003ca href=\"https://github.com/eigenhombre/namejen\"\u003enamejen\u003c/a\u003e to CL\u003c/li\u003e\n\u003cli\u003eWrite a Roguelike\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/from-elegance-to-speed/\"\u003eFrom Elegance to Speed\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/journaling-procedure/\"\u003eA Daily Journal in Org Mode\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2019-09-15T00:00:00Z",
  "Author": "John Jacobsen"
}