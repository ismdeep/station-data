{
  "Source": "johnj.com",
  "Title": "Code and Data",
  "Link": "http://johnj.com/posts/code-and-data/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eCode and Data\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2018-06-04T00:00:00Z\"\u003e\n      June 4, 2018\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/color-codes/\"\u003eColor Notations\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/oodles/\"\u003e(oodles of delicious atoms)\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/thin-ice.png\"\u003e\u003cimg class=\"resize\" src=\"/thin-ice_hucbd89972041562aa7cbea87b913b2500_634493_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nIntroduction\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\n\u003cem\u003eThis article was adapted from discussions we had at the weekly\nClojure study group at OpinionLab, in June, 2018.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\nClojure is a Lisp.  Code is data in Lisp, and data can also be\ncode. Lisp code consists of lists of symbols (or atoms, as they are\ncalled in other Lisps), other data primitives such as numbers and\nkeywords, or (nested) lists of the same.\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-1\" href=\"#footnote-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003e\nThe first item in an expression (list) is the name of an operation,\nusually a function; the rest of the items are the arguments. When\nlists are nested, the inner expressions are evaluated first: in \u003ccode class=\"verbatim\"\u003e(+ 1\n(* 2 3))\u003c/code\u003e, the multiplication happens before the addition.\u003c/p\u003e\n\u003cp\u003e\nSomewhat less commonly, instead of function names, the first item in\nthe list may be the name of a macro or so-called \u0026#34;special form.\u0026#34;  In\nthese cases, the exact method of evaluation depends on the\nimplementation of the macro or form. For example, in \u003ccode class=\"verbatim\"\u003e(dotimes [_ 10]\n(println \u0026#39;hi))\u003c/code\u003e, the \u003ccode class=\"verbatim\"\u003eprintln\u003c/code\u003e is evaluated 10 times; if \u003ccode class=\"verbatim\"\u003edotimes\u003c/code\u003e\nwere a function, \u003ccode class=\"verbatim\"\u003eprintln\u003c/code\u003e would be evaluated exactly once.\u003c/p\u003e\n\u003cp\u003e\nTo prevent evaluation of an expression, one can \u003ccode class=\"verbatim\"\u003equote\u003c/code\u003e it:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(quote (+ 1 (* 2 3)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(+ 1 (* 2 3))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe single quote (\u0026#39;) character is an abbreviation for \u003ccode class=\"verbatim\"\u003equote\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(+ 1 (* 2 3))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(+ 1 (* 2 3))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe REPL will evaluate expressions unless you quote them; if you\ndecide later you want to evaluate an expression, you can use \u003ccode class=\"verbatim\"\u003eeval\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def expr \u0026#39;(+ 1 (* 2 3)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval expr)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e7\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nQuoting and evaluation are inverse operations:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (eval (eval (eval \u0026#39;\u0026#39;\u0026#39;\u0026#39;(+ 1 (* 2 3))))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e7\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nHere are some examples you should try at the REPL, to help build an\nunderstanding of these two operations:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(+ 1 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;+\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e+\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(+ 1 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(cons \u0026#39;+ \u0026#39;(1 1))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (cons \u0026#39;+ \u0026#39;(1 1)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(first \u0026#39;(+ - * /))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(cons (first \u0026#39;(+ - * /)) \u0026#39;(1 1))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (cons (first \u0026#39;(+ - * /)) (rest \u0026#39;(not-a-number 1 1))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(-\u0026gt;\u0026gt; \u0026#39;(not-a-number 1 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     rest\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (cons (first \u0026#39;(+ - * /)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     eval)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nTry to understand each of these as best you can, and try some\nvariations.  The last expression is the same as the one prior to it,\njust rewritten using the thread-last (\u003ccode class=\"verbatim\"\u003e-\u0026gt;\u0026gt;\u003c/code\u003e) macro.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nArithmetic of the Fittest\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nThe close relationship of code and data suggests making new code on\nthe fly to solve problems, which is a concept used in\n\u003ca href=\"https://en.wikipedia.org/wiki/Genetic_algorithm\"\u003egenetic algorithms\u003c/a\u003e.  Here is an example inspired by GAs.  Let\u0026#39;s write\na function which \u003cem\u003efinds expressions involving the four arithmetic\noperators that return the number 2.\u003c/em\u003e Examples:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(+ 1 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(- 4 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(* 1 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(/ 2 1)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nFirst, let\u0026#39;s make our expression generator (type or copy-paste into your REPL):\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn oper [] (rand-nth \u0026#39;(* / - +)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn digit [] (rand-int 10))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn numlist []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [numnums (rand-int 10)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (repeatedly numnums digit)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn expr-fn []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (cons (oper) (numlist)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nTrying these out:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(oper)    ;;=\u0026gt; *\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(oper)    ;;=\u0026gt; /\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(numlist) ;;=\u0026gt; (6)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(numlist) ;;=\u0026gt; (6 9 3 4 4 2 4 3 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(expr-fn) ;;=\u0026gt; (/ 6 1 3 7 0 3 0 9)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(expr-fn) ;;=\u0026gt; (- 5 7 2)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nOur expression generator selects an arithmetic operator at random, and\ntacks it on to the beginning of a random list of 0-9 digits.\u003c/p\u003e\n\u003cp\u003e\nEvaluating some example functions:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (expr-fn)) ;;=\u0026gt; 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (expr-fn)) ;;=\u0026gt; 41\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (expr-fn)) ;;=\u0026gt; 7/1152\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval (expr-fn)) ;;=\u0026gt; java.lang.ArithmeticException stacktrace!?!?!\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis last one shows a problem: some of our expressions will not be\nvalid mathematically (for example, \u003ccode class=\"verbatim\"\u003e(/ 1 0)\u003c/code\u003e). Let\u0026#39;s catch any exceptions:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn eval-with-catch-exception [expr]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (eval expr)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (catch Throwable t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (-\u0026gt; t .getClass .getSimpleName symbol))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis function attempts to evaluate \u003ccode class=\"verbatim\"\u003eexpr\u003c/code\u003e and, if the code throws an\nexception, simply returns the exception name as a symbol.\u003c/p\u003e\n\u003cp\u003e\nWe are now in a position to try our code generator out:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(dotimes [_ 10]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [e (expr-fn)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (println e (eval-with-catch-exception e))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nwhich gives\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(/ 9 8 7 0 0 7 2 2 6) ArithmeticException\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(+ 1 3 3 0 7 7 6) 27\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(+ 4 2) 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(- 4 1 2 1 0 0 0) 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(/ 5 7 0 7) ArithmeticException\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(* 0 4 6) 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(* 8 6 7 2 4 1) 2688\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(* 7 4 6 9 8 6) 72576\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(*) 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(- 7) -7\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n(\u003ccode class=\"verbatim\"\u003e*\u003c/code\u003e called with no arguments returns 1; \u003ccode class=\"verbatim\"\u003e+\u003c/code\u003e with no arguments returns 0. This may or\nmay not make intuitive sense to you, depending on how much math you\u0026#39;ve had in\nschool.)\u003c/p\u003e\n\u003cp\u003e\nLet\u0026#39;s generate some that return the desired result, 2:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(distinct\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (for [_ (range 1000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       :let [f (expr-fn)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             result (eval-with-catch-exception f)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             fitness-fn #(= result 2)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       :when (fitness-fn)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   f))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e((+ 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (- 9 1 1 1 4)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (- 2 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (/ 4 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (/ 2 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (* 2))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n(Note that \u003ccode class=\"verbatim\"\u003e(+ n)\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003e(* n)\u003c/code\u003e both just return \u003ccode class=\"verbatim\"\u003en\u003c/code\u003e.)\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-3\"\u003e\nMacros\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nMacros are an advanced topic, but they are relevant because they allow\n(among other things) selective evaluation of arguments. Arguments to a\nmacro can be evaluated zero, one, or many times; this makes macros\nespecially helpful for implementing control flow: \u003ccode class=\"verbatim\"\u003eloop\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003efor\u003c/code\u003e,\n\u003ccode class=\"verbatim\"\u003ewhile\u003c/code\u003e etc. are all macros.\u003c/p\u003e\n\u003cp\u003e\nMacros rely on code-as-data: they essentially functions which generate\ncode, which is then evaluated. Most or all modern Lisps have macros,\nthe equivalent of which are very rare in non-Lisps. These macros play\na large role in making Lisp so expressive.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-4\"\u003e\nExercises\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 1\u003c/strong\u003e: Creating and evaluating code on the fly in this manner\nis not unique to Lisp, but Lisp provides a very natural way to do\nso. Consider how to do the above examples in JavaScript, Ruby, or\nother mainstream languages. What, if any, are the differences between\nClojure/Lisp and those languages?\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 2\u003c/strong\u003e: Set a different arithmetic goal (other than \u003ccode class=\"verbatim\"\u003e2\u003c/code\u003e) and\ngenerate expressions which satisfy it.\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 3\u003c/strong\u003e: Adapt your code generator to include nested expressions,\nso that some of the numbers are generated expressions in their own\nright.  Example: \u003ccode class=\"verbatim\"\u003e(+ 1 4) -\u0026gt; (+ 1 (* 2 2))\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 4\u003c/strong\u003e: Instead of generating expressions, adapt \u003ccode class=\"verbatim\"\u003eexpr-fn\u003c/code\u003e to\nreturn \u003cem\u003efunctions\u003c/em\u003e of no arguments, and adapt the rest of the code to\ncall and evaluate those functions.  I.e., \u003ccode class=\"verbatim\"\u003e(+ 1 2 3)\u003c/code\u003e becomes \u003ccode class=\"verbatim\"\u003e(fn []\n(+ 1 2 3))\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 5 (advanced)\u003c/strong\u003e: Both the generated functions and the \u0026#34;fitness function\u0026#34;\n\u003ccode class=\"verbatim\"\u003efitness-fn\u003c/code\u003e can be made more complex; for example, in addition to the\noperators \u003ccode class=\"verbatim\"\u003e+ - * /\u003c/code\u003e and the numbers 0-9, you could add an \u0026#34;argument\u0026#34;\nvariable \u003ccode class=\"verbatim\"\u003ex\u003c/code\u003e and change the fitness function to expect expressions\nthat return the square of \u003ccode class=\"verbatim\"\u003ex\u003c/code\u003e; some acceptable outputs would\nthen be \u003ccode class=\"verbatim\"\u003e(* x x)\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003e(* 1 x x 1)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nChange your expression generator and fitness functions to implement\nthe squaring function.\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 6 (advanced)\u003c/strong\u003e: try adding other Clojure core functions and\ndata types to the list of possible operators and arguments; try other\nfitness functions as well.\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eExercise 7 (more advanced)\u003c/strong\u003e: develop a way of combining expressions\nand evaluating the fitness of the resulting expression. To build on\nour previous example, if you have the two lists \u003ccode class=\"verbatim\"\u003e(+ 1 1)\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003e(* 2\n3)\u003c/code\u003e, you could choose terms at random from each list, e.g. \u003ccode class=\"verbatim\"\u003e(* 1 3)\u003c/code\u003e;\nyou must decide how to handle lists with different lengths.  The\nfitness function could just be \u003ccode class=\"verbatim\"\u003efitness-fn\u003c/code\u003e from our example, or a\nmore ambitious one\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-2\" href=\"#footnote-2\"\u003e2\u003c/a\u003e\u003c/sup\u003e. If you want to include nested\nexpressions, then you have to decide how to combine those.\u003c/p\u003e\n\u003cp\u003e\nRather than success or failure, the fitness function could return a\nnumber which reflects how well or poorly the expression performed. A\nstrategy from genetic algorithms is to generate many expressions,\nevaluate these, take the best performers, and then generate new\nexpressions by combining these. Implement this.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-5\"\u003e\nSee Also\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-3\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?reload%3D9\u0026amp;v%3Der_lLvkklsk\"\u003eThis freaking amazing\ntalk\u003c/a\u003e\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-3\" href=\"#footnote-3\"\u003e3\u003c/a\u003e\u003c/sup\u003e given\nby William Byrd and Greg Rosenblatt on program synthesis, given at\nClojure/conj 2016.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Genetic_algorithm\"\u003eGenetic Algorithms\u003c/a\u003e on Wikipedia\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-4\" href=\"#footnote-4\"\u003e4\u003c/a\u003e\u003c/sup\u003e.\u003c/li\u003e\n\u003cli\u003eColin Jones\u0026#39;s excellent \u003ca href=\"https://pragprog.com/book/cjclojure/mastering-clojure-macros\"\u003ebook on macros\u003c/a\u003e\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-5\" href=\"#footnote-5\"\u003e5\u003c/a\u003e\u003c/sup\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr class=\"footnotes-separatator\"/\u003e\n\u003cdiv class=\"footnote-definitions\"\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-1\"\u003e\u003ca href=\"#footnote-reference-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003eOther collection types in Clojure are ignored in this post.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-2\"\u003e\u003ca href=\"#footnote-reference-2\"\u003e2\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003elike, say, returning a list of the first million or so prime numbers\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-3\"\u003e\u003ca href=\"#footnote-reference-3\"\u003e3\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?reload=9\u0026amp;v=er_lLvkklsk\"\u003ehttps://www.youtube.com/watch?reload=9\u0026amp;v=er_lLvkklsk\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-4\"\u003e\u003ca href=\"#footnote-reference-4\"\u003e4\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Genetic_algorithm\"\u003ehttps://en.wikipedia.org/wiki/Genetic_algorithm\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-5\"\u003e\u003ca href=\"#footnote-reference-5\"\u003e5\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003e\u003ca href=\"https://pragprog.com/book/cjclojure/mastering-clojure-macros\"\u003ehttps://pragprog.com/book/cjclojure/mastering-clojure-macros\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/color-codes/\"\u003eColor Notations\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/oodles/\"\u003e(oodles of delicious atoms)\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2018-06-04T00:00:00Z",
  "Author": "John Jacobsen"
}