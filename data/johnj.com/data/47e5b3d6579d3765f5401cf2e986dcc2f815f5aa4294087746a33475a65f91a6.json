{
  "Source": "johnj.com",
  "Title": "Making A Tiny E-Paper Status Display for the Raspberry Pi Zero",
  "Link": "http://johnj.com/posts/e-paper-rpi-display/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eMaking A Tiny E-Paper Status Display for the Raspberry Pi Zero\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/python\"\u003e\u003cspan class=\"python-tag\"\u003epython\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/rpi\"\u003e\u003cspan class=\"rpi-tag\"\u003erpi\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/e-paper\"\u003e\u003cspan class=\"e-paper-tag\"\u003ee-paper\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2024-01-25T00:00:00Z\"\u003e\n      January 25, 2024\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/ebook-of-dreams/\"\u003eeBook of Dreams\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/in-praise-of-small-scripts/\"\u003eIn Praise of Small Shell Scripts\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cp\u003e\nI\u0026#39;ve gotten interested in Raspberry Pis again, having recently picked\nup a Pi Zero 2 W.  Something about these cheap little boards that are\nfully-functional Linux computers, \u0026#34;\u003ca href=\"http://www.roylongbottom.org.uk/Raspberry%20Pi%20Benchmarks.htm\"\u003eas powerful\u003c/a\u003e\u0026#34; as the VAXes I\noriginally learned Unix on, appeals to the young hacker in me who fell\nin love with computers in the 1980s and is still able to be amazed by\ntheir potential.  I\u0026#39;ve also been trying to get more comfortable doing\nhardware projects, tinkering with an Arduino kit and brushing up on\nthe electronics I learned in college.\u003c/p\u003e\n\u003cp\u003e\nFor my first \u0026#34;finished\u0026#34; project I wanted to work with an e-paper (also\nknown as e-ink) display.  These displays, used in most eBook readers\nsuch as the Kindle, Nook, Kobo, etc., are great for low-power\napplications, where information updates relatively infrequently, where\nan external light source is available, and where monochrome output is\nsuitable.  Personally, I prefer no backlight and monochrome output,\nfrequently setting my iPhone screen to greyscale as a way of\nreducing its stranglehold on my attention.\u003c/p\u003e\n\u003cp\u003e\nI like the idea of building devices which truly fade into the\nbackground rather than being sources of interruption.  Devices that\ndon\u0026#39;t tell you things directly, but rather invite you to look their\nway \u003cem\u003ewhen you care to\u003c/em\u003e.  I thought an enjoyable first project might be a\nlittle computer that just quietly tells you about itself and doesn\u0026#39;t\ndo much else.  Tangentially, this relates to a movement known as \u0026#34;\u003ca href=\"https://en.wikipedia.org/wiki/Calm_technology\"\u003ecalm\ntechnology\u003c/a\u003e\u0026#34; which advocates for presenting information \u003ca href=\"https://www.karlstechnology.com/blog/designing-calm-technology/\"\u003eless\ninvasively\u003c/a\u003e, often in subliminal ways (\u0026#34;\u003ca href=\"https://www.etymonline.com/word/subliminal\"\u003eunder the threshold of\nconsciousness\u003c/a\u003e\u0026#34;).\u003c/p\u003e\n\u003cp\u003e\nThis post records what I needed to do to build such a small\ne-paper-based device.  Since there were a lot of details I\u0026#39;m likely to\nforget down the road, I used \u003ca href=\"https://howardism.org/Technical/Emacs/literate-devops.html\"\u003eLiterate DevOps in Org Mode\u003c/a\u003e from this\ndocument to be able to run and record (and re-run) most of the steps\nwhile editing the document itself (see the linked \u003ca href=\"https://howardism.org/Technical/Emacs/literate-devops.html\"\u003eblog post\u003c/a\u003e for an\nexplanation).\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nSupply List\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nI used the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVilros Raspberry Pi Zero 2 W Basic Starter Kit\u003c/li\u003e\n\u003cli\u003e2.13 inch e-paper HAT from Waveshare\u003c/li\u003e\n\u003cli\u003e128 GB MicroSD card (\u003cem\u003eway\u003c/em\u003e overkill)\u003c/li\u003e\n\u003cli\u003eSolder and soldering iron\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI highly recommmend the Vilros kit - it was beautifully packaged and\nhad everything I needed.  I did have to solder the 40-pin GPIO\nconnector onto the Pi Zero.\u003c/p\u003e\n\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/pion-halves.jpg\"\u003e\u003cimg class=\"resize\" src=\"/pion-halves_hue302a8e5b1fafbd00c69642502cb6dac_1053180_700x0_resize_q75_box.jpg\" style=\"width:500px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nPi Zero and Waveshare hat (underside)\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nTotal cost was about $80, not counting the new soldering iron I had to\npurchase after my old Radio Shack soldering iron shorted out, though\nI could have saved money by buying a smaller SD card.\u003c/p\u003e\n\u003cp\u003e\nThe Waveshare product is \u003ca href=\"https://www.waveshare.com/wiki/2.13inch_e-Paper_HAT_Manual#Overview\"\u003ereasonably well-documented\u003c/a\u003e, though they\nrecommend some steps I think are best avoided or changed.  The\nsoftware setup I used is shown next.  (The rest of this post is\nsomewhat technical – skip to the end if you just want to see the\npictures.)\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nDependencies\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nIn honor of particle astrophysics, I gave the computer the name\n\u003ccode class=\"verbatim\"\u003epion\u003c/code\u003e.  It runs Raspbian, which is a Debian variant.\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-3\"\u003e\nVirtualenv-based setup\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nI prefer not to install Python dependencies into system directories,\nbecause it\u0026#39;s better to isolate sets of dependencies across different\napplications; the \u003ccode class=\"verbatim\"\u003evenv\u003c/code\u003e module creates virtual environments\n(\u0026#34;virtualenvs\u0026#34;) which do this.  Also, Waveshare\u0026#39;s guide recommends\n\u003ccode class=\"verbatim\"\u003enumpy\u003c/code\u003e, which is a heavyweight dependency I prefer to avoid unless I\nneed it, and as far as I can tell, we do not.  My dependency\ninstallation steps were as follows (here and below, the command that\nwas issued has a grey background, and the output has a tan-colored\nbackground):\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get update -qq\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt-get install -yqq python3-pip\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epython -m venv venv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e venv/bin/activate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -U -q setuptools\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -q spidev\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -q gpiozero\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -q pillow\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003eSelecting previously unselected package python3-pip.\n(Reading database ... [...progress info elided...]\nPreparing to unpack .../python3-pip_23.0.1+dfsg-1+rpt1_all.deb ...\nUnpacking python3-pip (23.0.1+dfsg-1+rpt1) ...\nSetting up python3-pip (23.0.1+dfsg-1+rpt1) ...\nProcessing triggers for man-db (2.11.2-2) ...\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-4\"\u003e\nRunning the Demo\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nOnce the hardware was attached and the dependencies loaded, I had some\nhope of interacting with the device.  The next step was to check out\nthe Waveshare e-paper repository from GitHub…\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit clone -q https://github.com/waveshare/e-Paper.git\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n… and then to try to run their demo script:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e e-Paper/RaspberryPi_JetsonNano/python/examples\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e ~/venv/bin/activate \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e python epd_2in13_V3_test.py\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003e/home/rpi/venv/lib/python3.11/site-packages/gpiozero/devices.py:295: PinFactoryFallback: Falling back from lgpio: No module named \u0026#39;lgpio\u0026#39;\n  warnings.warn(\n/home/rpi/venv/lib/python3.11/site-packages/gpiozero/devices.py:295: PinFactoryFallback: Falling back from rpigpio: No module named \u0026#39;RPi\u0026#39;\n  warnings.warn(\n/home/rpi/venv/lib/python3.11/site-packages/gpiozero/devices.py:295: PinFactoryFallback: Falling back from pigpio: No module named \u0026#39;pigpio\u0026#39;\n  warnings.warn(\n/home/rpi/venv/lib/python3.11/site-packages/gpiozero/devices.py:292: NativePinFactoryFallback: Falling back to the experimental pin factory NativeFactory because no other pin factory could be loaded. For best results, install RPi.GPIO or pigpio. See https://gpiozero.readthedocs.io/en/stable/api_pins.html for more information.\n  warnings.warn(NativePinFactoryFallback(native_fallback_message))\nINFO:root:epd2in13_V3 Demo\nINFO:root:init and Clear\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy release\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy release\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy release\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy release\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy release\nINFO:root:1.Drawing on the image...\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy\n[... lots more debugging info here...]\nDEBUG:waveshare_epd.epd2in13_V3:e-Paper busy release\nINFO:root:Goto Sleep...\nDEBUG:waveshare_epd.epdconfig:spi end\nDEBUG:waveshare_epd.epdconfig:close 5V, Module enters 0 power consumption ...\n\u003c/pre\u003e\n\u003cp\u003e\nWhen I did this I saw their series of changes on the small screen\nattached to the RPi Zero.  Exciting!  (The warnings in the output seem\nto have to do w/ how the Python code wants to \u0026#34;speak GPIO\u0026#34; and does\nnot seem to negatively effect the outcome.)\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-5\"\u003e\nRolling Our Own\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nI wanted to make my own display, and simply load the Waveshare driver\ncode as a Python package.  Unfortunately, I was unable to get\nWaveshare\u0026#39;s (undocumented) \u003ccode class=\"verbatim\"\u003esetup.py\u003c/code\u003e working with my virtualenv; the\nquick-and-dirty workaround was to update \u003ccode class=\"verbatim\"\u003esys.path\u003c/code\u003e to find their\nlibrary, but use the virtualenv for the other dependencies installed\nearlier.\u003c/p\u003e\n\u003cp\u003e\nAs a proof of concept, I wrote a script to write the device IP address\nto the screen:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; /tmp/ip-demo.py\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003efrom PIL import Image, ImageDraw, ImageFont\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eimport os\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eimport socket\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eimport sys\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eimport warnings\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eSRCDIR = \u0026#34;/home/rpi/e-Paper/RaspberryPi_JetsonNano/python\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003esys.path.append(os.path.join(SRCDIR, \u0026#34;lib\u0026#34;))\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e# Suppress GPIO library warning:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003ewith warnings.catch_warnings(action=\u0026#34;ignore\u0026#34;):\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    from waveshare_epd import epd2in13_V4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003edef get_ip_address():\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    s.connect((\u0026#39;8.8.8.8\u0026#39;, 80))\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    local_ip_address = s.getsockname()[0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    s.close()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e    return local_ip_address\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003epicdir = os.path.join(SRCDIR, \u0026#39;pic\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003efont16 = ImageFont.truetype(os.path.join(picdir, \u0026#39;Font.ttc\u0026#39;), 20)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003efont24 = ImageFont.truetype(os.path.join(picdir, \u0026#39;Font.ttc\u0026#39;), 24)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eepd = epd2in13_V4.EPD()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eepd.init()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eimage = Image.new(\u0026#39;1\u0026#39;, (epd.height, epd.width), 127)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003edraw = ImageDraw.Draw(image)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003edraw.text((10, 68), \u0026#39;pion ip address\u0026#39;, font = font16, fill = 0)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003edraw.text((10, 90), f\u0026#39;{get_ip_address()}\u0026#39;, font = font24, fill = 0)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eepd.display(epd.getbuffer(image))\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eepd.sleep()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eprint(\u0026#34;OK\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e venv/bin/activate \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e python /tmp/ip-demo.py\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003eOK\n\u003c/pre\u003e\n\u003cp\u003e\nAnd here\u0026#39;s what it looked like on the Pi:\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/pion-ip.jpg\"\u003e\u003cimg class=\"resize\" src=\"/pion-ip_hu34ed7b145f773b28680ec683220bcb15_415701_700x0_resize_q75_box.jpg\" style=\"width:400px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-6\"\u003e\nPrototyping a Better Display\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nAt this point I felt ready to make a more informative display panel.\nFor this project I chose to display various information easily\naccessible to the Pi:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003ehostname\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOn-board temperature\u003c/li\u003e\n\u003cli\u003eIP address\u003c/li\u003e\n\u003cli\u003eWiFi signal strength\u003c/li\u003e\n\u003cli\u003eUptime, including CPU busy fraction\u003c/li\u003e\n\u003cli\u003e\u0026#34;Disk\u0026#34; (storage) size and usage fraction\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis meant reading online and running lots of little experiments to\ntry things out. The RPi Zero W 2 is powerful enough to edit and run\ncode on, but I\u0026#39;d rather use my editors on my laptop.  I did need to\nexplore the commands on the Pi needed to read out the quantities I was\ninterested in… here are some of the details. (This section relies\nheavily on the the Literate Devops setup mentioned above; commands\nwere all launched on the RPi from this document, with the results\ninserted directly inline.)\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-7\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-7\"\u003e\nTemperature\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-7\" class=\"outline-text-4\"\u003e\n\u003cp\u003e\nOn Raspbian, \u003ccode class=\"verbatim\"\u003evcgencmd\u003c/code\u003e \u003ca href=\"https://www.tomshardware.com/how-to/raspberry-pi-benchmark-vcgencmd\"\u003ewill tell you tons of things about your Pi\u003c/a\u003e.\nHere we use it to read out the CPU temperature:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e/usr/bin/vcgencmd measure_temp\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003etemp=38.1\u0026#39;C\n\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-8\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-8\"\u003e\nMemory\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-8\" class=\"outline-text-4\"\u003e\n\u003cp\u003e\n\u003ccode class=\"verbatim\"\u003efree\u003c/code\u003e is fairly common across Linux variants:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efree\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003e               total        used        free      shared  buff/cache   available\nMem:          436980      109240      213468         948      166464      327740\nSwap:         102396           0      102396\n\u003c/pre\u003e\n\u003cp\u003e\nIt \u003ca href=\"https://www.man7.org/linux/man-pages/man1/free.1.html\"\u003euses\u003c/a\u003e \u003ccode class=\"verbatim\"\u003e/proc/meminfo\u003c/code\u003e under the hood:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat /proc/meminfo\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003eMemTotal:         436980 kB\nMemFree:          111828 kB\nMemAvailable:     332116 kB\nBuffers:           31068 kB\nCached:           220648 kB\nSwapCached:         1184 kB\nActive:           103120 kB\nInactive:         159140 kB\nActive(anon):      10676 kB\nInactive(anon):       32 kB\nActive(file):      92444 kB\nInactive(file):   159108 kB\nUnevictable:           0 kB\nMlocked:               0 kB\nSwapTotal:        102396 kB\nSwapFree:          91900 kB\nZswap:                 0 kB\nZswapped:              0 kB\nDirty:               800 kB\nWriteback:             0 kB\nAnonPages:         10328 kB\nMapped:            29968 kB\nShmem:               164 kB\nKReclaimable:      27584 kB\nSlab:              43208 kB\nSReclaimable:      27584 kB\nSUnreclaim:        15624 kB\nKernelStack:        1040 kB\nPageTables:         1088 kB\nSecPageTables:         0 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:      320884 kB\nCommitted_AS:     168456 kB\nVmallocTotal:    1622016 kB\nVmallocUsed:        7056 kB\nVmallocChunk:          0 kB\nPercpu:              416 kB\nCmaTotal:         262144 kB\nCmaFree:           86804 kB\n\u003c/pre\u003e\n\u003cp\u003e\nLots of interesting things here to try and understand someday… maybe.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-9\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-9\"\u003e\nWiFi\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-9\" class=\"outline-text-4\"\u003e\n\u003cp\u003e\nSearching around on online turned up two ways of getting WiFi signal strength:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e iwconfig wlan0\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003ewlan0     IEEE 802.11  ESSID:\u0026#34;CornellCroft\u0026#34;\n          Mode:Managed  Frequency:2.437 GHz  Access Point: F4:92:BF:7F:55:E4\n          Bit Rate=72.2 Mb/s   Tx-Power=31 dBm\n          Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:on\n          Link Quality=64/70  Signal level=-46 dBm\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:1  Invalid misc:0   Missed beacon:0\n\n\u003c/pre\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat /proc/net/wireless\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003eInter-| sta-|   Quality        |   Discarded packets               | Missed | WE\n face | tus | link level noise |  nwid  crypt   frag  retry   misc | beacon | 22\n wlan0: 0000   61.  -49.  -256        0      0      0      1      0        0\n\u003c/pre\u003e\n\u003cp\u003e\nI used the former.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-10\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-10\"\u003e\nDisk Space\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-10\" class=\"outline-text-4\"\u003e\n\u003cp\u003e\n\u003ccode class=\"verbatim\"\u003edf\u003c/code\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Df_(Unix)\"\u003eis at least 37 years old\u003c/a\u003e and works on almost anything Unix-like:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -k\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003eFilesystem     1K-blocks    Used Available Use% Mounted on\nudev               81736       0     81736   0% /dev\ntmpfs              43700     932     42768   3% /run\n/dev/mmcblk0p2 122364296 4306628 111824324   4% /\ntmpfs             218488       0    218488   0% /dev/shm\ntmpfs               5120       8      5112   1% /run/lock\n/dev/mmcblk0p1    522232   95702    426530  19% /boot/firmware\ntmpfs              43696       0     43696   0% /run/user/1000\n\u003c/pre\u003e\n\u003cp\u003e\nI only wanted the \u0026#34;root\u0026#34; filesystem, since it takes up almost all the space.\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edf -k \u003cspan class=\"p\"\u003e|\u003c/span\u003e egrep \u003cspan class=\"s1\"\u003e\u0026#39;/$\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003e/dev/mmcblk0p2 122364296 4306624 111824328   4% /\n\u003c/pre\u003e\n\u003cp\u003e\nI probably didn\u0026#39;t need to spring for 128 GB of storage on my MicroSD card.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-11\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-11\"\u003e\nCPU Load and Uptime\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-11\" class=\"outline-text-4\"\u003e\n\u003cp\u003e\nI found two methods:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euptime\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003e 16:21:16 up  1:15,  2 users,  load average: 0.08, 0.02, 0.01\n\u003c/pre\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat /proc/uptime\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003e4544.69 18031.09\n\u003c/pre\u003e\n\u003cp\u003e\nWhat is this proc file actually telling us?  RedHat \u003ca href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/s2-proc-uptime\"\u003esays\u003c/a\u003e,\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe first value represents the total number of seconds the system has\nbeen up. The second value is the sum of how much time each core has\nspent idle, in seconds. Consequently, the second value may be greater\nthan the overall system uptime on systems with multiple cores.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\nThis implies that there are four cores on the board (something one can\nconfirm by looking at \u003ccode class=\"verbatim\"\u003e/proc/cpuinfo\u003c/code\u003e); I actually didn\u0026#39;t know there\nwere four cores when I bought the unit.\u003c/p\u003e\n\u003cp\u003e\nWhich suggests an interesting statistic, \u0026#34;Average CPU load since\nboot\u0026#34;: (4544 * 4 - 18031) / 4544 * 4 = 0.8%.  I added that to my\ndashboard.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-12\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-12\"\u003e\nWhat else is there?\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-12\" class=\"outline-text-4\"\u003e\n\u003cp\u003e\nThere are always interesting things to be found in the proc\nfilesystem, which provides an easily-accessible file-like interface to\nmany aspects of the Linux kernel.\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els /proc\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003e1     1485  272  4    48   72\tasound\t     kallsyms\t    stat\n10    1486  275  40   49   73\tbuddyinfo    key-users\t    swaps\n1012  1487  28\t 41   490  813\tbus\t     keys\t    sys\n1070  15    29\t 415  497  822\tcgroups      kmsg\t    sysrq-trigger\n1071  16    293  416  5    918\tcmdline      kpagecgroup    sysvipc\n11    164   294  42   50   939\tconsoles     kpagecount     thread-self\n1155  167   3\t 421  503  94\tcpu\t     kpageflags     timer_list\n1158  168   315  422  53   941\tcpuinfo      latency_stats  tty\n1159  17    317  423  54   942\tcrypto\t     loadavg\t    uptime\n12    18    319  424  577  945\tdevice-tree  locks\t    version\n1243  183   32\t 426  587  947\tdevices      meminfo\t    vmallocinfo\n13    184   321  43   59   948\tdiskstats    misc\t    vmstat\n1327  19    322  430  590  95\tdriver\t     modules\t    zoneinfo\n133   2     33\t 433  6    951\texecdomains  mounts\n14    22    35\t 434  60   952\tfb\t     net\n140   228   36\t 435  61   96\tfilesystems  pagetypeinfo\n1411  23    374  436  62   967\tfs\t     partitions\n1412  235   379  44   63   972\tinterrupts   schedstat\n1418  24    38\t 444  64   973\tiomem\t     self\n1419  253   387  446  65   974\tioports      slabinfo\n1484  27    39\t 450  651  985\tirq\t     softirqs\n\u003c/pre\u003e\n\u003cp\u003e\nDigging into these some other time might suggest more ideas for our\ndisplay.  (Incidentally, I remember from my time writing Linux device\ndrivers that it is not that hard to add \u003ccode class=\"verbatim\"\u003e/proc\u003c/code\u003e entries to the kernel\n– making a new proc file can be a good first kernel project.)\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-13\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-13\"\u003e\nBuilding the Mockup\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-13\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nWith the above output snippets in hand I could go about building a mockup\nto play around with locally on my laptop, then adapt to the Pi by wiring\nin the actual shell commands in the appropriate places.\u003c/p\u003e\n\u003cp\u003e\nFirst, I created a new Python project for local use.  The only extra\nlibrary needed was \u003ccode class=\"verbatim\"\u003epillow\u003c/code\u003e, for image manipulation functions of the\nkind used by the Waveshare demo.\u003c/p\u003e\n\u003cp\u003e\nI called my e-paper display \u003ccode class=\"verbatim\"\u003epaperproto\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Locally, on my laptop:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /Users/jacobsen/Programming/Python\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir -p paperproto\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e paperproto\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epython -m venv venv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install pillow\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe \u003ca href=\"https://github.com/eigenhombre/paperproto\"\u003eresulting code is up on GitHub\u003c/a\u003e.  I won\u0026#39;t go through the entire\nprogram, though it is based on the Python example I showed above.\nThere are, perhaps, two interesting features.  First, the elements in\nthe display are organized in a simple table which makes it easy to\nplay with the layout.  Here is the top-level table:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efields = [\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [None, get_hostname(), font24, [0, 0]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [None, get_ip_address(), font14, [0, 40]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [\u0026#34;WiFi\u0026#34;, get_wifi_strength(), font14, [120, 40]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [None, get_datetime(), font14, [0, 60]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [\u0026#34;Mem\u0026#34;, get_mem(), font14, [120, 60]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [\u0026#34;Disk\u0026#34;, get_disk(), font14, [0, 80]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [None, get_temp(), font14, [120, 80]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [\u0026#34;Up\u0026#34;, get_uptime(), font14, [0, 100]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe first field is an optional prefix for the information; the next,\nan invocation of the relevant function to give the info in question;\nfollowed by the font/size for the information.  The last column\nconsists of $x$, $y$ location.  By playing with these fields, the\ndesign could be quickly changed.\u003c/p\u003e\n\u003cp\u003e\nSecond, each of the functions shown has a \u0026#34;mockup\u0026#34; or local version, a\nfixed string which was copied from the exploratory output shown above;\nand a \u0026#34;real\u0026#34; or deployed version which executes on the Raspberry Pi\nwhen it\u0026#39;s running \u0026#34;in production.\u0026#34; Here is an example of one of the\nfunctions implemented in this dual manner:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edef get_uptime():\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if is_pi:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        uptimestr = subprocess.check_output(\u0026#34;cat /proc/uptime\u0026#34;, shell=True).decode(\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u0026#34;utf-8\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    else:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        uptimestr = \u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        4544.69 18031.09\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    match = re.search(r\u0026#34;(\\d+\\.\\d+)\\s+(\\d+\\.\\d+)\u0026#34;, uptimestr)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if not match:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return \u0026#34;NO UPTIME\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    total_seconds = float(match.group(1))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    idle_cores = float(match.group(2))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    up_days = float(total_seconds / 86400)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    active_percent = float((1 - idle_cores / (4 * total_seconds)) * 100)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    return f\u0026#34;{up_days:.2f}d, active {active_percent:.2f}%\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis separation of mockup or \u0026#34;virtual hardware,\u0026#34; which can run\nanywhere, and the \u0026#34;real\u0026#34; or target hardware, is something I have had\ngood success with in more serious embedded work.  The result in this case is\nthat I could iterate very quickly on my mockup, and produce something\nlike the following, without taking the trouble to copy things over to\nthe RPi:\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/proto.png\"\u003e\u003cimg class=\"resize\" src=\"/proto_hu81b1b38953df82c202982fac1cd53af2_1099_700x0_resize_box_3.png\" style=\"width:400px; border:1px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\n(\u003ccode class=\"verbatim\"\u003ejjair\u003c/code\u003e is the hostname of my laptop, where the mockup is running.)\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-14\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-14\"\u003e\nDeployment\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-14\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nGetting it to work on the Pi was as simple as copying the file over…\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Locally, on my laptop:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003escp /Users/jacobsen/Programming/Python/paperproto/proto.py pion:\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n… and making a small wrapper script to activate the virtualenv and\nrun the Python code:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; proto\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003ecd /home/rpi\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003esource venv/bin/activate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003epython proto.py\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003echmod +x proto\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-15\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-15\"\u003e\nRunning \u0026#34;In Production\u0026#34;\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-15\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nFinally we get to see the results!\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./proto\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre class=\"example\"\u003eNone pion 0 0\nNone 192.168.0.69 0 40\nWiFi 70/70 -29 dBm 120 40\nNone 2024-01-24 14:23 0 60\nMem 25% 120 60\nDisk 4G/122G 4% 0 80\nNone 38.6 C 120 80\nUp 2.97d, active 0.57% 0 100\n\u003c/pre\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/pion-final.jpg\"\u003e\u003cimg class=\"resize\" src=\"/pion-final_hu7917f1706ed8a7037600b64f9bb9a221_567532_700x0_resize_q75_box.jpg\" style=\"width:400px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-16\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-16\"\u003e\nRunning It Periodically\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-16\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nWe would like our display to regularly update and to survive reboots.\nOne option would be to create a long-running program which loops\nforever, sleeping and then waking up to make its update.  And you\ncould make a \u003ccode class=\"verbatim\"\u003esystemd\u003c/code\u003e service out of that, etc.  But \u003ccode class=\"verbatim\"\u003ecron\u003c/code\u003e does this\nsort of periodic thing wonderfully, and our wrapper script makes this\neasy:\u003c/p\u003e\n\u003cdiv class=\"src src-bash\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# On pion:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;EOF \u0026gt; /tmp/cron\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e*/10 * * * * /home/rpi/proto \u0026gt;\u0026gt; /home/rpi/proto.out 2\u0026gt;\u0026amp;1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecrontab /tmp/cron \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e rm /tmp/cron\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nWith the Pi on my desk and the cron job installed, I can see the\nscreen refreshing every ten minutes.  Job complete!\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/pion-in-situ.jpg\"\u003e\u003cimg class=\"resize\" src=\"/pion-in-situ_hu99e46d43a43a252aee300d7f0bf63327_2146273_700x0_resize_q75_box.jpg\" style=\"width:200px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-17\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-17\"\u003e\nFuture Directions\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-17\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nHere are some things I\u0026#39;d like to try:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTry a bigger display\u003c/li\u003e\n\u003cli\u003eLook into wall-mounted displays\u003c/li\u003e\n\u003cli\u003eDisplay remote info (weather, crime, financial, politics, …)\u003c/li\u003e\n\u003cli\u003eAdd sensors, e.g. air quality or room temperature, and make a\ndisplay for those\u003c/li\u003e\n\u003cli\u003eMake it battery powered!  (But power consumption of Pis is\nsomewhat high for that.)\u003c/li\u003e\n\u003cli\u003eBuild a case for it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOne final thing I might play with is partial updates to the display.\nWaveshare supports a partial update mode where the entire screen need\nnot be redrawn when a region is changed.  Such updates are a little\nmore visually unobtrusive – as it is, the whole display flashes a few\ntimes when it updates.\u003c/p\u003e\n\u003cp\u003e\nI\u0026#39;ve enjoyed having this little device on my desk this week.  I can\n\u003ccode class=\"verbatim\"\u003essh\u003c/code\u003e into it, poke around at the command line, shut it down and\nunplug it, throw it in my backpack (wrapped in an ESD bag: no case yet!),\nshow it to friends.  When unplugged, the information on the display\nstays unchanged until you plug it in again, another nice e-paper\nfeature. Otherwise it just sits there quietly, refreshing every ten\nminutes, drawing a small amount of power, and forming a tiny part of\nmy physical and digital world.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/ebook-of-dreams/\"\u003eeBook of Dreams\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/in-praise-of-small-scripts/\"\u003eIn Praise of Small Shell Scripts\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2024-01-25T00:00:00Z",
  "Author": "John Jacobsen"
}