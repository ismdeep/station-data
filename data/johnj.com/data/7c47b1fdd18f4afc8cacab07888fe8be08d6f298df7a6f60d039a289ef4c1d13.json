{
  "Source": "johnj.com",
  "Title": "Macro-writing Macros",
  "Link": "http://johnj.com/posts/macro-writing-macros/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eMacro-writing Macros\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2015-11-25T00:00:00Z\"\u003e\n      November 25, 2015\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/questions-to-ask/\"\u003eQuestions to Ask\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/time-limits/\"\u003eTime Limits\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\u003cem\u003e… in which we explore the power of macros, and macro-writing\nmacros, to DRY out repetitive code.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/macro-sketch.jpg\"\u003e\u003cimg class=\"resize\" src=\"/macro-sketch_hu623e4e0bf04cd92c2669cdcab03b00a7_98288_700x0_resize_q75_box.jpg\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\nI’ve been writing Clojure code full time for nearly two years now. I\nhave a pretty good feel for the language, its virtues and its\nfaults. Mostly, I appreciate its virtues (though I still wish the REPL\nstarted faster).\u003c/p\u003e\n\u003cp\u003e\nFor me one of the language’s attractions has always been that it’s a\nLisp — a “homoiconic” language, i.e., one defined in terms of its own\ndata structures. Homoiconicity has one primary virtue, which is that\nit makes metaprogramming more powerful and straightforward than it is\nin non-homoiconic languages (arguably at some cost to readability).\u003c/p\u003e\n\u003cp\u003e\nIn Lisp, this metaprogramming is accomplished with \u003cem\u003emacros\u003c/em\u003e, which are\nfunctions that transform your code during a separate stage of\ncompilation. In other words, you write little programs to change your\nprograms before they execute. In effect, you extend the compiler\nitself.\u003c/p\u003e\n\u003cp\u003e\nI run a Clojure study group at work and find that it can be hard to\nexplain the utility (or appeal) of this to newcomers to Lisp. This is\npartly because macros do things you can’t easily do in other\nlanguages, and because the things you want to do tend to relate to\nabstractions latent in a particular codebase.\u003c/p\u003e\n\u003cp\u003e\nWhile \u003ca href=\"https://github.com/eigenhombre/moarquil\"\u003eplaying around with 3d rendering\u003c/a\u003e in \u003ca href=\"http://quil.info/\"\u003eQuil\u003c/a\u003e, I recently came across\na use case that reminded me of the following quote by Paul Graham:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe shape of a program should reflect only the problem it needs to\nsolve. Any other regularity in the code is a sign, to me at least,\nthat I’m using abstractions that aren’t powerful enough— often that\nI’m generating by hand the expansions of some macro that I need to\nwrite\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-1\" href=\"#footnote-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\nIn Quil, there are multiple situations in which one needs to create a\ntemporary context to carry out a series of operations, restoring the\noriginal state afterwards:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSave current style with \u003ccode class=\"verbatim\"\u003epush-style\u003c/code\u003e; change style and draw stuff;\nrestore previous style with \u003ccode class=\"verbatim\"\u003epop-style\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eStart shape with \u003ccode class=\"verbatim\"\u003ebegin-shape\u003c/code\u003e; draw vertices; \u003ccode class=\"verbatim\"\u003eend-shape\u003c/code\u003e to end.\u003c/li\u003e\n\u003cli\u003eSave current position/rotation with \u003ccode class=\"verbatim\"\u003epush-matrix\u003c/code\u003e; translate / rotate\nand draw stuff; restore old position/rotation with \u003ccode class=\"verbatim\"\u003epop-matrix\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere’s an example:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(push-matrix)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (push-style)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (fill 255)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (no-stroke)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (translate [10 10 10])\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (begin-shape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x1 y1 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x2 y2 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x2 y2 h)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x1 y1 h)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x1 y1 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        (end-shape)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (pop-style)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (pop-matrix)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe \u003ccode class=\"verbatim\"\u003e(try ... (finally ...))\u003c/code\u003e constructions may not be strictly needed\nfor a Quil drawing, but it’s a good habit to guarantee that stateful\ncontext changes are undone, even if problems occur.\u003c/p\u003e\n\u003cp\u003e\nIn a complex Quil drawing the idioms for saving style, translation\nstate, and denoting shapes appear often enough that one hungers for a\nmore compact way of representing each. Here’s one way to do it:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro with-style [\u0026amp; body]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  `(do\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (push-style)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ~@body\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (pop-style)))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro with-matrix [\u0026amp; body]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  `(do\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (push-matrix)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ~@body\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (pop-matrix)))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro with-shape [\u0026amp; body]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  `(do\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (begin-shape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ~@body\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (end-shape)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe original code then becomes more compact and easier to read:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(with-matrix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (with-style\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (fill 255)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (no-stroke)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (translate [10 10 10])\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (with-shape\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x1 y1 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x2 y2 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x2 y2 h)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x1 y1 h)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (vertex x1 y1 0))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nIn \u003ca href=\"https://github.com/eigenhombre/moarquil/blob/master/src/moarquil/render.clj\"\u003ethis example code\u003c/a\u003e, the contexts \u003ccode class=\"verbatim\"\u003ewith-matrix\u003c/code\u003e, etc. appear so often\nthat the resulting savings in lines of code and mental overhead for\nthe reader is substantial.\u003c/p\u003e\n\u003cp\u003e\nHowever, the astute reader will realize that the macro definitions\nthemselves are pretty repetitive—in fact, they look almost identical\nexcept for the setup and teardown details (this kind of “context\nmanager” pattern is common enough that Python has \u003ccode class=\"verbatim\"\u003eits own language\nconstruct\u003c/code\u003e for it).\u003c/p\u003e\n\u003cp\u003e\nI generally reach for macros when I have a pattern that occurs with\nobvious repetition that’s not easy to abstract out using just pure\nfunctions. Control abstractions such as loops or exception handling\nare common examples. (I find this situation occurs especially\nfrequently when writing test code).\u003c/p\u003e\n\u003cp\u003e\nIn any case, the solution for our repetitive macros could be something\nlike:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro defcontext\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [nom setup teardown]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  `(defmacro ~(symbol (str “with-” nom))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     [~\u0026#39;\u0026amp; body#]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     `(do\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ~\u0026#39;~setup\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        (try\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          ~@body#\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          (finally\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            ~\u0026#39;~teardown)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nYikes! I have to admit I had to write a lot of macros, and also refer\nto \u003ca href=\"http://hubpages.com/technology/Clojure-macro-writing-macros\"\u003ethis helpful page\u003c/a\u003e for reference, before I could write (and grok)\nthis macro.\u003c/p\u003e\n\u003cp\u003e\nWith \u003ccode class=\"verbatim\"\u003edefcontext\u003c/code\u003e in hand, our repetitive macro code just becomes:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defcontext style (push-style) (pop-style))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defcontext shape (begin-shape) (end-shape))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defcontext matrix (push-matrix) (pop-matrix))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThese are exactly equivalent to the three context macros \u003ccode class=\"verbatim\"\u003e(with-*)\u003c/code\u003e\ndefined above.\u003c/p\u003e\n\u003cp\u003e\nWith a little effort, it’s actually not too hard to construct such a\nnested macro. It’s largely a matter of writing out the code you want\nto generate, and then writing the code that generates it, testing with\n\u003ccode class=\"verbatim\"\u003emacroexpand-1\u003c/code\u003e at the REPL as you go. \u003ca href=\"http://hubpages.com/technology/Clojure-macro-writing-macros\"\u003eThis page by A. Malloy\u003c/a\u003e has a lot\nof helpful remarks, including this cautionary note: “Think twice\nbefore trying to nest macros: it’s usually the wrong answer.” In this\ncase, I actually think it’s the right answer, because the pattern of a\ncontext with setup and teardown is so common that I know I’ll reuse\nthis macro for many other things—we have effectively added one of my\nfavorite Python features to Clojure in just a few lines of code[fn::To\nbe even more like Python’s context managers, \u003ccode class=\"verbatim\"\u003edefcontext\u003c/code\u003e would want\nto enable the user to bind some local state resulting from the setup\nphase of execution (“ \u003ccode class=\"verbatim\"\u003ewith x() as y:\u003c/code\u003e ” idiom); examples include file\ndescriptors or database connections. This is left as an exercise for\nthe reader.]\u003c/p\u003e\n\u003cp\u003e\nThere’s a saying in the Clojure community: \u003ccode class=\"verbatim\"\u003edata \u0026gt; functions \u0026gt; macros\u003c/code\u003e.\nI’m a big believer in this. Clojure’s powerful built-in\nabstractions for wrangling data in all its forms make it the language\nI prefer above all others these days. But occasionally that means\nwrangling the data that is the code itself, thereby reaping the\nbenefits in power, brevity and expressiveness.\u003c/p\u003e\n\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/moarquil.png\"\u003e\u003cimg class=\"resize\" src=\"/moarquil_hu2cd55ba66cfc86aebafd916e4ba0f4ee_392286_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nImage generated by \u003ca href=\"https://github.com/eigenhombre/moarquil/blob/master/src/moarquil/util.clj#L5\"\u003ethe Quil code\u003c/a\u003e used for this example.\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr class=\"footnotes-separatator\"/\u003e\n\u003cdiv class=\"footnote-definitions\"\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-1\"\u003e\u003ca href=\"#footnote-reference-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003ePaul Graham, \u0026#34;Revenge of the Nerds\u0026#34;: \u003ca href=\"http://www.paulgraham.com/icad.html\"\u003ehttp://www.paulgraham.com/icad.html\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/questions-to-ask/\"\u003eQuestions to Ask\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/time-limits/\"\u003eTime Limits\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2015-11-25T00:00:00Z",
  "Author": "John Jacobsen"
}