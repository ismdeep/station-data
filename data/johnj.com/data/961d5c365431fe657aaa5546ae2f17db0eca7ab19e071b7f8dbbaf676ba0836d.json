{
  "Source": "johnj.com",
  "Title": "Exploratory Genomics with Clojure",
  "Link": "http://johnj.com/posts/exploratory-genomics-with-clojure/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eExploratory Genomics with Clojure\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/genomics\"\u003e\u003cspan class=\"genomics-tag\"\u003egenomics\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2013-07-05T00:00:00Z\"\u003e\n      July 5, 2013\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/a-two-bit-decoder/\"\u003eA Two Bit Decoder\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/rosalind-problems-in-clojure/\"\u003eRosalind Problems in Clojure\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cp\u003e\nIn Stanislaw Lem’s \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/His_Master\u0026#39;s_Voice_(novel)\"\u003eHis Master’s Voice\u003c/a\u003e\u003c/em\u003e, humanity receives a “letter\nfrom the stars,” in the form of regularly repeating binary data\nencoded in a beam of extraterrestrial neutrinos. The protagonists know\nnothing \u003cem\u003ea priori\u003c/em\u003e about the content of the letter. The plot unfolds as\nthe message slowly, as a result of careful study, yields a few (not\nmany) of the signal’s secrets.\u003c/p\u003e\n\u003cp\u003e\nWhat would you do if you received such a dataset? How would you study\nit? What real world datasets are similarly mysterious?\u003c/p\u003e\n\u003cp\u003e\nAs most readers will know, every living being contains a “message” of\nsorts, encoded, not in base 2 (binary), but rather base 4: A, G, C, or\nT, arranged in paired, sequential molecular strands called DNA (in\nwhich every A is paired with a T, every C with a G). From 159,662 base\npairs for \u003ca href=\"http://www.nature.com/news/2006/061009/full/news061009-10.html\"\u003ethe smallest known genome\u003c/a\u003e, to 3.3 billion BPs for humans, to\n\u003ca href=\"http://www.sciencemag.org/news/2010/10/scienceshot-biggest-genome-ever\"\u003e149 billion BPs\u003c/a\u003e for the largest genome, that of \u003cem\u003eParis japonica\u003c/em\u003e, each\norganism carries its own unique tome locked in its cells.\u003c/p\u003e\n\u003cp\u003e\nIn the past ten years, the human genome \u003ca href=\"http://en.wikipedia.org/wiki/Human_Genome_Project\"\u003ehas been sequenced\u003c/a\u003e and \u003ca href=\"http://en.wikipedia.org/wiki/Human_Genome_Project\"\u003emade\nwidely available\u003c/a\u003e. Though downloadable in a variety of formats, the\nmost compact seems to be the ‘2bit’ format (two bits per base pair):\nthe genome in this format is just under a gigabyte,\nuncompressed. Plenty of genomes of simpler organisms are available for\nstudy as well.\u003c/p\u003e\n\u003cp\u003e\nI am not a genomicist or biologist, but am curious about the\nproperties of the “data” stored within us all. In the next few blog\nposts I intend to investigate genomic data (human or otherwise) using\nClojure, a modern Lisp developed for the JVM. Clojure’s strengths are\nsimplicity, concurrency, expressiveness and speed – assets which will\nbe helpful as we tackle a few simple analytical tasks aimed at\nunderstanding some of the properties of life’s very own “Big Data.”\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/a-two-bit-decoder/\"\u003eA Two Bit Decoder\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/rosalind-problems-in-clojure/\"\u003eRosalind Problems in Clojure\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2013-07-05T00:00:00Z",
  "Author": "John Jacobsen"
}