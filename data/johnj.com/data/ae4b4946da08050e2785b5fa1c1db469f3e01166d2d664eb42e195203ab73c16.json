{
  "Source": "johnj.com",
  "Title": "Tests by Example in Clojure and Common Lisp",
  "Link": "http://johnj.com/posts/tests-by-example/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eTests by Example in Clojure and Common Lisp\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2022-07-13T00:00:00Z\"\u003e\n      July 13, 2022\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/tco/\"\u003eAdding Tail Call Optimization to A Lisp Written in Go\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/l1/\"\u003e(Yet Another) Lisp In Go\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/cosb-crab-88.png\"\u003e\u003cimg class=\"resize\" src=\"/cosb-crab-88_hu1b5730cf40a182dd04a5a25006d50bf6_460961_700x0_resize_box_3.png\" style=\"width:400px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nHistogram made by a 1980\u0026#39;s version of the author.\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nWhile playing around with some dice-rolling simulations recently in\nCommon Lisp (a topic for some future post, perhaps), I looked around\nfor a way of making histograms.  Finding none close to hand (it being\nCommon Lisp), it wasn\u0026#39;t too hard to \u003ca href=\"https://github.com/eigenhombre/hbook\"\u003e\u0026#34;roll my own\u0026#34; library\u003c/a\u003e (it\nbeingâ€¦ Common Lisp) to create text-based histograms in the tradition\nof \u003ca href=\"https://cds.cern.ch/record/307945/files/\"\u003elibraries from CERN\u003c/a\u003e that I used as a fledgling physicist in the\nlate 1980s.\u003c/p\u003e\n\u003cp\u003e\nSince the project was just for fun, I drove most of the code forward\njust by REPLing.  But I am trying to follow the same habits in my \u0026#34;for\nfun\u0026#34; GitHub repositories as I would for paid work.  This means, among\nother things, unit tests (in fact, for critical work I still prefer to\nuse \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003eTDD\u003c/a\u003e when I can).\u003c/p\u003e\n\u003cp\u003e\nSo, in fleshing the tests out after the fact, I found myself\nwriting somewhat repetitive code that looked like this:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(test hist-values-test\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let ((h (histogram \u0026#39;(1 2) 2)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 2 (hist-count h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 1 (hist-min h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 2 (hist-max h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (equalp #(1 1) (hist-bin-heights h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (equalp #(1 2) (hist-bin-xs h))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let ((h (histogram \u0026#39;(1 2 1) 2)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 2 (hist-count h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 1 (hist-min h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 2 (hist-max h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (equalp #(2 1) (hist-bin-heights h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (equalp #(1 2) (hist-bin-xs h))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let ((h (histogram \u0026#39;(1 2 2 3) 3)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 3 (hist-count h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 1 (hist-min h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (= 3 (hist-max h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (equalp #(1 2 1) (hist-bin-heights h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (is (equalp #(1 2 3) (hist-bin-xs h)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is using the minimalist \u003ca href=\"https://github.com/lmj/1am\"\u003e1AM\u003c/a\u003e testing library, which I like for its\nsimplicity.  It is also similar to the standard \u003ca href=\"https://clojure.github.io/clojure/clojure.test-api.html\"\u003e\u003ccode class=\"verbatim\"\u003eclojure.test\u003c/code\u003e\u003c/a\u003e library\nI\u0026#39;m used to in Clojure.  It lacks, however, one important feature of\n\u003ccode class=\"verbatim\"\u003eclojure.test\u003c/code\u003e, namely the \u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e macro.  The macro allows one to\nrepresent tests as a table of examples:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Clojure code:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(deftest example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (are\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [nums       prod]         ;; [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (= prod (reduce * nums))  ;; [2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    []          1             ;; [3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [1]         1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [0]         0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [0 1]       0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [1 1]       1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [2 2]       4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [2 3]       6\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [-1 -1]     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [2 2 2]     8\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [1000 1000] 1000000))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nAn invocation of \u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e has three parts: a vector of symbols to be\nbound to values from the examples to follow [1]; the expression to be\nevaluated for each example [2]; and the actual examples [3], with one\nexample per line being the usual, but optional, convention.  (In the\ncode above I have added extra spaces to make clear that \u003ccode class=\"verbatim\"\u003enums\u003c/code\u003e goes\nwith the first column of data, and \u003ccode class=\"verbatim\"\u003eprod\u003c/code\u003e goes with the second\ncolumn.)\u003c/p\u003e\n\u003cp\u003e\nIf at first you didn\u0026#39;t understand that code being tested ([2]) was\nrelated to multiplication, you\u0026#39;d probably be able to figure it out\njust by looking at the examples.  This is the primary advantage of\n\u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e, namely that examples often provide as good or better\ndocumentation than a written description of functionality does.\u003c/p\u003e\n\u003cp\u003e\nMissing such a compact testing idiom for my unit tests, I found myself\nwondering how hard it would be to port it to Common Lisp.  The answer,\nas you might expect, was: Not that hard.  As is often the case, there\nis \u003ca href=\"https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj#L572\"\u003enot much actual Clojure code\u003c/a\u003e behind the function in question, and\nthe corresponding Common Lisp code is similarly compact, as we shall\nsee.\u003c/p\u003e\n\u003cp\u003e\nIf you look at the actual function definition in \u003ccode class=\"verbatim\"\u003eclojure.test\u003c/code\u003e, most\nof the macro proper is error checking; the actual work is delegated to\na completely different namespace, \u003ccode class=\"verbatim\"\u003eclojure.template\u003c/code\u003e (in what follows, I\nwill ignore the error checking):\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Clojure code:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro are [argv expr \u0026amp; args]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ;; ... error checking\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  `(clojure.template/do-template ~argv (is ~expr) ~@args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ;; ... error checking\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nA few macro expansions shows what\u0026#39;s happening:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Clojure code:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(macroexpand-1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(are [nums prod]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (= prod (reduce * nums))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    []      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [1]     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [2 2 2] 8))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003egives\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(clojure.template/do-template\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e [nums prod]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (clojure.test/is (= prod (reduce * nums)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e []      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e [1]     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e [2 2 2] 8)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n\u003ccode class=\"verbatim\"\u003edo-template\u003c/code\u003e is also a macro.  Simply running \u003ccode class=\"verbatim\"\u003emacroexpand-1\u003c/code\u003e again shows\nwhat it does:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Clojure code:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(macroexpand-1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(clojure.template/do-template\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   [nums prod]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (clojure.test/is (= prod (reduce * nums)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   []      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   [1]     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   [2 2 2] 8))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003egives\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(do (clojure.test/is (= 1 (reduce * [])))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (clojure.test/is (= 1 (reduce * [1])))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (clojure.test/is (= 8 (reduce * [2 2 2]))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe expanded code is exactly equivalent to what you would write if you\ndidn\u0026#39;t have the \u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e macro.  This is accomplished by simply repeating\nthe code being invoked, but substituting the actual example values for\n\u003ccode class=\"verbatim\"\u003enums\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003eprod\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nIn order to do accomplish the same in Common Lisp, we take a bottom-up approach.\nFirst, we need to split our test cases into groups corresponding to\nthe number of columns in our \u003ccode class=\"verbatim\"\u003eargv\u003c/code\u003e vector (in this case, 2):\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(let ((cases \u0026#39;(#()      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               #(1)     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               #(2 2 2) 8)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (partition-n 2 2 cases))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;((#()      1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (#(1)     1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (#(2 2 2) 8))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe output looks very similar to \u003ccode class=\"verbatim\"\u003ecases\u003c/code\u003e, but each pair has been\ngrouped into its own list.  Here I use \u003ccode class=\"verbatim\"\u003epartition-n\u003c/code\u003e from \u003ca href=\"https://github.com/eigenhombre/cl-oju\"\u003e\u003ccode class=\"verbatim\"\u003ecl-oju\u003c/code\u003e\u003c/a\u003e, a\nCommon Lisp library I wrote specifically to take advantage of sequence\nidioms from the Clojure core library; \u003ccode class=\"verbatim\"\u003epartition-n\u003c/code\u003e is a translation\nof Clojure\u0026#39;s \u003ccode class=\"verbatim\"\u003epartition\u003c/code\u003e function.  (\u003ca href=\"https://github.com/clojure/clojure/blob/master/src/clj/clojure/template.clj#L55\"\u003eThe equivalent code\u003c/a\u003e in\n\u003ccode class=\"verbatim\"\u003eclojure.template\u003c/code\u003e also uses \u003ccode class=\"verbatim\"\u003epartition\u003c/code\u003e for the same purpose.)\u003c/p\u003e\n\u003cp\u003e\nWe now need to flesh out those cases by making use of each example in\nthe expression being tested, whose Common Lisp translation is\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(is (= prod (reduce #\u0026#39;* nums)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nFor example, if \u003ccode class=\"verbatim\"\u003enums\u003c/code\u003e is \u003ccode class=\"verbatim\"\u003e#(2 2 2)\u003c/code\u003e, then \u003ccode class=\"verbatim\"\u003eprod\u003c/code\u003e should be \u003ccode class=\"verbatim\"\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nIn other words, we want our test cases to be:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(is (= 1 (reduce #\u0026#39;* #())))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(is (= 1 (reduce #\u0026#39;* #(1))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(is (= 8 (reduce #\u0026#39;* #(2 2 2)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe replacement of symbols with their actual values in the Clojure\ncode \u003ca href=\"eww:\"\u003eis accomplished\u003c/a\u003e with a tree-walking function called\n\u003ccode class=\"verbatim\"\u003epostwalk-replace\u003c/code\u003e.  We can do it in Common Lisp with the \u003ccode class=\"verbatim\"\u003esubst\u003c/code\u003e\nfunction, which works on linear or nested lists:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(subst 3 \u0026#39;b \u0026#39;(* (+ b b) (/ b (- b b))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(* (+ 3 3) (/ 3 (- 3 3)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nBut because we have multiple bindings or example arguments we have to\nconvert, we need to do it repeatedly:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun apply-bindings (bindings case expr)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (loop with ret = expr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        for b in bindings\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        for c in case\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        do (setf ret (subst c b ret))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        finally (return ret)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(apply-bindings \u0026#39;(x y) \u0026#39;(2 3) \u0026#39;(+ x y))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(+ 2 3)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nNow we have everything we need to expand our test cases:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(let ((argv \u0026#39;(nums prod))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (expr \u0026#39;(is (= prod (reduce #\u0026#39;* nums))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (c (length argv))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (cases \u0026#39;(#()      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               #(1)     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               #(2 2 2) 8)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (loop for case in (partition-n c c cases)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        collect (apply-bindings argv case expr)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;((IS (= 1 (REDUCE #\u0026#39;* #())))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (IS (= 1 (REDUCE #\u0026#39;* #(1))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (IS (= 8 (REDUCE #\u0026#39;* #(2 2 2)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nAll the macro has to do is wrap this in a \u003ccode class=\"verbatim\"\u003eprogn\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defmacro are (argv expr \u0026amp;rest cases)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Analog of clojure.test/are.  Apply multiple assertions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  based on some set up code and variations of one or more\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  variable bindings.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let ((c (length argv)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    `(progn ,@(loop for case in (partition-n c c cases)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    collect (apply-bindings argv case expr)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\ngiving, for our example:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(macroexpand-1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#39;(are (nums prod)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (is (= prod (reduce #\u0026#39;* nums)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   #()      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   #(1)     1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   #(2 2 2) 8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#39;(PROGN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (IS (= 1 (REDUCE #\u0026#39;* #())))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (IS (= 1 (REDUCE #\u0026#39;* #(1))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (IS (= 8 (REDUCE #\u0026#39;* #(2 2 2)))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is equivalent to the macroexpansion of Clojure\u0026#39;s \u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e that we\nsaw above.  I leave as an exercise for the reader a further\nexploration of \u003ccode class=\"verbatim\"\u003eclojure.template/apply-template\u003c/code\u003e and its use in the\n\u003ccode class=\"verbatim\"\u003edo-template\u003c/code\u003e macro; and the addition of error checking such as making\nsure the number example values is a multiple of the number of binding\narguments.\u003c/p\u003e\n\u003cp\u003e\nOne rough edge that I glossed over: in my first attempt, my macro couldn\u0026#39;t find\n\u003ccode class=\"verbatim\"\u003eapply-bindings\u003c/code\u003e at compile time until I wrapped that function\u0026#39;s definition as follows:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(eval-when (:compile-toplevel :load-toplevel :execute)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (defun apply-bindings (...) ...))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is apparently needed for functions used by macros defined in the\nsame file; it\u0026#39;s not an issue for functions defined in other\nfiles. Since Clojure has a single-pass compiler, this sort of ceremony\nis not needed for Clojure macros.\u003c/p\u003e\n\u003cp\u003e\nI expect to use this macro again, so will probably spin it out into a\nsmall stand-alone library or incorporate it into a thin wrapper around\n1AM.  Here it is in action in the \u003ccode class=\"verbatim\"\u003ehbook\u003c/code\u003e library where our discussion started:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(test hist-values-test\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (are (h c mn mx heights xs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (progn\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (is (= c (hist-count h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (is (= mn (hist-min h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (is (= mx (hist-max h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (is (equalp heights (hist-bin-heights h)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (is (equalp xs (hist-bin-xs h))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (histogram \u0026#39;(1 2)     2)   2 1 2 #(1 1)   #(1 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (histogram \u0026#39;(1 2 1)   2)   2 1 2 #(2 1)   #(1 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       (histogram \u0026#39;(1 2 2 3) 3)   3 1 3 #(1 2 1) #(1 2 3)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe code which \u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e makes possible is usually denser and can be\nharder to parse initially than more repetitive test code would, as is\nclear from this example.  However, I find the brevity of \u003ccode class=\"verbatim\"\u003eare\u003c/code\u003e tests\nextremely helpful, especially when comparing the test examples to each\nanother.  Such examples are especially helpful when calling out edge\ncases where behavior changes. I have given such tables to stakeholders\nmany times, in order to make sure we are aligned on what the behavior\nshould be. (Even if the stakeholder doesn\u0026#39;t care about the details of\nyour implementation or your test code \u003cem\u003eper se\u003c/em\u003e, they probably \u003cem\u003ewill\u003c/em\u003e\ncare about the specific examples you provide).\u003c/p\u003e\n\u003cp\u003e\nParenthetically, here is \u003ca href=\"https://github.com/eigenhombre/hbook\"\u003ethe histogramming library\u003c/a\u003e in action, showing the\ndistribution of the sum of 1000 six-sided dice:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun d () (1+ (random 6)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defun dn (n) (loop repeat n sum (d)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(princ (hbook (loop repeat 100000 collect (dn 1000))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              80\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              30))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      4962                                       X  X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      4791                                       X  X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      4620                                     X X  X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      4449                                     X X  X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      4278                                     X XXXXXX X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      4106                                     X XXXXXX X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      3935                                   X XXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      3764                                   XXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      3593                                   XXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      3422                                   XXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      3251                                   XXXXXXXXXXXXX X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      3080                                  XXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      2909                                X XXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      2738                                XXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      2566                                XXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      2395                                XXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      2224                               XXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      2053                              XXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1882                              XXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1711                              XXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1540                             XXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1369                             XXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1198                           XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      1027                           XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       856                         XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       684                         XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       513                       XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       342                       XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       171                    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         0 X   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    X\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                     111222233344544544443332211111\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            11223568933623981977003313702313558540076333111\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                      11244625381526456400925471219232518023527888048930961854221 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           1   11235564827658185382948873231241519783970927498485883199710549330480234    1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           33333333333333333333333333333333333333333333333333333333333333333333333333333333\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           22222222233333333333333334444444444444445555555555555555666666666666666677777777\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           45566788900122344556778990112334456678890011233455677899001223445667889901123345\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           40639628518417306395285184073062952851740739629528417406396295184173063962851841\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           ................................................................................\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           04826059371504826159371604827159372604827159382604837159382604937159482604937150\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           02457912468913578024579134680135780246791346802357902467913568023579124689135680\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/tco/\"\u003eAdding Tail Call Optimization to A Lisp Written in Go\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/l1/\"\u003e(Yet Another) Lisp In Go\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2022-07-13T00:00:00Z",
  "Author": "John Jacobsen"
}