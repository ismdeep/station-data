{
  "Source": "johnj.com",
  "Title": "Programming Languages",
  "Link": "http://johnj.com/posts/programming-languages/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eProgramming Languages\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/python\"\u003e\u003cspan class=\"python-tag\"\u003epython\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2011-12-22T00:00:00Z\"\u003e\n      December 22, 2011\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/continuous-testing/\"\u003eContinuous Testing in Python, Clojure and Blub\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/milvans-and-container-malls/\"\u003eMilvans and Container Malls\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/c17-clojure-koans.jpg\"\u003e\u003cimg class=\"resize\" src=\"/c17-clojure-koans_hu6f04b8530673b6e2cc009e9b6d51ea4d_1070452_700x0_resize_q75_box.jpg\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nWorking on Clojure Koans while riding on a C-17, bound for Antarctica\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nToday I am inspired to ponder many languages at once and review which\nones I use regularly, which ones I’m curious about, which ones I\navoid, and what I’d like to use, if it were to exist.\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nProgramming Languages I Use Regularly\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-2\"\u003e\nPython\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-3\"\u003e\n\u003cp\u003eBy far the language I use most for work. I like it for its clean\nphilosophy, its expressiveness, its “batteries included” extensive set\nof libraries, and, first and foremost, for its readability.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-3\"\u003e\nC\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-3\"\u003e\n\u003cp\u003eOf all the languages I use regularly, C is the one I learned first. I\nmaintain a large Linux kernel device driver I wrote for the \u003ca href=\"http://icecube.wisc.edu/\"\u003eIceCube\nproject\u003c/a\u003e as well as an embedded system written for 5000+ sensors\ndesigned for the same.\u003c/p\u003e\n\u003cp\u003e\nC now feels like assembly language to me but I still appreciate its\npower and elegance.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-4\"\u003e\nClojure\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI have dabbled in Lisp since the 1980s but not seriously until\nrecently. Somewhat seduced by Paul Graham’s \u003ca href=\"http://www.paulgraham.com/avg.html\"\u003eessays on Lisp\u003c/a\u003e and\nencouraged by a bit of a Lisp renaissance, I have started reading up\non Clojure and working through problems on \u003ca href=\"https://4clojure.oxal.org/\"\u003e4clojure.com\u003c/a\u003e. While not\nwithout its warts, I like many things about Clojure, including the\nLisp “code-as-data” philosophy, availability of macros (something I\nwish Python had) and its interoperability with Java classes. While I\ndoubt I’ll be able to use this in my paying work any time soon, I have\nstarted playing with Clojure for personal projects. Having to deal\nwith significantly concurrent systems in my work, I am intrigued by\nfunctional programming, as opposed to the usual object-oriented\napproaches where state is king and \u003ca href=\"https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\"\u003ewhere tangled hierarchies of\nrelatively meaningless relationships\u003c/a\u003e can obscure intent.  Clojure\ntakes an interesting approach, with its emphasis on immutability,\nsoftware-transactional memory and other concurrency primitives.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-5\"\u003e\nBash / Unix Tools\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-3\"\u003e\n\u003cp\u003eIt amuses me slightly to include Bash here, but combining simple\niteration with conditional statements and adding basic Unix concepts\nand tools such as pipelines, \u003ccode class=\"verbatim\"\u003egrep\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003eawk\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003esed\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003ewc\u003c/code\u003e, etc. is\nsurprisingly powerful. Every small Bash trick or new tiny-Unix-tool I\nlearn seems to eliminate the need for some number of actual programs,\nat least for quick-and-dirty work. The results tend to be obscure and\nhard to parse; if I can do something in a single line of bash, I will;\notherwise I’ll resort to Python for most things.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-6\"\u003e\nJavascript / Coffeescript\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-3\"\u003e\n\u003cp\u003eNot my favorite language by any stretch, but you can’t avoid it if\nyou’re working in the browser (I don’t consider closed-source Flash an\noption). The language has a lot of warts, but some \u003ca href=\"http://shop.oreilly.com/product/9780596517748.do\"\u003egood parts\u003c/a\u003e too. I\ncan feel the Lisp bones deep underneath the surface of the language\nwhen I dive into JavaScript. CoffeeScript is sweet because it’s so\nmuch more readable and offers protection from common JavaScript\ngotchas, but has \u003ca href=\"http://lucumr.pocoo.org/2011/12/22/implicit-scoping-in-coffeescript/\"\u003esome flaws of its own\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-7\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-7\"\u003e\nProgramming Languages I Have Used in the Past but Tend to Avoid\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-7\" class=\"outline-text-2\"\u003e\n\u003cdiv id=\"outline-container-headline-8\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-8\"\u003e\nPerl\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-8\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI fell in love with the power of Perl (“the duct-tape of the\nInternet”) back in the 1990s, but now dislike its strange, ad-hoc\nsyntax and the relative inscrutability when compared to Python.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-9\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-9\"\u003e\nJava\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-9\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI haven’t done a ton of Java development, but have done enough to be\nirritated by certain things about it: its extremely verbose syntax,\nstrict typing, distance from the actual hardware, and lack of (at\nleast until now) anonymous functions (“lambda”). Also the JVM startup\ntime is irritating, a problem Clojure inherits from Java (though \u003ca href=\"https://github.com/ninjudd/drip\"\u003ethere\nare workarounds\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003e\nJava has become so ubiquitous, however, that it’s hard to avoid, and\nit does have a certain self-consistent habitability to it. I think\ncurrent JVM languages such as Clojure and Scala will only strengthen\nthe role of Java and the JVM in modern computing, unless Oracle\nmassively screws things up.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-10\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-10\"\u003e\nC++\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-10\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nAnother language I’ve played with a bit. A language that splits the\ndifference between C and Java (I realize C++ came before Java); I\nwould prefer to write in a “real” higher level language and glue C in\nwhere needed.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-11\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-11\"\u003e\nFORTRAN\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-11\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI’m sorry to say that, coming from physics, I’ve written more FORTRAN\ncode than I care to admit. I find it interesting, however, that while\nLisp and FORTRAN are almost the same age, Lisp still holds interest\nwhere FORTRAN does not (except to pure number-crunchers, due to\nancient and venerable numeric libraries).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-12\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-12\"\u003e\nLanguages I’m Curious About But Haven’t Had Time to Look At Much\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-12\" class=\"outline-text-2\"\u003e\n\u003cp\u003eExposure to purely functional programming and lazy evaluation in\nClojure made me curious about Haskell.\u003c/p\u003e\n\u003cp\u003e\nI am curious about Erlang, which is supposed to have excellent\nconcurrency features.\u003c/p\u003e\n\u003cp\u003e\nI saw some talks about Go at OSCON. Go looks like it has some really\nnice features compared to C (compilation speed, concurrency support,\nand improved readability), but it may be a bit low-level for my\ninterests.\u003c/p\u003e\n\u003cp\u003e\nI have only tinkered with Objective-C, but that is the language of\nchoice for serious Mac OS X or iOS development. Its syntax looks\npretty odd, but perhaps that’s a small price to pay for running on all\nthat pretty hardware.\u003c/p\u003e\n\u003cp\u003e\nPurely logical languages such as Prolog (equivalents of which can be\neasily implemented in Lisp) are of interest for their ability to\nprocess large amount of semantically-related content. I’m curious\nabout expert systems, ontologies, the Semantic Web, and many other\nrelated areas of AI research.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-13\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-13\"\u003e\nThe Language I Wish Existed\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-13\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nThe perfect language would:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBe very readable, like Python (whitespace or other visual cues\nprobably playing a significant role)\u003c/li\u003e\n\u003cli\u003eSupport full Lisp-like macros (“homoiconicity”)\u003c/li\u003e\n\u003cli\u003eHave very broad library support (Python, Java, …)\u003c/li\u003e\n\u003cli\u003eHave built-in features in support of test-driven development\n(Python’s doctests and Clojure’s :test metadata seem like just the\nbeginning of what might be possible)\u003c/li\u003e\n\u003cli\u003eHandle concurrency very well (Clojure, Erlang, … but not Python)\u003c/li\u003e\n\u003cli\u003eRun in the browser, or be implemented efficiently on top of\nJavaScript\u003c/li\u003e\n\u003cli\u003eAllow you to get very close to the machine if necessary, or at\nleast the bytecodes of the virtual machine or interpreter (Python,\nC, C++, …)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePoints 1-3 are the most important to me. Resolving the tension between\npoints 1 and 2 is of particular interest.\u003c/p\u003e\n\u003cp\u003e\nI doubt such a language will come along any time soon. But I’m taking\n\u003ca href=\"http://www.dabeaz.com/chicago/compiler.html\"\u003ea class next month\u003c/a\u003e which, who knows? … might help someday.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/continuous-testing/\"\u003eContinuous Testing in Python, Clojure and Blub\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/milvans-and-container-malls/\"\u003eMilvans and Container Malls\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2011-12-22T00:00:00Z",
  "Author": "John Jacobsen"
}