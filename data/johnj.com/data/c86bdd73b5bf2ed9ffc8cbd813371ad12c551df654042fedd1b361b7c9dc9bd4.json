{
  "Source": "johnj.com",
  "Title": "Nucleotide Repetition Lengths",
  "Link": "http://johnj.com/posts/nucleotide-repetition-lengths/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eNucleotide Repetition Lengths\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/genomics\"\u003e\u003cspan class=\"genomics-tag\"\u003egenomics\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2013-11-03T00:00:00Z\"\u003e\n      November 3, 2013\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/fun-with-instaparse/\"\u003eFun with Instaparse\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/updating-the-genome-decoder-resulting-consequences/\"\u003eUpdating the Genome Decoder\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cp\u003e\nAfter a long hiatus, let’s continue \u003ca href=\"/posts/exploratory-genomics-with-clojure\"\u003eour foray into amateur genomics\nwith Clojure\u003c/a\u003e, in which we continue to encounter elegant expressions of\nClojure’s power as well as a few additional wrinkles in the Clojure\necosystem (in this case, Incanter).\u003c/p\u003e\n\u003cp\u003e\nIn \u003ca href=\"/posts/updating-the-genome-decoder-resulting-consequences\"\u003eour last post\u003c/a\u003e we upgraded our genome decoder and used it to show\nfrequencies of the four nucleotides, illustrating \u003ca href=\"http://en.wikipedia.org/wiki/Chargaff\u0026#39;s_rules\"\u003eChargaff’s Rule\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nAnother simple question to be asked of the data is, What is the\ndistribution of nucleotide repetition lengths? In other words, if we\nrepresent the number of times any nucleotide is repeated as a\nhistogram, then \u003ccode class=\"verbatim\"\u003eAAGGCATTTT\u003c/code\u003e would yield two entries for 1, two entries\nfor 2, zero for 3, and one for 4. What does this distribution look\nlike for the entire human or yeast genome?\u003c/p\u003e\n\u003cp\u003e\nAs a “null hypothesis”, consider the likelihood of getting $N$ A’s\nwhen drawing at random from A, G, C or T. The probability for the\nfirst selection to be A is 25%; for the first two draws to be AA the\nprobability is $P(AA) = {1 \\over {4^2}} = 0.625$, and for $N$\nconsecutive draws, $P(A \\times N) = 4^{-N}$.\u003c/p\u003e\n\u003cp\u003e\nYou can easily simulate (“\u003ca href=\"http://en.wikipedia.org/wiki/Monte_Carlo_method\"\u003eMonto Carlo\u003c/a\u003e”) such a situation using a\npurely random sequence:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn randgenome []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (repeatedly #(rand-nth [:A :G :C :T])))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis function yields a sequence like \u003ccode class=\"verbatim\"\u003e(:A :A :C :A :T :G :G :T :G :A :C :C ...)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nTo convert this into repetition lengths, we can first divide the\nsequence up into repeating elements using \u003ccode class=\"verbatim\"\u003epartition-by\u003c/code\u003e and the\n\u003ccode class=\"verbatim\"\u003eidentity\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(partition-by identity (randgenome))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt; ((:A :A) (:C) (:A) (:T) (:G :G) (:T) (:G) (:A) (:C :C) ...)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nExtracting the lengths is then trivial: just map \u003ccode class=\"verbatim\"\u003ecount\u003c/code\u003e over the\nsequences:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn get-lengths [s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (-\u0026gt;\u0026gt; s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (partition-by identity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (map count)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(get-lengths (randgenome))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt; (2 1 1 1 2 1 1 1 2 ...)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n(Note: running these functions unmodified will hang your REPL, since\n\u003ccode class=\"verbatim\"\u003erandgenome\u003c/code\u003e yields an infinite sequence! Wrap them with \u003ccode class=\"verbatim\"\u003etake\u003c/code\u003e if\nneeded.)\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-1\"\u003e\nHistogramming the data\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nThe plots in my previous posts were made by the \u003cdel\u003esimple\u003c/del\u003e easy\nexpedient of copying data into a Numbers spreadsheet on my Mac. We’d\nlike to eventually do some more ambitious plotting, however, so let’s\ninvestigate a Clojure-based solution.\u003c/p\u003e\n\u003cp\u003e\n\u003ca href=\"http://incanter.org/\"\u003eIncanter\u003c/a\u003e provides a broad set of Clojure-based utilities for data\nanalysis, including matrices and linear algebra operations,\nstatistical distributions, and so on. Built on top of \u003ca href=\"http://www.jfree.org/jfreechart/\"\u003eJFreeChart\u003c/a\u003e, it\nimplements several different kinds of plots, including histograms, and\nit should be an obvious candidate for displaying our length\ndistribution histogram.\u003c/p\u003e\n\u003cp\u003e\nUnfortunately, because of \u003ca href=\"https://github.com/liebke/incanter/issues/210\"\u003etwo\u003c/a\u003e \u003ca href=\"https://github.com/liebke/incanter/issues/211\"\u003eissues\u003c/a\u003e I discovered, Incanter will not\nwork for our purposes. To make a long story short, it \u003ca href=\"https://github.com/liebke/incanter/issues/210\"\u003edoes not handle\nempty (zero) entries\u003c/a\u003e in histograms properly when displaying on a\nlogarithmic scale, and it \u003ca href=\"https://github.com/liebke/incanter/issues/211\"\u003egenerates out-of-memory errors\u003c/a\u003e when given\nmore than a million or so entries. (Coming from high energy physics,\nwhere such histograms are extremely common, these both seem like\nserious flaws to me, which I hope will be remedied in the next\nIncanter release.)\u003c/p\u003e\n\u003cp\u003e\nI wound up using the \u003ca href=\"http://www.jfree.org/jfreechart/api/javadoc/index.html\"\u003eJFreeChart API\u003c/a\u003e directly, though this was very\ntime consuming, as the API has approximately the same complexity as\nthe entire US space program or the Large Hadron Collider. (In what\nfollows below I elide details about false starts, descriptions of hair\npulling, and expletives.)\u003c/p\u003e\n\u003cp\u003e\nFirst, I needed to convert the lengths from \u003ccode class=\"verbatim\"\u003eget-lengths\u003c/code\u003e into a\nhistogram with arbitrarily many entries:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn make-hist\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Convert seq of input xs into a histogram of nbins bins, from xmin to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  xmax.  Discard overflows or underflows\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [xmin xmax nbins xs]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [;; \u0026#34;base\u0026#34; histogram (zeros):\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        zero-map (into (sorted-map)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       (map (fn [x] [x 0]) (range nbins)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ;; get actual bin values for every input in xs:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        xbins (map #(int (* nbins (/ (- % xmin)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                     (- xmax xmin))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                   xs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        ;; strip out undeflows \u0026amp; overflows:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        no-overflows (-\u0026gt;\u0026gt; xbins\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          (remove #(\u0026lt; % 0))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          (remove #(\u0026gt;= % nbins)))]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ;; yield histogram as array of [ibin, height] pairs:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (into [] (reduce #(update-in %1 [%2] inc) zero-map no-overflows))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nSupplying the minimum and maximum value ahead of time simplifies the\nhistogramming code substantially and allows us to choose the same\nrange for multiple plots, as will be shown below.\u003c/p\u003e\n\u003cp\u003e\nArmed with this transformation, the generation of the histogram plot\nis as follows:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(ns jenome.graphs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (:import [org.jfree.data.xy XYSeriesCollection XYSeries]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           [org.jfree.chart ChartFrame JFreeChart]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           [org.jfree.chart.plot XYPlot]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           [org.jfree.chart.axis NumberAxis]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           [org.jfree.chart.renderer.xy XYBarRenderer StandardXYBarPainter]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           [org.jfree.chart.renderer.category]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn trim-zeros \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Convert zeros (or negatives) to small positive values to allow for\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  graphing on log scale\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [vals]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (map (fn [[x y]] [x (if (\u0026gt; y 0) y 0.0001)]) vals))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn draw-hist\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Draw histogram of bins as generated by make-hist\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [x-label values]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [renderer (XYBarRenderer.)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        painter (StandardXYBarPainter.)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        series (XYSeries. [])\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        blue (java.awt.Color. 0x3b 0x6c 0x9d)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        coll (XYSeriesCollection. series)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        y-axis (org.jfree.chart.axis.LogarithmicAxis. \u0026#34;Entries\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        plot (XYPlot. coll (NumberAxis. x-label) y-axis renderer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        panel (JFreeChart. plot)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        frame (ChartFrame. \u0026#34;Histogram\u0026#34; panel)]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (doto plot\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setBackgroundAlpha 0.0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setRangeGridlinesVisible false)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setDomainGridlinesVisible false))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (doto renderer\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setBarPainter painter)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setPaint blue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setDrawBarOutline true)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setOutlinePaint blue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setOutlineStroke (java.awt.BasicStroke. 1))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setShadowVisible false))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (doseq [[x y] values]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.add series (+ x 0.5) y))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (.setLowerBound y-axis 0.5)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (.setVisible (.getLegend panel) false)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (doto frame\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setSize 800 250)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (.setVisible true))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nI will omit a detailed explanation of how \u003ccode class=\"verbatim\"\u003edraw-hist\u003c/code\u003e works because I’m\nstill not a JFreeChart expert (though if I do many more blog posts on\nthis topic I may be forced to become one, however reluctantly). The\nprincipal difference with the Incanter implementation of histograms is\nthat we provide our own set of bin heights and simply plot those. This\nfollows a better separation of concerns anyways: our fairly simple\nbinning function remains separate from the visual presentation of the\nbin positions and heights (we could, for example, add the counting of\noverflows and underflows – this is left as an exercise to the reader).\u003c/p\u003e\n\u003cp\u003e\n(\u003ccode class=\"verbatim\"\u003etrim-zeros\u003c/code\u003e exists to transform bin values of zero to small positive\nnumbers to avoid taking the logarithm of zero, which is undefined.)\u003c/p\u003e\n\u003cp\u003e\nArmed with these tools, we can now make our first distribution:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(-\u0026gt;\u0026gt; (randgenome)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (take 1000000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     get-lengths\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (make-hist 0.5 60.5 60)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     trim-zeros\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (draw-hist \u0026#34;Repeat Lengths, random hypothesis\u0026#34;))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/random-repeat-lengths.png\"\u003e\u003cimg class=\"resize\" src=\"/random-repeat-lengths_hu3a99e6ed674249628cb53714a138eb82_53529_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nNucleotide repetition lengths for the random hypothesis\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nAs expected by our analysis above, this shows the falling “\u003ca href=\"http://en.wikipedia.org/wiki/Power_law\"\u003epower-law\u003c/a\u003e”\ndistribution of randomly-occuring nucleotide repetitions. Compare this\nwith the genome for the yeast \u003cem\u003eS. Cerviciae\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(-\u0026gt;\u0026gt; (genome-sequence yeast)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     get-lengths\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (make-hist 0.5 60.5 60)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     trim-zeros\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (draw-hist \u0026#34;Repeat Lengths, S. Cerviciae\u0026#34;))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/yeast-repeat-lengths.png\"\u003e\u003cimg class=\"resize\" src=\"/yeast-repeat-lengths_hudb98bff6be3daf3c96c29335ef8e2751_59514_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nNucleotide repetition lengths for the yeast S. Cerviciae\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nAnd, for humans (here we did not wait for the result for the entire genome):\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(-\u0026gt;\u0026gt; (genome-sequence human)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (take 10000000)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     get-lengths\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (make-hist 0.5 60.5 60)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     trim-zeros\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (draw-hist \u0026#34;Repeat Lengths, human genome\u0026#34;))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/human-repeat-lengths.png\"\u003e\u003cimg class=\"resize\" src=\"/human-repeat-lengths_hu82575b6ebeda6bdb7decc6c9690fc198_60161_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nNucleotide repetition lengths for humans\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nThe actual genome data clearly deviate from our null hypothesis of\nrandomness, as one might expect. However, these graphs raise more\nquestions than they answer. In particular, note that there is a sort\nof bimodal characteristic or extended, secondary bump in the data for\nhumans, with hints of an outlier feature on the tail which may or may\nnot just be a statistical fluctuation.\u003c/p\u003e\n\u003cp\u003e\nOne complicating factor we neglected is the role of “N-blocks”, which\nshould be eliminated without introducing artificially longer lengths;\ne.g. \u003ccode class=\"verbatim\"\u003eANNNNA\u003c/code\u003e with the Ns removed should be considered two 1-blocks\nrather than a two-block \u003ccode class=\"verbatim\"\u003eAA\u003c/code\u003e group. This simple modification to\n\u003ccode class=\"verbatim\"\u003eget-lengths\u003c/code\u003e is left as another exercise to the reader (the change does\nnot affect the resulting distributions).\u003c/p\u003e\n\u003cp\u003e\nA real biologist could no doubt tell us a lot about these\ndistributions. Meanwhile, \u003ca href=\"https://github.com/eigenhombre/jenome\"\u003ethe latest code\u003c/a\u003e has been pushed to GitHub.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/fun-with-instaparse/\"\u003eFun with Instaparse\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/updating-the-genome-decoder-resulting-consequences/\"\u003eUpdating the Genome Decoder\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2013-11-03T00:00:00Z",
  "Author": "John Jacobsen"
}