{
  "Source": "johnj.com",
  "Title": "Fun with Instaparse",
  "Link": "http://johnj.com/posts/fun-with-instaparse/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eFun with Instaparse\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2013-11-12T00:00:00Z\"\u003e\n      November 12, 2013\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/lazy-physics/\"\u003eLazy Physics\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/nucleotide-repetition-lengths/\"\u003eNucleotide Repetition Lengths\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/instaparse-example.jpg\"\u003e\u003cimg class=\"resize\" src=\"/instaparse-example_hu72b32862f686597e24064a70ac954538_834118_700x0_resize_q75_box.jpg\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\nOne of my favorite talks from this month’s excellent \u003ca href=\"http://clojure-conj.org/\"\u003eClojure/conj\u003c/a\u003e was\n\u003ca href=\"http://gigasquid.github.io/\"\u003eCarin Meier\u003c/a\u003e\u0026#39;s presentation, which combined storytelling, live coding,\nphilosophy, the history of computing, and flying robotic drones. She\nused the relatively new \u003ca href=\"https://github.com/Engelberg/instaparse\"\u003eInstaparse library\u003c/a\u003e to create her own language\nto explore something called “Speech Acts” (which I won’t go into here,\nbut do catch the video of her talk when it goes up).\u003c/p\u003e\n\u003cp\u003e\nMy university work was in physics (and art) rather than CS, but I have\nlong been interested in the implementation of programming languages,\neven going so far as to write a simple parser for Lisp-style math\nexpressions in Pascal many years ago. Last year I had the opportunity\nto take the first “\u003ca href=\"http://dabeaz.blogspot.com/2012/01/compiler-experiment-begins.html\"\u003ewrite a compiler in Python\u003c/a\u003e” class offered by \u003ca href=\"http://dabeaz.com/\"\u003eDavid\nBeazley\u003c/a\u003e here in Chicago, in which we implemented a subset of the Go\nlanguage. His \u003ca href=\"http://www.dabeaz.com/ply/index.html\"\u003ePLY library\u003c/a\u003e is a great way to get started with\nimplementing language parsers in Python, and the relative ease of\ndoing so, compared with classic C implementations described in the\ninfamous \u003ca href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\"\u003eDragon Book\u003c/a\u003e, inspired me to do some further \u003ca href=\"https://github.com/eigenhombre/PyClojure\"\u003eexperimentation\nof my own\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nWith this background, and inspired by Carin’s talk, I have been\nwaiting for an opportunity to try out Instaparse, which is getting\ngreat press in the Clojure world. Instaparse takes a grammar as input\n(in the form of a string), and gives you a parser in the language\nspecified by that grammar. It will also let you specify rules for\ntransforming the resulting tree into something your Clojure program\ncan use more directly (for example, by converting data types or\nremoving unneeded elements from the parse tree).\u003c/p\u003e\n\u003cp\u003e\nWhen the need arose this weekend to read in Python configuration files\ninto a Clojure program, I decided the time was ripe. I also wanted to\ndocument the journey using some form of \u003ca href=\"http://en.wikipedia.org/wiki/Literate_programming\"\u003eliterate programming\u003c/a\u003e. A\nlibrary called \u003ca href=\"https://github.com/gdeer81/marginalia\"\u003eMarginalia\u003c/a\u003e (Michael Fogus et. al.) made this pretty\neasy.\u003c/p\u003e\n\u003cp\u003e\nThe results are on \u003ca href=\"https://github.com/eigenhombre/parsepy\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nMy impressions, after doing this project in just a few hours, are that\n(1) literate programming is great fun; and (2) Instaparse sets a new\nstandard for power and expressiveness when converting structured text\ninto abstract syntax trees. If you have a DSL or some other\ntext-based, formal language you want to parse, and you are either\nliterate in Clojure or interested in becoming so, Instaparse would be\na great tool to check out.\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/lazy-physics/\"\u003eLazy Physics\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/nucleotide-repetition-lengths/\"\u003eNucleotide Repetition Lengths\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2013-11-12T00:00:00Z",
  "Author": "John Jacobsen"
}