{
  "Source": "johnj.com",
  "Title": "To The Metal... Compiling Your Own Language(s)",
  "Link": "http://johnj.com/posts/to-the-metal/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eTo The Metal... Compiling Your Own Language(s)\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/forth\"\u003e\u003cspan class=\"forth-tag\"\u003eforth\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/compilers\"\u003e\u003cspan class=\"compilers-tag\"\u003ecompilers\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/llvm\"\u003e\u003cspan class=\"llvm-tag\"\u003ellvm\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2024-08-06T00:00:00Z\"\u003e\n      August 6, 2024\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/wrangling-dreams/\"\u003eWrangling Half a Thousand Dreams\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/eclipse.jpg\"\u003e\u003cimg class=\"resize\" src=\"/eclipse_hu176ad2ddadd93ab92434f1a2bbb803bb_1656136_700x0_resize_q75_box.jpg\" style=\"width:400px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\nLike many programmers, I have programming \u003ca href=\"/posts/in-defense-of-hobbies/\"\u003ehobbies\u003c/a\u003e.  One of these is\nimplementing new languages.  My most recent language project, \u003ca href=\"https://github.com/eigenhombre/l1/\"\u003el1\u003c/a\u003e, was\na Lisp dialect whose primary data types are symbols and\narbitrarily-large integers.\u003c/p\u003e\n\u003cp\u003e\nI\u0026#39;ve been happy with \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e, but it is interpreted; since I was actively\nworking on it last (2022), I\u0026#39;ve been wondering about the best way to\ngenerate \u003cem\u003ecompiled\u003c/em\u003e standalone executable programs, written in \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e or\nany other language.\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nThe Problem In General\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nExecution models for programming languages take three basic\napproaches, listed in increasing order of speed:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eTree-walking interpreter\u003c/strong\u003e: Programs are read and parsed into ASTs\nin memory, then executed step-by-step by an interpreter.  This\nis the approach \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e uses.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBytecode VM\u003c/strong\u003e: Programs are compiled into a sort of abstract\nmachine language, simpler than the physical processor\u0026#39;s, and\nexecuted by a virtual machine (VM).  Java and Python work this way.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMachine code generation\u003c/strong\u003e: The code is directly compiled into\nmachine language and executed on the user\u0026#39;s hardware.  C and C++\nprograms work this way.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLanguages using Option 2 often add just-in-time compilation to machine\ncode, for extra performance.  Option 3 is typically fastest, but is\nsometimes skipped in introductory compiler classes and tutorials.  For\nexample, Robert Nystrom\u0026#39;s excellent \u003cem\u003e\u003ca href=\"https://craftinginterpreters.com/\"\u003eCrafting Interpreters\u003c/a\u003e\u003c/em\u003e book\ndevotes the first section to implementing a tree-walking interpreter\nimplementation in Java and the second half to a compiler and bytecode\nVM written in C, with minimal coverage of how to target physical\nhardware.  And the (also excellent) \u003ca href=\"https://dabeaz.com/compiler.html\"\u003eclass on compiler writing\u003c/a\u003e that I\ntook from David Beazley, in its first incarnation, stopped at the\npoint of generating of so-called intermediate representation (IR)\noutput (though students in the current iteration of the class do\ncompile to native code, using LLVM).\u003c/p\u003e\n\u003cp\u003e\nCompiling to machine code is tricky because CPUs are inherently\ncomplex. Real hardware is intricate, cumbersome, and unintuitive if\nyou\u0026#39;re primarily accustomed to high-level languages. Additionally,\nthere are numerous significant variants to consider (e.g., CPU/GPU,\nARM/Intel, 32-bit/64-bit architectures).\u003c/p\u003e\n\u003cp\u003e\nBut targeting machine code rather than interpreters or bytecode VMs is\nappealing, not just because it is an interesting challenge, but also\nbecause the resulting artifacts are small, stand-alone, and typically\nvery fast.  While running Python, Ruby, and Java programs require the\nappropriate infrastructure to be in place on the target machine at all\ntimes, Go, Rust, and C programs (among others) benefit from targeting\nthe physical hardware: their programs tend to be smaller, and can be\ndeployed to identical computers simply by copying the executable file,\nneeding to deploy the interpreter, extra libraries, etc. to the target\nmachine(s).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nSmall Is Beautiful\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nAs a programmer who came up during the dawn of personal computers, I\nhave some nostalgia for an era when programs or even entire operating\nsystems fit on a few-hundred-kB floppy disk.  Much existing software\nfeels bloated to me, though some widespread tools are still lean and\nfast. For illustration purposes, here are the physical sizes of some\nof the venerable command-line Unix programs I use on a daily basis\n(this is on MacOS):\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProgram\u003c/th\u003e\n\u003cth class=\"align-right\"\u003eSize (kB)\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003ewc\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e100\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003ecat\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e116\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003edf\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e116\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003emore\u003c/code\u003e\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e360\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\nThese were chosen more or less at random from my \u003ccode class=\"verbatim\"\u003ebash\u003c/code\u003e history and\nare representative of old-school Unix utilities.  For comparison,\niMovie on my Mac is \u003cstrong\u003e2.8 GB\u003c/strong\u003e, several thousand times larger than the\nlargest of these.  Of course, the comparison is somewhat ludicrous -\niMovie does many amazing things… but I use all the above programs\nhundreds or thousands of times more often than I do iMovie, so it\u0026#39;s\ngood that that they are compact and run quickly.  In a time of\nincreasingly bloated software stacks,\nI find myself especially drawn to simple tools with small footprints.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-3\"\u003e\nAn Approach\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nIf targeting physical hardware is hard, what tools can we use to make\nthe job easier?\u003c/p\u003e\n\u003cp\u003e\nI recently started learning about \u003ca href=\"https://llvm.org/\"\u003eLLVM\u003c/a\u003e, a modular set of compiler\ntools which \u0026#34;can be used to develop a frontend for any programming\nlanguage and a backend for any instruction set architecture\u0026#34;\n(\u003ca href=\"https://en.wikipedia.org/wiki/LLVM\"\u003eWikipedia\u003c/a\u003e).  LLVM has been used heavily in the Rust toolchain and in\nApple\u0026#39;s developer tools.\u003c/p\u003e\n\u003cp\u003e\nThe \u0026#34;modular\u0026#34; adjective is critical here: LLVM is separated into\nfront-end, back-end and optimizing parts thanks to a shared\n\u0026#34;\u003ca href=\"https://en.wikipedia.org/wiki/Intermediate_representation\"\u003eintermediate representation\u003c/a\u003e\u0026#34; (IR) – a sort of portable assembly\nlanguage which represents simple computation steps in a\nmachine-independent but low-level manner.\u003c/p\u003e\n\u003cp\u003e\nThe LLVM IR takes a little getting used to but, with a little\npractice, is reasonably easy to read, and, more importantly, to\ngenerate.\u003c/p\u003e\n\u003cp\u003e\nAs an example, consider the following simple C program, \u003ccode class=\"verbatim\"\u003ethree.c\u003c/code\u003e,\nwhich stores the number 3 in a variable and uses it as its exit code.\nWe will use \u003ccode class=\"verbatim\"\u003eclang\u003c/code\u003e, the LLVM C/C++/Obj-C/… compiler for the LLVM\necosystem:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cat three.c\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eint x = 3;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eint main() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  return x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ clang three.c -o three\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./three; echo $?\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nOne can easily view, and possibly even understand, the assembler\noutput for such a simple program:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ clang -O3 -S three.c -o three.s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cat -n three.s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     1\t\t.section\t__TEXT,__text,regular,pure_instructions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     2\t\t.build_version macos, 14, 0\tsdk_version 14, 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     3\t\t.globl\t_main                           ; -- Begin function main\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     4\t\t.p2align\t2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     5\t_main:                                  ; @main\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     6\t\t.cfi_startproc\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     7\t; %bb.0:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     8\tLloh0:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     9\t\tadrp\tx8, _x@PAGE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    10\tLloh1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    11\t\tldr\tw0, [x8, _x@PAGEOFF]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    12\t\tret\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    13\t\t.loh AdrpLdr\tLloh0, Lloh1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    14\t\t.cfi_endproc\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    15\t                                        ; -- End function\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    16\t\t.section\t__DATA,__data\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    17\t\t.globl\t_x                              ; @x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    18\t\t.p2align\t2, 0x0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    19\t_x:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    20\t\t.long\t3                               ; 0x3\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    21\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    22\t.subsections_via_symbols\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nIn comparison, here is the LLVM IR for the same program:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ clang -S -emit-llvm three.c -o three.ll\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cat -n three.ll\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     1\t; ModuleID = \u0026#39;three.c\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     2\tsource_filename = \u0026#34;three.c\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     3\ttarget datalayout = \u0026#34;e-m:o-i64:64-i128:128-n32:64-S128\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     4\ttarget triple = \u0026#34;arm64-apple-macosx14.0.0\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     6\t@x = global i32 3, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     7\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     8\t; Function Attrs: noinline nounwind optnone ssp uwtable(sync)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     9\tdefine i32 @main() #0 {\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    10\t  %1 = alloca i32, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    11\t  store i32 0, ptr %1, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    12\t  %2 = load i32, ptr @x, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    13\t  ret i32 %2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    14\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    15\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    16\tattributes #0 = { noinline nounwind optnone ssp ;; .... very long list...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    17\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    18\t!llvm.module.flags = !{!0, !1, !2, !3, !4}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    19\t!llvm.ident = !{!5}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    20\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    21\t!0 = !{i32 2, !\u0026#34;SDK Version\u0026#34;, [2 x i32] [i32 14, i32 4]}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    22\t!1 = !{i32 1, !\u0026#34;wchar_size\u0026#34;, i32 4}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    23\t!2 = !{i32 8, !\u0026#34;PIC Level\u0026#34;, i32 2}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    24\t!3 = !{i32 7, !\u0026#34;uwtable\u0026#34;, i32 1}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    25\t!4 = !{i32 7, !\u0026#34;frame-pointer\u0026#34;, i32 1}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    26\t!5 = !{!\u0026#34;Apple clang version 15.0.0 (clang-1500.3.9.4)\u0026#34;}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThere is a fair amount of stuff here, but a lot of it looks\nsuspiciously like metadata we don\u0026#39;t really care about for our\nexperiments going forward.  The, uh, \u003ccode class=\"verbatim\"\u003emain\u003c/code\u003e region of interest is from\nlines 9-14 – notice that the function definition itself looks a\nlittle more readable than the assembly language version, but slightly\nlower-level than the original C program.\u003c/p\u003e\n\u003cp\u003e\nYou can turn the IR into a runnable program:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ clang -O3 three.ll -o three\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./three; echo $?\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe approach I explore here is to \u003cem\u003egenerate\u003c/em\u003e LLVM IR \u0026#34;by fair means or foul.\u0026#34;\nHere, let\u0026#39;s just edit our IR down to something more minimal and see how it goes.\nI suspect the \u003ccode class=\"verbatim\"\u003estore\u003c/code\u003e of \u003ccode class=\"verbatim\"\u003e0\u003c/code\u003e in \u0026#34;register\u0026#34; \u003ccode class=\"verbatim\"\u003e%1\u003c/code\u003e is gratuitous, so\nlet\u0026#39;s try to remove it, along with all the metadata:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cat 3.ll\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etarget triple = \u0026#34;x86_64-apple-macosx14.0.0\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e@x = global i32 3, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edefine i32 @main() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  %1 = load i32, ptr @x, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ret i32 %1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ clang -O3 3.ll -o 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./3; echo $?\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is frankly not much more complicated than the C code, and it\nshows a helpful strategy at work:\u003c/p\u003e\n\u003cp\u003e\nStep 1: To understand how to accomplish something in LLVM IR,\nwrite the corresponding C program and use \u003ccode class=\"verbatim\"\u003eclang\u003c/code\u003e to generate\nthe IR, being alert for possible \u0026#34;extra stuff\u0026#34; like we saw\nin the example.\u003c/p\u003e\n\u003cp\u003e\nStep 2. Try to generate, and test, working programs from the IR you\nwrite or adapt, making adjustments as desired.\u003c/p\u003e\n\u003cp\u003e\nThere is another, optional step as well:\u003c/p\u003e\n\u003cp\u003e\nStep 3. Use, or write, language \u0026#34;bindings\u0026#34; to drive LLVM generation\nfrom the language of your choice.  This is the step we will consider next.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-4\"\u003e\nEnter Babashka\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nWhile one can write LLVM IR directly, as we have seen, we are\ninterested in compiling other languages (possibly higher-level ones of\nour own invention), so we will want to \u003cem\u003egenerate\u003c/em\u003e IR somehow.  For\nthis project I chose \u003ca href=\"https://babashka.org/\"\u003eBabashka\u003c/a\u003e, an implementation of the \u003ca href=\"https://clojure.org/\"\u003eClojure\u003c/a\u003e\nprogramming language I have found ideal for small projects where both\nstart-up speed and expressiveness are important.\u003c/p\u003e\n\u003cp\u003e\n(I assume some familiarity with Lisp and Clojure in this post; for those\njust getting started, \u003ca href=\"https://www.braveclojure.com/\"\u003eClojure for the Brave and True\u003c/a\u003e is a good introduction.)\u003c/p\u003e\n\u003cp\u003e\nThe repo \u003ca href=\"https://github.com/eigenhombre/llbb\"\u003ehttps://github.com/eigenhombre/llbb\u003c/a\u003e contains the source files\ndiscussed here.  The bulk of the code in this repo is in \u003ca href=\"https://github.com/eigenhombre/llbb/blob/master/llir.bb\"\u003e\u003ccode class=\"verbatim\"\u003ellir.bb\u003c/code\u003e\u003c/a\u003e, a\nsource file which provides alternative definitions in Clojure for\ncommon LLVM idioms.  Some of these are trivial translations:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def m1-target \u0026#34;arm64-apple-macosx14.0.0\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn target [t] (format \u0026#34;target triple = \\\u0026#34;%s\\\u0026#34;\u0026#34; t))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n… whereas other expressions leverage the power of Clojure to a\ngreater degree.  For example, this section defines translations used\nto represent arithmetic operations:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn arithm [op typ a b]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (format \u0026#34;%s %s %s, %s\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          (name? op)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          (name? typ)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          (sigil a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          (sigil b)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn add [typ a b] (arithm :add typ a b))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn sub [typ a b] (arithm :sub typ a b))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn mul [typ a b] (arithm :mul typ a b))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn div [typ a b] (arithm :sdiv typ a b))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(comment\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (div :i32 :a :b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;sdiv i32 %a, %b\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (add :i8 :x 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;add i8 %x, 1\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nYou can see this approach at work by representing the C program\ndiscussed earlier:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(module\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (assign-global :i :i32 3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (def-fn :i32 :main []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (assign :retval (load :i32 :i))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (ret :i32 :retval)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nwhich evaluates to\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etarget triple = \u0026#34;arm64-apple-macosx14.0.0\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e@i = global i32 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edefine i32 @main() nounwind {\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  %retval = load i32, i32* @i, align 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ret i32 %retval\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nI use here a slightly different but equivalent pointer syntax for the\n\u003ccode class=\"verbatim\"\u003eload\u003c/code\u003e expression than output by \u003ccode class=\"verbatim\"\u003eclang\u003c/code\u003e in the example above.\u003c/p\u003e\n\u003cp\u003e\nTwo very small helper functions allow me to test out small programs quickly:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(require \u0026#39;[babashka.process :as sh])\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Use `bash` to run command(s) `s`, capturing both stdout/stderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  as a concatenated string.  Throw an exception if the exit code\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  is nonzero.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [{:keys [out err]}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        (sh/shell {:out :string, :err :string}\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  (format \u0026#34;bash -c \u0026#39;%s\u0026#39;\u0026#34; s))]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (str/join \u0026#34;\\n\u0026#34; (remove empty? [out err]))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nand\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(require \u0026#39;[babashka.fs :as fs])\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn compile-to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Save IR `body` to a temporary file and compile it, writing the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  resulting binary to `progname` in the current working directory.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [progname body]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [ll-file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        (str (fs/create-temp-file {:prefix \u0026#34;llbb-\u0026#34;, :suffix \u0026#34;.ll\u0026#34;}))]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (spit ll-file body)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (sh (format \u0026#34;clang -O3 %s -o %s\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                ll-file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                progname))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThese two together allow me to test small programs out quickly at the\nREPL.  Some examples follow, obtained by running the C compiler for\nequivalent programs, generating and inspecting the LLVM IR, and\ntranslating them into new Clojure bindings as cleanly as possible.\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eMinimum viable program\u003c/strong\u003e: just return zero:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(compile-to \u0026#34;smallest-prog\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (module\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             (def-fn :i32 :main []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (ret :i32 0))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(sh \u0026#34;./smallest-prog; echo -n $?\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n\u003cstrong\u003eArgument count\u003c/strong\u003e: return, as the exit code, the number of arguments,\nincluding the program name:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Argument counting: return number of arguments as an exit code:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(compile-to \u0026#34;argcount\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (module\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             (def-fn :i32 :main [[:i32 :arg0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 [:ptr :arg1_unused]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (assign :retptr (alloca :i32))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (store :i32 :arg0 :ptr :retptr)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (assign :retval (load :i32 :retptr))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (ret :i32 :retval))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(sh \u0026#34;./argcount; echo -n $?\u0026#34;) ;;=\u0026gt; \u0026#34;1\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(sh \u0026#34;./argcount 1 2 3; echo -n $?\u0026#34;) ;;=\u0026gt; \u0026#34;4\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n\u003cstrong\u003eHello, world\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(let [msg \u0026#34;Hello, World.\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      n (inc (count msg))] ;; Includes string terminator\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (compile-to \u0026#34;hello\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (module\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (external-fn :i32 :puts :i8*)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (def-global-const-str :message msg)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e               (def-fn :i32 :main []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 (assign :as_ptr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                         (gep (fixedarray n :i8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              (star (fixedarray n :i8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              (sigil :message)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              [:i64 0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              [:i64 0]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 (call :i32 :puts [:i8* :as_ptr])\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 (ret :i32 0)))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(sh \u0026#34;./hello\u0026#34;) ;;=\u0026gt; \u0026#34;Hello, World.\\n\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis is the first program one typically writes in a new programming\nlanguage.  Note that we use here idioms (\u003ccode class=\"verbatim\"\u003eexternal-fn\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003ecall\u003c/code\u003e) to\ndefine and invoke an external function from the C standard library.\u003c/p\u003e\n\u003cp\u003e\nLet\u0026#39;s see how big the resulting program is:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(sh \u0026#34;ls -l hello\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#34;-rwxr-xr-x  1 jacobsen  staff  33432 Aug 14 21:09 hello\\n\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nAt this point I want to pause to reconsider one of the points of this\nexercise, which is to produce small programs. Here are the rough\nexecutable sizes for a \u0026#34;Hello, World\u0026#34; example program in various\nlanguages that I use frequently:\u003c/p\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eLanguage\u003c/td\u003e\n\u003ctd\u003eSize\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003eRelative Size\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eCommon Lisp\u003c/td\u003e\n\u003ctd\u003e38 MB\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e1151\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eClojure\u003c/td\u003e\n\u003ctd\u003e3.4 MB\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e103\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGo\u003c/td\u003e\n\u003ctd\u003e1.9 MB\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e58\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eC\u003c/td\u003e\n\u003ctd\u003e33 kB\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLLVM IR\u003c/td\u003e\n\u003ctd\u003e33 kB\u003c/td\u003e\n\u003ctd class=\"align-right\"\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\nI threw Clojure in there for comparison even though, unlike the other\nexamples, the resulting überjar also requires a Java bytecode VM in\norder to run.  The programs generated from C and from LLVM IR are\nequivalent; this is not surprising, given that I used the C program to\nguide my writing and translation of the LLVM IR.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-5\"\u003e\nBuilding A Compiling Calculator\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nWe are now ready to implement a \u0026#34;compiler\u0026#34; for something approaching a\nuseful language, namely, greatly reduced subset of \u003ca href=\"https://en.wikipedia.org/wiki/Forth_(programming_language\"\u003eForth\u003c/a\u003e.  Forth is a\nstack-based language created in the 1970s and still in use\ntoday, especially for small embedded systems.\u003c/p\u003e\n\u003cp\u003e\nLLVM will handle the parts commonly known as \u0026#34;compiler backend\u0026#34; tasks,\nand Babashka will provide our \u0026#34;frontend,\u0026#34; namely breaking the text into\ntokens and parsing them.  This task is made easy for us, because Forth\nis syntactically quite simple, and Babashka relatively powerful. Here are\nthe language rules we will adopt:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProgram tokens are separated by whitespace.\u003c/li\u003e\n\u003cli\u003eNon-numeric tokens are math operators.\u003c/li\u003e\n\u003cli\u003eOnly integer operands are allowed.\u003c/li\u003e\n\u003cli\u003eComments begin with \u003ccode class=\"verbatim\"\u003e\\\\\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eForth expressions typically place the arguments first, and the operator\nlast (so-called \u0026#34;reverse-Polish notation\u0026#34;).  Here is an example program\nwhich does some math and prints the result:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def example \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 2 +  \\\\ 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e5 *    \\\\ multiply by five to get 20\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 /    \\\\ divide by 2 -\u0026gt; 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-1 +   \\\\ add -1 -\u0026gt; 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e8 -    \\\\ subtract 8 -\u0026gt; 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.      \\\\ prints \u0026#39;1\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe code in \u003ca href=\"https://github.com/eigenhombre/llbb/blob/master/forth.bb\"\u003e\u003ccode class=\"verbatim\"\u003eforth.bb\u003c/code\u003e\u003c/a\u003e handles the parser, whose goal is to consume the\nraw program text and generate an abstract syntax tree (in our case, just\na list) of operations to translate into IR:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn strip-comments\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Remove parts of lines beginning with backslash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (str/replace s #\u0026#34;(?sm)^(.*?)\\\\.*?$\u0026#34; \u0026#34;$1\u0026#34;))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn tokenize\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Split `s` on any kind of whitespace\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [s]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (remove empty? (str/split s #\u0026#34;\\s+\u0026#34;)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defrecord node\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    [typ val] ;; A node has a type and a value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Object\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (toString [this]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (format \u0026#34;[%s %s]\u0026#34; (:typ this) (:val this))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; Allowed operations\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def opmap {\u0026#34;+\u0026#34; :add\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u0026#34;-\u0026#34; :sub\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u0026#34;/\u0026#34; :div\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u0026#34;*\u0026#34; :mul\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u0026#34;.\u0026#34; :dot\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u0026#34;drop\u0026#34; :drop})\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn ast\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Convert a list of tokens into an \\\u0026#34;abstract syntax tree\\\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  which in our Forth is just a list of type/value pairs.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  [tokens]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (for [t tokens\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        :let [op (get opmap t)]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (cond\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      ;; Integers (possibly negative)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (re-matches #\u0026#34;^\\-?\\d+$\u0026#34; t)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (node. :num (Integer. t))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      ;; Operations\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      op (node. :op op)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      :else (node. :invalid :invalid))))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nRunning this on our example,\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(-\u0026gt;\u0026gt; example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     strip-comments\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     tokenize\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     ast\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (map str))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(\u0026#34;[:num 2]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:num 2]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:op :add]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:num 5]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:op :mul]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:num 2]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:op :div]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:num -1]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:op :add]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:num 8]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:op :sub]\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u0026#34;[:op :dot]\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe remainder of \u003ccode class=\"verbatim\"\u003eforth.bb\u003c/code\u003e essentially just implements the needed\noperators, as well as the required stack and the reference to the \u003ccode class=\"verbatim\"\u003eprintf\u003c/code\u003e\nC library function.  It is perhaps a bit lengthy to go through here in\nits entirety, so I will share one example where Babashka helps:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn def-arithmetic-op [nam op-fn]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (def-fn :void nam []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (assign :sp (call :i32 :get_stack_cnt))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (if-lt :i32 :sp 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           (els)  ;; NOP - not enough on stack\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           (els\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (assign :value2\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    (call :i32 :pop))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (assign :value1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    (call :i32 :pop))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (assign :result (op-fn :i32 :value1 :value2))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            (call :void :push [:i32 :result])))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (ret :void)))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThis makes LLVM IR which does the following, in pseudo-code:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eget current stack position; ensure at least two entries (else return)\u003c/li\u003e\n\u003cli\u003epop the operands off the stack\u003c/li\u003e\n\u003cli\u003eapply the arithmetic operator to the operands\u003c/li\u003e\n\u003cli\u003eput the result on the stack\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplementing the four arithmetic operators is then as simple\nas invoking\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def-arithmetic-op :mul mul)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def-arithmetic-op :add add)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def-arithmetic-op :sub sub)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def-arithmetic-op :div div)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;; ...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nwhen generating the IR.\u003c/p\u003e\n\u003cp\u003e\nAside from the general-purpose LLVM IR code (\u003ccode class=\"verbatim\"\u003ellir.bb\u003c/code\u003e), the Forth\nimplementation is under two hundred lines.  It includes the invocation\nto \u003ccode class=\"verbatim\"\u003eclang\u003c/code\u003e to compile the temporary IR file to make the runnable\nprogram.  Here\u0026#39;s an example compilation session:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cat example.fs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \\\\ initial state          stack: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e3      \\\\ put 3 on stack.        stack: [3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e99     \\\\ put 99 on stack.       stack: [3, 99]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edrop   \\\\ discard top item.      stack: [3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edrop   \\\\ discard top item.      stack: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 2    \\\\ put 2 on stack, twice: stack: [2, 2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e+      \\\\ 2 + 2 = 4.             stack: [4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e5 *    \\\\ multiply 4 * 5.        stack: [20]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 /    \\\\ divide by 2.           stack: [10]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-1 +   \\\\ add -1                 stack: [9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e8 -    \\\\ subtract 8 -\u0026gt; 1        stack: [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.      \\\\ prints \u0026#39;1\u0026#39;             stack: [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edrop   \\\\ removes 1.             stack: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./forth.bb example.fs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe resulting program is fast, as expected…\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ time ./example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ereal\t0m0.007s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euser\t0m0.002s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esys\t0m0.003s\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n… and small:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ls -l ./example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rwxr-xr-x  1 jacobsen  staff  8952 Aug 16 09:52 ./example\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nLet\u0026#39;s review what we\u0026#39;ve done: we have implemented a small subset of Forth,\nwriting a compiler front-end in Babashka/Clojure to translate source programs\ninto LLVM IR, and using \u003ccode class=\"verbatim\"\u003eclang\u003c/code\u003e to turn the IR into compact binaries.  The\nresulting programs are small and fast.\u003c/p\u003e\n\u003cp\u003e\nSensible next steps would be to implement more of Forth\u0026#39;s stack\noperators, and maybe start to implement the \u003ccode class=\"verbatim\"\u003e:\u003c/code\u003e (colon) operator,\nForth\u0026#39;s mechanism for defining new symbols and functions.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-6\"\u003e\nLisp\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nInstead, let\u0026#39;s implement a different variant of our arithmetic\ncalculating language, using Lisp syntax (\u003ca href=\"https://en.wikipedia.org/wiki/S-expression\"\u003eS-expressions\u003c/a\u003e).  Consider our\nfirst Forth example:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 2 +\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e5 *\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2 /\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-1 +\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e8 -\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nIn Lisp, this looks like:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ cat example.lisp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(print (- (+ -1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e             (/ (* 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                   (+ 2 2))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                2))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          8))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nRather than coming last, as they did before (\u0026#34;postfix\u0026#34; notation), our\noperators come first (\u0026#34;prefix\u0026#34; notation). The order of operations is\ndetermined by parentheses, as opposed to using stack as we did for\nour Forth implementation.\u003c/p\u003e\n\u003cp\u003e\nHere Babashka helps us tremendously because such parenthesized prefix\nexpressions are valid \u003ca href=\"https://github.com/edn-format/edn\"\u003eEDN\u003c/a\u003e data, which the Clojure function\n\u003ccode class=\"verbatim\"\u003eclojure.edn/read-string\u003c/code\u003e can parse for us. But we need to convert the\nresulting nested list into the \u0026#34;SSA\u0026#34; (\u003ca href=\"https://en.wikipedia.org/wiki/Static_single-assignment_form\"\u003esingle static assignment\u003c/a\u003e)\nexpressions LLVM understands. This is relatively straightforward with\na recursive function which expands leaves of the tree and stores the\nresults as intermediate values:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn to-ssa [expr bindings]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (if (not (coll? expr))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    expr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (let [[op \u0026amp; args] expr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          result (gensym \u0026#34;r\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          args (doall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                (for [arg args]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  (if-not (coll? arg)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    arg\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    (to-ssa arg bindings))))]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (swap! bindings conj (concat [result op] args))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      result)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn convert-to-ssa [expr]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (let [bindings (atom [])]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (to-ssa expr bindings)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    @bindings))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nWe use \u003ccode class=\"verbatim\"\u003egensym\u003c/code\u003e here to get a unique variable name for each assignment,\nand \u003ccode class=\"verbatim\"\u003edoall\u003c/code\u003e to force the evaluation of the lazy for expansion of the\nargument terms. The result:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(-\u0026gt;\u0026gt; \u0026#34;example.lisp\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     slurp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     (edn/read-string)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     convert-to-ssa)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e;;=\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e[(r623 + 2 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (r622 * 5 r623)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (r621 / r622 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (r620 + -1 r621)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (r619 - r620 8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e (r618 print r619)]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe next step will be to actually write out the corresponding LLVM\nIR. The rest of \u003ccode class=\"verbatim\"\u003elisp.bb\u003c/code\u003e is satisfyingly compact.  Operators (we\nhave five, but more can easily be added), are just a map of symbols\nto tiny bits of LLVM code:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(def ops\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  {\u0026#39;* #(mul :i32 %1 %2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u0026#39;+ #(add :i32 %1 %2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u0026#39;/ #(div :i32 %1 %2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u0026#39;- #(sub :i32 %1 %2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u0026#39;print\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   #(call \u0026#34;i32 (i8*, ...)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          :printf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          [:i8* :as_ptr]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          [:i32 (sigil %1)])})\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nSimilar to our Forth implementation, but even more compact, the main Babashka function,\nafter a brief setup for \u003ccode class=\"verbatim\"\u003eprintf\u003c/code\u003e, generates a series of SSA instructions.\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(defn main [[path]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (when path\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    (let [assignments (-\u0026gt;\u0026gt; path\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           slurp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           edn/read-string\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           convert-to-ssa)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          outfile (-\u0026gt;\u0026gt; path\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       fs/file-name\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       fs/split-ext\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       first)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          ir (module\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (external-fn :i32 :printf :i8*, :...)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (def-global-const-str :fmt_str \u0026#34;%d\\n\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              (def-fn :i32 :main []\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                (assign :as_ptr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        (gep (fixedarray 4 :i8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             (star (fixedarray 4 :i8))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             (sigil :fmt_str)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             [:i64 0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             [:i64 0]))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                ;; Interpolate SSA instructions / operator invocations:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                (apply els\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                       (for [[reg op \u0026amp; args] assignments\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             :let [op-fn (ops op)]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                         (if-not op-fn\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           (throw (ex-info \u0026#34;bad operator\u0026#34; {:op op}))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           (assign reg (apply op-fn args)))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                (ret :i32 0)))]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (compile-to outfile ir))))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(main *command-line-args*)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nPutting these parts together (see \u003ca href=\"https://github.com/eigenhombre/llbb/blob/master/lisp.bb\"\u003e\u003ccode class=\"verbatim\"\u003elisp.bb\u003c/code\u003e\u003c/a\u003e on GitHub), we have:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./lisp.bb example.lisp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ./example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nIt, too, is small and fast:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ time ./example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ereal\t0m0.006s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euser\t0m0.001s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esys\t0m0.003s\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ ls -al ./example\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-rwxr-xr-x  1 jacobsen  staff  33432 Aug 16 20:52 ./example\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nTo say this is a \u0026#34;working Lisp compiler\u0026#34; at this point would be\ngrandiose (we still need functions, lists and other collection types,\neval, macros, …) but we have developed an excellent foundation\nto build upon.\u003c/p\u003e\n\u003cp\u003e\nTo summarize, the strategy we have taken is as follows:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUse a high level language (in our case, Babashka/Clojure) to parse\ninput and translate into LLVM IR;\u003c/li\u003e\n\u003cli\u003eWhen needed, write and generate small C programs to understand the\nequivalent IR to generate.\u003c/li\u003e\n\u003cli\u003eCompile the IR to small, fast binaries using \u003ccode class=\"verbatim\"\u003eclang\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-7\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-7\"\u003e\nAlternatives and Future Directions\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-7\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nI should note that C itself has long been used as an intermediate\nlanguage, and we could have used it here instead of LLVM IR; I don\u0026#39;t\nhave a strong sense of the tradeoffs involved yet, but wanted to take\nthe opportunity to learn more about LLVM for this project.\u003c/p\u003e\n\u003cp\u003e\nLLVM is interesting to me because of the modularity of its toolchain;\nit also provides a JIT compiler which allows one to build and execute\ncode at run-time.  We didn\u0026#39;t investigate tooling for that here (it\nneeds deeper LLVM language bindings than the homegrown Babashka code I\nused), but it could provide a way to do run-time compilation similar\nto what SBCL (a Common Lisp implementation which can compile functions\nat run-time) does.\u003c/p\u003e\n\u003cp\u003e\nHere are some directions I\u0026#39;m considering going forward:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTry interfacing with external libraries, e.g. a \u003ca href=\"https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic\"\u003ebignum\u003c/a\u003e library;\u003c/li\u003e\n\u003cli\u003eImplement more Forth functionality;\u003c/li\u003e\n\u003cli\u003eImplement more Lisp, possibly including a significant subset of \u003ccode class=\"verbatim\"\u003el1\u003c/code\u003e;\u003c/li\u003e\n\u003cli\u003eTry a JIT-based approach, possibly using Rust as the host language.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-8\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-8\"\u003e\nConclusion\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-8\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nWhenever possible, I want to make small, fast programs, and I like\nplaying with and creating small programming languages. LLVM provides a\nfascinating set of tools and techniques for doing so, and using\nBabashka to make small front-ends for IR generation turns out to be\nsurprisingly effective, at least for simple languages.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/wrangling-dreams/\"\u003eWrangling Half a Thousand Dreams\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2024-08-06T00:00:00Z",
  "Author": "John Jacobsen"
}