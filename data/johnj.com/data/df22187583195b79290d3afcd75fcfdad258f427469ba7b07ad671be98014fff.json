{
  "Source": "johnj.com",
  "Title": "Resources for Learning Clojure",
  "Link": "http://johnj.com/posts/resources-for-learning-clojure/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eResources for Learning Clojure\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/clojure\"\u003e\u003cspan class=\"clojure-tag\"\u003eclojure\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2012-05-21T00:00:00Z\"\u003e\n      May 21, 2012\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/process-vs-threads/\"\u003eProcesses vs. Threads for Integration Testing\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/continuous-testing/\"\u003eContinuous Testing in Python, Clojure and Blub\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003cp\u003e\nI thought I’d take a moment to present one possible path, or set of\nalternate paths, for learning Clojure, a modern Lisp implemented on\ntop of the Java Virtual Machine.\u003c/p\u003e\n\u003cp\u003e\n\u003cem\u003eUpdate:\u003c/em\u003e Since this was written in 2012, a number of additional\nexcellent books have come out. These include Carin Meier’s \u003cem\u003e\u003ca href=\"http://shop.oreilly.com/product/0636920034292.do\"\u003eLiving\nClojure\u003c/a\u003e\u003c/em\u003e; Vandgrift and Miller, \u003cem\u003e\u003ca href=\"https://pragprog.com/titles/vmclojeco/clojure-applied/\"\u003eClojure Applied\u003c/a\u003e\u003c/em\u003e; and Daniel\nHigginbotham’s, \u003ca href=\"http://www.braveclojure.com/\"\u003e\u003cem\u003eClojure for the Brave and True\u003c/em\u003e\u003c/a\u003e. These are all great\nchoices, and \u003cem\u003eClojure for the Brave and True\u003c/em\u003e is a strong competitor\nfor the best introductory Clojure book.\u003c/p\u003e\n\u003cp\u003e\nIn addition to a surprising number of very good resources out there\nfor such a young language, there are resources specific to other Lisps\nwhich map reasonably well onto Clojure.\u003c/p\u003e\n\u003cp\u003e\nClojure does have a learning curve, especially for one coming from\nimperative languages such as Java, Python, C++, or Ruby. These\nlanguages are, in some ways, more similar to each other than they are\nto functional languages such as Clojure (though they all have features\nwhich were pioneered originally in implementations of Lisp, one of the\noldest computer languages).\u003c/p\u003e\n\u003cp\u003e\nSince the approach I took was somewhat haphazard and I have the\nbenefit of some hindsight now, I present here a rough sequence which\nmight make the road a little less bumpy for others. Though not an\nexhaustive list of resources by any means, the following diagram\nsummarizes the discussion points that follows.\u003c/p\u003e\n\u003cfigure\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/learnclojure2.png\"\u003e\u003cimg class=\"resize\" src=\"/learnclojure2_huf5c5b222ba05c22a923cc60b1aa08d16_215812_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\n\u003cfigcaption\u003e\nA Flow Chart for Learning Clojure\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003e\nThe approach I recommend goes something like this:\u003c/p\u003e\n\u003cp\u003e\nIf you are going to pick just one of these resources to get started, I\nrecommend the O’Reilly book \u003ca href=\"http://www.clojurebook.com/\"\u003eClojure Programming\u003c/a\u003e by C. Emerick\net. al. I have both the PDF and print versions of this book, and it’s\nnot only an excellent book on Clojure, it’s one of the best O’Reilly\nbooks I’ve seen in the dozen or so years I’ve been reading them. The\nother two books are also good (I have not checked out the 2nd edition\nof Programming Clojure yet)… Clojure is particularly blessed in having\nnot just one but at least three excellent “starter books” on the\nlanguage.\u003c/p\u003e\n\u003cp\u003e\nIf you’re curious why one might want to learn a Lisp as your next (or\nlast?) programming language, Paul Graham \u003ca href=\"http://www.paulgraham.com/avg.html\"\u003eevangelizes\u003c/a\u003e very effectively\nabout Lisp in some of his many \u003ca href=\"http://www.paulgraham.com/articles.html\"\u003eessays\u003c/a\u003e. You might want to check those\nout before diving into Clojure per se.\u003c/p\u003e\n\u003cp\u003e\nAdditionally, videos of Rich Hickey’s talks, particularly \u003ca href=\"https://www.infoq.com/presentations/Simple-Made-Easy\"\u003eSimple Made\nEasy\u003c/a\u003e, though not so much about Lisp or Clojure per se, explain the\nchallenges and limitations involved with stateful Object-Oriented\nprogramming and motivate the ideas behind functional programming in\ngeneral and Clojure in particular. I very much recommend these videos,\nthough reaction to them among programmers I’ve shown them to has\nvaried wildly from enthusiasm to extreme irritation.\u003c/p\u003e\n\u003cp\u003e\nPeople with exposure to Common Lisp or Scheme may be familiar with\nAbelson and Sussman’s \u003ca href=\"http://mitpress.mit.edu/sicp/\"\u003eStructure and Interpretation of Computer\nPrograms\u003c/a\u003e; Friedman’s \u003ca href=\"http://www.ccs.neu.edu/home/matthias/BTLS/\"\u003eThe Little Schemer\u003c/a\u003e and its sequels \u003ca href=\"http://www.ccs.neu.edu/home/matthias/BTSS/\"\u003eThe Seasoned\nSchemer\u003c/a\u003e and \u003ca href=\"http://www.ccs.neu.edu/home/matthias/BRS/\"\u003eThe Reasoned Schemer\u003c/a\u003e ; and P. Seibel’s \u003ca href=\"http://www.gigamonkeys.com/book/\"\u003ePractical Common\nLisp\u003c/a\u003e, which I’ve only peeked at but which has an excellent\nreputation. These books could provide a gateway into Clojure, or might\nmerit a look at once you’ve got some Clojure basics under your belt. I\nfind them to be interesting supplemental reading.\u003c/p\u003e\n\u003cp\u003e\nBefore getting to the more advanced books, the \u003ca href=\"https://github.com/functional-koans/clojure-koans\"\u003eClojure Koans\u003c/a\u003e are a fun\nand pleasantly gradual way to start reinforcing your Clojure basics (I\nworked most of them on various airplane flights to the South Pole last\nyear). Similar but somewhat more challenging are the \u003ca href=\"https://4clojure.oxal.org/\"\u003e4clojure problems\u003c/a\u003e\n(I’m about 3/4 of the way through these).\u003c/p\u003e\n\u003cp\u003e\nI find these kinds of problems alternately soothing (when I get them\nright away) and maddening (when I actually have to work at them). They\nare like crossword puzzles for programmers, and they do really help\nreinforce the material from the books. Due to the way the problems are\nimplemented, they are unfortunately limited in terms of how they cover\nJava interoperability, macros, and concurrency.\u003c/p\u003e\n\u003cp\u003e\nAfter you’ve read an introductory text, worked some problems and maybe\nstarted one or two personal projects with the language, you’re ready\nfor \u003ca href=\"http://www.joyofclojure.com/\"\u003eThe Joy of Clojure\u003c/a\u003e. This book is somewhat hard to describe; I\nstarted it too early, then came back after six months and it made a\nwhole lot more sense. The best way to explain The Joy of Clojure is\nthat it helps you to understand both some of the quirks of the\nlanguage and what makes it truly great, and will help you evolve from\nwriting clumsy translations of what you’ve learned in other languages,\nto truly compact, elegant, idiomatic Clojure code.\u003c/p\u003e\n\u003cp\u003e\nAfter, or perhaps during, Joy of Clojure, take a deep dive into\nmacros, the secret sauce of Lisp. Macros allow one to implement new\nlanguage features in order to make one’s code elegant and expressive,\nand to optimize the fit to one’s problem domain. Paul Graham’s \u003ca href=\"http://www.paulgraham.com/onlisp.html\"\u003eOn Lisp\u003c/a\u003e\nis mostly about macros; Hoyte’s \u003ca href=\"http://letoverlambda.com/\"\u003eLet over Lambda\u003c/a\u003e refers to On Lisp many\ntimes and builds on some of the foundations laid in that book.\u003c/p\u003e\n\u003cp\u003e\nTo summarize (strongest suggestions in \u003cstrong\u003ebold\u003c/strong\u003e):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGraham essays\u003c/li\u003e\n\u003cli\u003eHickey videos\u003c/li\u003e\n\u003cli\u003eIntroductory book (\u003cstrong\u003eClojure Programming\u003c/strong\u003e, Programming Clojure, or\nPractical Clojure)\u003c/li\u003e\n\u003cli\u003ePossibly detour into SICP, Practical Common Lisp and/or The * Schemer books\u003c/li\u003e\n\u003cli\u003eClojure Koans\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e4Clojure Problems\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJoy of Clojure\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eOn Lisp\u003c/li\u003e\n\u003cli\u003eLet Over Lambda\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThere are many other Lisp books which I haven’t read yet, as well as a\nClojure book or two I’ve left out. Also, lest I forget, the Clojure\ncommunity has a reputation for being extremely welcoming and\nhelpful. There is a \u003ca href=\"http://groups.google.com/group/clojure\"\u003eGoogle Group\u003c/a\u003e / mailing list and an IRC chat as\nwell.\u003c/p\u003e\n\u003cp\u003e\nThe bottom line is that for such a young language (or young variant of\nan old language), we are fortunate to have such a rich selection of\nresources to pick and choose from. Enjoy!\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/process-vs-threads/\"\u003eProcesses vs. Threads for Integration Testing\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/continuous-testing/\"\u003eContinuous Testing in Python, Clojure and Blub\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2012-05-21T00:00:00Z",
  "Author": "John Jacobsen"
}