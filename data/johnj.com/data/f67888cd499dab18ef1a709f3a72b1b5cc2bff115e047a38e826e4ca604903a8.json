{
  "Source": "johnj.com",
  "Title": "Implementing Scheme in Python",
  "Link": "http://johnj.com/posts/scheme-in-python/",
  "Content": "\u003cmain class=\"content\"\u003e\n\n\n\u003ch1\u003eImplementing Scheme in Python\u003c/h1\u003e\n\n\n\u003cp\u003e\n\n\u003ca class=\"tag\" href=\"/tags/code\"\u003e\u003cspan class=\"code-tag\"\u003ecode\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/python\"\u003e\u003cspan class=\"python-tag\"\u003epython\u003c/span\u003e\u003c/a\u003e\n\n\u003ca class=\"tag\" href=\"/tags/lisp\"\u003e\u003cspan class=\"lisp-tag\"\u003elisp\u003c/span\u003e\u003c/a\u003e\n\n  ..... \u003cem\u003e\u003ctime class=\"postdate\" datetime=\"2019-08-28T00:00:00Z\"\u003e\n      August 28, 2019\n    \u003c/time\u003e\u003c/em\u003e\n\u003c/p\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/journaling-procedure/\"\u003eA Daily Journal in Org Mode\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/nupoc/\"\u003eShow at NUPOC\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/oewy.jpg\"\u003e\u003cimg class=\"resize\" src=\"/oewy_hu0461364e1721203cfa0f21cc1b835381_1511113_700x0_resize_q75_box.jpg\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-1\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-1\"\u003e\nBackground\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-1\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nLately I\u0026#39;ve been a bit of a Lisp kick again, reading \u003cem\u003e\u003ca href=\"http://www.paulgraham.com/onlisp.html\"\u003eOn Lisp\u003c/a\u003e\u003c/em\u003e and\n\u003cem\u003e\u003ca href=\"http://www.gigamonkeys.com/book/\"\u003ePractical Common Lisp\u003c/a\u003e\u003c/em\u003e, working \u003ca href=\"https://github.com/eigenhombre/99lisp/\"\u003eproblems\u003c/a\u003e and \u003ca href=\"https://github.com/eigenhombre/weeds\"\u003ere-casting\u003c/a\u003e my\n\u003ca href=\"https://github.com/eigenhombre/organa\"\u003eClojure-based blog software\u003c/a\u003e into Common Lisp to see how that goes. The\nurge to do these things caught me somewhat by surprise: in the past\nfew years I haven\u0026#39;t done much programming outside of my day job\nbecause I\u0026#39;ve been focused more on painting and drawing. It seems,\nthough, that these things are cyclical and right now I\u0026#39;m in the grips\nof Lisp mania again.\u003c/p\u003e\n\u003cp\u003e\nThis cycle goes back to the mid-1980s when I was a college student\nstudying physics and learning how to program. It\u0026#39;s hard to say how I\ngot the Lisp bug initially. I remember reading \u003ca href=\"https://en.wikipedia.org/wiki/Metamagical_Themas\"\u003eDouglas Hofstadter\u003c/a\u003e\u0026#39;s\nexplanation of recursive Lisp functions; hanging out near the AI\nworkstations in the basement of the Madison Academic Computing Center\nwhere I worked (the sans-serif Lisp program printouts looked way\nbetter than anybody else\u0026#39;s output); and reading about AI and Lisp on\nUsenet.  At any rate, I managed to pick up a copy of PC-Lisp, a port\nof \u003ca href=\"https://en.wikipedia.org/wiki/Franz_Lisp\"\u003eFranz Lisp\u003c/a\u003e to IBM PCs which apparently \u003ca href=\"https://github.com/blakemcbride/PC-LISP\"\u003eis still a thing\u003c/a\u003e after all\nthese years. Somewhat astonishingly, the interpreter ran on my\nunderpowered \u003ca href=\"https://en.wikipedia.org/wiki/IBM_PCjr\"\u003eIBM PCjr\u003c/a\u003e, loading from floppy disk in half a minute or\nso. I remember how even fairly small programs would pause for several\nseconds while the garbage collector did its thing. This interpreter,\nalong with a Lisp textbook I picked up somewhere, was enough to get me\nstarted learning about atoms, lists, \u003ccode class=\"verbatim\"\u003equote\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003ecar\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003ecdr\u003c/code\u003e,\nsymbolic computing, and simple recursive algorithms.\u003c/p\u003e\n\u003cp\u003e\nI also wrote a small s-expression parser in \u003ca href=\"https://en.wikipedia.org/wiki/Turbo_Pascal\"\u003eTurbo Pascal\u003c/a\u003e on the same\nPCjr as a way of graphing arbitrary math functions of two variables. I\nhad no compiler class but my roommate taught me enough about finite\nstate machines, lexers, parsers, etc. to be dangerous… enough\nknowledge to get my grapher up and running. (I wish I still had some\nof these old programs, but they vanished when I \u0026#34;lent\u0026#34; the computer\nand all my diskettes to a friend; they are probably landfill\nsomewhere.)\u003c/p\u003e\n\u003cp\u003e\nThis all subsided for several years while I got sucked into physics,\nthen painting, then capoeira, then physics, then painting, then\nsoftware engineering in C, Perl, and Python. In the early aughts I got\ninterested in Paul Graham\u0026#39;s \u003ca href=\"http://www.paulgraham.com/articles.html\"\u003ewriting\u003c/a\u003e, which led to a few skirmishes\nwith Common Lisp every couple of years, and ultimately to me getting\ntotally hooked on Clojure starting in 2011.\u003c/p\u003e\n\u003cp\u003e\nI intend to write more about what makes Lisps in general compelling\nfor me\u003csup class=\"footnote-reference\"\u003e\u003ca id=\"footnote-reference-1\" href=\"#footnote-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e and why I\u0026#39;ve returned to it over and over throughout my\ncareer. In the mean time….\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-2\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-2\"\u003e\nScheming in Python\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-2\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nHappily, my Lisp mania has crested coincidentally with Chicago Python\nteacher David Beazley announcing another \u003ca href=\"https://www.dabeaz.com/sicp.html\"\u003eclass\u003c/a\u003e on \u003ca href=\"https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs\"\u003eThe Structure and\nInterpretation of Computer Programs\u003c/a\u003e, a classic MIT computing text\nbased on a dialect of Lisp called Scheme, and I managed to get on the\nlist before it filled up. Since it\u0026#39;s been awhile since I\u0026#39;ve written\nmuch Python, I thought I\u0026#39;d warm up for the class by trying to write \u003ca href=\"https://github.com/eigenhombre/smallscheme\"\u003ea\nsmall Scheme implementation\u003c/a\u003e in Python. My hope was to refresh my\nmemory of the basics of Scheme, improve my slightly-dusty Python, and\nhave fun.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-3\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-3\"\u003e\nPrior Art\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-3\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nResearching this post (after most of the code was done), I noticed\nthat there are a \u003ca href=\"https://www.biostat.wisc.edu/~annis/creations/PyLisp/\"\u003eton\u003c/a\u003e \u003ca href=\"https://github.com/fogus/lithp\"\u003eof\u003c/a\u003e \u003ca href=\"http://petraszd-smallscheme.appspot.com/\"\u003esmall\u003c/a\u003e \u003ca href=\"https://github.com/juliusf/schemePy\"\u003eLisps\u003c/a\u003e \u003ca href=\"https://github.com/xielingwang/pyScheme\"\u003ewritten\u003c/a\u003e in Python (\u003ca href=\"https://github.com/eigenhombre/PyClojure\"\u003eincluding\u003c/a\u003e \u003ca href=\"https://github.com/drewr/clojure-py\"\u003etwo\u003c/a\u003e I\nworked on the better part of a decade ago). One that stuck out in my\nmemory was Peter Norvig\u0026#39;s hundred-odd-line \u003ca href=\"https://norvig.com/lispy.html\"\u003eLispy\u003c/a\u003e, which is\nparticularly striking in its elegance (in style, it reminds me of the\nLisp programs in \u003ca href=\"https://github.com/norvig/paip-lisp\"\u003ePAIP\u003c/a\u003e).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-4\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-4\"\u003e\nThe Stages\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-4\" class=\"outline-text-2\"\u003e\n\u003cp\u003eMy plan for writing the interpreter was to follow the actual REPL\nstages: Read, Eval, and Print. \u003cem\u003eRead\u003c/em\u003e would involve parsing input\nexpressions and turning them into data structures to be evaluated;\n\u003cem\u003eEval\u003c/em\u003e would be a (presumably recursive) step whereby, for function\ncalls, arguments would be \u003cem\u003eEval\u003c/em\u003e\u0026#39;ed first, with the results handed to\nthe appropriate code implementing the actual function, implemented\neither in Python (for a few primitive functions) or, eventually,\nthrough user-defined functions. An exception to the argument\nevaluation rule would have to be made for a few \u003cem\u003especial forms\u003c/em\u003e, which\nwould have to be handled on a case-by-case basis.\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-5\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-5\"\u003e\nParsing\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-5\" class=\"outline-text-3\"\u003e\n\u003cp\u003eMy first approach for the parser was to use \u003ca href=\"https://www.dabeaz.com/ply/\"\u003ePLY\u003c/a\u003e, which I\u0026#39;ve used\nbefore. Having been spoiled by the excellent \u003ca href=\"https://github.com/Engelberg/instaparse\"\u003eInstaparse\u003c/a\u003e library for\nClojure, upon returning to PLY I found the library\u0026#39;s interface\nrelatively clumsy and abstruse.\u003c/p\u003e\n\u003cp\u003e\nThen I thought I\u0026#39;d try a regex to parse everything, since Scheme\u0026#39;s\nbase syntax and grammar are so simple. The following regex actually\nworked well for awhile:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epat = \u0026#34;\u0026#34;\u0026#34;^\\s*\\((?P\u0026lt;list\u0026gt;.*)\\)$   # Something beginning/ending with parens, or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (?P\u0026lt;bool\u0026gt;(\\#t|\\#f))\\s*  # A boolean true/false value, or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         |                       # An atom starting w/ a letter or arithmetic op:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (?P\u0026lt;atom\u0026gt;[a-zA-Z\\+\\-\\*\\/]+[a-zA-Z0-9\\+\\-\\*\\/]*)\\s*\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (?P\u0026lt;num\u0026gt;[0-9]+)\\s*\u0026#34;\u0026#34;\u0026#34;   # Or, a positive natural number.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\n(I had not gotten to negative or floating point numbers at this stage\nof the project.)\u003c/p\u003e\n\u003cp\u003e\nExpressions of the form \u003ccode class=\"verbatim\"\u003e(+ 1 2 (+ 1 1 1))\u003c/code\u003e, for example, parsed\ncorrectly.  However, the regex didn\u0026#39;t handle lists that nested in\nother than the last position, for example, \u003ccode class=\"verbatim\"\u003e(+ (* 2 3) 4)\u003c/code\u003e. It might\nbe possible to do the whole problem with regular expressions, but at\nthis point I decided to look for a nice modern parser library that let\nme write down the grammer in EBNF notation and simply returned a parse\ntree when given a valid expression. I found \u003ca href=\"https://github.com/lark-parser/lark\"\u003eLark\u003c/a\u003e, which is roughly as\nfeatureful as Instaparse and worked well. Here\u0026#39;s the Lark grammar as\nit currently stands:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003estart  : _exprs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e_exprs : _e* _e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e_e     : ATOM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       | _num\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       | BOOL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       | list\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTRUE   : \u0026#34;#t\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFALSE  : \u0026#34;#f\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBOOL   : TRUE | FALSE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003elist   : \u0026#34;(\u0026#34; _exprs? \u0026#34;)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eINT    : /[-+]?[0-9]+/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eATOM   : /[a-zA-Z]+[a-zA-Z0-9\\-\\?]*/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       | /[\\*\\/\\=\\\u0026gt;\\\u0026lt;]/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       | /[\\-\\+](?![0-9])/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFLOAT  : /[-+]?[0-9]+\\.[0-9]*/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e_num   : INT | FLOAT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%import common.WS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e%ignore WS\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eNote that while libraries like Lark and Instaparse are a nice\nway to turn out a powerful parser quickly, Norvig\u0026#39;s \u003ccode class=\"verbatim\"\u003elis.py\u003c/code\u003e just\nsplits the inputs on open/close parens and uses them to\nincrease/decrease nesting level as they appear. The approach to\nparsing numbers is also elegant: try to parse it as an integer; if\nthat fails, as a float; otherwise, it\u0026#39;s a symbol (what my grammar\ncalls \u003ccode class=\"verbatim\"\u003eATOM\u003c/code\u003e). I suspect that using a \u0026#34;real\u0026#34; parser makes it easier to add more syntax to your language if needed, though.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-6\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-6\"\u003e\nData Model\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-6\" class=\"outline-text-3\"\u003e\n\u003cp\u003eOnce Lark parses an expression, I convert to my own internal\nrepresentation before evaluation (function \u003ca href=\"https://github.com/eigenhombre/smallscheme/blob/master/smallscheme/scheme.py#L52\"\u003e\u003ccode class=\"verbatim\"\u003econvert_ast\u003c/code\u003e\u003c/a\u003e). I did not\nuse objects to represent lists, atoms, etc., but just simple tuples\nand lists:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eData Type\u003c/th\u003e\n\u003cth\u003eExample\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eAtom\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003e(\u0026#39;atom\u0026#39;, \u0026#39;foo\u0026#39;)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBoolean\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003e(\u0026#39;bool\u0026#39;, True)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInt\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003e(\u0026#39;int\u0026#39;, 123)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFloat\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003e(\u0026#39;float\u0026#39;, 3.14)\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eList\u003c/td\u003e\n\u003ctd\u003e\u003ccode class=\"verbatim\"\u003e(\u0026#39;list\u0026#39;, [(\u0026#39;atom\u0026#39;, \u0026#39;define\u0026#39;), (\u0026#39;atom\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;int\u0026#39;, 3)])\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIt might be more idiomatic Python to use objects, but I\u0026#39;m more used to\nthinking in terms of nested structures of base data types (lists,\ntuples, dictionaries), which have the advantage of being easily\nprintable while debugging.\u003c/p\u003e\n\u003cp\u003e\nHere\u0026#39;s an example expression, parsed with Lark and then converted into\nmy internal representation:\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-7\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-7\"\u003e\nScheme raw source\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-7\" class=\"outline-text-4\"\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e(define (abs x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (if (\u0026lt; x 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      (- x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      x))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-8\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-8\"\u003e\nLark output\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-8\" class=\"outline-text-4\"\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTree(start,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     [Tree(list,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           [Token(ATOM, \u0026#39;define\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            Tree(list,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 [Token(ATOM, \u0026#39;abs\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  Token(ATOM, \u0026#39;x\u0026#39;)]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            Tree(list, [Token(ATOM, \u0026#39;if\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        Tree(list,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             [Token(ATOM, \u0026#39;\u0026lt;\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              Token(ATOM, \u0026#39;x\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              Token(INT, \u0026#39;0\u0026#39;)]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        Tree(list,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             [Token(ATOM, \u0026#39;-\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              Token(ATOM, \u0026#39;x\u0026#39;)]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                        Token(ATOM, \u0026#39;x\u0026#39;)])])])\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-9\" class=\"outline-4\"\u003e\n\u003ch4 id=\"headline-9\"\u003e\nInternal representation used in the interpreter\n\u003c/h4\u003e\n\u003cdiv id=\"outline-text-headline-9\" class=\"outline-text-4\"\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e[(\u0026#39;list\u0026#39;, [(\u0026#39;atom\u0026#39;, \u0026#39;define\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           (\u0026#39;list\u0026#39;, [(\u0026#39;atom\u0026#39;, \u0026#39;abs\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     (\u0026#39;atom\u0026#39;, \u0026#39;x\u0026#39;)]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           (\u0026#39;list\u0026#39;, [(\u0026#39;atom\u0026#39;, \u0026#39;if\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     (\u0026#39;list\u0026#39;, [(\u0026#39;atom\u0026#39;, \u0026#39;\u0026lt;\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               (\u0026#39;atom\u0026#39;, \u0026#39;x\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               (\u0026#39;int\u0026#39;, 0)]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     (\u0026#39;list\u0026#39;, [(\u0026#39;atom\u0026#39;, \u0026#39;-\u0026#39;),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               (\u0026#39;atom\u0026#39;, \u0026#39;x\u0026#39;)]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     (\u0026#39;atom\u0026#39;, \u0026#39;x\u0026#39;)])])]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-10\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-10\"\u003e\nEvaluation\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-10\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/eigenhombre/smallscheme/blob/master/smallscheme/scheme.py#L299\"\u003eEvaluation\u003c/a\u003e turned out, not surprisingly, to be where most of the work is; specifically, the individual cases for special forms. These were:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003equote\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003econd\u003c/code\u003e / \u003ccode class=\"verbatim\"\u003eif\u003c/code\u003e (I implemented these separately but, had I implemented\nmacros, I might implement one in terms of the other)\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003edefine\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003elambda\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003eor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode class=\"verbatim\"\u003eand\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAside from these, there was code for normal function application rules, with a slight variance between internally-defined functions and functioned defined by the user with \u003ccode class=\"verbatim\"\u003edefine\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\nI did not, \u003ca href=\"http://www.paulgraham.com/rootsoflisp.html\"\u003eas Paul Graham did\u003c/a\u003e, attempt to find the minimal subset of language elements needed to bootstrap a complete Lisp, though that is certainly an interesting exercise. My goal was to get my tests green in a straightforward way, as described below.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-11\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-11\"\u003e\nPrinting\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-11\" class=\"outline-text-3\"\u003e\n\u003cp\u003e\nThe \u003cem\u003ePrint\u003c/em\u003e stage needed to convert the internal representation of the\nevaluated result to a string, both for a user running a REPL, and for\nmy unit tests. This turned out to be simple enough that I can put the\nentire function here:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edef printable_value(ast):\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    k, v = ast\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;int\u0026#39; or k == \u0026#39;float\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return str(v)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;bool\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return {True: \u0026#34;#t\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                False: \u0026#34;#f\u0026#34;}.get(v)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;intproc\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return \u0026#34;Internal procedure \u0026#39;%s\u0026#39;\u0026#34; % v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;atom\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;list\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return \u0026#39;(\u0026#39; + \u0026#39; \u0026#39;.join([printable_value(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               for x in v]) + \u0026#39;)\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;nop\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return \u0026#39;\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    if k == \u0026#39;fn\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        (fn_name, _, _) = v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        if fn_name == \u0026#39;lambda\u0026#39;:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            return \u0026#34;Anonymous-function\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        return \u0026#34;Function-\u0026#39;%s\u0026#39;\u0026#34; % str(fn_name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    raise Exception(\u0026#39;Unprintable ast \u0026#34;%s\u0026#34;\u0026#39; % str(ast))\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nThe primitive data types (\u003ccode class=\"verbatim\"\u003eint\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003efloat\u003c/code\u003e, \u003ccode class=\"verbatim\"\u003ebool\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003eatom\u003c/code\u003e) are\nobvious enough; \u003ccode class=\"verbatim\"\u003eintproc\u003c/code\u003e and \u003ccode class=\"verbatim\"\u003efn\u003c/code\u003e are for internally-defined and\nuser-defined functions, respectively; finally, \u003ccode class=\"verbatim\"\u003enop\u003c/code\u003e is for when you\ndon\u0026#39;t want any value shown to the user (i.e., after one enters a\n\u003ccode class=\"verbatim\"\u003edefine\u003c/code\u003e expression, there is no output printed before the next\nprompt):\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003escheme\u0026gt; (define a 3)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003escheme\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-12\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-12\"\u003e\nTesting Approach\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-12\" class=\"outline-text-3\"\u003e\n\u003cp\u003eI used a fairly strict test-driven development workflow for this\nproject: write just enough new test code to fail; write just enough\nproduction code to get the test to pass; then refactor. This workflow\ngenerally serves me well for harder problems where I\u0026#39;m unlikely to see\nthe best way to do things from the outset and I expect to make many\nimprovements: I know the tests will have my back when I make\nchanges. This turned out to be the right approach, since I had to\npivot several times.\u003c/p\u003e\n\u003cp\u003e\nI didn\u0026#39;t just use tests drive the code forward, but let SICP drive the\n\u003cem\u003etests\u003c/em\u003e forward as well. When I needed the next thing to work on, all\nI had to do was turn forward a few pages in the book, and the page\ncount gave me a measure of my progress.\u003c/p\u003e\n\u003cp\u003e\nA few of the tests, with the corresponding page numbers:\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    # Adapted from SICP p. 8:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;(define pi 3.14159)\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;(define radius 10)\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;(* pi (* radius radius))\u0026#34;, \u0026#34;314.159\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    # p. 19:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;(define x 7)\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;(and (\u0026gt; x 5) (\u0026lt; x 10))\u0026#34;, \u0026#34;#t\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    # p. 37\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;\u0026#34;\u0026#34;(define (fib n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           (cond ((= n 0) 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 ((= n 1) 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                 (else (+ (fib (- n 1))\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          (fib (- n 2))))))\u0026#34;\u0026#34;\u0026#34;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    t(\u0026#34;(fib 5)\u0026#34;, \u0026#34;5\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nHere \u003ccode class=\"verbatim\"\u003et\u003c/code\u003e (a very short function name since it\u0026#39;s used so many times) is\na testing function which evaluates the code supplied in the first\nargument, using the current \u0026#34;environment\u0026#34; (scope). If a second argument\n(a string) is supplied, it also asserts that the code in the first\nargument evaluates to the second.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-13\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-13\"\u003e\nThe Code Comes To Life\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-13\" class=\"outline-text-3\"\u003e\n\u003cp\u003eOne of my favorite things about this project was when I started\nwriting nontrivial tests which \u003cem\u003ealready passed\u003c/em\u003e, because enough of the\nlanguage had been implemented already. This happened more often as the\nproject progressed, and it made me feel like I\u0026#39;d implemented a \u0026#34;real\u0026#34;\nlanguage, an oddly compelling feeling.\u003c/p\u003e\n\u003cp\u003e\nThe code, in its entirety, can be found \u003ca href=\"https://github.com/eigenhombre/smallscheme\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-14\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-14\"\u003e\nNext Steps\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-14\" class=\"outline-text-2\"\u003e\n\u003cp\u003eThough I have already gone far past my goals for the project, there are a few directions which I could take this.\u003c/p\u003e\n\u003cdiv id=\"outline-container-headline-15\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-15\"\u003e\nImplement more of Scheme\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-15\" class=\"outline-text-3\"\u003e\n\u003cp\u003eFor example, I don\u0026#39;t have strings yet in my implementation!\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-16\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-16\"\u003e\nExtend it Further\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-16\" class=\"outline-text-3\"\u003e\n\u003cp\u003eImplement Python interop and shell features. This could be genuinely\nfun and useful, but there\u0026#39;s already \u003ca href=\"https://github.com/hylang/hy\"\u003ea fairly full-featured Lisp skin\nfor Python called Hy\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-17\" class=\"outline-3\"\u003e\n\u003ch3 id=\"headline-17\"\u003e\nGo Low Level\n\u003c/h3\u003e\n\u003cdiv id=\"outline-text-headline-17\" class=\"outline-text-3\"\u003e\n\u003cp\u003eDo it again, but in a faster, lower-level language. Python is\nrelatively slow compared to Clojure for long-running programs, and\nslower than Common Lisp or C for program startup. I\u0026#39;ve been wanting to\ndust off my C chops, and this would be an excuse to do so, though C is\na bit primitive compared to, say, Rust. (Go is not to my taste so I\nwouldn\u0026#39;t pick it for a fun project like this one.) So, either an\nexcuse to learn Rust or to improve my C chops. Which leads me to the\nfinal question: would I rather implement Lisps, or program in them? Up\nuntil now it has been the latter, but after the past few weeks I can\ndefinitely taste the appeal of the former.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-18\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-18\"\u003e\nThoughts Upon Revisiting Python\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-18\" class=\"outline-text-2\"\u003e\n\u003cp\u003eThis was the biggest Python project I\u0026#39;ve done in five years, so it was\ninteresting to check my experience of the language after some time\naway in Clojure-land. I was a big Python fan for many years but my\nenthusiasm for the language has definitely cooled. This is partly due to the performance comparison I just mentioned, but the two other things I really missed were REPL integration and structural editing.\u003c/p\u003e\n\u003cp\u003e\nIn Lisps such as Clojure and Common Lisp I can send expressions to the\nREPL directly from Emacs and see the results instantly. It\u0026#39;s difficult\nto describe how helpful this short feedback cycle is until you\u0026#39;ve\nexperienced it. Writing the interpreter, I got sort of close by using\n\u003ca href=\"https://github.com/eigenhombre/continuous-testing-helper\"\u003e\u003ccode class=\"verbatim\"\u003econttest\u003c/code\u003e\u003c/a\u003e plus \u003ccode class=\"verbatim\"\u003enosetests\u003c/code\u003e: my unit tests ran every time I saved\na source file, and if I wanted to inspect some object I could add a\n\u003ccode class=\"verbatim\"\u003eprint\u003c/code\u003e or two temporarily to the code I was working on. But this is\ndefinitely more clumsy than a Lisp REPL directly integrated with my editor.\u003c/p\u003e\n\u003cp\u003e\nStructural editing (via \u003ca href=\"http://danmidwood.com/content/2014/11/21/animated-paredit.html\"\u003eParedit\u003c/a\u003e) is another thing that is hard to\nexplain the utility of but which is hard to live without once you\u0026#39;re\nused to it.  The basic idea is that you are no longer editing strings\nof text, but the actual tree of nested lists comprising your code -\nkilling, splitting, joining, absorbing (\u0026#34;slurping\u0026#34;) into and expelling\n(\u0026#34;barfing\u0026#34;) from those lists.  Working with the code at the tree level\nis a powerful way to edit your code, and \u003ca href=\"https://www.youtube.com/watch?v=D6h5dFyyUX0\"\u003ewatching this video might\nhelp\u003c/a\u003e may give a hint of it. Once you\u0026#39;re used to the affordances of\nParedit or its cousins, it feels clunky and primitive to go back to\nediting plain old text.\u003c/p\u003e\n\u003cp\u003e\nOther value propositions of Clojure, such as macros, immutable\ndata structures and concurrency, weren\u0026#39;t really an issue for this\nproject, though I would certainly miss them for bigger projects.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-19\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-19\"\u003e\nConclusion\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-19\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nImplementing your own Lisp is surprisingly do-able (and fun!). Python\nis certainly a fine tool for the job (though if you want to skip straight to programming in a modern Lisp for your day job, please \u003ca href=\"http://johnj.com/contact.html\"\u003econtact me\u003c/a\u003e).\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv id=\"outline-container-headline-20\" class=\"outline-2\"\u003e\n\u003ch2 id=\"headline-20\"\u003e\nPostscript\n\u003c/h2\u003e\n\u003cdiv id=\"outline-text-headline-20\" class=\"outline-text-2\"\u003e\n\u003cp\u003e\nWhile digging through my digital and mental archives for Lisp things I remembered something I hadn\u0026#39;t seen in a long time: the use of closing square brackets to terminate a deeply-nested collection of s-expressions (i.e. \u003ccode class=\"verbatim\"\u003e]\u003c/code\u003e instead of \u003ccode class=\"verbatim\"\u003e)))))))\u003c/code\u003e). Did I imagine it? While not necessarily a good idea, it\u0026#39;s an interesting one. Then, while reading through Gabriel and Steele\u0026#39;s \u003ca href=\"https://dl.acm.org/citation.cfm?id=155373\"\u003eEvolution of Lisp\u003c/a\u003e this morning, I came across the following snippet:\u003c/p\u003e\n\u003cp\u003e\n\u0026#34;One of the minor, but interesting, syntactic extensions that\nInterlisp made was the introduction of the superparenthesis, or\nsuperbracket. If a right square bracket \u003ccode class=\"verbatim\"\u003e]\u003c/code\u003e is encountered during a\nread operation, it balances all outstanding open left parentheses, or\nback to the last outstanding left square bracket \u003ccode class=\"verbatim\"\u003e[\u003c/code\u003e.\u0026#34;\u003c/p\u003e\n\u003cdiv class=\"src src-text\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDEFINEQ((FACTORIAL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  (LAMBDA (N)\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   (COND [(ZEROP N) 1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         (T (TIMES N (FACTORIAL (SUB1 N]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e\nBingo! I wasn\u0026#39;t imagining it.  This suggests those workstations in the\nbasement of MACC at UW-Madison were probably running Interlisp.\u003c/p\u003e\n\u003cp\u003e\n\n\n\n\n\n\u003ca href=\"http://johnj.com/for-the-trees.png\"\u003e\u003cimg class=\"resize\" src=\"/for-the-trees_huadd136cba14d75b5734d97b0b12f0313_814817_700x0_resize_box_3.png\" style=\"width:700px; border:0px solid black;\"/\u003e\u003c/a\u003e\n\n\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"footnotes\"\u003e\n\u003chr class=\"footnotes-separatator\"/\u003e\n\u003cdiv class=\"footnote-definitions\"\u003e\n\u003cdiv class=\"footnote-definition\"\u003e\n\u003csup id=\"footnote-1\"\u003e\u003ca href=\"#footnote-reference-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e\n\u003cdiv class=\"footnote-body\"\u003e\n\u003cp\u003eSo compelling that I left \u003ca href=\"https://icecube.wisc.edu\"\u003ean exciting science project\u003c/a\u003e\npartly in order to do Lisp (Clojure) programming full time.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n\n\nLater: \u003ca href=\"http://johnj.com/posts/journaling-procedure/\"\u003eA Daily Journal in Org Mode\u003c/a\u003e\n\n\n\u003cbr/\u003e\n\n\nEarlier: \u003ca href=\"http://johnj.com/posts/nupoc/\"\u003eShow at NUPOC\u003c/a\u003e\n\n\n\u003c/p\u003e\u003cp\u003e\n\n\n\n\u003c/p\u003e\u003c/main\u003e",
  "Date": "2019-08-28T00:00:00Z",
  "Author": "John Jacobsen"
}