{
  "Source": "leovan.me",
  "Title": "预训练自然语言模型 (Pre-trained Models for NLP)",
  "Link": "https://leovan.me/cn/2020/03/pre-trained-model-for-nlp/",
  "Content": "\u003carticle class=\"main\"\u003e\n    \u003cheader class=\"content-title\"\u003e\n    \n\u003ch1 class=\"title\"\u003e\n  \n  预训练自然语言模型 (Pre-trained Models for NLP)\n  \n\u003c/h1\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"author-date\"\u003e范叶亮 / \n2020-03-28\u003c/h2\u003e\n\n\n\n\u003ch3 class=\"post-meta\"\u003e\n\n\n\u003cstrong\u003e分类: \u003c/strong\u003e\n\u003ca href=\"/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0\"\u003e深度学习\u003c/a\u003e, \u003ca href=\"/categories/%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0\"\u003e表示学习\u003c/a\u003e, \u003ca href=\"/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86\"\u003e自然语言处理\u003c/a\u003e\n\n\n\n\n/\n\n\n\n\n\u003cstrong\u003e标签: \u003c/strong\u003e\n\u003cspan\u003e预训练\u003c/span\u003e, \u003cspan\u003ePre-trained\u003c/span\u003e, \u003cspan\u003e迁移学习\u003c/span\u003e, \u003cspan\u003eTransfer Learning\u003c/span\u003e, \u003cspan\u003e上下文感知\u003c/span\u003e, \u003cspan\u003eContextual\u003c/span\u003e, \u003cspan\u003eTransformer\u003c/span\u003e, \u003cspan\u003e机器翻译\u003c/span\u003e, \u003cspan\u003eMachine Translation\u003c/span\u003e, \u003cspan\u003e语言模型\u003c/span\u003e, \u003cspan\u003eLanguage Modeling\u003c/span\u003e, \u003cspan\u003eLM\u003c/span\u003e, \u003cspan\u003e遮罩语言模型\u003c/span\u003e, \u003cspan\u003eMasked Language Modeling\u003c/span\u003e, \u003cspan\u003eMLM\u003c/span\u003e, \u003cspan\u003e排列语言模型\u003c/span\u003e, \u003cspan\u003ePermuted Language Modeling\u003c/span\u003e, \u003cspan\u003ePLM\u003c/span\u003e, \u003cspan\u003e去噪自编码\u003c/span\u003e, \u003cspan\u003eDenoising Autoencoder\u003c/span\u003e, \u003cspan\u003eDAE\u003c/span\u003e, \u003cspan\u003e对比学习\u003c/span\u003e, \u003cspan\u003eContrastive Learning\u003c/span\u003e, \u003cspan\u003eCTL\u003c/span\u003e, \u003cspan\u003eCBOW\u003c/span\u003e, \u003cspan\u003eSkip-gram\u003c/span\u003e, \u003cspan\u003eWord2Vec\u003c/span\u003e, \u003cspan\u003eGloVe\u003c/span\u003e, \u003cspan\u003eCoVe\u003c/span\u003e, \u003cspan\u003eELMo\u003c/span\u003e, \u003cspan\u003eGPT\u003c/span\u003e, \u003cspan\u003eBERT\u003c/span\u003e, \u003cspan\u003eUniLM\u003c/span\u003e, \u003cspan\u003eTransformer-XL\u003c/span\u003e, \u003cspan\u003eXLNet\u003c/span\u003e, \u003cspan\u003eMASS\u003c/span\u003e, \u003cspan\u003eRoBERTa\u003c/span\u003e, \u003cspan\u003eBART\u003c/span\u003e, \u003cspan\u003eT5\u003c/span\u003e, \u003cspan\u003eERNIE\u003c/span\u003e\n\n\n\n\n/\n\n\n\u003cstrong\u003e字数: \u003c/strong\u003e\n13449\n\u003c/h3\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n    \n    \n    \u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"1261604535\"\u003e\u003c/ins\u003e\n    \u003cscript\u003e\n    (adsbygoogle = window.adsbygoogle || []).push({});\n    \u003c/script\u003e\n    \n    \n    \u003c/header\u003e\n\n\n\n\u003cdiv class=\"toc-depth-2\"\u003e\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#预训练原理\"\u003e预训练原理\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#语言表示学习\"\u003e语言表示学习\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#神经上下文编码器\"\u003e神经上下文编码器\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#为什么预训练\"\u003e为什么预训练\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#预训练任务\"\u003e预训练任务\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#语言模型-language-modeling-lm\"\u003e语言模型（Language Modeling，LM）\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#遮罩语言模型-masked-language-modeling-mlm\"\u003e遮罩语言模型（Masked Language Modeling，MLM）\u003c/a\u003e\n              \u003cul\u003e\n                \u003cli\u003e\u003ca href=\"#sequence-to-sequence-mlm-seq2seq-mlm\"\u003eSequence-to-Sequence MLM (Seq2Seq MLM)\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#enhanced-masked-language-modeling-e-mlm\"\u003eEnhanced Masked Language Modeling (E-MLM)\u003c/a\u003e\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#排列语言模型-permuted-language-modeling-plm\"\u003e排列语言模型（Permuted Language Modeling，PLM）\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#去噪自编码-denoising-autoencoder-dae\"\u003e去噪自编码（Denoising Autoencoder，DAE）\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#对比学习-contrastive-learning-ctl\"\u003e对比学习（Contrastive Learning，CTL）\u003c/a\u003e\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#应用于下游任务\"\u003e应用于下游任务\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#如何迁移\"\u003e如何迁移\u003c/a\u003e\n              \u003cul\u003e\n                \u003cli\u003e\u003ca href=\"#选择合适的预训练任务-模型架构和语料\"\u003e选择合适的预训练任务，模型架构和语料\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#选择合适的网络层\"\u003e选择合适的网络层\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#是否微调\"\u003e是否微调\u003c/a\u003e\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#微调策略\"\u003e微调策略\u003c/a\u003e\n              \u003cul\u003e\n                \u003cli\u003e\u003ca href=\"#两步骤微调\"\u003e两步骤微调\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#多任务微调\"\u003e多任务微调\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#利用额外模块进行微调\"\u003e利用额外模块进行微调\u003c/a\u003e\u003c/li\u003e\n              \u003c/ul\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#开放资源\"\u003e开放资源\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#ptms-开源实现\"\u003ePTMs 开源实现：\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#论文列表和-ptms-相关资源\"\u003e论文列表和 PTMs 相关资源：\u003c/a\u003e\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#预训练模型\"\u003e预训练模型\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#cove-2017-mccann2017learned\"\u003eCoVe (2017) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#elmo-2018-peters2018deep\"\u003eELMo (2018) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#gpt-2018-radford2018improving\"\u003eGPT (2018) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#bert-2018-devlin2018bert\"\u003eBERT (2018) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#unilm-2019-dong2019unified\"\u003eUniLM (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#transformer-xl-2019-dai2019transformer\"\u003eTransformer-XL (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#xlnet-2019-yang2019xlnet\"\u003eXLNet (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#mass-2019-song2019mass\"\u003eMASS (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#roberta-2019-liu2019roberta\"\u003eRoBERTa (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#bart-2019-lewis2019bart\"\u003eBART (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#t5-2019-raffel2019exploring\"\u003eT5 (2019) \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#ernie-baidu-2019-sun2019ernie-sun2019ernie2\"\u003eERNIE (Baidu, 2019)  \u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#state-of-art\"\u003eState-of-Art\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\u003c/div\u003e\n\n\n\u003cblockquote\u003e\n\u003cp\u003e本文为 Pre-trained Models for Natural Language Processing: A Survey 和相关模型的读书笔记 \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在当下的 NLP 研究领域，随着计算机算力的不断增强，越来越多的通用语言表征的预训练模型（Pre-trained Models，PTMs）逐渐涌现出来。这对下游的 NLP 任务非常有帮助，可以避免大量从零开始训练新的模型。PTM 大致可以分为两代：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第一代 PTM 旨在学习词嵌入。由于下游任务不在需要这些模型，因此为了计算效率，这些模型往往采用浅层模型，例如 Skip-Gram \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e，GloVe \u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e 等。尽管这些模型可以捕获词的语义，但由于未基于上下文环境，因此不能够捕捉到更深层次的概念，例如：句法结构，语义角色，指代等等。\u003c/li\u003e\n\u003cli\u003e第二代 PTM 专注于学习基于上下文的词嵌入，例如 CoVe \u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e4\u003c/a\u003e\u003c/sup\u003e，ELMo \u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e5\u003c/a\u003e\u003c/sup\u003e，OpenAI GPT \u003csup id=\"fnref:6\"\u003e\u003ca href=\"#fn:6\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e6\u003c/a\u003e\u003c/sup\u003e 和 BERT \u003csup id=\"fnref:7\"\u003e\u003ca href=\"#fn:7\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e7\u003c/a\u003e\u003c/sup\u003e 等。这些学习到的编码器在下游任务中仍会用于词在上下文中的语义表示。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"预训练原理\"\u003e预训练原理\u003c/h1\u003e\n\u003ch2 id=\"语言表示学习\"\u003e语言表示学习\u003c/h2\u003e\n\u003cp\u003e分布式表示的核心思想为用一个低维的实值向量表示一段文本，向量单独每个维度不具有任何实质含义，但整个向量表示了一个具体的概念。下图展示了一个 NLP 任务的一般神经网络架构：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/generic-neural-architecture-for-nlp.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n  \u003cfigcaption class=\"kai\"\u003eNLP 任务的一般神经网络架构\u003c/figcaption\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e词嵌入包含两种类型：\u003cstrong\u003e上下文无关的词嵌入\u003c/strong\u003e和\u003cstrong\u003e基于上下文的词嵌入\u003c/strong\u003e。两者的不同点在于一个词的嵌入是够会随着上下文的不同而随之改变。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e上下文无关的词嵌入\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为了表征语义，我们需要将离散的语言符号映射到一个分布式嵌入空间中。对于词典 \u003ccode\u003e$\\mathcal{V}$\u003c/code\u003e 中的一个词 \u003ccode\u003e$x$\u003c/code\u003e，我们将其映射为查询表 \u003ccode\u003e$\\mathbf{E} \\in \\mathbb{R}^{D_e \\times \\|\\mathcal{V}\\|}$\u003c/code\u003e 中的一个向量 \u003ccode\u003e$\\mathbf{e}_x \\in \\mathbb{R}^{D_e}$\u003c/code\u003e，其中 \u003ccode\u003e$D_e$\u003c/code\u003e 为嵌入的维度。\u003c/p\u003e\n\u003cp\u003e这种类型的嵌入主要有两个缺陷：一是嵌入是静态的，词在不同的上下文中的嵌入表示是相同的，因此无法处理一词多义；二是未登录词（out-of-vocabulary，OOV）问题，通常可以采用字符级嵌入表示解决该问题。更多上下文无关的词嵌入模型，请参见之前的博客 \u003ca href=\"/cn/2018/10/word-embeddings/\"\u003e词向量\u003c/a\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于上下文的词嵌入\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e为了解决上述问题，我们需要区分在不同上下文下词的含义。给定一段文本 \u003ccode\u003e$x_1, x_2, \\dotsc, x_T$\u003c/code\u003e 其中每段标记 \u003ccode\u003e$x_t \\in \\mathcal{V}$\u003c/code\u003e 为一个词或子词，\u003ccode\u003e$x_t$\u003c/code\u003e 基于上下文的表示依赖于整段文本。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\left[\\mathbf{h}_1, \\mathbf{h}_2, \\dotsc, \\mathbf{h}_T\\right] = f_{\\text{enc}} \\left(x_1, x_2, \\dotsc, x_T\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$f_{\\text{enc}} \\left(\\cdot\\right)$\u003c/code\u003e 为神经编码器，\u003ccode\u003e$\\mathbf{h}_t$\u003c/code\u003e 为标记 \u003ccode\u003e$x_t$\u003c/code\u003e 的\u003cstrong\u003e基于上下文的嵌入\u003c/strong\u003e或\u003cstrong\u003e动态嵌入\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"神经上下文编码器\"\u003e神经上下文编码器\u003c/h2\u003e\n\u003cp\u003e神经上下文编码器大致可以分为 3 类：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e基于卷积的模型\u003c/strong\u003e：基于卷积的模型通过卷积操作从一个词的邻居中聚合局部信息来捕获这个词的含义 \u003csup id=\"fnref:8\"\u003e\u003ca href=\"#fn:8\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e8\u003c/a\u003e\u003c/sup\u003e。\n\u003cfigure\u003e\n    \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/convolutional-model.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n    \n    \u003cfigcaption class=\"kai\"\u003eConvolutional model\u003c/figcaption\u003e\n    \n  \u003c/figure\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e基于序列的模型\u003c/strong\u003e：基于序列的模型采用 RNNs（LSTM \u003csup id=\"fnref:9\"\u003e\u003ca href=\"#fn:9\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e9\u003c/a\u003e\u003c/sup\u003e 和 GRU \u003csup id=\"fnref:10\"\u003e\u003ca href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e10\u003c/a\u003e\u003c/sup\u003e） 来捕获词的上下文信息。实际中，我们采用双向的 RNNs 从词的两端收集信息，不过整体效果容易收到长期依赖问题的影响。\n\u003cfigure\u003e\n    \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/sequential-model.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n    \n    \u003cfigcaption class=\"kai\"\u003eSequential model\u003c/figcaption\u003e\n    \n  \u003c/figure\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e基于图的模型\u003c/strong\u003e：基于图的模型将字作为图中的一个节点来学习上下文表示，这个图通常是一个词之间预定义的语言结构，例如：语法结构 \u003csup id=\"fnref:11\"\u003e\u003ca href=\"#fn:11\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e11\u003c/a\u003e\u003c/sup\u003e \u003csup id=\"fnref:12\"\u003e\u003ca href=\"#fn:12\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e12\u003c/a\u003e\u003c/sup\u003e 或语义关系 \u003csup id=\"fnref:13\"\u003e\u003ca href=\"#fn:13\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e13\u003c/a\u003e\u003c/sup\u003e。尽管基于语言学的图结构能提供有用的信息，但如何构建一个好的图结构则成为了难题。除此之外，基于语言学的图结构需要依赖专家知识和外部工具，例如：依存句法分析等。事实上，我们会采用一个更直接的方式去学习任意两个词之间的关系，通常连接的权重可以通过自注意力机制自动计算得出。Transformer \u003csup id=\"fnref:14\"\u003e\u003ca href=\"#fn:14\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e14\u003c/a\u003e\u003c/sup\u003e 是一个采用了全链接自注意力架构的实现，同时也采用了位置嵌入（positional embedding），层标准化（layer normalization）和残差连接（residual connections）等网络设计理念。\n\u003cfigure\u003e\n    \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/fully-connected-graph-based-model.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n    \n    \u003cfigcaption class=\"kai\"\u003eFully-connected graph-based model\u003c/figcaption\u003e\n    \n  \u003c/figure\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"为什么预训练\"\u003e为什么预训练\u003c/h2\u003e\n\u003cp\u003e对于大多数的 NLP 任务，构建一个大规模的有标签的数据集是一项很大的挑战。相反，大规模的无标签语料是相对容易构建的，为了充分利用这些无标签数据，我们可以先利用它们获取一个好的语言表示，再将这些表示用于其他任务。预训练的好处如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e预训练可以从大规模语料中学习得到通用的语言表示，并用于下游任务。\u003c/li\u003e\n\u003cli\u003e预训练提供了更优的模型初始化方法，有助于提高模型的泛化能力和加速模型收敛。\u003c/li\u003e\n\u003cli\u003e预训练可以当作是在小数据集上一种避免过拟合的正则化方法。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"预训练任务\"\u003e预训练任务\u003c/h2\u003e\n\u003cp\u003e预训练任务对于学习语言的通用表示来说至关重要。通常情况下，预训练任务具有挑战性，同时需要大量训练数据。我们将预训练任务划分为 3 类：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e监督学习\u003c/strong\u003e，即从包含输入输出对的训练数据中学习一个由输入到输出的映射函数。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非监督学习\u003c/strong\u003e，即从无标签数据获取一些固有的知识，例如：聚类，密度，潜在表征等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e自监督学习\u003c/strong\u003e，是监督学习和非监督学习的混合体，核心思想是对于输入的一部分利用其他部分进行预测。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"语言模型-language-modeling-lm\"\u003e语言模型（Language Modeling，LM）\u003c/h3\u003e\n\u003cp\u003eNLP 中最常见的非监督任务为概率语言建模，这是一个经典的概率密度估计问题。给定一个文本序列 \u003ccode\u003e$x_{1:T} = \\left[x_1, x_2, \\dotsc, x_T\\right]$\u003c/code\u003e，他的联合概率 \u003ccode\u003e$p \\left(x_{1:T}\\right)$\u003c/code\u003e 可以分解为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ p \\left(x_{1:T}\\right) = \\prod_{t=1}^{y}{p \\left(x_t \\mid x_{0:t-1}\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$x_0$\u003c/code\u003e 为序列开始的特殊标记。条件概率 \u003ccode\u003e$p \\left(x_t \\mid x_{0:t-1}\\right)$\u003c/code\u003e 可以通过给定的语言上下文 \u003ccode\u003e$x_{0:t-1}$\u003c/code\u003e 词的概率分布进行建模估计。上下文 \u003ccode\u003e$x_{0:t-1}$\u003c/code\u003e 可以通过神经编码器 \u003ccode\u003e$f_{\\text{enc}} \\left(\\cdot\\right)$\u003c/code\u003e 进行建模，则条件概率可以表示为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ p \\left(x_t | x_{0:t-1}\\right) = g_{\\text{LM}} \\left(f_{\\text{enc}} \\left(x_{0:t-1}\\right)\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$g_{\\text{LM}}$\u003c/code\u003e 为预测层。\u003c/p\u003e\n\u003ch3 id=\"遮罩语言模型-masked-language-modeling-mlm\"\u003e遮罩语言模型（Masked Language Modeling，MLM）\u003c/h3\u003e\n\u003cp\u003e大致上来说，MLM 首先将输入句子的一些词条进行遮挡处理，其次再训练模型利用剩余的部分预测遮挡的部分。这种预训练方法会导致在预训练（pre-training）阶段和微调（fine-tuning）阶段的不一致，因为在微调阶段遮挡标记并未出现，BERT \u003csup id=\"fnref:15\"\u003e\u003ca href=\"#fn:15\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e15\u003c/a\u003e\u003c/sup\u003e 通过一个特殊的符号 \u003ccode\u003e[MASK]\u003c/code\u003e 对其进行处理。\u003c/p\u003e\n\u003ch4 id=\"sequence-to-sequence-mlm-seq2seq-mlm\"\u003eSequence-to-Sequence MLM (Seq2Seq MLM)\u003c/h4\u003e\n\u003cp\u003eMLM 通常以一个分类问题进行求解，我们将遮挡后的序列输入到一个神经编码器，再将输出向量传给一个 Softmax 分类器来预测遮挡的字符。我们可以采用 Encoder-Decoder（Seq2Seq）网络结构，将遮挡的序列输入到 Encoder，Decoder 则会循序的产生被遮挡的字符。MASS \u003csup id=\"fnref:16\"\u003e\u003ca href=\"#fn:16\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e16\u003c/a\u003e\u003c/sup\u003e 和 T5 \u003csup id=\"fnref:17\"\u003e\u003ca href=\"#fn:17\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e17\u003c/a\u003e\u003c/sup\u003e 均采用了这种序列到序列的 MLM 结构，这种结构对 Seq2Seq 风格的下游任务很有帮助，例如：问答，摘要和机器翻译。\u003c/p\u003e\n\u003ch4 id=\"enhanced-masked-language-modeling-e-mlm\"\u003eEnhanced Masked Language Modeling (E-MLM)\u003c/h4\u003e\n\u003cp\u003e同时，大量研究对于 BERT 所使用的遮罩处理进行了改进。RoBERTa \u003csup id=\"fnref:18\"\u003e\u003ca href=\"#fn:18\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e18\u003c/a\u003e\u003c/sup\u003e 采用了一种动态的遮罩处理。UniLM 将遮罩任务拓展到 3 种不同的类型：单向的，双向的和 Seq2Seq 类型的。\u003c/p\u003e\n\u003ch3 id=\"排列语言模型-permuted-language-modeling-plm\"\u003e排列语言模型（Permuted Language Modeling，PLM）\u003c/h3\u003e\n\u003cp\u003e在 MLM 中一些特殊字符（例如：\u003ccode\u003e[MASK]\u003c/code\u003e）在下游任务中是无用的，为了解决这个问题，XLNet \u003csup id=\"fnref:19\"\u003e\u003ca href=\"#fn:19\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e19\u003c/a\u003e\u003c/sup\u003e 提出了一种排列语言模型（Permuted Language Modeling，PLM）用于替代 MLM。简言之，PLM 是对输入序列的排列进行语言建模。给定一个序列，从所有可能的排列中随机抽样得到一个排列，将排列后的序列中的一些字符作为模型的预测目标，利用其他部分和目标的自然位置进行训练。需要注意的是这种排列并不会影响序列的自然位置，其仅用于定义字符预测的顺序。\u003c/p\u003e\n\u003ch3 id=\"去噪自编码-denoising-autoencoder-dae\"\u003e去噪自编码（Denoising Autoencoder，DAE）\u003c/h3\u003e\n\u003cp\u003eDAE 旨在利用部分有损的输入恢复原始无损的输入。对于语言模型，例如 Seq2Seq 模型，可以采用标准的 Transformer 来重构原始文本。有多种方式可以对文本进行破坏 \u003csup id=\"fnref:20\"\u003e\u003ca href=\"#fn:20\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e20\u003c/a\u003e\u003c/sup\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e字符遮罩：随机采样字符并将其替换为 \u003ccode\u003e[MASK]\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e字符删除：随机的从输入中删除字符，不同于字符遮罩，模型需要确定丢失字符的位置。\u003c/li\u003e\n\u003cli\u003e文本填充：采样一段文本并将其替换为一个 \u003ccode\u003e[MASK]\u003c/code\u003e，每段文本的长度服从泊松分布（$\\lambda = 3$），模型需要确定这段文本中缺失的字符个数。\u003c/li\u003e\n\u003cli\u003e句子重排：将文档以终止标点进行分割，再进行随机排序。\u003c/li\u003e\n\u003cli\u003e文档旋转：随机均匀地选择一个字符，对文档进行旋转使得这个字符作为文档的起始字符，模型需要确定文档真实的起始位置。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"对比学习-contrastive-learning-ctl\"\u003e对比学习（Contrastive Learning，CTL）\u003c/h3\u003e\n\u003cp\u003e对比学习 \u003csup id=\"fnref:21\"\u003e\u003ca href=\"#fn:21\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e21\u003c/a\u003e\u003c/sup\u003e 假设一些观测到的文本对比随机采样的文本具有更相似的语义。对于文本对 \u003ccode\u003e$\\left(x, y\\right)$\u003c/code\u003e 通过最小化如下目标函数来学习评分函数 \u003ccode\u003e$s \\left(x, y\\right)$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\mathbb{E}_{x, y^+, y^-} \\left[- \\log \\dfrac{\\exp \\left(s \\left(x, y^+\\right)\\right)}{\\exp \\left(s \\left(x, y^+\\right)\\right) + \\exp \\left(s \\left(x, y^-\\right)\\right)}\\right] $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$\\left(x, y^+\\right)$\u003c/code\u003e 为一个相似对，\u003ccode\u003e$y^-$\u003c/code\u003e 对于 \u003ccode\u003e$x$\u003c/code\u003e 而言假定为不相似，\u003ccode\u003e$y^+$\u003c/code\u003e 和 \u003ccode\u003e$y^-$\u003c/code\u003e 通常称之为正样本和负样本。评分函数 \u003ccode\u003e$s \\left(x, y\\right)$\u003c/code\u003e 通过一个神经编码器计算可得，\u003ccode\u003e$s \\left(x, y\\right) = f^{\\top}_{\\text{enc}} \\left(x\\right) f_{\\text{enc}} \\left(y\\right)$\u003c/code\u003e 或 \u003ccode\u003e$s \\left(x, y\\right) = f_{\\text{enc}} \\left(x \\oplus y\\right)$\u003c/code\u003e。CTL 的核心思想是“通过对比进行学习”。\u003c/p\u003e\n\u003cp\u003e下图展示了预训练模型的分类和部分代表模型：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/ptms.png\" alt=\"预训练模型分类及代表性模型\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"应用于下游任务\"\u003e应用于下游任务\u003c/h2\u003e\n\u003ch3 id=\"如何迁移\"\u003e如何迁移\u003c/h3\u003e\n\u003ch4 id=\"选择合适的预训练任务-模型架构和语料\"\u003e选择合适的预训练任务，模型架构和语料\u003c/h4\u003e\n\u003cp\u003e不同的 PTMs 在相同的下游任务上有着不同的效果，这是因为 PTMs 有着不同的预训练任务，模型架构和语料。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e目前，语言模型是最流行的预训练任务，同时也可以有效地解决很多 NLP 问题。但是不同的预训练任务有着自己的侧重，在不同的任务上会有不同的效果。例如：NSP 任务使得 PTM 可以理解两句话之间的关系，因此 PTM 可以在例如问答（Question Answering，QA）和自然语言推理（Natural Language Inference，NLI）等下游任务上表现更好。\u003c/li\u003e\n\u003cli\u003ePTM 的网络架构对下游任务也至关重要。例如：尽管 BERT 可以处理大多数自然语言理解任务，对其很难生成语言。\u003c/li\u003e\n\u003cli\u003e下游任务的数据分布应该和 PTM 训练所用语料相似。目前，大量现成的 PTM 仅可以快速地用于特定领域或特定语言的下游任务上。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"选择合适的网络层\"\u003e选择合适的网络层\u003c/h4\u003e\n\u003cp\u003e给定一个预训练的模型，不同的网络层捕获了不同的信息，例如：词性标记（POS tagging），语法（parsing），长期依赖（long-term dependencies），语义角色（semantic roles），指代（coreference）等。Tenney \u003csup id=\"fnref:22\"\u003e\u003ca href=\"#fn:22\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e22\u003c/a\u003e\u003c/sup\u003e 等人发现 BERT 表示方式类似传统的 NLP 流程：基础的句法信息出现在浅层的网络中，高级的语义信息出现在更高的层级中。\u003c/p\u003e\n\u003cp\u003e令 \u003ccode\u003e$\\mathbf{H}^{\\left(l\\right)} \\left(1 \\leq l \\leq L\\right)$\u003c/code\u003e 表示共 \u003ccode\u003e$L$\u003c/code\u003e 层的预训练模型的第 \u003ccode\u003e$l$\u003c/code\u003e 层表示，\u003ccode\u003e$g \\left(\\cdot\\right)$\u003c/code\u003e 表示用于特定任务的的模型。一般有 3 中情况选择表示：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEmbedding Only：一种情况是仅选用预训练模型的静态嵌入，模型的其他部分仍需作为一个任务从头训练。这种情况不能够获取到一些有用的深层信息，词嵌入仅能够捕获词的语义信息。\u003c/li\u003e\n\u003cli\u003eTop Layer：最简单有效的方式是将网络的顶层表示输入到模型中 \u003ccode\u003e$g \\left(\\mathbf{H}^{\\left(L\\right)}\\right)$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003eAll Layers：另一种更灵活的方式是自动选择最合适的层，例如 ELMo：\n\u003ccode\u003e$$ \\mathbf{r}_t = \\gamma \\sum_{l=1}^{L}{\\alpha_l \\mathbf{h}^{\\left(l\\right)}_t} $$\u003c/code\u003e\n其中 \u003ccode\u003e$\\alpha_l$\u003c/code\u003e 是层 \u003ccode\u003e$l$\u003c/code\u003e 的 softmax 归一的权重，\u003ccode\u003e$\\gamma$\u003c/code\u003e 是用于缩放预训练模型输出向量的一个标量值，再将不同层的混合输出输入到后续模型中 \u003ccode\u003e$g \\left(\\mathbf{r}_t\\right)$\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"是否微调\"\u003e是否微调\u003c/h4\u003e\n\u003cp\u003e目前，主要有两种方式进行模型迁移：特征提取（预训练模型的参数是固定的）和模型微调（预训练模型的参数是经过微调的）。当采用特征提取时，预训练模型可以被看作是一个特征提取器。除此之外，我们应该采用内部层作为特征，因为他们通常是最适合迁移的特征。尽管两种不同方式都能对大多数 NLP 任务效果有显著提升，但以特征提取的方式需要更复杂的特定任务的架构。因此，微调是一种更加通用和方便的处理下游任务的方式。\u003c/p\u003e\n\u003ch3 id=\"微调策略\"\u003e微调策略\u003c/h3\u003e\n\u003cp\u003e随着 PTMs 网络层数的加深，其捕获的表示使得下游任务变得越来越简单，因此整个模型中用于特定任务的网络层一般比较简单，微调已经成为了采用 PTMs 的主要方式。但是微调的过程通常是比较不好预估的，即使采用相同的超参数，不同的随机数种子也可能导致差异较大的结果。除了标准的微调外，如下为一些有用的微调策略：\u003c/p\u003e\n\u003ch4 id=\"两步骤微调\"\u003e两步骤微调\u003c/h4\u003e\n\u003cp\u003e一种方式是两阶段的迁移，在预训练和微调之间引入了一个中间阶段。在第一个阶段，PTM 通过一个中间任务或语料转换为一个微调后的模型，在第二个阶段，再利用目标任务进行微调。\u003c/p\u003e\n\u003ch4 id=\"多任务微调\"\u003e多任务微调\u003c/h4\u003e\n\u003cp\u003e在多任务学习框架下对其进行微调。\u003c/p\u003e\n\u003ch4 id=\"利用额外模块进行微调\"\u003e利用额外模块进行微调\u003c/h4\u003e\n\u003cp\u003e微调的主要缺点就是其参数的低效性。每个下游模型都有其自己微调好的参数，因此一个更好的解决方案是将一些微调好的适配模块注入到 PTMs 中，同时固定原始参数。\u003c/p\u003e\n\u003ch2 id=\"开放资源\"\u003e开放资源\u003c/h2\u003e\n\u003ch3 id=\"ptms-开源实现\"\u003ePTMs 开源实现：\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e项目\u003c/th\u003e\n\u003cth\u003e框架\u003c/th\u003e\n\u003cth\u003ePTMs\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/tmikolov/word2vec\"\u003eword2vec\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003ctd\u003eCBOW, Skip-Gram\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://nlp.stanford.edu/projects/glove\"\u003eGloVe\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003ctd\u003ePre-trained word vectors\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/facebookresearch/fastText\"\u003eFastText\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003ctd\u003ePre-trained word vectors\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/huggingface/transformers\"\u003eTransformers\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e \u0026amp; \u003ci class=\"icon icon-tensorflow\"\u003eTF\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eBERT, GPT-2, RoBERTa, XLNet, etc.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/pytorch/fairseq\"\u003eFairseq\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eEnglish LM, German LM, RoBERTa, etc.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/%EF%AC%82airNLP/%EF%AC%82air\"\u003eFlair\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eBERT, ELMo, GPT, RoBERTa, XLNet, etc.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/allenai/allennlp\"\u003eAllenNLP\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eELMo, BERT, GPT-2, etc.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/fastnlp/fastNLP\"\u003eFastNLP\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eBERT, RoBERTa, GPT, etc.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/ymcui/Chinese-BERT-wwm\"\u003eChinese-BERT\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003ctd\u003eBERT, RoBERTa, etc. (for Chinese)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/google-research/bert\"\u003eBERT\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-tensorflow\"\u003eTF\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eBERT, BERT-wwm\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/pytorch/fairseq/tree/master/examples/roberta\"\u003eRoBERTa\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/zihangdai/xlnet\"\u003eXLNet\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-tensorflow\"\u003eTF\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/google-research/ALBERT\"\u003eALBERT\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-tensorflow\"\u003eTF\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/google-research/text-to-text-transfer-transformer\"\u003eT5\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-tensorflow\"\u003eTF\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/thunlp/ERNIE\"\u003eERNIE(THU)\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/PaddlePaddle/ERNIE\"\u003eERNIE(Baidu)\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-paddlepaddle\"\u003e\u003c/i\u003e PaddlePaddle\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/huggingface/transformers\"\u003eHugging Face\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ci class=\"icon icon-pytorch\"\u003ePyTorch\u003c/i\u003e \u0026amp; \u003ci class=\"icon icon-tensorflow\"\u003eTF\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003e很多…\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"论文列表和-ptms-相关资源\"\u003e论文列表和 PTMs 相关资源：\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e资源\u003c/th\u003e\n\u003cth\u003eURL\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e论文列表\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/thunlp/PLMpapers\"\u003ehttps://github.com/thunlp/PLMpapers\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e论文列表\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/tomohideshibata/BERT-related-papers\"\u003ehttps://github.com/tomohideshibata/BERT-related-papers\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e论文列表\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/cedrickchee/awesome-bert-nlp\"\u003ehttps://github.com/cedrickchee/awesome-bert-nlp\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBert Lang Street\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://bertlang.unibocconi.it\"\u003ehttps://bertlang.unibocconi.it\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBertViz\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/jessevig/bertviz\"\u003ehttps://github.com/jessevig/bertviz\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"预训练模型\"\u003e预训练模型\u003c/h1\u003e\n\u003ch2 id=\"cove-2017-mccann2017learned\"\u003eCoVe (2017) \u003csup id=\"fnref1:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e4\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e首先，给定一个源语言序列 \u003ccode\u003e$w^x = \\left[w^x_1, \\dotsc, w^x_n\\right]$\u003c/code\u003e 和一个翻译目标语言序列 \u003ccode\u003e$w^z = \\left[w^z_1, \\dotsc, w^z_n\\right]$\u003c/code\u003e。令 \u003ccode\u003e$\\text{GloVe} \\left(w^x\\right)$\u003c/code\u003e 为词 \u003ccode\u003e$w^x$\u003c/code\u003e 对应的 GloVe 向量，\u003ccode\u003e$z$\u003c/code\u003e 为 \u003ccode\u003e$w^z$\u003c/code\u003e 中的词随机初始化的词向量。将 \u003ccode\u003e$\\text{GloVe} \\left(w^x\\right)$\u003c/code\u003e 输入到一个标准的两层 biLSTM 网络中，称之为 MT-LSTM，MT-LSTM 用于计算序列的隐含状态如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ h = \\text{MT-LSTM} \\left(\\text{GloVe} \\left(w^x\\right)\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于机器翻译，MT-LSTM 的注意力机制的解码器可以对于输出的词在每一步产生一个分布 \u003ccode\u003e$p \\left(\\hat{w}^z_t \\mid H, w^z_1, \\dotsc, w^z_{t-1}\\right)$\u003c/code\u003e。在 \u003ccode\u003e$t$\u003c/code\u003e 步，解码器利用一个两层的单向 LSTM 基于之前目标词嵌入 \u003ccode\u003e$z_{t-1}$\u003c/code\u003e 和一个基于上下文调整的隐含状态 \u003ccode\u003e$\\tilde{h}_{t-1}$\u003c/code\u003e 生成一个隐含状态 \u003ccode\u003e$h^{\\text{dec}}_t$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ h^{\\text{dec}}_t = \\text{LSTM} \\left(\\left[z_{t-1}; \\tilde{h}_{t-1}\\right], h^{\\text{dec}}_{t-1}\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e之后解码器计算每一步编码到当前解码状态的注意力权重 \u003ccode\u003e$\\alpha$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\alpha_t = \\text{softmax} \\left(H \\left(W_1 h^{\\text{dec}}_t + b_1\\right)\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$H$\u003c/code\u003e 表示 \u003ccode\u003e$h$\u003c/code\u003e 按照时间维度的堆叠。之后解码器将这些权重作为相关性用于计算基于上下文调整的隐含状态 \u003ccode\u003e$\\tilde{h}$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\tilde{h}_t = \\text{tanh} \\left(W_2 \\left[H^{\\top} \\alpha_t; h^{\\text{dec}}_t\\right] + b_2\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e最后，输出词的分布通过基于上下文调整的隐含状态计算可得：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ p \\left(\\hat{w}^z_t \\mid H, w^z_1, \\dotsc, w^z_{t-1}\\right) = \\text{softmax} \\left(W_{\\text{out}} \\tilde{h}_t + b_{\\text{out}}\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eCoVe 将 MT-LSTM 学习到的表示迁移到下游任务中，令 \u003ccode\u003e$w$\u003c/code\u003e 表示文字序列，\u003ccode\u003e$\\text{GloVe} \\left(w\\right)$\u003c/code\u003e 表示对应的 GloVe 向量，则：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\text{CoVe} \\left(w\\right) = \\text{MT-LSTM} \\left(\\text{GloVe} \\left(w\\right)\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e表示由 MT-LSTM 产生的上下文向量，对于分类和问答任务，有一个输入序列 \u003ccode\u003e$w$\u003c/code\u003e，我们可以将 GloVe 和 CoVe 向量进行拼接作为其嵌入表示：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\tilde{w} = \\left[\\text{GloVe} \\left(w\\right); \\text{CoVe} \\left(w\\right)\\right] $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eCoVe 网络架构示意图如下：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/cove.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch2 id=\"elmo-2018-peters2018deep\"\u003eELMo (2018) \u003csup id=\"fnref1:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e5\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e在 ELMo 模型中，对于每个词条 \u003ccode\u003e$t_k$\u003c/code\u003e，一个 \u003ccode\u003e$L$\u003c/code\u003e 层的 biLM 可以计算得到 \u003ccode\u003e$2L + 1$\u003c/code\u003e 个表示：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} R_k \u0026amp;= \\left\\{\\mathbf{x}^{LM}_k, \\overrightarrow{\\mathbf{h}}^{LM}_{k, j}, \\overleftarrow{\\mathbf{h}}^{LM}_{k, j} \\mid j = 1, \\dotsc, L \\right\\} \\\\ \u0026amp;= \\left\\{\\mathbf{h}^{LM}_{k, j} \\mid j = 0, \\dotsc, L\\right\\} \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$\\mathbf{h}^{LM}_{k, 0}$\u003c/code\u003e 为词条的嵌入层，\u003ccode\u003e$\\mathbf{h}^{LM}_{k, j} = \\left[\\overrightarrow{\\mathbf{h}}^{LM}_{k, j}; \\overleftarrow{\\mathbf{h}}^{LM}_{k, j}\\right]$\u003c/code\u003e 为每个 biLSTM 层。\u003c/p\u003e\n\u003cp\u003e对于下游任务，ELMo 将 \u003ccode\u003e$R$\u003c/code\u003e 中的所有层汇总成一个向量 \u003ccode\u003e$\\mathbf{ELMo}_k = E \\left(R_k; \\mathbf{\\Theta}_e\\right)$\u003c/code\u003e。在一些简单的案例中，ELMo 仅选择顶层，即：\u003ccode\u003e$E \\left(R_k\\right) = \\mathbf{h}^{LM}_{k, L}$\u003c/code\u003e。更通用的，对于一个特定的任务，我们可以计算一个所有 biLM 层的加权：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\mathbf{ELMo}^{task}_k = E \\left(R_k; \\Theta^{task}\\right) = \\gamma^{task} \\sum_{j=0}^{L}{s^{task}_j \\mathbf{h}^{LM}_{k, j}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$s^{task}$\u003c/code\u003e 表示 softmax 归一化后的权重，\u003ccode\u003e$\\gamma^{task}$\u003c/code\u003e 允许模型对整个 ELMo 向量进行缩放。\u003ccode\u003e$\\gamma$\u003c/code\u003e 对整个优化过程具有重要意义，考虑每个 biLM 层的激活具有不同的分布，在一些情况下这相当于在进行加权之前对每一个 biLM 层增加了层标准化。\u003c/p\u003e\n\u003cp\u003eELMo 网络架构示意图如下 \u003csup id=\"fnref:23\"\u003e\u003ca href=\"#fn:23\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e23\u003c/a\u003e\u003c/sup\u003e：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/elmo.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch2 id=\"gpt-2018-radford2018improving\"\u003eGPT (2018) \u003csup id=\"fnref1:6\"\u003e\u003ca href=\"#fn:6\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e6\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e给定一个语料 \u003ccode\u003e$\\mathcal{U} = \\left\\{u_1, \\dotsc, u_n\\right\\}$\u003c/code\u003e，使用标准的语言建模目标来最大化如下似然：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ L_1 \\left(\\mathcal{U}\\right) = \\sum_{i} \\log P \\left(u_i \\mid u_{i-k}, \\dotsc, u_{i-1}; \\Theta\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$k$\u003c/code\u003e 为上下文窗口的大小，条件概率 \u003ccode\u003e$P$\u003c/code\u003e 通过参数为 \u003ccode\u003e$\\Theta$\u003c/code\u003e 的神经网络进行建模。GPT 中使用了一个多层的 Transformer Decoder 作为语言模型。模型首先对输入上下文词条应用多头自注意力机制，再通过按位置的前馈层产生目标词条的输出分布：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} h_0 \u0026amp;= UW_e + W_p \\\\ h_l \u0026amp;= \\text{transformer_black} \\left(h_{l-1}\\right), \\forall i \\in \\left[1, n\\right] \\\\ P \\left(u\\right) \u0026amp;= \\text{softmax} \\left(h_n W^{\\top}_e\\right) \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$U = \\left(u_{-k}, \\dotsc, u_{-1}\\right)$\u003c/code\u003e 为词条的上下文向量，\u003ccode\u003e$n$\u003c/code\u003e 为网络层数，\u003ccode\u003e$W_e$\u003c/code\u003e 为词条的嵌入矩阵，\u003ccode\u003e$W_p$\u003c/code\u003e 为位置嵌入矩阵。\u003c/p\u003e\n\u003cp\u003e给定一个有标签的数据集 \u003ccode\u003e$\\mathcal{C}$\u003c/code\u003e，其中包含了输入词条序列 \u003ccode\u003e$x^1, \\dotsc, x^m$\u003c/code\u003e 和对应的标签 \u003ccode\u003e$y$\u003c/code\u003e。利用上述预训练的模型获得输入对应的最后一个 Transformer 的激活输出 \u003ccode\u003e$h^m_l$\u003c/code\u003e，之后再将其输入到一个参数为 \u003ccode\u003e$W_y$\u003c/code\u003e 的线性输入层中预测 \u003ccode\u003e$y$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ P \\left(y \\mid x^1, \\dotsc, x^m\\right) = \\text{softmax} \\left(h^m_l W_y\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e模型通过最小化如下损失进行优化：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ L_2 \\left(\\mathcal{C}\\right) = \\sum_{\\left(x, y\\right)} \\log P \\left(y \\mid x^1, \\dotsc, x^m\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e研究还发现将语言建模作为微调的附加目标可以帮助提高模型的泛化能力，同时可以加速模型收敛。GPT 中采用如下的优化目标：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ L_3 \\left(\\mathcal{C}\\right) = L_2 \\left(\\mathcal{C}\\right) + \\lambda L_1 \\left(\\mathcal{C}\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGPT 网络架构示意图如下：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/gpt.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch2 id=\"bert-2018-devlin2018bert\"\u003eBERT (2018) \u003csup id=\"fnref1:7\"\u003e\u003ca href=\"#fn:7\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e7\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003eBERT 采用了一中基于 Vaswani \u003csup id=\"fnref1:14\"\u003e\u003ca href=\"#fn:14\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e14\u003c/a\u003e\u003c/sup\u003e 所提出模型的多层双向 Transformer 编码器。在 BERT 中，令 \u003ccode\u003e$L$\u003c/code\u003e 为 Transformer Block 的层数，\u003ccode\u003e$H$\u003c/code\u003e 为隐层大小，\u003ccode\u003e$A$\u003c/code\u003e 为自注意力头的数量。在所有情况中，设置前馈层的大小为 \u003ccode\u003e$4H$\u003c/code\u003e，BERT 提供了两种不同大小的预训练模型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$\\text{BERT}_{\\text{BASE}}$\u003c/code\u003e：\u003ccode\u003e$L=12, H=768, A=12$\u003c/code\u003e，参数总量为 100 M。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$\\text{BERT}_{\\text{LARGE}}$\u003c/code\u003e：\u003ccode\u003e$L=24, H=1024, A=16$\u003c/code\u003e，参数总量为 340 M。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e$\\text{BERT}_{\\text{BASE}}$\u003c/code\u003e 采用了同 GPT 相同的模型大小用于比较，不同与 GPT，BERT 使用了双向的注意力机制。在文献中，双向 Transformer 通常称之为 Transformer 编码器，仅利用左边上下文信息的 Transformer 由于可以用于文本生成被称之为 Transformer 解码器。BERT，GPT 和 ELMo 之间的不同如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/bert-gpt-elmo-model-architectures.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003eBERT 的输入表示既可以表示一个单独的文本序列，也可以表示一对文本序列（例如：问题和答案）。对于一个给定的词条，其输入表示由对应的词条嵌入，分割嵌入和位置嵌入三部分加和构成，如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/bert-input-representation.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e具体的有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e采用一个包含 30,000 个词条的 WordPiece 嵌入 \u003csup id=\"fnref:24\"\u003e\u003ca href=\"#fn:24\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e24\u003c/a\u003e\u003c/sup\u003e。\u003c/li\u003e\n\u003cli\u003e位置嵌入最大支持 512 个词条。\u003c/li\u003e\n\u003cli\u003e序列的第一字符采用特殊的分类嵌入 \u003ccode\u003e[CLS]\u003c/code\u003e，其最终的隐含状态在分类任务中用于汇总整个序列的表示，对于非分类任务则忽视该向量。\u003c/li\u003e\n\u003cli\u003e句子对被整合成一个序列，首先利用一个特殊词条 \u003ccode\u003e[SEP]\u003c/code\u003e 对句子进行分割，其次对于第一个句子中的每个词条叠加一个学习到的 A 句子嵌入，对于第二个句子中的每个词条叠加一个学习到的 B 句子嵌入。\u003c/li\u003e\n\u003cli\u003e对于一个单独的句子，仅使用 A 句子嵌入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在预训练阶段，BERT 采用了两个无监督预测任务：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e遮罩的语言模型（Masked LM，MLM）\u003cbr/\u003e\n不同于一般的仅利用 \u003ccode\u003e[MASK]\u003c/code\u003e 进行遮挡，BERT 选择采用 80% 的 \u003ccode\u003e[MASK]\u003c/code\u003e，10% 的随机词和 10% 保留原始词的方式对随机选择的 15% 的词条进行遮挡处理。由于编码器不知会预测哪个词或哪个词被随机替换了，这迫使其必须保留每个输入词条的分布式上下文表示。同时 1.5% 的随机替换也不会过多的损害模型的理解能力。\u003c/li\u003e\n\u003cli\u003e预测是否为下一个句子（Next Sentence Prediction）\u003cbr/\u003e\n一些重要的下游任务，例如问答（Question Answering，QA）和自然语言推断（Natural Language Inference，NLI）是基于两个句子之间关系的理解，这是语言建模无法直接捕获的。BERT 通过训练一个预测是否为下一个句子的二分类任务来实现，对于一个句子对 A 和 B，50% 的 B 是句子 A 真实的下一句，剩余 50% 为随机抽取的。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e基于 BERT 的不同下游任务的实现形式如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/bert-task-specific-models.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch2 id=\"unilm-2019-dong2019unified\"\u003eUniLM (2019) \u003csup id=\"fnref:25\"\u003e\u003ca href=\"#fn:25\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e25\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e给定一个输入序列 \u003ccode\u003e$x = x_1 \\cdots x_{|x|}$\u003c/code\u003e，UniLM 通过下图的方式获取每个词条的基于上下文的向量表示。整个预训练过程利用单向的语言建模（unidirectional LM），双向的语言建模（bidirectional LM）和 Seq2Seq 语言建模（sequence-to-sequence LM）优化共享的 Transformer 网络。\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/unilm.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e输入序列 \u003ccode\u003e$x$\u003c/code\u003e 对于单向语言模型而言是一个分割的文本，对于双向语言模型和 Seq2Seq 语言模型而言是一对打包的分割文本。UniLM 在输入的起始位置添加特殊的 \u003ccode\u003e[SOS]\u003c/code\u003e （start-of-sequence），在结尾处添加 \u003ccode\u003e[EOS]\u003c/code\u003e（end-of-sequence）。\u003ccode\u003e[EOS]\u003c/code\u003e 对于自然语言理解（NLU）任务可以标记句子之间的界线，对于自然语言生成（NLG）任务可以确定解码过程停止的时间。输入的表示同 BERT 一样，文本利用 WordPiece 进行分割，对于每个输入词条，其向量表示为对应的词条嵌入，位置嵌入和分割嵌入的汇总。\u003c/p\u003e\n\u003cp\u003e对于输入向量 \u003ccode\u003e$\\left\\{\\mathbf{x}_i\\right\\}^{|x|}_{i=1}$\u003c/code\u003e 首先将其输入到隐层 \u003ccode\u003e$\\mathbf{H}^0 = \\left[\\mathbf{x}_1, \\dotsc, \\mathbf{x}_{|x|}\\right]$\u003c/code\u003e，之后使用一个 \u003ccode\u003e$L$\u003c/code\u003e 层的 Transformer \u003ccode\u003e$\\mathbf{H}^l = \\text{Transformer}_l \\left(\\mathbf{H}^{l-1}\\right), l \\in \\left[1, L\\right]$\u003c/code\u003e 对每一层 \u003ccode\u003e$\\mathbf{H}^l = \\left[\\mathbf{h}^l_1, \\dotsc, \\mathbf{h}^l_{|x|}\\right]$\u003c/code\u003e 进行上下文表示编码。在每个 Tansformer 块中，使用多头自注意力机制对输出向量和上一层进行汇总，第 \u003ccode\u003e$l$\u003c/code\u003e 层 Transformer 自注意力头 \u003ccode\u003e$\\mathbf{A}_l$\u003c/code\u003e 的输入通过如下方式计算：\u003c/p\u003e\n\u003cp\u003e`$$\n\\begin{aligned}\n\\mathbf{Q} \u0026amp;= \\mathbf{H}^{l-1} \\mathbf{W}^Q_l, \\mathbf{K} = \\mathbf{H}^{l-1} \\mathbf{W}^K_l, \\mathbf{V} = \\mathbf{H}^{l-1} \\mathbf{W}^W_l \\\n\\mathbf{M}_{ij} \u0026amp;=\n\\begin{cases}\n0, \u0026amp; \\text{allow to attend} \\\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\\infty, \u0026amp; \\text{prevent from attending}\n\\end{cases} \\\n\\mathbf{A}_l \u0026amp;= \\text{softmax} \\left(\\dfrac{\\mathbf{Q} \\mathbf{K}^{\\top}}{\\sqrt{d_k}} + \\mathbf{M}\\right) \\mathbf{V}_l\n\\end{aligned}\n$$`\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e其中，上一层的输出 \u003ccode\u003e$\\mathbf{H}^{l-1} \\in \\mathbb{R}^{|x| \\times d_h}$\u003c/code\u003e 通过参数矩阵 \u003ccode\u003e$\\mathbf{W}^Q_l, \\mathbf{W}^K_l, \\mathbf{W}^V_l \\in \\mathbb{R}^{d_h \\times d_k}$\u003c/code\u003e 线性地映射为相应的 Query，Key 和 Value，遮罩矩阵 \u003ccode\u003e$\\mathbf{M} \\in \\mathbb{R}^{|x| \\times |x|}$\u003c/code\u003e 用于确定一对词条是否可以被相互连接。\u003c/p\u003e\n\u003ch2 id=\"transformer-xl-2019-dai2019transformer\"\u003eTransformer-XL (2019) \u003csup id=\"fnref:26\"\u003e\u003ca href=\"#fn:26\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e26\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e将 Transformer 或注意力机制应用到语言建模中的核心问题是如何训练 Transformer 使其有效地将一个任意长文本编码为一个固定长度的表示。Transformer-XL 将整个语料拆分为较短的段落，仅利用每段进行训练并忽略之前段落的上下文信息。这种方式称之为 Vanilla Model \u003csup id=\"fnref:27\"\u003e\u003ca href=\"#fn:27\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e27\u003c/a\u003e\u003c/sup\u003e，如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/transformer-xl-vanilla-model.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e在这种训练模式下，无论是前向还是后向信息都不会跨越分割的段落进行传导。利用固定长度的上下文主要有两个弊端：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e这限制了最大依赖的长度，虽然自注意力机制不会像 RNN 一样受到梯度弥散的影响，但 Vanilla Model 也不能完全利用到这个优势。\u003c/li\u003e\n\u003cli\u003e虽然可以利用补全操作来实现句子或其他语义的分割，但实际上通常会简单的将一个长文本截断成一个固定长度的分割，这样会产生上下文分裂破碎的问题。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e为了解决这个问题，Transformer-XL 采用了一种循环机制的 Transformer。在训练阶段，在处理新的分割段落时，之前分割分部分的隐含状态序列将被**固定（fixed）\u003cstrong\u003e和\u003c/strong\u003e缓存（cached）**下来作为一个扩展的上下文被复用参与计算，如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/transformer-xl-model.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e虽然梯度仍仅限于这个分割段落内部，但网络可以从历史中获取信息，从而实现对长期依赖的建模。令两个长度为 \u003ccode\u003e$L$\u003c/code\u003e 的连续分割段落为 \u003ccode\u003e$\\mathbf{s}_{\\tau} = \\left[x_{\\tau, 1}, \\dotsc, x_{\\tau, L}\\right]$\u003c/code\u003e 和 \u003ccode\u003e$\\mathbf{s}_{\\tau + 1} = \\left[x_{\\tau + 1, 1}, \\dotsc, x_{\\tau + 1, L}\\right]$\u003c/code\u003e，第 \u003ccode\u003e$\\tau$\u003c/code\u003e 段分割 \u003ccode\u003e$\\mathbf{s}_{\\tau}$\u003c/code\u003e 的第 \u003ccode\u003e$n$\u003c/code\u003e 层隐含状态为 \u003ccode\u003e$\\mathbf{h}^n_{\\tau} \\in \\mathbb{R}^{L \\times d}$\u003c/code\u003e，其中 \u003ccode\u003e$d$\u003c/code\u003e 为隐含维度。则对于分割段落 \u003ccode\u003e$\\mathbf{s}_{\\tau + 1}$\u003c/code\u003e 的第 \u003ccode\u003e$n$\u003c/code\u003e 层隐含状态通过如下方式进行计算：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} \\tilde{\\mathbf{h}}^{n-1}_{\\tau + 1} \u0026amp;= \\left[\\text{SG} \\left(\\mathbf{h}^{n-1}_{\\tau}\\right) \\circ \\mathbf{h}^{n-1}_{\\tau + 1} \\right] \\\\ \\mathbf{q}^{n}_{\\tau + 1}, \\mathbf{k}^{n}_{\\tau + 1}, \\mathbf{v}^{n}_{\\tau + 1} \u0026amp;= \\mathbf{h}^{n-1}_{\\tau + 1} \\mathbf{W}^{\\top}_{q}, \\tilde{\\mathbf{h}}^{n-1}_{\\tau + 1} \\mathbf{W}^{\\top}_{k}, \\tilde{\\mathbf{h}}^{n-1}_{\\tau + 1} \\mathbf{W}^{\\top}_{v} \\\\ \\mathbf{h}^{n}_{\\tau + 1} \u0026amp;= \\text{Transformer-Layer} \\left(\\mathbf{q}^{n}_{\\tau + 1}, \\mathbf{k}^{n}_{\\tau + 1}, \\mathbf{v}^{n}_{\\tau + 1}\\right) \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$\\text{SG} \\left(\\cdot\\right)$\u003c/code\u003e 表示停止梯度，\u003ccode\u003e$\\left[\\mathbf{h}_u \\circ \\mathbf{h}_v\\right]$\u003c/code\u003e 表示将两个隐含序列按照长度维度进行拼接，\u003ccode\u003e$\\mathbf{W}$\u003c/code\u003e 为模型的参数。与一般的 Transformer 相比，最大的不同在于 \u003ccode\u003e$\\mathbf{k}^n_{\\tau + 1}$\u003c/code\u003e 和 \u003ccode\u003e$\\mathbf{v}^n_{\\tau + 1}$\u003c/code\u003e 不仅依赖于 \u003ccode\u003e$\\tilde{\\mathbf{h}}^{n-1}_{\\tau - 1}$\u003c/code\u003e 还依赖于之前分割段落的 \u003ccode\u003e$\\mathbf{h}^{n-1}_{\\tau}$\u003c/code\u003e 缓存。\u003c/p\u003e\n\u003cp\u003e在标准的 Transformer 中，序列的顺序信息通过位置嵌入 \u003ccode\u003e$\\mathbf{U} \\in \\mathbb{R}^{L_{\\max} \\times d}$\u003c/code\u003e 提供，其中第 \u003ccode\u003e$i$\u003c/code\u003e 行 \u003ccode\u003e$\\mathbf{U}_i$\u003c/code\u003e 对应一个分割文本内部的第 \u003ccode\u003e$i$\u003c/code\u003e 个\u003cstrong\u003e绝对\u003c/strong\u003e位置，\u003ccode\u003e$L_{\\max}$\u003c/code\u003e 为最大可能长度。在 Transformer-XL 中则是通过一种\u003cstrong\u003e相对\u003c/strong\u003e位置信息对其进行编码，构建一个相对位置嵌入 \u003ccode\u003e$\\mathbf{R} \\in \\mathbb{R} ^{L_{\\max} \\times d}$\u003c/code\u003e，其中第 \u003ccode\u003e$i$\u003c/code\u003e 行 \u003ccode\u003e$\\mathbf{R}_i$\u003c/code\u003e 表示两个位置之间相对距离为 \u003ccode\u003e$i$\u003c/code\u003e 的嵌入表示。\u003c/p\u003e\n\u003cp\u003e对于一般的 Transformer，一个分割段落内部的 \u003ccode\u003e$q_i$\u003c/code\u003e 和 \u003ccode\u003e$k_j$\u003c/code\u003e 之间的注意力分数可以分解为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} \\mathbf{A}_{i, j}^{\\mathrm{abs}} \u0026amp;=\\underbrace{\\mathbf{E}_{x_{i}}^{\\top} \\mathbf{W}_{q}^{\\top} \\mathbf{W}_{k} \\mathbf{E}_{x_{j}}}_{(a)}+\\underbrace{\\mathbf{E}_{x_{i}}^{\\top} \\mathbf{W}_{q}^{\\top} \\mathbf{W}_{k} \\mathbf{U}_{j}}_{(b)} \\\\ \u0026amp;+\\underbrace{\\mathbf{U}_{i}^{\\top} \\mathbf{W}_{q}^{\\top} \\mathbf{W}_{k} \\mathbf{E}_{x_{j}}}_{(c)}+\\underbrace{\\mathbf{U}_{i}^{\\top} \\mathbf{W}_{q}^{\\top} \\mathbf{W}_{k} \\mathbf{U}_{j}}_{(d)} \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e利用相对位置思想，变化如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} \\mathbf{A}_{i, j}^{\\mathrm{rel}} \u0026amp;=\\underbrace{\\mathbf{E}_{x_{i}}^{\\top} \\mathbf{W}_{q}^{\\top} \\mathbf{W}_{k, E} \\mathbf{E}_{x_{j}}}_{(a)}+\\underbrace{\\mathbf{E}_{x_{i}}^{\\top} \\mathbf{W}_{q}^{\\top} \\mathbf{W}_{k, R} \\textcolor{blue}{\\mathbf{R}_{i-j}}}_{(b)} \\\\ \u0026amp;+\\underbrace{\\textcolor{red}{u^{\\top}} \\mathbf{W}_{k, E} \\mathbf{E}_{x_{j}}}_{(c)}+\\underbrace{\\textcolor{red}{v^{\\top}} \\mathbf{W}_{k, R} \\textcolor{blue}{\\mathbf{R}_{i-j}}}_{(d)} \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e首先，利用相对位置 \u003ccode\u003e$\\textcolor{blue}{\\mathbf{R}_{i-j}}$\u003c/code\u003e 替代绝对位置嵌入 \u003ccode\u003e$\\mathbf{U}_j$\u003c/code\u003e，这里 \u003ccode\u003e$\\mathbf{R}$\u003c/code\u003e 采用的是无需学习的 sinusoid 编码矩阵 \u003csup id=\"fnref2:14\"\u003e\u003ca href=\"#fn:14\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e14\u003c/a\u003e\u003c/sup\u003e。\u003c/li\u003e\n\u003cli\u003e其次，引入了一个可训练的参数 \u003ccode\u003e$\\textcolor{red}{u} \\in \\mathbb{R}^d$\u003c/code\u003e 用于替换 \u003ccode\u003e$\\mathbf{U}^{\\top}_i \\mathbf{W}^{\\top}_q$\u003c/code\u003e。类似的，对于 \u003ccode\u003e$\\mathbf{U}^{\\top} \\mathbf{W}^{\\top}_q$\u003c/code\u003e 使用一个可训练的 \u003ccode\u003e$\\textcolor{red}{v} \\in \\mathbb{R}^d$\u003c/code\u003e 替换。\u003c/li\u003e\n\u003cli\u003e最后，有意地划分了两个权重矩阵 \u003ccode\u003e$\\mathbf{W}_{k, E}$\u003c/code\u003e 和 \u003ccode\u003e$\\mathbf{W}_{k, R}$\u003c/code\u003e 用于生成基于内容的 Key 向量和基于位置的 Key 向量。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这样，\u003ccode\u003e$\\left(a\\right)$\u003c/code\u003e 代表了基于内容的位置信息，\u003ccode\u003e$\\left(b\\right)$\u003c/code\u003e 捕获了内容无关的位置偏置，\u003ccode\u003e$\\left(c\\right)$\u003c/code\u003e 表示了一个全局的内容偏置，\u003ccode\u003e$\\left(d\\right)$\u003c/code\u003e 捕获了一个全局的位置偏置。\u003c/p\u003e\n\u003cp\u003e利用一个自注意力头计算 \u003ccode\u003e$N$\u003c/code\u003e 层的 Transformer-XL 的过程如下，对于 \u003ccode\u003e$n = 1, \\dotsc, N$\u003c/code\u003e 有：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} \\widetilde{\\mathbf{h}}_{\\tau}^{n-1}=\u0026amp;\\left[\\mathrm{SG}\\left(\\mathbf{m}_{\\tau}^{n-1}\\right) \\circ \\mathbf{h}_{\\tau}^{n-1}\\right] \\\\ \\mathbf{q}_{\\tau}^{n}, \\mathbf{k}_{\\tau}^{n}, \\mathbf{v}_{\\tau}^{n}=\u0026amp; \\mathbf{h}_{\\tau}^{n-1} {\\mathbf{W}_{q}^{n}}^{\\top}, \\widetilde{\\mathbf{h}}_{\\tau}^{n-1} {\\mathbf{W}_{k, E}^{n}}^{\\top}, \\widetilde{\\mathbf{h}}_{\\tau}^{n-1} {\\mathbf{W}_{v}^{n}}^{\\top} \\\\ \\mathbf{A}_{\\tau, i, j}^{n}=\u0026amp; {\\mathbf{q}_{\\tau, i}^{n}}^{\\top} \\mathbf{k}_{\\tau, j}^{n} + {\\mathbf{q}_{\\tau, i}^{n}}^{\\top} \\mathbf{W}_{k, R}^{n} \\mathbf{R}_{i-j} \\\\ \u0026amp;+u^{\\top} \\mathbf{k}_{\\tau, j}+v^{\\top} \\mathbf{W}_{k, R}^{n} \\mathbf{R}_{i-j} \\\\ \\mathbf{a}_{\\tau}^{n}=\u0026amp; \\text { Masked-Softmax }\\left(\\mathbf{A}_{\\tau}^{n}\\right) \\mathbf{v}_{\\tau}^{n} \\\\ \\mathbf{o}_{\\tau}^{n}=\u0026amp; \\text { LayerNorm } \\left(\\text{Linear}\\left(\\mathbf{a}_{\\tau}^{n}\\right)+\\mathbf{h}_{\\tau}^{n-1}\\right) \\\\ \\mathbf{h}_{\\tau}^{n}=\u0026amp; \\text { Positionwise-Feed-Forward }\\left(\\mathbf{o}_{\\tau}^{n}\\right) \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"xlnet-2019-yang2019xlnet\"\u003eXLNet (2019) \u003csup id=\"fnref1:19\"\u003e\u003ca href=\"#fn:19\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e19\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e给定一个序列 \u003ccode\u003e$\\mathbf{X} = \\left[x_1, \\dotsc, x_T\\right]$\u003c/code\u003e，AR 语言模型通过最大化如下似然进行预训练：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\max_{\\theta} \\quad \\log p_{\\theta}(\\mathbf{x})=\\sum_{t=1}^{T} \\log p_{\\theta}\\left(x_{t} | \\mathbf{x}_{\u0026lt;t}\\right)=\\sum_{t=1}^{T} \\log \\frac{\\exp \\left(h_{\\theta}\\left(\\mathbf{x}_{1: t-1}\\right)^{\\top} e\\left(x_{t}\\right)\\right)}{\\sum_{x^{\\prime}} \\exp \\left(h_{\\theta}\\left(\\mathbf{x}_{1: t-1}\\right)^{\\top} e\\left(x^{\\prime}\\right)\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$h_{\\theta}\\left(\\mathbf{x}_{1: t-1}\\right)$\u003c/code\u003e 是由 RNNs 或 Transformer 等神经网络网络模型生成的上下文表示，\u003ccode\u003e$e \\left(x\\right)$\u003c/code\u003e 为 \u003ccode\u003e$x$\u003c/code\u003e 的嵌入。对于一个文本序列 \u003ccode\u003e$\\mathbf{x}$\u003c/code\u003e，BERT 首先构建了一个遮罩的数据集 \u003ccode\u003e$\\hat{\\mathbf{x}}$\u003c/code\u003e，令被遮挡的词条为 \u003ccode\u003e$\\overline{\\mathbf{x}}$\u003c/code\u003e，通过训练如下目标来利用 \u003ccode\u003e$\\hat{\\mathbf{x}}$\u003c/code\u003e 重构 \u003ccode\u003e$\\overline{\\mathbf{x}}$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\max_{\\theta} \\quad \\log p_{\\theta}(\\overline{\\mathbf{x}} | \\hat{\\mathbf{x}}) \\approx \\sum_{t=1}^{T} m_{t} \\log p_{\\theta}\\left(x_{t} | \\hat{\\mathbf{x}}\\right)=\\sum_{t=1}^{T} m_{t} \\log \\frac{\\exp \\left(H_{\\theta}(\\hat{\\mathbf{x}})_{t}^{\\top} e\\left(x_{t}\\right)\\right)}{\\sum_{x^{\\prime}} \\exp \\left(H_{\\theta}(\\hat{\\mathbf{x}})_{t}^{\\top} e\\left(x^{\\prime}\\right)\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$m_t = 1$\u003c/code\u003e 表示 \u003ccode\u003e$x_t$\u003c/code\u003e 是被遮挡的，\u003ccode\u003e$H_{\\theta}$\u003c/code\u003e 是一个 Transformer 将一个长度为 \u003ccode\u003e$T$\u003c/code\u003e 的文本序列映射到一个隐含向量序列 \u003ccode\u003e$H_{\\theta}(\\mathbf{x})=\\left[H_{\\theta}(\\mathbf{x})_{1}, H_{\\theta}(\\mathbf{x})_{2}, \\cdots, H_{\\theta}(\\mathbf{x})_{T}\\right]$\u003c/code\u003e。两种不同的预训练目标的优劣势如下\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e独立假设\u003c/strong\u003e：BERT 中联合条件概率 \u003ccode\u003e$p(\\overline{\\mathbf{x}} | \\hat{\\mathbf{x}})$\u003c/code\u003e 假设在给定的 \u003ccode\u003e$\\hat{\\mathbf{x}}$\u003c/code\u003e 下，遮挡的词条 \u003ccode\u003e$\\overline{\\mathbf{x}}$\u003c/code\u003e 是相关独立的，而 AR 语言模型则没有这样的假设。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e输入噪声\u003c/strong\u003e：BERT 在预训练是使用了特殊标记 \u003ccode\u003e[MASK]\u003c/code\u003e，在下游任务微调时不会出现，而 AR 语言模型则不会存在这个问题。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e上下文依赖\u003c/strong\u003e：AR 语言模型仅考虑了词条左侧的上下文，而 BERT 则可以捕获两个方向的上下文。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e为了利用 AR 语言模型和 BERT 的优点，XLNet 提出了排序语言模型。对于一个长度为 \u003ccode\u003e$T$\u003c/code\u003e 序列 \u003ccode\u003e$\\mathbf{x}$\u003c/code\u003e，共有 \u003ccode\u003e$T!$\u003c/code\u003e 种不同的方式进行 AR 分解，如果模型共享不同分解顺序的参数，那么模型就能学习到两侧所有位置的信息。令 \u003ccode\u003e$\\mathcal{Z}_T$\u003c/code\u003e 为长度为 \u003ccode\u003e$T$\u003c/code\u003e 的索引序列 \u003ccode\u003e$\\left[1, 2, \\dotsc, T\\right]$\u003c/code\u003e 的所有可能排列，\u003ccode\u003e$z_t$\u003c/code\u003e 和 \u003ccode\u003e$\\mathbf{z}_{\u0026lt;t}$\u003c/code\u003e 分别表示一个排列 \u003ccode\u003e$\\mathbf{z} \\in \\mathcal{Z}_T$\u003c/code\u003e 第 \u003ccode\u003e$t$\u003c/code\u003e 个和前 \u003ccode\u003e$t-1$\u003c/code\u003e 个元素。则排列语言模型的优化目标为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\max_{\\theta} \\quad \\mathbb{E}_{\\mathbf{z} \\sim \\mathcal{Z}_{T}}\\left[\\sum_{t=1}^{T} \\log p_{\\theta}\\left(x_{z_{t}} | \\mathbf{x}_{\\mathbf{z}_{\u0026lt;t}}\\right)\\right] $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e根据标准的 Transformer，下一个词条的分布 \u003ccode\u003e$p_{\\theta}\\left(X_{z_{t}} | \\mathbf{x}_{\\mathbf{z}\u0026lt;t}\\right)$\u003c/code\u003e 为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ p_{\\theta}\\left(X_{z_{t}} = x | \\mathbf{x}_{\\mathbf{z}\u0026lt;t}\\right)=\\frac{\\exp \\left(e(x)^{\\top} h_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}\\right)\\right)}{\\sum_{x^{\\prime}} \\exp \\left(e\\left(x^{\\prime}\\right)^{\\top} h_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}\\right)\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$h_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}\\right)$\u003c/code\u003e 表示通过共享的 Transformer 产生的 \u003ccode\u003e$\\mathbf{X}_{\\mathbf{Z}\u0026lt;t}$\u003c/code\u003e 的隐含表示。该表示并不依赖于所预测的位置，为了避免这个问题，我们将位置 \u003ccode\u003e$z_t$\u003c/code\u003e 加入到模型中：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ p_{\\theta}\\left(X_{z_{t}}=x | \\mathbf{x}_{z_{\u0026lt;t}}\\right)=\\frac{\\exp \\left(e(x)^{\\top} g_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}, z_{t}\\right)\\right)}{\\sum_{x^{\\prime}} \\exp \\left(e\\left(x^{\\prime}\\right)^{\\top} g_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}, z_{t}\\right)\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于 \u003ccode\u003e$g_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}, z_{t}\\right)$\u003c/code\u003e 进行建模需要满足如下两个要求：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e预测 \u003ccode\u003e$x_{z_t}$\u003c/code\u003e 时，\u003ccode\u003e$g_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}, z_{t}\\right)$\u003c/code\u003e 只能使用位置信息 \u003ccode\u003e$z_t$\u003c/code\u003e 而不能使用内容信息 \u003ccode\u003e$x_{z_t}$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在预测 \u003ccode\u003e$x_{z_t}$\u003c/code\u003e 之后的词条时，\u003ccode\u003e$g_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}, z_{t}\\right)$\u003c/code\u003e 又必须包含 \u003ccode\u003e$x_{z_t}$\u003c/code\u003e 的语义信息。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e为了解决这个问题，XLNet 提供了两种隐含表示：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e内容隐含表示 \u003ccode\u003e$h_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z} \\leq t}\\right)$\u003c/code\u003e，简写为 \u003ccode\u003e$h_{z_t}$\u003c/code\u003e，它和标准的 Transformer 一样，既编码上下文也编码 \u003ccode\u003e$x_{z_t}$\u003c/code\u003e 的内容。\u003c/li\u003e\n\u003cli\u003e查询隐含表示 \u003ccode\u003e$g_{\\theta}\\left(\\mathbf{x}_{\\mathbf{z}\u0026lt;t}, z_{t}\\right)$\u003c/code\u003e，简写为 \u003ccode\u003e$g_{z_t}$\u003c/code\u003e，它仅编码上下文信息 \u003ccode\u003e$\\mathbf{X}_{\\mathbf{Z}\u0026lt;t}$\u003c/code\u003e 和位置信息 \u003ccode\u003e$z_t$\u003c/code\u003e，不编码内容 \u003ccode\u003e$x_{z_t}$\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e模型的整个计算过程如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/xlnet.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e虽然排列语言模型有很多优点，但是由于计算量很大，模型很难进行优化，因此我们通过仅预测一个句子后面的一些词条解决这个问题。将 \u003ccode\u003e$\\mathbf{z}$\u003c/code\u003e 分为两部分：非目标子序列 \u003ccode\u003e$\\mathbf{z}_{\\leq c}$\u003c/code\u003e 和目标子序列 \u003ccode\u003e$\\mathbf{z}_{\u0026gt;c}$\u003c/code\u003e，其中 \u003ccode\u003e$c$\u003c/code\u003e 为切分点。同时会设置一个超参数 \u003ccode\u003e$K$\u003c/code\u003e，表示仅 \u003ccode\u003e$1 / K$\u003c/code\u003e 的词条会被预测，有 \u003ccode\u003e$|\\mathbf{z}| /(|\\mathbf{z}|-c) \\approx K$\u003c/code\u003e。对于未被选择的词条，其查询隐状态无需被计算，从而节省计算时间和资源。\u003c/p\u003e\n\u003ch2 id=\"mass-2019-song2019mass\"\u003eMASS (2019) \u003csup id=\"fnref1:16\"\u003e\u003ca href=\"#fn:16\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e16\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003eMASS 是一个专门针对序列到序列的自然语言任务设计的预训练方法，对于一个给定的原始句子 \u003ccode\u003e$x \\in \\mathcal{X}$\u003c/code\u003e，令 \u003ccode\u003e$x^{\\setminus u:v}$\u003c/code\u003e 表示将 \u003ccode\u003e$x$\u003c/code\u003e 从 \u003ccode\u003e$u$\u003c/code\u003e 到 \u003ccode\u003e$v$\u003c/code\u003e 位置进行遮挡处理，\u003ccode\u003e$k = v - u + 1$\u003c/code\u003e 为被遮挡词条的个数，\u003ccode\u003e$x^{u:v}$\u003c/code\u003e 为从 \u003ccode\u003e$u$\u003c/code\u003e 到 \u003ccode\u003e$v$\u003c/code\u003e 位置被遮挡的部分。MASS 利用被遮挡的序列 \u003ccode\u003e$x^{\\setminus u:v}$\u003c/code\u003e 预测被遮挡的部分 \u003ccode\u003e$x^{u:v}$\u003c/code\u003e，目标函数的对数似然如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} L(\\theta ; \\mathcal{X}) \u0026amp;=\\frac{1}{|\\mathcal{X}|} \\Sigma_{x \\in \\mathcal{X}} \\log P\\left(x^{u: v} | x^{\\setminus u: v} ; \\theta\\right) \\\\ \u0026amp;=\\frac{1}{|\\mathcal{X}|} \\Sigma_{x \\in \\mathcal{X}} \\log \\prod_{t=u}^{v} P\\left(x_{t}^{u: v} | x_{\u0026lt;t}^{u: v}, x^{\\setminus u: v} ; \\theta\\right) \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于一个具有 8 个词条的序列，\u003ccode\u003e$x_3 x_4 x_5 x_6$\u003c/code\u003e 被遮挡的示例如下：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/mass.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e模型仅预测遮挡的部分 \u003ccode\u003e$x_3 x_4 x_5 x_6$\u003c/code\u003e，对于解码器中位置 \u003ccode\u003e$4-6$\u003c/code\u003e 利用 \u003ccode\u003e$x_3 x_4 x_5$\u003c/code\u003e 作为输入，利用特殊遮挡符号 \u003ccode\u003e$\\left[\\mathbb{M}\\right]$\u003c/code\u003e 作为其他位置的输入。对于不同长度 \u003ccode\u003e$k$\u003c/code\u003e，MASS 包含了上文中提到的两种预训练模型：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e长度\u003c/th\u003e\n\u003cth\u003e概率\u003c/th\u003e\n\u003cth\u003e模型\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$k=1$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e$P\\left(x^{u} \\mid x^{\\setminus u} ; \\theta\\right)$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003emasked LM in BERT\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$k=m$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e$P\\left(x^{1:m} \\mid x^{\\setminus 1:m} ; \\theta\\right)$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003emasked LM in GPT\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$k \\in \\left(1, m\\right)$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e$P\\left(x^{u:v} \\mid x^{\\setminus u:v} ; \\theta\\right)$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e两种之间\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e对于不同 \u003ccode\u003e$k$\u003c/code\u003e 值，实验发现当 \u003ccode\u003e$k$\u003c/code\u003e 处于 \u003ccode\u003e$m$\u003c/code\u003e 的 \u003ccode\u003e$50\\%$\u003c/code\u003e 至 \u003ccode\u003e$70\\%$\u003c/code\u003e 之间时下游任务性能最优。\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/mass-k.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e当 \u003ccode\u003e$k = 0.5 m$\u003c/code\u003e 时，MASS 可以很好地平衡编码器和解码器的预训练。过度地偏向编码器（\u003ccode\u003e$k=1$\u003c/code\u003e，masked LM in BERT）和过度地偏向解码器（\u003ccode\u003e$k=m$\u003c/code\u003e，masked LM in GPT）均不能在下游的自然语言生成任务中取得很好的效果。\u003c/p\u003e\n\u003ch2 id=\"roberta-2019-liu2019roberta\"\u003eRoBERTa (2019) \u003csup id=\"fnref1:18\"\u003e\u003ca href=\"#fn:18\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e18\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003eRoBERTa 主要围绕 BERT 进行了如下改进：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e模型采用了动态遮罩，不同于原始 BERT 中对语料预先进行遮罩处理，RoBERTa 在 40 轮训练过程中采用了 10 种不同的遮罩。\u003c/li\u003e\n\u003cli\u003e模型去掉了 NSP 任务，发现可以略微提升下游任务的性能。\u003c/li\u003e\n\u003cli\u003e模型采用了更大的训练数据和更大的 Batch 大小。\u003c/li\u003e\n\u003cli\u003e原始 BERT 采用一个 30K 的 BPE 词表，RoBERTa 采用了一个更大的 50K 的词表 \u003csup id=\"fnref:28\"\u003e\u003ca href=\"#fn:28\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e28\u003c/a\u003e\u003c/sup\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"bart-2019-lewis2019bart\"\u003eBART (2019) \u003csup id=\"fnref1:20\"\u003e\u003ca href=\"#fn:20\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e20\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003eBART 采用了一个标准的 Seq2Seq Transformer 结构，类似 GPT 将 ReLU 激活函数替换为 GeLUs。对于基线模型，采用了一个 6 层的编码和解码器，对于更大模型采用了 12 层的结构。相比于 BERT 的架构主要有以下两点不同：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e解码器的每一层叠加了对编码器最后一个隐含层的注意力。\u003c/li\u003e\n\u003cli\u003eBERT 在预测之前采用了一个前馈的网络，而 BART 没有。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBART 采用了最小化破坏后的文档和原始文档之间的重构误差的方式进行预训练。不同于其他的一些去噪自编码器，BART 可以使用任意类型的文档破坏方式。极端情况下，当源文档的所有信息均丢失时，BART 就等价与一个语言模型。BART 中采用的文本破坏方式有：字符遮罩，字符删除，文本填充，句子重排，文档旋转，如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/bart-transformations.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch2 id=\"t5-2019-raffel2019exploring\"\u003eT5 (2019) \u003csup id=\"fnref1:17\"\u003e\u003ca href=\"#fn:17\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e17\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003eT5（Text-to-Text Transfer Transformer） 提出了一种 text-to-text 的框架，旨在利用相同的模型，损失函数和超参数等对机器翻译，文档摘要，问答和分类（例如：情感分析）等任务进行统一建模。我们甚至可以利用 T5 通过预测一个数字的文本表示而不是数字本身来建模一个回归任务。模型及其输入输出如下图所示：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/t5-text-to-text-framework.gif\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003eGoogle 的这项研究并不是提出一种新的方法，而是从全面的视角来概述当前 NLP 领域迁移学习的发展现状。T5 还公开了一个名为 C4（Colossal Clean Crawled Corpus）的数据集，该数据集是一个比 Wikipedia 大两个数量级的 Common Crawl 的清洗后版本的数据。更多模型的细节请参见源论文和 Google 的 \u003ca href=\"https://ai.googleblog.com/2020/02/exploring-transfer-learning-with-t5.html\"\u003e官方博客\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"ernie-baidu-2019-sun2019ernie-sun2019ernie2\"\u003eERNIE (Baidu, 2019) \u003csup id=\"fnref:29\"\u003e\u003ca href=\"#fn:29\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e29\u003c/a\u003e\u003c/sup\u003e \u003csup id=\"fnref:30\"\u003e\u003ca href=\"#fn:30\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e30\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003eERNIE 1.0 \u003csup id=\"fnref1:29\"\u003e\u003ca href=\"#fn:29\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e29\u003c/a\u003e\u003c/sup\u003e 通过建模海量数据中的词、实体及实体关系，学习真实世界的语义知识。相较于 BERT 学习原始语言信号，ERNIE 直接对先验语义知识单元进行建模，增强了模型语义表示能力。例如：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBERT ：哈 [mask] 滨是 [mask] 龙江的省会，[mask] 际冰 [mask] 文化名城。\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eERNIE：[mask] [mask] [mask] 是黑龙江的省会，国际 [mask] [mask] 文化名城。\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在 BERT 模型中，我们通过『哈』与『滨』的局部共现，即可判断出『尔』字，模型没有学习与『哈尔滨』相关的任何知识。而 ERNIE 通过学习词与实体的表达，使模型能够建模出『哈尔滨』与『黑龙江』的关系，学到『哈尔滨』是 『黑龙江』的省会以及『哈尔滨』是个冰雪城市。\u003c/p\u003e\n\u003cp\u003e训练数据方面，除百科类、资讯类中文语料外，ERNIE 还引入了论坛对话类数据，利用 DLM（Dialogue Language Model）建模 Query-Response 对话结构，将对话 Pair 对作为输入，引入 Dialogue Embedding 标识对话的角色，利用 Dialogue Response Loss 学习对话的隐式关系，进一步提升模型的语义表示能力。\u003c/p\u003e\n\u003cp\u003eERNIE 2.0 \u003csup id=\"fnref1:30\"\u003e\u003ca href=\"#fn:30\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e30\u003c/a\u003e\u003c/sup\u003e 是基于持续学习的语义理解预训练框架，使用多任务学习增量式构建预训练任务。ERNIE 2.0 中，新构建的预训练任务类型可以无缝的加入训练框架，持续的进行语义理解学习。 通过新增的实体预测、句子因果关系判断、文章句子结构重建等语义任务，ERNIE 2.0 语义理解预训练模型从训练数据中获取了词法、句法、语义等多个维度的自然语言信息，极大地增强了通用语义表示能力。\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2020-03-28-pre-trained-model-for-nlp/ernie-2-framework.png\" data-large-max-width=\"100%\" data-middle-max-width=\"100%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch2 id=\"state-of-art\"\u003eState-of-Art\u003c/h2\u003e\n\u003cp\u003eNLP 任务的 State-of-Art 模型详见：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gluebenchmark.com/leaderboard\"\u003eGLUE Leaderboard\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://super.gluebenchmark.com/leaderboard\"\u003eSuperGLUE Leaderboard\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rajpurkar.github.io/SQuAD-explorer/\"\u003eSQuAD\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://nlpprogress.com/\"\u003eNLP-progress\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cluebenchmarks.com/\"\u003e中文任务基准测评\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr/\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eQiu, X., Sun, T., Xu, Y., Shao, Y., Dai, N., \u0026amp; Huang, X. (2020). Pre-trained Models for Natural Language Processing: A Survey. \u003cem\u003eArXiv:2003.08271 [Cs]\u003c/em\u003e. \u003ca href=\"http://arxiv.org/abs/2003.08271\"\u003ehttp://arxiv.org/abs/2003.08271\u003c/a\u003e \u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\"\u003e\n\u003cp\u003eMikolov, T., Sutskever, I., Chen, K., Corrado, G. S., \u0026amp; Dean, J. (2013). Distributed representations of words and phrases and their compositionality. In \u003cem\u003eAdvances in neural information processing systems\u003c/em\u003e (pp. 3111-3119). \u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:3\"\u003e\n\u003cp\u003ePennington, J., Socher, R., \u0026amp; Manning, C. D. (2014, October). Glove: Global vectors for word representation. In \u003cem\u003eProceedings of the 2014 conference on empirical methods in natural language processing (EMNLP)\u003c/em\u003e (pp. 1532-1543). \u003ca href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:4\"\u003e\n\u003cp\u003eMcCann, B., Bradbury, J., Xiong, C., \u0026amp; Socher, R. (2017). Learned in translation: Contextualized word vectors. In \u003cem\u003eAdvances in Neural Information Processing Systems\u003c/em\u003e (pp. 6294-6305). \u003ca href=\"#fnref:4\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:4\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:5\"\u003e\n\u003cp\u003ePeters, M. E., Neumann, M., Iyyer, M., Gardner, M., Clark, C., Lee, K., \u0026amp; Zettlemoyer, L. (2018). Deep contextualized word representations. \u003cem\u003earXiv preprint arXiv:1802.05365.\u003c/em\u003e \u003ca href=\"#fnref:5\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:5\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:6\"\u003e\n\u003cp\u003eRadford, A., Narasimhan, K., Salimans, T., \u0026amp; Sutskever, I. (2018). Improving language understanding by generative pre-training. \u003cem\u003eURL \u003ca href=\"https://openai.com/blog/language-unsupervised/\"\u003ehttps://openai.com/blog/language-unsupervised/\u003c/a\u003e\u003c/em\u003e. \u003ca href=\"#fnref:6\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:6\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:7\"\u003e\n\u003cp\u003eDevlin, J., Chang, M. W., Lee, K., \u0026amp; Toutanova, K. (2018). Bert: Pre-training of deep bidirectional transformers for language understanding. \u003cem\u003earXiv preprint arXiv:1810.04805.\u003c/em\u003e \u003ca href=\"#fnref:7\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:7\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:8\"\u003e\n\u003cp\u003eKim, Y. (2014). Convolutional Neural Networks for Sentence Classification. In \u003cem\u003eProceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP)\u003c/em\u003e (pp. 1746-1751). \u003ca href=\"#fnref:8\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:9\"\u003e\n\u003cp\u003eHochreiter, S., \u0026amp; Schmidhuber, J. (1997). Long short-term memory. \u003cem\u003eNeural computation\u003c/em\u003e, 9(8), 1735-1780. \u003ca href=\"#fnref:9\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:10\"\u003e\n\u003cp\u003eChung, J., Gulcehre, C., Cho, K., \u0026amp; Bengio, Y. (2014). Empirical evaluation of gated recurrent neural networks on sequence modeling. \u003cem\u003earXiv preprint arXiv:1412.3555.\u003c/em\u003e \u003ca href=\"#fnref:10\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:11\"\u003e\n\u003cp\u003eSocher, R., Perelygin, A., Wu, J., Chuang, J., Manning, C. D., Ng, A. Y., \u0026amp; Potts, C. (2013). Recursive deep models for semantic compositionality over a sentiment treebank. In \u003cem\u003eProceedings of the 2013 conference on empirical methods in natural language processing\u003c/em\u003e (pp. 1631-1642). \u003ca href=\"#fnref:11\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:12\"\u003e\n\u003cp\u003eTai, K. S., Socher, R., \u0026amp; Manning, C. D. (2015). Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks. In \u003cem\u003eProceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)\u003c/em\u003e (pp. 1556-1566). \u003ca href=\"#fnref:12\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:13\"\u003e\n\u003cp\u003eMarcheggiani, D., Bastings, J., \u0026amp; Titov, I. (2018). Exploiting Semantics in Neural Machine Translation with Graph Convolutional Networks. In \u003cem\u003eProceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 2 (Short Papers)\u003c/em\u003e (pp. 486-492). \u003ca href=\"#fnref:13\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:14\"\u003e\n\u003cp\u003eVaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., … \u0026amp; Polosukhin, I. (2017). Attention is all you need. In \u003cem\u003eAdvances in neural information processing systems\u003c/em\u003e (pp. 5998-6008). \u003ca href=\"#fnref:14\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:14\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref2:14\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:15\"\u003e\n\u003cp\u003eDevlin, J., Chang, M. W., Lee, K., \u0026amp; Toutanova, K. (2019). BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. In \u003cem\u003eProceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers)\u003c/em\u003e (pp. 4171-4186). \u003ca href=\"#fnref:15\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:16\"\u003e\n\u003cp\u003eSong, K., Tan, X., Qin, T., Lu, J., \u0026amp; Liu, T. Y. (2019). MASS: Masked Sequence to Sequence Pre-training for Language Generation. In \u003cem\u003eInternational Conference on Machine Learning\u003c/em\u003e (pp. 5926-5936). \u003ca href=\"#fnref:16\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:16\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:17\"\u003e\n\u003cp\u003eRaffel, C., Shazeer, N., Roberts, A., Lee, K., Narang, S., Matena, M., … \u0026amp; Liu, P. J. (2019). Exploring the limits of transfer learning with a unified text-to-text transformer. \u003cem\u003earXiv preprint arXiv:1910.1068\u003c/em\u003e \u003ca href=\"#fnref:17\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:17\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:18\"\u003e\n\u003cp\u003eLiu, Y., Ott, M., Goyal, N., Du, J., Joshi, M., Chen, D., … \u0026amp; Stoyanov, V. (2019). Roberta: A robustly optimized bert pretraining approach. \u003cem\u003earXiv preprint arXiv:1907.11692.\u003c/em\u003e \u003ca href=\"#fnref:18\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:18\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:19\"\u003e\n\u003cp\u003eYang, Z., Dai, Z., Yang, Y., Carbonell, J., Salakhutdinov, R. R., \u0026amp; Le, Q. V. (2019). Xlnet: Generalized autoregressive pretraining for language understanding. In \u003cem\u003eAdvances in neural information processing systems\u003c/em\u003e (pp. 5754-5764). \u003ca href=\"#fnref:19\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:19\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:20\"\u003e\n\u003cp\u003eLewis, M., Liu, Y., Goyal, N., Ghazvininejad, M., Mohamed, A., Levy, O., … \u0026amp; Zettlemoyer, L. (2019). Bart: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension. \u003cem\u003earXiv preprint arXiv:1910.13461.\u003c/em\u003e \u003ca href=\"#fnref:20\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:20\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:21\"\u003e\n\u003cp\u003eSaunshi, N., Plevrakis, O., Arora, S., Khodak, M., \u0026amp; Khandeparkar, H. (2019). A Theoretical Analysis of Contrastive Unsupervised Representation Learning. In \u003cem\u003eInternational Conference on Machine Learning\u003c/em\u003e (pp. 5628-5637). \u003ca href=\"#fnref:21\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:22\"\u003e\n\u003cp\u003eTenney, I., Das, D., \u0026amp; Pavlick, E. (2019). BERT Rediscovers the Classical NLP Pipeline. In \u003cem\u003eProceedings of the 57th Annual Meeting of the Association for Computational Linguistics\u003c/em\u003e (pp. 4593-4601). \u003ca href=\"#fnref:22\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:23\"\u003e\n\u003cp\u003e图片来源：http://www.realworldnlpbook.com/blog/improving-sentiment-analyzer-using-elmo.html \u003ca href=\"#fnref:23\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:24\"\u003e\n\u003cp\u003eWu, Y., Schuster, M., Chen, Z., Le, Q. V., Norouzi, M., Macherey, W., … \u0026amp; Klingner, J. (2016). Google’s neural machine translation system: Bridging the gap between human and machine translation. \u003cem\u003earXiv preprint arXiv:1609.08144.\u003c/em\u003e \u003ca href=\"#fnref:24\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:25\"\u003e\n\u003cp\u003eDong, L., Yang, N., Wang, W., Wei, F., Liu, X., Wang, Y., … \u0026amp; Hon, H. W. (2019). Unified language model pre-training for natural language understanding and generation. In \u003cem\u003eAdvances in Neural Information Processing Systems\u003c/em\u003e (pp. 13042-13054). \u003ca href=\"#fnref:25\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:26\"\u003e\n\u003cp\u003eDai, Z., Yang, Z., Yang, Y., Carbonell, J. G., Le, Q., \u0026amp; Salakhutdinov, R. (2019, July). Transformer-XL: Attentive Language Models beyond a Fixed-Length Context. In \u003cem\u003eProceedings of the 57th Annual Meeting of the Association for Computational Linguistics\u003c/em\u003e (pp. 2978-2988). \u003ca href=\"#fnref:26\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:27\"\u003e\n\u003cp\u003eAl-Rfou, R., Choe, D., Constant, N., Guo, M., \u0026amp; Jones, L. (2019). Character-level language modeling with deeper self-attention. In \u003cem\u003eProceedings of the AAAI Conference on Artificial Intelligence\u003c/em\u003e (Vol. 33, pp. 3159-3166). \u003ca href=\"#fnref:27\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:28\"\u003e\n\u003cp\u003eRadford, A., Wu, J., Child, R., Luan, D., Amodei, D., \u0026amp; Sutskever, I. (2019). Language models are unsupervised multitask learners. \u003cem\u003eURL \u003ca href=\"https://openai.com/blog/better-language-models/\"\u003ehttps://openai.com/blog/better-language-models/\u003c/a\u003e\u003c/em\u003e. \u003ca href=\"#fnref:28\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:29\"\u003e\n\u003cp\u003eSun, Y., Wang, S., Li, Y., Feng, S., Chen, X., Zhang, H., … \u0026amp; Wu, H. (2019). Ernie: Enhanced representation through knowledge integration. \u003cem\u003earXiv preprint arXiv:1904.09223.\u003c/em\u003e \u003ca href=\"#fnref:29\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:29\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:30\"\u003e\n\u003cp\u003eSun, Y., Wang, S., Li, Y., Feng, S., Tian, H., Wu, H., \u0026amp; Wang, H. (2019). Ernie 2.0: A continual pre-training framework for language understanding. \u003cem\u003earXiv preprint arXiv:1907.12412.\u003c/em\u003e \u003ca href=\"#fnref:30\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:30\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"donate\"\u003e\n  \u003cdiv class=\"donate-header\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"donate-slug\" id=\"donate-slug\"\u003epre-trained-model-for-nlp\u003c/div\u003e\n  \u003cbutton class=\"donate-button\"\u003e赞 赏\u003c/button\u003e\n  \u003cdiv class=\"donate-footer\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"donate-modal-wrapper\"\u003e\n  \u003cdiv class=\"donate-modal\"\u003e\n    \u003cdiv class=\"donate-box\"\u003e\n      \u003cdiv class=\"donate-box-content\"\u003e\n        \u003cdiv class=\"donate-box-content-inner\"\u003e\n          \u003cdiv class=\"donate-box-header\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n          \u003cdiv class=\"donate-box-body\"\u003e\n            \u003cdiv class=\"donate-box-money\"\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-2\" data-v=\"2\" data-unchecked=\"￥ 2\" data-checked=\"2 元\"\u003e￥ 2\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-5\" data-v=\"5\" data-unchecked=\"￥ 5\" data-checked=\"5 元\"\u003e￥ 5\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-10\" data-v=\"10\" data-unchecked=\"￥ 10\" data-checked=\"10 元\"\u003e￥ 10\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-50\" data-v=\"50\" data-unchecked=\"￥ 50\" data-checked=\"50 元\"\u003e￥ 50\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-100\" data-v=\"100\" data-unchecked=\"￥ 100\" data-checked=\"100 元\"\u003e￥ 100\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-custom\" data-v=\"custom\" data-unchecked=\"任意金额\" data-checked=\"任意金额\"\u003e任意金额\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-qrcode\" id=\"donate-box-pay-qrcode\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"donate-box-footer\"\u003e\n            \u003cdiv class=\"donate-box-pay-method donate-box-pay-method-checked\" data-v=\"wechat-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-wechat-pay\" src=\"\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay-method\" data-v=\"alipay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-alipay\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"button\" class=\"donate-box-close-button\"\u003e\n      \u003csvg class=\"donate-box-close-button-icon\" fill=\"#fff\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"\u003e\u003cpath d=\"M13.486 12l5.208-5.207a1.048 1.048 0 0 0-.006-1.483 1.046 1.046 0 0 0-1.482-.005L12 10.514 6.793 5.305a1.048 1.048 0 0 0-1.483.005 1.046 1.046 0 0 0-.005 1.483L10.514 12l-5.208 5.207a1.048 1.048 0 0 0 .006 1.483 1.046 1.046 0 0 0 1.482.005L12 13.486l5.207 5.208a1.048 1.048 0 0 0 1.483-.006 1.046 1.046 0 0 0 .005-1.482L13.486 12z\" fill-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/svg\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\" src=\"/js/donate.js\"\u003e\u003c/script\u003e\n\n\n  \u003cfooter\u003e\n  \n\u003cnav class=\"post-nav\"\u003e\n  \u003cspan class=\"nav-prev\"\u003e← \u003ca href=\"/cn/2019/11/user-privileges-of-2b-products/\"\u003eToB 产品用户权限 (User Privileges of ToB Products)\u003c/a\u003e\u003c/span\u003e\n  \u003cspan class=\"nav-next\"\u003e\u003ca href=\"/cn/2020/04/graph-embedding-and-gnn/\"\u003e图嵌入 (Graph Embedding) 和图神经网络 (Graph Neural Network)\u003c/a\u003e →\u003c/span\u003e\n\u003c/nav\u003e\n\n\n\n\n\u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"8302038603\"\u003e\u003c/ins\u003e\n\u003cscript\u003e\n  (adsbygoogle = window.adsbygoogle || []).push({});\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toggle-theme.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"/js/no-highlight.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/math-code.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/heading-anchor.js\"\u003e\u003c/script\u003e\n\n\n\n\u003csection class=\"comments\"\u003e\n\u003cscript src=\"https://giscus.app/client.js\" data-repo=\"leovan/leovan.me\" data-repo-id=\"MDEwOlJlcG9zaXRvcnkxMTMxOTY0Mjc=\" data-category=\"Comments\" data-category-id=\"DIC_kwDOBr89i84CT-R7\" data-mapping=\"pathname\" data-strict=\"1\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"zh-CN\" data-loading=\"lazy\" crossorigin=\"anonymous\" defer=\"\"\u003e\n\u003c/script\u003e\n\u003c/section\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cscript async=\"\" src=\"/js/center-img.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/right-quote.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/external-link.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/alt-title.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/figure.js\"\u003e\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/vanilla-back-to-top@latest/dist/vanilla-back-to-top.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\naddBackToTop({\n  diameter: 48\n});\n\u003c/script\u003e\n\n  \u003chr/\u003e\n  \u003cdiv class=\"copyright no-border-bottom\"\u003e\n    \u003cdiv class=\"copyright-author-year\"\u003e\n      \u003cspan\u003eCopyright © 2017-2024 \u003ca href=\"/\"\u003e范叶亮 | Leo Van\u003c/a\u003e\u003c/span\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n  \u003c/footer\u003e\n  \u003c/article\u003e",
  "Date": "2020-03-28T00:00:00Z",
  "Author": "范叶亮"
}