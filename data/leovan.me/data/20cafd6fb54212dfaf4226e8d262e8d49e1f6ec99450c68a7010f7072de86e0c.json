{
  "Source": "leovan.me",
  "Title": "Ising 模型，Hopfield 网络和受限的玻尔兹曼机 (Ising, Hopfield and RBM)",
  "Link": "https://leovan.me/cn/2018/01/ising-hopfield-and-rbm/",
  "Content": "\u003carticle class=\"main\"\u003e\n    \u003cheader class=\"content-title\"\u003e\n    \n\u003ch1 class=\"title\"\u003e\n  \n  Ising 模型，Hopfield 网络和受限的玻尔兹曼机 (Ising, Hopfield and RBM)\n  \n\u003c/h1\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"author-date\"\u003e范叶亮 / \n2018-01-17\u003c/h2\u003e\n\n\n\n\u003ch3 class=\"post-meta\"\u003e\n\n\n\u003cstrong\u003e分类: \u003c/strong\u003e\n\u003ca href=\"/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\"\u003e机器学习\u003c/a\u003e, \u003ca href=\"/categories/%E8%A1%A8%E7%A4%BA%E5%AD%A6%E4%B9%A0\"\u003e表示学习\u003c/a\u003e\n\n\n\n\n/\n\n\n\n\n\u003cstrong\u003e标签: \u003c/strong\u003e\n\u003cspan\u003e受限的玻尔兹曼机\u003c/span\u003e, \u003cspan\u003eRBM\u003c/span\u003e, \u003cspan\u003eIsing\u003c/span\u003e, \u003cspan\u003eHopfield\u003c/span\u003e\n\n\n\n\n/\n\n\n\u003cstrong\u003e字数: \u003c/strong\u003e\n9714\n\u003c/h3\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n    \n    \n    \u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"1261604535\"\u003e\u003c/ins\u003e\n    \u003cscript\u003e\n    (adsbygoogle = window.adsbygoogle || []).push({});\n    \u003c/script\u003e\n    \n    \n    \u003c/header\u003e\n\n\n\n\n\u003ch1 id=\"ising-模型\"\u003eIsing 模型\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003e$\\renewcommand{\\sign}{\\operatorname{sign}}$\u003c/code\u003e\u003ca href=\"https://zh.wikipedia.org/zh/%E6%98%93%E8%BE%9B%E6%A8%A1%E5%9E%8B\"\u003eIsing 模型\u003c/a\u003e最早是由物理学家威廉·冷次在 1920 年发明的，他把该模型当成是一个给他学生恩斯特·易辛的问题。易辛在他一篇 1924 年的论文 \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e 中求得了一维易辛模型的解析解，并且证明它不会产生相变。 二维方晶格易辛模型相对于一维的难出许多，因此其解析的描述在一段时间之后才在 1943 年由拉斯·昂萨格给出 \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003eIsing 模型假设铁磁物质是由一堆规则排列的小磁针构成，每个磁针只有上下两个方向。相邻的小磁针之间通过能量约束发生相互作用，同时受到环境热噪声的干扰而发生磁性的随机转变。涨落的大小由关键的温度参数决定，温度越高，随机涨落干扰越强，小磁针越容易发生无序而剧烈地状态转变，从而让上下两个方向的磁性相互抵消，整个系统消失磁性，如果温度很低，则小磁针相对宁静，系统处于能量约束高的状态，大量的小磁针方向一致，铁磁系统展现出磁性。而当系统处于临界温度 \u003ccode\u003e$T_C$\u003c/code\u003e 时，Ising 模型表现出一系列幂律行为和自相似现象 \u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003e由于 Ising 模型的高度抽象，可以很容易地将它应用到其他领域之中。例如，将每个小磁针比喻为某个村落中的村民，而将小磁针上下的两种状态比喻成个体所具备的两种政治观点，相邻小磁针之间的相互作用比喻成村民之间观点的影响，环境的温度比喻成每个村民对自己意见不坚持的程度，这样 Ising 模型就可以建模该村落中不同政治见解的动态演化。在社会科学中，人们已经将 Ising 模型应用于股票市场、种族隔离、政治选择等不同的问题。另一方面，如果将小磁针比喻成神经元细胞，向上向下的状态比喻成神经元的激活与抑制，小磁针的相互作用比喻成神经元之间的信号传导，那么，Ising 模型的变种还可以用来建模神经网络系统，从而搭建可适应环境、不断学习的机器，例如 Hopfield 网络或 Boltzmann 机。\u003c/p\u003e\n\u003cp\u003e考虑一个二维的情况\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/ising-model.svg\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e如图所示，每个节点都有两种状态 \u003ccode\u003e$s_i \\in \\{+1, -1\\}$\u003c/code\u003e，则我们可以定义这个系统的能量为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E = -H \\sum_{i=1}^{N}{s_i} - J \\sum_{\u0026lt;i, j\u0026gt;}{s_i s_j} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$H$\u003c/code\u003e 为外界磁场的强度，\u003ccode\u003e$J$\u003c/code\u003e 为能量耦合常数，\u003ccode\u003e$\\sum_{\u0026lt;i, j\u0026gt;}$\u003c/code\u003e表示对于相邻的两个节点的函数值求和。因此，可以得出\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e当每个节点的方向同外部磁场一致时，系统能量越小；反之系统能量越大。\u003c/li\u003e\n\u003cli\u003e对于 \u003ccode\u003e$J \u0026gt; 0$\u003c/code\u003e，当相邻的节点方向相同时，系统能量越小；反之系统能量越大。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e对于整个系统的演变，除了系统的总能量以外，还受到节点所处环境的热噪声影响。我们利用温度 \u003ccode\u003e$T$\u003c/code\u003e 表示环境对节点的影响，当 \u003ccode\u003e$T$\u003c/code\u003e 越高时，节点状态发生变化的可能性越大。此时，则有两种力量作用在每个节点上\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e节点邻居和外部磁场的影响，这种影响使得当前节点尽可能的同其邻居和外部磁场保持一致，即尽可能是系统的总能量达到最小。\u003c/li\u003e\n\u003cli\u003e环境的影响，这种影响使得每个节点的状态以一定的概率发生随机变化。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e不难想像，当 \u003ccode\u003e$T = 0$\u003c/code\u003e 时，节点状态完全受其邻居和外部磁场影响，当 \u003ccode\u003e$J = 0, H = 0$\u003c/code\u003e 时，节点处于完全的随机状态。\u003c/p\u003e\n\u003cp\u003e对于 Ising 模型，我们利用蒙特卡罗方法进行模拟。初始化系统状态为 \u003ccode\u003e$s_i^{\\left(0\\right)}$\u003c/code\u003e，对于任意时刻 \u003ccode\u003e$t$\u003c/code\u003e，对其状态 \u003ccode\u003e$s_i^{\\left(t\\right)}$\u003c/code\u003e进行一个改变，将其中一个节点变为相反的状态，得到新的状态 \u003ccode\u003e$s\u0026#39;_i$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ s_i^{\\left(t+1\\right)} = \\begin{cases} s\u0026#39;_i \u0026amp; \\text{with probablity of } \\mu \\\\ s_i^{\\left(t\\right)} \u0026amp; \\text{with probablity of } 1-\\mu \\end{cases} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$\\mu = \\min\\left\\lbrace\\dfrac{e^{E\\left(s_i^{\\left(t\\right)}\\right) - E\\left(s\u0026#39;_i\\right)}}{kT}, 1\\right\\rbrace$\u003c/code\u003e 表示接受转移的概率；\u003ccode\u003e$k \\approx 1.38 \\times 10^{23}$\u003c/code\u003e 为玻尔兹曼常数。我们利用蒙特卡罗方法对其进行模拟 \u003ccode\u003e$T = 4J/k$\u003c/code\u003e的情况，我们分别保留第 \u003ccode\u003e$0, 1, 5, 50, 500, 5000$\u003c/code\u003e 步的模拟结果\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003e# 每一轮状态转移\neach_round \u0026lt;- function(current_matrix, ising_config) {\n    n_row \u0026lt;- nrow(current_matrix)\n    n_col \u0026lt;- ncol(current_matrix)\n    \n    for (i in 1:n_row) {\n        for (j in 1:n_col) {\n            current_row \u0026lt;- sample(1:n_row, 1)\n            current_col \u0026lt;- sample(1:n_col, 1)\n            s \u0026lt;- current_matrix[current_row, current_col]\n            e \u0026lt;- -(current_matrix[(current_row-1-1)%%n_row+1, current_col] +\n                current_matrix[current_row, (current_col-1-1)%%n_col+1] +\n                current_matrix[(current_row+1)%%n_row, current_col] +\n                current_matrix[current_row, (current_col+1)%%n_col]) *\n                s * ising_config$j\n            mu \u0026lt;- min(exp((e + e) / (ising_config$k * ising_config$t)), 1)\n            mu_random \u0026lt;- runif(1)\n            \n            if (mu_random \u0026lt; mu) {\n                s \u0026lt;- -1 * s\n            }\n            \n            current_matrix[current_row, current_col] \u0026lt;- s\n        }\n    }\n    \n    current_matrix\n}\n\n# Ising 模拟\nising_simulation \u0026lt;- function(N, iter, ising_config, saved_steps) {\n    set.seed(112358)\n    current_matrix \u0026lt;- matrix(sample(0:1, N^2, replace = T), N, N)*2-1\n    saved_matrix \u0026lt;- list()\n    \n    if (0 %in% saved_steps) {\n        saved_matrix \u0026lt;- c(saved_matrix, list(current_matrix))\n    }\n    \n    for (i in 1:iter) {\n        if (i %in% saved_steps) {\n            saved_matrix \u0026lt;- c(saved_matrix, list(current_matrix))\n        }\n        \n        current_matrix \u0026lt;- each_round(current_matrix, ising_config)\n        \n        if (i %% 1000 == 0) {\n            cat(paste0(\u0026#34;Steps: \u0026#34;, i, \u0026#39;\\n\u0026#39;))\n        }\n    }\n    \n    saved_matrix\n}\n\n# T = 4J/K，方便模拟取 j = 1, k = 1, t = 4\nising_config \u0026lt;- list(j = 1, k = 1, t = 4)\ndiff_steps_matrix \u0026lt;- ising_simulation(100, 5000, ising_config,\n                                      c(0, 1, 5, 50, 500, 5000))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e模拟结果可视化效果如图所示\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/ising-different-steps.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e对于二维的 Ising 模型，存在一个相变点，在相变点上的温度 \u003ccode\u003e$T_c$\u003c/code\u003e 满足\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\sinh\\left(\\dfrac{2J_1}{kT_c}\\right) \\sinh\\left(\\dfrac{2J_2}{kT_c}\\right) = 1 $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e若 \u003ccode\u003e$J_1 = J_2$\u003c/code\u003e，则\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ T_c = \\dfrac{2J}{k \\ln\\left(1 + \\sqrt{2}\\right)} \\approx 2.27 \\dfrac{J}{k} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e称之为临界温度。当温度小于临界值的时候，Ising 模型中大多数节点状态相同，系统处于较为秩序的状态。当温度大于临界值的时候，大多数节点的状态较为混乱，系统处于随机的状态。而当温度接近临界的时候，系统的运行介于随机与秩序之间，也就是进入了混沌的边缘地带，这种状态称为临界状态。\u003c/p\u003e\n\u003cp\u003e我们模拟不同温度下，系统在运行 \u003ccode\u003e$50$\u003c/code\u003e 步时的状态\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003eising_config_t \u0026lt;- c(1, 2, 2.27, 2.5, 3, 6)\ndiff_t_matrix \u0026lt;- lapply(ising_config_t, function(t) {\n    ising_config \u0026lt;- list(j = 1, k = 1, t = t)\n    ising_simulation(100, 50, ising_config, c(50))\n})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e模拟结果可视化效果如图所示\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/ising-different-t.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch1 id=\"hopfield-神经网络\"\u003eHopfield 神经网络\u003c/h1\u003e\n\u003cp\u003eHopfield 神经网络 \u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e4\u003c/a\u003e\u003c/sup\u003e 是一种基于能量的反馈人工神经网络。Hopfield 神经网络分为离散型 (Discrete Hopfield Neural Network, DHNN) 和 连续性 (Continues Hopfield Neural Network, CHNN)。\u003c/p\u003e\n\u003ch2 id=\"离散型-hopfield-神经网络\"\u003e离散型 Hopfield 神经网络\u003c/h2\u003e\n\u003ch3 id=\"网络结构\"\u003e网络结构\u003c/h3\u003e\n\u003cp\u003e对于离散型 Hopfield 神经网络，其网络结果如下\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/hopfield-network.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e对于具有 \u003ccode\u003e$n$\u003c/code\u003e 个神经元的网络，我们设 \u003ccode\u003e$t$\u003c/code\u003e 时刻的网络状态为 \u003ccode\u003e$\\boldsymbol{X}^{\\left(t\\right)} = \\left(x_1^{\\left(t\\right)}, x_2^{\\left(t\\right)}, ..., x_n^{\\left(t\\right)}\\right)^T$\u003c/code\u003e，对于 \u003ccode\u003e$t+1$\u003c/code\u003e 时刻网络的状态\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ x_i^{\\left(t+1\\right)} = f \\left(net_i\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，DHNN 中 \u003ccode\u003e$f$\u003c/code\u003e 多为符号函数，即\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ x_i = \\sign \\left(net_i\\right) = \\begin{cases} 1, net_i \\geq 0 \\\\ -1, net_i \u0026lt; 0 \\end{cases} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$net_i$\u003c/code\u003e 为一个节点的输入，为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ net_i = \\sum_{j=1}^{n}{\\left(w_{ij}x_j - T_i\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$T_i$\u003c/code\u003e 为每个神经元的阈值，对于 DHNN，一般有 \u003ccode\u003e$w_{ii} = 0, w_{ij} = w_{ji}$\u003c/code\u003e，当反馈网络稳定后，稳定后的状态即为网络的输出。网络的更新主要有两种状态，\u003cstrong\u003e异步方式\u003c/strong\u003e和\u003cstrong\u003e同步方式\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e对于异步方式的更新方法，每一次仅改变一个神经元 \u003ccode\u003e$j$\u003c/code\u003e 的状态，即\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ x_i^{\\left(t+1\\right)} = \\begin{cases} \\sign\\left(net_i^{\\left(t\\right)}\\right), i = j \\\\ x_i^{\\left(t\\right)}, i \\neq j \\end{cases} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于同步方式的更新方法，每一次需改变所有神经元的状态，即\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ x_i^{\\left(t+1\\right)} = \\sign\\left(net_i^{\\left(t\\right)}\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"网络稳定性\"\u003e网络稳定性\u003c/h3\u003e\n\u003cp\u003e我们可以将反馈网络看做一个非线性动力学系统，因此这个系统最后可能会收敛到一个稳态，或在有限状态之间振荡，亦或是状态为无穷多个即混沌现象。对于 DHNN 因为其网络状态是有限的，因此不会出现混沌的现象。若一个反馈网络达到一个稳态状态 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 时，即 \u003ccode\u003e$\\boldsymbol{X}^{\\left(t+1\\right)} = \\boldsymbol{X}^{\\left(t\\right)}$\u003c/code\u003e ，则称这个状态为一个吸引子。在 Hopfield 网络结构和权重确定的情况下，其具有 \u003ccode\u003e$M$\u003c/code\u003e 个吸引子，因此我们可以认为这个网络具有存储 \u003ccode\u003e$M$\u003c/code\u003e 个记忆的能力。\u003c/p\u003e\n\u003cp\u003e设 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 为网络的一个吸引子，权重矩阵 \u003ccode\u003e$\\boldsymbol{W}$\u003c/code\u003e 是一个对称阵，则定义 \u003ccode\u003e$t$\u003c/code\u003e 时刻网络的能量函数为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E\\left(t\\right) = -\\dfrac{1}{2} \\boldsymbol{X}^{\\left(t\\right)T} \\boldsymbol{W} \\boldsymbol{X}^{\\left(t\\right)} + \\boldsymbol{X}^{\\left(t\\right)T} \\boldsymbol{T} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则定义网络能量的变化量\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\Delta E\\left(t\\right) = E\\left(t+1\\right) - E\\left(t\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则以\u003cstrong\u003e异步更新\u003c/strong\u003e方式，不难推导得出\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\Delta E\\left(t\\right) = -\\Delta x_i^{\\left(t\\right)} \\left(\\sum_{j=1}^{n}{\\left(w_{ij}x_j - T_j\\right)}\\right) - \\dfrac{1}{2} \\Delta x_i^{\\left(t\\right)2} w_{ii} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e由于网络中的神经元不存在自反馈，即 \u003ccode\u003e$w_{ii} = 0$\u003c/code\u003e，则上式可以化简为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\Delta E\\left(t\\right) = -\\Delta x_i^{\\left(t\\right)} net_i^{\\left(t\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e因此，对于如上的能量变化，可分为 3 中情况：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e当 \u003ccode\u003e$x_i^{\\left(t\\right)} = -1, x_i^{\\left(t+1\\right)} = 1$\u003c/code\u003e 时，\u003ccode\u003e$\\Delta x_i^{\\left(t\\right)} = 2, net_i^{\\left(t\\right)} \\geq 0$\u003c/code\u003e，则可得 \u003ccode\u003e$\\Delta E \\left(t\\right) \\leq 0$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003e$x_i^{\\left(t\\right)} = 1, x_i^{\\left(t+1\\right)} = -1$\u003c/code\u003e 时，\u003ccode\u003e$\\Delta x_i^{\\left(t\\right)} = -2, net_i^{\\left(t\\right)} \u0026lt; 0$\u003c/code\u003e，则可得 \u003ccode\u003e$\\Delta E \\left(t\\right) \u0026lt; 0$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003e$x_i^{\\left(t\\right)} = x_i^{\\left(t+1\\right)}$\u003c/code\u003e 时，\u003ccode\u003e$\\Delta x_i^{\\left(t\\right)} = 0$\u003c/code\u003e，则可得 \u003ccode\u003e$\\Delta E \\left(t\\right) = 0$\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e则对于任何情况，\u003ccode\u003e$\\Delta E \\left(t\\right) \\leq 0$\u003c/code\u003e，也就是说在网络不断变化的过程中，网络的总能量是一直下降或保持不变的，因此网络的能量最终会收敛到一个常数。\u003c/p\u003e\n\u003cp\u003e设 \u003ccode\u003e$\\boldsymbol{X}\u0026#39;$\u003c/code\u003e 为吸引子，对于异步更新方式，若\u003cstrong\u003e存在\u003c/strong\u003e一个变换顺序，使得网络可以从状态 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 转移到 \u003ccode\u003e$\\boldsymbol{X}\u0026#39;$\u003c/code\u003e，则称 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 弱吸引到 \u003ccode\u003e$\\boldsymbol{X}\u0026#39;$\u003c/code\u003e，这些 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 的集合称之为 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 的弱吸引域；若对于\u003cstrong\u003e任意\u003c/strong\u003e变换顺序，都能够使得网络可以从状态 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 转移到 \u003ccode\u003e$\\boldsymbol{X}\u0026#39;$\u003c/code\u003e，则称 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 强吸引到 \u003ccode\u003e$\\boldsymbol{X}\u0026#39;$\u003c/code\u003e，对于这些 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 称之为 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 的强吸引域。\u003c/p\u003e\n\u003cp\u003e对于 Hopfield 网络的权重，我们利用 Hebbian 规则进行设计。Hebbian 规则认为如果两个神经元同步激发，则它们之间的权重增加；如果单独激发，则权重减少。则对于给定的 \u003ccode\u003e$p$\u003c/code\u003e 个模式样本 \u003ccode\u003e$\\boldsymbol{X}^k, k = 1, 2, ..., p$\u003c/code\u003e，其中 \u003ccode\u003e$x \\in \\{-1, 1\\}^n$\u003c/code\u003e 且样本之间两两正交，则权重计算公式为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ w_{ij} = \\dfrac{1}{n} \\sum_{k=1}^{p}{x_i^k x_j^k} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于给定的样本 \u003ccode\u003e$\\boldsymbol{X}$\u003c/code\u003e 确定为网络的吸引子，但对于有些非给定的样本也可能是网络的吸引子，这些吸引子称之为伪吸引子。以上权重的计算是基于两两正交的样本得到的，但真实情况下很难保证样本两两正交，对于非正交的模式，网络的存储能力则会大大下降。根据 Abu-Mostafa\u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e5\u003c/a\u003e\u003c/sup\u003e 的研究表明，当模式的数量 \u003ccode\u003e$p$\u003c/code\u003e 大于 \u003ccode\u003e$0.15 n$\u003c/code\u003e 时，网络的推断就很可能出错，也就是结果会收敛到伪吸引子上。\u003c/p\u003e\n\u003ch3 id=\"示例\"\u003e示例\u003c/h3\u003e\n\u003cp\u003e我们通过一个手写数字识别的例子介绍一些 Hopfield 网络的功能，我们存在如下 10 个数字的图片，每张为像素 16*16 的二值化图片，其中背景色为白色，前景色为黑色 (每个图片的名称为 \u003ccode\u003enum.png\u003c/code\u003e，图片位于 \u003ccode\u003e/images/cn/2018-01-17-ising-hopfield-and-rbm\u003c/code\u003e 目录)。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/digits.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e首先我们载入每张图片的数据\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003elibrary(EBImage)\n\n# 载入数据\ndigits \u0026lt;- lapply(0:9, function(num) {\n    readImage(paste0(num, \u0026#39;.png\u0026#39;))\n})\n\n# 转换图像为 16*16 的一维向量\n# 将 (0, 1) 转换为 (-1, 1)\ndigits_patterns \u0026lt;- lapply(digits, function(digit) {\n    pixels \u0026lt;- c(digit)\n    pixels * 2 - 1\n})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e接下来利用这 10 个模式训练一个 Hopfield 网络\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003e#\u0026#39; 训练 Hopfield 网络\n#\u0026#39; \n#\u0026#39; @param n 网络节点个数\n#\u0026#39; @param pattern_list 模式列表\n#\u0026#39; @return 训练好的 Hopfield 网络\ntrain_hopfield \u0026lt;- function(n, pattern_list) {\n    weights \u0026lt;- matrix(rep(0, n*n), n, n)\n    n_patterns \u0026lt;- length(pattern_list)\n    \n    for (i in 1:n_patterns) {\n        weights \u0026lt;- weights + pattern_list[[i]] %o% pattern_list[[i]]\n    }\n    diag(weights) \u0026lt;- 0\n    weights \u0026lt;- weights / n_patterns\n    \n    list(weights = weights, n = n)\n}\n\n# 训练 Hopfield 网络\ndigits_hopfield_network \u0026lt;- train_hopfield(16*16, digits_patterns)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e为了测试 Hopfiled 网络的记忆能力，我们利用 10 个模式生成一些测试数据，我们分别去掉图像的右边或下边的 5 个像素，生成新的 20 张测试图片\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003e# 构造测试数据\ndigits_test_remove_right \u0026lt;- lapply(0:9, function(num) {\n    digit_test \u0026lt;- digits[[num+1]]\n    digit_test[12:16, ] \u0026lt;- 1\n    digit_test\n})\ndigits_test_remove_bottom \u0026lt;- lapply(0:9, function(num) {\n    digit_test \u0026lt;- digits[[num+1]]\n    digit_test[, 12:16] \u0026lt;- 1\n    digit_test\n})\ndigits_test \u0026lt;- c(digits_test_remove_right, digits_test_remove_bottom)\n\n# 转换图像为 16*16 的一维向量\n# 将 (0, 1) 转换为 (-1, 1)\ndigits_test_patterns \u0026lt;- lapply(digits_test, function(digit) {\n    pixels \u0026lt;- c(digit)\n    pixels * 2 - 1\n})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/digits-test.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们利用训练好的 Hopfield 网络运行测试数据，我们迭代 300 次并保存最后的网络输出\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003e#\u0026#39; 运行 Hopfiled 网络\n#\u0026#39; @param hopfield_network 训练好的 Hopfield 网络\n#\u0026#39; @param pattern 输入的模式\n#\u0026#39; @param max_iter 最大迭代次数\n#\u0026#39; @param save_history 是否保存状态变化历史\n#\u0026#39; @return 最终的模式 (以及历史模式)\nrun_hopfield \u0026lt;- function(hopfield_network, pattern,\n                         max_iter = 100, save_history = T) {\n    last_pattern \u0026lt;- pattern\n    history_patterns \u0026lt;- list()\n    \n    for (iter in 1:max_iter) {\n        current_pattern \u0026lt;- last_pattern\n        \n        i \u0026lt;- round(runif(1, 1, hopfield_network$n))\n        net_i \u0026lt;- hopfield_network$weights[i, ] %*% current_pattern\n        current_pattern[i] \u0026lt;- ifelse(net_i \u0026lt; 0, -1, 1)\n        \n        if (save_history) {\n            history_patterns[[iter]] \u0026lt;- last_pattern\n        }\n        \n        last_pattern \u0026lt;- current_pattern\n    }\n    \n    list(history_patterns = history_patterns,\n         final_pattern = last_pattern)\n}\n\n# 运行 Hopfield 网络，获取测试数据结果\ndigits_test_results_patterns \u0026lt;- lapply(digits_test_patterns,\n                                       function(pattern) {\n    run_hopfield(digits_hopfield_network, pattern, max_iter = 300)\n})\n\n# 转换测试数据结果为图片\ndigits_test_results \u0026lt;- lapply(digits_test_results_patterns,\n                              function(result) {\n    each_dim \u0026lt;- sqrt(digits_hopfield_network$n)\n    Image((result$final_pattern + 1) / 2,\n          dim = c(each_dim, each_dim),\n          colormode = \u0026#39;Grayscale\u0026#39;)\n})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e网络变换过程中，图像的变换如图所示\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/digits-test-results.gif\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e最终网络的输出如图所示\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/digits-test-results.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e从结果中可以看出，部分测试图片还是得到了比较好的恢复，但如上文所说，由于我们给定的模式之间并不是两两正交的，因此，网络的推断就很可能出错 (例如：数字 5 恢复的结果更像 9 多一些)，甚至结果会收敛到伪吸引子上。\u003c/p\u003e\n\u003ch2 id=\"连续型-hopfield-神经网络\"\u003e连续型 Hopfield 神经网络\u003c/h2\u003e\n\u003ch3 id=\"网络结构-1\"\u003e网络结构\u003c/h3\u003e\n\u003cp\u003e连续型 Hopfield 网络相比于离散型 Hopfield 网络的主要差别在于：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e网络中所有的神经元随时间 \u003ccode\u003e$t$\u003c/code\u003e 同时更新，网络状态随时间连续变化。\u003c/li\u003e\n\u003cli\u003e神经元的状态转移函数为一个 S 型函数，例如\n\u003ccode\u003e$$ v_i = f\\left(u_i\\right) = \\dfrac{1}{1 + e^{\\dfrac{-2 u_i}{\\gamma}}} = \\dfrac{1}{2} \\left(1 + \\tanh \\dfrac{u_i}{\\gamma}\\right) $$\u003c/code\u003e\n其中，\u003ccode\u003e$v_i$\u003c/code\u003e 表示一个神经元的输出，\u003ccode\u003e$u_i$\u003c/code\u003e 表示一个神经元的输入。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e对于理想情况，网络的能量函数可以写为\u003csup id=\"fnref:6\"\u003e\u003ca href=\"#fn:6\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e6\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E = -\\dfrac{1}{2} \\sum_{i=1}^{n}{\\sum_{j=1}^{n}{w_{ij} v_i v_j}} - \\sum_{i=1}^{n} v_i I_i $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e可以得出，随着网络的演变，网络的总能量是降低的，随着网络中节点的不断变化，网络最终收敛到一个稳定的状态。\u003c/p\u003e\n\u003ch3 id=\"tsp-问题求解\"\u003eTSP 问题求解\u003c/h3\u003e\n\u003cp\u003e旅行推销员问题 (Travelling salesman problem, TSP) 是指给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短路径 \u003csup id=\"fnref:7\"\u003e\u003ca href=\"#fn:7\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e7\u003c/a\u003e\u003c/sup\u003e。TSP 问题是一个 NP-hard 问题 \u003csup id=\"fnref:8\"\u003e\u003ca href=\"#fn:8\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e8\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003e对于 TSP 问题，我们给定一个城市指之间的距离矩阵\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ D = \\left\\lgroup \\begin{array}{cccc} d_{11} \u0026amp; d_{12} \u0026amp; \\cdots \u0026amp; d_{1n} \\\\ d_{21} \u0026amp; d_{22} \u0026amp; \\cdots \u0026amp; d_{2n} \\\\ \\vdots \u0026amp; \\vdots \u0026amp;        \u0026amp; \\vdots \\\\ d_{n1} \u0026amp; d_{n2} \u0026amp; \\cdots \u0026amp; d_{nn} \\end{array} \\right\\rgroup $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$d_{ij} = d_{ji}, i \\neq j$\u003c/code\u003e 表示城市 \u003ccode\u003e$i$\u003c/code\u003e 和城市 \u003ccode\u003e$j$\u003c/code\u003e 之间的距离，\u003ccode\u003e$d_{ij} = 0, i = j$\u003c/code\u003e。TSP 问题的优化目标是找到一条路径访问每一座城市一次并回到起始城市，我们利用一个矩阵表示访问城市的路径\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ V = \\left\\lgroup \\begin{array}{cccc} v_{11} \u0026amp; v_{12} \u0026amp; \\cdots \u0026amp; v_{1n} \\\\ v_{21} \u0026amp; v_{22} \u0026amp; \\cdots \u0026amp; v_{2n} \\\\ \\vdots \u0026amp; \\vdots \u0026amp;        \u0026amp; \\vdots \\\\ v_{n1} \u0026amp; v_{n2} \u0026amp; \\cdots \u0026amp; v_{nn} \\end{array} \\right\\rgroup $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$v_{xi} = 1$\u003c/code\u003e 表示第 \u003ccode\u003e$i$\u003c/code\u003e 次访问城市 \u003ccode\u003e$x$\u003c/code\u003e，因此对于矩阵 \u003ccode\u003e$V$\u003c/code\u003e，其每一行每一列仅有一个元素值为 \u003ccode\u003e$1$\u003c/code\u003e，其他元素值均为 \u003ccode\u003e$0$\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e对于 TSP 问题，我们可以得到如下约束条件\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e城市约束\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因为每个城市只能访问一次，因此对于第 \u003ccode\u003e$x$\u003c/code\u003e 行仅能有一个元素是 \u003ccode\u003e$1$\u003c/code\u003e，其他均为 \u003ccode\u003e$0$\u003c/code\u003e，即任意两个相邻元素的乘积为 \u003ccode\u003e$0$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\sum_{i=1}^{n-1}{\\sum_{j=i+1}^{n}{v_{xi}v_{xj}}} = 0 $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于城市约束，我们得到该约束对应的能量分量为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E_1 = \\dfrac{1}{2} A \\sum_{x=1}^{n}{\\sum_{i=1}^{n-1}{\\sum_{j=i+1}^{n}{v_{xi}v_{xj}}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e时间约束\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因为每一时刻仅能够访问一个城市，因此对于第 \u003ccode\u003e$i$\u003c/code\u003e 行仅能有一个元素是 \u003ccode\u003e$1$\u003c/code\u003e，其他均为 \u003ccode\u003e$0$\u003c/code\u003e，即任意两个相邻元素的乘积为 \u003ccode\u003e$0$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\sum_{x=1}^{n-1}{\\sum_{y=x+1}^{n}{v_{xi}v_{yi}}} = 0 $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于时间约束，我们得到该约束对应的能量分量为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E_2 = \\dfrac{1}{2} B \\sum_{i=1}^{n}{\\sum_{x=1}^{n-1}{\\sum_{y=x+1}^{n}{v_{xi}v_{yi}}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e有效性约束\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当矩阵 \u003ccode\u003e$V$\u003c/code\u003e 中所有的元素均为 \u003ccode\u003e$0$\u003c/code\u003e 的时候，可得 \u003ccode\u003e$E_1 = 0, E_2 = 0$\u003c/code\u003e，但显然这并不是一个有效的路径，因此我们需要保证矩阵 \u003ccode\u003e$V$\u003c/code\u003e 中元素值为 \u003ccode\u003e$1$\u003c/code\u003e 的个数为 \u003ccode\u003e$n$\u003c/code\u003e，即\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\sum_{x=1}^{n}{\\sum_{i=1}^{n}{v_{xi}}} = n $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于有效性约束，我们得到该约束对应的能量分量为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E_3 = \\dfrac{1}{2} C \\left(\\sum_{x=1}^{n}{\\sum_{i=1}^{n}{v_{xi}}} - n\\right)^2 $$\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e路径长度约束\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如上三个约束仅能够保证我们的路径是有效的，但并不一定是最优的。根绝 TSP 问题的优化目标，我们需要引入一个反映路径长度的能量分量，并保证该能量分量随着路径长度的减小而减小。访问两个城市 \u003ccode\u003e$x, y$\u003c/code\u003e 有两种形式，\u003ccode\u003e$x \\to y$\u003c/code\u003e 或 \u003ccode\u003e$y \\to x$\u003c/code\u003e，如果城市 \u003ccode\u003e$x$\u003c/code\u003e 和城市 \u003ccode\u003e$y$\u003c/code\u003e 在旅行中顺序相邻，则 \u003ccode\u003e$v_{xi}v_{y,i+1} = 1, v_{xi}v_{y,i-1} = 0$\u003c/code\u003e，反之亦然。则反映路径长度的能量分量可以定义为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E_4 = \\dfrac{1}{2} D \\sum_{x=1}^{n}{\\sum_{y=1}^{n}{\\sum_{i=1}^{n}{d_{xy}\\left(v_{xi}v_{y,i+1} + v_{xi}v_{y,i-1}\\right)}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e综上所述，TSP 问题的能量函数定义为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E = E_1 + E_2 + E_3 + E_4 $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$A, B, C, D \u0026gt; 0$\u003c/code\u003e 分别为每个能量分量的权重。针对这样的能量函数，我们可得对应神经元 \u003ccode\u003e$x_i$\u003c/code\u003e 和 \u003ccode\u003e$y_i$\u003c/code\u003e 之间的权重为\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} w_{x_i, y_i} = \u0026amp;-2A \\delta_{xy} \\left(1-\\delta_{xy}\\right) - 2B \\delta_{ij} \\left(1-\\delta_{xy}\\right) \\\\ \u0026amp;- 2C -2D d_{xy} \\left(\\delta_{j, i+1} + \\delta_{i, j+1}\\right) \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\delta_{xy} = \\begin{cases} 1, x = y \\\\ 0, x \\neq y \\end{cases} ,  \\delta_{ij} = \\begin{cases} 1, i = j \\\\ 0, i \\neq j \\end{cases} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e因此可以得到网络关于时间的导数\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\dfrac{d u_{xi}}{d t} = \u0026amp;-2A \\sum_{j \\neq i}^{n}{v_{xj}} - 2B \\sum_{y \\neq x}^{n}{v_{yi}} - 2C \\left(\\sum_{x=1}^{n}{\\sum_{j=1}^{n}{v_{xj}}} - n\\right) \\\\ \u0026amp;- 2D \\sum_{y \\neq x}^{n}{d_{xy}\\left(v_{y, i+1} + v_{y, i-1}\\right)} - \\dfrac{u_{xi}}{\\tau} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e据此，我们以一个 10 个城市的数据为例，利用 CHNN 求解 TSP 问题，其中 10 个城市的座标为\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003e城市\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e横座标\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003e纵座标\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eA\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.4000\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.4439\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eB\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.2439\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.1463\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eC\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.1707\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.2293\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eD\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.2293\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.7610\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eE\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.5171\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.9414\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eF\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.8732\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.6536\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eG\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.6878\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.5219\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eH\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.8488\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.3609\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eI\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.6683\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.2536\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003eJ\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.6195\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e0.2634\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e已知的最优路线为 \u003ccode\u003e$A \\to D \\to E \\to F \\to G \\to H \\to I \\to J \\to B \\to C \\to A$\u003c/code\u003e，最优路线的路径长度为 \u003ccode\u003e$2.6907$\u003c/code\u003e。我们使用如下参数求解 TSP 问题，初始化 \u003ccode\u003e$u_{init} = -\\dfrac{\\gamma}{2} \\ln\\left(n - 1\\right)$\u003c/code\u003e，\u003ccode\u003e$\\gamma = 0.02$\u003c/code\u003e，学习率 \u003ccode\u003e$\\alpha = 0.0001$\u003c/code\u003e，神经元激活阈值 \u003ccode\u003e$\\theta = 0.7$\u003c/code\u003e，\u003ccode\u003e$\\tau = 1$\u003c/code\u003e，能量分量权重参数 \u003ccode\u003e$A = 500, B = 500, C = 1000, D = 500$\u003c/code\u003e，单次迭代最大次数为 1000，共模拟 100 次。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-r\"\u003e# 城市座标\ncities \u0026lt;- data.frame(\n    l = LETTERS[1:10],\n    x = c(0.4000, 0.2439, 0.1707, 0.2293, 0.5171,\n          0.8732, 0.6878, 0.8488, 0.6683, 0.6195),\n    y = c(0.4439, 0.1463, 0.2293, 0.7610, 0.9414,\n          0.6536, 0.5219, 0.3609, 0.2536, 0.2634)\n)\n\n# 通过城市座标构建距离矩阵\ndistance_matrix \u0026lt;- function(points) {\n    n \u0026lt;- nrow(points)\n    d \u0026lt;- matrix(rep(0, n^2), n, n)\n    \n    for (i in 1:n) {\n        for (j in i:n) {\n            distance \u0026lt;- sqrt((points[i, ]$x - points[j, ]$x)^2 +\n                                 (points[i, ]$y - points[j, ]$y)^2)\n            d[i, j] \u0026lt;- distance\n            d[j, i] \u0026lt;- distance\n        }\n    }\n    \n    d\n}\n\n# 结果约束校验\ncheck_path_valid \u0026lt;- function(v, n) {\n    # 城市约束\n    c1 \u0026lt;- 0\n    for (x in 1:n) {\n        for (i in 1:(n-1)) {\n            for (j in (i+1):n) {\n                c1 \u0026lt;- c1 + v[x, i] * v[x, j]\n            }\n        }\n    }\n    \n    # 时间约束\n    c2 \u0026lt;- 0\n    for (i in 1:n) {\n        for (x in 1:(n-1)) {\n            for (y in (x+1):n) {\n                c2 \u0026lt;- c2 + v[x, i] * v[y, i]\n            }\n        }\n    }\n    \n    # 有效性约束\n    c3 \u0026lt;- sum(v)\n    \n    ifelse(c1 == 0 \u0026amp; c2 == 0 \u0026amp; c3 == n, T, F)\n}\n\n# 根据结果矩阵获取路径\nv_to_path \u0026lt;- function(v, n) {\n    p \u0026lt;- c()\n    \n    for (i in 1:n) {\n        for (x in 1:n) {\n            if (v[x, i] == 1) {\n                p \u0026lt;- c(p, x)\n                break\n            }\n        }\n    }\n    \n    p\n}\n\n# 计算结果矩阵的路径长度\npath_distance \u0026lt;- function(v, n, d) {\n    p \u0026lt;- v_to_path(v, n)\n    p \u0026lt;- c(p, p[1])\n    distance \u0026lt;- 0 \n    for (i in 1:(length(p)-1)) {\n        distance \u0026lt;- distance + d[p[i], p[i+1]]\n    }\n    \n    distance\n}\n\n# 构建 Hopfield 网络\ntsp_chnn \u0026lt;- function(d, n, gamma = 0.02, alpha = 0.0001,\n                     theta = 0.7, tau = 1,\n                     A = 500, B = 500, C = 1000, D = 500,\n                     max_iter = 1000) {\n    v \u0026lt;- matrix(runif(n^2), n, n)\n    u \u0026lt;- matrix(rep(1, n^2), n, n) * (-gamma * log(n-1) / 2)\n    du \u0026lt;- matrix(rep(0, n^2), n, n)\n    \n    for (iter in 1:max_iter) {\n        for (x in 1:n) {\n            for (i in 1:n) {\n                # E1\n                e1 \u0026lt;- 0\n                for (j in 1:n) {\n                    if (j != i) {\n                        e1 \u0026lt;- e1 + v[x, j]\n                    }\n                }\n                e1 \u0026lt;- -A * e1\n                \n                # E2\n                e2 \u0026lt;- 0\n                for (y in 1:n) {\n                    if (y != x) {\n                        e2 \u0026lt;- e2 + v[y, i]\n                    }\n                }\n                e2 \u0026lt;- -B * e2\n                \n                # E3\n                e3 \u0026lt;- -C * (sum(v) - n)\n                \n                # E4\n                e4 \u0026lt;- 0\n                for (y in 1:n) {\n                    if (y != x) {\n                        e4 \u0026lt;- e4 + d[x, y] *\n                            (v[y, (i+1-1)%%n+1] + v[y, (i-1-1)%%n+1])\n                    }\n                }\n                e4 \u0026lt;- -D * e4\n                \n                du[x, i] \u0026lt;- e1 + e2 + e3 + e4 - u[x, i] / tau\n            }\n        }\n        \n        u \u0026lt;- u + alpha * du\n        v \u0026lt;- (1 + tanh(u / gamma)) / 2\n        v \u0026lt;- ifelse(v \u0026gt;= theta, 1, 0)\n    }\n    \n    v\n}\n\n# 利用 Hopfiled 网络求解 TSP 问题\nset.seed(112358)\n\nn \u0026lt;- 10\nd \u0026lt;- distance_matrix(cities)\n\n# 模拟 100 次并获取最终结果\ntsp_solutions \u0026lt;- lapply(1:100, function(round) {\n    v \u0026lt;- tsp_chnn(d, n)\n    valid \u0026lt;- check_path_valid(v, n)\n    distance \u0026lt;- ifelse(valid, path_distance(v, n, d), NA)\n    \n    list(round = round, valid = valid,\n         distance = distance, v = v)\n})\n\n# 获取最优结果\nbest_tsp_solution \u0026lt;- NA\nfor (tsp_solution in tsp_solutions) {\n    if (tsp_solution$valid) {\n        if (!is.na(best_tsp_solution)) {\n            if (tsp_solution$distance \u0026lt; best_tsp_solution$distance) {\n                best_tsp_solution \u0026lt;- tsp_solution\n            }\n        } else {\n            best_tsp_solution \u0026lt;- tsp_solution\n        }\n    }\n}\n\n# 可视化最优结果\nbest_tsp_solution_path \u0026lt;- v_to_path(best_tsp_solution$v, n)\nordered_cities \u0026lt;- cities[best_tsp_solution_path, ] %\u0026gt;%\n    mutate(ord = seq(1:10))\n\nbest_tsp_solution_path_p \u0026lt;- ggplot(ordered_cities) +\n    geom_polygon(aes(x, y), color = \u0026#39;black\u0026#39;, fill = NA) +\n    geom_point(aes(x, y)) +\n    geom_text(aes(x, y, label = l), vjust = -1) +\n    geom_text(aes(x, y, label = ord), vjust = 2) +\n    coord_fixed() + ylim(c(0, 1)) + xlim(c(0, 1)) +\n    theme(axis.title = element_blank())\nprint(best_tsp_solution_path_p)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/tsp-best-solution-path.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch1 id=\"受限的玻尔兹曼机-rbm\"\u003e受限的玻尔兹曼机 (RBM)\u003c/h1\u003e\n\u003ch2 id=\"网络结构及其概率表示\"\u003e网络结构及其概率表示\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e受限的玻尔兹曼机\u003c/strong\u003e (Restricted Boltzmann Machine, RBM) 或\u003cstrong\u003e簧风琴\u003c/strong\u003e (harmonium) 是由 Smolensky 与 1986年在\u003cstrong\u003e玻尔兹曼机\u003c/strong\u003e (Boltzmann Machine, BM) 基础上提出的一种随机神经网络 (Stochastic Neural Networks) \u003csup id=\"fnref:9\"\u003e\u003ca href=\"#fn:9\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e9\u003c/a\u003e\u003c/sup\u003e。受限的玻尔兹曼机对于原始的玻尔兹曼机做了相应的限制，在其网络结构中包含\u003cstrong\u003e可见节点\u003c/strong\u003e和\u003cstrong\u003e隐藏节点\u003c/strong\u003e，并且\u003cstrong\u003e可见节点\u003c/strong\u003e和\u003cstrong\u003e隐藏节点\u003c/strong\u003e内部不允许存在连接，更加形象的可以将其理解为一个二分图。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/rbm-network.svg\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e对于二值版本的 RBM 而言，其中可见层 \u003ccode\u003e$\\mathbf{v} = \\left(v_1, v_2, ..., v_{n_v}\\right)^T$\u003c/code\u003e 由 \u003ccode\u003e$n_v$\u003c/code\u003e 个二值随机变量构成；隐藏层 \u003ccode\u003e$\\mathbf{h} = \\left(h_1, h_2, ..., h_{n_h}\\right)^T$\u003c/code\u003e 由 \u003ccode\u003e$n_h$\u003c/code\u003e 个二值随机变量构成。\u003c/p\u003e\n\u003cp\u003eRBM 同样作为一个基于能量的模型，其能量函数定义为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E \\left(\\boldsymbol{v}, \\boldsymbol{h}\\right) = -\\sum_{i=1}^{n_v}{b_i v_i} -\\sum_{j=1}^{n_h}{c_j h_j} - \\sum_{i=1}^{n_v}{\\sum_{j=1}^{n_h}{v_i w_{i,j} h_i}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e将其表示成矩阵向量的形式，可记为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E \\left(\\boldsymbol{v}, \\boldsymbol{h}\\right) = -\\boldsymbol{b}^T \\boldsymbol{v} - \\boldsymbol{c}^T \\boldsymbol{h} - \\boldsymbol{v}^T \\boldsymbol{W} \\boldsymbol{h} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$\\boldsymbol{b} \\in \\mathbb{R}^{n_v}$\u003c/code\u003e 为可见层的偏置向量；\u003ccode\u003e$\\boldsymbol{c} \\in \\mathbb{R}^{n_h}$\u003c/code\u003e 为隐含层的偏置向量；\u003ccode\u003e$\\boldsymbol{W} \\in \\mathbb{R}^{n_v \\times n_h}$\u003c/code\u003e 为可见层和隐含层之间的权重矩阵。根据能量函数，可得其联合概率分布为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ P \\left(\\mathbf{v} = \\boldsymbol{v}, \\mathbf{h} = \\boldsymbol{h}\\right) = \\dfrac{1}{Z} e^{-E \\left(\\boldsymbol{v}, \\boldsymbol{h}\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$Z$\u003c/code\u003e 为归一化常数，成为配分函数：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ Z = \\sum_{\\boldsymbol{v}}{\\sum_{\\boldsymbol{h}}{e^{-E \\left(\\boldsymbol{v}, \\boldsymbol{h}\\right)}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于 RBM 我们更加关注的的为边缘分布，即：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ P \\left(\\boldsymbol{v}\\right) = \\sum_{h}{P\\left(\\boldsymbol{v}, \\boldsymbol{h}\\right)} = \\dfrac{1}{Z} \\sum_{h}{e^{-E\\left(\\boldsymbol{v}, \\boldsymbol{h}\\right)}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e因为概率中包含归一化常数，我们需要计算 \u003ccode\u003e$Z$\u003c/code\u003e，从其定义可得，当穷举左右可能性的化，我们需要计算 \u003ccode\u003e$2^{n_v + n_h}$\u003c/code\u003e 个项，其计算复杂度很大。尽管 \u003ccode\u003e$P\\left(\\boldsymbol{v}\\right)$\u003c/code\u003e 计算比较困难，但是其条件概率 \u003ccode\u003e$P\\left(\\mathbf{h} | \\mathbf{v}\\right)$\u003c/code\u003e 和 \u003ccode\u003e$P\\left(\\mathbf{v} | \\mathbf{h}\\right)$\u003c/code\u003e 计算和采样相对容易。为了便于推导，我们定义如下记号：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\boldsymbol{h}_{-k} = \\left(h_1, h_2, ..., h_{k-1}, h_{k+1}, ..., h_{n_h}\\right)^T $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则 \u003ccode\u003e$P\\left(h_k = 1 | \\boldsymbol{v}\\right)$\u003c/code\u003e 定义如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \u0026amp;P\\left(h_k = 1 | \\boldsymbol{v}\\right) \\\\ = \u0026amp;P\\left(h_k = 1 | h_{-k}, \\boldsymbol{v}\\right) \\\\ = \u0026amp;\\dfrac{P\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right)}{P\\left(h_{-k}, \\boldsymbol{v}\\right)} \\\\ = \u0026amp;\\dfrac{P\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right)}{P\\left(h_k = 1 | h_{-k}, \\boldsymbol{v}\\right) + P\\left(h_k = 0 | h_{-k}, \\boldsymbol{v}\\right)} \\\\ = \u0026amp;\\dfrac{\\dfrac{1}{Z} e^{-E\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right)}}{\\dfrac{1}{Z} e^{-E\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right)} + \\dfrac{1}{Z} e^{-E\\left(h_k = 0, h_{-k}, \\boldsymbol{v}\\right)}} \\\\ = \u0026amp;\\dfrac{e^{-E\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right)}}{e^{-E\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right)} + e^{-E\\left(h_k = 0, h_{-k}, \\boldsymbol{v}\\right)}} \\\\ = \u0026amp;\\dfrac{1}{1 + e^{E\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right) - E\\left(h_k = 0, h_{-k}, \\boldsymbol{v}\\right)}} \\\\ \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \u0026amp;E\\left(h_k = 1, h_{-k}, \\boldsymbol{v}\\right) \\\\ = \u0026amp;E\\left(h_k = 1, \\boldsymbol{v}\\right) \\\\ = \u0026amp;-\\sum_{i=1}^{n_v}{b_i v_i} - \\sum_{j=1, j \\neq k}^{n_h}{c_j h_j} - \\sum_{i=1}^{n_v}{\\sum_{j=1, j \\neq k}^{n_h}{v_i W_{i, j} h_i}} - c_k - \\sum_{i=1}^{n_v}{v_i W_{i, k}} \\\\ \u0026amp;E\\left(h_k = 0, h_{-k}, \\boldsymbol{v}\\right) \\\\ = \u0026amp;E\\left(h_k = 0, \\boldsymbol{v}\\right) \\\\ = \u0026amp;-\\sum_{i=1}^{n_v}{b_i v_i} - \\sum_{j=1, j \\neq k}^{n_h}{c_j h_j} - \\sum_{i=1}^{n_v}{\\sum_{j=1, j \\neq k}^{n_h}{v_i W_{i, j} h_i}} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e因此，\u003ccode\u003e$P\\left(h_k = 1 | \\boldsymbol{v}\\right)$\u003c/code\u003e 可以化简为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \u0026amp;P\\left(h_k = 1 | \\boldsymbol{v}\\right) \\\\ = \u0026amp;\\dfrac{1}{1 + e^{-\\left(c_k + \\sum_{i=1}^{n_v}{v_i W_{i, k}}\\right)}} \\\\ = \u0026amp;\\sigma\\left(c_k + \\sum_{i=1}^{n_v}{v_i W_{i, k}}\\right) \\\\ = \u0026amp;\\sigma\\left(c_k + \\boldsymbol{v}^T \\boldsymbol{W}_{:, k}\\right) \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$\\sigma$\u003c/code\u003e 为 sigmoid 函数。因此，我们可以将条件分布表示为连乘的形式：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} P\\left(\\boldsymbol{h} | \\boldsymbol{v}\\right) \u0026amp;= \\prod_{j=1}^{n_h}{P\\left(h_j | \\boldsymbol{v}\\right)} \\\\ \u0026amp;= \\prod_{j=1}^{n_h}{\\sigma\\left(\\left(2h - 1\\right) \\odot \\left(\\boldsymbol{c} + \\boldsymbol{W}^T \\boldsymbol{v}\\right)\\right)_j} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e同理可得：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} P\\left(\\boldsymbol{v} | \\boldsymbol{h}\\right) \u0026amp;= \\prod_{i=1}^{n_v}{P\\left(v_i | \\boldsymbol{h}\\right)} \\\\ \u0026amp;= \\prod_{i=1}^{n_v}{\\sigma\\left(\\left(2v - 1\\right) \\odot \\left(\\boldsymbol{b} + \\boldsymbol{W} \\boldsymbol{h}\\right)\\right)_i} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"模型训练-itplus-rbm\"\u003e模型训练 \u003csup id=\"fnref:10\"\u003e\u003ca href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e10\u003c/a\u003e\u003c/sup\u003e\u003c/h2\u003e\n\u003cp\u003e对于 RBM 模型的训练，假设训练样本集合为 \u003ccode\u003e$S = \\left\\lbrace{\\boldsymbol{v^1}, \\boldsymbol{v^2}, ..., \\boldsymbol{v^{n_s}}}\\right\\rbrace$\u003c/code\u003e，其中 \u003ccode\u003e$\\boldsymbol{v^i} = \\left(v_{1}^{i}, v_{2}^{i}, ..., v_{n_v}^{i}\\right), i = 1, 2, ..., n_s$\u003c/code\u003e。则训练 RBM 的目标可以定义为最大化如下似然：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\mathcal{L}_{\\theta, S} = \\prod_{i=1}^{n_s}{P\\left(\\boldsymbol{v}^i\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中 \u003ccode\u003e$\\theta$\u003c/code\u003e 为待优化的参数，为了方便计算，等价目标为最大化其对数似然：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\ln\\mathcal{L}_{\\theta, S} = \\ln\\prod_{i=1}^{n_s}{P\\left(\\boldsymbol{v}^i\\right)} = \\sum_{i=1}^{n_s}{\\ln P\\left(\\boldsymbol{v}^i\\right)} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e我们将其对数似然简写为 \u003ccode\u003e$\\ln\\mathcal{L}_S$\u003c/code\u003e ，通过梯度上升方法，我们可以得到参数的更新公式：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\theta = \\theta + \\eta \\dfrac{\\partial \\ln\\mathcal{L}_S}{\\partial \\theta} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于单个样本 \u003ccode\u003e$\\boldsymbol{\\color{red}{v\u0026#39;}}$\u003c/code\u003e ，有：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\dfrac{\\partial \\ln\\mathcal{L}_S}{\\partial \\theta} \u0026amp;= \\dfrac{\\partial \\ln P\\left(\\boldsymbol{\\color{red}{v\u0026#39;}}\\right)}{\\partial \\theta} = \\dfrac{\\partial \\ln \\left(\\dfrac{1}{Z} \\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}\\right)}{\\partial \\theta} \\\\ \u0026amp;= \\dfrac{\\partial \\left(\\ln \\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}} - \\ln Z\\right)}{\\partial \\theta} = \\dfrac{\\partial \\left(\\ln \\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}} - \\ln \\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)}}\\right)}{\\partial \\theta} \\\\ \u0026amp;= \\dfrac{\\partial}{\\partial \\theta} \\left(\\ln \\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}\\right) - \\dfrac{\\partial}{\\partial \\theta} \\left(\\ln \\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)}}\\right) \\\\ \u0026amp;= -\\dfrac{1}{\\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}} \\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)} \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial \\theta}} + \\dfrac{1}{\\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)}}} \\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)} \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}} \\\\ \u0026amp;= -\\sum_{\\boldsymbol{h}}{\\dfrac{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}{\\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}} \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial \\theta}} + \\sum_{\\boldsymbol{v, h}}{\\dfrac{e^{-E\\left(\\boldsymbol{v, h}\\right)}}{\\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)}}} \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}} \\\\ \u0026amp;= -\\sum_{\\boldsymbol{h}}{\\dfrac{\\dfrac{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}{Z}}{\\dfrac{\\sum_{\\boldsymbol{h}}{e^{-E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}}}{Z}} \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial \\theta}} + \\sum_{\\boldsymbol{v, h}}{\\dfrac{e^{-E\\left(\\boldsymbol{v, h}\\right)}}{\\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)}}} \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}} \\\\ \u0026amp;= -\\sum_{\\boldsymbol{h}}{\\dfrac{P\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{P\\left(\\boldsymbol{\\color{red}{v\u0026#39;}}\\right)} \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial \\theta}} + \\sum_{\\boldsymbol{v, h}}{\\dfrac{e^{-E\\left(\\boldsymbol{v, h}\\right)}}{\\sum_{\\boldsymbol{v, h}}{e^{-E\\left(\\boldsymbol{v, h}\\right)}}} \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}} \\\\ \u0026amp;= -\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h | \\color{red}{v\u0026#39;}}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial \\theta}} + \\sum_{\\boldsymbol{v, h}}{P\\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\sum_{\\boldsymbol{v, h}}{P\\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}} \u0026amp;= \\sum_{\\boldsymbol{v}}{\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{v}\\right) P\\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}}} \\\\ \u0026amp;= \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) \\sum_{\\boldsymbol{h}}{P \\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial \\theta}}} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于参数 \u003ccode\u003e$w_{i, j}$\u003c/code\u003e 可得：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \u0026amp;\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial w_{i, j}}} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right) h_i v_j} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{\\prod_{k=1}^{n_h}{P\\left(h_k | \\boldsymbol{v}\\right) h_i v_j}} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{P\\left(h_i | \\boldsymbol{v}\\right) P\\left(h_{-i} | \\boldsymbol{v}\\right) h_i v_j} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h_i}}{\\sum_{h_{-i}}{P\\left(h_i | \\boldsymbol{v}\\right) P\\left(\\boldsymbol{h_{-i}} | \\boldsymbol{v}\\right) h_i v_j}} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h_i}}{P\\left(h_i | \\boldsymbol{v}\\right) h_i v_j} \\sum_{\\boldsymbol{h_{-i}}}{P\\left(h_{-i} | \\boldsymbol{v}\\right)} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h_i}}{P\\left(h_i | \\boldsymbol{v}\\right) h_i v_j} \\\\ = \u0026amp;-\\left(P\\left(h_i = 0 | \\boldsymbol{v}\\right) \\cdot 0 \\cdot v_j + P\\left(h_i = 1 | \\boldsymbol{v}\\right) \\cdot 1 \\cdot v_j\\right) \\\\ = \u0026amp;-P\\left(h_i = 1 | \\boldsymbol{v}\\right) v_j \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于参数 \u003ccode\u003e$b_i$\u003c/code\u003e 可得：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \u0026amp;\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial b_i}} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right) v_i} \\\\ = \u0026amp;-v_i \\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right)} \\\\ = \u0026amp;-v_i \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e则对于参数 \u003ccode\u003e$c_j$\u003c/code\u003e 可得：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \u0026amp;\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial c_j}} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h|v}\\right) h_j} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{\\prod_{k=1}^{n_h}{P\\left(h_k | \\boldsymbol{v}\\right) h_j}} \\\\ = \u0026amp;-\\sum_{\\boldsymbol{h}}{P\\left(h_j | \\boldsymbol{v}\\right) P\\left(h_{-j} | \\boldsymbol{v}\\right) h_j} \\\\ = \u0026amp;-\\sum_{h_j}{\\sum_{h_{-j}}{P\\left(h_i | \\boldsymbol{v}\\right) P\\left(h_{-j} | \\boldsymbol{v}\\right) h_j}} \\\\ = \u0026amp;-\\sum_{h_j}{P\\left(h_i | \\boldsymbol{v}\\right) h_j} \\sum_{h_{-j}}{P\\left(h_{-j} | \\boldsymbol{v}\\right)} \\\\ = \u0026amp;-\\sum_{h_j}{P\\left(h_i | \\boldsymbol{v}\\right) h_j} \\\\ = \u0026amp;-\\left(P\\left(h_j = 0 | \\boldsymbol{v}\\right) \\cdot 0 + P\\left(h_j = 1 | \\boldsymbol{v}\\right) \\cdot 1\\right) \\\\ = \u0026amp;-P\\left(h_j = 1 | \\boldsymbol{v}\\right) \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e综上所述，可得：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\dfrac{\\partial \\ln P\\left(\\color{red}{\\boldsymbol{v\u0026#39;}}\\right)}{\\partial w_{i, j}} \u0026amp;= -\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h | \\color{red}{v\u0026#39;}}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial w_{i, j}}} + \\sum_{\\boldsymbol{v, h}}{P\\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial w_{i, j}}} \\\\ \u0026amp;= P\\left(h_i = 1 | \\boldsymbol{\\color{red}{v\u0026#39;}}\\right) \\color{red}{v\u0026#39;_j} - \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) P\\left(h_i = 1 | \\boldsymbol{v}\\right) v_j}\\\\ \\dfrac{\\partial \\ln P\\left(\\color{red}{\\boldsymbol{v\u0026#39;}}\\right)}{\\partial b_i} \u0026amp;= -\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h | \\color{red}{v\u0026#39;}}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial b_i}} + \\sum_{\\boldsymbol{v, h}}{P\\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial b_i}} \\\\ \u0026amp;= \\color{red}{v\u0026#39;_i} - \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) v_i} \\\\ \\dfrac{\\partial \\ln P\\left(\\color{red}{\\boldsymbol{v\u0026#39;}}\\right)}{\\partial c_j} \u0026amp;= -\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h | \\color{red}{v\u0026#39;}}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{\\color{red}{v\u0026#39;}, h}\\right)}{\\partial c_j}} + \\sum_{\\boldsymbol{v, h}}{P\\left(\\boldsymbol{h | v}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v, h}\\right)}{\\partial c_j}} \\\\ \u0026amp;= P\\left(h_j = 1 | \\boldsymbol{\\color{red}{v\u0026#39;}}\\right) - \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) P\\left(h_j = 1 | \\boldsymbol{v}\\right)} \\\\ \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e对于多个样本 \u003ccode\u003e$S = \\left\\lbrace{\\boldsymbol{v^1}, \\boldsymbol{v^2}, ..., \\boldsymbol{v^{n_s}}}\\right\\rbrace$\u003c/code\u003e，有：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\dfrac{\\partial \\ln \\mathcal{L}_S}{\\partial w_{i, j}} \u0026amp;= \\sum_{m=1}^{n_S}{\\left[P\\left(h_i = 1 | \\boldsymbol{v^m}\\right) v_j^m - \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) P\\left(h_i = 1 | \\boldsymbol{v} v_j\\right)}\\right]} \\\\ \\dfrac{\\partial \\ln \\mathcal{L}_S}{\\partial b_i} \u0026amp;= \\sum_{m=1}^{n_S}{\\left[v_i^m - \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) v_i}\\right]} \\\\ \\dfrac{\\partial \\ln \\mathcal{L}_S}{\\partial c_j} \u0026amp;= \\sum_{m=1}^{n_S}{\\left[P\\left(h_j = 1 | \\boldsymbol{v^m}\\right) - \\sum_{\\boldsymbol{v}}{P\\left(\\boldsymbol{v}\\right) P\\left(h_j = 1 | \\boldsymbol{v}\\right)}\\right]} \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e针对如上方法，我们需要计算 \u003ccode\u003e$\\sum_{\\boldsymbol{v}}$\u003c/code\u003e 相关项，如上文所述，其计算复杂度为 \u003ccode\u003e$O\\left(2^{n_v + n_h}\\right)$\u003c/code\u003e，因为其条件概率计算比较容易，因此我们可以用 Gibbs 采样的方法进行估计，但由于 Gibbs 采样方法存在 burn-in period，因此需要足够次数的状态转移后才能够收敛到目标分布，因此这就增大了利用这种方法训练 RBM 模型的时间。\u003c/p\u003e\n\u003cp\u003e针对这个问题，Hinton 于 2002 年提出了对比散度 (Contrastive Divergence, CD) 算法 \u003csup id=\"fnref:11\"\u003e\u003ca href=\"#fn:11\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e11\u003c/a\u003e\u003c/sup\u003e，基本思想为将训练样本作为采样的初始值，因为目标就是让 RBM 去拟合这些样本的分布，因此这样则可以通过更少的状态转移就收敛到平稳分布。\u003ccode\u003e$k$\u003c/code\u003e 步 CD 算法大致步骤为：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e对 \u003ccode\u003e$\\forall \\boldsymbol{v} \\in \\boldsymbol{S}$\u003c/code\u003e，初始化 \u003ccode\u003e$\\boldsymbol{v}^{\\left(0\\right)} = \\boldsymbol{v}$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e执行 \u003ccode\u003e$k$\u003c/code\u003e 步 Gibbs 采样，对于第 \u003ccode\u003e$t$\u003c/code\u003e 步，分别利用 \u003ccode\u003e$P\\left(\\boldsymbol{h} | \\boldsymbol{v}^{\\left(t-1\\right)}\\right)$\u003c/code\u003e 和 \u003ccode\u003e$P\\left(\\boldsymbol{v} | \\boldsymbol{h}^{\\left(t-1\\right)}\\right)$\u003c/code\u003e 采样出 \u003ccode\u003e$\\boldsymbol{h}^{\\left(t-1\\right)}$\u003c/code\u003e 和 \u003ccode\u003e$\\boldsymbol{v}^{\\left(t\\right)}$\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e利用采样得到的 \u003ccode\u003e$\\boldsymbol{v}^{\\left(k\\right)}$\u003c/code\u003e \u003cstrong\u003e近似估计\u003c/strong\u003e \u003ccode\u003e$\\sum_{\\boldsymbol{v}}$\u003c/code\u003e 相关项：\n\u003ccode\u003e$$ \\begin{equation} \\begin{split} \\dfrac{\\partial \\ln P\\left(\\boldsymbol{v}\\right)}{\\partial w_{i, j}} \u0026amp;\\approx P\\left(h_i=1|\\boldsymbol{v}^{\\left(0\\right)}\\right) v_j^{\\left(0\\right)} - P\\left(h_i=1|\\boldsymbol{v}^{\\left(k\\right)}\\right) v_j^{\\left(k\\right)} \\\\ \\dfrac{\\partial \\ln P\\left(\\boldsymbol{v}\\right)}{\\partial b_i} \u0026amp;\\approx v_i^{\\left(0\\right)} - v_i^{\\left(k\\right)} \\\\ \\dfrac{\\partial \\ln P\\left(\\boldsymbol{v}\\right)}{\\partial c_j} \u0026amp;\\approx P\\left(h_j=1|\\boldsymbol{v}^{\\left(0\\right)}\\right) - P\\left(h_j=1|\\boldsymbol{v}^{\\left(k\\right)}\\right) \\end{split} \\end{equation} $$\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e近似估计\u003c/strong\u003e可以看做是利用\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ CDK\\left(\\theta, \\boldsymbol{v}\\right) = -\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h} | \\boldsymbol{v}^{\\left(0\\right)}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v}^{\\left(0\\right)}, h\\right)}{\\partial \\theta}} + \\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h} | \\boldsymbol{v}^{\\left(k\\right)}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v}^{\\left(k\\right)}, \\boldsymbol{h}\\right)}{\\partial \\theta}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e近似\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\dfrac{\\partial \\ln P\\left(\\boldsymbol{v}\\right)}{\\partial \\theta} = -\\sum_{\\boldsymbol{h}}{P\\left(\\boldsymbol{h} | \\boldsymbol{v}^{\\left(0\\right)}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v}^{\\left(0\\right)}, h\\right)}{\\partial \\theta}} + \\sum_{\\boldsymbol{v, h}}{P\\left(\\boldsymbol{v, h}\\right) \\dfrac{\\partial E\\left(\\boldsymbol{v}, \\boldsymbol{h}\\right)}{\\partial \\theta}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e的过程。\u003c/p\u003e\n\u003cp\u003e基于对比散度的 RBM 训练算法可以描述为：\u003c/p\u003e\n\n\n\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/npm/pseudocode@latest/build/pseudocode.min.css\"/\u003e\n\n\n\u003cdiv\u003e\u003cpre class=\"pseudocode\"\u003e\\begin{algorithm}\n\\caption{CDK 算法}\n\\begin{algorithmic}\n\\REQUIRE $k, \\boldsymbol{S}, \\text{RBM}\\left(\\boldsymbol{W, b, c}\\right)$\n\\ENSURE $\\Delta \\boldsymbol{W}, \\Delta \\boldsymbol{b}, \\Delta \\boldsymbol{c}$\n\\PROCEDURE{CDK}{$k, \\boldsymbol{S}, \\text{RBM}\\left(\\boldsymbol{W, b, c}\\right)$}\n    \\STATE $\\Delta \\boldsymbol{W} \\gets 0, \\Delta \\boldsymbol{b} \\gets 0, \\Delta \\boldsymbol{c} \\gets 0$\n    \\FORALL{$\\boldsymbol{v \\in S}$}\n        \\STATE $\\boldsymbol{v}^{\\left(0\\right)} \\gets \\boldsymbol{v}$\n        \\FOR{$t = 0, 1, ..., k-1$}\n            \\STATE $\\boldsymbol{h}^{\\left(t\\right)} \\gets \\text{sample_h_given_v} \\left(\\boldsymbol{v}^{\\left(t\\right)}, \\text{RBM}\\left(W, b, c\\right)\\right)$\n            \\STATE $\\boldsymbol{v}^{\\left(t+1\\right)} \\gets \\text{sample_v_given_h} \\left(\\boldsymbol{h}^{\\left(t\\right)}, \\text{RBM}\\left(W, b, c\\right)\\right)$\n        \\ENDFOR\n        \\FOR{$i = 1, 2, ..., n_h; j = 1, 2, ..., n_v$}\n            \\STATE $\\Delta w_{i, j} \\gets \\Delta w_{i, j} + \\left[P\\left(h_i=1|\\boldsymbol{v}^{\\left(0\\right)}\\right) v_j^{\\left(0\\right)} - P\\left(h_i=1|\\boldsymbol{v}^{\\left(k\\right)}\\right) v_j^{\\left(k\\right)}\\right]$\n            \\STATE $\\Delta b_i \\gets \\Delta b_i = \\left[v_i^{\\left(0\\right)} - v_i^{\\left(k\\right)}\\right]$\n            \\STATE $\\Delta c_j \\gets \\Delta c_j = \\left[P\\left(h_j=1|\\boldsymbol{v}^{\\left(0\\right)}\\right) - P\\left(h_j=1|\\boldsymbol{v}^{\\left(k\\right)}\\right)\\right]$\n        \\ENDFOR\n    \\ENDFOR\n\\ENDPROCEDURE\n\\end{algorithmic}\n\\end{algorithm}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003ccode\u003esample_h_given_v\u003c/code\u003e 和 \u003ccode\u003esample_v_given_h\u003c/code\u003e 分别表示在已知可见层时采样隐含层和在已知隐含层时采样可见层。对于 \u003ccode\u003esample_h_given_v\u003c/code\u003e 其算法流程如下：\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre class=\"pseudocode\"\u003e\\begin{algorithm}\n\\caption{sample\\_h\\_given\\_v 算法}\n\\begin{algorithmic}\n\\FOR{$j = 1, 2, ..., n_h$}\n    \\STATE sample $r_j \\sim Uniform[0, 1]$\n    \\IF{$r_j \u0026lt; P\\left(h_j = 1 | \\boldsymbol{v}\\right)$}\n        \\STATE $h_j \\gets 1$\n    \\ELSE\n        \\STATE $h_j \\gets 0$\n    \\ENDIF\n\\ENDFOR\n\\end{algorithmic}\n\\end{algorithm}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e类似的，对于 \u003ccode\u003esample_v_given_h\u003c/code\u003e 其算法流程如下：\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre class=\"pseudocode\"\u003e\\begin{algorithm}\n\\caption{sample\\_v\\_given\\_h 算法}\n\\begin{algorithmic}\n\\FOR{$j = 1, 2, ..., n_h$}\n    \\STATE sample $r_j \\sim Uniform[0, 1]$\n    \\IF{$r_i \u0026lt; P\\left(v_i = 1 | \\boldsymbol{h}\\right)$}\n        \\STATE $v_i \\gets 1$\n    \\ELSE\n        \\STATE $v_i \\gets 0$\n    \\ENDIF\n\\ENDFOR\n\\end{algorithmic}\n\\end{algorithm}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e至此，我们可以得到 RBM 模型训练的整个流程：\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre class=\"pseudocode\"\u003e\\begin{algorithm}\n\\caption{RBM 训练算法}\n\\begin{algorithmic}\n\\FOR{$iter = 1, 2, ..., \\text{max\\_iter}$}\n    \\STATE $\\Delta \\boldsymbol{W}, \\Delta \\boldsymbol{b}, \\Delta \\boldsymbol{c} \\gets \\text{CDK} \\left(k, \\boldsymbol{S}, \\text{RBM}\\left(\\boldsymbol{W, b, c}\\right)\\right)$\n    \\STATE $\\boldsymbol{W} \\gets \\boldsymbol{W} + \\eta \\left(\\dfrac{1}{n_s} \\Delta \\boldsymbol{W}\\right)$\n    \\STATE $\\boldsymbol{b} \\gets \\boldsymbol{b} + \\eta \\left(\\dfrac{1}{n_s} \\Delta \\boldsymbol{b}\\right)$\n    \\STATE $\\boldsymbol{c} \\gets \\boldsymbol{c} + \\eta \\left(\\dfrac{1}{n_s} \\Delta \\boldsymbol{c}\\right)$\n\\ENDFOR\n\\end{algorithmic}\n\\end{algorithm}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003ccode\u003e$k$\u003c/code\u003e 为 CDK 算法参数，\u003ccode\u003e$\\text{max_iter}$\u003c/code\u003e 为最大迭代次数，\u003ccode\u003e$\\boldsymbol{S}$\u003c/code\u003e 为训练样本，\u003ccode\u003e$n_s = |\\boldsymbol{S}|$\u003c/code\u003e，\u003ccode\u003e$\\eta$\u003c/code\u003e 为学习率。\u003c/p\u003e\n\u003cp\u003e对于模型的评估，最简单的是利用 RBM 模型的似然或对数似然，但由于涉及到归一化因子 \u003ccode\u003e$Z$\u003c/code\u003e 的计算，其复杂度太高。更常用的方式是利用\u003cstrong\u003e重构误差\u003c/strong\u003e (reconstruction error)，即输入数据和利用 RBM 模型计算得到隐含节点再重构回可见节点之间的误差。\u003c/p\u003e\n\u003ch2 id=\"mnist-示例\"\u003eMNIST 示例\u003c/h2\u003e\n\u003cp\u003e我们利用经典的 MNIST 数据作为示例，我们利用基于 tensorflow 的扩展包 tfrbm \u003csup id=\"fnref:12\"\u003e\u003ca href=\"#fn:12\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e12\u003c/a\u003e\u003c/sup\u003e。tfrbm 实现了 Bernoulli-Bernoulli RBM 和 Gaussian-Bernoulli RBM 两种不同的 RBM，两者的比较详见 \u003csup id=\"fnref:13\"\u003e\u003ca href=\"#fn:13\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e13\u003c/a\u003e\u003c/sup\u003e \u003csup id=\"fnref:14\"\u003e\u003ca href=\"#fn:14\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e14\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eimport numpy as np\nfrom matplotlib import pyplot as plt, gridspec\nfrom tfrbm import BBRBM, GBRBM\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# 读入训练数据和测试数据\nmnist = input_data.read_data_sets(\u0026#39;MNIST\u0026#39;, one_hot=True)\nmnist_train_images = mnist.train.images\nmnist_test_images = mnist.test.images\nmnist_test_labels = mnist.test.labels\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMNIST 数据集中，训练集共包含 55000 个样本，每个样本的维度为 784，我们构建 Bernoulli-Bernoulli RBM，设置隐含节点个数为 64，学习率为 0.01，epoches 为 30，batch size 为 10。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003ebbrbm = BBRBM(n_visible=784,\n              n_hidden=64,\n              learning_rate=0.01,\n              use_tqdm=True)\n\nbbrbm_errs = bbrbm.fit(mnist_train_images, n_epoches=30, batch_size=10)\n\n# Epoch: 0: 100%|##########| 5500/5500 [00:11\u0026lt;00:00, 480.39it/s]\n# Train error: 0.1267\n# \n# ......\n# \n# Epoch: 29: 100%|##########| 5500/5500 [00:11\u0026lt;00:00, 482.15it/s]\n# Train error: 0.0347\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e训练误差变化如下\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eplt.style.use(\u0026#39;ggplot\u0026#39;)\nplt.plot(bbrbm_errs)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/bbrbm-mnist-errs.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们从 MNIST 的测试集中针对每个数字选取 10 个样本，共 100 个样本作为测试数据，利用训练好的 RBM 模型重构这 100 个样本\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003emnist_test_images_samples = np.zeros([10 * 10, 784])\nmnist_test_images_samples_rec = np.zeros([10 * 10, 784])\nmnist_test_images_samples_plt = np.zeros([10 * 10 * 2, 784])\n\ndigits_current_counts = np.zeros(10, dtype=np.int32)\ndigits_total_counts = np.ones(10, dtype=np.int32) * 10\n\nfor idx in range(mnist_test_images.shape[0]):\n    image = mnist_test_images[idx, ]\n    label = mnist_test_labels[idx, ]\n\n    for digit in range(10):\n        digit_label = np.zeros(10)\n        digit_label[digit] = 1\n\n        if (label == digit_label).all() and\n               digits_current_counts[digit] \u0026lt; 10:\n            nrow = digits_current_counts[digit]\n            sample_idx = nrow * 10 + digit\n            mnist_test_images_samples[sample_idx, ] = image\n            mnist_test_images_samples_rec[sample_idx, ] = \\\n                bbrbm.reconstruct(image.reshape([1, -1]))\n            mnist_test_images_samples_plt[sample_idx * 2, ] = \\\n                mnist_test_images_samples[sample_idx, ]\n            mnist_test_images_samples_plt[sample_idx * 2 + 1, ] = \\\n                mnist_test_images_samples_rec[sample_idx, ]\n            digits_current_counts[digit] += 1\n\n    if (digits_current_counts == digits_total_counts).all():\n        break\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e对比测试输入数据和重构结果，奇数列为输入数据，偶数列为重构数据\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003edef plot_mnist(mnist_images, nrows, ncols, cmap=\u0026#39;gray\u0026#39;):\n    fig = plt.figure(figsize=(ncols, nrows))\n    gs = gridspec.GridSpec(nrows, ncols)\n    gs.update(wspace=0.025, hspace=0.025)\n\n    for nrow in range(nrows):\n        for ncol in range(ncols):\n            ax = plt.subplot(gs[nrow, ncol])\n            idx = nrow * ncols + ncol\n            minist_image = mnist_images[idx, ].reshape([28, 28])\n            ax.imshow(minist_image, cmap=cmap)\n            ax.axis(\u0026#39;off\u0026#39;)\n\n    return fig\n    \nplot_mnist(mnist_test_images_samples_plt, 10, 20)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-01-17-ising-hopfield-and-rbm/bbrbm-mnist.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e测试集上的重构误差为\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003egbrbm.get_err(mnist_test_images_samples)\n\n# 0.035245348\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr/\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003eErnest Ising, Beitrag zur Theorie des Ferround Paramagnetismus (1924) Contribution to the Theory of Ferromagnetism (English translation of “Beitrag zur Theorie des Ferromagnetismus”, 1925) Goethe as a Physicist (1950) \u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\"\u003e\n\u003cp\u003eOnsager, L. “A two-dimensional model with an order–disorder transition (crystal statistics I).” \u003cem\u003ePhys. Rev\u003c/em\u003e 65 (1944): 117-49. \u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:3\"\u003e\n\u003cp\u003e\u003ca href=\"http://wiki.swarma.net/index.php?title=ISING%E6%A8%A1%E5%9E%8B\"\u003ehttp://wiki.swarma.net/index.php?title=ISING模型\u003c/a\u003e \u003ca href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:4\"\u003e\n\u003cp\u003eHopfield, John J. “Neural networks and physical systems with emergent collective computational abilities.” \u003cem\u003eSpin Glass Theory and Beyond: An Introduction to the Replica Method and Its Applications.\u003c/em\u003e 1987. 411-415. \u003ca href=\"#fnref:4\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:5\"\u003e\n\u003cp\u003eAbu-Mostafa, Y. A. S. E. R., and J. St Jacques. “Information capacity of the Hopfield model.” \u003cem\u003eIEEE Transactions on Information Theory\u003c/em\u003e 31.4 (1985): 461-464. \u003ca href=\"#fnref:5\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:6\"\u003e\n\u003cp\u003e韩力群. 人工神经网络理论、设计及应用 \u003ca href=\"#fnref:6\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:7\"\u003e\n\u003cp\u003e\u003ca href=\"https://zh.wikipedia.org/zh-hans/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98\"\u003ehttps://zh.wikipedia.org/zh-hans/旅行推销员问题\u003c/a\u003e \u003ca href=\"#fnref:7\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:8\"\u003e\n\u003cp\u003e\u003ca href=\"https://zh.wikipedia.org/zh-hans/NP%E5%9B%B0%E9%9A%BE\"\u003ehttps://zh.wikipedia.org/zh-hans/NP困难\u003c/a\u003e \u003ca href=\"#fnref:8\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:9\"\u003e\n\u003cp\u003eSmolensky, Paul. \u003cem\u003eInformation processing in dynamical systems: Foundations of harmony theory.\u003c/em\u003e No. CU-CS-321-86. COLORADO UNIV AT BOULDER DEPT OF COMPUTER SCIENCE, 1986. \u003ca href=\"#fnref:9\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:10\"\u003e\n\u003cp\u003e\u003ca href=\"http://blog.csdn.net/itplus/article/details/19168937\"\u003ehttp://blog.csdn.net/itplus/article/details/19168937\u003c/a\u003e \u003ca href=\"#fnref:10\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:11\"\u003e\n\u003cp\u003eHinton, Geoffrey E. “Training products of experts by minimizing contrastive divergence.” \u003cem\u003eNeural computation\u003c/em\u003e 14.8 (2002): 1771-1800. \u003ca href=\"#fnref:11\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:12\"\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/meownoid/tensorfow-rbm\"\u003ehttps://github.com/meownoid/tensorfow-rbm\u003c/a\u003e \u003ca href=\"#fnref:12\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:13\"\u003e\n\u003cp\u003eHinton, Geoffrey. “A practical guide to training restricted Boltzmann machines.” \u003cem\u003eMomentum\u003c/em\u003e 9.1 (2010): 926. \u003ca href=\"#fnref:13\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:14\"\u003e\n\u003cp\u003eYamashita, Takayoshi, et al. “To be Bernoulli or to be Gaussian, for a Restricted Boltzmann Machine.” \u003cem\u003ePattern Recognition (ICPR), 2014 22nd International Conference on. IEEE\u003c/em\u003e, 2014. \u003ca href=\"#fnref:14\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"donate\"\u003e\n  \u003cdiv class=\"donate-header\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"donate-slug\" id=\"donate-slug\"\u003eising-hopfield-and-rbm\u003c/div\u003e\n  \u003cbutton class=\"donate-button\"\u003e赞 赏\u003c/button\u003e\n  \u003cdiv class=\"donate-footer\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"donate-modal-wrapper\"\u003e\n  \u003cdiv class=\"donate-modal\"\u003e\n    \u003cdiv class=\"donate-box\"\u003e\n      \u003cdiv class=\"donate-box-content\"\u003e\n        \u003cdiv class=\"donate-box-content-inner\"\u003e\n          \u003cdiv class=\"donate-box-header\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n          \u003cdiv class=\"donate-box-body\"\u003e\n            \u003cdiv class=\"donate-box-money\"\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-2\" data-v=\"2\" data-unchecked=\"￥ 2\" data-checked=\"2 元\"\u003e￥ 2\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-5\" data-v=\"5\" data-unchecked=\"￥ 5\" data-checked=\"5 元\"\u003e￥ 5\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-10\" data-v=\"10\" data-unchecked=\"￥ 10\" data-checked=\"10 元\"\u003e￥ 10\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-50\" data-v=\"50\" data-unchecked=\"￥ 50\" data-checked=\"50 元\"\u003e￥ 50\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-100\" data-v=\"100\" data-unchecked=\"￥ 100\" data-checked=\"100 元\"\u003e￥ 100\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-custom\" data-v=\"custom\" data-unchecked=\"任意金额\" data-checked=\"任意金额\"\u003e任意金额\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-qrcode\" id=\"donate-box-pay-qrcode\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"donate-box-footer\"\u003e\n            \u003cdiv class=\"donate-box-pay-method donate-box-pay-method-checked\" data-v=\"wechat-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-wechat-pay\" src=\"\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay-method\" data-v=\"alipay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-alipay\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"button\" class=\"donate-box-close-button\"\u003e\n      \u003csvg class=\"donate-box-close-button-icon\" fill=\"#fff\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"\u003e\u003cpath d=\"M13.486 12l5.208-5.207a1.048 1.048 0 0 0-.006-1.483 1.046 1.046 0 0 0-1.482-.005L12 10.514 6.793 5.305a1.048 1.048 0 0 0-1.483.005 1.046 1.046 0 0 0-.005 1.483L10.514 12l-5.208 5.207a1.048 1.048 0 0 0 .006 1.483 1.046 1.046 0 0 0 1.482.005L12 13.486l5.207 5.208a1.048 1.048 0 0 0 1.483-.006 1.046 1.046 0 0 0 .005-1.482L13.486 12z\" fill-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/svg\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\" src=\"/js/donate.js\"\u003e\u003c/script\u003e\n\n\n  \u003cfooter\u003e\n  \n\u003cnav class=\"post-nav\"\u003e\n  \u003cspan class=\"nav-prev\"\u003e← \u003ca href=\"/cn/2017/12/mcmc-and-gibbs-sampling/\"\u003e马尔科夫链蒙特卡洛方法和吉布斯采样 (MCMC and Gibbs Sampling)\u003c/a\u003e\u003c/span\u003e\n  \u003cspan class=\"nav-next\"\u003e\u003ca href=\"/cn/2018/02/gan-introduction/\"\u003e生成对抗网络简介 (GAN Introduction)\u003c/a\u003e →\u003c/span\u003e\n\u003c/nav\u003e\n\n\n\n\n\u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"8302038603\"\u003e\u003c/ins\u003e\n\u003cscript\u003e\n  (adsbygoogle = window.adsbygoogle || []).push({});\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toggle-theme.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"/js/no-highlight.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/math-code.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/heading-anchor.js\"\u003e\u003c/script\u003e\n\n\n\n\u003csection class=\"comments\"\u003e\n\u003cscript src=\"https://giscus.app/client.js\" data-repo=\"leovan/leovan.me\" data-repo-id=\"MDEwOlJlcG9zaXRvcnkxMTMxOTY0Mjc=\" data-category=\"Comments\" data-category-id=\"DIC_kwDOBr89i84CT-R7\" data-mapping=\"pathname\" data-strict=\"1\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"zh-CN\" data-loading=\"lazy\" crossorigin=\"anonymous\" defer=\"\"\u003e\n\u003c/script\u003e\n\u003c/section\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/clipboard@2.0.11/dist/clipboard.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  (function() {\n    if (!self.Prism) {\n      return;\n    }\n\n    \n    Prism.languages.dos = Prism.languages.powershell;\n    Prism.languages.gremlin = Prism.languages.groovy;\n\n    let languages = {\n      'r': 'R', 'python': 'Python', 'xml': 'XML', 'html': 'HTML',\n      'yaml': 'YAML', 'latex': 'LaTeX', 'tex': 'TeX',\n      'powershell': 'PowerShell', 'javascript': 'JavaScript',\n      'dos': 'DOS', 'qml': 'QML', 'json': 'JSON', 'bash': 'Bash',\n      'text': 'Text', 'txt': 'Text', 'sparql': 'SPARQL',\n      'gremlin': 'Gremlin', 'cypher': 'Cypher', 'ngql': 'nGQL',\n      'shell': 'Shell', 'sql': 'SQL', 'apacheconf': 'Apache Configuration', 'c': 'C', 'css': 'CSS'\n    };\n\n    Prism.hooks.add('before-highlight', function(env) {\n      if (env.language !== 'plain') {\n        let language = languages[env.language] || env.language;\n        env.element.setAttribute('data-language', language);\n      }\n    });\n\n    \n    let ClipboardJS = window.ClipboardJS || undefined;\n\n    Prism.plugins.toolbar.registerButton('copy-to-clipboard', function(env) {\n      let linkCopy = document.createElement('button');\n      linkCopy.classList.add('prism-button-copy');\n\n      registerClipboard();\n\n      return linkCopy;\n\n      function registerClipboard() {\n        let clip = new ClipboardJS(linkCopy, {\n          'text': function () {\n            return env.code;\n          }\n        });\n\n        clip.on('success', function() {\n          linkCopy.classList.add('prism-button-copy-success');\n          resetText();\n        });\n        clip.on('error', function () {\n          linkCopy.classList.add('prism-button-copy-error');\n          resetText();\n        });\n      }\n\n      function resetText() {\n        setTimeout(function () {\n          linkCopy.classList.remove('prism-button-copy-success');\n          linkCopy.classList.remove('prism-button-copy-error');\n        }, 1600);\n      }\n    });\n  })();\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/pseudocode@latest/build/pseudocode.min.js\"\u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\"\u003e\nlet pseudocodeCaptionCount = 0;\n(function(d) {\n  d.querySelectorAll(\".pseudocode\").forEach(function(elem) {\n    let pseudocode_options = {\n      indentSize: '1.2em',\n      commentDelimiter: '\\/\\/',\n      lineNumber:  true ,\n      lineNumberPunc: ':',\n      noEnd:  false \n    };\n    pseudocode_options.captionCount = pseudocodeCaptionCount;\n    pseudocodeCaptionCount += 1;\n    pseudocode.renderElement(elem, pseudocode_options);\n  });\n})(document);\n\u003c/script\u003e\n\n\n\n\n\n\n\n\n\n\n\n\u003cscript async=\"\" src=\"/js/center-img.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/right-quote.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/external-link.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/alt-title.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/figure.js\"\u003e\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/vanilla-back-to-top@latest/dist/vanilla-back-to-top.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\naddBackToTop({\n  diameter: 48\n});\n\u003c/script\u003e\n\n  \u003chr/\u003e\n  \u003cdiv class=\"copyright no-border-bottom\"\u003e\n    \u003cdiv class=\"copyright-author-year\"\u003e\n      \u003cspan\u003eCopyright © 2017-2024 \u003ca href=\"/\"\u003e范叶亮 | Leo Van\u003c/a\u003e\u003c/span\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n  \u003c/footer\u003e\n  \u003c/article\u003e",
  "Date": "2018-01-17T00:00:00Z",
  "Author": "范叶亮"
}