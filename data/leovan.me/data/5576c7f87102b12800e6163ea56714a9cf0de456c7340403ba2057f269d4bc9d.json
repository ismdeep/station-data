{
  "Source": "leovan.me",
  "Title": "评分和排名算法 (Rating \u0026 Ranking Algorithms)",
  "Link": "https://leovan.me/cn/2022/05/rating-and-ranking-algorithms/",
  "Content": "\u003carticle class=\"main\"\u003e\n    \u003cheader class=\"content-title\"\u003e\n    \n\u003ch1 class=\"title\"\u003e\n  \n  评分和排名算法 (Rating \u0026amp; Ranking Algorithms)\n  \n\u003c/h1\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"author-date\"\u003e范叶亮 / \n2022-05-22\u003c/h2\u003e\n\n\n\n\u003ch3 class=\"post-meta\"\u003e\n\n\n\u003cstrong\u003e分类: \u003c/strong\u003e\n\u003ca href=\"/categories/%E6%80%9D%E8%80%83\"\u003e思考\u003c/a\u003e, \u003ca href=\"/categories/%E6%95%B0%E5%AD%A6\"\u003e数学\u003c/a\u003e\n\n\n\n\n/\n\n\n\n\n\u003cstrong\u003e标签: \u003c/strong\u003e\n\u003cspan\u003e评分\u003c/span\u003e, \u003cspan\u003eRating\u003c/span\u003e, \u003cspan\u003e排名\u003c/span\u003e, \u003cspan\u003eRanking\u003c/span\u003e, \u003cspan\u003e公平\u003c/span\u003e, \u003cspan\u003e直接评分\u003c/span\u003e, \u003cspan\u003e正态分布\u003c/span\u003e, \u003cspan\u003e正偏态分布\u003c/span\u003e, \u003cspan\u003e负偏态分布\u003c/span\u003e, \u003cspan\u003e加权评分\u003c/span\u003e, \u003cspan\u003eDelicious\u003c/span\u003e, \u003cspan\u003eHacker News\u003c/span\u003e, \u003cspan\u003eReddit\u003c/span\u003e, \u003cspan\u003eStack Overflow\u003c/span\u003e, \u003cspan\u003e威尔逊区间\u003c/span\u003e, \u003cspan\u003e贝叶斯平均\u003c/span\u003e, \u003cspan\u003eKaggle\u003c/span\u003e, \u003cspan\u003eElo 评分算法\u003c/span\u003e, \u003cspan\u003eElo 评分系统\u003c/span\u003e, \u003cspan\u003eElo Rating System\u003c/span\u003e, \u003cspan\u003eGlicko 评分算法\u003c/span\u003e, \u003cspan\u003eGlicko 评分系统\u003c/span\u003e, \u003cspan\u003eGlicko Rating System\u003c/span\u003e, \u003cspan\u003e评分可靠性\u003c/span\u003e, \u003cspan\u003eRatings Reliability\u003c/span\u003e, \u003cspan\u003e评分偏差\u003c/span\u003e, \u003cspan\u003eRatings Deviation\u003c/span\u003e, \u003cspan\u003eGlicko-2 评分算法\u003c/span\u003e, \u003cspan\u003eGlicko-2 评分系统\u003c/span\u003e, \u003cspan\u003eGlicko-2 Rating System\u003c/span\u003e, \u003cspan\u003eIllinois 算法\u003c/span\u003e, \u003cspan\u003eTrueSkill 评分算法\u003c/span\u003e, \u003cspan\u003eTrueSkill 评分系统\u003c/span\u003e, \u003cspan\u003eTrueSkill Rating System\u003c/span\u003e\n\n\n\n\n/\n\n\n\u003cstrong\u003e字数: \u003c/strong\u003e\n8543\n\u003c/h3\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n    \n    \n    \u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"1261604535\"\u003e\u003c/ins\u003e\n    \u003cscript\u003e\n    (adsbygoogle = window.adsbygoogle || []).push({});\n    \u003c/script\u003e\n    \n    \n    \u003c/header\u003e\n\n\n\n\u003cdiv class=\"toc-depth-2\"\u003e\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#基础评分和排名\"\u003e基础评分和排名\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#直接评分\"\u003e直接评分\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#加权评分\"\u003e加权评分\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#考虑时间的评分和排名\"\u003e考虑时间的评分和排名\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#delicious\"\u003eDelicious\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#hacker-news\"\u003eHacker News\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#reddit\"\u003eReddit\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#stack-overflow\"\u003eStack Overflow\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#不考虑时间的评分和排名\"\u003e不考虑时间的评分和排名\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#威尔逊区间算法\"\u003e威尔逊区间算法\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#贝叶斯平均算法\"\u003e贝叶斯平均算法\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#比赛评分和排名\"\u003e比赛评分和排名\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#kaggle-积分\"\u003eKaggle 积分\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#elo-评分系统\"\u003eElo 评分系统\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#glicko-评分系统\"\u003eGlicko 评分系统\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#glicko-2-评分系统\"\u003eGlicko-2 评分系统\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#计算辅助量\"\u003e计算辅助量\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#确定新的评分波动率\"\u003e确定新的评分波动率\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#确定新的评分偏差和评分\"\u003e确定新的评分偏差和评分\u003c/a\u003e\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#trueskill-评分系统\"\u003eTrueSkill 评分系统\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#能力计算和更新\"\u003e能力计算和更新\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#对手匹配\"\u003e对手匹配\u003c/a\u003e\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\u003c/div\u003e\n\n\n\u003cp\u003e在之前的博客「\u003ca href=\"/cn/2021/01/is-voting-fair-and-reasonable/\"\u003e投票公平合理吗？\u003c/a\u003e」中已经得到了一个令人沮丧的结论：\u003cstrong\u003e只有道德上的相对民主，没有制度上的绝对公平\u003c/strong\u003e。投票是对不同选项或个体的排序，在投票中我们关注更多是相对位置这样定性的结论，例如：积分前三名的同学才能进入下一环节。但有的时候我们不光想知道不同选项之间的先后顺序，还想了解不同选项之间的差异大小，这时我们就需要设计更精细的方法进行定量分析。\u003c/p\u003e\n\u003ch1 id=\"基础评分和排名\"\u003e基础评分和排名\u003c/h1\u003e\n\u003ch2 id=\"直接评分\"\u003e直接评分\u003c/h2\u003e\n\u003cp\u003e从小到大被评分最多的应该就是考试了，100，120 或是 150，这三个数字应该从小学一年级一直“陪”我们走过十几载青春。考试的评分算法简单且容易区分，整个系统设置了一个总分，根据不同的表现进行加分或扣分，统计最终得分作为最后的评分。一般情况下成绩是一个近似正态分布的偏态分布，如下图所示。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/normal-and-skewed-distribution.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e如果成绩近似正态分布（如上图-中），则说明本次考试难度分布较为均衡；如果成绩分布整体向左偏（如上图-左），则说明本次考试较为困难，学生成绩普遍偏低；如果成绩分布整体向右偏（如上图-右），则说明本次考试较为容易，学生成绩普遍偏高。\u003c/p\u003e\n\u003cp\u003e除此之外，也可能出现双峰分布，以及峰的陡峭和平缓都能反应考试的不同问题，在此就不再一一展开说明。一般情况下，考试的最终成绩已经能够很好地对学生的能力进行区分，这也正是为什么一般情况我们不会对考试分数做二次处理，而是直接使用。\u003c/p\u003e\n\u003ch2 id=\"加权评分\"\u003e加权评分\u003c/h2\u003e\n\u003cp\u003e在现实生活中，不同的问题和任务难易程度不同，为了保证「公平」，我们需要赋予困难的任务更多的分数。这一点在试卷中也会有体现，一般而言判断题会比选择题分数更低，毕竟随机作答，判断题仍有 50% 的概率回答正确，但包含四个选项的选择题却仅有 25% 概率回答正确。\u003c/p\u003e\n\u003cp\u003e加权评分在问题和任务的难易程度与分值之间通过权重进行平衡，但权重的制定并不是一个容易的过程，尤其是在设置一个兼顾客观、公平、合理等多维度的权重时。\u003c/p\u003e\n\u003ch1 id=\"考虑时间的评分和排名\"\u003e考虑时间的评分和排名\u003c/h1\u003e\n\u003ch2 id=\"delicious\"\u003eDelicious\u003c/h2\u003e\n\u003cp\u003e最简单直接的方法是在一定的时间内统计投票的数量，得票数量高的则为更好的项目。在旧版的 Delicious 中，热门书签排行榜则是根据过去 60 分钟内被收藏的次数进行排名，每 60 分钟重新统计一次。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/delicious.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这种算法的优点是：简单、容易部署、更新快；缺点是：一方面，排名变化不够平滑，前一个小时还排名靠前的内容，往往第二个小时就一落千丈，另一方面，缺乏自动淘汰旧项目的机制，某些热门内容可能会长期占据排行榜前列。\u003c/p\u003e\n\u003ch2 id=\"hacker-news\"\u003eHacker News\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://news.ycombinator.com/\"\u003eHacker News\u003c/a\u003e 是一个可以发布帖子的网络社区，每个帖子前面有一个向上的三角形，如果用户觉得这个内容好，点击一下即可投票。根据得票数，系统自动统计出热门文章排行榜。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/hacker-news.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eHacker News 使用分数计算公式如下：\u003c/p\u003e\n\u003cp\u003e$$\nScore = \\dfrac{P - 1}{\\left(T + 2\\right)^G}\n\\label{eq:hacker-news}\n$$\u003c/p\u003e\n\u003cp\u003e其中，$P$ 表示帖子的得票数，减去 $1$ 表示忽略发帖人的投票；$T$ 表示当前距离发帖的时间（单位为小时），加上 $2$ 是为了防止最新的帖子分母过小；$G$ 为重力因子，即将帖子排名被往下拉的力量，默认值为 $1.8$。\u003c/p\u003e\n\u003cp\u003e在其他条件不变的情况下，更多的票数可以获得更高的分数，如果不希望“高票数”帖子和“低票数”帖子之间差距过大，可以在式 $\\ref{eq:hacker-news}$ 的分子中添加小于 $1$ 的指数，例如：$\\left(P - 1\\right)^{0.8}$。在其他条件不变的情况下，随着时间不断流逝，帖子的分数会不断降低，经过 24 小时后，几乎所有帖子的分数都将小于 $1$。重力因子对于分数的影响如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/hacker-news-g.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e不难看出，$G$ 值越大，曲线越陡峭，排名下降的速度越快，意味着排行榜的更新速度越快。\u003c/p\u003e\n\u003ch2 id=\"reddit\"\u003eReddit\u003c/h2\u003e\n\u003cp\u003e不同于 Hacker News，\u003ca href=\"https://www.reddit.com/\"\u003eReddit\u003c/a\u003e 中的每个帖子前面都有向上和向下的箭头，分别表示\u0026#34;赞成\u0026#34;和\u0026#34;反对\u0026#34;。用户点击进行投票，Reddit 根据投票结果，计算出最新的热点文章排行榜。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/reddit.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eReddit 关于计算分数的\u003ca href=\"https://github.com/reddit-archive/reddit/blob/master/r2/r2/lib/db/_sorts.pyx\"\u003e代码\u003c/a\u003e可以简要总结如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003efrom datetime import datetime, timedelta\nfrom math import log\n\nepoch = datetime(1970, 1, 1)\n\ndef epoch_seconds(date):\n    td = date - epoch\n    return td.days * 86400 + td.seconds + (float(td.microseconds) / 1000000)\n\ndef score(ups, downs):\n    return ups - downs\n\ndef hot(ups, downs, date):\n    s = score(ups, downs)\n    order = log(max(abs(s), 1), 10)\n    sign = 1 if s \u0026gt; 0 else -1 if s \u0026lt; 0 else 0\n    seconds = epoch_seconds(date) - 1134028003\n    return round(order + sign * seconds / 45000, 7)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e分数的计算过程大致如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e计算赞成票和反对票的差值，即：\n\u003ccode\u003e$$ s = ups - downs $$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e利用如下公式计算中间分数，即：\n\u003ccode\u003e$$ order = \\log_{10} \\max\\left(\\left|s\\right|, 1\\right) $$\u003c/code\u003e\n其中，取 $\\left|s\\right|$ 和 $1$ 的最大值是为了避免当 $s = 0$ 时，无法计算 $\\log_{10}{\\left|s\\right|}$。赞成票与反对票差值越大，得分越高。取以 $10$ 为底的对数，表示当 $s = 10$ 时，这部分为 $1$，只有 $s = 100$ 时才为 $2$，这样设置是为了减缓差值增加对总分的影响程度。\u003c/li\u003e\n\u003cli\u003e确定分数的方向，即：\n\u003ccode\u003e$$ sign = \\begin{cases} 1 \u0026amp; \\text{如果} \\  s \u0026gt; 0 \\\\ 0 \u0026amp; \\text{如果} \\  s = 0 \\\\ -1 \u0026amp; \\text{如果} \\  s \u0026lt; 0 \\end{cases} $$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e计算发贴时间距离 2005 年 12 月 8 日 7:46:43（Reddit 的成立时间？）的秒数，即：\n\u003ccode\u003e$$ seconds = \\text{timestamp}\\left(date\\right) - 1134028003 $$\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e计算最终分数，即：\n\u003ccode\u003e$$ score = order + sign \\times \\dfrac{seconds}{45000} $$\u003c/code\u003e\n将时间除以 $45000$ 秒（即 12.5 个小时），也就是说当前天的帖子会比昨天的帖子多约 $2$ 分。如果昨天的帖子想要保持住之前的排名，则 $s$ 值需要增加 $100$ 倍才可以。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReddit 评分排名算法决定了 Reddit 是一个符合大众口味的社区，而不是一个适合展示激进想法的地方。因为评分中使用的是赞成票和反对票的差值，也就是说在其他条件相同的情况下，帖子 A 有 1 票赞成，0 票反对；帖子 B 有 1000 票赞成，1000 票反对，但讨论火热的帖子 B 的得分却比 帖子 A 要少。\u003c/p\u003e\n\u003ch2 id=\"stack-overflow\"\u003eStack Overflow\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://stackoverflow.com/\"\u003eStack Overflow\u003c/a\u003e 是世界排名第一的程序员问答社区。用户可以在上面提出各种关于编程的问题，等待别人回答；可以对问题进行投票（赞成票或反对票），表示这个问题是不是有价值；也可以对这个回答投票（赞成票或反对票），表示这个回答是不是有价值。\u003c/p\u003e\n\u003cp\u003e在 Stack Overflow 的页面上，每个问题前面有三个数字，分别为问题的得分、回答的数量和问题的浏览次数。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/stackoverflow-all-questions.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e创始人之一的 Jeff Atwood \u003ca href=\"https://meta.stackexchange.com/questions/11602/what-formula-should-be-used-to-determine-hot-questions\"\u003e公布\u003c/a\u003e的评分排名的计算公式如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\dfrac{4 \\times \\log_{10}{Q_{views}} + \\dfrac{Q_{answers} \\times Q_{score}}{5} + \\sum \\left(A_{scores}\\right)}{\\left(\\left(Q_{age} + 1\\right) - \\left(\\dfrac{Q_{age} - Q_{updated}}{2}\\right)\\right)^{1.5}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e$4 \\times \\log_{10}{Q_{views}}$\u003c/code\u003e 表示问题的浏览次数越多，得分越高，同时利用 \u003ccode\u003e$\\log_{10}$\u003c/code\u003e 减缓了随着浏览量增大导致得分变高的程度。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$\\dfrac{Q_{answers} \\times Q_{score}}{5}$\u003c/code\u003e 表示问题的得分（赞成票和反对票之差）越高，回答的数量越多，分数越高。采用乘积的形式意味着即使问题本身的分数再高，没有人回答的问题也算不上热门问题。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$\\sum \\left(A_{scores}\\right)$\u003c/code\u003e 表示问题回答的总分数。回答总分采用了简单的加和，但实际上一个正确的回答要胜过多个无用的回答，简答的加和无法很好的区分这两种不同的情况。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$\\left(\\left(Q_{age} + 1\\right) - \\left(\\dfrac{Q_{age} - Q_{updated}}{2}\\right)\\right)^{1.5}$\u003c/code\u003e 可以改写为 \u003ccode\u003e$\\left(\\dfrac{Q_{age}}{2} + \\dfrac{Q_{updated}}{2} + 1\\right)^{1.5}$\u003c/code\u003e，\u003ccode\u003e$Q_{age}$\u003c/code\u003e 和 \u003ccode\u003e$Q_{updated}$\u003c/code\u003e 分别表示问题和最近一次回答的时间（单位为小时），也就是说问题时间越久远，最近一次回答时间约久远，分母就会越大，从而得分就会越小。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eStack Overflow 的评分排名算法考虑了参与程度（问题浏览次数和回答次数）、质量（问题分数和回答分数）、时间（问题时间和最近一次回答时间）等多个维度。\u003c/p\u003e\n\u003ch1 id=\"不考虑时间的评分和排名\"\u003e不考虑时间的评分和排名\u003c/h1\u003e\n\u003cp\u003e上文中介绍的评分和排名方法多适用于具有时效性的信息，但是对于图书、电影等无需考虑时间因素的情况而言，则需要其他方法进行衡量。\u003c/p\u003e\n\u003ch2 id=\"威尔逊区间算法\"\u003e威尔逊区间算法\u003c/h2\u003e\n\u003cp\u003e在不考虑时间的情况下，以「赞成」和「反对」两种评价方式为例，通常我们会有两种最基础的方法计算得分。第一种为绝对分数，即：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\text{评分} = \\text{赞成票} - \\text{反对票} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e但这种计算方式有时会存在一定问题，例如：A 获得 60 张赞成票，40 张反对票；B 获得 550 张赞成票，450 张反对票。根据上式计算可得 A 的评分为 20，B 的评分为 100，所以 B 要优于 A。但实际上，B 的好评率仅有 \u003ccode\u003e$\\dfrac{550}{550 + 450} = 55\\%$\u003c/code\u003e，而 A 的好评率为 \u003ccode\u003e$\\dfrac{60}{60 + 40} = 60\\%$\u003c/code\u003e，因此实际情况应该是 A 优于 B。\u003c/p\u003e\n\u003cp\u003e这样，我们就得到了第二种相对分数，即：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\text{评分} = \\dfrac{\\text{赞成票}}{\\text{赞成票} + \\text{反对票}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这种方式在总票数比较大的时候没有问题，但总票数比较小时就容易产生错误。例如：A 获得 2 张赞成票，0 张反对票；B 获得 100 张赞成票，1 张反对票。根据上式计算可得 A 的评分为 \u003ccode\u003e$100\\%$\u003c/code\u003e，B 的评分为 \u003ccode\u003e$99\\%$\u003c/code\u003e。但实际上 B 应该是优于 A 的，由于 A 的总票数太少，数据不太具有统计意义。\u003c/p\u003e\n\u003cp\u003e对于这个问题，我们可以抽象出来：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e每个用户的投票都是独立事件。\u003c/li\u003e\n\u003cli\u003e用户只有两个选择，要么投赞成票，要么投反对票。\u003c/li\u003e\n\u003cli\u003e如果投票总人数为 \u003ccode\u003e$n$\u003c/code\u003e，其中赞成票为 \u003ccode\u003e$k$\u003c/code\u003e，则赞成票的比例 \u003ccode\u003e$p  = \\dfrac{k}{n}$\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e不难看出，上述过程是一个二项实验。\u003ccode\u003e$p$\u003c/code\u003e 越大表示评分越高，但是 \u003ccode\u003e$p$\u003c/code\u003e 的可信性取决于投票的人数，如果人数太少，\u003ccode\u003e$p$\u003c/code\u003e 就不可信了。因此我们可以通过计算 \u003ccode\u003e$p$\u003c/code\u003e 的置信区间对评分算法进行调整如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e计算每个项目的好评率。\u003c/li\u003e\n\u003cli\u003e计算每个好评率的置信区间。\u003c/li\u003e\n\u003cli\u003e根据置信区间的\u003cstrong\u003e下限值\u003c/strong\u003e进行排名。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e置信区间的本质就是对可信度进行修正，弥补样本量过小的影响。如果样本足够多，就说明比较可信，则不需要很大的修正，所以置信区间会比较窄，下限值会比较大；如果样本比较少，就说明不一定可信，则需要进行较大的修正，所以置信区间会比较宽，下限值会比较小。\u003c/p\u003e\n\u003cp\u003e二项分布的置信区间有多种计算公式，最常见的「\u003ca href=\"https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval#Normal_approximation_interval\"\u003e正态区间\u003c/a\u003e」方法对于小样本准确性较差。1927 年，美国数学家 Edwin Bidwell Wilson 提出了一个修正公式，被称为「\u003ca href=\"https://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval#Wilson_score_interval\"\u003e威尔逊区间\u003c/a\u003e」，很好地解决了小样本的准确性问题。置信区间定义如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\frac{1}{1+\\frac{z^{2}}{n}}\\left(\\hat{p}+\\frac{z^{2}}{2 n}\\right) \\pm \\frac{z}{1+\\frac{z^{2}}{n}} \\sqrt{\\frac{\\hat{p}(1-\\hat{p})}{n}+\\frac{z^{2}}{4 n^{2}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$\\hat{p}$\u003c/code\u003e 表示样本好评率，\u003ccode\u003e$n$\u003c/code\u003e 表示样本大小，\u003ccode\u003e$z$\u003c/code\u003e 表示某个置信水平的 z 统计量。\u003c/p\u003e\n\u003ch2 id=\"贝叶斯平均算法\"\u003e贝叶斯平均算法\u003c/h2\u003e\n\u003cp\u003e在一些榜单中，有时候会出现排行榜前列总是那些票数最多的项目，新项目或者冷门的项目很难有出头机会，排名可能会长期靠后。以世界最大的电影数据库 IMDB 为例，观众可以对每部电影投票，最低为 1 分，最高为 10 分，系统根据投票结果，计算出每部电影的平均得分。\u003c/p\u003e\n\u003cp\u003e这就出现了一个问题：热门电影与冷门电影的平均得分，是否真的可比？例如一部好莱坞大片有 10000 个观众投票，一部小成本的文艺片可能只有 100 个观众投票。如果使用威尔逊区间算法，后者的得分将被大幅拉低，这样处理是否公平，是否能反映电影的真正质量呢？在 \u003ca href=\"https://www.imdb.com/chart/top\"\u003eTop 250 榜单\u003c/a\u003e中，IMDB 给到的评分排名计算公式如下：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ WR = \\dfrac{v}{v + m} R + \\dfrac{m}{v + m} C $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$WR$\u003c/code\u003e 为最终的加权得分，\u003ccode\u003e$R$\u003c/code\u003e 为该电影用户投票的平均得分，\u003ccode\u003e$v$\u003c/code\u003e 为该电影的投票人数，\u003ccode\u003e$m$\u003c/code\u003e 为排名前 250 电影的最低投票数，\u003ccode\u003e$C$\u003c/code\u003e 为所有电影的平均得分。\u003c/p\u003e\n\u003cp\u003e从公式中可以看出，分量 \u003ccode\u003e$m C$\u003c/code\u003e 可以看作为每部电影增加了评分为 \u003ccode\u003e$C$\u003c/code\u003e 的 \u003ccode\u003e$m$\u003c/code\u003e 张选票。然后再根据电影自己的投票数量 \u003ccode\u003e$v$\u003c/code\u003e 和投票平均分 \u003ccode\u003e$R$\u003c/code\u003e 进行修正，得到最终的分数。随着电影投票数量的不但增加 \u003ccode\u003e$\\dfrac{v}{v + m} R$\u003c/code\u003e 占的比重将越来越大，加权得分也会越来越接近该电影用户投票的平均分。\u003c/p\u003e\n\u003cp\u003e将公式写为更一般的形式，有：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\bar{x}=\\frac{C m+\\sum_{i=1}^{n} x_{i}}{C+n} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$C$\u003c/code\u003e 为需要扩充的投票人数规模，可以根据投票人数总量设置一个合理的常数，\u003ccode\u003e$n$\u003c/code\u003e 为当前项目的投票人数，\u003ccode\u003e$x$\u003c/code\u003e 为每张选票的值，\u003ccode\u003e$m$\u003c/code\u003e 为总体的平均分。这种算法称为「\u003ca href=\"https://en.wikipedia.org/wiki/Bayesian_average\"\u003e贝叶斯平均\u003c/a\u003e」。在这个公式中，\u003ccode\u003e$m$\u003c/code\u003e 可以视为“先验概率”，每新增一次投票，都会对最终得分进行修正，使其越来越接近真实的值。\u003c/p\u003e\n\u003ch1 id=\"比赛评分和排名\"\u003e比赛评分和排名\u003c/h1\u003e\n\u003ch2 id=\"kaggle-积分\"\u003eKaggle 积分\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.kaggle.com/\"\u003eKaggle\u003c/a\u003e 是一个数据建模和数据分析竞赛平台。企业和研究者可在其上发布数据，统计学者和数据挖掘专家可在其上进行竞赛以产生最好的模型。用户以团队形式参加 Kaggle 的比赛，团队可以仅包含自己一人，根据在每场比赛中的排名不断获取积分，用做 Kaggle 网站中的\u003ca href=\"https://www.kaggle.com/rankings\"\u003e最终排名\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e早期 Kaggle 对于每场比赛的积分按如下方式计算：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\left[\\dfrac{100000}{N_{\\text {teammates }}}\\right]\\left[\\text{Rank}^{-0.75}\\right]\\left[\\log _{10}\\left(N_{\\text {teams }}\\right)\\right]\\left[\\dfrac{2 \\text { years - time }}{2 \\text { years }}\\right] $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在 2015 年对新的排名系统做了\u003ca href=\"https://web.archive.org/web/20150516035521/http://blog.kaggle.com/2015/05/13/improved-kaggle-rankings/\"\u003e调整\u003c/a\u003e，新的比赛积分计算公式调整为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\left[\\dfrac{100000}{\\sqrt{N_{\\text {teammates }}}}\\right]\\left[\\text{Rank}^{-0.75}\\right]\\left[\\log _{10}\\left(1+\\log _{10}\\left(N_{\\text {teams }}\\right)\\right)\\right]\\left[e^{-t / 500}\\right] $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$N_{\\text{teammates}}$\u003c/code\u003e 为团队成员的数量，\u003ccode\u003e$\\text{Rank}$\u003c/code\u003e 为比赛排名，\u003ccode\u003e$N_{\\text{teams}}$\u003c/code\u003e 为参赛的团队数量，\u003ccode\u003e$t$\u003c/code\u003e 为从比赛结束之日起过去的时间。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第一部分\u003c/strong\u003e可以视为基础分，团队成员越少，所获得的基础分越多。从调整的文档来看，Kaggle 认为团队合作每个人的贡献程度会大于 \u003ccode\u003e$1 / N_{\\text {teammates}}$\u003c/code\u003e，为了鼓励大家团队合作，Kaggle 减少了对团队人数的基础分惩罚力度。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第二部分\u003c/strong\u003e则是根据用户在比赛中的排名得到一个小于等于 1 的系数。下图显示了不同的指数以及 \u003ccode\u003e$1 / \\text{Rank}$\u003c/code\u003e 之间的区别：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/kaggle-ranking-system-rank.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e从图中可以看出，通过调节指数的大小可以控制系数随排名下降而下降的速度。整体来说，Kaggle 更加重视前几名，对于 10 名开外的选手，系数均小于 \u003ccode\u003e$0.2$\u003c/code\u003e，且差异不大。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第三部分\u003c/strong\u003e可以理解为通过参赛的队伍数量来衡量比赛的受欢迎程度（或是在众多参赛队伍中脱颖而出的难易程度）。以 100 和 1000 支参赛队伍对比为例，根据之前的计算公式，这一部分为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{aligned} \\log_{10} \\left(100\\right) \u0026amp;= 2 \\\\ \\log_{10} \\left(1000\\right) \u0026amp;= 3 \\end{aligned} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e但随着 Kaggle 本身比赛流行度越来越高，官方认为赢得一场 1000 人的比赛并不需要比赢得一场 100 人的比赛需要多 \u003ccode\u003e$50\\%$\u003c/code\u003e 的技能，因此通过调整后的算法，这个比例调整至大约为 \u003ccode\u003e$25\\%$\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation} \\begin{aligned} \\log_{10} \\left(\\log_{10} \\left(100\\right) + 1\\right) \u0026amp;\\approx 0.47 \\\\ \\log_{10} \\left(\\log_{10} \\left(1000\\right) + 1\\right) \u0026amp;\\approx 0.6 \\end{aligned} \\end{equation} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e第四部份\u003c/strong\u003e为时间衰减项，调整为新的计算公式后可以消除原来通过设置 2 年时限导致的积分断崖。如果任何一对个体都没有采取任何进一步的行动，那么排名不应该在任何一对个体之间发生变化。换句话说，如果整个 Kaggle 用户群停止参加比赛，他们的相对排名应该随着时间的推移保持不变。选择 \u003ccode\u003e$1 / 500$\u003c/code\u003e 的原因是可以将旧的 2 年断崖延长到更长的时间范围，并且永远不会变为 0。\u003c/p\u003e\n\u003ch2 id=\"elo-评分系统\"\u003eElo 评分系统\u003c/h2\u003e\n\u003cp\u003eElo 评分系统（Elo Rating System）是由匈牙利裔美国物理学家 Arpad Elo 创建的一个衡量各类对弈活动水平的评价方法，是当今对弈水平评估公认的权威标准，且被广泛用于国际象棋、围棋、足球、篮球等运动。网络游戏的竞技对战系统也常采用此评分系统。\u003c/p\u003e\n\u003cp\u003eElo 评分系统是基于统计学的一个评估棋手水平的方法。Elo 模型原先采用正态分布，但实践显明棋手的表现并非正态分布，所以现在的评分计分系统通常使用的是逻辑分布。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/elo-logistic-distribution.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e假设棋手 A 和 B 的当前评分分别为 \u003ccode\u003e$R_A$\u003c/code\u003e 和 \u003ccode\u003e$R_B$\u003c/code\u003e，则按照逻辑分布，A 对 B 的胜率期望值为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E_{A}=\\frac{1}{1+10^{\\left(R_{B}-R_{A}\\right) / 400}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e类似的有 B 对 A 的胜率期望值为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ E_{B}=\\frac{1}{1+10^{\\left(R_{A}-R_{B}\\right) / 400}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e假如一位棋手在比赛中的真实得分 \u003ccode\u003e$S_{A}$\u003c/code\u003e（胜 1 分，和 0.5 分，负 0 分）和他的胜率期望值 \u003ccode\u003e$E_{A}$\u003c/code\u003e 不同，则他的评分要作相应的调整：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ R_{A}^{\\prime} = R_{A} + K\\left(S_{A}-E_{A}\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e公式中 \u003ccode\u003e$R_{A}$\u003c/code\u003e 和 \u003ccode\u003e$R_{A}^{\\prime }$\u003c/code\u003e 分别为棋手调整前后的评分。\u003ccode\u003e$K$\u003c/code\u003e 值是一个极限值，代表理论上最多可以赢一个玩家的得分和失分，\u003ccode\u003e$K / 2$\u003c/code\u003e 就是相同等级的玩家其中一方胜利后所得的分数。国际象棋大师赛中，\u003ccode\u003e$K = 16$\u003c/code\u003e；在大部分的游戏规则中，\u003ccode\u003e$K = 32$\u003c/code\u003e。通常水平越高的比赛中其 \u003ccode\u003e$K$\u003c/code\u003e 值越小，这样做是为了避免少数的几场比赛就能改变高端顶尖玩家的排名。\u003ccode\u003e$E_A$\u003c/code\u003e 和 \u003ccode\u003e$E_B$\u003c/code\u003e 中的 \u003ccode\u003e$400$\u003c/code\u003e 是让多数玩家积分保持标准正态分布的值，在 \u003ccode\u003e$K$\u003c/code\u003e 相同的情况下，分母位置的值越大，积分变化值越小。\u003c/p\u003e\n\u003ch2 id=\"glicko-评分系统\"\u003eGlicko 评分系统\u003c/h2\u003e\n\u003cp\u003eGlicko 评分系统（Glicko Rating System）及 Glicko-2 评分系统（Glicko-2 Rating System）是评估选手在比赛中（如国际象棋及围棋）的技术能力方法之一。此方法由马克·格利克曼发明，原为国际象棋评分系统打造，后作为评分评分系统的改进版本广泛应用 \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003eElo 评分系统的问题在于无法确定选手评分的可信度，而 Glicko 评分系统正是针对此进行改进。假设两名评分均为 1700 的选手 A 和 B 在进行一场对战后 A 获得胜利，在美国国际象棋联赛的 Elo 评分系统下，A 选手评分将增长 16，对应的 B 选手评分将下降  16。但是假如 A 选手是已经很久没玩，但 B 选手每周都会玩，那么在上述情况下 A 选手的 1700 评分并不能十分可信地用于评定其实力，而 B 选手的 1700 评分则更为可信。\u003c/p\u003e\n\u003cp\u003eGlicko 算法的主要贡献是“评分可靠性”（Ratings Reliability），即评分偏差（Ratings Deviation）。若选手没有评分，则其评分通常被设为 1500，评分偏差为 350。新的评分偏差（\u003ccode\u003e$RD$\u003c/code\u003e）可使用旧的评分偏差（\u003ccode\u003e$RD_0$\u003c/code\u003e）计算：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ RD = \\min \\left(\\sqrt{RD_0^2 + c^2 t}, 350\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$t$\u003c/code\u003e 为自上次比赛至现在的时间长度（评分期），常数 \u003ccode\u003e$c$\u003c/code\u003e 根据选手在特定时间段内的技术不确定性计算而来，计算方法可以通过数据分析，或是估算选手的评分偏差将在什么时候达到未评分选手的评分偏差得来。若一名选手的评分偏差将在 100 个评分期间内达到 350 的不确定度，则评分偏差为 50 的玩家的常数 \u003ccode\u003e$c$\u003c/code\u003e 可通过解 \u003ccode\u003e$350 = \\sqrt{50^2 + 100 c^2}$\u003c/code\u003e，则有 \u003ccode\u003e$c = \\sqrt{\\left(350^2 - 50^2\\right) / 100} \\approx 34.6$\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在经过 \u003ccode\u003e$m$\u003c/code\u003e 场比赛后，选手的新评分可通过下列等式计算：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ r=r_{0}+\\frac{q}{\\frac{1}{R D^{2}}+\\frac{1}{d^{2}}} \\sum_{i=1}^{m} g\\left(R D_{i}\\right)\\left(s_{i}-E\\left(s \\mid r_{0}, r_{i}, R D_{i}\\right)\\right) $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation*} \\begin{aligned} \u0026amp; g\\left(R D_{i}\\right) = \\frac{1}{\\sqrt{1+\\frac{3 q^{2}\\left(R D_{i}^{2}\\right)}{\\pi^{2}}}} \\\\ \u0026amp; E\\left(s \\mid r, r_{i}, R D_{i}\\right) = \\frac{1}{1+10\\left(\\frac{g\\left(R D_{i}\\right)\\left(r_{0}-r_{i}\\right)}{-400}\\right)} \\\\ \u0026amp; q = \\frac{\\ln (10)}{400}=0.00575646273 \\\\ \u0026amp; d^{2} = \\frac{1}{q^{2} \\sum_{i=1}^{m}\\left(g\\left(R D_{i}\\right)\\right)^{2} E\\left(s \\mid r_{0}, r_{i}, R D_{i}\\right)\\left(1-E\\left(s \\mid r_{0}, r_{i}, R D_{i}\\right)\\right)} \\end{aligned} \\end{equation*} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$r_i$\u003c/code\u003e 表示选手个人评分，\u003ccode\u003e$s_i$\u003c/code\u003e 表示每场比赛后的结果。胜利为 \u003ccode\u003e$1$\u003c/code\u003e，平局为 \u003ccode\u003e$1 / 2$\u003c/code\u003e，失败为 \u003ccode\u003e$0$\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e原先用于计算评分偏差的函数应增大标准差值，进而反应模型中一定非观察时间内，玩家的技术不确定性的增长。随后，评分偏差将在几场游戏后更新：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ R D^{\\prime}=\\sqrt{\\left(\\frac{1}{R D^{2}}+\\frac{1}{d^{2}}\\right)^{-1}} $$\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"glicko-2-评分系统\"\u003eGlicko-2 评分系统\u003c/h2\u003e\n\u003cp\u003eGlicko-2 算法与原始 Glicko 算法类似，增加了一个评分波动率 \u003ccode\u003e$\\sigma$\u003c/code\u003e，它根据玩家表现的不稳定程度来衡量玩家评分的预期波动程度。例如：当一名球员的表现保持稳定时，他们的评分波动性会很低，如果他们在这段稳定期之后取得了异常强劲的成绩，那么他们的评分波动性就会增加 \u003csup id=\"fnref1:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003eGlicko-2 算法的简要步骤如下：\u003c/p\u003e\n\u003ch3 id=\"计算辅助量\"\u003e计算辅助量\u003c/h3\u003e\n\u003cp\u003e在一个评分周期内，当前评分为 \u003ccode\u003e$\\mu$\u003c/code\u003e 和评分偏差为 \u003ccode\u003e$\\phi$\u003c/code\u003e 的玩家与 \u003ccode\u003e$m$\u003c/code\u003e 个评分为 \u003ccode\u003e$\\mu_1, \\cdots, \\mu_m$\u003c/code\u003e 和评分偏差为 \u003ccode\u003e$\\phi_1, \\cdots, \\phi_m$\u003c/code\u003e 的玩家比赛，获得的分数为 \u003ccode\u003e$s_1, \\cdots, s_m$\u003c/code\u003e，我们首先需要计算辅助量 \u003ccode\u003e$v$\u003c/code\u003e 和 \u003ccode\u003e$\\Delta$\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} v \u0026amp;= \\left[\\sum_{j=1}^{m} g\\left(\\phi_{j}\\right)^{2} E\\left(\\mu, \\mu_{j}, \\phi_{j}\\right)\\left\\{s_{j}-E\\left(\\mu, \\mu_{j}, \\phi_{j}\\right)\\right\\}\\right]^{-1} \\\\ \\Delta \u0026amp;= v \\sum_{j=1}^{m} g\\left(\\phi_{j}\\right)\\left\\{s_{j}-E\\left(\\mu, \\mu_{j}, \\phi_{j}\\right)\\right\\} \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{equation*} \\begin{aligned} \u0026amp;g(\\phi)=\\frac{1}{\\sqrt{1+3 \\phi^{2} / \\pi^{2}}}, \\\\ \u0026amp;E\\left(\\mu, \\mu_{j}, \\phi_{j}\\right)=\\frac{1}{1+\\exp \\left\\{-g\\left(\\phi_{j}\\right)\\left(\\mu-\\mu_{j}\\right)\\right\\}} \\end{aligned} \\end{equation*} $$\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"确定新的评分波动率\"\u003e确定新的评分波动率\u003c/h3\u003e\n\u003cp\u003e选择一个小的常数 \u003ccode\u003e$\\tau$\u003c/code\u003e 来限制时间的波动性，例如：\u003ccode\u003e$\\tau = 0.2$\u003c/code\u003e（较小的 \u003ccode\u003e$\\tau$\u003c/code\u003e 值可以防止剧烈的评分变化），对于：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ f(x)=\\frac{1}{2} \\frac{e^{x}\\left(\\Delta^{2}-\\phi^{2}-v^{2}-e^{x}\\right)}{\\left(\\phi^{2}+v+e^{x}\\right)^{2}}-\\frac{x-\\ln \\left(\\sigma^{2}\\right)}{\\tau^{2}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e我们需要找到满足 \u003ccode\u003e$f\\left(A\\right) = 0$\u003c/code\u003e 的值 \u003ccode\u003e$A$\u003c/code\u003e。解决此问题的一种有效方法是使用 \u003ca href=\"https://en.wikipedia.org/wiki/Regula_falsi#The_Illinois_algorithm\"\u003eIllinois 算法\u003c/a\u003e，一旦这个迭代过程完成，我们将新的评级波动率 \u003ccode\u003e$\\sigma\u0026#39;$\u003c/code\u003e 设置为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\sigma\u0026#39; = e^{\\frac{A}{2}} $$\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"确定新的评分偏差和评分\"\u003e确定新的评分偏差和评分\u003c/h3\u003e\n\u003cp\u003e之后得到新的评分偏差：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\phi^{\\prime} = \\dfrac{1}{\\sqrt{\\dfrac{1}{\\phi^{2}+\\sigma^{\\prime 2}}+\\dfrac{1}{v}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e和新的评分：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\mu^{\\prime} = \\mu+\\phi^{\\prime 2} \\sum_{j=1}^{m} g\\left(\\phi_{j}\\right)\\left\\{s_{j}-E\\left(\\mu, \\mu_{j}, \\phi_{j}\\right)\\right\\} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e需要注意这里的评分和评分偏差与原始 Glicko 算法的比例不同，需要进行转换才能正确比较两者。\u003c/p\u003e\n\u003ch2 id=\"trueskill-评分系统\"\u003eTrueSkill 评分系统\u003c/h2\u003e\n\u003cp\u003eTrueSkill 评分系统是基于贝叶斯推断的评分系统，由微软研究院开发以代替传统 Elo 评分系统，并成功应用于 Xbox Live 自动匹配系统。TrueSkill 评分系统是 Glicko 评分系统的衍伸，主要用于多人游戏中。TrueSkill 评分系统考虑到了个别玩家水平的不确定性，综合考虑了各玩家的胜率和可能的水平涨落。当各玩家进行了更多的游戏后，即使个别玩家的胜率不变，系统也会因为对个别玩家的水平更加了解而改变对玩家的评分 \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003e在电子竞技游戏中，特别是当有多名选手参加比赛的时候需要平衡队伍间的水平，让游戏比赛更加有意思。这样的一个参赛选手能力平衡系统通常包含以下三个模块：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e一个包含跟踪所有玩家比赛结果，记录玩家能力的模块。\u003c/li\u003e\n\u003cli\u003e一个对比赛成员进行配对的模块。\u003c/li\u003e\n\u003cli\u003e一个公布比赛中各成员能力的模块。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"能力计算和更新\"\u003e能力计算和更新\u003c/h3\u003e\n\u003cp\u003eTrueSkill 评分系统是针对玩家能力进行设计的，以克服现有排名系统的局限性，确保比赛双方的公平性，可以在联赛中作为排名系统使用。TrueSkill 评分系统假设玩家的水平可以用一个正态分布来表示，而正态分布可以用两个参数：平均值和方差来完全描述。设 Rank 值为 \u003ccode\u003e$R$\u003c/code\u003e，代表玩家水平的正态分布的两个参数平均值和方差分别为 \u003ccode\u003e$\\mu$\u003c/code\u003e 和 \u003ccode\u003e$\\sigma$\u003c/code\u003e，则系统对玩家的评分即 Rank 值为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ R = \\mu - k \\times \\sigma $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003e$k$\u003c/code\u003e 值越大则系统的评分越保守。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2022-05-22-rating-and-ranking-algorithms/trueskill-skill-level.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e上图来自 \u003ca href=\"https://www.microsoft.com/en-us/research/project/trueskill-ranking-system/\"\u003eTrueSkill 网站\u003c/a\u003e，钟型曲线为某个玩家水平的可能分布，绿色区域是排名系统的信念，即玩家的技能在 15 到 20 级之间。\u003c/p\u003e\n\u003cp\u003e下表格给出了 8 个新手在参与一个 8 人游戏后 \u003ccode\u003e$\\mu$\u003c/code\u003e 和 \u003ccode\u003e$\\sigma$\u003c/code\u003e 的变化。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e姓名\u003c/th\u003e\n\u003cth\u003e排名\u003c/th\u003e\n\u003cth\u003e赛前 \u003ccode\u003e$\\mu$\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003e赛前 \u003ccode\u003e$\\sigma$\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003e赛后 \u003ccode\u003e$\\mu$\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003e赛后 \u003ccode\u003e$\\sigma$\u003c/code\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eAlice\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e36.771\u003c/td\u003e\n\u003ctd\u003e5.749\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBob\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e32.242\u003c/td\u003e\n\u003ctd\u003e5.133\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eChris\u003c/td\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e29.074\u003c/td\u003e\n\u003ctd\u003e4.943\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDarren\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e26.322\u003c/td\u003e\n\u003ctd\u003e4.874\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eEve\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e23.678\u003c/td\u003e\n\u003ctd\u003e4.874\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFabien\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e20.926\u003c/td\u003e\n\u003ctd\u003e4.943\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eGeorge\u003c/td\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e17.758\u003c/td\u003e\n\u003ctd\u003e5.133\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eHillary\u003c/td\u003e\n\u003ctd\u003e8\u003c/td\u003e\n\u003ctd\u003e25\u003c/td\u003e\n\u003ctd\u003e8.3\u003c/td\u003e\n\u003ctd\u003e13.229\u003c/td\u003e\n\u003ctd\u003e5.749\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e第 4 名 Darren 和第 5 名 Eve，他们的 \u003ccode\u003e$\\sigma$\u003c/code\u003e 是最小的，换句话说系统认为他们能力的可能起伏是最小的。这是因为通过这场游戏我们对他们了解得最多：他们赢了3 和 4 个人，也输给了 4 和 3 个人。而对于第 1 名 Alice，我们只知道她赢了 7 个人。\u003c/p\u003e\n\u003cp\u003e定量分析可以先考虑最简单的两人游戏情况：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ \\begin{aligned} \u0026amp;\\mu_{\\text {winner }} \\longleftarrow \\mu_{\\text {winner }}+\\frac{\\sigma_{\\text {winner }}^{2}}{c} * v\\left(\\frac{\\mu_{\\text {winner }}-\\mu_{\\text {loser }}}{c}, \\frac{\\varepsilon}{c}\\right) \\\\ \u0026amp;\\mu_{\\text {loser }} \\longleftarrow \\mu_{\\text {loser }}-\\frac{\\sigma_{\\text {loser }}^{2}}{c} * v\\left(\\frac{\\mu_{\\text {winner }}-\\mu_{\\text {loser }}}{c}, \\frac{\\varepsilon}{c}\\right) \\\\ \u0026amp;\\sigma_{\\text {winner }}^{2} \\longleftarrow \\sigma_{\\text {uninner }}^{2} *\\left[1-\\frac{\\sigma_{\\text {winner }}^{2}}{c} * w\\left(\\frac{\\mu_{\\text {winner }}-\\mu_{\\text {loser }}}{c}, \\frac{\\varepsilon}{c}\\right)\\right. \\\\ \u0026amp;\\sigma_{\\text {loser }}^{2} \\longleftarrow \\sigma_{\\text {loser }}^{2} *\\left[1-\\frac{\\sigma_{\\text {loser }}^{2}}{c} * w\\left(\\frac{\\mu_{\\text {winner }}-\\mu_{\\text {loser }}}{c}, \\frac{\\varepsilon}{c}\\right)\\right. \\\\ \u0026amp;c^{2}=2 \\beta^{2}+\\sigma_{\\text {winner }}^{2}+\\sigma_{\\text {loser }}^{2} \\end{aligned} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e其中，系数 \u003ccode\u003e$\\beta^2$\u003c/code\u003e 代表的是所有玩家的平均方差，\u003ccode\u003e$v$\u003c/code\u003e 和 \u003ccode\u003e$w$\u003c/code\u003e 是两个函数，比较复杂，\u003ccode\u003e$\\epsilon$\u003c/code\u003e 是平局参数。简而言之，个别玩家赢了 \u003ccode\u003e$\\mu$\u003c/code\u003e 就增加，输了 \u003ccode\u003e$\\mu$\u003c/code\u003e 减小；但不论输赢，\u003ccode\u003e$\\sigma$\u003c/code\u003e 都是在减小，所以有可能出现输了涨分的情况。\u003c/p\u003e\n\u003ch3 id=\"对手匹配\"\u003e对手匹配\u003c/h3\u003e\n\u003cp\u003e势均力敌的对手能带来最精彩的比赛，所以当自动匹配对手时，系统会尽可能地为个别玩家安排可能水平最为接近的对手。TrueSkill 评分系统采用了一个值域为 \u003ccode\u003e$(0, 1)$\u003c/code\u003e 的函数来描述两个人是否势均力敌：结果越接近 0 代表差距越大，越接近 1 代表水平越接近。\u003c/p\u003e\n\u003cp\u003e假设有两个玩家 A 和 B，他们的参数为 \u003ccode\u003e$(\\mu_A, \\sigma_A)$\u003c/code\u003e 和 \u003ccode\u003e$(\\mu_B, \\sigma_B)$\u003c/code\u003e，则函数对这两个玩家的返回值为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ e^{-\\frac{\\left(\\mu_{A}-\\mu_{B}\\right)^{2}}{2 c^{2}}} \\sqrt{\\frac{2 \\beta^{2}}{c^{2}}} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$c$\u003c/code\u003e 的值由如下公式给出：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ c^{2}=2 \\beta^{2}+\\mu_{A}^{2}+\\mu_{B}^{2} $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果两人有较大几率被匹配在一起，仅是平均值接近还不行，还需要方差也比较接近才可以。\u003c/p\u003e\n\u003cp\u003e在 Xbox Live 上，系统为每个玩家赋予的初值是 \u003ccode\u003e$\\mu = 25$\u003c/code\u003e，\u003ccode\u003e$\\sigma = \\dfrac{25}{3}$\u003c/code\u003e 和 \u003ccode\u003e$k = 3$\u003c/code\u003e。所以玩家的起始 Rank 值为：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$$ R=25-3 \\frac{25}{3}=0 $$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e相较 Elo 评价系统，TrueSkill 评价系统的优势在于：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e适用于复杂的组队形式，更具一般性。\u003c/li\u003e\n\u003cli\u003e有更完善的建模体系，容易扩展。\u003c/li\u003e\n\u003cli\u003e继承了贝叶斯建模的优点，如模型选择等。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文主要参考了阮一峰的系列文章「\u003ca href=\"http://www.ruanyifeng.com/blog/2012/02/ranking_algorithm_hacker_news.html\"\u003e基于用户投票的排名算法\u003c/a\u003e」和钱魏的「\u003ca href=\"https://www.biaodianfu.com/elo-glicko-trueskill.html\"\u003e游戏排名算法：Elo、Glicko、TrueSkill\u003c/a\u003e」。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr/\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Glicko_rating_system\"\u003ehttps://en.wikipedia.org/wiki/Glicko_rating_system\u003c/a\u003e \u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e \u003ca href=\"#fnref1:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\"\u003e\n\u003cp\u003e\u003ca href=\"https://zh.wikipedia.org/wiki/TrueSkill\"\u003ehttps://zh.wikipedia.org/wiki/TrueSkill\u003c/a\u003e评分系统 \u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"donate\"\u003e\n  \u003cdiv class=\"donate-header\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"donate-slug\" id=\"donate-slug\"\u003erating-and-ranking-algorithms\u003c/div\u003e\n  \u003cbutton class=\"donate-button\"\u003e赞 赏\u003c/button\u003e\n  \u003cdiv class=\"donate-footer\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"donate-modal-wrapper\"\u003e\n  \u003cdiv class=\"donate-modal\"\u003e\n    \u003cdiv class=\"donate-box\"\u003e\n      \u003cdiv class=\"donate-box-content\"\u003e\n        \u003cdiv class=\"donate-box-content-inner\"\u003e\n          \u003cdiv class=\"donate-box-header\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n          \u003cdiv class=\"donate-box-body\"\u003e\n            \u003cdiv class=\"donate-box-money\"\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-2\" data-v=\"2\" data-unchecked=\"￥ 2\" data-checked=\"2 元\"\u003e￥ 2\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-5\" data-v=\"5\" data-unchecked=\"￥ 5\" data-checked=\"5 元\"\u003e￥ 5\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-10\" data-v=\"10\" data-unchecked=\"￥ 10\" data-checked=\"10 元\"\u003e￥ 10\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-50\" data-v=\"50\" data-unchecked=\"￥ 50\" data-checked=\"50 元\"\u003e￥ 50\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-100\" data-v=\"100\" data-unchecked=\"￥ 100\" data-checked=\"100 元\"\u003e￥ 100\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-custom\" data-v=\"custom\" data-unchecked=\"任意金额\" data-checked=\"任意金额\"\u003e任意金额\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-qrcode\" id=\"donate-box-pay-qrcode\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"donate-box-footer\"\u003e\n            \u003cdiv class=\"donate-box-pay-method donate-box-pay-method-checked\" data-v=\"wechat-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-wechat-pay\" src=\"\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay-method\" data-v=\"alipay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-alipay\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"button\" class=\"donate-box-close-button\"\u003e\n      \u003csvg class=\"donate-box-close-button-icon\" fill=\"#fff\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"\u003e\u003cpath d=\"M13.486 12l5.208-5.207a1.048 1.048 0 0 0-.006-1.483 1.046 1.046 0 0 0-1.482-.005L12 10.514 6.793 5.305a1.048 1.048 0 0 0-1.483.005 1.046 1.046 0 0 0-.005 1.483L10.514 12l-5.208 5.207a1.048 1.048 0 0 0 .006 1.483 1.046 1.046 0 0 0 1.482.005L12 13.486l5.207 5.208a1.048 1.048 0 0 0 1.483-.006 1.046 1.046 0 0 0 .005-1.482L13.486 12z\" fill-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/svg\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\" src=\"/js/donate.js\"\u003e\u003c/script\u003e\n\n\n  \u003cfooter\u003e\n  \n\u003cnav class=\"post-nav\"\u003e\n  \u003cspan class=\"nav-prev\"\u003e← \u003ca href=\"/cn/2022/04/survived-from-this-round-of-layoff/\"\u003e小记这一波裁员浪潮\u003c/a\u003e\u003c/span\u003e\n  \u003cspan class=\"nav-next\"\u003e\u003ca href=\"/cn/2022/09/selfish-and-greedy/\"\u003e自私和贪婪 (Selfish and Greedy)\u003c/a\u003e →\u003c/span\u003e\n\u003c/nav\u003e\n\n\n\n\n\u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"8302038603\"\u003e\u003c/ins\u003e\n\u003cscript\u003e\n  (adsbygoogle = window.adsbygoogle || []).push({});\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toggle-theme.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"/js/no-highlight.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/math-code.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/heading-anchor.js\"\u003e\u003c/script\u003e\n\n\n\n\u003csection class=\"comments\"\u003e\n\u003cscript src=\"https://giscus.app/client.js\" data-repo=\"leovan/leovan.me\" data-repo-id=\"MDEwOlJlcG9zaXRvcnkxMTMxOTY0Mjc=\" data-category=\"Comments\" data-category-id=\"DIC_kwDOBr89i84CT-R7\" data-mapping=\"pathname\" data-strict=\"1\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"zh-CN\" data-loading=\"lazy\" crossorigin=\"anonymous\" defer=\"\"\u003e\n\u003c/script\u003e\n\u003c/section\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/clipboard@2.0.11/dist/clipboard.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  (function() {\n    if (!self.Prism) {\n      return;\n    }\n\n    \n    Prism.languages.dos = Prism.languages.powershell;\n    Prism.languages.gremlin = Prism.languages.groovy;\n\n    let languages = {\n      'r': 'R', 'python': 'Python', 'xml': 'XML', 'html': 'HTML',\n      'yaml': 'YAML', 'latex': 'LaTeX', 'tex': 'TeX',\n      'powershell': 'PowerShell', 'javascript': 'JavaScript',\n      'dos': 'DOS', 'qml': 'QML', 'json': 'JSON', 'bash': 'Bash',\n      'text': 'Text', 'txt': 'Text', 'sparql': 'SPARQL',\n      'gremlin': 'Gremlin', 'cypher': 'Cypher', 'ngql': 'nGQL',\n      'shell': 'Shell', 'sql': 'SQL', 'apacheconf': 'Apache Configuration', 'c': 'C', 'css': 'CSS'\n    };\n\n    Prism.hooks.add('before-highlight', function(env) {\n      if (env.language !== 'plain') {\n        let language = languages[env.language] || env.language;\n        env.element.setAttribute('data-language', language);\n      }\n    });\n\n    \n    let ClipboardJS = window.ClipboardJS || undefined;\n\n    Prism.plugins.toolbar.registerButton('copy-to-clipboard', function(env) {\n      let linkCopy = document.createElement('button');\n      linkCopy.classList.add('prism-button-copy');\n\n      registerClipboard();\n\n      return linkCopy;\n\n      function registerClipboard() {\n        let clip = new ClipboardJS(linkCopy, {\n          'text': function () {\n            return env.code;\n          }\n        });\n\n        clip.on('success', function() {\n          linkCopy.classList.add('prism-button-copy-success');\n          resetText();\n        });\n        clip.on('error', function () {\n          linkCopy.classList.add('prism-button-copy-error');\n          resetText();\n        });\n      }\n\n      function resetText() {\n        setTimeout(function () {\n          linkCopy.classList.remove('prism-button-copy-success');\n          linkCopy.classList.remove('prism-button-copy-error');\n        }, 1600);\n      }\n    });\n  })();\n\u003c/script\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cscript async=\"\" src=\"/js/center-img.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/right-quote.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/external-link.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/alt-title.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/figure.js\"\u003e\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/vanilla-back-to-top@latest/dist/vanilla-back-to-top.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\naddBackToTop({\n  diameter: 48\n});\n\u003c/script\u003e\n\n  \u003chr/\u003e\n  \u003cdiv class=\"copyright no-border-bottom\"\u003e\n    \u003cdiv class=\"copyright-author-year\"\u003e\n      \u003cspan\u003eCopyright © 2017-2024 \u003ca href=\"/\"\u003e范叶亮 | Leo Van\u003c/a\u003e\u003c/span\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n  \u003c/footer\u003e\n  \u003c/article\u003e",
  "Date": "2022-05-22T00:00:00Z",
  "Author": "范叶亮"
}