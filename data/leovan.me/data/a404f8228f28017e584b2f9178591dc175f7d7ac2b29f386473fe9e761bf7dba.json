{
  "Source": "leovan.me",
  "Title": "进程，线程和协程 (Process, Thread and Coroutine)",
  "Link": "https://leovan.me/cn/2021/04/process-thread-and-coroutine-theory/",
  "Content": "\u003carticle class=\"main\"\u003e\n    \u003cheader class=\"content-title\"\u003e\n    \n\u003ch1 class=\"title\"\u003e\n  \n  进程，线程和协程 (Process, Thread and Coroutine)\n  \n\u003c/h1\u003e\n\u003ch2 class=\"subtitle\"\u003e理论篇\u003c/h2\u003e\n\n\n\n\n\n\n\u003ch2 class=\"author-date\"\u003e范叶亮 / \n2021-04-01\u003c/h2\u003e\n\n\n\n\u003ch3 class=\"post-meta\"\u003e\n\n\n\u003cstrong\u003e分类: \u003c/strong\u003e\n\u003ca href=\"/categories/%E7%BC%96%E7%A8%8B\"\u003e编程\u003c/a\u003e\n\n\n\n\n/\n\n\n\n\n\u003cstrong\u003e标签: \u003c/strong\u003e\n\u003cspan\u003e进程\u003c/span\u003e, \u003cspan\u003eProcess\u003c/span\u003e, \u003cspan\u003e线程\u003c/span\u003e, \u003cspan\u003eThread\u003c/span\u003e, \u003cspan\u003e协程\u003c/span\u003e, \u003cspan\u003eCoroutine\u003c/span\u003e, \u003cspan\u003e进程间通讯\u003c/span\u003e, \u003cspan\u003einter-process communicate\u003c/span\u003e, \u003cspan\u003eIPC\u003c/span\u003e, \u003cspan\u003e生成器\u003c/span\u003e, \u003cspan\u003eGenerator\u003c/span\u003e, \u003cspan\u003e迭代器\u003c/span\u003e, \u003cspan\u003eIterator\u003c/span\u003e, \u003cspan\u003e并发性\u003c/span\u003e, \u003cspan\u003e并行性\u003c/span\u003e, \u003cspan\u003e临界区段\u003c/span\u003e, \u003cspan\u003eCritical Section\u003c/span\u003e, \u003cspan\u003e同步原语\u003c/span\u003e, \u003cspan\u003e锁\u003c/span\u003e, \u003cspan\u003e互斥锁\u003c/span\u003e, \u003cspan\u003eMutual Exclusion\u003c/span\u003e, \u003cspan\u003eMutex\u003c/span\u003e, \u003cspan\u003e信号量\u003c/span\u003e, \u003cspan\u003eSemaphore\u003c/span\u003e, \u003cspan\u003e进程间通信\u003c/span\u003e, \u003cspan\u003e管道\u003c/span\u003e, \u003cspan\u003ePipe\u003c/span\u003e, \u003cspan\u003ePipeline\u003c/span\u003e, \u003cspan\u003e命名管道\u003c/span\u003e, \u003cspan\u003eNamed Pipe\u003c/span\u003e, \u003cspan\u003e信号\u003c/span\u003e, \u003cspan\u003eSignal\u003c/span\u003e, \u003cspan\u003e消息队列\u003c/span\u003e, \u003cspan\u003eMessage Queue\u003c/span\u003e, \u003cspan\u003e信号量\u003c/span\u003e, \u003cspan\u003eSemphore\u003c/span\u003e, \u003cspan\u003e共享内存\u003c/span\u003e, \u003cspan\u003eShared Memory\u003c/span\u003e, \u003cspan\u003e伯克利套接字\u003c/span\u003e, \u003cspan\u003eInternet Berkeley Sockets\u003c/span\u003e, \u003cspan\u003eBSD 套接字\u003c/span\u003e, \u003cspan\u003eBSD Sockets\u003c/span\u003e, \u003cspan\u003e网络套接字\u003c/span\u003e, \u003cspan\u003eNetwork Socket\u003c/span\u003e, \u003cspan\u003e线程间通信\u003c/span\u003e, \u003cspan\u003e读写锁\u003c/span\u003e, \u003cspan\u003e条件变量\u003c/span\u003e, \u003cspan\u003e自旋锁\u003c/span\u003e\n\n\n\n\n/\n\n\n\u003cstrong\u003e字数: \u003c/strong\u003e\n3370\n\u003c/h3\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n    \n    \n    \u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"1261604535\"\u003e\u003c/ins\u003e\n    \u003cscript\u003e\n    (adsbygoogle = window.adsbygoogle || []).push({});\n    \u003c/script\u003e\n    \n    \n    \u003c/header\u003e\n\n\n\n\u003cdiv class=\"toc-depth-3\"\u003e\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#进程-线程和协程\"\u003e进程，线程和协程\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#通信\"\u003e通信\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#进程间通信\"\u003e进程间通信\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#管道\"\u003e管道\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#命名管道\"\u003e命名管道\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#信号\"\u003e信号\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#消息队列\"\u003e消息队列\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#信号量\"\u003e信号量\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#共享内存\"\u003e共享内存\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#伯克利套接字\"\u003e伯克利套接字\u003c/a\u003e\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#线程间通信\"\u003e线程间通信\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"#锁机制\"\u003e锁机制\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#信号-1\"\u003e信号\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"#信号量-1\"\u003e信号量\u003c/a\u003e\u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\u003c/div\u003e\n\n\n\u003cblockquote\u003e\n\u003cp\u003ePython 实现篇请参见：\u003ca href=\"/cn/2021/04/process-thread-and-coroutine-python-implementation\"\u003e进程，线程和协程 (Process, Thread and Coroutine) - 实现篇\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"进程-线程和协程\"\u003e进程，线程和协程\u003c/h1\u003e\n\u003cp\u003e**进程（Process）**是计算机中已运行的程序 \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e。**线程（Thread）**是操作系统能够进行运算调度的最小单位。大部分情况下，线程被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务 \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e。\u003c/p\u003e\n\u003cp\u003e进程和线程之间的主要区别在于：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e线程共享创建其进程的地址空间，进程使用自己的地址。\u003c/li\u003e\n\u003cli\u003e线程可以直接访问进程的数据，进程使用其父进程数据的副本。\u003c/li\u003e\n\u003cli\u003e线程可以同其进程中其他线程直接通信，进程必须使用**进程间通讯（inter-process communicate, IPC）**与同级进程通信。\u003c/li\u003e\n\u003cli\u003e线程开销较小，进程开销较大。\u003c/li\u003e\n\u003cli\u003e线程的创建较为容易，进程需要复制其父进程。\u003c/li\u003e\n\u003cli\u003e线程可以控制相同进程的其他线程，进程只能控制其子进程。\u003c/li\u003e\n\u003cli\u003e对于主线程的修改（例如：取消、优先级修改等）可能会影响进程中的其他线程，对于父进程的修改不会影响其子进程。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e单线程进程和多线程进程之间的对比如下图所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2021-04-01-process-thread-and-coroutine-theory/single-thread-process-vs-multiple-threads-process.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e一个关于进程和线程的形象类比如下 \u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e计算机的核心是 CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。\u003c/li\u003e\n\u003cli\u003e假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个 CPU 一次只能运行一个任务。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e进程\u003c/strong\u003e就好比工厂的车间，它代表 CPU 所能处理的单个任务。任一时刻，CPU 总是运行一个进程，其他进程处于非运行状态。\u003c/li\u003e\n\u003cli\u003e一个车间里，可以有很多工人。他们协同完成一个任务。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e线程\u003c/strong\u003e就好比车间里的工人。一个进程可以包括多个线程。\u003c/li\u003e\n\u003cli\u003e车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。\u003c/li\u003e\n\u003cli\u003e可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。\u003c/li\u003e\n\u003cli\u003e一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫“互斥锁”（Mutual Exclusion，Mutex），防止多个线程同时读写某一块内存区域。\u003c/li\u003e\n\u003cli\u003e还有些房间，可以同时容纳 \u003ccode\u003e$n$\u003c/code\u003e 个人，比如厨房。也就是说，如果人数大于 \u003ccode\u003e$n$\u003c/code\u003e，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。\u003c/li\u003e\n\u003cli\u003e这时的解决方法，就是在门口挂 \u003ccode\u003e$n$\u003c/code\u003e 把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做“信号量”（Semaphore），用来保证多个线程不会互相冲突。不难看出，Mutex 是 Semaphore 的一种特殊情况（\u003ccode\u003e$n = 1$\u003c/code\u003e 时）。也就是说，完全可以用后者替代前者。但是，因为 Mutex 较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。\u003c/li\u003e\n\u003cli\u003e操作系统的设计，因此可以归结为三点：(1). 以多进程形式，允许多个任务同时运行；(2). 以多线程形式，允许单个任务分成不同的部分运行；(3). 提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e协程\u003c/strong\u003e（Coroutine）是计算机程序的一类组件，推广了协作式多任务的子例程，允许执行被挂起与被恢复。相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。协程更适合于用来实现彼此熟悉的程序组件，如协作式多任务、异常处理、事件循环、迭代器、无限列表和管道。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e子例程\u003c/strong\u003e（Subroutine），是一个大型程序中的某部分代码，由一个或多个语句块组成。它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。\u003c/p\u003e\n\u003cp\u003e协程和子例程的执行过程对比如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2021-04-01-process-thread-and-coroutine-theory/subroutine-vs-coroutine.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e子例程可以调用其他子例程，调用者等待被调用者结束后继续执行，故而子例程的生命期遵循后进先出，即最后一个被调用的子例程最先结束返回。协程的生命期完全由对它们的使用需要来决定。\u003c/li\u003e\n\u003cli\u003e子例程的起始处是惟一的入口点，每当子例程被调用时，执行都从被调用子例程的起始处开始。协程可以有多个入口点，协程的起始处是第一个入口点，每个 \u003ccode\u003eyield\u003c/code\u003e 返回出口点都是再次被调用执行时的入口点。\u003c/li\u003e\n\u003cli\u003e子例程只在结束时一次性的返回全部结果值。协程可以在 \u003ccode\u003eyield\u003c/code\u003e 时不调用其他协程，而是每次返回一部分的结果值，这种协程常称为\u003cstrong\u003e生成器\u003c/strong\u003e或\u003cstrong\u003e迭代器\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e协程类似于线程，但是协程是协作式多任务的，而线程是抢占式多任务的。这意味着协程提供\u003cstrong\u003e并发性\u003c/strong\u003e而非\u003cstrong\u003e并行性\u003c/strong\u003e。协程超过线程的好处是它们可以用于硬性实时的语境（在协程之间的切换不需要涉及任何系统调用或任何阻塞调用），这里不需要用来守卫\u003cstrong\u003e临界区段\u003c/strong\u003e的\u003cstrong\u003e同步原语\u003c/strong\u003e比如互斥锁、信号量等，并且不需要来自操作系统的支持。\u003c/p\u003e\n\u003ch1 id=\"通信\"\u003e通信\u003c/h1\u003e\n\u003ch2 id=\"进程间通信\"\u003e进程间通信\u003c/h2\u003e\n\u003ch3 id=\"管道\"\u003e管道\u003c/h3\u003e\n\u003cp\u003e管道（Pipeline）是一系列将标准输入输出链接起来的进程，其中每一个进程的输出被直接作为下一个进程的输入。 例如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-shell\"\u003els -l | less\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003els\u003c/code\u003e 用于在 Unix 下列出目录内容，\u003ccode\u003eless\u003c/code\u003e 是一个有搜索功能的交互式的文本分页器。这个管道使得用户可以在列出的目录内容比屏幕长时目录上下翻页。\u003c/p\u003e\n\u003ch3 id=\"命名管道\"\u003e命名管道\u003c/h3\u003e\n\u003cp\u003e命名管道是计算机进程间的一种先进先出通信机制。是类 Unix 系统传统管道的扩展。传统管道属于匿名管道，其生存期不超过创建管道的进程的生存期。但命名管道的生存期可以与操作系统运行期一样长。\u003c/p\u003e\n\u003ch3 id=\"信号\"\u003e信号\u003c/h3\u003e\n\u003cp\u003e信号（Signals）是 Unix、类 Unix 以及其他 POSIX 兼容的操作系统中进程间通讯的一种有限制的方式。它是一种异步的通知机制，用来提醒进程一个事件已经发生。当一个信号发送给一个进程，操作系统中断了进程正常的控制流程，此时，任何非原子操作都将被中断。如果进程定义了信号的处理函数，那么它将被执行，否则就执行默认的处理函数。\u003c/p\u003e\n\u003cp\u003e例如，在一个运行的程序的控制终端键入特定的组合键可以向它发送某些信号：\u003ckbd\u003eCtrl\u003c/kbd\u003e + \u003ckbd\u003eC\u003c/kbd\u003e 发送 INT 信号（SIGINT），这会导致进程终止；\u003ckbd\u003eCtrl\u003c/kbd\u003e + \u003ckbd\u003eZ\u003c/kbd\u003e 发送 TSTP 信号（SIGTSTP），这会导致进程挂起。\u003c/p\u003e\n\u003ch3 id=\"消息队列\"\u003e消息队列\u003c/h3\u003e\n\u003cp\u003e消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的资料，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。\u003c/p\u003e\n\u003cp\u003e消息队列本身是异步的，它允许接收者在消息发送很长时间后再取回消息。和信号相比，消息队列能够传递更多的信息。与管道相比，消息队列提供了有格式的数据，这可以减少开发人员的工作量。\u003c/p\u003e\n\u003ch3 id=\"信号量\"\u003e信号量\u003c/h3\u003e\n\u003cp\u003e信号量（Semaphore）又称为信号标，是一个同步对象，用于保持在 0 至指定最大值之间的一个计数值。当线程完成一次对该 Semaphore 对象的等待（wait）时，该计数值减一；当线程完成一次对 Semaphore 对象的释放（release）时，计数值加一。当计数值为 0，则线程等待该 Semaphore 对象不再能成功直至该 Semaphore 对象变成 signaled 状态。Semaphore 对象的计数值大于 0，为 signaled 状态；计数值等于 0，为 nonsignaled 状态.\u003c/p\u003e\n\u003ch3 id=\"共享内存\"\u003e共享内存\u003c/h3\u003e\n\u003cp\u003e共享内存指可被多个进程存取的内存，一个进程是一段程序的单个运行实例。在这种情况下，共享内存被用作进程间的通讯。\u003c/p\u003e\n\u003ch3 id=\"伯克利套接字\"\u003e伯克利套接字\u003c/h3\u003e\n\u003cp\u003e伯克利套接字（Internet Berkeley Sockets），又称为 BSD 套接字是一种应用程序接口，主要用于实现进程间通讯，在计算机网络通讯方面被广泛使用。\u003c/p\u003e\n\u003ch2 id=\"线程间通信\"\u003e线程间通信\u003c/h2\u003e\n\u003ch3 id=\"锁机制\"\u003e锁机制\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e互斥锁\u003c/strong\u003e：互斥锁（Mutual Exclusion，Mutex）是一种用于多线程编程中，防止两条线程同时对同一公共资源（比如全局变量）进行读写的机制。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e条件锁\u003c/strong\u003e：读写锁是计算机程序的并发控制的一种同步机制，用于解决读写问题。读操作可并发重入，写操作是互斥的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e条件变量\u003c/strong\u003e：条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待“条件变量的条件成立”而挂起；另一个线程使“条件成立”（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e自旋锁\u003c/strong\u003e：自旋锁是用于多线程同步的一种锁，线程反复检查锁变量是否可用。由于线程在这一过程中保持执行，因此是一种忙等待。一旦获取了自旋锁，线程会一直保持该锁，直至显式释放自旋锁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"信号-1\"\u003e信号\u003c/h3\u003e\n\u003cp\u003e同上文。\u003c/p\u003e\n\u003ch3 id=\"信号量-1\"\u003e信号量\u003c/h3\u003e\n\u003cp\u003e同上文。\u003c/p\u003e\n\u003cdiv class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr/\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\"\u003e\n\u003cp\u003e\u003ca href=\"https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B\"\u003ehttps://zh.wikipedia.org/wiki/进程\u003c/a\u003e \u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:2\"\u003e\n\u003cp\u003e\u003ca href=\"https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B\"\u003ehttps://zh.wikipedia.org/wiki/线程\u003c/a\u003e \u003ca href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli id=\"fn:3\"\u003e\n\u003cp\u003e\u003ca href=\"https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\"\u003ehttps://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html\u003c/a\u003e \u003ca href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e↩︎\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"donate\"\u003e\n  \u003cdiv class=\"donate-header\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"donate-slug\" id=\"donate-slug\"\u003eprocess-thread-and-coroutine-theory\u003c/div\u003e\n  \u003cbutton class=\"donate-button\"\u003e赞 赏\u003c/button\u003e\n  \u003cdiv class=\"donate-footer\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"donate-modal-wrapper\"\u003e\n  \u003cdiv class=\"donate-modal\"\u003e\n    \u003cdiv class=\"donate-box\"\u003e\n      \u003cdiv class=\"donate-box-content\"\u003e\n        \u003cdiv class=\"donate-box-content-inner\"\u003e\n          \u003cdiv class=\"donate-box-header\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n          \u003cdiv class=\"donate-box-body\"\u003e\n            \u003cdiv class=\"donate-box-money\"\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-2\" data-v=\"2\" data-unchecked=\"￥ 2\" data-checked=\"2 元\"\u003e￥ 2\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-5\" data-v=\"5\" data-unchecked=\"￥ 5\" data-checked=\"5 元\"\u003e￥ 5\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-10\" data-v=\"10\" data-unchecked=\"￥ 10\" data-checked=\"10 元\"\u003e￥ 10\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-50\" data-v=\"50\" data-unchecked=\"￥ 50\" data-checked=\"50 元\"\u003e￥ 50\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-100\" data-v=\"100\" data-unchecked=\"￥ 100\" data-checked=\"100 元\"\u003e￥ 100\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-custom\" data-v=\"custom\" data-unchecked=\"任意金额\" data-checked=\"任意金额\"\u003e任意金额\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-qrcode\" id=\"donate-box-pay-qrcode\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"donate-box-footer\"\u003e\n            \u003cdiv class=\"donate-box-pay-method donate-box-pay-method-checked\" data-v=\"wechat-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-wechat-pay\" src=\"\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay-method\" data-v=\"alipay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-alipay\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"button\" class=\"donate-box-close-button\"\u003e\n      \u003csvg class=\"donate-box-close-button-icon\" fill=\"#fff\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"\u003e\u003cpath d=\"M13.486 12l5.208-5.207a1.048 1.048 0 0 0-.006-1.483 1.046 1.046 0 0 0-1.482-.005L12 10.514 6.793 5.305a1.048 1.048 0 0 0-1.483.005 1.046 1.046 0 0 0-.005 1.483L10.514 12l-5.208 5.207a1.048 1.048 0 0 0 .006 1.483 1.046 1.046 0 0 0 1.482.005L12 13.486l5.207 5.208a1.048 1.048 0 0 0 1.483-.006 1.046 1.046 0 0 0 .005-1.482L13.486 12z\" fill-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/svg\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\" src=\"/js/donate.js\"\u003e\u003c/script\u003e\n\n\n  \u003cfooter\u003e\n  \n\u003cnav class=\"post-nav\"\u003e\n  \u003cspan class=\"nav-prev\"\u003e← \u003ca href=\"/cn/2021/03/capsule-network/\"\u003e胶囊网络 (Capsule Network)\u003c/a\u003e\u003c/span\u003e\n  \u003cspan class=\"nav-next\"\u003e\u003ca href=\"/cn/2021/04/process-thread-and-coroutine-python-implementation/\"\u003e进程，线程和协程 (Process, Thread and Coroutine)\u003c/a\u003e →\u003c/span\u003e\n\u003c/nav\u003e\n\n\n\n\n\u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"8302038603\"\u003e\u003c/ins\u003e\n\u003cscript\u003e\n  (adsbygoogle = window.adsbygoogle || []).push({});\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toggle-theme.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"/js/no-highlight.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/math-code.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/heading-anchor.js\"\u003e\u003c/script\u003e\n\n\n\n\u003csection class=\"comments\"\u003e\n\u003cscript src=\"https://giscus.app/client.js\" data-repo=\"leovan/leovan.me\" data-repo-id=\"MDEwOlJlcG9zaXRvcnkxMTMxOTY0Mjc=\" data-category=\"Comments\" data-category-id=\"DIC_kwDOBr89i84CT-R7\" data-mapping=\"pathname\" data-strict=\"1\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"zh-CN\" data-loading=\"lazy\" crossorigin=\"anonymous\" defer=\"\"\u003e\n\u003c/script\u003e\n\u003c/section\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/clipboard@2.0.11/dist/clipboard.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  (function() {\n    if (!self.Prism) {\n      return;\n    }\n\n    \n    Prism.languages.dos = Prism.languages.powershell;\n    Prism.languages.gremlin = Prism.languages.groovy;\n\n    let languages = {\n      'r': 'R', 'python': 'Python', 'xml': 'XML', 'html': 'HTML',\n      'yaml': 'YAML', 'latex': 'LaTeX', 'tex': 'TeX',\n      'powershell': 'PowerShell', 'javascript': 'JavaScript',\n      'dos': 'DOS', 'qml': 'QML', 'json': 'JSON', 'bash': 'Bash',\n      'text': 'Text', 'txt': 'Text', 'sparql': 'SPARQL',\n      'gremlin': 'Gremlin', 'cypher': 'Cypher', 'ngql': 'nGQL',\n      'shell': 'Shell', 'sql': 'SQL', 'apacheconf': 'Apache Configuration', 'c': 'C', 'css': 'CSS'\n    };\n\n    Prism.hooks.add('before-highlight', function(env) {\n      if (env.language !== 'plain') {\n        let language = languages[env.language] || env.language;\n        env.element.setAttribute('data-language', language);\n      }\n    });\n\n    \n    let ClipboardJS = window.ClipboardJS || undefined;\n\n    Prism.plugins.toolbar.registerButton('copy-to-clipboard', function(env) {\n      let linkCopy = document.createElement('button');\n      linkCopy.classList.add('prism-button-copy');\n\n      registerClipboard();\n\n      return linkCopy;\n\n      function registerClipboard() {\n        let clip = new ClipboardJS(linkCopy, {\n          'text': function () {\n            return env.code;\n          }\n        });\n\n        clip.on('success', function() {\n          linkCopy.classList.add('prism-button-copy-success');\n          resetText();\n        });\n        clip.on('error', function () {\n          linkCopy.classList.add('prism-button-copy-error');\n          resetText();\n        });\n      }\n\n      function resetText() {\n        setTimeout(function () {\n          linkCopy.classList.remove('prism-button-copy-success');\n          linkCopy.classList.remove('prism-button-copy-error');\n        }, 1600);\n      }\n    });\n  })();\n\u003c/script\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cscript async=\"\" src=\"/js/center-img.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/right-quote.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/external-link.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/alt-title.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/figure.js\"\u003e\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/vanilla-back-to-top@latest/dist/vanilla-back-to-top.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\naddBackToTop({\n  diameter: 48\n});\n\u003c/script\u003e\n\n  \u003chr/\u003e\n  \u003cdiv class=\"copyright no-border-bottom\"\u003e\n    \u003cdiv class=\"copyright-author-year\"\u003e\n      \u003cspan\u003eCopyright © 2017-2024 \u003ca href=\"/\"\u003e范叶亮 | Leo Van\u003c/a\u003e\u003c/span\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n  \u003c/footer\u003e\n  \u003c/article\u003e",
  "Date": "2021-04-01T00:00:00Z",
  "Author": "范叶亮"
}