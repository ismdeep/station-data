{
  "Source": "leovan.me",
  "Title": "在 OpenWrt 中安装 Jellyfin 搭建家庭影音中心",
  "Link": "https://leovan.me/cn/2023/01/build-home-media-center-with-jellyfin-on-openwrt/",
  "Content": "\u003carticle class=\"main\"\u003e\n    \u003cheader class=\"content-title\"\u003e\n    \n\u003ch1 class=\"title\"\u003e\n  \n  在 OpenWrt 中安装 Jellyfin 搭建家庭影音中心\n  \n\u003c/h1\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"author-date\"\u003e范叶亮 / \n2023-01-24\u003c/h2\u003e\n\n\n\n\u003ch3 class=\"post-meta\"\u003e\n\n\n\u003cstrong\u003e分类: \u003c/strong\u003e\n\u003ca href=\"/categories/%E7%94%9F%E6%B4%BB\"\u003e生活\u003c/a\u003e\n\n\n\n\n/\n\n\n\n\n\u003cstrong\u003e标签: \u003c/strong\u003e\n\u003cspan\u003eOpenWrt\u003c/span\u003e, \u003cspan\u003eJellyfin\u003c/span\u003e, \u003cspan\u003eNAS\u003c/span\u003e, \u003cspan\u003ePT\u003c/span\u003e, \u003cspan\u003ePlex\u003c/span\u003e, \u003cspan\u003eApple TV\u003c/span\u003e, \u003cspan\u003eChromecast\u003c/span\u003e, \u003cspan\u003eGoogle TV\u003c/span\u003e, \u003cspan\u003eInfuse\u003c/span\u003e, \u003cspan\u003eDocker\u003c/span\u003e, \u003cspan\u003eTMM\u003c/span\u003e, \u003cspan\u003etinyMediaManager\u003c/span\u003e, \u003cspan\u003e刮削\u003c/span\u003e, \u003cspan\u003e影音中心\u003c/span\u003e, \u003cspan\u003eSwiftfin\u003c/span\u003e, \u003cspan\u003eFindroid\u003c/span\u003e\n\n\n\n\n/\n\n\n\u003cstrong\u003e字数: \u003c/strong\u003e\n4612\n\u003c/h3\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n    \n    \n    \u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"1261604535\"\u003e\u003c/ins\u003e\n    \u003cscript\u003e\n    (adsbygoogle = window.adsbygoogle || []).push({});\n    \u003c/script\u003e\n    \n    \n    \u003c/header\u003e\n\n\n\n\n\u003ch1 id=\"历史尝试\"\u003e历史尝试\u003c/h1\u003e\n\u003cp\u003e入手 NAS 已经近 5 年的时间了，最初只是用来挂 PT 下载，然后在各种设备上通过 SMB 共享播放上面的视频。后面也尝试在利用 Plex 搭建家庭影音中心，但由于 Plex 的高级功能需要付费也就作罢。今年搬家后整体对各种硬件做了升级，换了软路由，做了基于 AC+AP 的全屋 WiFi，NAS 换了更大的硬盘，客厅和卧室各安装了一个投影机，入了 Apple TV 4K 和 Chromecast with Google TV 4K 两个盒子。购买 Apple TV 时买了有 Infuse 的套餐，果然没有花钱的不是，Infuse 无论是从 UI 还是体验上都算优秀，但由于仅限于苹果生态，且可玩性较差，最终也只是沦为了 Apple TV 上的本地播放器。\u003c/p\u003e\n\u003cp\u003e秉着「付费虽美丽，免费更开心」的原则，最终选择了基于 Jellyfin 的方案。由于 NAS 的 CPU 性能并不高，为了不给 NAS 其他功能带来过多压力，同时考虑软路由性能过剩，因此决定将 Jellyfin 安装在软路由上，再将 NAS 的资源挂载到软路由来实现整体解决方案。\u003c/p\u003e\n\u003cp\u003e在做 Jellyfin 选型时，其吸引我的最大优点就是开源，同时各个平台的客户端也都在官方应用商店有上架，这极大的简化了客户端的安装流程。付费解决方案，例如：Plex，Emby（在 3.5.3 之后闭源），由于有更多资金的支持，肯定在一些方面会优于 Jellyfin。其他的免费解决方案，例如：NAS 自带的 Video Station，Kodi（大学时代就曾在电脑上安装过）等在不同方面也各有差异。关于不同解决方案的一些差异在此就不再做深入探究，有兴趣的同学可以自行 Google，不过也要注意很多文章时间会比较久了，与当下的实际情况会有部分出入。\u003c/p\u003e\n\u003ch1 id=\"硬件设备\"\u003e硬件设备\u003c/h1\u003e\n\u003ch2 id=\"服务端设备\"\u003e服务端设备\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e设备\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e系统\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eCPU\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e内存\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e用途\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e网络连接\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e位置\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e软路由\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eOpwnWrt\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eIntel Celeron N5105\u003cbr/\u003e2.0-2.9 GHz\u003cbr/\u003e4 核心 4 线程\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4GB\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e主路由\u003cbr/\u003e代理服务器\u003cbr/\u003e内网穿透服务器\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e有线 1000M\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e客厅\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eNAS\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eDSM 7\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eIntel Celeron J3355\u003cbr/\u003e2.0-2.5 GHz\u003cbr/\u003e2 核心 2 线程\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e6GB\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e共享存储\u003cbr/\u003ePT 下载\u003cbr/\u003e迅雷远程下载\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e有线 1000M\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e衣帽间\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNAS 通过有线网络与主路由直连，虽然主路由网口为 2.5G，但由于 NAS 网口仅为 1000M，而且又懒于把 NAS 上的双网口做链路聚合，因此实际通讯也就限制为 1000M，但对于家庭影音中心也基本够用了。主路由上游使用了运营商提供的光猫，虽然已经改了桥接模式，但由于运营商提供的光猫 LAN 口也是 1000M 的，因此外网也无法突破千兆限制，当然还是由于 10G EPON 的万兆光猫太贵，压制了我鼓捣的欲望。\u003c/p\u003e\n\u003cp\u003eNAS 自带的内存为 2G，后面加了一条 4G 的内存扩容到 6G，最初也是计划用 NAS 玩一玩 Docker 的。但碍于 J3355 这颗 CPU 性能一般，运行太多东西给 NAS 的基本功能会带来不小压力，我想这也是群辉官方并没有给 DS418play 这款 NAS 提供 Docker 应用的主要原因吧。软路由当时买了非裸机的丐版，但由于并没有用其做太多事情，空闲内存基本上还有 3.5G 左右，因此为了充分利用 N5105 这颗 CPU，最终决定将需要视频解码这类耗 CPU 的任务交给软路由了。不过买的这款软路由是被动散热，正常待机就干到 60 摄氏度左右了，CPU 占用上来了估计有望突破 100 摄氏度😂。\u003c/p\u003e\n\u003ch2 id=\"客户端设备\"\u003e客户端设备\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e设备\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e系统\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e用途\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e网络/视频连接\u003c/th\u003e\n\u003cth\u003e位置\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eApple TV 4K\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003etvOS 16\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e主电视盒子\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e有线 1000M\u003c/td\u003e\n\u003ctd\u003e客厅\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e明基 TK850\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e-\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e主投影机\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eHDMI 2.1\u003c/td\u003e\n\u003ctd\u003e客厅\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eChromecast with Google TV 4K\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAndroid 12 原生\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e次电视盒子\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e无线 WiFi 5\u003c/td\u003e\n\u003ctd\u003e主卧\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e小明 Q2 Pro\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAndroid 9 非原生\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e次投影机\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e无线 WiFi 5\u003cbr/\u003eHDMI 2.1\u003c/td\u003e\n\u003ctd\u003e主卧\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ePC\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eWindows 11\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e台式机\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e有线 1000M\u003c/td\u003e\n\u003ctd\u003e主卧\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eMacbook Pro\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003emacOS 13\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e笔记本\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e无线 WiFi 5\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiPhone 13 Pro\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eiOS 16\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e主手机\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e无线 WiFi 6\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eGoogle Pixel 6 Pro\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAndroid 13 原生\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e备用手机\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e无线 WiFi 6\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiPad Pro\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eiPadOS 16\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e平板电脑\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e无线 WiFi 6\u003c/td\u003e\n\u003ctd\u003e-\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e所有客户端通过 H3C 的 1000M AC+AP 采用有线或无线间接连接到主路由。综上所述，家里各种内外部线路就都是 1000M 的理论带宽了。\u003c/p\u003e\n\u003cp\u003e客户端设备几乎覆盖了所有常用的系统，Jellyfin 在各个系统上均提供了客户端，而且可以在官方商店直接安装，这也是最终确认选择 Jellyfin 的关键一点。毕竟服务端搞得再好，客户端安装费劲的不行也是很痛苦的，尤其是在苹果生态中，官方商店的支持会让你泪大喜奔的。\u003c/p\u003e\n\u003ch1 id=\"nas-准备\"\u003eNAS 准备\u003c/h1\u003e\n\u003cp\u003e由于 Jellyfin 安装在软路由上，因此需要将 NAS 上的媒体文件夹通过 NFS 映射到软路由上，首先需要在 NAS 上配置客户端。进入 NAS，打开 \u003ccode\u003e控制面板\u003c/code\u003e，进入 \u003ccode\u003e文件服务\u003c/code\u003e，确保 \u003ccode\u003e启用 NFS 服务\u003c/code\u003e，最大 NFS 协议选择 \u003ccode\u003eNFSv4.1\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/nas-file-services-nfs.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e进入 \u003ccode\u003e共享文件夹\u003c/code\u003e，选择需要通过 NFS 共享的文件夹：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/nas-shared-folders.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e编辑\u003c/code\u003e 进入共享文件夹设置：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/nas-shared-folder-nfs.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e在 \u003ccode\u003eNFS 权限\u003c/code\u003e 标签页单击 \u003ccode\u003e新增\u003c/code\u003e 添加新客户端：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/nas-shared-folder-nfs-new-client.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e相关配置如图所示，其中 \u003ccode\u003e服务器名称或 IP 地址\u003c/code\u003e 为客户端 IP 地址（即软路由 IP 地址）。依次为所有需要共享的文件夹进行相同配置。\u003c/p\u003e\n\u003ch1 id=\"openwrt-准备\"\u003eOpenWrt 准备\u003c/h1\u003e\n\u003cp\u003e软路由自带了 128G 的 NVME 固态硬盘，系统采用了 eSir 编译的高大全版本。为了后续安装扩展包和 Docker，对硬盘重新进行分区。\u003c/p\u003e\n\u003cp\u003e通过 \u003ccode\u003e系统 \u0026gt; TTYD终端\u003c/code\u003e 在输入用户名（\u003ccode\u003eroot\u003c/code\u003e）和密码后可以进入软路由命令行，输入 \u003ccode\u003efdisk -l\u003c/code\u003e 可以查看所有可用块设备的信息：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDisk /dev/nvme0n1: 119.24 GiB, 128035676160 bytes, 250069680 sectors\n...\n\nDevice               Start       End   Sectors  Size Type\n/dev/nvme0n1p1         512     33279     32768   16M Linux filesystem\n/dev/nvme0n1p2       33280   1057279   1024000  500M Linux filesystem\n/dev/nvme0n1p128        34       511       478  239K BIOS boot\n\nPartition table entries are not in disk order.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e输入 \u003ccode\u003ecfdisk /dev/nvme0n1\u003c/code\u003e 进入分区工具：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/opwnert-cfdisk-01.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e使用上下键选择分区，左右键选择要操作的选项。选中 \u003ccode\u003eFree space\u003c/code\u003e，使用 \u003ccode\u003e[New]\u003c/code\u003e 选项建立新的分区，输入分区大小，例如：\u003ccode\u003e32G\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/opwnert-cfdisk-02.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e本例计划为 overlay 分配 32G，为 docker 分配 32G，剩余全部分配给 data：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/opwnert-cfdisk-03.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003e[Write]\u003c/code\u003e 选项将结果写入分区表，并在确认处输入 \u003ccode\u003eyes\u003c/code\u003e 提交：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/opwnert-cfdisk-04.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e提交完毕后使用 \u003ccode\u003e[Quit]\u003c/code\u003e 选项退出分区工具。再次输入 \u003ccode\u003efdisk -l\u003c/code\u003e 可以查看所有可用块设备的信息：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDisk /dev/nvme0n1: 119.24 GiB, 128035676160 bytes, 250069680 sectors\n...\n\nDevice               Start       End   Sectors  Size Type\n/dev/nvme0n1p1         512     33279     32768   16M Linux filesystem\n/dev/nvme0n1p2       33280   1057279   1024000  500M Linux filesystem\n/dev/nvme0n1p3     1058816  68167679  67108864   32G Linux filesystem\n/dev/nvme0n1p4    68167680 135276543  67108864   32G Linux filesystem\n/dev/nvme0n1p5   135276544 250068991 114792448 54.7G Linux filesystem\n/dev/nvme0n1p128        34       511       478  239K BIOS boot\n\nPartition table entries are not in disk order.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e分别对新分区进行格式化：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003emkfs.ext4 /dev/nvme0n1p3\nmkfs.ext4 /dev/nvme0n1p4\nmkfs.ext4 /dev/nvme0n1p5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e将 \u003ccode\u003e/dev/nvme0n1p3\u003c/code\u003e 挂载至 \u003ccode\u003e/mnt/nvme0n1p3\u003c/code\u003e：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003emount /dev/nvme0n1p3 /mnt/nvme0n1p3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e将 \u003ccode\u003e/overlay\u003c/code\u003e 分区数据全部复制到 \u003ccode\u003e/mnt/nvme0n1p3\u003c/code\u003e 中：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003ecp -R /overlay/* /mnt/nvme0n1p3/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e以上完成后，进入 OpenWrt 管理后台，在 \u003ccode\u003e系统 \u0026gt; 挂载点\u003c/code\u003e 菜单的 \u003ccode\u003e挂载点\u003c/code\u003e 处，单击 \u003ccode\u003e添加\u003c/code\u003e 按钮添加挂载点，将 \u003ccode\u003e/dev/nvme0n1p3\u003c/code\u003e 挂载为 \u003ccode\u003e/overlay\u003c/code\u003e，将 \u003ccode\u003e/dev/nvme0n1p4\u003c/code\u003e 挂载为 \u003ccode\u003e/opt\u003c/code\u003e，将 \u003ccode\u003e/dev/nvme0n1p5\u003c/code\u003e 挂载为 \u003ccode\u003e/data\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/mount-overlay.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/mount-docker.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/mount-data.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e单击 \u003ccode\u003e保存\u0026amp;应用\u003c/code\u003e 后重启路由器，重启完毕后在命令行输入 \u003ccode\u003edf -h\u003c/code\u003e 可以看出所有分区均成功挂载：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFilesystem                Size      Used Available Use% Mounted on\n...\n/dev/nvme0n1p3           31.2G     87.9M     26.6G   0% /overlay\noverlayfs:/overlay       31.2G     87.9M     26.6G   0% /\n/dev/nvme0n1p4           31.2G    356.0K     29.6G   0% /opt\n/dev/nvme0n1p5           53.6G     24.0K     50.8G   0% /data\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e在 \u003ccode\u003e/data\u003c/code\u003e 目录中创建用于 Jellyfin 的目录：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003emkdir /data/docker\nmkdir /data/docker/jellyfin\nmkdir /data/docker/jellyfin/config\nmkdir /data/docker/jellyfin/config/fonts\nmkdir /data/docker/jellyfin/cache\nmkdir /data/docker/jellyfin/media\nmkdir /data/docker/jellyfin/media/nas\nmkdir /data/docker/jellyfin/media/nas/disk1\nmkdir /data/docker/jellyfin/media/nas/disk2\nmkdir /data/docker/jellyfin/media/nas/disk3\nmkdir /data/docker/jellyfin/media/nas/disk4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e由于在 Docker 中需要使用 \u003ccode\u003e1000:1000\u003c/code\u003e 作为 UID 和 GID 运行 Jellyfin，需要将 \u003ccode\u003ejellyfin\u003c/code\u003e 目录修改为对应所有者：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echown -R 1000:1000 /data/docker/jellyfin/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e进入命令行，输入如下命令将 NAS 上配置好的共享文件夹挂载到 Jellyfin 的相关目录：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003emount.nfs -w 192.168.5.10:/volume1/Disk1 /data/docker/jellyfin/media/nas/disk1 -o nolock\nmount.nfs -w 192.168.5.10:/volume2/Disk2 /data/docker/jellyfin/media/nas/disk2 -o nolock\nmount.nfs -w 192.168.5.10:/volume3/Disk3 /data/docker/jellyfin/media/nas/disk3 -o nolock\nmount.nfs -w 192.168.5.10:/volume4/Disk4 /data/docker/jellyfin/media/nas/disk4 -o nolock\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e为了保证每次启动软路由时能够自动挂载，请将上述内容添加至 \u003ccode\u003e系统 \u0026gt; 启动项\u003c/code\u003e 菜单下的 \u003ccode\u003e本地启动脚本\u003c/code\u003e 文本框的 \u003ccode\u003eexit 0\u003c/code\u003e 之前：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/startup-script.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003ch1 id=\"jellyfin-部署\"\u003eJellyfin 部署\u003c/h1\u003e\n\u003cp\u003e在 OpenWrt 上安装 Jellyfin 需要使用 Docker 进行部署。首先在 \u003ccode\u003eDocker \u0026gt; 镜像\u003c/code\u003e 菜单的 \u003ccode\u003e拉取镜像\u003c/code\u003e 处填写 \u003ccode\u003ejellyfin/jellyfin:latest\u003c/code\u003e，然后单击 \u003ccode\u003e拉取\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/docker-pull.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cp\u003e拉取完毕后即可在 \u003ccode\u003e镜像概览\u003c/code\u003e 处查看已下载的镜像：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/docker-images.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e进入软路由命令行，输入 \u003ccode\u003els /dev/dri\u003c/code\u003e，如果输出如下则表示 CPU 支持硬件加速：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecard0       renderD128\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e为了确保在 Docker 中其他用户可以使用该设备，输入如下命令设置设备权限：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003echmod 777 /dev/dri/*\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e通过 \u003ccode\u003eDocker \u0026gt; 容器\u003c/code\u003e 菜单，单击 \u003ccode\u003e添加\u003c/code\u003e 按钮添加容器。单击 \u003ccode\u003e命令行\u003c/code\u003e 并复制如下内容，单击 \u003ccode\u003e提交\u003c/code\u003e 解析命令行：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker run -d \\\n --name=jellyfin \\\n --hostname=jellyfin \\\n --pull=always \\\n --privileged \\\n --volume /data/docker/jellyfin/config:/config \\\n --volume /data/docker/jellyfin/cache:/cache \\\n --volume /data/docker/jellyfin/media:/media \\\n --user 1000:1000 \\\n --net=host \\\n --restart=unless-stopped \\\n --device /dev/dri/renderD128:/dev/dri/renderD128 \\\n --device /dev/dri/card0:/dev/dri/card0 \\\n jellyfin/jellyfin\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e相关参数说明如下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e参数\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–name=jellyfin\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e镜像名称\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–hostname=jellyfin\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e主机名称\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–pull=always\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e运行前总是先拉取镜像\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–privileged\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e特权模式\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–volume /data/docker/jellyfin/config:/config\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e配置文件目录\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–volume /data/docker/jellyfin/cache:/cache\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e缓存文件目录\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–volume /data/docker/jellyfin/media:/media\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e媒体文件目录\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–user 1000:1000\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e运行时用户和用户组\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–net=host\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e网络类型：同宿主机相同网络\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–restart=unless-stopped\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e重启策略：在容器退出时总是重启容器\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–device /dev/dri/renderD128:/dev/dri/renderD128\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e硬件加速设备\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e–device /dev/dri/card0:/dev/dri/card0\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e硬件加速设备\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e如果 \u003ccode\u003e总是先拉取镜像\u003c/code\u003e 未成功自动勾选，可以手动勾选确保运行前拉取最新镜像。单击 \u003ccode\u003e提交\u003c/code\u003e 创建容器。创建完毕后容器列表即出现 Jellyfin 容器：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/docker-container-created.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e勾选 Jellyfin 容器，单击 \u003ccode\u003e启动\u003c/code\u003e 按钮启动容器：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/docker-container-running.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击容器，选择 \u003ccode\u003e控制台\u003c/code\u003e，以 \u003ccode\u003eroot\u003c/code\u003e 用户登录控制台：\u003c/p\u003e\n\u003cp\u003e在控制台中输入如下命令安装中文字体：\u003c/p\u003e\n\u003cfigure\u003e\n  \u003cimg class=\"lazyload\" data-src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/docker-cmd.png\" data-large-max-width=\"60%\" data-middle-max-width=\"80%\" data-small-max-width=\"100%\"/\u003e\n  \n\u003c/figure\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eapt update\napt install fonts-noto-cjk-extra\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e以防止在 Jellyfin 中出现中文无法正常显示的问题。\u003c/p\u003e\n\u003ch1 id=\"jellyfin-配置\"\u003eJellyfin 配置\u003c/h1\u003e\n\u003cp\u003e通过 \u003ccode\u003ehttp://192.168.5.1:8096\u003c/code\u003e 进入 Jellyfin，\u003ccode\u003e首选显示语言\u003c/code\u003e 选择 \u003ccode\u003e汉语（简化字）\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-language.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e下一个\u003c/code\u003e，根据个人情况设置 \u003ccode\u003e用户名\u003c/code\u003e 和 \u003ccode\u003e密码\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-username-password.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e下一个\u003c/code\u003e，设置媒体库：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-media-library.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e+\u003c/code\u003e 添加媒体库：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-media-library-movie.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e根据实际情况进行配置：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e选择 \u003ccode\u003e内容类型\u003c/code\u003e 并填写 \u003ccode\u003e显示名称\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003e文件夹\u003c/code\u003e 中添加所有包含当前类型媒体的文件夹。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e首选下载语言\u003c/code\u003e 选择 \u003ccode\u003eChinese\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e国家/地区\u003c/code\u003e 选择 \u003ccode\u003ePeople\u0026#39;s Republic of China\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e取消勾选 \u003ccode\u003e元数据下载器\u003c/code\u003e 和 \u003ccode\u003e图片获取程序\u003c/code\u003e 中所有选项。\u003c/li\u003e\n\u003cli\u003e其他设置暂时保持默认。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e单击 \u003ccode\u003e下一个\u003c/code\u003e，设置首选元数据语言：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-meta-language.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e下一个\u003c/code\u003e，设置远程访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-remote-access.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e下一个\u003c/code\u003e，完成设置：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-setup-finish.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击 \u003ccode\u003e完成\u003c/code\u003e 进入登录界面：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-login.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e进入系统后，单击左侧菜单按钮，选择 \u003ccode\u003e管理 \u0026gt; 控制台\u003c/code\u003e 菜单。进入 \u003ccode\u003e控制台\u003c/code\u003e 后，选择 \u003ccode\u003e服务器 \u0026gt; 播放\u003c/code\u003e 菜单。将 \u003ccode\u003e转码\u003c/code\u003e 中的 \u003ccode\u003e硬件加速\u003c/code\u003e 选择为 \u003ccode\u003eVideo Acceleration API (VAAPI)\u003c/code\u003e，注意确认 \u003ccode\u003eVA-API 设备\u003c/code\u003e 是否为 \u003ccode\u003e/dev/dri/renderD128\u003c/code\u003e，并在 \u003ccode\u003e启用硬件解码\u003c/code\u003e 勾选所有媒体类型。注意确认 \u003ccode\u003e硬件编码选项\u003c/code\u003e 中的 \u003ccode\u003e启用硬件编码\u003c/code\u003e 选项已勾选。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-hardware-acceleration.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003clink rel=\"stylesheet\" href=\"/css/admonition.css\"/\u003e\n\u003cdiv class=\"admonition admonition-tip  kai\"\u003e\n  \u003cp class=\"admonition-title\"\u003e提示\u003c/p\u003e\n  \u003cdiv class=\"admonition-content\"\u003e根据\u003ca href=\"https://jellyfin.org/docs/general/administration/hardware-acceleration/#intel-gen9-and-gen11-igpus\"\u003e官方文档\u003c/a\u003e说明，针对部分 CPU（例如：N5105）需要勾选 \u003ccode\u003e启用低电压模式的 Intel H.264 硬件编码器\u003c/code\u003e以确保硬件加速正常工作。\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e在 \u003ccode\u003e服务器 \u0026gt; 播放\u003c/code\u003e 菜单中，勾选 \u003ccode\u003e启用备用字体\u003c/code\u003e，将 \u003ccode\u003e备用字体文件路径\u003c/code\u003e 设置为 \u003ccode\u003e/config/fonts\u003c/code\u003e。在 \u003ccode\u003e/config/fonts\u003c/code\u003e 目录中放置相关字体以确保 ASS/SSA 字幕可以正常渲染。\u003c/p\u003e\n\u003ch1 id=\"tmm-刮削\"\u003eTMM 刮削\u003c/h1\u003e\n\u003cp\u003etinyMediaManager 是一个用 Java/Swing 编写的媒体管理工具，它可以为多种媒体服务器提供元数据。TMM 提供了多个平台的客户端，但为了多客户端刮削时数据共享，本例也使用 Docker 进行安装。\u003c/p\u003e\n\u003cp\u003e在软路由 \u003ccode\u003e/data\u003c/code\u003e 目录中创建用于 TMM 的目录：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003emkdir /data/docker/tinymediamanager\nmkdir /data/docker/tinymediamanager/config\nmkdir /data/docker/tinymediamanager/media\nmkdir /data/docker/tinymediamanager/media/nas\nmkdir /data/docker/tinymediamanager/media/nas/disk1\nmkdir /data/docker/tinymediamanager/media/nas/disk2\nmkdir /data/docker/tinymediamanager/media/nas/disk3\nmkdir /data/docker/tinymediamanager/media/nas/disk4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e进入命令行，输入如下命令将 NAS 上配置好的共享文件夹挂载到 TMM 的相关目录：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003emount.nfs -w 192.168.5.10:/volume1/Disk1 /data/docker/tinymediamanager/media/nas/disk1 -o nolock\nmount.nfs -w 192.168.5.10:/volume2/Disk2 /data/docker/tinymediamanager/media/nas/disk2 -o nolock\nmount.nfs -w 192.168.5.10:/volume3/Disk3 /data/docker/tinymediamanager/media/nas/disk3 -o nolock\nmount.nfs -w 192.168.5.10:/volume4/Disk4 /data/docker/tinymediamanager/media/nas/disk4 -o nolock\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e为了保证每次启动软路由时能够自动挂载，请将上述内容添加至 \u003ccode\u003e系统 \u0026gt; 启动项\u003c/code\u003e 菜单下的 \u003ccode\u003e本地启动脚本\u003c/code\u003e 文本框的 \u003ccode\u003eexit 0\u003c/code\u003e 之前。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003eDocker \u0026gt; 镜像\u003c/code\u003e 菜单的 \u003ccode\u003e拉取镜像\u003c/code\u003e 处填写 \u003ccode\u003eromancin/tinymediamanager:latest-v4\u003c/code\u003e，然后单击 \u003ccode\u003e拉取\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e通过 \u003ccode\u003eDocker \u0026gt; 容器\u003c/code\u003e 菜单，单击 \u003ccode\u003e添加\u003c/code\u003e 按钮添加容器。单击 \u003ccode\u003e命令行\u003c/code\u003e 并复制如下内容，单击 \u003ccode\u003e提交\u003c/code\u003e 解析命令行：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker run -d \\\n --name=tinymediamanager \\\n --hostname=tinymediamanager \\\n --pull=always \\\n --privileged \\\n --volume /data/docker/tinymediamanager/config:/config \\\n --volume /data/docker/tinymediamanager/media:/media \\\n --user root:root \\\n --env ENABLE_CJK_FONT=1 \\\n --publish 5800:5800 \\\n --restart=unless-stopped \\\n romancin/tinymediamanager:latest-v4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e如果 \u003ccode\u003e总是先拉取镜像\u003c/code\u003e 未成功自动勾选，可以手动勾选确保运行前拉取最新镜像。单击 \u003ccode\u003e提交\u003c/code\u003e 创建容器。勾选 TMM 容器，单击 \u003ccode\u003e启动\u003c/code\u003e 按钮启动容器。\u003c/p\u003e\n\u003cp\u003e安装完毕后重启容器。通过 \u003ccode\u003ehttp://192.168.5.1:5800\u003c/code\u003e 进入 TMM：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/tmm-init.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e根据向导进行配置，设置中文界面后需要重启容器生效。\u003c/p\u003e\n\u003cdiv class=\"admonition admonition-warning  kai\"\u003e\n  \u003cp class=\"admonition-title\"\u003e警告\u003c/p\u003e\n  \u003cdiv class=\"admonition-content\"\u003ePT 用户注意，\u003cstrong\u003e不要\u003c/strong\u003e开启任何自动重命名，\u003cstrong\u003e不要\u003c/strong\u003e将 NFO 保存为与媒体文件相同的文件名，避免覆盖原始内容从而导致做种错误。\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e根据个人喜好配置好 TMM 后即可对媒体文件进行刮削了，在此不再详细展开刮削过程。由于原始文件的命名可能导致自动获取的信息有误，因此建议对每一个媒体文件刮削结果进行人工复核。\u003c/p\u003e\n\u003cdiv class=\"admonition admonition-tip  kai\"\u003e\n  \u003cp class=\"admonition-title\"\u003e提示\u003c/p\u003e\n  \u003cdiv class=\"admonition-content\"\u003eDocker 版本 TMM 不支持输入中文，在通过 \u003ccode\u003eClipboard\u003c/code\u003e 内外传输剪切板时中文也会出现乱码，且目前暂时无法修复。\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003e4.0 之后版本的 TMM 免费版不再支持自动下载字幕，由于 TMM 采用 \u003ca href=\"https://www.opensubtitles.org/\"\u003eOpen Subtitles\u003c/a\u003e，对于有需要双语字幕和特效字幕的同学并不友好。建议还是自行手动下载字幕并放置在媒体文件中，在此提供几个不错的字幕下载网站：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e伪射手：\u003ca href=\"https://assrt.net\"\u003ehttps://assrt.net\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSubHD：\u003ca href=\"https://subhd.tv/sub/new\"\u003ehttps://subhd.tv/sub/new\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e字幕组（需注册）：\u003ca href=\"https://www.yysub.net/subtitle\"\u003ehttps://www.yysub.net/subtitle\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"测试\"\u003e测试\u003c/h1\u003e\n\u003cp\u003e经过 TMM 刮削后，Jellyfin 即可自动识别元数据，示例电影的详细信息如下如所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-movie-info.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击播放后，通过播放信息查看，已经可以使用 Jellyfin 实现转码在线播放：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2023-01-24-build-home-media-center-with-jellyfin-on-openwrt/jellyfin-movie-play.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e测试完成后即可在各个终端安装相应的的客户端：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eiPhone \u0026amp; iPad \u0026amp; Apple TV：建议使用 \u003ca href=\"https://github.com/jellyfin/swiftfin\"\u003eSwiftfin\u003c/a\u003e，官方应用，原生界面体验，\u003ca href=\"https://apps.apple.com/zh/app/swiftfin/id1604098728\"\u003e应用商店\u003c/a\u003e直接下载安装。\u003c/li\u003e\n\u003cli\u003eAndroid 手机：建议使用 \u003ca href=\"https://github.com/jarnedemeulemeester/findroid\"\u003eFindroid\u003c/a\u003e，第三方应用，原生界面体验，\u003ca href=\"https://play.google.com/store/apps/details?id=dev.jdtech.jellyfin\"\u003e应用商店\u003c/a\u003e直接下载安装，非原生 Android 系统可以在 \u003ca href=\"https://github.com/jarnedemeulemeester/findroid/releases\"\u003eGithub 页面\u003c/a\u003e下载离线 apk 文件安装。\u003c/li\u003e\n\u003cli\u003eAndroid TV：建议使用 \u003ca href=\"https://github.com/jellyfin/jellyfin-androidtv\"\u003eJellyfin for Android TV\u003c/a\u003e，官方应用，\u003ca href=\"https://play.google.com/store/apps/details?id=org.jellyfin.androidtv\"\u003e应用商店\u003c/a\u003e直接下载安装，非原生 Android 系统可以在 \u003ca href=\"https://github.com/jellyfin/jellyfin-androidtv/releases\"\u003eGithub 页面\u003c/a\u003e下载离线 apk 文件安装。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e可以在\u003ca href=\"https://jellyfin.org/downloads/clients/all/\"\u003e官方客页面\u003c/a\u003e探索更多官方和第三方客户端。在电视盒子等仅用于播放视频的设备上，可以尝试启用 \u003ca href=\"https://jellyfin.org/docs/general/server/transcoding#types-of-transcoding\"\u003eDirect Play\u003c/a\u003e，当然也需要根据电视盒子的特性进行调整，避免部分格式的视频和音频无法正常解析。\u003c/p\u003e\n\n\n\n\n\n\u003cdiv class=\"donate\"\u003e\n  \u003cdiv class=\"donate-header\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"donate-slug\" id=\"donate-slug\"\u003ebuild-home-media-center-with-jellyfin-on-openwrt\u003c/div\u003e\n  \u003cbutton class=\"donate-button\"\u003e赞 赏\u003c/button\u003e\n  \u003cdiv class=\"donate-footer\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"donate-modal-wrapper\"\u003e\n  \u003cdiv class=\"donate-modal\"\u003e\n    \u003cdiv class=\"donate-box\"\u003e\n      \u003cdiv class=\"donate-box-content\"\u003e\n        \u003cdiv class=\"donate-box-content-inner\"\u003e\n          \u003cdiv class=\"donate-box-header\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n          \u003cdiv class=\"donate-box-body\"\u003e\n            \u003cdiv class=\"donate-box-money\"\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-2\" data-v=\"2\" data-unchecked=\"￥ 2\" data-checked=\"2 元\"\u003e￥ 2\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-5\" data-v=\"5\" data-unchecked=\"￥ 5\" data-checked=\"5 元\"\u003e￥ 5\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-10\" data-v=\"10\" data-unchecked=\"￥ 10\" data-checked=\"10 元\"\u003e￥ 10\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-50\" data-v=\"50\" data-unchecked=\"￥ 50\" data-checked=\"50 元\"\u003e￥ 50\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-100\" data-v=\"100\" data-unchecked=\"￥ 100\" data-checked=\"100 元\"\u003e￥ 100\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-custom\" data-v=\"custom\" data-unchecked=\"任意金额\" data-checked=\"任意金额\"\u003e任意金额\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-qrcode\" id=\"donate-box-pay-qrcode\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"donate-box-footer\"\u003e\n            \u003cdiv class=\"donate-box-pay-method donate-box-pay-method-checked\" data-v=\"wechat-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-wechat-pay\" src=\"\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay-method\" data-v=\"alipay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-alipay\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"button\" class=\"donate-box-close-button\"\u003e\n      \u003csvg class=\"donate-box-close-button-icon\" fill=\"#fff\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"\u003e\u003cpath d=\"M13.486 12l5.208-5.207a1.048 1.048 0 0 0-.006-1.483 1.046 1.046 0 0 0-1.482-.005L12 10.514 6.793 5.305a1.048 1.048 0 0 0-1.483.005 1.046 1.046 0 0 0-.005 1.483L10.514 12l-5.208 5.207a1.048 1.048 0 0 0 .006 1.483 1.046 1.046 0 0 0 1.482.005L12 13.486l5.207 5.208a1.048 1.048 0 0 0 1.483-.006 1.046 1.046 0 0 0 .005-1.482L13.486 12z\" fill-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/svg\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\" src=\"/js/donate.js\"\u003e\u003c/script\u003e\n\n\n  \u003cfooter\u003e\n  \n\u003cnav class=\"post-nav\"\u003e\n  \u003cspan class=\"nav-prev\"\u003e← \u003ca href=\"/cn/2022/09/selfish-and-greedy/\"\u003e自私和贪婪 (Selfish and Greedy)\u003c/a\u003e\u003c/span\u003e\n  \u003cspan class=\"nav-next\"\u003e\u003ca href=\"/cn/2023/03/literate-programming-and-reproducible-research/\"\u003e文学编程和可重复性研究 (Literate Programming and Reproducible Research)\u003c/a\u003e →\u003c/span\u003e\n\u003c/nav\u003e\n\n\n\n\n\u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"8302038603\"\u003e\u003c/ins\u003e\n\u003cscript\u003e\n  (adsbygoogle = window.adsbygoogle || []).push({});\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toggle-theme.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"/js/no-highlight.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/math-code.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/heading-anchor.js\"\u003e\u003c/script\u003e\n\n\n\n\u003csection class=\"comments\"\u003e\n\u003cscript src=\"https://giscus.app/client.js\" data-repo=\"leovan/leovan.me\" data-repo-id=\"MDEwOlJlcG9zaXRvcnkxMTMxOTY0Mjc=\" data-category=\"Comments\" data-category-id=\"DIC_kwDOBr89i84CT-R7\" data-mapping=\"pathname\" data-strict=\"1\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"zh-CN\" data-loading=\"lazy\" crossorigin=\"anonymous\" defer=\"\"\u003e\n\u003c/script\u003e\n\u003c/section\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/clipboard@2.0.11/dist/clipboard.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  (function() {\n    if (!self.Prism) {\n      return;\n    }\n\n    \n    Prism.languages.dos = Prism.languages.powershell;\n    Prism.languages.gremlin = Prism.languages.groovy;\n\n    let languages = {\n      'r': 'R', 'python': 'Python', 'xml': 'XML', 'html': 'HTML',\n      'yaml': 'YAML', 'latex': 'LaTeX', 'tex': 'TeX',\n      'powershell': 'PowerShell', 'javascript': 'JavaScript',\n      'dos': 'DOS', 'qml': 'QML', 'json': 'JSON', 'bash': 'Bash',\n      'text': 'Text', 'txt': 'Text', 'sparql': 'SPARQL',\n      'gremlin': 'Gremlin', 'cypher': 'Cypher', 'ngql': 'nGQL',\n      'shell': 'Shell', 'sql': 'SQL', 'apacheconf': 'Apache Configuration', 'c': 'C', 'css': 'CSS'\n    };\n\n    Prism.hooks.add('before-highlight', function(env) {\n      if (env.language !== 'plain') {\n        let language = languages[env.language] || env.language;\n        env.element.setAttribute('data-language', language);\n      }\n    });\n\n    \n    let ClipboardJS = window.ClipboardJS || undefined;\n\n    Prism.plugins.toolbar.registerButton('copy-to-clipboard', function(env) {\n      let linkCopy = document.createElement('button');\n      linkCopy.classList.add('prism-button-copy');\n\n      registerClipboard();\n\n      return linkCopy;\n\n      function registerClipboard() {\n        let clip = new ClipboardJS(linkCopy, {\n          'text': function () {\n            return env.code;\n          }\n        });\n\n        clip.on('success', function() {\n          linkCopy.classList.add('prism-button-copy-success');\n          resetText();\n        });\n        clip.on('error', function () {\n          linkCopy.classList.add('prism-button-copy-error');\n          resetText();\n        });\n      }\n\n      function resetText() {\n        setTimeout(function () {\n          linkCopy.classList.remove('prism-button-copy-success');\n          linkCopy.classList.remove('prism-button-copy-error');\n        }, 1600);\n      }\n    });\n  })();\n\u003c/script\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cscript async=\"\" src=\"/js/center-img.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/right-quote.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/external-link.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/alt-title.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/figure.js\"\u003e\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/vanilla-back-to-top@latest/dist/vanilla-back-to-top.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\naddBackToTop({\n  diameter: 48\n});\n\u003c/script\u003e\n\n  \u003chr/\u003e\n  \u003cdiv class=\"copyright no-border-bottom\"\u003e\n    \u003cdiv class=\"copyright-author-year\"\u003e\n      \u003cspan\u003eCopyright © 2017-2024 \u003ca href=\"/\"\u003e范叶亮 | Leo Van\u003c/a\u003e\u003c/span\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n  \u003c/footer\u003e\n  \u003c/article\u003e",
  "Date": "2023-01-24T00:00:00Z",
  "Author": "范叶亮"
}