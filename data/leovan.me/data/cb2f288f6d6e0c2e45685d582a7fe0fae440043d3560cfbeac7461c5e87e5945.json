{
  "Source": "leovan.me",
  "Title": "基于 PyQt5/PySide2 和 QML 的跨平台 GUI 程序开发",
  "Link": "https://leovan.me/cn/2018/05/cross-platform-gui-application-based-on-pyqt/",
  "Content": "\u003carticle class=\"main\"\u003e\n    \u003cheader class=\"content-title\"\u003e\n    \n\u003ch1 class=\"title\"\u003e\n  \n  基于 PyQt5/PySide2 和 QML 的跨平台 GUI 程序开发\n  \n\u003c/h1\u003e\n\n\n\n\n\n\n\n\u003ch2 class=\"author-date\"\u003e范叶亮 / \n2018-05-27\u003c/h2\u003e\n\n\n\n\u003ch3 class=\"post-meta\"\u003e\n\n\n\u003cstrong\u003e分类: \u003c/strong\u003e\n\u003ca href=\"/categories/%E7%BC%96%E7%A8%8B\"\u003e编程\u003c/a\u003e\n\n\n\n\n/\n\n\n\n\n\u003cstrong\u003e标签: \u003c/strong\u003e\n\u003cspan\u003eQt\u003c/span\u003e, \u003cspan\u003ePyQt\u003c/span\u003e, \u003cspan\u003ePyQt5\u003c/span\u003e, \u003cspan\u003ePySide2\u003c/span\u003e, \u003cspan\u003eQML\u003c/span\u003e, \u003cspan\u003eGUI\u003c/span\u003e, \u003cspan\u003eCross-Platform\u003c/span\u003e, \u003cspan\u003e跨平台\u003c/span\u003e\n\n\n\n\n/\n\n\n\u003cstrong\u003e字数: \u003c/strong\u003e\n4081\n\u003c/h3\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n    \n    \n    \u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"1261604535\"\u003e\u003c/ins\u003e\n    \u003cscript\u003e\n    (adsbygoogle = window.adsbygoogle || []).push({});\n    \u003c/script\u003e\n    \n    \n    \u003c/header\u003e\n\n\n\n\n\u003cp\u003e先聊聊写界面化程序的目的，在 B/S 结构软件盛行的今天，C/S 结构的软件还有人用吗？答案是肯定的，至少你想用 B/S 结构的软件的时候你得有个 C/S 结构的浏览器，对吧？这样说显得有点抬杠，当然，我认为最重要的还是“简单”，或者说“用户友好”。再 Geek 的人应该也喜欢有的时候偷懒，虽然我称不上 Geek，但也经常在黑框框中不用鼠标敲着各种代码，但是还是希望能够有些小工具只要能够点个几下就能帮忙干些事情的。至于对于更普通的用户而言，就应该更加希望能够用最“简单，清晰，明了”的方式“快速”的完成一项任务，有点像 Windows 用户把桌面上的快捷方式拖到回收站，然后和我说：好了，程序卸载了，我只能回答说：或许你该换个 MAC。\u003c/p\u003e\n\u003ch1 id=\"exclamation-更新-exclamation\"\u003e❗ 更新 ❗\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/leovan/SciHubEVA\"\u003eSciHubEVA\u003c/a\u003e 最新版本已经采用 \u003ca href=\"https://wiki.qt.io/Qt_for_Python\"\u003ePySide2\u003c/a\u003e 进行改写，Windows 版本安装包构建工作迁移至 \u003ca href=\"http://www.jrsoftware.org/isinfo.php\"\u003eInno Setup 6\u003c/a\u003e，更多变更请参见 \u003ca href=\"https://github.com/leovan/SciHubEVA/blob/master/CHANGELOG.md\"\u003eCHANGELOG\u003c/a\u003e。\u003c/p\u003e\n\u003ch1 id=\"跨平台-gui-程序开发方案选型\"\u003e跨平台 GUI 程序开发方案选型\u003c/h1\u003e\n\u003cp\u003e所以，写个带界面的小工具就是把你的想法更好的服务自己和别人的一个好途径，那么问题来了，对于我这做算法的种业余编程选手，怎么搞定界面化应用呢？虽然是业余编程选手，也也一路从 Logo，Basic，VB，C/C++，Java，R，Python 等等走来，当然很多都是从入门到放弃，总之对于同时需要兼顾一定美感的我，总结了几种跨平台界面化的解决方案。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"http://www.oracle.com/technetwork/java/javafx/overview/index.html\"\u003eJavaFX\u003c/a\u003e，基于 JVM，一次编译处处运行，配合 Material Design 风格的 \u003ca href=\"https://github.com/jfoenixadmin/JFoenix\"\u003eJFoenix\u003c/a\u003e，应该是能写出很漂亮的界面的。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.qt.io/\"\u003eQt\u003c/a\u003e，一次编写处处编译，配合 \u003ca href=\"http://doc.qt.io/qt-5/qtquick-index.html\"\u003eQt Quick\u003c/a\u003e 和 \u003ca href=\"http://doc.qt.io/qt-5/qtqml-index.html\"\u003eQML\u003c/a\u003e，可以把前后端分离。原生 C++ 语言支持，同时有 Python 绑定，对于 Python 比较熟的同学相对友好。界面风格上在较新的 Qt Quick 中也支持了 \u003ca href=\"http://doc.qt.io/Qt-5/qtquickcontrols2-material.html\"\u003eMaterial Design 风格\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://electronjs.org/\"\u003eElectron\u003c/a\u003e，使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，很多优秀的应用都是用这个来搞的，例如：\u003ca href=\"https://github.com/Microsoft/vscode\"\u003eVisual Studio Code\u003c/a\u003e，\u003ca href=\"https://github.com/zeit/hyper\"\u003eHyper\u003c/a\u003e 等。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我不认为这 3 种方法孰优孰劣，因为毕竟我们的目的是快速的搞定一个漂亮的小工具，因此到底选哪个完全取决于个人对相关技术的熟悉程度。因此，对于我这个搞算法的，最终选择了 Qt 的 Python 绑定 \u003ca href=\"https://riverbankcomputing.com/software/pyqt/intro\"\u003ePyQt\u003c/a\u003e。作为 R 的忠实用户，实在是没找到特别好的解决方案，只能找个借口说我们 R 就不是干这个用的……\u003c/p\u003e\n\u003ch1 id=\"环境配置\"\u003e环境配置\u003c/h1\u003e\n\u003cp\u003e当然选择 PyQt 也是有些个人的倾向在里面的，写 C++ 的年代就用过 Qt，对于原理多少有些了解。不过针对 PyQt，以及其与 Qt Quick 和 QML 的结合使用在后面开发时发现相关文档比较少，只能一步一步地趟雷了。毕竟要做跨平台的 GUI 程序开发，因此本文会针对 macOS 和 Windows 两个系统做相关说明，Linux 系统由于发行版本太多就不做说明了，大部分情况应该和 macOS 类似。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePython (开发语言)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePython 的版本选择了 3.5，因为在后面选择 3.6 时发现编译打包的时候会有些错误，没有细究，简单 Google 了此类问题，发现回退到 3.5 版本就没问题了，可能需要相关打包工具的更新才能有对 3.6 更好的支持。如果使用 Conda 建立虚拟环境，建议新建一个干净的 Python 3.5 的环境。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eQt 和 PyQt (界面化)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eQt 和 PyQt 均采用比较新的版本，版本号需大于 5.10。Qt 直接从官网下载安装即可，理论上不需要安装 Qt，因为 PyQt 中包含了运行时环境，安装 Qt 的目的是为了使用其可视化的 Qt Creator，设计界面的时候会比较方便。如果使用 Conda 建立 Python 虚拟环境，请使用 pip 安装 PyQt 的对应版本，Conda 中的 PyQt 的版本相对较低，一些新的 Qt 特性不支持。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePyInstaller (编译打包)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://www.pyinstaller.org/\"\u003ePyInstaller\u003c/a\u003e 是一个用于打包 Python 代码到一个本地化可执行程序的工具，安装其最新版本即可：\u003ccode\u003epip install PyInstaller\u003c/code\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eappdmg 和 NSIS (安装包制作)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/LinusU/node-appdmg\"\u003eappdmg\u003c/a\u003e 是 macOS 下一个用于制作 DMG 镜像的工具，使用前先安装 \u003ca href=\"https://nodejs.org\"\u003eNode.js\u003c/a\u003e，再通过 \u003ccode\u003enpm install -g appdmg\u003c/code\u003e 安装最新版即可。\u003ca href=\"https://sourceforge.net/projects/nsis/\"\u003eNSIS\u003c/a\u003e 是 Windows 下一个用于制作安装包的工具，NSIS 的一个问题是不支持 Unicode，因此对于包含中文字符的脚本需要以 GBK 编码格式保存。Unicode 版本的 NSIS 为 \u003ca href=\"http://www.scratchpaper.com\"\u003eUnicode NSIS\u003c/a\u003e，不过 Unicode NSIS 已经长时间未更新，因此本文依旧将 NSIS 作为安装包制作工具。\u003c/p\u003e\n\u003ch1 id=\"界面设计\"\u003e界面设计\u003c/h1\u003e\n\u003cp\u003e通过需求分析，整个工具最核心的两个界面为程序主界面和配置信息界面：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-05-27-cross-platform-gui-application-based-on-pyqt/app.png\" alt=\"APP\"/\u003e\u003c/p\u003e\n\u003cp\u003e程序主界面包含了待搜索的信息，保存的路径，相关的按钮和日志输出。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-05-27-cross-platform-gui-application-based-on-pyqt/preferences.png\" alt=\"PREFERENCES\"/\u003e\u003c/p\u003e\n\u003cp\u003e配置信息界面以配置项的分组不同分别包括通用，网络和代理等相关的配置信息更改。\u003c/p\u003e\n\u003cp\u003e整个界面设计采用了 Google 的 \u003ca href=\"https://material.io/design/\"\u003eMaterial Design\u003c/a\u003e 风格，尤其是在没有 UI 支援的情况下，使用这个风格至少不会让你的应用太丑。在 PyQt 中，可以通过 \u003ca href=\"http://doc.qt.io/Qt-5/qtquickcontrols2-styles.html\"\u003e多种方式\u003c/a\u003e 启用 Material Design 风格。\u003c/p\u003e\n\u003ch1 id=\"程序开发\"\u003e程序开发\u003c/h1\u003e\n\u003cp\u003e本文以 \u003ca href=\"https://github.com/leovan/SciHubEVA\"\u003eSci-Hub EVA\u003c/a\u003e 作为示例介绍 PyQt 的跨平台 GUI 程序开发。Sci-Hub EVA 是一个利用 Sci-Hub API 下载论文的界面化小工具，功能相对简单。首先介绍一下工程的目录：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-txt\"\u003edocs\\\nimages\\\ntranslations\\\nui\\\nBUILDING.md\nInfo.plist\nLICENSE\nREADME.md\nSciHubEVA.conf\nSciHubEVA.cpp\nSciHubEVA.dmg.json\nSciHubEVA.nsi\nSciHubEVA.pro\nSciHubEVA.qrc\nSciHubEVA.win.version\nrequirements.txt\nscihub_add_scihub_url.py\nscihub_api.py\nscihub_conf.py\nscihub_eva.py\nscihub_preferences.py\nscihub_resources.py\nscihub_utils.py\nversion_updater.py\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e其中，\u003ccode\u003edocs\u003c/code\u003e 目录为项目的一些文档，\u003ccode\u003eimages\u003c/code\u003e 目录为项目的相关图片文件，\u003ccode\u003etranslations\u003c/code\u003e 目录为项目的 i18n 翻译文件，\u003ccode\u003eui\u003c/code\u003e 目录为相关的界面文件 (QML 文件)，\u003ccode\u003eInfo.plist\u003c/code\u003e 为 macOS 程序信息文件，\u003ccode\u003eSciHubEVA.conf\u003c/code\u003e 为程序配置文件，\u003ccode\u003eSciHubEVA.cpp\u003c/code\u003e 为 Qt 生成的 C++ 主文件，\u003ccode\u003eSciHubEVA.dmg.json\u003c/code\u003e 为利用 appdmg 制作 DMG 镜像的配置文件，\u003ccode\u003eSciHubEVA.nsi\u003c/code\u003e 为利用 NSIS 制作 Windows 安装包的脚本文件，\u003ccode\u003eSciHubEVA.pro\u003c/code\u003e 为程序的 Qt 主项目文件，，\u003ccode\u003eSciHubEVA.qrc\u003c/code\u003e 为程序的资源文件，\u003ccode\u003eSciHubEVA.win.version\u003c/code\u003e 为打包 Windows 的版本信息文件，\u003ccode\u003erequirements.txt\u003c/code\u003e 为 Python 依赖包信息文件，\u003ccode\u003escihu_*.py\u003c/code\u003e 为程序实现相关 Python 代码，\u003ccode\u003eversion_updater.py\u003c/code\u003e 为版本更新的小工具。\u003c/p\u003e\n\u003cp\u003e下文中不会介绍具体的业务逻辑代码，而是对开发过程中的一些核心点和注意事项进行简单的介绍。\u003c/p\u003e\n\u003ch2 id=\"python-与-qml-通信\"\u003ePython 与 QML 通信\u003c/h2\u003e\n\u003cp\u003e首先，对于每一个界面 (QML 文件)，我们都有一个与之对应 Python 文件 (除非该页面没有具体的业务逻辑，例如：\u003ccode\u003eui\\SciHubEVAAbout.qml\u003c/code\u003e 为关于页面，\u003ccode\u003eui\\SciHubEVAMenuBar.qml\u003c/code\u003e 为菜单栏)，以主页面 (\u003ccode\u003eui\\SciHubEVA.qml\u003c/code\u003e 和 \u003ccode\u003escihub_eva.py\u003c/code\u003e) 为例，我们为每个界面创建一个类，同时该类集成自 Qt 的一个基类：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eclass SciHubEVA(QObject):\n    pass\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePython 代码同界面交互的核心是通过 Qt 的 \u003ca href=\"http://doc.qt.io/qt-5/signalsandslots.html\"\u003e\u003cstrong\u003e信号与槽\u003c/strong\u003e\u003c/a\u003e，同样在 PyQt 中也是利用 \u003ca href=\"http://pyqt.sourceforge.net/Docs/PyQt5/signals_slots.html\"\u003e相同的机制\u003c/a\u003e。简单的理解 PyQt 与 QML 的信号与槽，可以认为\u003cstrong\u003e信号\u003c/strong\u003e就是\u003cstrong\u003e函数的定义\u003c/strong\u003e，\u003cstrong\u003e槽\u003c/strong\u003e就是\u003cstrong\u003e函数的实现\u003c/strong\u003e。同时，信号和槽往往会位于不同的地方，例如：信号定义在 Python 中，则对应的槽会在 QML 中，反之亦然，当然这并不是一定的。两者通过 \u003ccode\u003econnect()\u003c/code\u003e 函数连接起来，当触发一个信号时，槽就会接受到信号传递的参数，并执行槽里面相应的逻辑。\u003c/p\u003e\n\u003ch2 id=\"i18n\"\u003ei18n\u003c/h2\u003e\n\u003cp\u003eQt 对于多语言支持比较完善，在 QML 中对于需要翻译的地方利用 \u003ccode\u003eqsTr()\u003c/code\u003e 函数处理待翻译的文本即可，例如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-qml\"\u003eLabel {\n    id: labelQuery\n    text: qsTr(\u0026#34;Query: \u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e在 Python 代码中，对于继承自 \u003ccode\u003eQObject\u003c/code\u003e 的类，可以利用基类中的 \u003ccode\u003etr()\u003c/code\u003e 函数处理待翻译的文本即可，例如：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eself.tr(\u0026#39;Saved PDF as: \u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e同时将具有待翻译文本的文件加入到 \u003ccode\u003eSciHubEVA.pro\u003c/code\u003e 的主工程文件中，用于后续翻译处理：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-text\"\u003elupdate_only {\nSOURCES += \\\n    ui/SciHubEVA.qml \\\n    ui/SciHubEVAAbout.qml \\\n    ui/SciHubEVAMenuBar.qml \\\n    ui/SciHubEVAPreferences.qml \\\n    ui/SciHubEVAAddSciHubURL.qml \\\n    scihub_api.py\n}\n\nTRANSLATIONS += \\\n    translations/SciHubEVA_zh_CN.ts\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e因为 Python 代码中也有需要翻译的文件，因此我们需要运行如下命令生成翻译的源文件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003elupdate SciHubEVA.pro\npylupdate5 SciHubEVA.pro\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e这样在 \u003ccode\u003etranslations\u003c/code\u003e 目录即可生成待翻译的源文件 (ts 文件)，利用 Qt 自带的 Liguist 可以对其进行编辑，翻译并保存后，利用如下命令生成翻译的结果文件：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash}\"\u003elrelease SciHubEVA.pro\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e在 \u003ccode\u003etranslations\u003c/code\u003e 目录即可生成待翻译的结果文件 (qm 文件)。\u003c/p\u003e\n\u003ch2 id=\"资源文件\"\u003e资源文件\u003c/h2\u003e\n\u003cp\u003e在 GUI 编程中，我们不可避免的会使用到各种各样的资源，例如：图片，音频，字体等等。Qt 中提供了一种\u003ca href=\"http://doc.qt.io/qt-5/resources.html\"\u003e资源管理方案\u003c/a\u003e，可以在不同场景下使用 (Python 和 QML 中均可)。\u003ccode\u003eSciHubEVA.qrc\u003c/code\u003e 定义了所有使用到的资源：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-xml\"\u003e\u0026lt;RCC\u0026gt;\n    \u0026lt;qresource prefix=\u0026#34;/\u0026#34;\u0026gt;\n        \u0026lt;file\u0026gt;ui/SciHubEVA.qml\u0026lt;/file\u0026gt;\n        \u0026lt;file\u0026gt;ui/SciHubEVAMenuBar.qml\u0026lt;/file\u0026gt;\n        \u0026lt;file\u0026gt;ui/SciHubEVAAbout.qml\u0026lt;/file\u0026gt;\n        \u0026lt;file\u0026gt;ui/SciHubEVAPreferences.qml\u0026lt;/file\u0026gt;\n        \u0026lt;file\u0026gt;ui/SciHubEVAAddSciHubURL.qml\u0026lt;/file\u0026gt;\n        \u0026lt;file\u0026gt;images/about.png\u0026lt;/file\u0026gt;\n    \u0026lt;/qresource\u0026gt;\n\u0026lt;/RCC\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e在 QML 中使用示例如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-qml}\"\u003eImage {\n    id: imageAboutLogo\n    source: \u0026#34;qrc:/images/about.png\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e在 Python 中使用示例如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eself._engine = QQmlApplicationEngine()\nself._engine.load(\u0026#39;qrc:/ui/SciHubEVA.qml\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e使用 \u003ccode\u003eqrc\u003c/code\u003e 文件管理资源文件的一个好处就是不需要担心各种相对路径和绝对路径带来的找不到文件的错误，但同时一个缺点是当资源文件更新后，需要运行 \u003ccode\u003epyrcc5 SciHubEVA.qrc -o scihub_resources.py\u003c/code\u003e 更新资源，同时还需要在主程序代码中引入生成的 Python 资源代码。\u003c/p\u003e\n\u003ch2 id=\"界面线程分离\"\u003e界面线程分离\u003c/h2\u003e\n\u003cp\u003e写 GUI 应用的一个重要问题就是界面线程的分离，需要把耗时的业务逻辑摘出来，单独作为一个线程运行，这样才不会造成界面的“假死”情况。\u003ccode\u003escihub_api.py\u003c/code\u003e 中的 \u003ccode\u003eSciHubAPI\u003c/code\u003e 作为下载文章的主类，下载过程相对耗时。因为其既需要 Qt 中的 \u003ccode\u003etr()\u003c/code\u003e 函数，也需要线程，通过 Python 的多继承，\u003ccode\u003eSciHubAPI\u003c/code\u003e 类构造如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eclass SciHubAPI(QObject, threading.Thread):\n    pass\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id=\"编译打包\"\u003e编译打包\u003c/h1\u003e\n\u003cp\u003ePyInstaller 是一个用于打包 Python 代码到一个本地化可执行程序的工具，详细的使用方法请参见\u003ca href=\"https://www.pyinstaller.org/documentation.html\"\u003e官方文档\u003c/a\u003e。同样，我们在此仅说明打包过程中遇到的一些问题。\u003c/p\u003e\n\u003ch2 id=\"macos\"\u003emacOS\u003c/h2\u003e\n\u003cp\u003emacOS 下的编译打包命令如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e# 清理相关目录和文件\nrm -rf build\nrm -rf dist\nrm -f SciHubEVA.spec\n\n# 重新生成资源文件\nrm -f scihub_resources.py\npyrcc5 SciHubEVA.qrc -o scihub_resources.py\n\n# 编译打包\npyinstaller -w scihub_eva.py \\\n  --hidden-import \u0026#34;PyQt5.Qt\u0026#34; \\\n  --hidden-import \u0026#34;PyQt5.QtQuick\u0026#34; \\\n  --add-data \u0026#34;LICENSE:.\u0026#34; \\\n  --add-data \u0026#34;SciHubEVA.conf:.\u0026#34; \\\n  --add-data \u0026#34;images/SciHubEVA.png:images\u0026#34; \\\n  --add-data \u0026#34;translations/SciHubEVA_zh_CN.qm:translations\u0026#34; \\\n  --name \u0026#34;SciHubEVA\u0026#34; \\\n  --icon \u0026#34;images/SciHubEVA.icns\u0026#34;\n\n# 拷贝程序信息\ncp Info.plist dist/SciHubEVA.app/Contents\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e编译打包过程中的 \u003ccode\u003e--hidden-import\u003c/code\u003e 参数是因为我们使用了 Qt Quick 和 QML 相关框架，但是在 Python 代码中我们并没有显式的引入这两个包，因此我们需要告知 PyInstaller 我们使用了这两个包，这样 PyInstaller 才会把相关的动态链接库拷贝到打包的程序中。\u003c/p\u003e\n\u003cp\u003e打包好的程序 \u003ccode\u003eSciEvaHub.app\u003c/code\u003e 会保存在 \u003ccode\u003edist\u003c/code\u003e 目录中。由于目前无论是 macOS 还是 Windows 系统，高分辨率已经比较常见，为了适应高分辨率，我们需要在代码中添加相应的支持，在入口 Python 文件中，我们需要在头部添加如下信息：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-python\"\u003eif hasattr(Qt, \u0026#39;AA_EnableHighDpiScaling\u0026#39;):\n    QGuiApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\nif hasattr(Qt, \u0026#39;AA_UseHighDpiPixmaps\u0026#39;):\n    QGuiApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e同时针对 macOS 系统，我们需要在 \u003ccode\u003eInfo.plist\u003c/code\u003e 中添加如下信息以支持高分辨率：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-xml\"\u003e\u0026lt;key\u0026gt;NSHighResolutionCapable\u0026lt;/key\u0026gt;\n\u0026lt;string\u0026gt;True\u0026lt;/string\u0026gt;\n\u0026lt;key\u0026gt;NSSupportsAutomaticGraphicsSwitching\u0026lt;/key\u0026gt;\n\u0026lt;string\u0026gt;True\u0026lt;/string\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eInfo.plist\u003c/code\u003e 中的其他信息针对性进行修改即可，最后将其拷贝到打包好的程序中。\u003c/p\u003e\n\u003ch2 id=\"windows\"\u003eWindows\u003c/h2\u003e\n\u003cp\u003eWindows 下的编译打包命令如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-dos\"\u003erem 清理相关目录和文件\nrd /s /Q build\nrd /s /Q dist\ndel /Q SciHubEVA.spec\n\nrem 重新生成资源文件\ndel /Q scihub_resources.py\npyrcc5 SciHubEVA.qrc -o scihub_resources.py\n\nrem 编译打包\npyinstaller -w scihub_eva.py ^\n  --hidden-import \u0026#34;PyQt5.Qt\u0026#34; ^\n  --hidden-import \u0026#34;PyQt5.QtQuick\u0026#34; ^\n  --add-data \u0026#34;LICENSE;.\u0026#34; ^\n  --add-data \u0026#34;SciHubEVA.conf;.\u0026#34; ^\n  --add-data \u0026#34;images/SciHubEVA.png;images\u0026#34; ^\n  --add-data \u0026#34;translations/SciHubEVA_zh_CN.qm;translations\u0026#34; ^\n  --name \u0026#34;SciHubEVA\u0026#34; ^\n  --icon \u0026#34;images/SciHubEVA.ico\u0026#34; ^\n  --version-file \u0026#34;SciHubEVA.win.version\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e编译打包过程中的 \u003ccode\u003e--version-file\u003c/code\u003e 参数是 Windows 程序的相关版本信息，具体请参见微软的 \u003ca href=\"http://msdn.microsoft.com/en-us/library/ff468916(v=vs.85).aspx\"\u003eVersion Information Structures\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e打包好的程序会在 \u003ccode\u003edist\\SciHubEVA\u003c/code\u003e 目录中，该目录还包含了所有运行时所需的文件。\u003c/p\u003e\n\u003ch1 id=\"安装包制作\"\u003e安装包制作\u003c/h1\u003e\n\u003ch2 id=\"macos-1\"\u003emacOS\u003c/h2\u003e\n\u003cp\u003emacOS 下我们使用 appdmg 工具将编译打包好的程序制作成 DMG 镜像文件。DMG 镜像文件可以对原始的程序进行压缩，便于分发。appdmg 通过一个 JSON 文件控制 DMG 镜像的制作，详细的 JSON 格式和相关参数请参见 \u003ca href=\"https://github.com/LinusU/node-appdmg\"\u003e官方文档\u003c/a\u003e，Sci-Hub EVA 的 DMG 制作 JSON 文件如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;title\u0026#34;: \u0026#34;Sci-Hub EVA\u0026#34;,\n    \u0026#34;icon\u0026#34;: \u0026#34;images/SciHubEVA.icns\u0026#34;,\n    \u0026#34;icon-size\u0026#34;: 100,\n    \u0026#34;background\u0026#34;: \u0026#34;images/SciHubEVA-dmg-backgroud.png\u0026#34;,\n    \u0026#34;format\u0026#34;: \u0026#34;UDZO\u0026#34;,\n    \u0026#34;window\u0026#34;: {\n        \u0026#34;size\u0026#34;: {\n            \u0026#34;width\u0026#34;: 600,\n            \u0026#34;height\u0026#34;: 400\n        }\n    },\n    \u0026#34;contents\u0026#34;: [\n        {\n            \u0026#34;x\u0026#34;: 100,\n            \u0026#34;y\u0026#34;: 150,\n            \u0026#34;type\u0026#34;: \u0026#34;file\u0026#34;,\n            \u0026#34;path\u0026#34;: \u0026#34;dist/SciHubEVA.app\u0026#34;\n        },\n        {\n            \u0026#34;x\u0026#34;: 300,\n            \u0026#34;y\u0026#34;: 150,\n            \u0026#34;type\u0026#34;: \u0026#34;link\u0026#34;,\n            \u0026#34;path\u0026#34;: \u0026#34;/Applications\u0026#34;\n        }\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e打包好后的 DMG 镜像效果如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-05-27-cross-platform-gui-application-based-on-pyqt/dmg.png\" alt=\"DMG\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"windows-1\"\u003eWindows\u003c/h2\u003e\n\u003cp\u003eWindows 下我们使用 NSIS 构建安装包，同样 NSIS 也支持多语言安装包构建，但请注意，NSIS 程序本身并不支持 Unicode，因此 NSIS 安装包的脚本需使用 GBK 编码保存。构建好的安装包的安装界面如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/cn/2018-05-27-cross-platform-gui-application-based-on-pyqt/nsis.png\" alt=\"NSIS\"/\u003e\u003c/p\u003e\n\u003cp\u003e整个 Sci-Hub EVA 的编译打包和安装包制作过程请参见 \u003ca href=\"https://github.com/leovan/SciHubEVA/tree/master/building\"\u003e构建说明文档\u003c/a\u003e。\u003c/p\u003e\n\n\n\n\n\n\u003cdiv class=\"donate\"\u003e\n  \u003cdiv class=\"donate-header\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"donate-slug\" id=\"donate-slug\"\u003ecross-platform-gui-application-based-on-pyqt\u003c/div\u003e\n  \u003cbutton class=\"donate-button\"\u003e赞 赏\u003c/button\u003e\n  \u003cdiv class=\"donate-footer\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"donate-modal-wrapper\"\u003e\n  \u003cdiv class=\"donate-modal\"\u003e\n    \u003cdiv class=\"donate-box\"\u003e\n      \u003cdiv class=\"donate-box-content\"\u003e\n        \u003cdiv class=\"donate-box-content-inner\"\u003e\n          \u003cdiv class=\"donate-box-header\"\u003e「真诚赞赏，手留余香」\u003c/div\u003e\n          \u003cdiv class=\"donate-box-body\"\u003e\n            \u003cdiv class=\"donate-box-money\"\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-2\" data-v=\"2\" data-unchecked=\"￥ 2\" data-checked=\"2 元\"\u003e￥ 2\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-5\" data-v=\"5\" data-unchecked=\"￥ 5\" data-checked=\"5 元\"\u003e￥ 5\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-10\" data-v=\"10\" data-unchecked=\"￥ 10\" data-checked=\"10 元\"\u003e￥ 10\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-50\" data-v=\"50\" data-unchecked=\"￥ 50\" data-checked=\"50 元\"\u003e￥ 50\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-100\" data-v=\"100\" data-unchecked=\"￥ 100\" data-checked=\"100 元\"\u003e￥ 100\u003c/button\u003e\n              \u003cbutton class=\"donate-box-money-button donate-box-money-button-unchecked\" id=\"donate-box-money-button-custom\" data-v=\"custom\" data-unchecked=\"任意金额\" data-checked=\"任意金额\"\u003e任意金额\u003c/button\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-qrcode\" id=\"donate-box-pay-qrcode\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"donate-box-footer\"\u003e\n            \u003cdiv class=\"donate-box-pay-method donate-box-pay-method-checked\" data-v=\"wechat-pay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-wechat-pay\" src=\"\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"donate-box-pay-method\" data-v=\"alipay\"\u003e\n              \u003cimg class=\"donate-box-pay-method-image\" id=\"donate-box-pay-method-image-alipay\" src=\"\"/\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"button\" class=\"donate-box-close-button\"\u003e\n      \u003csvg class=\"donate-box-close-button-icon\" fill=\"#fff\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"\u003e\u003cpath d=\"M13.486 12l5.208-5.207a1.048 1.048 0 0 0-.006-1.483 1.046 1.046 0 0 0-1.482-.005L12 10.514 6.793 5.305a1.048 1.048 0 0 0-1.483.005 1.046 1.046 0 0 0-.005 1.483L10.514 12l-5.208 5.207a1.048 1.048 0 0 0 .006 1.483 1.046 1.046 0 0 0 1.482.005L12 13.486l5.207 5.208a1.048 1.048 0 0 0 1.483-.006 1.046 1.046 0 0 0 .005-1.482L13.486 12z\" fill-rule=\"evenodd\"\u003e\u003c/path\u003e\u003c/svg\u003e\n    \u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript type=\"text/javascript\" src=\"/js/donate.js\"\u003e\u003c/script\u003e\n\n\n  \u003cfooter\u003e\n  \n\u003cnav class=\"post-nav\"\u003e\n  \u003cspan class=\"nav-prev\"\u003e← \u003ca href=\"/cn/2018/03/manifold-learning/\"\u003e流形学习 (Manifold Learning)\u003c/a\u003e\u003c/span\u003e\n  \u003cspan class=\"nav-next\"\u003e\u003ca href=\"/cn/2018/06/play-safe-smart-choice-and-yuppie/\"\u003ePlay Safe, Smart Choice \u0026amp; Yuppie\u003c/a\u003e →\u003c/span\u003e\n\u003c/nav\u003e\n\n\n\n\n\u003cins class=\"adsbygoogle\" style=\"display:block; text-align:center;\" data-ad-layout=\"in-article\" data-ad-format=\"fluid\" data-ad-client=\"ca-pub-2608165017777396\" data-ad-slot=\"8302038603\"\u003e\u003c/ins\u003e\n\u003cscript\u003e\n  (adsbygoogle = window.adsbygoogle || []).push({});\n\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/toggle-theme.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"/js/no-highlight.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/math-code.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"/js/heading-anchor.js\"\u003e\u003c/script\u003e\n\n\n\n\u003csection class=\"comments\"\u003e\n\u003cscript src=\"https://giscus.app/client.js\" data-repo=\"leovan/leovan.me\" data-repo-id=\"MDEwOlJlcG9zaXRvcnkxMTMxOTY0Mjc=\" data-category=\"Comments\" data-category-id=\"DIC_kwDOBr89i84CT-R7\" data-mapping=\"pathname\" data-strict=\"1\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"top\" data-theme=\"preferred_color_scheme\" data-lang=\"zh-CN\" data-loading=\"lazy\" crossorigin=\"anonymous\" defer=\"\"\u003e\n\u003c/script\u003e\n\u003c/section\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/clipboard@2.0.11/dist/clipboard.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/toolbar/prism-toolbar.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  (function() {\n    if (!self.Prism) {\n      return;\n    }\n\n    \n    Prism.languages.dos = Prism.languages.powershell;\n    Prism.languages.gremlin = Prism.languages.groovy;\n\n    let languages = {\n      'r': 'R', 'python': 'Python', 'xml': 'XML', 'html': 'HTML',\n      'yaml': 'YAML', 'latex': 'LaTeX', 'tex': 'TeX',\n      'powershell': 'PowerShell', 'javascript': 'JavaScript',\n      'dos': 'DOS', 'qml': 'QML', 'json': 'JSON', 'bash': 'Bash',\n      'text': 'Text', 'txt': 'Text', 'sparql': 'SPARQL',\n      'gremlin': 'Gremlin', 'cypher': 'Cypher', 'ngql': 'nGQL',\n      'shell': 'Shell', 'sql': 'SQL', 'apacheconf': 'Apache Configuration', 'c': 'C', 'css': 'CSS'\n    };\n\n    Prism.hooks.add('before-highlight', function(env) {\n      if (env.language !== 'plain') {\n        let language = languages[env.language] || env.language;\n        env.element.setAttribute('data-language', language);\n      }\n    });\n\n    \n    let ClipboardJS = window.ClipboardJS || undefined;\n\n    Prism.plugins.toolbar.registerButton('copy-to-clipboard', function(env) {\n      let linkCopy = document.createElement('button');\n      linkCopy.classList.add('prism-button-copy');\n\n      registerClipboard();\n\n      return linkCopy;\n\n      function registerClipboard() {\n        let clip = new ClipboardJS(linkCopy, {\n          'text': function () {\n            return env.code;\n          }\n        });\n\n        clip.on('success', function() {\n          linkCopy.classList.add('prism-button-copy-success');\n          resetText();\n        });\n        clip.on('error', function () {\n          linkCopy.classList.add('prism-button-copy-error');\n          resetText();\n        });\n      }\n\n      function resetText() {\n        setTimeout(function () {\n          linkCopy.classList.remove('prism-button-copy-success');\n          linkCopy.classList.remove('prism-button-copy-error');\n        }, 1600);\n      }\n    });\n  })();\n\u003c/script\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cscript async=\"\" src=\"/js/center-img.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/right-quote.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/external-link.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/alt-title.js\"\u003e\u003c/script\u003e\n\u003cscript async=\"\" src=\"/js/figure.js\"\u003e\u003c/script\u003e\n\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/lazysizes@5.3.2/lazysizes.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript src=\"//cdn.jsdelivr.net/npm/vanilla-back-to-top@latest/dist/vanilla-back-to-top.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\naddBackToTop({\n  diameter: 48\n});\n\u003c/script\u003e\n\n  \u003chr/\u003e\n  \u003cdiv class=\"copyright no-border-bottom\"\u003e\n    \u003cdiv class=\"copyright-author-year\"\u003e\n      \u003cspan\u003eCopyright © 2017-2024 \u003ca href=\"/\"\u003e范叶亮 | Leo Van\u003c/a\u003e\u003c/span\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n  \u003c/footer\u003e\n  \u003c/article\u003e",
  "Date": "2018-05-27T00:00:00Z",
  "Author": "范叶亮"
}