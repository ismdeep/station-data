{
  "Source": "liam.page",
  "Title": "Python 中的黑暗角落（二）：生成器协程的调度问题",
  "Link": "https://liam.page/2017/06/30/generator-coroutine-in-python-basic-topics/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e\u003ca href=\"/2017/06/30/understanding-yield-in-python/\"\u003e前作\u003c/a\u003e介绍了 Python 中的 \u003ccode\u003eyield\u003c/code\u003e 关键字。此篇介绍如何使用 \u003ccode\u003eyield\u003c/code\u003e 表达式，在 Python 中实现一个最基本的协程调度示例，避免 I/O 操作占用大量 CPU 计算时间。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"协程及其特点\"\u003e\u003ca href=\"#协程及其特点\" class=\"headerlink\" title=\"协程及其特点\"\u003e\u003c/a\u003e协程及其特点\u003c/h2\u003e\u003cp\u003e协程是一种特殊的子程序，它\u003cstrong\u003e可以在特定的位置暂停/恢复\u003c/strong\u003e（而不是像普通函数那样在逻辑上顺序执行）；并且\u003cstrong\u003e每当协程暂停时，调用者可以从协程中获取状态，决定调用者接下来的走向\u003c/strong\u003e；以及\u003cstrong\u003e每当协程恢复时，调用者可以传递信息给协程，影响协程的行为\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e从「可以暂停/恢复」来看，协程类似于 Python 中的迭代器。不过，迭代器仅只是将值返回给调用者，其内部的逻辑是确定的，无法与调用者做更多的交互。\u003c/p\u003e\n\u003cp\u003e因为协程可以暂停/恢复，所以，我们可以在多个协程中分别执行不同的任务；然后由调度器管理协程之间的执行，实现多任务并发。\u003c/p\u003e\n\u003cp\u003e此外，协程和调用者在同一线程中执行；考虑到\u003ca href=\"/2017/01/17/layers-and-operation-system/\"\u003e线程是操作系统进行任务调度的最小单元\u003c/a\u003e，\u003cstrong\u003e协程和调用者之间的切换，没有 CPU 上下文切换的开销\u003c/strong\u003e。因此，相对使用多线程、多进程实现多任务并发，协程在这方面的开销非常小。\u003c/p\u003e\n\u003cp\u003e同样由于协程之间共享线程，所以使用协程实现的多任务并发，无法实现\u003ca href=\"/2017/05/06/cxx-concurrency-multithread-basic-problems/#%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C\"\u003e真正的并行\u003c/a\u003e。因此，显而易见，\u003cstrong\u003e协程适合 I/O 密集型的任务并发，而不适合 CPU 密集型的任务并发\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"协程调度基础\"\u003e\u003ca href=\"#协程调度基础\" class=\"headerlink\" title=\"协程调度基础\"\u003e\u003c/a\u003e协程调度基础\u003c/h2\u003e\u003cp\u003e最简单的协程的例子，我们实际上已经见过了。在「使用 \u003ccode\u003esend()\u003c/code\u003e 方法与生成器函数通信」一节中，\u003ccode\u003efunc\u003c/code\u003e 就扮演了协程函数的角色。每当协程函数在 \u003ccode\u003eyield\u003c/code\u003e 表达式处暂停，调用者就收到上一步计算的结果；每当协程函数自 \u003ccode\u003eyield\u003c/code\u003e 表达式处恢复，协程函数就用接收到的数进行下一轮计算。\u003c/p\u003e\n\u003cp\u003e在见识过最简单的协程示例之后，我们试着看看在调度协程的过程中，需要怎样处理。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003ecoroutine_basic.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e collections \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e deque               \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDispatcher\u003c/span\u003e(\u003cspan class=\"title class_ inherited__\"\u003eobject\u003c/span\u003e):                   \u003cspan class=\"comment\"\u003e# 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e__init__\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, tasks\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.tasks = deque(tasks)           \u003cspan class=\"comment\"\u003e# 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003enext\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e self.tasks.pop()             \u003cspan class=\"comment\"\u003e# 4.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003erun\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(self.tasks):              \u003cspan class=\"comment\"\u003e# 5.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            task = self.\u003cspan class=\"built_in\"\u003enext\u003c/span\u003e()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"built_in\"\u003enext\u003c/span\u003e(task)                  \u003cspan class=\"comment\"\u003e# 6.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eexcept\u003c/span\u003e StopIteration:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003epass\u003c/span\u003e                        \u003cspan class=\"comment\"\u003e# 7.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                self.tasks.appendleft(task) \u003cspan class=\"comment\"\u003e# 8.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egreeting\u003c/span\u003e(\u003cspan class=\"params\"\u003ename, times\u003c/span\u003e):                  \u003cspan class=\"comment\"\u003e# 9.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(times):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e                               \u003cspan class=\"comment\"\u003e# 10.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello, %s.%d!\u0026#34;\u003c/span\u003e % (name, i))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edispatcher = Dispatcher([greeting(\u003cspan class=\"string\"\u003e\u0026#39;Liam\u0026#39;\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e), greeting(\u003cspan class=\"string\"\u003e\u0026#39;Sophia\u0026#39;\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            greeting(\u003cspan class=\"string\"\u003e\u0026#39;Cancan\u0026#39;\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e)])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edispatcher.run()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这段代码中，有两个主要角色：调度器 (2) 和任务 (9)。\u003c/p\u003e\n\u003cp\u003e从调度器的角度来说，我们自 \u003ccode\u003ecollections\u003c/code\u003e 模块引入了 \u003ccode\u003edeque\u003c/code\u003e 容器 (1)，用于在 (3) 处保存任务。而后，我们在 (4) 定义了调度器 \u003ccode\u003eDispatcher\u003c/code\u003e 的轮询函数 \u003ccode\u003enext()\u003c/code\u003e，它返回下一个尚未终止的任务。在调度器的 \u003ccode\u003erun()\u003c/code\u003e 函数中，(5) 和 (8) 保证了循环处理所有尚未完成的任务并清理已完成的任务，(6) 和 (7) 则负责触发每个任务的下一步动作。\u003c/p\u003e\n\u003cp\u003e从任务的角度来说，\u003ccode\u003egreeting\u003c/code\u003e 是一个生成器函数，是具体的协程任务。在 (10) 处，\u003ccode\u003eyield\u003c/code\u003e 表达式标记了函数暂停/恢复的位置；它将逻辑上连续的任务，在时间上切分成了若干段。\u003c/p\u003e\n\u003cp\u003e这段代码执行起来结果大致是这样：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eHello, Cancan.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.3!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.3!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.3!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.4!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.4!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.5!\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看起来和多线程那种乱七八糟的输出顺序有点像，不是吗？当然，此处由于使用 \u003ccode\u003edeque.pop()\u003c/code\u003e 轮询任务队列，所以输出顺序大致是有迹可循的。不过，这并不影响我们将其作为协程调度的示例。\u003c/p\u003e\n\u003cp\u003e在这个例子中，尽管调用者和协程之间没有其他的通信，协程函数内也没有真正意义上的 I/O 操作，但我们仍可以进行一些总结。\u003c/p\u003e\n\u003cp\u003e首先，生成器函数充当了协程函数，实现了协程。\u003c/p\u003e\n\u003cp\u003e其次，协程任务在逻辑上是连续的，但是我们可以用 \u003ccode\u003eyield\u003c/code\u003e 表达式在时间上把协程任务分成若干部分。\u003c/p\u003e\n\u003cp\u003e再次，用 \u003ccode\u003eyield\u003c/code\u003e 分割的任务，需要有一个机制控制器暂停/恢复。这个机制此处由调度器提供。\u003c/p\u003e\n\u003cp\u003e再者，对于调度器来说，它需要知道「有哪些协程任务需要恢复」。因此，它必然直接或间接地维护一个事件队列。此处，我们用 \u003ccode\u003eDispatcher.tasks\u003c/code\u003e 完成了这一工作。\u003c/p\u003e\n\u003cp\u003e最后，对于每个协程（任务）来说，一旦被暂停，其恢复就必须依赖主动唤起。因此，调度器必须「恰到好处」地反复唤起线程——不能多也不能少：多则浪费执行时间，甚至抛出异常；少则留下未能完成的任务。因此，调度器必须恰当地维护上述队列，确定何时从队列中移除已完成的任务。在我们的例子中，(6) 和 (7) 协同完成了这一工作。\u003c/p\u003e\n\u003ch2 id=\"异步-I-x2F-O-任务模拟\"\u003e\u003ca href=\"#异步-I-x2F-O-任务模拟\" class=\"headerlink\" title=\"异步 I/O 任务模拟\"\u003e\u003c/a\u003e异步 I/O 任务模拟\u003c/h2\u003e\u003cp\u003e回顾一下刚才的协程任务。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egreeting\u003c/span\u003e(\u003cspan class=\"params\"\u003ename, times\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(times):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello, %s.%d!\u0026#34;\u003c/span\u003e % (name, i))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这个任务里，\u003ccode\u003eyield\u003c/code\u003e 表达式将原本在逻辑上连续的循环，人为地在时间上切分成了若干份。然而，除了用于演示暂停/恢复的携程调度之外，这个例子实际上没有必要使用协程实现。这是因为，在协程任务中，去掉 \u003ccode\u003eyield\u003c/code\u003e 表达式之后，所有的操作都是立即完成的；不存在需要阻塞以等待 I/O 的空耗 CPU 的情况。\u003c/p\u003e\n\u003cp\u003e下列代码模拟了一个需要阻塞等待 I/O 的任务。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e time \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sleep\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e rd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egreeting\u003c/span\u003e(\u003cspan class=\"params\"\u003ename, times, duration = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e):    \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(times):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sleep(\u003cspan class=\"number\"\u003e2\u003c/span\u003e * duration * rd())          \u003cspan class=\"comment\"\u003e# 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello, %s.%d!\u0026#34;\u003c/span\u003e % (name, i))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处，新定义的 \u003ccode\u003egreeting\u003c/code\u003e 函数 (1) 有一个新的参数：\u003ccode\u003eduration\u003c/code\u003e。而后，在每次循环打印招呼信息的之前，会现行阻塞一段时间 (2)。这一阻塞就模拟了实际情况中的 I/O 类操作：空占 CPU 资源，但不进行任何计算。阻塞的时间是 \u003ccode\u003e2 * duration * rd()\u003c/code\u003e，这是一个一 \u003ccode\u003eduration\u003c/code\u003e 为期望的随机变量，用来模拟预计阻塞 \u003ccode\u003eduration\u003c/code\u003e 秒但实际情况会有波动的 I/O 任务。\u003c/p\u003e\n\u003cp\u003e假设 \u003ccode\u003eduration\u003c/code\u003e 设置为定值 1 而 \u003ccode\u003etimes\u003c/code\u003e 设置为定值 3，那么执行一次 \u003ccode\u003egreeting\u003c/code\u003e 函数，平均需要耗时 3 秒。如若顺序执行 3 个这样的函数，平均下来，一共需要耗费 9 秒的时间。而这 9 秒之中，大多数时间 CPU 都仅只在空耗，没有执行实际的计算任务。因此，我们可以考虑用协程将它们并发起来执行，降低总的空耗的时间。为此，我们有如下思路。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将每个 I/O 任务理解为一个事件；\u003c/li\u003e\n\u003cli\u003e维护一个队列，用于记录尚在进行中的事件，以便后续操作；\u003c/li\u003e\n\u003cli\u003e当事件生成时，向上述队列注册（即将事件添加进队列）；\u003c/li\u003e\n\u003cli\u003e使用轮询（polling）等方式，捕获完成的事件；\u003c/li\u003e\n\u003cli\u003e对已完成的事件，进行后续操作（特别地，恢复协程函数），而后从队列中删除该事件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e现在，我们开始逐步在这一思路的指导下，实现协程并发。\u003c/p\u003e\n\u003ch3 id=\"引出休眠事件（SleepEvent）\"\u003e\u003ca href=\"#引出休眠事件（SleepEvent）\" class=\"headerlink\" title=\"引出休眠事件（SleepEvent）\"\u003e\u003c/a\u003e引出休眠事件（\u003ccode\u003eSleepEvent\u003c/code\u003e）\u003c/h3\u003e\u003cp\u003e回顾一下新版的 \u003ccode\u003egreeting\u003c/code\u003e 函数。若要通过生成器实现协程，就必然要添加 \u003ccode\u003eyield\u003c/code\u003e 表达式。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e time \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sleep\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e rd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egreeting\u003c/span\u003e(\u003cspan class=\"params\"\u003ename, times, duration = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(times):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e sleep(\u003cspan class=\"number\"\u003e2\u003c/span\u003e * duration * rd())          \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello, %s.%d!\u0026#34;\u003c/span\u003e % (name, i))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e简单粗暴地以 (1) 的方式加上 \u003ccode\u003eyield\u003c/code\u003e 表达式是不行的。这是因为，\u003ccode\u003eyield\u003c/code\u003e 表达式会对 \u003ccode\u003esleep\u003c/code\u003e 函数求值，而后将该值返回给调用者并暂停。但是，对 \u003ccode\u003esleep\u003c/code\u003e 函数求值的过程，就是模拟的 I/O 操作，会阻塞执行线程。在阻塞完毕之后，再通过 \u003ccode\u003eyield\u003c/code\u003e 暂停，这就没有意义了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003ecoroutine_sleep\u003c/span\u003e(\u003cspan class=\"params\"\u003eduration\u003c/span\u003e):              \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e SleepEvent(duration)             \u003cspan class=\"comment\"\u003e# 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egreeting\u003c/span\u003e(\u003cspan class=\"params\"\u003ename, times, duration = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(times):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e coroutine_sleep(duration)     \u003cspan class=\"comment\"\u003e# 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello, %s.%d!\u0026#34;\u003c/span\u003e % (name, i))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因此，我们需要定义新的 \u003ccode\u003ecoroutine_sleep\u003c/code\u003e 函数 (1)。这个函数会生成一个事件（\u003ccode\u003eSleepEvent\u003c/code\u003e），然后不阻塞地立即返回 (2)。因此，在 (3) 处，\u003ccode\u003eyield\u003c/code\u003e 表达式会将 \u003ccode\u003ecoroutine_sleep\u003c/code\u003e 返回的 \u003ccode\u003eSleepEvent\u003c/code\u003e 对象传递给协程函数的调用者，并暂停当前协程函数。\u003c/p\u003e\n\u003ch3 id=\"定义事件框架\"\u003e\u003ca href=\"#定义事件框架\" class=\"headerlink\" title=\"定义事件框架\"\u003e\u003c/a\u003e定义事件框架\u003c/h3\u003e\u003cp\u003e接下来，我们需要定义事件框架。在实际动手之前，我们应该先分析一下一个事件类需要有哪些功能。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，事件应该有能力让外部知道自身存在。因此事件类应该伴随一个队列；并且在生成事件对象时，将自身注册进这个队列。\u003c/li\u003e\n\u003cli\u003e其次，事件应该有能力让外部知道自身状态，以便检查事件状态，进而进行下一步操作。因此，事件类应该是一个闭包，保存生成事件时的一些状态；并提供一个接口，利用这些状态检查事件是否完成。\u003c/li\u003e\n\u003cli\u003e最后，事件应当提供一个接口，记录在事件完成之后应当做什么；并且在事件完成之后执行这些操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e据此，我们应该有如下代码。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eevents_list = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e()                    \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEvent\u003c/span\u003e(\u003cspan class=\"title class_ inherited__\"\u003eobject\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e__init__\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, *args, **kwargs\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        events_list.append(self)        \u003cspan class=\"comment\"\u003e# 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._callback = \u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e:\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e    \u003cspan class=\"comment\"\u003e# 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eis_ready\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):                 \u003cspan class=\"comment\"\u003e# 4.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ready = self._is_ready()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ready:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            self._callback()            \u003cspan class=\"comment\"\u003e# 5.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ready\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eset_callback\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, callback\u003c/span\u003e):   \u003cspan class=\"comment\"\u003e# 6.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._callback = callback\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里，(1) 处我们定义了一个全局的队列，用于记录尚在进行中的事件；与此同时，每当生成事件类对象时，(2) 会将当前事件对象注册到队列中。(3) 则定义了回调函数，用于记录事件完成之后执行什么操作。\u003c/p\u003e\n\u003cp\u003e(4) 和 (6) 分别是对外的接口。(4) 让外部有能力知道自身状态，其中 \u003ccode\u003e_is_ready()\u003c/code\u003e 需要在子类中实现；而 (6) 允许外部记录在事件完成之后应当做什么。(5) 则保证了当事件完成之后，(6) 中的设置会被正确执行。\u003c/p\u003e\n\u003cp\u003e至此，我们可以定义出 \u003ccode\u003eSleepEvent\u003c/code\u003e 类。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e time \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e time \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e current_time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e rd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSleepEvent\u003c/span\u003e(\u003cspan class=\"title class_ inherited__\"\u003eEvent\u003c/span\u003e):                                    \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e__init__\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, duration\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e(SleepEvent, self).__init__(duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._duration = \u003cspan class=\"number\"\u003e2\u003c/span\u003e * rd() * duration                \u003cspan class=\"comment\"\u003e# 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._start_time = current_time()                   \u003cspan class=\"comment\"\u003e# 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e_is_ready\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (current_time() - self._start_time \u0026gt;= self._duration)\u003cspan class=\"comment\"\u003e# 4.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里，(1) 处定义了 \u003ccode\u003eSleepEvent\u003c/code\u003e 事件类，用来模拟 I/O 事件；模拟的核心在于 (2) 处定义的睡眠时长。(3) 则记录了事件诞生时的状态，用在 (4) 处确认事件是否已完成。\u003c/p\u003e\n\u003cp\u003e至此，协程函数这一侧的代码我们已经完成了，接下来我们看看调度器一侧的代码如何实现。\u003c/p\u003e\n\u003ch3 id=\"用轮询捕捉已完成的事件\"\u003e\u003ca href=\"#用轮询捕捉已完成的事件\" class=\"headerlink\" title=\"用轮询捕捉已完成的事件\"\u003e\u003c/a\u003e用轮询捕捉已完成的事件\u003c/h3\u003e\u003cp\u003e因为我们在 \u003ccode\u003eevents_list\u003c/code\u003e 中保存了所有尚在执行中的事件。这是相当简单的工作，所以不作过多的解释。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(events_list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e event \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e events_list:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e event.is_ready():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            events_list.remove(event)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"唤醒逻辑\"\u003e\u003ca href=\"#唤醒逻辑\" class=\"headerlink\" title=\"唤醒逻辑\"\u003e\u003c/a\u003e唤醒逻辑\u003c/h3\u003e\u003cp\u003e在 \u003ccode\u003eEvent\u003c/code\u003e 类的定义中，\u003ccode\u003eis_ready()\u003c/code\u003e 函数会在事件完成后调用 \u003ccode\u003e_callback\u003c/code\u003e 函数。而对于协程函数来说，一个事件完成后，需要做的事情无非是：唤醒，恢复执行到下一个暂停点。因此可以有这样的唤醒逻辑。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e_next\u003c/span\u003e(\u003cspan class=\"params\"\u003egen_task\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        yielded_event = \u003cspan class=\"built_in\"\u003enext\u003c/span\u003e(gen_task)                      \u003cspan class=\"comment\"\u003e# 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        yielded_event.set_callback(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e: _\u003cspan class=\"built_in\"\u003enext\u003c/span\u003e(gen_task)) \u003cspan class=\"comment\"\u003e# 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eexcept\u003c/span\u003e StopIteration:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003epass\u003c/span\u003e                                                \u003cspan class=\"comment\"\u003e# 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里，(1) 调用 Python 内建的 \u003ccode\u003enext\u003c/code\u003e 函数，唤醒协程函数，执行到下一个暂停点，并接受其返回值，保存在 \u003ccode\u003eyielded_event\u003c/code\u003e 当中。而后，在 (2) 处将该 \u003ccode\u003eEvent\u003c/code\u003e 对象设置为 Lambda 函数 \u003ccode\u003elambda: _next(gen_task)\u003c/code\u003e。显然，这是一个递归调用 \u003ccode\u003e_next\u003c/code\u003e 函数自身的闭包——捕获了需要继续唤醒的生成器 \u003ccode\u003egen_task\u003c/code\u003e。若生成器执行完毕，则无需继续唤醒。因此在 (3) 处，直接 \u003ccode\u003epass\u003c/code\u003e 即可。\u003c/p\u003e\n\u003ch3 id=\"完整实验\"\u003e\u003ca href=\"#完整实验\" class=\"headerlink\" title=\"完整实验\"\u003e\u003c/a\u003e完整实验\u003c/h3\u003e\u003cp\u003e将上述代码整合起来，就可以做实验了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003ecoroutine_async.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e#!/usr/bin/env python3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e time \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e time \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e current_time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e random \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e rd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eevents_list = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eEvent\u003c/span\u003e(\u003cspan class=\"title class_ inherited__\"\u003eobject\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e__init__\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, *args, **kwargs\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        events_list.append(self)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._callback = \u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e:\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eis_ready\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ready = self._is_ready()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ready:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            self._callback()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ready\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eset_callback\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, callback\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._callback = callback\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSleepEvent\u003c/span\u003e(\u003cspan class=\"title class_ inherited__\"\u003eEvent\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e__init__\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, duration\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003esuper\u003c/span\u003e(SleepEvent, self).__init__(duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._duration = \u003cspan class=\"number\"\u003e2\u003c/span\u003e * rd() * duration\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._start_time = current_time()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e_is_ready\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (current_time() - self._start_time \u0026gt;= self._duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eDispatcher\u003c/span\u003e(\u003cspan class=\"title class_ inherited__\"\u003eobject\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e__init__\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, tasks\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.tasks = tasks\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._start()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e_next\u003c/span\u003e(\u003cspan class=\"params\"\u003eself, gen_task\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003etry\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            yielded_event = \u003cspan class=\"built_in\"\u003enext\u003c/span\u003e(gen_task)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            yielded_event.set_callback(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e: self._\u003cspan class=\"built_in\"\u003enext\u003c/span\u003e(gen_task))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eexcept\u003c/span\u003e StopIteration:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003epass\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003e_start\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e task \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e self.tasks:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            self._\u003cspan class=\"built_in\"\u003enext\u003c/span\u003e(task)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003epolling\u003c/span\u003e(\u003cspan class=\"params\"\u003eself\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(events_list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e event \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e events_list:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e event.is_ready():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    events_list.remove(event)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003ecoroutine_sleep\u003c/span\u003e(\u003cspan class=\"params\"\u003eduration\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e SleepEvent(duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egreeting\u003c/span\u003e(\u003cspan class=\"params\"\u003ename, times, duration = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(times):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e coroutine_sleep(duration)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello, %s.%d!\u0026#34;\u003c/span\u003e % (name, i))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003etest\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        dispatcher = Dispatcher([greeting(\u003cspan class=\"string\"\u003e\u0026#39;Liam\u0026#39;\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e), greeting(\u003cspan class=\"string\"\u003e\u0026#39;Sophia\u0026#39;\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e), greeting(\u003cspan class=\"string\"\u003e\u0026#39;Cancan\u0026#39;\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e)])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        dispatcher.polling()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    timeit_times = \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    avg_cost = timeit.timeit(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e: test(), number = timeit_times) / timeit_times\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;%.3f\u0026#39;\u003c/span\u003e % (avg_cost))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可能的执行结果是：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ python coroutine_async.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e......\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.0!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Sophia.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Liam.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.1!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHello, Cancan.2!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3.400\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看到，平均下来，使用协程并发地执行三个 \u003ccode\u003egreeting\u003c/code\u003e 任务（\u003ccode\u003etimes = 3, duration = 1\u003c/code\u003e）只需要 3.4 秒；耗时远低于顺序执行所需的 9 秒。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-06-30T11:16:27Z",
  "Author": "Liam Huang"
}