{
  "Source": "liam.page",
  "Title": "泥潭挣扎记：Linuxbrew 里的 Glibc",
  "Link": "https://liam.page/2020/01/19/struggle-with-Glibc-and-Linuxbrew/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e本着 Homebrew 真香的原则，我尝试在 CentOS 上安装 Linuxbrew。至于不用 Yum 的原因，请看刚才提到的真香原则。\u003c/p\u003e\n\u003cp\u003e但随即，我就陷入到了 Glibc 的泥潭。这个泥潭是一个需要自举（bootstrap）的循环依赖；这个泥潭长这样：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLinuxbrew 安装任何东西都依赖 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e，而且它不想用系统中自带的 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e 都直接或间接依赖 Glibc。\u003c/li\u003e\n\u003cli\u003eLinuxbrew 里的 Glibc 版本比较高，目前是 2.23，因此依赖高版本的 GCC（\u003ccode\u003e\u0026gt;= 4.7\u003c/code\u003e），以及因为 Linuxbrew 的缘故依赖 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e系统里的 GCC 版本较低，因此 Linuxbrew 安装 Glibc 失败；而通过 Linuxbrew 安装高版本的 GCC 又再次依赖 Glibc。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e泥潭里有两个循环依赖：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGlibc 和 \u003ccode\u003ecurl\u003c/code\u003e 及 \u003ccode\u003egit\u003c/code\u003e 等基础工具相互依赖；\u003c/li\u003e\n\u003cli\u003eGlibc 和 GCC 相互依赖。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"寻找突破口，解决-Glibc-的存在性问题\"\u003e\u003ca href=\"#寻找突破口，解决-Glibc-的存在性问题\" class=\"headerlink\" title=\"寻找突破口，解决 Glibc 的存在性问题\"\u003e\u003c/a\u003e寻找突破口，解决 Glibc 的存在性问题\u003c/h2\u003e\u003cp\u003e两个循环都涉及到 Glibc，因此必须想办法从 Glibc 这里突破。考虑到 Glibc 基础库的地位，很多依赖它的模块，都是硬编码 Glibc 的位置。因此 Glibc 必须从源码编译安装，无法直接服用编译好的二进制文件。所以 Glibc 无论如何都得依赖 GCC。既然高版本的 Glibc 依赖高版本的 GCC，那么就只能想办法安装较低版本的 Glibc——首先解决有没有（Linuxbrew 中的）Glibc 的问题，再去解决 Glibc 版本的问题。\u003c/p\u003e\n\u003cp\u003e为了安装低版本的 Glibc，我们要用到 \u003ccode\u003ebrew\u003c/code\u003e 直接从 \u003ccode\u003etap\u003c/code\u003e 中安装的特性：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eMAKEFLAGS=\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHOMEBREW_MAKE_JOBS=\u003cspan class=\"string\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebrew install --verbose --ignore-dependencies https://raw.githubusercontent.com/Linuxbrew/homebrew-core/6fb5dfd50895416bea3d00628b8d3b41fa1f4f32/Formula/glibc.rb  \u003cspan class=\"comment\"\u003e# Glibc 2.20\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e讲一下这里的黑魔法。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMAKEFLAGS\u003c/code\u003e 和 \u003ccode\u003eHOMEBREW_MAKE_JOBS\u003c/code\u003e 的设定，都是为了让编译 Glibc 的过程中使用非并行编译。这是因为并行编译 Glibc 2.20 时，因为 Makefile 依赖没写好，会产生一些问题。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e--verbose\u003c/code\u003e 参数的意义是让 \u003ccode\u003ebrew\u003c/code\u003e 打印尽可能多的调试信息。\u003ccode\u003e--ignore-dependencies\u003c/code\u003e 则是无奈之举，因为 Glibc 依赖的东西反过来又会依赖 Glibc，于是 Linuxbrew 会尝试去安装高版本 Glibc，这就毁了。\u003c/p\u003e\n\u003cp\u003e执行这条命令，Linuxbrew 首先还是会去尝试安装 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e。而它们又依赖 Glibc，所以又会尝试安装高版本的 Glibc，依然会失败。这没办法，由着他们失败去。等它们失败之后，就会尝试安装 Glibc 2.20。\u003c/p\u003e\n\u003ch2 id=\"解决-GCC-的问题\"\u003e\u003ca href=\"#解决-GCC-的问题\" class=\"headerlink\" title=\"解决 GCC 的问题\"\u003e\u003c/a\u003e解决 GCC 的问题\u003c/h2\u003e\u003cp\u003e接下来要解决的是 GCC 的问题。因为但凡碰到要编译的，都离不开它。于是我们有：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ebrew install --verbose --ignore-dependencies xz gmp mpfr libmpc isl gcc\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里安装 \u003ccode\u003exz\u003c/code\u003e, \u003ccode\u003egmp\u003c/code\u003e, \u003ccode\u003empfr\u003c/code\u003e, \u003ccode\u003elibmpc\u003c/code\u003e, \u003ccode\u003eisl\u003c/code\u003e 的原因是 GCC 自身就依赖他们——哪怕你不使用 Linuxbrew，手动编译 GCC 时，你也得安装它们。\u003c/p\u003e\n\u003ch2 id=\"安装-curl-和-git\"\u003e\u003ca href=\"#安装-curl-和-git\" class=\"headerlink\" title=\"安装 curl 和 git\"\u003e\u003c/a\u003e安装 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e有了 Glibc 和 GCC，安装 \u003ccode\u003ecurl\u003c/code\u003e 和 \u003ccode\u003egit\u003c/code\u003e 就不成问题了。我们有：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ebrew install --verbose curl git\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebrew update  --verbose --force\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"升级-Glibc\"\u003e\u003ca href=\"#升级-Glibc\" class=\"headerlink\" title=\"升级 Glibc\"\u003e\u003c/a\u003e升级 Glibc\u003c/h2\u003e\u003cp\u003e之前我们安装的是 Glibc 2.20，现在我们来升级它。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eMAKEFLAGS=\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHOMEBREW_MAKE_JOBS=\u003cspan class=\"string\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebrew upgrade glibc --verbose\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"重新安装-GCC\"\u003e\u003ca href=\"#重新安装-GCC\" class=\"headerlink\" title=\"重新安装 GCC\"\u003e\u003c/a\u003e重新安装 GCC\u003c/h2\u003e\u003cp\u003e因为 GCC 依赖的 Glibc 发生了变化，这导致 GCC 不可用。因此我们要做一些调整。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ebrew postinstall gcc\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如此，万事 okay~\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-01-19T10:10:52Z",
  "Author": "Liam Huang"
}