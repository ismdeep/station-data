{
  "Source": "liam.page",
  "Title": "【Life on Python】一个古老闯关游戏",
  "Link": "https://liam.page/2014/01/18/Py-challenge/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003ePython 是一个很实用的脚本语言，学习 Python 无疑需要辅以大量的练习，才能把自己所学运用到实践中去。\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/\"\u003ePythonChallenge\u003c/a\u003e 是国外的一款闯关游戏，在挑战关卡的同时学习如何运用 Python 解决问题。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch3 id=\"第〇关\"\u003e\u003ca href=\"#第〇关\" class=\"headerlink\" title=\"第〇关\"\u003e\u003c/a\u003e第〇关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/0.html\"\u003ehttp://www.pythonchallenge.com/pc/def/0.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"http://www.pythonchallenge.com/pc/def/calc.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e图片提示计算 2 的 38 次幂方的值。在 Python 解释器中输入\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e**\u003cspan class=\"number\"\u003e38\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e即可得到答案 \u003ccode\u003e274877906944L\u003c/code\u003e. 这里最后的 L 表示这是一个长整形的数字。将 274877906944 填入页面地址进入下一关。\u003c/p\u003e\n\u003ch3 id=\"第一关\"\u003e\u003ca href=\"#第一关\" class=\"headerlink\" title=\"第一关\"\u003e\u003c/a\u003e第一关\u003c/h3\u003e\u003cp\u003e地址跳转到 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/map.html\"\u003ehttp://www.pythonchallenge.com/pc/def/map.html\u003c/a\u003e, 继续我们的挑战游戏。\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"http://www.pythonchallenge.com/pc/def/map.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e图片提示将 K 对应到 M, O 对应到 Q, E 对应到 G. 这是古典密码学典型的移位密码，位移值为 2.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e算法\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e建立移位映射关系；\u003c/li\u003e\n\u003cli\u003e读入一个字符；\u003c/li\u003e\n\u003cli\u003e查找映射表；\u003c/li\u003e\n\u003cli\u003e根据映射关系输出一个字符；\u003c/li\u003e\n\u003cli\u003e返回步骤 2, 直至字串末尾。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e映射关系可以有多种方法可以建立，可以做一个类似 Python 内建的 dict 类型的 key-value 对应，也可基于 ASCII 码表做数值上的处理。\u003c/p\u003e\n\u003cp\u003estring 模块有 maketrans 函数，它接收两个等长的字符串，建立从第一个参数到第二个参数逐字符的对应关系，而后用 translate 函数将一个字符串根据这种对应关系转换，返回结果。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estring.ascii_lowercase\u003c/code\u003e 将返回顺序排放的 26 个小写英文字母。我们可以用切片来得到映射表。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e string\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eShift_Encrypt\u003c/span\u003e(\u003cspan class=\"params\"\u003epuzzle,Shift\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ShiftMap = string.maketrans(string.ascii_lowercase,string.ascii_lowercase[Shift:] + string.ascii_lowercase[:Shift])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e puzzle.translate(ShiftMap)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    puzzle = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr\u0026#39;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e Shift_Encrypt(puzzle,\u003cspan class=\"number\"\u003e2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到结果：i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that\u0026#39;s why this text is so long. using string.maketrans() is recommended. now apply on the url.\u003c/p\u003e\n\u003cp\u003e内容提示我们，将位移密码作用在当前的 URL 上，即作用在 map 上。得到结果 ocr, 填入地址栏，进入下一关。\u003c/p\u003e\n\u003ch3 id=\"第二关\"\u003e\u003ca href=\"#第二关\" class=\"headerlink\" title=\"第二关\"\u003e\u003c/a\u003e第二关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/ocr.html\"\u003ehttp://www.pythonchallenge.com/pc/def/ocr.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e页面提示说，要在网页源代码中寻找答案。打开源代码后发现有 HTML 注释说要寻找下面一堆乱码中罕见的字符。（我把需要测试的文件，保存在了\u003ca href=\"//liam.page/attachment/attachment/Python/PyChallenge/lv2.txt\"\u003e这里\u003c/a\u003e。）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e算法\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e建立一个字典，key 是字符，value 是字符出现的次数；\u003c/li\u003e\n\u003cli\u003e读入一个字符；\u003c/li\u003e\n\u003cli\u003e如果该字符已存在字典中，则对应的值加一；若不存在，则新建一个字典条目，设定值为一；\u003c/li\u003e\n\u003cli\u003e返回步骤 2, 直至字串末尾。\u003c/li\u003e\n\u003cli\u003e计算\u003ccode\u003e字符平均出现次数 = 字符总数 / 字典长度\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e遍历字典，输出所有值小于\u003ccode\u003e字符平均出现次数\u003c/code\u003e的字符。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e算法如果正确，则所谓的「罕见字符」都将被输出。但是有一个问题，Python 中的字典是无序的，按照算法运行，则输出的字符顺序是不可预知的（因为输入的文本不可预知）。我们需要一个「按照输入顺序排序的字典」。所幸，Python 的 collections 模块为我们提供了 OrderedDict 类型。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e collections\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epuzzle = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([line.rstrip() \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e line \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;lv2.txt\u0026#39;\u003c/span\u003e)])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCharCnt = collections.OrderedDict()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e Char \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e puzzle: CharCnt[Char] = CharCnt.get(Char, \u003cspan class=\"number\"\u003e0\u003c/span\u003e) + \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eavgOC = \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(puzzle) // \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(CharCnt)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([Char \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e Char \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e CharCnt \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e CharCnt[Char] \u0026lt; avgOC])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到结果 \u003ccode\u003eequality\u003c/code\u003e, 输入地址栏，进入下一关。\u003c/p\u003e\n\u003ch3 id=\"第三关\"\u003e\u003ca href=\"#第三关\" class=\"headerlink\" title=\"第三关\"\u003e\u003c/a\u003e第三关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/equality.html\"\u003ehttp://www.pythonchallenge.com/pc/def/equality.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e网站提示说：One small letter, surrounded by \u003cstrong\u003eEXACTLY\u003c/strong\u003e three big bodyguards on each of its sides.\u003c/p\u003e\n\u003cp\u003e也就是说，需要找出所有 xXXXxXXXx 类型的结构，取中间那个小写的 x 出来。注意问题关键在于「恰好」二字，意味着不多不少都只能是三个字母，因此我们每次对比，都必须考虑前后一共九个字母。另外，实际上，前后的两个字符，不一定是字母，也可以是特殊符号。比如 \u003ccode\u003e#ABCdEFG*\u003c/code\u003e 也是满足要求的。（我把需要测试的文件，保存在了\u003ca href=\"//liam.page/attachment/attachment/Python/PyChallenge/lv3.txt\"\u003e这里\u003c/a\u003e。）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e算法\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e读入一个字符；\u003c/li\u003e\n\u003cli\u003e如果该字符不是小写字母，返回 1; 如果该字符是小写字母，去到 3；\u003c/li\u003e\n\u003cli\u003e检查它的前后各四个字符，是否满足条件，若满足，则记录该字母；\u003c/li\u003e\n\u003cli\u003e检查是否到达字符串尾，若是，则停止；若否，则返回步骤 1.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e最简单的方法，是使用 re 模块的正则表达式功能，其中的 findall 函数能够直接完成任务。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e re\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join(re.findall(\u003cspan class=\"string\"\u003e\u0026#39;[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([line.rstrip() \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e line \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;lv3.txt\u0026#39;\u003c/span\u003e)])))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当然，也可以直接控制。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epuzzle = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([line.rstrip() \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e line \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;lv3.txt\u0026#39;\u003c/span\u003e)])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOutput = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e CharIndex \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(puzzle) - \u003cspan class=\"number\"\u003e8\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e puzzle[CharIndex + \u003cspan class=\"number\"\u003e0\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e1\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e2\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e3\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e4\u003c/span\u003e].islower() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e5\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e6\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            puzzle[CharIndex + \u003cspan class=\"number\"\u003e7\u003c/span\u003e].isupper() \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e puzzle[CharIndex + \u003cspan class=\"number\"\u003e8\u003c/span\u003e].isupper():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Output += puzzle[CharIndex + \u003cspan class=\"number\"\u003e4\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e Output\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到结果为 \u003ccode\u003elinkedlist\u003c/code\u003e, 输入地址栏则进入下一关。\u003c/p\u003e\n\u003ch3 id=\"第四关\"\u003e\u003ca href=\"#第四关\" class=\"headerlink\" title=\"第四关\"\u003e\u003c/a\u003e第四关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\"\u003ehttp://www.pythonchallenge.com/pc/def/linkedlist.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e点进去之后，提示要把后缀改成 \u003ccode\u003ephp\u003c/code\u003e, 改过之后打开一幅图片，点击图片提示说：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eand the next nothing is 44827\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e把地址栏改成 \u003ccode\u003e44827\u003c/code\u003e 之后，有出现类似提示。于是我们知道这样类似的循环估计得要进行几百次了，手工一次次改肯定不现实，上 Python 吧。\u003c/p\u003e\n\u003cp\u003e手工点几次之后会发现，地址和页面内容是有规律的。页面内容中的 \u003ccode\u003enothing is\u003c/code\u003e 后面接的数字，总是跟在地址栏的 \u003ccode\u003enothing=\u003c/code\u003e 后面。利用这个规律，代码如下。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib, re\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eurlbase = \u003cspan class=\"string\"\u003e\u0026#34;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eREsearchNUM = re.\u003cspan class=\"built_in\"\u003ecompile\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;(\\d+)\u0026#34;\u003c/span\u003e).search\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einitNUM = \u003cspan class=\"string\"\u003e\u0026#39;12345\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    webContents = urllib.urlopen(urlbase + initNUM).read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e = REsearchNUM(webContents)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        initNUM = \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e.group(\u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;We\u0026#39;re now going to\u0026#34;\u003c/span\u003e, initNUM\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e webContents\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行之后，会有一次停顿，需要你对某个数字除二然后重新开始，代码类似，这里就不想说了。\u003c/p\u003e\n\u003cp\u003e得到结果 \u003ccode\u003epeak.html\u003c/code\u003e, 进入下一关。\u003c/p\u003e\n\u003ch3 id=\"第五关\"\u003e\u003ca href=\"#第五关\" class=\"headerlink\" title=\"第五关\"\u003e\u003c/a\u003e第五关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/peak.html\"\u003ehttp://www.pythonchallenge.com/pc/def/peak.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e进去之后发发现一幅图，图上有一座小山；图的下方有一行提示，让我们「读出它」。结合页面标题 \u003ccode\u003epeak hell\u003c/code\u003e, 知道它和 Python 的一个模块 \u003ccode\u003epickle\u003c/code\u003e 音近。pickle 提供了两组函数，每组函数里面有各有两个互逆的操作。其中一组针对文件对象操作，另一组操作的则是 Python 的变量。针对文件对象的两个函数是 \u003ccode\u003edump\u003c/code\u003e 和 \u003ccode\u003eload\u003c/code\u003e, 针对 Python 变量的则是 \u003ccode\u003edumps\u003c/code\u003e 和 \u003ccode\u003eloads\u003c/code\u003e. 其中 \u003ccode\u003edump(s)\u003c/code\u003e 将数据以某种方式存入文件（变量），而 \u003ccode\u003eload(s)\u003c/code\u003e 则将 \u003ccode\u003edump(s)\u003c/code\u003e 存入的内容读出。\u003c/p\u003e\n\u003cp\u003epickle 模块还有一个用 C 语言实现的版本，称为 cPickle。相对原本的 pickle 版本，cPickle 执行效率更高一些，但是无法被继承。\u003c/p\u003e\n\u003cp\u003e既然我们知道需要用 pickle 了，就要去找一个对象。按照这个小游戏的风格，右键查看源码，发现 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/banner.p\"\u003ehttp://www.pythonchallenge.com/pc/def/banner.p\u003c/a\u003e 这个文件。我们用 urllib 把它读下来，然后用 pickle 处理。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e cPickle\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewebContents = urllib.urlopen(\u003cspan class=\"string\"\u003e\u0026#39;http://www.pythonchallenge.com/pc/def/banner.p\u0026#39;\u003c/span\u003e).read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epwc = cPickle.loads(webContents)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprints pwc\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们会发现，pwc 变量是一个复杂的结构。首先它是一个 list, 这个最外层的 list 里的数据是更小一层的 list; 小一层的 list 里的数据则是一个个 pairs. 如果你用过 *nix 系统，可能会对这种数据结构有些熟悉。仔细观察你会发现，每个小 list 里 pairs 里的数字之和正好都是 95, 而每个 pair 里都有一个长度为 1 的字符串。这意味着，整个大的 list 是一个文本块；每一个小的 list 是一行；每一个 pair 是重复若干次相应的字符。我们来输出它。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e.join([\u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([p[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] * p[\u003cspan class=\"number\"\u003e1\u003c/span\u003e] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e p \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e row]) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e row \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e pwc])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们会发现如图所示的内容。\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/channel.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e其中显示的内容 \u003ccode\u003echannel\u003c/code\u003e, 正是我们的过关提示。\u003c/p\u003e\n\u003ch3 id=\"第六关\"\u003e\u003ca href=\"#第六关\" class=\"headerlink\" title=\"第六关\"\u003e\u003c/a\u003e第六关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/channel.html\"\u003ehttp://www.pythonchallenge.com/pc/def/channel.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e打开网页后，出现的是一幅牛仔裤拉链的图。拉链的英文是 zip. 和 Python 相关的话，zip 可以是我们熟悉的 \u003ccode\u003e.zip\u003c/code\u003e 格式，也可以是 Python 内建的函数。考虑没有更多的提示信息，我们试试 \u003ccode\u003echennel.zip\u003c/code\u003e.\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib, StringIO, zipfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eunzipped = zipfile.ZipFile(StringIO.StringIO(urllib.urlopen(\u003cspan class=\"string\"\u003e\u0026#39;http://www.pythonchallenge.com/pc/def/channel.zip\u0026#39;\u003c/span\u003e).read()))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eunzipped.namelist()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eWOW! 好多…… len 看一下，居然有 910 个文件在里面，太可怕了。\u003c/p\u003e\n\u003cp\u003e等等！在刚才 namelist 的最后，有一个 \u003ccode\u003ereadme.txt\u003c/code\u003e! 抓住救命稻草了有木有啊！\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e unzipped.read(\u003cspan class=\"string\"\u003e\u0026#39;readme.txt\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e出现提示说，从 90052 开始搞起。难道说又要重复第四关那种情况？\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib, re, StringIO, zipfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eunzipped = zipfile.ZipFile(StringIO.StringIO(urllib.urlopen(\u003cspan class=\"string\"\u003e\u0026#39;http://www.pythonchallenge.com/pc/def/channel.zip\u0026#39;\u003c/span\u003e).read()))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eREsearchNUM = re.\u003cspan class=\"built_in\"\u003ecompile\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;(\\d+)\u0026#34;\u003c/span\u003e).search\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einitNUM = \u003cspan class=\"string\"\u003e\u0026#39;90052\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    webContents = unzipped.read(initNUM + \u003cspan class=\"string\"\u003e\u0026#39;.txt\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e = REsearchNUM(webContents)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        initNUM = \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e.group(\u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;We\u0026#39;re now going to\u0026#34;\u003c/span\u003e, initNUM\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e webContents\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e提示说：Collect the comments. 囧，原来遍历一遍还不够啊。再次修改代码，去拿 txt 的注释去。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib, re, StringIO, zipfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eunzipped = zipfile.ZipFile(StringIO.StringIO(urllib.urlopen(\u003cspan class=\"string\"\u003e\u0026#39;http://www.pythonchallenge.com/pc/def/channel.zip\u0026#39;\u003c/span\u003e).read()))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eREsearchNUM = re.\u003cspan class=\"built_in\"\u003ecompile\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;(\\d+)\u0026#34;\u003c/span\u003e).search\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einitNUM = \u003cspan class=\"string\"\u003e\u0026#39;90052\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eStrOutput = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    webContents = unzipped.read(initNUM + \u003cspan class=\"string\"\u003e\u0026#39;.txt\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e = REsearchNUM(webContents)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        initNUM = \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e.group(\u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        StrOutput += unzipped.getinfo(initNUM + \u003cspan class=\"string\"\u003e\u0026#39;.txt\u0026#39;\u003c/span\u003e).comment\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e webContents\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e StrOutput\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们得到：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/HOCKEY.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eHOCKEY\u003c/code\u003e 就是我们的过关代码吗？太天真了！\u003c/p\u003e\n\u003cp\u003e进入 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/hockey.html\"\u003ehttp://www.pythonchallenge.com/pc/def/hockey.html\u003c/a\u003e 之后得到提示「it\u0026#39;s in the air. look at the letters.」 提示说，空气里有这东西，并且让我们看看刚才那图案。我们发现 HOCKEY 分别由 oxygen 组成。看来 \u003ccode\u003eoxygen\u003c/code\u003e 才是下一级的入口！\u003c/p\u003e\n\u003ch3 id=\"第七关\"\u003e\u003ca href=\"#第七关\" class=\"headerlink\" title=\"第七关\"\u003e\u003c/a\u003e第七关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\"\u003ehttp://www.pythonchallenge.com/pc/def/oxygen.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e打开来只有一幅图片：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"http://www.pythonchallenge.com/pc/def/oxygen.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e额，这是啥？信息隐藏在中间那个灰度条中嘛？好吧我们来处理图片好了。Python Imaging Library 提供了 \u003ccode\u003eImage\u003c/code\u003e 模块，可以用来处理图片。\u003c/p\u003e\n\u003cp\u003e我们需要先\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonware.com/products/pil/\"\u003e下载\u003c/a\u003e安装。Image 模块提供了 \u003ccode\u003egetpixel\u003c/code\u003e 来获得某个像素点上的 RGBA 值（RGB 是颜色，A 是不透明度）。对于灰度图片来说，RGB 三者的值应该相等，我们可以据此提出所需的灰度部分，然后进行判断。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib, Image, StringIO\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eif_grey_scale\u003c/span\u003e(\u003cspan class=\"params\"\u003eRGBA\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e RGBA[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] == RGBA[\u003cspan class=\"number\"\u003e1\u003c/span\u003e] == RGBA[\u003cspan class=\"number\"\u003e2\u003c/span\u003e]:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eif_grey_scale_line\u003c/span\u003e(\u003cspan class=\"params\"\u003elinePx\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e px \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e linePx[:\u003cspan class=\"number\"\u003e10\u003c/span\u003e]:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e if_grey_scale(px):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003epass\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eget_line_px\u003c/span\u003e(\u003cspan class=\"params\"\u003eimage, width, heightNum\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e [image.getpixel((i, heightNum)) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(width)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimageWeb = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(StringIO.StringIO(urllib.urlopen(\u003cspan class=\"string\"\u003e\u0026#39;http://www.pythonchallenge.com/pc/def/oxygen.png\u0026#39;\u003c/span\u003e).read()))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewidth, height = imageWeb.size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(height):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e if_grey_scale_line(get_line_px(imageWeb, width, i)):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e i\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([\u003cspan class=\"built_in\"\u003echr\u003c/span\u003e(imageWeb.getpixel((j, i))[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e,width)])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003epass\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们发现最终的输出中，大部分字母都重复了 7 次。这说明图片中一个灰度小块的宽度是 7 个像素。我们可以取其中的一行（比如 47 行），然后将步长设置为 7:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([\u003cspan class=\"built_in\"\u003echr\u003c/span\u003e(imageWeb.getpixel((j, \u003cspan class=\"number\"\u003e47\u003c/span\u003e))[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e,width,\u003cspan class=\"number\"\u003e8\u003c/span\u003e)])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样就能得到最终的结果了：\u0026#34;smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]\u0026#34;. 再次转换这个结果：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e.join([\u003cspan class=\"built_in\"\u003echr\u003c/span\u003e(j) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e [\u003cspan class=\"number\"\u003e105\u003c/span\u003e, \u003cspan class=\"number\"\u003e110\u003c/span\u003e, \u003cspan class=\"number\"\u003e116\u003c/span\u003e, \u003cspan class=\"number\"\u003e101\u003c/span\u003e, \u003cspan class=\"number\"\u003e103\u003c/span\u003e, \u003cspan class=\"number\"\u003e114\u003c/span\u003e, \u003cspan class=\"number\"\u003e105\u003c/span\u003e, \u003cspan class=\"number\"\u003e116\u003c/span\u003e, \u003cspan class=\"number\"\u003e121\u003c/span\u003e]])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到：integrity. 这就是我们的通关密码！\u003c/p\u003e\n\u003ch3 id=\"第八关\"\u003e\u003ca href=\"#第八关\" class=\"headerlink\" title=\"第八关\"\u003e\u003c/a\u003e第八关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/def/integrity.html\"\u003ehttp://www.pythonchallenge.com/pc/def/integrity.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e点开之后发现，有一幅图片，上面画着一只蜜蜂；图片下面是提示「隐藏的链接在哪里」。鼠标点击蜜蜂会进入到下一关的页面——不过没这么简单，要输入密码的。\u003c/p\u003e\n\u003cp\u003e输入密码提示单词 \u003ccode\u003einflate\u003c/code\u003e, 意为膨胀。\u003c/p\u003e\n\u003cp\u003e至此，线索已经断了，于是回到第八关页面，右键查看网页源代码，发现注释部分有\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eun: \u0026#39;BZh91AY\u0026amp;SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07\u0026lt;]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epw: \u0026#39;BZh91AY\u0026amp;SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13\u0026lt;]\\xc9\\x14\\xe1BBP\\x91\\xf08\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eBZh9\u003c/code\u003e 是 bz2 压缩的著名起始字符。结合 inflate, 不难联想到，我们的任务是通过 un 和 pw 后面的内容，用 bz2 解压得到 username 和 password.\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eun = \u003cspan class=\"string\"\u003e\u0026#39;BZh91AY\u0026amp;SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07\u0026lt;]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epw = \u003cspan class=\"string\"\u003e\u0026#39;BZh91AY\u0026amp;SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13\u0026lt;]\\xc9\\x14\\xe1BBP\\x91\\xf08\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e  bz2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;user name:\u0026#34;\u003c/span\u003e, bz2.decompress(un)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;password:\u0026#34;\u003c/span\u003e, bz2.decompress(pw)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e得到结果 huge 和 file, 进入下一关，结束战斗。\u003c/p\u003e\n\u003ch3 id=\"第九关\"\u003e\u003ca href=\"#第九关\" class=\"headerlink\" title=\"第九关\"\u003e\u003c/a\u003e第九关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/return/good.html\"\u003ehttp://www.pythonchallenge.com/pc/return/good.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e打开网页后见到图片：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"http://huge:file@www.pythonchallenge.com/pc/return/good.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e网页标题提示我们，连点成线。可是图片中的黑色方块连起来啥也不是。打开网页源码发现里面有提示 first + second = ?, 以及两个很长的 list. 莫非是要我们将这两个 list 当作是坐标来连线？用 PIL 的 ImageDraw 模块可以搞定。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image, ImageDraw\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efirst = [ ... ]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esecond = [ ... ]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enewImage = Image.new(\u003cspan class=\"string\"\u003e\u0026#39;RGB\u0026#39;\u003c/span\u003e, (\u003cspan class=\"number\"\u003e640\u003c/span\u003e,\u003cspan class=\"number\"\u003e480\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edraw = ImageDraw.Draw(newImage)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edraw.line(first)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edraw.line(second)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edel\u003c/span\u003e draw\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enewImage.save(\u003cspan class=\"string\"\u003e\u0026#39;./good.png\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们得到的结果是：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/good.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e这是一头公牛——想想 NBA 里的公牛队——答案是 bull！\u003c/p\u003e\n\u003ch3 id=\"第十关\"\u003e\u003ca href=\"#第十关\" class=\"headerlink\" title=\"第十关\"\u003e\u003c/a\u003e第十关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/return/bull.html\"\u003ehttp://www.pythonchallenge.com/pc/return/bull.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e图片提示是一头牛，要求计算  \u003ccode\u003elen(a[30])\u003c/code\u003e. 标题提示说「你看啥呢」，看样子又是故技重施。我们点击图片上的牛，进入 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/return/sequence.txt\"\u003ehttp://www.pythonchallenge.com/pc/return/sequence.txt\u003c/a\u003e, 发现了一个不完整的数字序列：\u003ccode\u003ea = [1, 11, 21, 1211, 111221,\u003c/code\u003e. 所以我们的任务是找这个序列的规律，然后找到它的第 30 项然后返回长度。\u003c/p\u003e\n\u003cp\u003e乍一看，这是什么情况，小学奥数嘛？把序列放 Google 里搜索，发现这是一个叫做「外观序列」的东西，参见\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://zh.wikipedia.org/zh/%E5%A4%96%E8%A7%80%E6%95%B8%E5%88%97\"\u003e维基百科\u003c/a\u003e。意思是，序列的后一项是对前一项的描述。比如 \u003ccode\u003e11\u003c/code\u003e 表示「一个 1」，也就是前一项的 1；又比如 \u003ccode\u003e111221\u003c/code\u003e 表示「一个 1, 一个 2, 两个 1」，也就是前一项的 1211.\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e re\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einitNum = \u003cspan class=\"string\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e each \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(\u003cspan class=\"number\"\u003e30\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    initNum = \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e.join([\u003cspan class=\"built_in\"\u003estr\u003c/span\u003e(\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(i + j)) + i \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i, j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e re.findall(\u003cspan class=\"string\"\u003er\u0026#34;(\\d)(\\1*)\u0026#34;\u003c/span\u003e, initNum)])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(initNum)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里写了一个用正则表达式处理的代码。其中的 \u003ccode\u003e(\\d)(\\1*)\u003c/code\u003e 表示匹配任意数字的连续，也就是匹配 111, 22 这样的序列。这样我们就能得到答案了。返回 \u003ccode\u003e5808\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"第十一关\"\u003e\u003ca href=\"#第十一关\" class=\"headerlink\" title=\"第十一关\"\u003e\u003c/a\u003e第十一关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.pythonchallenge.com/pc/return/5808.html\"\u003ehttp://www.pythonchallenge.com/pc/return/5808.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e打开页面后，是一幅图片：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"http://huge:file@www.pythonchallenge.com/pc/return/cave.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e唯一的提示是页面标题的\u0026#34;odd even\u0026#34;（奇偶）。\u003c/p\u003e\n\u003cp\u003e仔细查看图片，会发现图片的「颗粒化」现象很严重——几乎每一个像素点的旁边，都有黑色的颗粒。再结合「奇偶」这个提示，我们有理由猜想，图片是两张图拼接起来的，像素坐标的奇偶分别对应着一张图。\u003c/p\u003e\n\u003cp\u003e现在我们可以对图片的横纵坐标，分别取出奇数序列和偶数序列，然后生成四幅图片：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ex-odd, y-odd\u003c/li\u003e\n\u003cli\u003ex-odd, y-even\u003c/li\u003e\n\u003cli\u003ex-even, y-even\u003c/li\u003e\n\u003cli\u003ex-even, y-odd\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e代码：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e StringIO\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eim = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(StringIO.StringIO(urllib.urlopen(\u003cspan class=\"string\"\u003e\u0026#39;http://huge:file@www.pythonchallenge.com/pc/return/cave.jpg\u0026#39;\u003c/span\u003e).read()))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ew, h = im.size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimgs = [Image.new(im.mode, (w / \u003cspan class=\"number\"\u003e2\u003c/span\u003e, h / \u003cspan class=\"number\"\u003e2\u003c/span\u003e)) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e dummy \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(\u003cspan class=\"number\"\u003e4\u003c/span\u003e)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimgs_load = [i.load() \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e imgs]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eorg = im.load()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(w):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(h):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        org_pos = (i, j)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        new_pos = (i // \u003cspan class=\"number\"\u003e2\u003c/span\u003e, j // \u003cspan class=\"number\"\u003e2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        imgs_load[i % \u003cspan class=\"number\"\u003e2\u003c/span\u003e + j % \u003cspan class=\"number\"\u003e2\u003c/span\u003e * \u003cspan class=\"number\"\u003e2\u003c/span\u003e ][new_pos] = org[org_pos]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[imgs[i].save(\u003cspan class=\"string\"\u003e\u0026#39;%d.png\u0026#39;\u003c/span\u003e % i) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(\u003cspan class=\"number\"\u003e4\u003c/span\u003e)]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样我们生成了四幅图片：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/oddeven/0.png\"/\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/oddeven/1.png\"/\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/oddeven/2.png\"/\u003e\u003cimg data-src=\"//liam.page/attachment/attachment/images/Python/oddeven/3.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e可以看到图中的 evil 字样。这就是下一关的钥匙。\u003c/p\u003e\n\u003ch3 id=\"第十二关\"\u003e\u003ca href=\"#第十二关\" class=\"headerlink\" title=\"第十二关\"\u003e\u003c/a\u003e第十二关\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://huge:file@www.pythonchallenge.com/pc/return/evil.html\"\u003ehttp://www.pythonchallenge.com/pc/return/evil.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e打开网页后发现只有一张图片，看图片那样子似乎又要处理？网页标题提示 dealing evil, 即处理 evil. 打开网页源代码，没啥特别的信息。\u003c/p\u003e\n\u003cp\u003e等等！\u003c/p\u003e\n\u003cp\u003e图片的名字是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://huge:file@www.pythonchallenge.com/pc/return/evil1.jpg\"\u003ehttp://www.pythonchallenge.com/pc/return/evil1.jpg\u003c/a\u003e, 那么有 evil1 的话，会不会还有 evil2, evil3, evil4 ... 呢？\u003c/p\u003e\n\u003cp\u003e在地址栏中把地址改成 evil2.jpg, 得到一张图片，上面歪歪曲曲地写着\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003enot .jpg .gfx\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e于是把 evil2.jpg 改成 evil2.gfx, 得到一个十六进制文件。继续改 evil3.jpg, 得到图片说\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eno more evils...\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e嗯，提示说没有恶魔（复数）了，那么就是还有一个？继续改 evil4.jpg, 页面提示\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBert is evil! go back!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e答案和 bert 有关嘛？进入地址 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://huge:file@www.pythonchallenge.com/pc/return/bert.html\"\u003ehttp://www.pythonchallenge.com/pc/return/bert.html\u003c/a\u003e, 页面提示说\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYes! Bert is evil!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e看来答案果然和 bert 有关。Google 搜索发现 BERT 是 Bit Error Ratio Test 的缩写（比特误码率测试）。我们先前得到的 gfx 文件是一个十六进制的文件（换言之，可以很简单地转换成二进制文件），这就和所谓的比特误码率很相关了。所以难道信息隐藏在 BERT 里面吗？Google 许久未果，没发现和题目有什么有什么关系。看样子又要卡几天了。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2014-01-17T16:00:00Z",
  "Author": "Liam Huang"
}