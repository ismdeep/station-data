{
  "Source": "liam.page",
  "Title": "PIL 简明教程 - 像素操作与图像滤镜",
  "Link": "https://liam.page/2017/08/06/pil-tutorial-pixel-operations-and-image-filter/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e这是系列文章的第三篇，参见\u003ca href=\"/series\"\u003e系列\u003c/a\u003e中的相关内容。\u003c/p\u003e\n\u003cp\u003e这篇文章介绍如何利用 PIL 库，获取图像中的像素内容、修改后生成新的图像。此外，在修改的过程中，我们会引入卷积滤镜，进而引出 PIL 中的图像滤镜库 \u003ccode\u003eImageFilter\u003c/code\u003e。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"获取像素内容\"\u003e\u003ca href=\"#获取像素内容\" class=\"headerlink\" title=\"获取像素内容\"\u003e\u003c/a\u003e获取像素内容\u003c/h2\u003e\u003cp\u003e位图是有一个个像素组成的。因此，读入一张图片，实际上就是读入了一系列的像素内容。这些像素内容，按照不同的\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://pillow.readthedocs.io/en/3.4.x/handbook/concepts.html#concept-modes\"\u003e模式\u003c/a\u003e具有不同的格式。对于三通道的 RGB 位图来说，每个像素是一个 8-bit 整数的三元组。例如 \u003ccode\u003ergb(0, 0, 0)\u003c/code\u003e 表示纯黑色，而 \u003ccode\u003ergb(255, 255, 255)\u003c/code\u003e 则表示纯白色。\u003c/p\u003e\n\u003cp\u003e前文介绍过，\u003ccode\u003eImage.open()\u003c/code\u003e 可以打开一张图片，返回一个 \u003ccode\u003eImage\u003c/code\u003e 类的对象。那么，我们怎样获得这一图片的像素内容呢？\u003c/p\u003e\n\u003cp\u003ePIL 提供了 \u003ccode\u003ePIL.Image.getdata(band = None)\u003c/code\u003e 方法，用来获取 \u003ccode\u003eImage\u003c/code\u003e 类的对象中的像素内容。\u003c/p\u003e\n\u003cp\u003e该方法会将图片中的像素内容，逐行逐行地拼接起来\u003cdel\u003e（俗称降维打击）\u003c/del\u003e，作为一个完整的序列返回。方法的返回类型，是 PIL 库的内部类型。我们可以用 \u003ccode\u003elist(im.getdata())\u003c/code\u003e 得到标准的 Python \u003ccode\u003elist\u003c/code\u003e 对象。\u003c/p\u003e\n\u003cp\u003e该方法的参数中，\u003ccode\u003eband\u003c/code\u003e 意味「通道」。当 \u003ccode\u003eband = None\u003c/code\u003e 时，方法返回所有通道的像素内容；当 \u003ccode\u003eband = 0\u003c/code\u003e 时，则返回第一个通道的像素内容。例如，对于 RGB 模式的位图，\u003ccode\u003eband = 0\u003c/code\u003e 返回 R 通道的内容；\u003ccode\u003eband = 2\u003c/code\u003e 返回 \u003ccode\u003eB\u003c/code\u003e 通道的内容。\u003c/p\u003e\n\u003cp\u003e示例代码：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eim = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;cat.jpg\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ergb_pixels = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e(im.getdata())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er_pixels   = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e(im.getdata(band = \u003cspan class=\"number\"\u003e0\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eg_pixels   = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e(im.getdata(band = \u003cspan class=\"number\"\u003e1\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eb_pixels   = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e(im.getdata(band = \u003cspan class=\"number\"\u003e2\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(rgb_pixels[:\u003cspan class=\"number\"\u003e10\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(r_pixels[:\u003cspan class=\"number\"\u003e10\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(g_pixels[:\u003cspan class=\"number\"\u003e10\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(b_pixels[:\u003cspan class=\"number\"\u003e10\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可能的输出：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e[(\u003cspan class=\"number\"\u003e130\u003c/span\u003e, \u003cspan class=\"number\"\u003e82\u003c/span\u003e, \u003cspan class=\"number\"\u003e8\u003c/span\u003e), (\u003cspan class=\"number\"\u003e132\u003c/span\u003e, \u003cspan class=\"number\"\u003e84\u003c/span\u003e, \u003cspan class=\"number\"\u003e8\u003c/span\u003e), (\u003cspan class=\"number\"\u003e136\u003c/span\u003e, \u003cspan class=\"number\"\u003e87\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e), (\u003cspan class=\"number\"\u003e141\u003c/span\u003e, \u003cspan class=\"number\"\u003e90\u003c/span\u003e, \u003cspan class=\"number\"\u003e11\u003c/span\u003e), (\u003cspan class=\"number\"\u003e143\u003c/span\u003e, \u003cspan class=\"number\"\u003e90\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e), (\u003cspan class=\"number\"\u003e145\u003c/span\u003e, \u003cspan class=\"number\"\u003e90\u003c/span\u003e, \u003cspan class=\"number\"\u003e7\u003c/span\u003e), (\u003cspan class=\"number\"\u003e144\u003c/span\u003e, \u003cspan class=\"number\"\u003e88\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e), (\u003cspan class=\"number\"\u003e144\u003c/span\u003e, \u003cspan class=\"number\"\u003e87\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e), (\u003cspan class=\"number\"\u003e147\u003c/span\u003e, \u003cspan class=\"number\"\u003e85\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e), (\u003cspan class=\"number\"\u003e148\u003c/span\u003e, \u003cspan class=\"number\"\u003e84\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e130\u003c/span\u003e, \u003cspan class=\"number\"\u003e132\u003c/span\u003e, \u003cspan class=\"number\"\u003e136\u003c/span\u003e, \u003cspan class=\"number\"\u003e141\u003c/span\u003e, \u003cspan class=\"number\"\u003e143\u003c/span\u003e, \u003cspan class=\"number\"\u003e145\u003c/span\u003e, \u003cspan class=\"number\"\u003e144\u003c/span\u003e, \u003cspan class=\"number\"\u003e144\u003c/span\u003e, \u003cspan class=\"number\"\u003e147\u003c/span\u003e, \u003cspan class=\"number\"\u003e148\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e82\u003c/span\u003e, \u003cspan class=\"number\"\u003e84\u003c/span\u003e, \u003cspan class=\"number\"\u003e87\u003c/span\u003e, \u003cspan class=\"number\"\u003e90\u003c/span\u003e, \u003cspan class=\"number\"\u003e90\u003c/span\u003e, \u003cspan class=\"number\"\u003e90\u003c/span\u003e, \u003cspan class=\"number\"\u003e88\u003c/span\u003e, \u003cspan class=\"number\"\u003e87\u003c/span\u003e, \u003cspan class=\"number\"\u003e85\u003c/span\u003e, \u003cspan class=\"number\"\u003e84\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e8\u003c/span\u003e, \u003cspan class=\"number\"\u003e8\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"number\"\u003e11\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"number\"\u003e7\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"写入像素内容\"\u003e\u003ca href=\"#写入像素内容\" class=\"headerlink\" title=\"写入像素内容\"\u003e\u003c/a\u003e写入像素内容\u003c/h2\u003e\u003cp\u003e上一节介绍了如何从一个 \u003ccode\u003eImage\u003c/code\u003e 类的对象中获得像素内容。现在我们考虑它的镜像问题：如何将已知的像素内容写入一个新的 \u003ccode\u003eImage\u003c/code\u003e 类的对象。\u003c/p\u003e\n\u003cp\u003e在介绍 \u003ccode\u003ePIL.Image.getdata()\u003c/code\u003e 的过程中，我们提到，该方法返回的内容是一个一维的序列。这个过程，实际上丢失了图像的模式、尺寸等信息。那么在从像素内容恢复到 \u003ccode\u003eImage\u003c/code\u003e 类的对象的过程中，我们就必须补足这些信息。因此，我们首先需要获取原图像的模式和尺寸。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eim = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;cat.jpg\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emode = im.mode\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewidth, height = im.size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimn = Image.new(mode, (height, width))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如此，我们就创建了一个新的 \u003ccode\u003eImage\u003c/code\u003e 类的对象。它的模式与 \u003ccode\u003eim\u003c/code\u003e 保持一致，尺寸则相对 \u003ccode\u003eim\u003c/code\u003e 长宽颠倒。现在，我们可以向 \u003ccode\u003eimn\u003c/code\u003e 中写入像素内容了。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePIL.Image.putdata(data, scale=1.0, offset=0.0)\u003c/code\u003e 方法允许我们将像素内容写入 \u003ccode\u003eImage\u003c/code\u003e 类的对象。\u003c/p\u003e\n\u003cp\u003e该方法将序列类型 \u003ccode\u003edata\u003c/code\u003e 拷贝进 \u003ccode\u003eImage\u003c/code\u003e 类的对象，直到 \u003ccode\u003eImage\u003c/code\u003e 类的对象容纳不下更多的像素或 \u003ccode\u003edata\u003c/code\u003e 内容已耗尽。\u003ccode\u003escale\u003c/code\u003e 和 \u003ccode\u003eoffset\u003c/code\u003e 则是针对每一个像素值进行调整：\u003ccode\u003epixel = value * scale + offset\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e据此，我们可以写出完整的代码。首先来看看原图。\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/python/cat.jpg\" alt=\"一只惊讶的猫\"/\u003e\u003c/p\u003e\n\u003cp\u003e示例代码：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eim = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;cat.jpg\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emode = im.mode\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewidth, height = im.size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ergb_pixels = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e(im.getdata())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimn = Image.new(mode, (height, width))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimn.putdata(data = rgb_pixels)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimn.save(\u003cspan class=\"string\"\u003e\u0026#39;funny_cat.jpg\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结果：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/python/funny_cat.jpg\" alt=\"一只扭曲的猫\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"实际操作看看——实现卷积滤镜\"\u003e\u003ca href=\"#实际操作看看——实现卷积滤镜\" class=\"headerlink\" title=\"实际操作看看——实现卷积滤镜\"\u003e\u003c/a\u003e实际操作看看——实现卷积滤镜\u003c/h2\u003e\u003cp\u003e用固定的矩阵扫描更大的矩阵，这个操作称为卷积。若后者是一张图片，那么这一操作，就是对图像的滤镜操作了。我们在\u003ca href=\"/2017/07/27/convolutions-and-convolution-neural-network/#%E5%9B%BE%E5%83%8F%E7%9A%84%E6%BB%A4%E9%95%9C\"\u003e前作\u003c/a\u003e中介绍了这种操作，此处我们来实践看看。\u003c/p\u003e\n\u003cp\u003e示例代码：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e scipy \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e signal\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eread_image\u003c/span\u003e(\u003cspan class=\"params\"\u003efname\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    im     = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(fname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    width, height = im.size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mode   = im.mode\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pixels = \u003cspan class=\"built_in\"\u003elist\u003c/span\u003e(im.getdata())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    im.close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r_pxs  = \u003cspan class=\"built_in\"\u003emap\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e x:x[\u003cspan class=\"number\"\u003e0\u003c/span\u003e], pixels)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    g_pxs  = \u003cspan class=\"built_in\"\u003emap\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e x:x[\u003cspan class=\"number\"\u003e1\u003c/span\u003e], pixels)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    b_pxs  = \u003cspan class=\"built_in\"\u003emap\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e x:x[\u003cspan class=\"number\"\u003e2\u003c/span\u003e], pixels)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r_pxs  = [r_pxs[i * width:(i + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) * width] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(height)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    g_pxs  = [g_pxs[i * width:(i + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) * width] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(height)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    b_pxs  = [b_pxs[i * width:(i + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) * width] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(height)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e mode, (width, height), (r_pxs, g_pxs, b_pxs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003econvolve2d\u003c/span\u003e(\u003cspan class=\"params\"\u003ex, ker, mode = \u003cspan class=\"string\"\u003e\u0026#39;same\u0026#39;\u003c/span\u003e, boundary = \u003cspan class=\"string\"\u003e\u0026#39;wrap\u0026#39;\u003c/span\u003e\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    a = np.asarray(x, dtype = \u003cspan class=\"built_in\"\u003efloat\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    b = np.asarray(ker, dtype = \u003cspan class=\"built_in\"\u003efloat\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res = signal.convolve2d(a, b, mode, boundary)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e res\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003efilter_image\u003c/span\u003e(\u003cspan class=\"params\"\u003emode, size, rgb, kernel, fname\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r   = convolve2d(rgb[\u003cspan class=\"number\"\u003e0\u003c/span\u003e], kernel)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    g   = convolve2d(rgb[\u003cspan class=\"number\"\u003e1\u003c/span\u003e], kernel)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    b   = convolve2d(rgb[\u003cspan class=\"number\"\u003e2\u003c/span\u003e], kernel)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    int_it = \u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e f:\u003cspan class=\"built_in\"\u003eint\u003c/span\u003e(\u003cspan class=\"built_in\"\u003eround\u003c/span\u003e(f, \u003cspan class=\"number\"\u003e0\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pixels = \u003cspan class=\"built_in\"\u003emap\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e x, y, z: (int_it(x), int_it(y), int_it(z)),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            r.flat, g.flat, b.flat)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res = Image.new(mode, size)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res.putdata(pixels)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res.save(fname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res.close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    base, ext = \u003cspan class=\"string\"\u003e\u0026#39;cat\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;jpg\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ifname = \u003cspan class=\"string\"\u003e\u0026#34;%s.%s\u0026#34;\u003c/span\u003e % (base, ext)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ofname = \u003cspan class=\"string\"\u003e\u0026#34;%s_blur.%s\u0026#34;\u003c/span\u003e % (base, ext)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    blur_5 = [[\u003cspan class=\"number\"\u003e1.0\u003c/span\u003e / \u003cspan class=\"number\"\u003e25.0\u003c/span\u003e] * \u003cspan class=\"number\"\u003e5\u003c/span\u003e] * \u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mode, size, rgb = read_image(ifname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    filter_image(mode, size, rgb, blur_5, ofname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ofname = \u003cspan class=\"string\"\u003e\u0026#34;%s_shrp.%s\u0026#34;\u003c/span\u003e % (base, ext)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    shrp_3 = [[\u003cspan class=\"number\"\u003e0\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              [-\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              [\u003cspan class=\"number\"\u003e0\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mode, size, rgb = read_image(ifname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    filter_image(mode, size, rgb, shrp_3, ofname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ofname = \u003cspan class=\"string\"\u003e\u0026#34;%s_dtct.%s\u0026#34;\u003c/span\u003e % (base, ext)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dtct_3 = [[-\u003cspan class=\"number\"\u003e1\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              [-\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e8\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              [-\u003cspan class=\"number\"\u003e1\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e, -\u003cspan class=\"number\"\u003e1\u003c/span\u003e]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mode, size, rgb = read_image(ifname)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    filter_image(mode, size, rgb, dtct_3, ofname)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处 \u003ccode\u003eread_image\u003c/code\u003e 函数从一个图像文件中读入其模式、尺寸及 RGB 三通道矩阵。\u003ccode\u003econvolve2d\u003c/code\u003e 函数利用了 \u003ccode\u003escipy\u003c/code\u003e 库中的 \u003ccode\u003esignal.convolve2d\u003c/code\u003e 函数，对图像的单通道进行卷积操作——滤镜。\u003ccode\u003efilter_image\u003c/code\u003e 函数则是对 \u003ccode\u003econvolve2d\u003c/code\u003e 的封装，从上述模式、尺寸及 RGB 三通道矩阵开始，使用 \u003ccode\u003ekerner\u003c/code\u003e 作为卷积核进行滤镜操作，并将图片保存下来。\u003c/p\u003e\n\u003cp\u003e此处我们选择了三个卷积核。\u003ccode\u003eblur_5\u003c/code\u003e 将目标像素周围的 5*5 的像素平均起来，起到 box-模糊化的作用。\u003ccode\u003eshrp_3\u003c/code\u003e 加强了目标像素的作用，同时减弱了上下左右四个像素的干扰，起到了锐化的作用。\u003ccode\u003edtct_3\u003c/code\u003e 则凸显了哪些与周围 8 个像素具有明显差异的像素，起到了边缘检测的作用。三个滤镜的效果可以参见：\u003ca href=\"/uploads/images/python/cat.jpg\"\u003e原图\u003c/a\u003e/\u003ca href=\"/uploads/images/python/cat_blur.jpg\"\u003e模糊化\u003c/a\u003e/\u003ca href=\"/uploads/images/python/cat_shrp.jpg\"\u003e锐化\u003c/a\u003e/\u003ca href=\"/uploads/images/python/cat_dtct.jpg\"\u003e边缘检测\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"使用-ImageFilter-预定义的滤镜\"\u003e\u003ca href=\"#使用-ImageFilter-预定义的滤镜\" class=\"headerlink\" title=\"使用 ImageFilter 预定义的滤镜\"\u003e\u003c/a\u003e使用 \u003ccode\u003eImageFilter\u003c/code\u003e 预定义的滤镜\u003c/h2\u003e\u003cp\u003ePIL 库在 \u003ccode\u003eImageFilter\u003c/code\u003e 模块中已经为我们预定义好了一些滤镜。同时 \u003ccode\u003eImage\u003c/code\u003e 模块也提供了 \u003ccode\u003efilter\u003c/code\u003e 方法应用滤镜：\u003ccode\u003eImage.filter(filter_object)\u003c/code\u003e。因此，我们可以用 \u003ccode\u003eImageFilter\u003c/code\u003e 提供的 \u003ccode\u003eKernel\u003c/code\u003e 滤镜，很方便地复现上一节中的滤镜效果。（\u003ccode\u003eKernel\u003c/code\u003e 当前仅支持 3\u003cem\u003e3 或 5\u003c/em\u003e5 的滤镜，sad）。\u003c/p\u003e\n\u003cp\u003e示例代码：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e ImageFilter\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eim = Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#39;cat.jpg\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimn = im.\u003cspan class=\"built_in\"\u003efilter\u003c/span\u003e(ImageFilter.Kernel(size = (\u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e), kernel = [\u003cspan class=\"number\"\u003e1.0\u003c/span\u003e / \u003cspan class=\"number\"\u003e25.0\u003c/span\u003e] * \u003cspan class=\"number\"\u003e25\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimn.show()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e效果：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/python/cat_blur.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e你可以在\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://pillow.readthedocs.io/en/3.4.x/reference/ImageFilter.html\"\u003e官方文档\u003c/a\u003e中找到更多的滤镜。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-08-06T07:25:43Z",
  "Author": "Liam Huang"
}