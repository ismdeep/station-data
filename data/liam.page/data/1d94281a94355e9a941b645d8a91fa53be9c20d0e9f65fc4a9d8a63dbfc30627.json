{
  "Source": "liam.page",
  "Title": "谈谈 STL 中的 std::sort",
  "Link": "https://liam.page/2018/09/18/std-sort-in-STL/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e前些天在 Bilibili 上看到一个视频（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.bilibili.com/video/av26760438/\"\u003e6 分钟演示 15 种排序算法\u003c/a\u003e）。好事者戏称：「在视频中，你能听到：冒泡咕噜声、飞机坠地声、暖瓶灌水声、猴子乱叫声等等」，实在搞笑得很。\u003c/p\u003e\n\u003cp\u003eC++ 的标准模板库有一个很霸气的解读：「标准模板库里的任意算法、数据结构，你找不到一个实现，在所有的情况下都优于标准模板库的实现；否则，它就应该进入标准模板库」。因此，对于排序问题来说，C++ 里的标准模板库中的 \u003ccode\u003estd::sort\u003c/code\u003e 可想而知是一个在绝大多数情况下都能达到极限性能的排序算法。\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e前文\u003c/a\u003e介绍的内省式排序算法正是 \u003ccode\u003estd::sort\u003c/code\u003e 采用的算法。但仅有一个理论上优秀的算法是不够的，\u003ccode\u003estd::sort\u003c/code\u003e 在内部也有很多技巧和权衡值得细细品味。这篇文章尝试来剖析 \u003ccode\u003estd::sort\u003c/code\u003e。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003e侯捷的《STL 源码剖析》选择了 SGI STL 2.91 版本来分析，理由是这个版本在技术层次、源代码组织、源代码可读性等方面的表现都非常好，并且这个版本代码较为稳定。本文也以这个版本为基础进行分析。\u003c/p\u003e\n\u003ch2 id=\"std-sort\"\u003e\u003ca href=\"#std-sort\" class=\"headerlink\" title=\"std::sort\"\u003e\u003c/a\u003e\u003ccode\u003estd::sort\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e简便起见，我们分析默认版本的 \u003ccode\u003estd::sort\u003c/code\u003e，而不讨论传入仿函数 \u003ccode\u003eCompare\u003c/code\u003e 的版本。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003esort\u003c/span\u003e\u003cspan class=\"params\"\u003e(RandomAccessIterator first, RandomAccessIterator last)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (first != last) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __introsort_loop(first, last, \u003cspan class=\"built_in\"\u003evalue_type\u003c/span\u003e(first), __lg(last - first) * \u003cspan class=\"number\"\u003e2\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __final_insertion_sort(first, last);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是一个函数模板，接受两个随机访问迭代器 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e。两个随机访问迭代器构成了待排序的左闭右开区间 \u003ccode\u003e[first, last)\u003c/code\u003e。注意，这里假设 \u003ccode\u003elast\u003c/code\u003e 不会先于 \u003ccode\u003efirst\u003c/code\u003e。显然，此时区间的有效性等价于 \u003ccode\u003efirst != last\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e内部的 \u003ccode\u003e__introsort_loop\u003c/code\u003e 即是\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e上一篇文章\u003c/a\u003e介绍的内省式排序的实现。\u003ccode\u003e__final_insertion_sort\u003c/code\u003e 则是插入排序，参照\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e前文\u003c/a\u003e它在几乎有序的情况下效率很高。因此 \u003ccode\u003estd::sort\u003c/code\u003e 在内省式排序基本完成任务后调用插入排序以提升效率。\u003c/p\u003e\n\u003ch2 id=\"introsort-loop\"\u003e\u003ca href=\"#introsort-loop\" class=\"headerlink\" title=\"__introsort_loop\"\u003e\u003c/a\u003e\u003ccode\u003e__introsort_loop\u003c/code\u003e\u003c/h2\u003e\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSize\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e __introsort_loop(RandomAccessIterator first,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                      RandomAccessIterator last, T*,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                      Size depth_limit) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (last - first \u0026gt; __stl_threshold) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (depth_limit == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"built_in\"\u003epartial_sort\u003c/span\u003e(first, last, last);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        --depth_limit;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        RandomAccessIterator cut = __unguarded_partition\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          (first, last, \u003cspan class=\"built_in\"\u003eT\u003c/span\u003e(__median(*first, *(first + (last - first) / \u003cspan class=\"number\"\u003e2\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                   *(last - \u003cspan class=\"number\"\u003e1\u003c/span\u003e))));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __introsort_loop(cut, last, \u003cspan class=\"built_in\"\u003evalue_type\u003c/span\u003e(first), depth_limit);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        last = cut;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是内省式排序的实现，它接收 4 个参数：前两个参数对应 \u003ccode\u003estd::sort\u003c/code\u003e 的左闭右开区间，第三个参数利用 Type Traits 获取待排序区间元素的类型，第四个参数则是\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e前文\u003c/a\u003e提到的递归深度限制。\u003c/p\u003e\n\u003ch3 id=\"stl-threshold\"\u003e\u003ca href=\"#stl-threshold\" class=\"headerlink\" title=\"__stl_threshold\"\u003e\u003c/a\u003e\u003ccode\u003e__stl_threshold\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e\u003ccode\u003e__stl_threshold\u003c/code\u003e 是一个预定义的宏，它对应\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e前文\u003c/a\u003e提到的超参数。当左闭右开区间的长度不大于该超参数时，可以认为序列基本有序，于是退出内省式排序，转向插入排序。\u003c/p\u003e\n\u003ch3 id=\"if-depth-limit-0-与-depth-limit\"\u003e\u003ca href=\"#if-depth-limit-0-与-depth-limit\" class=\"headerlink\" title=\"if (depth_limit == 0) 与 --depth_limit\"\u003e\u003c/a\u003e\u003ccode\u003eif (depth_limit == 0)\u003c/code\u003e 与 \u003ccode\u003e--depth_limit\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e这是内省式排序判断快排递归恶化的一步。每次 \u003ccode\u003e__introsort_loop\u003c/code\u003e 的递归，参数 \u003ccode\u003edepth_limit\u003c/code\u003e 都会自减一次；当该参数为 0 时，意味着递归深度已经很深，很可能快排掉入了陷阱，因此调用堆排，并退出递归。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCompare\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e __partial_sort(RandomAccessIterator first, RandomAccessIterator middle,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    RandomAccessIterator last, T*, Compare comp) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003emake_heap\u003c/span\u003e(first, middle, comp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (RandomAccessIterator i = middle; i \u0026lt; last; ++i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"built_in\"\u003ecomp\u003c/span\u003e(*i, *first))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            __pop_heap(first, middle, i, \u003cspan class=\"built_in\"\u003eT\u003c/span\u003e(*i), comp, \u003cspan class=\"built_in\"\u003edistance_type\u003c/span\u003e(first));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003esort_heap\u003c/span\u003e(first, middle, comp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eCompare\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003epartial_sort\u003c/span\u003e\u003cspan class=\"params\"\u003e(RandomAccessIterator first,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                         RandomAccessIterator middle,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                         RandomAccessIterator last, Compare comp)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    __partial_sort(first, middle, last, \u003cspan class=\"built_in\"\u003evalue_type\u003c/span\u003e(first), comp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e值得一提的是，在 \u003ccode\u003estd::sort\u003c/code\u003e 当中，内省式排序的 \u003ccode\u003edepth_limit\u003c/code\u003e 初始值是 \u003ccode\u003e__lg(last - first) * 2\u003c/code\u003e，即 $2\\log_2{n}$。这与\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e前文\u003c/a\u003e的分析是一致的。\u003c/p\u003e\n\u003ch3 id=\"递归结构\"\u003e\u003ca href=\"#递归结构\" class=\"headerlink\" title=\"递归结构\"\u003e\u003c/a\u003e递归结构\u003c/h3\u003e\u003cp\u003e处理过恶化情况后，理应是正常的快排算法的实现了。快排是一个典型的递归算法，写起来其实很简单：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eqsort\u003c/span\u003e(first, last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cut = \u003cspan class=\"built_in\"\u003epartition\u003c/span\u003e(first, last, pivot)  \u003cspan class=\"comment\"\u003e// pivot is picked in [first, last)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eqsort\u003c/span\u003e(cut + \u003cspan class=\"number\"\u003e1\u003c/span\u003e, last)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eqsort\u003c/span\u003e(first, cut)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这无非是先分割，然后递归分别处理左右子序列。但是 \u003ccode\u003estd::sort\u003c/code\u003e 里的快排，生生写成了类似这样：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eqsort\u003c/span\u003e(first, last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (valid) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cut = \u003cspan class=\"built_in\"\u003epartition\u003c/span\u003e(first, last, pivot)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eqsort\u003c/span\u003e(cut + \u003cspan class=\"number\"\u003e1\u003c/span\u003e, last)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        last = cut\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里先分割，然后递归处理右子序列，左子序列则通过重新设置 \u003ccode\u003elast\u003c/code\u003e 的位置交由下一轮循环处理。这种处理方式节省了一半的递归调用开销；在待排序序列非常长的时候，无疑能提高不少效率。可谓「为了效率，无所不用其极」。\u003c/p\u003e\n\u003ch3 id=\"pivot-的选择\"\u003e\u003ca href=\"#pivot-的选择\" class=\"headerlink\" title=\"pivot 的选择\"\u003e\u003c/a\u003epivot 的选择\u003c/h3\u003e\u003cp\u003e\u003ca href=\"/2018/08/29/introspective-sort/\"\u003e前文\u003c/a\u003e提到，快排掉入陷阱的根本原因是主元选择得不好导致分割没有带来任何新的信息量。具体来说，就是主元选择了序列中最大或最小的元素。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e__median(*first, *(first + (last - first) / \u003cspan class=\"number\"\u003e2\u003c/span\u003e), *(last - \u003cspan class=\"number\"\u003e1\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了避免这种情况，\u003ccode\u003estd::sort\u003c/code\u003e 中的快排，主元选择了首元素、尾元素和中央位置元素三者中的中位数。这样一来，除非这三个元素都是最大值或最小值，不然三者的中位数不会是整个序列的最大值或最小值，从而不容易让快排掉入陷阱。\u003c/p\u003e\n\u003ch3 id=\"unguarded-partition\"\u003e\u003ca href=\"#unguarded-partition\" class=\"headerlink\" title=\"__unguarded_partition\"\u003e\u003c/a\u003e\u003ccode\u003e__unguarded_partition\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e快排的核心是根据主元对序列进行分割。\u003ccode\u003estd::sort\u003c/code\u003e 当中使用了 \u003ccode\u003e__unguarded_partition\u003c/code\u003e 函数进行这一操作。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRandomAccessIterator __unguarded_partition(RandomAccessIterator first,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                           RandomAccessIterator last,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                           T pivot) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (*first \u0026lt; pivot) ++first;      \u003cspan class=\"comment\"\u003e// 1.2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        --last;                              \u003cspan class=\"comment\"\u003e// 2.1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (pivot \u0026lt; *last) --last;        \u003cspan class=\"comment\"\u003e// 2.2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!(first \u0026lt; last)) \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e first;   \u003cspan class=\"comment\"\u003e// 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eiter_swap\u003c/span\u003e(first, last);              \u003cspan class=\"comment\"\u003e// 4.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ++first;                             \u003cspan class=\"comment\"\u003e// 1.1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e函数接受 3 个参数，分别是左闭右开区间的迭代器和主元的值。\u003c/p\u003e\n\u003cp\u003e(1.1) 和 (1.2) 配合，将 \u003ccode\u003efirst\u003c/code\u003e 迭代器后移，指向第一个不小于主元的元素。(2.1) 和 (2.2) 配合，将 \u003ccode\u003elast\u003c/code\u003e 迭代器前移，指向第一个不大于主元的元素。在 (3) 处的判断，若第一个不小于主元的元素不先序于第一个不大于主元的元素，则说明分割已经完毕，返回第一个不小于主元的元素的位置，即 \u003ccode\u003efirst\u003c/code\u003e 的当前值；否则，在 (4) 处交换 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e 指向元素的值。参考《STL 源码剖析》的图示：\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/CS/stl-unguarded-partition-sample1.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/CS/stl-unguarded-partition-sample2.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e对于该函数有两个地方值得一提：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e函数没有进行任何边界判断而不会陷入死循环的原因是 \u003ccode\u003epivot\u003c/code\u003e 是 \u003ccode\u003e[first, last)\u003c/code\u003e 内的元素，因此在循环中 \u003ccode\u003efirst\u003c/code\u003e 和 \u003ccode\u003elast\u003c/code\u003e 必然会破坏先序关系（不一定是交错）。避免边界判断，又节省了不少比较开销。\u003c/li\u003e\n\u003cli\u003e不同于标准的 partition 返回主元的分割位置，\u003ccode\u003e__unguarded_partition\u003c/code\u003e 返回的是第一个不小于主元的元素位置。由于在 \u003ccode\u003e[first, last)\u003c/code\u003e 长度足够小时，函数会退出并交由插入排序实现，这种设计并不会影响算法的正确性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-insertion-sort\"\u003e\u003ca href=\"#final-insertion-sort\" class=\"headerlink\" title=\"__final_insertion_sort\"\u003e\u003c/a\u003e\u003ccode\u003e__final_insertion_sort\u003c/code\u003e\u003c/h2\u003e\u003c!-- 参见：[这里](http://feihu.me/blog/2014/sgi-std-sort/#%E4%B8%BA%E4%BD%95__final_insertion_sort%E5%A6%82%E6%AD%A4%E5%AE%9E%E7%8E%B0) --\u003e\n\n\u003cp\u003e在 \u003ccode\u003e__introsort_loop\u003c/code\u003e 将 \u003ccode\u003e[first, last)\u003c/code\u003e 调整为基本有序后，就会转而进入插入排序。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e __final_insertion_sort(RandomAccessIterator first,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            RandomAccessIterator last) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (last - first \u0026gt; __stl_threshold) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __insertion_sort(first, first + __stl_threshold);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __unguarded_insertion_sort(first + __stl_threshold, last);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __insertion_sort(first, last);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e函数模板内有一个 \u003ccode\u003eif\u003c/code\u003e 分支。当区间长度较小时，直接调用 \u003ccode\u003e__insertion_sort\u003c/code\u003e；当区间长度较大时，对前 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素调用 \u003ccode\u003e__insertion_sort\u003c/code\u003e，而对前 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素之后的元素调用 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e。有了之前分析 \u003ccode\u003e__unguarded_partition\u003c/code\u003e 的经验，显然我们能猜到 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 一定做了某种优化以提升性能。但我们有几个问题待解决：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e__insertion_sort\u003c/code\u003e 和 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 分别是什么？它们与标准的插入排序有什么区别？各自的适用条件又是什么？\u003c/li\u003e\n\u003cli\u003e在区间长度较长时，为什么要将前 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素单独处理？\u003c/li\u003e\n\u003cli\u003e为什么要对区间长度的大小进行划分？这与 \u003ccode\u003e__introsort_loop\u003c/code\u003e 中 \u003ccode\u003ewhile\u003c/code\u003e 循环的区间长度限制有什么联系？\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"插入排序的实现\"\u003e\u003ca href=\"#插入排序的实现\" class=\"headerlink\" title=\"插入排序的实现\"\u003e\u003c/a\u003e插入排序的实现\u003c/h3\u003e\u003cp\u003e标准的插入排序可以有这样的实现：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003einsertion_sort\u003c/span\u003e\u003cspan class=\"params\"\u003e(RandomAccessIterator first, RandomAccessIterator last)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"built_in\"\u003enot\u003c/span\u003e(first \u0026lt; last)) \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (RandomAccessIterator i = first + \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i != last; ++i) {  \u003cspan class=\"comment\"\u003e// 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e key = *i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        RandomAccessIterator j;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (j = i - \u003cspan class=\"number\"\u003e1\u003c/span\u003e; first \u0026lt;= j \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e key \u0026lt; *j; --j) {         \u003cspan class=\"comment\"\u003e// 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            *(j + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) = *j;                                      \u003cspan class=\"comment\"\u003e// 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        *(j + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) = key;                                         \u003cspan class=\"comment\"\u003e// 4.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e代码很简单。(1) 处从 \u003ccode\u003efirst\u003c/code\u003e 之后的元素开始循环，假定 \u003ccode\u003efirst\u003c/code\u003e 已经是排序完成的。(2) 处从目标位置 \u003ccode\u003ei\u003c/code\u003e 前一个元素向前循环，直到遇到区间头部或者遇到已排序元素小于目标元素时停止；在循环内的 (3) 处依次将大于目标元素的所有元素依次后移。(4) 处将目标元素放在目标位置。\u003c/p\u003e\n\u003cp\u003e接下来我们首先来看 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 的代码，它是 \u003ccode\u003e__insertion_sort\u003c/code\u003e 和 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 共同依赖的内部函数。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e __unguarded_linear_insert(RandomAccessIterator last, T value) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    RandomAccessIterator next = last;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    --next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (value \u0026lt; *next) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        *last = *next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        last = next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        --next;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    *last = value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 函数模板的实现如其名称所展现的那样，它在对 \u003ccode\u003enext\u003c/code\u003e 迭代器的自减中，没有检查 \u003ccode\u003enext\u003c/code\u003e 迭代器是否向左超越边界。更有甚者，它根本无需输入左边界，而只需输入右边界迭代器和带插入元素的值即可；这也意味着，\u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 不是完整的插入排序的实现。事实上，它只完成了原版插入排序中 (2)(3)(4) 的部分功能。\u003c/p\u003e\n\u003cp\u003e显然，这种情况下，为了保证函数执行的正确性，函数必然有额外的前提假设。此处假设应当是：**\u003ccode\u003ewhile\u003c/code\u003e 循环会在 \u003ccode\u003enext\u003c/code\u003e 迭代器向左越界之前停止\u003cstrong\u003e；这也就是说，\u003c/strong\u003e在 \u003ccode\u003e[first, last)\u003c/code\u003e 之间必然存在不大于 \u003ccode\u003evalue\u003c/code\u003e 的元素**。因此，为防止越界，在调用该函数模板之前，我们必须要保证这一假设成立。\u003c/p\u003e\n\u003cp\u003e接下来我们来看内部函数 \u003ccode\u003e__linear_insert\u003c/code\u003e 的实现。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e __linear_insert(RandomAccessIterator first,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            RandomAccessIterator last, T*) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    T value = *last;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (value \u0026lt; *first) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003ecopy_backward\u003c/span\u003e(first, last, last + \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        *first = value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __unguarded_linear_insert(last, value);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e__linear_insert\u003c/code\u003e 函数模板的意图是将 \u003ccode\u003elast\u003c/code\u003e 所指向的元素插入到正确位置，这里蕴含的前提假设是**\u003ccode\u003e[first, last)\u003c/code\u003e 区间的元素是已经排好序的**。在这一假设下，若 \u003ccode\u003e*last \u0026lt; *first\u003c/code\u003e，则毫无疑问，\u003ccode\u003elast\u003c/code\u003e 指向的元素应当插入在上述区间的最前面，因此有 \u003ccode\u003estd::copy_backward\u003c/code\u003e；若不满足条件判断，则在 \u003ccode\u003e[first, last)\u003c/code\u003e 之间必然存在不大于 \u003ccode\u003evalue\u003c/code\u003e 的元素（比如至少 \u003ccode\u003e*first\u003c/code\u003e 是这样），因此可以调用 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 来解决问题，而不必担心在 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 中 \u003ccode\u003enext\u003c/code\u003e 迭代器向左越界。对于 \u003ccode\u003e*last \u0026lt; *first\u003c/code\u003e 的情况，\u003ccode\u003e__linear_insert\u003c/code\u003e 将 \u003ccode\u003elast - first - 1\u003c/code\u003e 次比较和交换操作变成了一次 \u003ccode\u003estd::copy_backward\u003c/code\u003e 操作，相当于节省了 \u003ccode\u003elast - first - 1\u003c/code\u003e 次比较操作。\u003c/p\u003e\n\u003cp\u003e利用 \u003ccode\u003e__linear_insert\u003c/code\u003e 可以将 \u003ccode\u003elast\u003c/code\u003e 指向的元素插入到已排序区间中的正确位置；而这正式标准的插入排序函数中 (2)(3)(4) 处的目的。因此 \u003ccode\u003e__insertion_sort\u003c/code\u003e 就很好理解了。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e __insertion_sort(RandomAccessIterator first, RandomAccessIterator last) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (first == last) \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (RandomAccessIterator i = first + \u003cspan class=\"number\"\u003e1\u003c/span\u003e; i != last; ++i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __linear_insert(first, i, \u003cspan class=\"built_in\"\u003evalue_type\u003c/span\u003e(first));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e接下来我们看 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 的实现。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e, \u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e __unguarded_insertion_sort_aux(RandomAccessIterator first,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                    RandomAccessIterator last, T*) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (RandomAccessIterator i = first; i != last; ++i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        __unguarded_linear_insert(i, \u003cspan class=\"built_in\"\u003eT\u003c/span\u003e(*i));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eRandomAccessIterator\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e __unguarded_insertion_sort(RandomAccessIterator first,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                RandomAccessIterator last) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    __unguarded_insertion_sort_aux(first, last, \u003cspan class=\"built_in\"\u003evalue_type\u003c/span\u003e(first));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e__unguarded_insertion_sort_aux\u003c/code\u003e 是一个简单的辅助函数，其目的只是获取模板参数 \u003ccode\u003eT\u003c/code\u003e，以便正确调用 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e。\u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 没有边界检查，因此它一定比 \u003ccode\u003e__insertion_sort\u003c/code\u003e 要快。但由于 \u003ccode\u003e__unguarded_insertion_sort_aux\u003c/code\u003e 会从 \u003ccode\u003efirst\u003c/code\u003e 开始调用 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e；因此使用 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 的条件比 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 更加严格。它必须保证以下假设成立：\u003cstrong\u003e在 \u003ccode\u003efirst\u003c/code\u003e 左边的有效位置上，存在不大于 \u003ccode\u003e[first, last)\u003c/code\u003e 中所有元素的元素\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"回答三个问题\"\u003e\u003ca href=\"#回答三个问题\" class=\"headerlink\" title=\"回答三个问题\"\u003e\u003c/a\u003e回答三个问题\u003c/h3\u003e\u003cp\u003e至此我们可以回答第一个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e__insertion_sort\u003c/code\u003e 实现了标准的插入排序的功能。但由于内部使用了 \u003ccode\u003e__linear_insert\u003c/code\u003e 和 \u003ccode\u003e__unguarded_linear_insert\u003c/code\u003e 内部函数，其效率比标准的插入排序效率要高。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 基本上也实现了插入排序的思想，但它实现的功能比标准的插入排序稍弱。它要求在 \u003ccode\u003efirst\u003c/code\u003e 左边的有效位置上，存在不大于 \u003ccode\u003e[first, last)\u003c/code\u003e 中所有元素的元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以及我们可以部分回答第二个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 的效率比 \u003ccode\u003e__insertion_sort\u003c/code\u003e 高，因此我们应该尽可能对更多的元素使用 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e。但使用它是有前提的，因此至少对最头部的一些元素，我们不能使用 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e但这只是部分回答了第二个问题；因为我们仍然没有说明为什么对头部 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素之外的元素使用 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e 是安全的。也即我们需要证明：头部 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素中一定存在不小于区间 \u003ccode\u003e[first + __stl_threshold, last)\u003c/code\u003e 中所有元素的元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以及我们可以回答第三个问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e若 \u003ccode\u003elast - first \u0026gt; __stl_threshold\u003c/code\u003e 不成立，则事实上 \u003ccode\u003e__introsort_loop\u003c/code\u003e 不会对序列做任何实际操作——这是由内省式排序 \u003ccode\u003ewhile\u003c/code\u003e 循环的条件确保的。这种情况下，不能使用 \u003ccode\u003e__unguarded_insertion_sort\u003c/code\u003e，而是要使用具有完整排序能力的 \u003ccode\u003e__insertion_sort\u003c/code\u003e 来执行最终的插入排序操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"完整回答第二个问题\"\u003e\u003ca href=\"#完整回答第二个问题\" class=\"headerlink\" title=\"完整回答第二个问题\"\u003e\u003c/a\u003e完整回答第二个问题\u003c/h3\u003e\u003cp\u003e至此，我们唯独遗留的问题是要证明：头部 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素中一定存在不小于区间 \u003ccode\u003e[first + __stl_threshold, last)\u003c/code\u003e 中所有元素的元素。\u003c/p\u003e\n\u003cp\u003e由于 \u003ccode\u003e__final_insertion_sort\u003c/code\u003e 在 \u003ccode\u003e__introsort_loop\u003c/code\u003e 之后调用，这个问题某种程度上是显然的。考虑 \u003ccode\u003e__introsort_loop\u003c/code\u003e 的两个退出条件，然后分类讨论：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e因递归切分，导致 \u003ccode\u003elast - first \u0026gt; __stl_threshold\u003c/code\u003e 不成立而退出。\u003c/li\u003e\n\u003cli\u003e因递归过深，调用堆排序而退出。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e对第一种情况，考虑快排特性可知，最左侧的 \u003ccode\u003e[first, last)\u003c/code\u003e 区间的所有元素，都不大于右侧所有元素。又因为 \u003ccode\u003elast - first \u0026lt;= __stl_threshold\u003c/code\u003e，因此在 \u003ccode\u003e[first, first + __stl_threshold)\u003c/code\u003e 中必然存在一个元素，不大于 \u003ccode\u003e[first + __stl_threshold, last)\u003c/code\u003e 中的所有元素。\u003c/p\u003e\n\u003cp\u003e对第二种情况，同样考虑快排特性，最左侧的 \u003ccode\u003e[first, last)\u003c/code\u003e 区间的所有元素，都不大于右侧所有元素。尽管此时不一定成立 \u003ccode\u003elast - first \u0026lt;= __stl_threshold\u003c/code\u003e，但堆排保证了 \u003ccode\u003efirst\u003c/code\u003e 元素是该区间内值最小的元素。因此至少它不大于 \u003ccode\u003e[first + __stl_threshold, last)\u003c/code\u003e 中的所有元素。\u003c/p\u003e\n\u003cp\u003e因此我们说，经过 \u003ccode\u003e__introsort_loop\u003c/code\u003e 之后，头部 \u003ccode\u003e__stl_threshold\u003c/code\u003e 个元素中一定存在不小于区间 \u003ccode\u003e[first + __stl_threshold, last)\u003c/code\u003e 中所有元素的元素。\u003c/p\u003e\n\u003ch2 id=\"结语\"\u003e\u003ca href=\"#结语\" class=\"headerlink\" title=\"结语\"\u003e\u003c/a\u003e结语\u003c/h2\u003e\u003cp\u003e纵观整个 \u003ccode\u003estd::sort\u003c/code\u003e 的实现，可以看到很多为了效率，而无所不用其极地对代码进行精雕细琢。作为程序员，相信没有人能对这种精湛技艺熟视无睹。欣赏 STL 代码时，我们一方面需要去理解这样做为什么是对的，还要去理解这样做为什么能提高效率。如此，才能真正吃透 STL 的代码，并能有自己的收获。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2018-09-18T15:57:17Z",
  "Author": "Liam Huang"
}