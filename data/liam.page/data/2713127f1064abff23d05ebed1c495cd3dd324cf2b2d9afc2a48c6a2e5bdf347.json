{
  "Source": "liam.page",
  "Title": "MD5 散列函数的结果是均匀分布吗？",
  "Link": "https://liam.page/2015/08/12/does-the-result-of-md5-hash-function-uniform/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e今天，大学同学昊轩在微信群里问到「MD5 散列函数的结果是不是均匀分布的」。询问之后才知道，昊轩在工作中需要一个快速的、均匀分布的 8 -- 16 bytes 的散列函数。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003e回忆本科学过的内容，似乎并没有提及散列函数的结果服从何种统计分布。不过，一个合格的散列函数应当包含三个特征：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e单向性：容易计算输入的散列结果，但是从散列结果无法推出输入内容；\u003c/li\u003e\n\u003cli\u003e抗碰撞性：很难找到两个不同的输入内容，得到相同的输出结果；\u003c/li\u003e\n\u003cli\u003e映射均匀性和差分均匀性：散列结果中 bit 位上的 0 的数量和 1 的数量应当大致相等；改变输入内容的 1 个 bit 信息会导致散列结果一半以上的 bit 位变化（雪崩效应）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e雪崩效应的本质就是散列结果的均匀性，因此，基本上可以说 MD5 散列函数的结果应当服从均匀分布。\u003c/p\u003e\n\u003cp\u003e受篇幅所限，这里无法给出详细的证明。不过我们可以以大量测试来说明这一结果。\u003c/p\u003e\n\u003cp\u003e如果我们将 MD5 的散列结果以十六进制的形式表达出来，那么表达的结果中可能出现 \u003ccode\u003e1234567890abcdef\u003c/code\u003e 这十六个可能的结果。如果十六个可能的结果等可能出现（均匀），那么对于某个十六进制位来说，它的信息熵等于 $\\sum_0^{15} - \\frac{1}{16} \\log_2 \\frac{1}{16} = 4$。\u003c/p\u003e\n\u003cp\u003e这就是说，如果我们将 MD5 的散列结果以十六进制的形式表达出来，计算每一个数位的信息熵，如果（约）等于 4，就说明 MD5 的散列结果是（接近）均匀的。为此，我用 Python 写了一份代码作为测试。这份代码用到了 Python 的 \u003ccode\u003ehashlib\u003c/code\u003e 库，可能需要额外安装。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e hashlib \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e md5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e math \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e log\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eentropy\u003c/span\u003e(\u003cspan class=\"params\"\u003ewkList\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    wkSet   = \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e(wkList)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    rate    = {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    lenList = \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(wkList)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e wkSet:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        rate[i] = \u003cspan class=\"built_in\"\u003efloat\u003c/span\u003e(wkList.count(i)) / lenList\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003esum\u003c/span\u003e([-p * log(p, \u003cspan class=\"number\"\u003e2\u003c/span\u003e) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e p \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e rate.values()])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    wkDict = {} \u003cspan class=\"comment\"\u003e# key: index number; value: list of appeared chars\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(\u003cspan class=\"number\"\u003e1000000\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        s = md5(\u003cspan class=\"built_in\"\u003estr\u003c/span\u003e(i)).hexdigest()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(\u003cspan class=\"number\"\u003e32\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e wkDict:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                wkDict[j] = [s[j]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                wkDict[j].append(s[j])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e j \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e xrange(\u003cspan class=\"number\"\u003e32\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e j, \u003cspan class=\"string\"\u003e\u0026#39;\\t\u0026#39;\u003c/span\u003e, entropy(wkDict[j])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行之后结果如下：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e0   3.99997252009\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1   3.99999302786\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2   3.99999519608\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3   3.99998883009\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4   3.99999198139\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5   3.99999277151\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6   3.99998601745\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7   3.99998913662\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8   3.99998403144\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9   3.99998997451\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10  3.9999888372\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11  3.99999167561\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12  3.99998973775\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13  3.99998788689\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14  3.99998465031\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15  3.99999026671\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16  3.99998951346\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17  3.9999925505\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18  3.99999145863\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19  3.99999118615\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20  3.99999429662\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21  3.99998661919\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22  3.99999172588\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23  3.99998375623\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24  3.99999562943\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25  3.99998534411\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26  3.9999892247\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27  3.99998627499\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28  3.99999072251\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29  3.99999088822\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30  3.99999107997\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31  3.99998905455\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e经过一百万次的计算，我们发现，MD5 散列值的每一个十六进制位的信息熵都大致相等，且它们的值都约等于 4。根据之前的讨论，我们可以认为「MD5 散列函数的结果服从均匀分布」。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2015-08-12T10:16:50Z",
  "Author": "Liam Huang"
}