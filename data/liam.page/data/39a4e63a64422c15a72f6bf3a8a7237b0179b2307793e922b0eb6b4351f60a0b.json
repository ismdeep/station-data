{
  "Source": "liam.page",
  "Title": "C++ 中类的拷贝控制",
  "Link": "https://liam.page/2016/08/14/copy-control-in-Cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cblockquote\u003e\n\u003cp\u003e数据成员有指针，构造函数 new 一坨，析构函数 delete 掉，然后不实现深拷贝构造函数。你咋不上天？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e为了避免「上天」，我们有必要讨论一下 C++ 中类的拷贝控制。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"问题重现\"\u003e\u003ca href=\"#问题重现\" class=\"headerlink\" title=\"问题重现\"\u003e\u003c/a\u003e问题重现\u003c/h2\u003e\u003cp\u003e为了说明问题的严重性，我们先来重现一下这个问题。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003cfigcaption\u003e\u003cspan\u003edouble_free.cpp\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"keyword\"\u003enamespace\u003c/span\u003e std;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e \u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e* p = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e[\u003cspan class=\"number\"\u003e100\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e q = p;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e[] p; p = \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e[] q; q = \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e; \u003cspan class=\"comment\"\u003e// core dumped!\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这段代码很简单，展现的问题也很清楚。\u003c/p\u003e\n\u003cp\u003e首先，我们在 \u003ccode\u003emain\u003c/code\u003e 函数里，在栈里动态分配了一个 \u003ccode\u003eint\u003c/code\u003e 型数组，返回的内存地址保存在 \u003ccode\u003ep\u003c/code\u003e 中。而后，通过赋值运算符，将 \u003ccode\u003ep\u003c/code\u003e 的值赋值给 \u003ccode\u003eq\u003c/code\u003e。这样，我们就有了 \u003ccode\u003ep\u003c/code\u003e 和 \u003ccode\u003eq\u003c/code\u003e，两个指针指向栈中同一块内存空间。\u003c/p\u003e\n\u003cp\u003e接下来，我们调用 \u003ccode\u003edelete[]\u003c/code\u003e，将 \u003ccode\u003ep\u003c/code\u003e 对应的内存空间释放，并将 \u003ccode\u003ep\u003c/code\u003e 置空。注意，这里是不够的！因为，\u003ccode\u003ep\u003c/code\u003e 和 \u003ccode\u003eq\u003c/code\u003e 原本指向同一块内存空间，而我们通过 \u003ccode\u003ep\u003c/code\u003e 将内存释放了，\u003ccode\u003eq\u003c/code\u003e 就变成野指针了。于是，在下面的操作中，\u003ccode\u003edelete[] q\u003c/code\u003e 就变成了对同一内存空间的第二次释放，这是未定义的行为。更有甚者，如果后续程序中，依然使用 \u003ccode\u003eq\u003c/code\u003e 对相应的内存空间进行存取访问，那么——我就呵呵一笑……\u003c/p\u003e\n\u003ch2 id=\"拷贝与赋值的问题\"\u003e\u003ca href=\"#拷贝与赋值的问题\" class=\"headerlink\" title=\"拷贝与赋值的问题\"\u003e\u003c/a\u003e拷贝与赋值的问题\u003c/h2\u003e\u003cp\u003e上述错误，根本原因是我们通过赋值运算符，将指针 \u003ccode\u003ep\u003c/code\u003e 的值赋给 \u003ccode\u003eq\u003c/code\u003e 之后，\u003ccode\u003ep\u003c/code\u003e 和 \u003ccode\u003eq\u003c/code\u003e 指向了同一块内存空间。于是，任何对 \u003ccode\u003ep\u003c/code\u003e/\u003ccode\u003eq\u003c/code\u003e 其一的操作，都等同于对另一的操作。莫说是多次释放可能造成问题，在正常使用过程中，\u003ccode\u003ep\u003c/code\u003e 与 \u003ccode\u003eq\u003c/code\u003e 相互干扰，也可能产生不符合预期的结果——而且很难追查。\u003c/p\u003e\n\u003cp\u003e这就是说，对于指针的复制，特别是指向动态内存的指针的复制，我们要特别小心。实际上，我们可能期待的是这样的效果：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e* p = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e[\u003cspan class=\"number\"\u003e100\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// set value of elements in p\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// do a **deep copy**\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e* q = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e[\u003cspan class=\"number\"\u003e100\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i != \u003cspan class=\"number\"\u003e100\u003c/span\u003e; ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    q[i] = p[i];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e也就是说，我们需要一个「深度拷贝」，将 \u003ccode\u003eq\u003c/code\u003e 与 \u003ccode\u003ep\u003c/code\u003e 指向不同的内存空间；只不过，它们所包含的元素内容完全相同。如此一来，\u003ccode\u003ep\u003c/code\u003e 与 \u003ccode\u003eq\u003c/code\u003e 除了内里一致，其实完全是两块不相干的内存空间。之后，按照既定的规矩来操作，都会是安全可控的。\u003c/p\u003e\n\u003ch2 id=\"拷贝构造函数与赋值运算符重载\"\u003e\u003ca href=\"#拷贝构造函数与赋值运算符重载\" class=\"headerlink\" title=\"拷贝构造函数与赋值运算符重载\"\u003e\u003c/a\u003e拷贝构造函数与赋值运算符重载\u003c/h2\u003e\u003cp\u003e对于 C++ 的内置类型，其拷贝（赋值）过程我们都非常熟悉，也不会出错。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e i_tmp  = \u003cspan class=\"number\"\u003e100\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e i_copy = i_tmp;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e涉及到类实例（instance of a Class, aka object of a Class）的拷贝和赋值，看似熟悉的问题，就不那么清晰了。每个类的实例当中，都存在若干成员变量。在我们的直觉中，类实例的拷贝和赋值，无非就是将一个实例中的全部成员变量，挨个拷贝、赋值给新的实例。大体上，也没错。但关键是，这些操作，谁来执行呢？\u003c/p\u003e\n\u003cp\u003e我们知道，在 C++ 中，大多数的操作都是通过某个函数实现的。类实例的拷贝和赋值，也不例外。类实例的拷贝，是通过\u003cstrong\u003e拷贝构造函数\u003c/strong\u003e来实现的；而类实例的赋值，则是通过\u003cstrong\u003e重载过的赋值运算符\u003c/strong\u003e来实现的——运算符也是一种函数。不熟悉这个话题的读者，可能没有听说过「拷贝构造函数」或者「重载赋值运算符」。这是因为，一般情况下，编译器会为你\u003cstrong\u003e合成\u003c/strong\u003e这两个函数。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eSalesData {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        SalesData\u0026amp; \u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e= (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// other functions\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::string ID;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e sold_count;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// fake: synthesized copy constructor\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData::\u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp; orig) :\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eID\u003c/span\u003e (orig.ID),                \u003cspan class=\"comment\"\u003e// call the copy constructor of std::string\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003esold_count\u003c/span\u003e (orig.sold_count) \u003cspan class=\"comment\"\u003e// copy size_t\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    {}                           \u003cspan class=\"comment\"\u003e// empty function body\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// fake: synthesized overloaded operator\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData::\u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e= (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;ID         = rhs.ID;          \u003cspan class=\"comment\"\u003e// call std::string::operator=\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;sold_count = rhs.sold_count;  \u003cspan class=\"comment\"\u003e// operator= for size_t\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e *\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里我们手动实现了 \u003ccode\u003eSalesData\u003c/code\u003e 类的拷贝构造函数和重载了 \u003ccode\u003eSalesData\u003c/code\u003e 类的赋值运算符。这两个函数都接收 \u003ccode\u003eSalesData\u003c/code\u003e 类的常量引用；不同的是，拷贝构造函数没有返回值（因为它是构造函数），而赋值运算符返回了 \u003ccode\u003eSalesData\u003c/code\u003e 类的左值引用——这与默认的赋值运算符的行为是一致的。\u003c/p\u003e\n\u003cp\u003e我们注意到，在编译器合成的拷贝构造函数中，在初始化列表里，我们依次调用数据成员的拷贝构造函数，将成员的值拷贝到新的实例中。如果数据成员本身是类实例（而不是基本类型），那么在这个过程中，又会调用这些类的拷贝构造函数。编译器重载的赋值运算符的行为和编译器合成的拷贝构造函数行为类似。只不过，操作由调用拷贝构造函数，变为了调用相应成员变量的赋值运算符。\u003c/p\u003e\n\u003ch2 id=\"浅拷贝与深拷贝\"\u003e\u003ca href=\"#浅拷贝与深拷贝\" class=\"headerlink\" title=\"浅拷贝与深拷贝\"\u003e\u003c/a\u003e浅拷贝与深拷贝\u003c/h2\u003e\u003cp\u003e至今为止，我们看过的拷贝构造函数（与重载的赋值运算符）都还能如预期一样正常工作。但是，在一些情况下，类似编译器合成的拷贝构造函数和赋值运算符，就没法如预期一样工作了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e类成员中有静态变量，并且构造函数要操作这些静态变量（比如类实例计数）；\u003c/li\u003e\n\u003cli\u003e类成员中有指针，并且在类示例的生存期内会将它指向动态开辟的内存空间。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在这两种情况下，编译器合成的拷贝构造函数和赋值运算符，就都没办法正常工作了。在静态变量的情形中，默认的拷贝构造函数和复制运算符，不会操作静态变量——因为编译器合成的两个函数只操作实例中的数据成员，但类的静态变量属于类本身，而不属于任何单独的类实例。此时，如果依赖编译器自动合成的两个函数，就无法正确地维护静态变量。在动态开辟内存的情形中，则可能形成本文第一节中多次释放同一块内存空间的问题，引发核心转储。\u003c/p\u003e\n\u003cp\u003e我们将简单地对数据成员按位赋值的拷贝方式称为\u003cstrong\u003e浅拷贝\u003c/strong\u003e。毫无疑问，编译器自动合成的拷贝构造函数和赋值运算符，都属于浅拷贝。根据上述分析，我们知道，浅拷贝在某些情况下是不合适的。于是，在这些情况下，我们需要\u003cstrong\u003e深拷贝\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e所谓深拷贝，就是在拷贝的过程中，我们需要小心地处理类的静态变量或者动态内存空间。在第一节中，解决复制指针导致两次释放同一块内存空间的实践中，我们就用到了深拷贝。以下是一个深拷贝的例子：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003edefine\u003c/span\u003e MAX_BUFFER 10240\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e () = \u003cspan class=\"keyword\"\u003edefault\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        SalesData\u0026amp; \u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e= (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ~\u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e ();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// other functions\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::string ID;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e sold_count;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e* p_buffer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData::\u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e () :\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eID\u003c/span\u003e (\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e), \u003cspan class=\"built_in\"\u003esold_count\u003c/span\u003e (\u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    p_buffer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e [MAX_BUFFER];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData::\u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp; orig) :\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eID\u003c/span\u003e (orig.ID),                \u003cspan class=\"comment\"\u003e// call the copy constructor of std::string\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003esold_count\u003c/span\u003e (orig.sold_count) \u003cspan class=\"comment\"\u003e// copy size_t\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;p_buffer = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e [MAX_BUFFER];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i != MAX_BUFFER; ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;p_buffer[i] = orig.p_buffer[i];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData::\u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e= (\u003cspan class=\"type\"\u003econst\u003c/span\u003e SalesData\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;ID         = rhs.ID;          \u003cspan class=\"comment\"\u003e// call std::string::operator=\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;sold_count = rhs.sold_count;  \u003cspan class=\"comment\"\u003e// operator= for size_t\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;p_buffer   = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e [MAX_BUFFER];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i != MAX_BUFFER; ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e-\u0026gt;p_buffer[i] = rhs.p_buffer[i];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e *\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSalesData::~\u003cspan class=\"built_in\"\u003eSalesData\u003c/span\u003e () {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e[] p_buffer;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    p_buffer = \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"什么时候需要手工实现深拷贝\"\u003e\u003ca href=\"#什么时候需要手工实现深拷贝\" class=\"headerlink\" title=\"什么时候需要手工实现深拷贝\"\u003e\u003c/a\u003e什么时候需要手工实现深拷贝\u003c/h2\u003e\u003cp\u003e在 C++ 中，如果需要你手工实现一个析构函数，通常意味着你的类实例中有动态开辟的内存空间——因为只有这种情况，需要程序员手工在析构实例的时候释分配的内存空间。而我们注意到，一旦类实例中涉及到动态内存空间，在拷贝实例的时候，就需要用深拷贝小心地处理这些内存空间。于是，我们得到了第一条结论\u003cstrong\u003e如果需要实现手工的析构函数，那么就需要实现手工的拷贝构造函数和重载赋值运算符\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e此外，\u003cstrong\u003e如果类定义中包含静态成员变量，并且这些成员变量在构建、析构实例的时候需要修改，那么通常我们也需要手工实现拷贝构造函数和重载复制运算符\u003c/strong\u003e。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-08-14T03:08:08Z",
  "Author": "Liam Huang"
}