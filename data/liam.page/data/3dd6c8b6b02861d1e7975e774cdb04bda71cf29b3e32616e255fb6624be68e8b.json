{
  "Source": "liam.page",
  "Title": "找到两个有序数组的中位数",
  "Link": "https://liam.page/2019/08/22/find-median-of-two-sorted-arrays/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e这是 LeetCode 的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://leetcode.com/problems/median-of-two-sorted-arrays/\"\u003e第 4 题\u003c/a\u003e，\u003ccode\u003e@linjie\u003c/code\u003e 问到我说，这题网上的解答看完都迷迷糊糊的，希望我能写篇博客重新讲一下。于是有此篇。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"题目\"\u003e\u003ca href=\"#题目\" class=\"headerlink\" title=\"题目\"\u003e\u003c/a\u003e题目\u003c/h2\u003e\u003cp\u003e现有不同时为空的非降序排列的数组 \u003ccode\u003eA\u003c/code\u003e 和 \u003ccode\u003eB\u003c/code\u003e，其长度分别是 \u003ccode\u003em\u003c/code\u003e 和 \u003ccode\u003en\u003c/code\u003e。不失一般性，假设 \u003ccode\u003em \u0026lt;= n\u003c/code\u003e。记 \u003ccode\u003eA\u003c/code\u003e 和 \u003ccode\u003eB\u003c/code\u003e 的中位数为 \u003ccode\u003ex\u003c/code\u003e。要求写代码实现，在 \u003ccode\u003e$\\Theta(\\log(m + n))$\u003c/code\u003e 的时间复杂度内找到 \u003ccode\u003ex\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"分析\"\u003e\u003ca href=\"#分析\" class=\"headerlink\" title=\"分析\"\u003e\u003c/a\u003e分析\u003c/h2\u003e\u003cp\u003e见到时间复杂度要求中有 \u003ccode\u003e$\\log$\u003c/code\u003e，就肯定要想到二分搜索。\u003c/p\u003e\n\u003cp\u003e二分搜索的本质是在一个有序 randomly accessible array 中，寻找一个满足某种跟元素顺序相关的条件的元素的方法。这个「跟元素顺序相关的条件」，在最初的版本里是「等于某个数值」，扩展版本可以是「第一个不小于给定数值的值」之类的（参考\u003ca href=\"https://liam.page/2018/11/23/binary-search-and-its-variants/\"\u003e前作\u003c/a\u003e）。展开来说，满足以下 4 个要素时，可以用到二分搜索：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003earray 只有 1 个，或者可以将多个 array 问题简化成 1 个 array 的问题；\u003c/li\u003e\n\u003cli\u003earray 是 randomly accessible 的；\u003c/li\u003e\n\u003cli\u003earray 是有序的；\u003c/li\u003e\n\u003cli\u003e搜索 array 中的元素时，限制条件是跟元素顺序有关的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因此，为了利用二分搜索，我们必须要想办法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e变两个序列的问题为 1 个序列的问题；\u003c/li\u003e\n\u003cli\u003e找到某个「跟元素顺序相关的条件」。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e首先考虑 (1)。\u003c/p\u003e\n\u003cp\u003e设 \u003ccode\u003ei\u003c/code\u003e 是 \u003ccode\u003eA\u003c/code\u003e 中的下标，而 \u003ccode\u003ej\u003c/code\u003e 是 \u003ccode\u003eB\u003c/code\u003e 中的下标：\u003ccode\u003eA[i]\u003c/code\u003e 是 \u003ccode\u003eA\u003c/code\u003e 中第一个大于等于中位数 \u003ccode\u003ex\u003c/code\u003e 的元素；同时 \u003ccode\u003eB[j]\u003c/code\u003e 是 \u003ccode\u003eB\u003c/code\u003e 中第一个大于等于中位数 \u003ccode\u003ex\u003c/code\u003e 的元素。当 \u003ccode\u003eA\u003c/code\u003e 中元素全部小于 \u003ccode\u003ex\u003c/code\u003e 时，\u003ccode\u003ei = m\u003c/code\u003e；同理，当 \u003ccode\u003eB\u003c/code\u003e 中元素全部小于 \u003ccode\u003ex\u003c/code\u003e 时，\u003ccode\u003ej = n\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e这意味着，\u003ccode\u003eA\u003c/code\u003e 中小于 \u003ccode\u003ex\u003c/code\u003e 的元素数量为 \u003ccode\u003ei\u003c/code\u003e，\u003ccode\u003eB\u003c/code\u003e 中小于 \u003ccode\u003ex\u003c/code\u003e 的元素数量为 \u003ccode\u003ej\u003c/code\u003e；\u003ccode\u003eA\u003c/code\u003e 中大于等于 \u003ccode\u003ex\u003c/code\u003e 的元素数量为 \u003ccode\u003em - i\u003c/code\u003e，\u003ccode\u003eB\u003c/code\u003e 中大于等于 \u003ccode\u003ex\u003c/code\u003e 的元素数量为 \u003ccode\u003en - j\u003c/code\u003e。满足条件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当 \u003ccode\u003em + n\u003c/code\u003e 是偶数：\u003ccode\u003ei + j = (m - i) + (n - j)\u003c/code\u003e，此时 \u003ccode\u003ej = (m + n) / 2 - i\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003em + n\u003c/code\u003e 是奇数：\u003ccode\u003ei + j = (m - i) + (n - j) - 1\u003c/code\u003e，此时 \u003ccode\u003ej = (m + n - 1) / 2 - i = (m + n) / 2 - i\u003c/code\u003e（考虑整数除法除不尽时向零取整）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以 \u003ccode\u003ej\u003c/code\u003e 有统一的表达式 \u003ccode\u003e(m + n) / 2 - i\u003c/code\u003e。这样一来，我们就建立了两个序列下标之间的对应关系，从而将两个序列的问题变为了 1 个序列的问题。\u003c/p\u003e\n\u003cp\u003e接着考虑 (2)。\u003c/p\u003e\n\u003cp\u003e考虑 \u003ccode\u003ex\u003c/code\u003e 是中位数，而 \u003ccode\u003eA[i]\u003c/code\u003e 和 \u003ccode\u003eB[j]\u003c/code\u003e 分别是 \u003ccode\u003eA\u003c/code\u003e 和 \u003ccode\u003eB\u003c/code\u003e 两个序列中第一个大于等于中位数 \u003ccode\u003ex\u003c/code\u003e 的元素。因此有：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eA[i - 1] \u0026lt; x \u0026lt;= A[i]\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eA[i - 1] \u0026lt; x \u0026lt;= B[j]\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eB[j - 1] \u0026lt; x \u0026lt;= A[i]\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eB[j - 1] \u0026lt; x \u0026lt;= B[j]\u003c/code\u003e。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e其中 (1) 和 (4) 是 trivial 的。考虑 (2) 和 (3)，即得到目标「条件」：\u003ccode\u003e(i == 0 or A[i - 1] \u0026lt; x \u0026lt;= B[j]) and (i == m or B[j - 1] \u0026lt; x \u0026lt;= A[i])\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e因此有伪代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efor i in range(0, m + 1):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  bsearch to find i, s.t.:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    (i == 0 or A[i - 1] \u0026lt; x \u0026lt;= B[j]) and (i == m or B[j - 1] \u0026lt; x \u0026lt;= A[i])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif (m + n) % 2 == 0:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  # carefully handle index out-of-bound\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  return static_cast\u0026lt;double\u0026gt;(max(A[i - 1], B[j - 1]) + min(A[i], B[j])) / 2.0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelse:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  # carefully handle index out-of-bound\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  return min(A[i], B[j])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e算法的时间复杂度是 \u003ccode\u003e$\\Theta(\\log(\\min(m, n)))$\u003c/code\u003e，空间复杂度是 \u003ccode\u003e$\\Theta(1)$\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"C-实现\"\u003e\u003ca href=\"#C-实现\" class=\"headerlink\" title=\"C++ 实现\"\u003e\u003c/a\u003eC++ 实现\u003c/h2\u003e\u003cp\u003e给一个 C++ 版本的完整实现：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e io_sync_off = []() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  std::ios::\u003cspan class=\"built_in\"\u003esync_with_stdio\u003c/span\u003e(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  std::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e(\u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} ();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eSolution\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title\"\u003efindMedianSortedArrays\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; A, \u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; B)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (A.\u003cspan class=\"built_in\"\u003eempty\u003c/span\u003e()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003efindMedianInSortedArray\u003c/span\u003e(B);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (B.\u003cspan class=\"built_in\"\u003eempty\u003c/span\u003e()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003efindMedianInSortedArray\u003c/span\u003e(A);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003ebsearchWrapper\u003c/span\u003e(A, B);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title\"\u003efindMedianInSortedArray\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; v)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e len = v.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (len % \u003cspan class=\"number\"\u003e2\u003c/span\u003e == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003estatic_cast\u003c/span\u003e\u0026lt;\u003cspan class=\"type\"\u003edouble\u003c/span\u003e\u0026gt;(v[len / \u003cspan class=\"number\"\u003e2\u003c/span\u003e] + v[len / \u003cspan class=\"number\"\u003e2\u003c/span\u003e - \u003cspan class=\"number\"\u003e1\u003c/span\u003e]) / \u003cspan class=\"number\"\u003e2.0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e v[len / \u003cspan class=\"number\"\u003e2\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title\"\u003ebsearchWrapper\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; A, \u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; B)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e m = A.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e(), n = B.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (m \u0026lt;= n) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003ebsearchHelper\u003c/span\u003e(A, B);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003ebsearchHelper\u003c/span\u003e(B, A);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title\"\u003ebsearchHelper\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; A, \u003cspan class=\"type\"\u003econst\u003c/span\u003e std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt;\u0026amp; B)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e m = A.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e(), n = B.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e left = \u003cspan class=\"number\"\u003e0\u003c/span\u003e, right = m + \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i, j;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (left \u0026lt; right) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      i = left + (right - left) / \u003cspan class=\"number\"\u003e2\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      j = (m + n) / \u003cspan class=\"number\"\u003e2\u003c/span\u003e - i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"built_in\"\u003enot\u003c/span\u003e(i == m \u003cspan class=\"keyword\"\u003eor\u003c/span\u003e B[j - \u003cspan class=\"number\"\u003e1\u003c/span\u003e] \u0026lt; A[i])) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        left = i + \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"built_in\"\u003enot\u003c/span\u003e(i == \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"keyword\"\u003eor\u003c/span\u003e A[i - \u003cspan class=\"number\"\u003e1\u003c/span\u003e] \u0026lt; B[j])) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        right = i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ebreak\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((m + n) % \u003cspan class=\"number\"\u003e2\u003c/span\u003e == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"type\"\u003edouble\u003c/span\u003e mx = (i == m) ? B[j] : ((j == n) ? A[i] : std::\u003cspan class=\"built_in\"\u003emin\u003c/span\u003e(A[i], B[j]));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"type\"\u003edouble\u003c/span\u003e mn = (i == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) ? B[j - \u003cspan class=\"number\"\u003e1\u003c/span\u003e] : ((j == \u003cspan class=\"number\"\u003e0\u003c/span\u003e) ? A[i - \u003cspan class=\"number\"\u003e1\u003c/span\u003e] : std::\u003cspan class=\"built_in\"\u003emax\u003c/span\u003e(A[i - \u003cspan class=\"number\"\u003e1\u003c/span\u003e], B[j - \u003cspan class=\"number\"\u003e1\u003c/span\u003e]));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (mn + mx) / \u003cspan class=\"number\"\u003e2.0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    } \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"built_in\"\u003ereturn\u003c/span\u003e (i == m) ? B[j] : ((j == n) ? A[i] : std::\u003cspan class=\"built_in\"\u003emin\u003c/span\u003e(A[i], B[j]));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-08-22T04:08:21Z",
  "Author": "Liam Huang"
}