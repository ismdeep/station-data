{
  "Source": "liam.page",
  "Title": "利用 std::transform 对字符串进行大小写转换",
  "Link": "https://liam.page/2017/12/14/std-transform-and-converting-string-to-upper-or-lower-case/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e对字符串的操作一直被认为是程序员的基本功之一。对于一个英文的字符串来说，最简单的操作，就是进行大小写转换了。这不是什么难事，但这里我们讨论的是 C++ 风格的写法。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"std-transform\"\u003e\u003ca href=\"#std-transform\" class=\"headerlink\" title=\"std::transform\"\u003e\u003c/a\u003e\u003ccode\u003estd::transform\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://en.cppreference.com/w/cpp/algorithm/transform\"\u003e\u003ccode\u003estd::transform\u003c/code\u003e\u003c/a\u003e 是定义在头文件 \u003ccode\u003ealgorithm\u003c/code\u003e 当中的一个函数模板。它和标准库中大多数其他函数模板一样，是对迭代器进行操作的函数。在 C++11 中，它有两个函数签名。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e InputIt,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e OutputIt,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e UnaryOperation \u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eOutputIt \u003cspan class=\"title\"\u003etransform\u003c/span\u003e\u003cspan class=\"params\"\u003e(InputIt first,          \u003cspan class=\"comment\"\u003e// 1.\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                   InputIt last,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                  OutputIt d_first,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e            UnaryOperation unary_op)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e InputIt1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e InputIt2,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e OutputIt,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e BinaryOperation \u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eOutputIt \u003cspan class=\"title\"\u003etransform\u003c/span\u003e\u003cspan class=\"params\"\u003e(InputIt1 first1,         \u003cspan class=\"comment\"\u003e// 2.\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                   InputIt1 last1,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                   InputIt2 first2,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e                   OutputIt d_first,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"params\"\u003e\u003cspan class=\"function\"\u003e            BinaryOperation binary_op )\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从功能上说，\u003ccode\u003estd::transform\u003c/code\u003e 和 Python 当中的内建函数 \u003ccode\u003emap()\u003c/code\u003e 非常相似。\u003c/p\u003e\n\u003cp\u003e(1) 接收两个 \u003ccode\u003eInputIt\u003c/code\u003e 类型的迭代器，界定了待处理的元素的范围（左闭右开区间），被一元操作 \u003ccode\u003eunary_op\u003c/code\u003e 处理之后，依次保存在 \u003ccode\u003eOutputIt\u003c/code\u003e 对应的容器当中。这基本上就是 Python 当中的 \u003ccode\u003emap(lambda x: return \u0026lt;do_something\u0026gt;, \u0026lt;iterable\u0026gt;)\u003c/code\u003e。只不过，Python 当中的 \u003ccode\u003emap()\u003c/code\u003e 将结果作为返回值返回，而 \u003ccode\u003estd::transform\u003c/code\u003e 将结果保存在 \u003ccode\u003ed_first\u003c/code\u003e 对应的容器中。\u003c/p\u003e\n\u003cp\u003e有了 (1) 的知识，(2) 也就不难理解了。(2) 的输入接受两组迭代器。第一组迭代器与 (1) 中的情形相同，第二组迭代器则只有一个起始位置 \u003ccode\u003efirst2\u003c/code\u003e而没有尾后截止。这样一来，我们必须保证第二组迭代器对应的容器足够大；即 \u003ccode\u003estd::distance(first1, last1) \u0026lt;= std::distance(first2, c2.end())\u003c/code\u003e，其中 \u003ccode\u003ec2.end()\u003c/code\u003e 表示 \u003ccode\u003efirst2\u003c/code\u003e 对应的容器的尾后迭代器。(2) 与 (1) 还有一处不同在于，(1) 接受一个 \u003ccode\u003eUnaryOperation\u003c/code\u003e，而 (2) 接受一个 \u003ccode\u003eBinaryOperation\u003c/code\u003e。因此，(2) 通过两个输入迭代器分别获取一个元素，经过 \u003ccode\u003eBinaryOperation\u003c/code\u003e 处理之后，保存在输出迭代器 \u003ccode\u003ed_frist\u003c/code\u003e 当中。这与 Python 当中的 \u003ccode\u003emap(lambda x, y: return \u0026lt;do_something\u0026gt;, \u0026lt;iterable_1\u0026gt;, \u0026lt;iterable_2\u0026gt;)\u003c/code\u003e 类似。\u003c/p\u003e\n\u003cp\u003e我们用如下代码说明 \u003ccode\u003estd::transform\u003c/code\u003e 的用法。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iterator\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; vec{\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e\u0026amp; e : vec) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::cout \u0026lt;\u0026lt; e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; vec_out;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    vec_out.\u003cspan class=\"built_in\"\u003ereserve\u003c/span\u003e(vec.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e());                                \u003cspan class=\"comment\"\u003e// 1.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::\u003cspan class=\"built_in\"\u003etransform\u003c/span\u003e(vec.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(), vec.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e(),                      \u003cspan class=\"comment\"\u003e// 2.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   std::\u003cspan class=\"built_in\"\u003eback_inserter\u003c/span\u003e(vec_out),                 \u003cspan class=\"comment\"\u003e// 3.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   [](\u003cspan class=\"type\"\u003eint\u003c/span\u003e i){ \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e i * i; });                 \u003cspan class=\"comment\"\u003e// 4.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e\u0026amp; e : vec_out) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::cout \u0026lt;\u0026lt; e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; vec_res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    vec_res.\u003cspan class=\"built_in\"\u003ereserve\u003c/span\u003e(vec.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e());\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::\u003cspan class=\"built_in\"\u003etransform\u003c/span\u003e(vec.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(), vec.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e(),                      \u003cspan class=\"comment\"\u003e// 5.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   vec_out.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(),                             \u003cspan class=\"comment\"\u003e// 6.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   std::\u003cspan class=\"built_in\"\u003eback_inserter\u003c/span\u003e(vec_res),                 \u003cspan class=\"comment\"\u003e// 7.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   [](\u003cspan class=\"type\"\u003eint\u003c/span\u003e lhs, \u003cspan class=\"type\"\u003eint\u003c/span\u003e rhs){ \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e rhs - lhs; });  \u003cspan class=\"comment\"\u003e// 8.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e\u0026amp; e : vec_res) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::cout \u0026lt;\u0026lt; e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里，(1) 为 \u003ccode\u003evec_out\u003c/code\u003e 预留好了足够的空间，避免在后续不断 \u003ccode\u003epush_back\u003c/code\u003e 的过程中动态扩容，降低效率。在实际工程中，若一个向量的长度是预计确定的，或者能够预估的，那么提前预留好空间能大幅提高效率。\u003c/p\u003e\n\u003cp\u003e在 (2)(3)(4) 处，我们调用了 \u003ccode\u003estd::transform\u003c/code\u003e 函数。(2) 处输入了待处理序列的起止位置迭代器（左闭右开）；(3) 处输入了结果保存位置的迭代器；(4) 则以 C++ 的 Lambda 函数创建了一个临时的一元函数（求平方）。\u003c/p\u003e\n\u003cp\u003e在 (5)(6)(7)(8) 处，我们再次调用了 \u003ccode\u003estd::transform\u003c/code\u003e 函数。(5) 处输入了第一个待处理序列的起止位置迭代器（左闭右开）；(6) 处输入了第二个待处理序列的起始位置迭代器（两个 \u003ccode\u003estd::vector\u0026lt;int\u0026gt;\u003c/code\u003e 长度相同，因而合法）；(7) 照例输入了结果保存位置的迭代器；(8) 则以 C++ 的 Lambda 函数创建了一个临时的二元函数（求差）。\u003c/p\u003e\n\u003cp\u003e这样一来，结果应该是：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ./a.out\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1 2 3 4 5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1 4 9 16 25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0 2 6 12 20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"std-tolower-和-std-toupper\"\u003e\u003ca href=\"#std-tolower-和-std-toupper\" class=\"headerlink\" title=\"std::tolower 和 std::toupper\"\u003e\u003c/a\u003e\u003ccode\u003estd::tolower\u003c/code\u003e 和 \u003ccode\u003estd::toupper\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://en.cppreference.com/w/cpp/string/byte/tolower\"\u003e\u003ccode\u003estd::tolower\u003c/code\u003e\u003c/a\u003e 和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://en.cppreference.com/w/cpp/string/byte/toupper\"\u003e\u003ccode\u003estd::toupper\u003c/code\u003e\u003c/a\u003e 是定义在头文件 \u003ccode\u003ecctype\u003c/code\u003e 当中的两个函数。它们的函数签名分别是\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003etolower\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e ch)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003etoupper\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003eint\u003c/span\u003e ch)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e需要额外注意的是，两个函数对参数是有要求的。\u003ccode\u003ech\u003c/code\u003e 必须不能是 \u003ccode\u003eEOF\u003c/code\u003e，并且必须能转换为 \u003ccode\u003eunsigned char\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"对字符串进行大小写转换\"\u003e\u003ca href=\"#对字符串进行大小写转换\" class=\"headerlink\" title=\"对字符串进行大小写转换\"\u003e\u003c/a\u003e对字符串进行大小写转换\u003c/h2\u003e\u003cp\u003e考虑到 \u003ccode\u003estd::string\u003c/code\u003e 和 \u003ccode\u003estd::vector\u003c/code\u003e 类似，都可以用迭代器进行逐元素地操作；我们可以利用 \u003ccode\u003estd::transform\u003c/code\u003e 和 \u003ccode\u003estd::tolower\u003c/code\u003e 及 \u003ccode\u003estd::toupper\u003c/code\u003e 对整个字符串进行大小写转换。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003enamespace\u003c/span\u003e std {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003estd::string \u003cspan class=\"title\"\u003etolower\u003c/span\u003e\u003cspan class=\"params\"\u003e(std::string str)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::\u003cspan class=\"built_in\"\u003etransform\u003c/span\u003e(str.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(), str.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   str.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   [](\u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e ch){ \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003etolower\u003c/span\u003e(ch); });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e std::\u003cspan class=\"built_in\"\u003emove\u003c/span\u003e(str);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003estd::string \u003cspan class=\"title\"\u003etoupper\u003c/span\u003e\u003cspan class=\"params\"\u003e(std::string str)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::\u003cspan class=\"built_in\"\u003etransform\u003c/span\u003e(str.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(), str.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   str.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                   [](\u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e ch){ \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003etoupper\u003c/span\u003e(ch); });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e std::\u003cspan class=\"built_in\"\u003emove\u003c/span\u003e(str);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}  \u003cspan class=\"comment\"\u003e// namespace std\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::string str = \u003cspan class=\"string\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;original:\\t\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; str \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;tolower:\\t\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::\u003cspan class=\"built_in\"\u003etolower\u003c/span\u003e(str) \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;toupper:\\t\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::\u003cspan class=\"built_in\"\u003etoupper\u003c/span\u003e(str) \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e有了之前的知识，这份代码是不言自明的。它的输出应该是：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ./a.out\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eoriginal:       Hello World!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etolower:        hello world!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etoupper:        HELLO WORLD!\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-12-14T03:34:28Z",
  "Author": "Liam Huang"
}