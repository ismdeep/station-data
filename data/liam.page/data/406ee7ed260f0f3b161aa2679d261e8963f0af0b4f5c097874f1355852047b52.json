{
  "Source": "liam.page",
  "Title": "在 LaTeX 中使用微分算子的正确姿势",
  "Link": "https://liam.page/2017/05/01/the-correct-way-to-use-differential-operator/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e此篇讨论很小的「一点」——关于如何正确排版微分算子。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003e所谓微分算子，其英文名字叫做 differential operator，也就是 \u003ccode\u003e$\\mathrm{d} x$\u003c/code\u003e 中的 $\\mathrm{d}$。由于微分算子，形式上就是拉丁字母 \u003ccode\u003ed\u003c/code\u003e；并且中国人读起来也就是简单粗暴的「滴埃克斯」。所以，在书写 LaTeX 手稿时，很多人简单粗暴地将微分算子写作 \u003ccode\u003edx\u003c/code\u003e，例如不定积分 \u003ccode\u003e\\int f(x)dx\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e我们说，数学算式是精美而珍贵的。在排版数学算式时，你不能马虎，应该小心谨慎。这也是为什么 Knuth 在设计 TeX 时，将数学式子都包含在美元符号 \u003ccode\u003e$\u003c/code\u003e 之间的原因。对待微分算子，我们也应该有这样的心态。\u003c/p\u003e\n\u003cp\u003e粗话说：「如果没有标准，那所有的争执都是瞎扯淡」。正如单位制有所谓的 ISO 国际单位制一样，数学符号也有对应的 ISO 标准。数学符号的标准，首先是定义在 ISO 31-11 当中；而后这个标准被 ISO 80000-2:2009 取代。因此，此篇讨论的内容，都是基于 ISO 80000-2:2009 的。\u003c/p\u003e\n\u003cp\u003e在 ISO 80000-2:2009 中，微分算子被描述为\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e直立的拉丁字母 d；\u003c/li\u003e\n\u003cli\u003e一个右边没有间距的操作符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e对于直立的拉丁字母 d，我们可以使用 \u003ccode\u003e\\mathrm{d}\u003c/code\u003e 达成效果。而若要微分算子的左边有间距，而右边没有，这个问题就值得思考了。\u003c/p\u003e\n\u003cp\u003e最简单的办法，是将微分算子做如下实现\u003c/p\u003e\n\u003cfigure class=\"highlight tex\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\newcommand\u003c/span\u003e*{\u003cspan class=\"keyword\"\u003e\\dif\u003c/span\u003e}{\u003cspan class=\"keyword\"\u003e\\,\u003c/span\u003e\u003cspan class=\"keyword\"\u003e\\mathrm\u003c/span\u003e{d}}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看起来，这样是没有问题的。但是，在某些情况下，就会出现尴尬的问题。比如\u003c/p\u003e\n\u003cfigure class=\"highlight tex\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e关于 \u003cspan class=\"built_in\"\u003e$\u003c/span\u003ex\u003cspan class=\"built_in\"\u003e$\u003c/span\u003e 的微分 \u003cspan class=\"built_in\"\u003e$\u003c/span\u003e\u003cspan class=\"keyword\"\u003e\\dif\u003c/span\u003e x\u003cspan class=\"built_in\"\u003e$\u003c/span\u003e 是值得思考的问题。\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因为在 \u003ccode\u003e\\dif\u003c/code\u003e 的定义中，\u003ccode\u003e\\mathrm{d}\u003c/code\u003e 之前有不可省略的铅空 \u003ccode\u003e\\,\u003c/code\u003e。于是，这份代码中 \u003ccode\u003e\\dif x\u003c/code\u003e 与前后正文之间的距离就不一致了。为了解决这个问题，更有经验的人可能会选择这样定义\u003c/p\u003e\n\u003cfigure class=\"highlight tex\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\newcommand\u003c/span\u003e*{\u003cspan class=\"keyword\"\u003e\\dif\u003c/span\u003e}{\u003cspan class=\"keyword\"\u003e\\mathop\u003c/span\u003e{\u003cspan class=\"keyword\"\u003e\\mathrm\u003c/span\u003e{d}}\u003cspan class=\"keyword\"\u003e\\!\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这份代码，试图利用 \u003ccode\u003e\\mathop\u003c/code\u003e，只在必要的时候于左边插入空白，修复了上面的问题。不过，这样一来也带来了一些副作用——在 \u003ccode\u003e\\mathop\u003c/code\u003e 的作用下，\u003ccode\u003e\\mathrm{d}\u003c/code\u003e 的基线发生了改变，不再与正常的数学变量保持在同一个基线上。这也是不好的。\u003c/p\u003e\n\u003cp\u003e最终解决问题，应该对微分算子有这样的定义\u003c/p\u003e\n\u003cfigure class=\"highlight tex\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\newcommand\u003c/span\u003e*{\u003cspan class=\"keyword\"\u003e\\dif\u003c/span\u003e}{\u003cspan class=\"keyword\"\u003e\\mathop\u003c/span\u003e{}\u003cspan class=\"keyword\"\u003e\\!\u003c/span\u003e\u003cspan class=\"keyword\"\u003e\\mathrm\u003c/span\u003e{d}}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这个定义中，拉丁字母 d 本身的特点得到了保留（比如基线是正常的）。此外，在 \u003ccode\u003e\\mathrm{d}\u003c/code\u003e 的左边，插入了一个空白的 \u003ccode\u003e\\mathop{}\u003c/code\u003e；其左边的空白保留，而右边与 \u003ccode\u003e\\mathrm{d}\u003c/code\u003e 之间的距离，则由 \u003ccode\u003e\\!\u003c/code\u003e 抑制。这样就达成了我们的目标。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.tug.org/TUGboat/Articles/tb18-1/tb54becc.pdf#page=8\"\u003ehttp://www.tug.org/TUGboat/Articles/tb18-1/tb54becc.pdf#page=8\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-05-01T11:57:17Z",
  "Author": "Liam Huang"
}