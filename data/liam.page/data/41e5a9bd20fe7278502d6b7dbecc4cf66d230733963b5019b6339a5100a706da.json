{
  "Source": "liam.page",
  "Title": "在 C++ 中读取字符串中成对定界符中的子串",
  "Link": "https://liam.page/2017/03/13/read-substrings-from-paired-delimiters-in-Cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e这篇文章是一个简单的记录，解决类似这样的问题。\u003c/p\u003e\n\u003cp\u003e假设有一个字符串\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::string = \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;foo:bar\u0026gt; \u0026lt;baz:qux\u0026gt;\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e要怎样才能读出其中的 \u003ccode\u003efoo:bar\u003c/code\u003e 以及 \u003ccode\u003ebaz:qux\u003c/code\u003e 呢？使用 \u003ccode\u003eregex\u003c/code\u003e 正则库当然是一个办法，不过在规整的情况下，我们还有更优雅的选择。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"std-getline\"\u003e\u003ca href=\"#std-getline\" class=\"headerlink\" title=\"std::getline\"\u003e\u003c/a\u003e\u003ccode\u003estd::getline\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e\u003ccode\u003estd::getline\u003c/code\u003e 函数来自头文件 \u003ccode\u003estring\u003c/code\u003e。因此，显而易见它是一个和字符串相关的函数。它有四个重载版本，具体如下：\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eistream\u0026amp; \u003cspan class=\"title\"\u003egetline\u003c/span\u003e \u003cspan class=\"params\"\u003e(istream\u0026amp;  is, string\u0026amp; str, \u003cspan class=\"type\"\u003echar\u003c/span\u003e delim)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eistream\u0026amp; \u003cspan class=\"title\"\u003egetline\u003c/span\u003e \u003cspan class=\"params\"\u003e(istream\u0026amp;\u0026amp; is, string\u0026amp; str, \u003cspan class=\"type\"\u003echar\u003c/span\u003e delim)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eistream\u0026amp; \u003cspan class=\"title\"\u003egetline\u003c/span\u003e \u003cspan class=\"params\"\u003e(istream\u0026amp;  is, string\u0026amp; str)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eistream\u0026amp; \u003cspan class=\"title\"\u003egetline\u003c/span\u003e \u003cspan class=\"params\"\u003e(istream\u0026amp;\u0026amp; is, string\u0026amp; str)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中第 2 个和第 4 个版本，分别是第 1 个和第 3 个版本对应的右值引用版本。函数基本的作用，是自输入流读入内容，直至遇见定界符（带 \u003ccode\u003edelim\u003c/code\u003e 的版本）或者换行符 \u003ccode\u003e\\n\u003c/code\u003e（不带 \u003ccode\u003edelim\u003c/code\u003e 的版本），并将读入的内容写入字符串 \u003ccode\u003estr\u003c/code\u003e（不包括定界符本身）。\u003c/p\u003e\n\u003cp\u003e值得注意的是，函数会修改输入流 \u003ccode\u003eis\u003c/code\u003e 本身，并且返回它的左值引用。这一特性意味着 \u003ccode\u003estd::getline\u003c/code\u003e 函数可以「串行」执行。\u003c/p\u003e\n\u003ch2 id=\"实际解析看看\"\u003e\u003ca href=\"#实际解析看看\" class=\"headerlink\" title=\"实际解析看看\"\u003e\u003c/a\u003e实际解析看看\u003c/h2\u003e\u003cp\u003e请看代码。\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;sstream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e LEFT_DELIM  = \u003cspan class=\"string\"\u003e\u0026#39;\u0026lt;\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e RIGHT_DELIM = \u003cspan class=\"string\"\u003e\u0026#39;\u0026gt;\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e MID_DELIM   = \u003cspan class=\"string\"\u003e\u0026#39;:\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e std::string test = \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;foo:bar\u0026gt; \u0026lt;baz:qux\u0026gt;\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::istringstream \u003cspan class=\"title\"\u003eiss\u003c/span\u003e\u003cspan class=\"params\"\u003e(test)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::string skip, value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (std::\u003cspan class=\"built_in\"\u003egetline\u003c/span\u003e(std::\u003cspan class=\"built_in\"\u003egetline\u003c/span\u003e(iss, skip, LEFT_DELIM), value, RIGHT_DELIM)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;-----\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"function\"\u003estd::istringstream \u003cspan class=\"title\"\u003eiss\u003c/span\u003e\u003cspan class=\"params\"\u003e(value)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::string key, value;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (std::\u003cspan class=\"built_in\"\u003egetline\u003c/span\u003e(std::\u003cspan class=\"built_in\"\u003egetline\u003c/span\u003e(iss, key, MID_DELIM), value)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            std::cout \u0026lt;\u0026lt; key \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\t\u0026#39;\u003c/span\u003e \u0026lt;\u0026lt; value \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，我们将 \u003ccode\u003etest\u003c/code\u003e 与字符串输入流 \u003ccode\u003eiss\u003c/code\u003e 绑定。\u003c/p\u003e\n\u003cp\u003e而后用 \u003ccode\u003estd::getline\u003c/code\u003e 从 \u003ccode\u003eiss\u003c/code\u003e 中先后将内容读入 \u003ccode\u003eskip\u003c/code\u003e 和 \u003ccode\u003evalue\u003c/code\u003e。在这里，内层的 \u003ccode\u003estd::getline(iss, skip, LEFT_DELIM)\u003c/code\u003e 首先执行，将 \u003ccode\u003eLEFT_DELIM\u003c/code\u003e 之前的内容（实际上是空字符串）读入 \u003ccode\u003eskip\u003c/code\u003e 变量，而后修改 \u003ccode\u003eiss\u003c/code\u003e 的状态，并返回它的左值引用作为外层 \u003ccode\u003estd::getline\u003c/code\u003e 的第一个参数。而后，外层的 \u003ccode\u003estd::getline\u003c/code\u003e 将第一次遇到 \u003ccode\u003eRIGHT_DELIM\u003c/code\u003e 之前的内容 \u003ccode\u003efoo:bar\u003c/code\u003e 读入 \u003ccode\u003evalue\u003c/code\u003e 变量。如此循环。\u003c/p\u003e\n\u003cp\u003e进入到外层 \u003ccode\u003ewhile\u003c/code\u003e 循环的内部，我们采用了类似的策略，分别将冒号前后的内容，存入 \u003ccode\u003ekey\u003c/code\u003e 和 \u003ccode\u003evalue\u003c/code\u003e 两个变量。读者可以自行分析。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-03-13T15:08:38Z",
  "Author": "Liam Huang"
}