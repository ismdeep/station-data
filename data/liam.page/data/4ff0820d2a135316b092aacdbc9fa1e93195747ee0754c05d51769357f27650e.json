{
  "Source": "liam.page",
  "Title": "谈谈 C++ 中的右值引用",
  "Link": "https://liam.page/2016/12/11/rvalue-reference-in-Cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e最近在改 XGBoost 的代码。XGBoost 在代码中使用了很多来自 C++11 标准中的特性，让我比较好奇和困惑的，就有其中关于右值引用的部分。涉及到代码里，有比较明显的两类用法：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003estd::move\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::\u003cspan class=\"built_in\"\u003emove\u003c/span\u003e(foo)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003estd::unique_ptr\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::vector\u0026lt;std::unique_ptr\u0026lt;T\u0026gt;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e前者是使用 \u003ccode\u003estd::move\u003c/code\u003e 返回 \u003ccode\u003efoo\u003c/code\u003e 的右值引用；后者则在容器 \u003ccode\u003estd::vector\u003c/code\u003e 中放入了不可复制只能移动的类的对象（智能指针 \u003ccode\u003estd::unique_ptr\u003c/code\u003e），当你尝试用常规方法将整个 \u003ccode\u003estd::vector\u003c/code\u003e 中的元素依次加入另一个 \u003ccode\u003estd::vector\u003c/code\u003e 的时候，编译器就会报错，提示 \u003ccode\u003estd::unique_ptr\u003c/code\u003e 的拷贝构造函数是被删除的。\u003c/p\u003e\n\u003cp\u003e因为好奇和困惑，所以想要把它们搞清楚，于是有了这篇文章。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"左值和右值\"\u003e\u003ca href=\"#左值和右值\" class=\"headerlink\" title=\"左值和右值\"\u003e\u003c/a\u003e左值和右值\u003c/h2\u003e\u003cp\u003e左值和右值，最早是从 C 语言继承而来的。在 C 语言，或者继承版本，的解释中，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e左值是可以位于赋值运算符 \u003ccode\u003e=\u003c/code\u003e 左侧的表达式（当然，左值也可以位于 \u003ccode\u003e=\u003c/code\u003e 的右侧），而\u003c/li\u003e\n\u003cli\u003e右值是不可以位于赋值运算符 \u003ccode\u003e=\u003c/code\u003e 左侧的表达式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e对于这个经典的解释，我们有如下示例\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003elvalue-and-rvalue\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003ebar\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e43\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// foo, bar 都是左值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoo = bar;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebar = foo;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoo = foo * bar;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// foo * bar 是右值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e baz;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebaz = foo * bar;  \u003cspan class=\"comment\"\u003e// OK: 右值在赋值运算符右侧\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoo * bar = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;   \u003cspan class=\"comment\"\u003e// Err: 右值在赋值运算符左侧\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个解释很经典，也容易懂。不过在 C++ 里面，左值和右值不能这样定义。根据《C++ Primer》的说法，左值和右值可以这样区分：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一个表达式是左值还是右值，取决于我们使用的是它的值还是它在内存中的位置（作为对象的身份）。也就是说一个表达式具体是左值还是右值，要根据实际在语句中的含义来确定。例如\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e bar;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 将 foo 的值赋给 bar，保存在 bar 对应的内存中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// foo 在这里作为表达式是右值；bar 在这里作为表达式是左值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 但是 foo 作为对象，既可以充当左值又可以充当右值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebar = foo;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因为 C++ 中的对象本身可以是一个表达式，所以这里有一个重要的原则，即\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在大多数情况下，需要右值的地方可以用左值来替代，但\u003c/li\u003e\n\u003cli\u003e需要左值的地方，一定不能用右值来替代。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e又有一个重要的特点，即\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e左值存放在对象中，有持久的状态；而\u003c/li\u003e\n\u003cli\u003e右值要么是字面常量，要么是在表达式求值过程中创建的临时对象，没有持久的状态。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"左值引用和右值引用\"\u003e\u003ca href=\"#左值引用和右值引用\" class=\"headerlink\" title=\"左值引用和右值引用\"\u003e\u003c/a\u003e左值引用和右值引用\u003c/h2\u003e\u003cp\u003e在 C++ 中，有两种对对象的引用：左值引用和右值引用。\u003c/p\u003e\n\u003cp\u003e左值引用是常见的引用，所以一般在提到「对象的引用」的时候，指得就是左值引用。如果我们将一个对象的内存空间绑定到另一个变量上，那么这个变量就是左值引用。在建立引用的时候，我们是「将内存空间绑定」，因此我们使用的是一个对象在内存中的位置，这是一个左值。因此，我们不能将一个右值绑定到左值引用上。另一方面，由于常量左值引用保证了我们不能通过引用改变对应内存空间的值，因此我们可以将右值绑定在常量引用上。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003elvalue-reference\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; bar = foo;  \u003cspan class=\"comment\"\u003e// OK: foo 在此是左值，将它的内存空间与 bar 绑定在一起\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; baz = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;   \u003cspan class=\"comment\"\u003e// Err: 42 是右值，不能将它绑定在左值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; qux = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;  \u003cspan class=\"comment\"\u003e// OK: 42 是右值，但是编译器可以为它开辟一块内存空间，绑定在 qux 上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e右值引用也是引用，但是它\u003cstrong\u003e只能且必须\u003c/strong\u003e绑定在右值上。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003ervalue-reference\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; bar = foo;        \u003cspan class=\"comment\"\u003e// OK: 将 foo 绑定在左值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp;\u0026amp; baz = foo;       \u003cspan class=\"comment\"\u003e// Err: foo 可以是左值，所以不能将它绑定在右值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp;\u0026amp; qux = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;        \u003cspan class=\"comment\"\u003e// OK: 将右值 42 绑定在右值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp;\u0026amp; quux = foo * \u003cspan class=\"number\"\u003e1\u003c/span\u003e;  \u003cspan class=\"comment\"\u003e// OK: foo * 1 的结果是一个右值，将它绑定在右值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; garply = foo++;   \u003cspan class=\"comment\"\u003e// Err: 后置自增运算符返回的是右值，不能将它绑定在左值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp;\u0026amp; waldo = foo--;   \u003cspan class=\"comment\"\u003e// OK: 后置自减运算符返回的是右值，将它绑定在右值引用上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e由于右值引用只能绑定在右值上，而右值要么是字面常量，要么是临时对象，所以：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e右值引用的对象，是临时的，即将被销毁；并且\u003c/li\u003e\n\u003cli\u003e右值引用的对象，不会在其它地方使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e敲黑板：这是重点！\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这两个特性意味着：\u003cstrong\u003e接受和使用右值引用的代码，可以自由地接管所引用的对象的资源，而无需担心对其他代码逻辑造成数据破坏\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"引用的值类型与引用叠加\"\u003e\u003ca href=\"#引用的值类型与引用叠加\" class=\"headerlink\" title=\"引用的值类型与引用叠加\"\u003e\u003c/a\u003e引用的值类型与引用叠加\u003c/h2\u003e\u003ch3 id=\"值类型\"\u003e\u003ca href=\"#值类型\" class=\"headerlink\" title=\"值类型\"\u003e\u003c/a\u003e值类型\u003c/h3\u003e\u003cp\u003e我们思考一个问题：右值引用本身是左值还是右值？或者可以先思考一下它的对偶问题：左值引用本身是左值还是右值？\u003c/p\u003e\n\u003cp\u003e先看下面的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003elvalue-reference-value-type\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; bar = foo;     \u003cspan class=\"comment\"\u003e// bar 是对 foo 的左值引用\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; baz = bar;     \u003cspan class=\"comment\"\u003e// baz 是对 bar 的左值引用，因而 bar 是左值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e qux = ++foo;    \u003cspan class=\"comment\"\u003e// 前置自增运算符返回左值引用，在这里赋值给 qux，此时左值引用作为右值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e观察上面代码，不难发现，左值引用本身既可以是左值，又可以是右值。它具体是左值还是右值，依然取决于它作为表达式时候的作用。更仔细地观察可以发现，如果左值引用作为一个变量被保存下来了，那么它就可以是左值（当然也可以起到右值的作用）；而如果左值引用是一个临时变量（例如函数的返回值），那么它就是右值。\u003c/p\u003e\n\u003cp\u003e同理可以用在右值引用上。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003ervalue-reference-value-type\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eType\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e\u003cspan class=\"params\"\u003e(Type\u0026amp;\u0026amp; bar)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 将右值引用作为 Type 的构造函数的参数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 此时匹配 Type::Type(const Type\u0026amp; orig), 即拷贝构造函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// bar 是左值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003eType \u003cspan class=\"title\"\u003ebaz\u003c/span\u003e\u003cspan class=\"params\"\u003e(bar)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eType\u0026amp;\u0026amp; \u003cspan class=\"title\"\u003equx\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003equux = \u003cspan class=\"built_in\"\u003equx\u003c/span\u003e();   \u003cspan class=\"comment\"\u003e// qux 的返回值是 Type 类型的右值引用，此时右值引用是右值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e和左值引用一样，右值引用本身也既可以作为左值也可以作为右值。并且，同样的是：如果右值引用作为变量被保存下来了，那么应该把它当做是一个左值看待；否则应当作为右值看待。\u003c/p\u003e\n\u003cp\u003e因此，不论是左值引用还是右值引用，都有\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当引用作为变量被保存下来，那么它是左值；否则\u003c/li\u003e\n\u003cli\u003e它是右值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"叠加\"\u003e\u003ca href=\"#叠加\" class=\"headerlink\" title=\"叠加\"\u003e\u003c/a\u003e叠加\u003c/h3\u003e\u003cp\u003e我们先来看一段代码。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003ereference_collapsing.cpp\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp; intR;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e intR\u0026amp; intRR;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e foo = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    intR bar = foo;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    intRR baz = bar;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，\u003ccode\u003eintR\u003c/code\u003e 实际上是 \u003ccode\u003eint\u0026amp;\u003c/code\u003e。因此 \u003ccode\u003eintRR\u003c/code\u003e 就变成了 \u003ccode\u003eint\u0026amp; \u0026amp;\u003c/code\u003e，注意两个 \u003ccode\u003e\u0026amp;\u003c/code\u003e 之间有一个空格，表示这是对 \u003ccode\u003eint\u003c/code\u003e 类型引用的引用，也就是引用的叠加。在 C++11 之前，编译这份代码是会报错的：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eref_test.cpp:2:15: 错误：无法声明对‘intR {aka int\u0026amp;}’的引用\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是因为在 C++11 之前，C++ 标准没有写明引用叠加。在 C++11 中，引用叠加有如下规则：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eType\u0026amp;  \u0026amp;  -\u0026gt; Type\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eType\u0026amp;  \u0026amp;\u0026amp; -\u0026gt; Type\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eType\u0026amp;\u0026amp; \u0026amp;  -\u0026gt; Type\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eType\u0026amp;\u0026amp; \u0026amp;\u0026amp; -\u0026gt; Type\u0026amp;\u0026amp;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这有点类似布尔代数中的与运算：左值引用是 0，右值引用是 1。因此，在 C++11 中，上述代码中的 \u003ccode\u003eintRR\u003c/code\u003e 实际就是 \u003ccode\u003eint\u0026amp;\u003c/code\u003e 类型。这样一来，代码就合法了。\u003c/p\u003e\n\u003cp\u003e同样的引用叠加规则，也可以应用到模板参数推导中。看这个例子\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003etemplate-param\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e \u0026lt;\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e T\u0026gt; \u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003efunc\u003c/span\u003e\u003cspan class=\"params\"\u003e(T\u0026amp;\u0026amp; foo)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e fp = func\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026amp;\u0026amp;\u0026gt;;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，\u003ccode\u003efunc\u003c/code\u003e 是一个模板函数，\u003ccode\u003efp\u003c/code\u003e 是函数指针。要确定 \u003ccode\u003efp\u003c/code\u003e 的实际类型，就要先确定模板函数参数的类型。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在模板中，\u003ccode\u003eT\u003c/code\u003e 被 \u003ccode\u003eint\u0026amp;\u0026amp;\u003c/code\u003e 替换，因此 \u003ccode\u003eT\u003c/code\u003e 是 \u003ccode\u003eint\u003c/code\u003e 的右值引用；\u003c/li\u003e\n\u003cli\u003e在函数参数列表声明中，\u003ccode\u003efoo\u003c/code\u003e 是 \u003ccode\u003eT\u0026amp;\u0026amp;\u003c/code\u003e 类型，因此是 \u003ccode\u003eint\u0026amp;\u0026amp; \u0026amp;\u0026amp;\u003c/code\u003e 类型，根据叠加规则，实际 \u003ccode\u003efoo\u003c/code\u003e 是 \u003ccode\u003eint\u0026amp;\u0026amp;\u003c/code\u003e 类型。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这样一来，\u003ccode\u003efp\u003c/code\u003e 就是 \u003ccode\u003evoid (*)(int\u0026amp;\u0026amp;)\u003c/code\u003e 类型的指针了。\u003c/p\u003e\n\u003ch2 id=\"右值引用怎么用\"\u003e\u003ca href=\"#右值引用怎么用\" class=\"headerlink\" title=\"右值引用怎么用\"\u003e\u003c/a\u003e右值引用怎么用\u003c/h2\u003e\u003cp\u003e说了这么多右值引用的概念，应该说点实际的用途了，这样右值引用这件事情看起来才会显得自然。\u003c/p\u003e\n\u003ch3 id=\"move-语义\"\u003e\u003ca href=\"#move-语义\" class=\"headerlink\" title=\"move 语义\"\u003e\u003c/a\u003emove 语义\u003c/h3\u003e\u003cp\u003e假设 \u003ccode\u003eclass Container\u003c/code\u003e 有这样的定义\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003eContainer-demo\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eContainer\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e std::string Resource;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e Resource;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;default constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"title\"\u003eContainer\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e Resource\u0026amp; resource)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eResource\u003c/span\u003e(resource);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;explicit constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ~\u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e resource_;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;destructor\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e Container\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eResource\u003c/span\u003e(*(rhs.resource_));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;copy constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Container\u0026amp; \u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e=(\u003cspan class=\"type\"\u003econst\u003c/span\u003e Container\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e resource_;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eResource\u003c/span\u003e(*(rhs.resource_));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;copy assignment.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e *\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Resource* resource_ = \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e于是当你执行类似这样的代码的时候，你会很郁闷地发现，效率很低：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003edemo-return-Container\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eContainer \u003cspan class=\"title\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003eContainer \u003cspan class=\"title\"\u003eret\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"string\"\u003e\u0026#34;tag\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ret;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Container foo;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  foo = \u003cspan class=\"built_in\"\u003eget\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// $ ./a.out\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// default constructor.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// explicit constructor.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// copy assignment.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// destructor\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// destructor\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在执行 \u003ccode\u003ebar = foo()\u003c/code\u003e 的时候，会进行这样的操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e从函数返回值中得到临时对象 \u003ccode\u003erhs\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e销毁 \u003ccode\u003ebar\u003c/code\u003e 中的资源（\u003ccode\u003edelete resource_;\u003c/code\u003e）；\u003c/li\u003e\n\u003cli\u003e将 \u003ccode\u003erhs\u003c/code\u003e 中的资源拷贝一份，赋值给 \u003ccode\u003ebar\u003c/code\u003e 中的资源（\u003ccode\u003eresource_ = new Resource(*(rhs.resource_));\u003c/code\u003e）；\u003c/li\u003e\n\u003cli\u003e销毁 \u003ccode\u003erhs\u003c/code\u003e 这一临时对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e仔细想想你会发现，销毁 \u003ccode\u003ebar\u003c/code\u003e 中的资源，再从临时对象中复制相应的资源，这件事情完全没有必要。我们最好能直接抛弃 \u003ccode\u003ebar\u003c/code\u003e 中的资源而后直接接管 \u003ccode\u003efoo\u003c/code\u003e 返回的临时对象。这就是 move 语义。\u003c/p\u003e\n\u003cp\u003e这样一来，就意味着我们需要重载 \u003ccode\u003eContainer\u003c/code\u003e 类的赋值操作符，它应该有这样的函数声明：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eContainer\u0026amp; Container::\u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e=(\u0026lt;mystery type\u0026gt; rhs)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了与拷贝版本的赋值运算符区分，我们希望，当 \u003ccode\u003eContainer::operator=\u003c/code\u003e 的右操作数是右值引用时，调用这个版本的赋值运算符，那么毫无疑问，\u003ccode\u003e\u0026lt;mystery type\u0026gt;\u003c/code\u003e 应该是 \u003ccode\u003eContainer\u0026amp;\u0026amp;\u003c/code\u003e。于是我们定义它（称为移动赋值运算符，以及同时定义移动构造函数）：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003emove-demo\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eContainer\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e std::string Resource;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e Resource;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;default constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"title\"\u003eContainer\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e Resource\u0026amp; resource)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eResource\u003c/span\u003e(resource);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;explicit constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ~\u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e resource_;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;destructor\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e Container\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eResource\u003c/span\u003e(*(rhs.resource_));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;copy constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Container\u0026amp; \u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e=(\u003cspan class=\"type\"\u003econst\u003c/span\u003e Container\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003edelete\u003c/span\u003e resource_;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resource_ = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eResource\u003c/span\u003e(*(rhs.resource_));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;copy assignment.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e *\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eContainer\u003c/span\u003e(Container\u0026amp;\u0026amp; rhs) : \u003cspan class=\"built_in\"\u003eresource_\u003c/span\u003e(rhs.resource_) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    rhs.resource_ = \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;move constructor.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Container\u0026amp; \u003cspan class=\"keyword\"\u003eoperator\u003c/span\u003e=(Container\u0026amp;\u0026amp; rhs) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Resource* tmp = resource_; resource_ = rhs.resource_; rhs.resource_ = tmp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;move assignment.\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e *\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Resource* resource_ = \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e亦即，我们只需要对两个指针的值进行操作就可以了。这样一来，相同代码的执行过程会变成：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003emove-demo-return-Container\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eContainer \u003cspan class=\"title\"\u003eget\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003eContainer \u003cspan class=\"title\"\u003eret\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"string\"\u003e\u0026#34;tag\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ret;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Container foo;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  foo = \u003cspan class=\"built_in\"\u003eget\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// $ ./a.out\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// default constructor.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// explicit constructor.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// move assignment.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// destructor\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// destructor\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e从函数返回值中得到临时对象 \u003ccode\u003erhs\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e交换 \u003ccode\u003efoo.resource_\u003c/code\u003e 和 \u003ccode\u003erhs.resource_\u003c/code\u003e 两个指针的值；\u003c/li\u003e\n\u003cli\u003e销毁 \u003ccode\u003erhs\u003c/code\u003e 这一临时对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这相当于我们将临时对象 \u003ccode\u003erhs\u003c/code\u003e 中的资源「移动」到了 \u003ccode\u003efoo\u003c/code\u003e 当中，避免了销毁资源再拷贝赋值的开销。\u003c/p\u003e\n\u003ch3 id=\"完美转发（perfect-forwarding）\"\u003e\u003ca href=\"#完美转发（perfect-forwarding）\" class=\"headerlink\" title=\"完美转发（perfect forwarding）\"\u003e\u003c/a\u003e完美转发（perfect forwarding）\u003c/h3\u003e\u003cp\u003e首先我们来看一个工厂函数\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003efactory\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e T, \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e ArgT\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003estd::shared_ptr\u0026lt;T\u0026gt; \u003cspan class=\"title\"\u003efactory\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e ArgT\u0026amp; arg)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003eshapred_ptr\u003c/span\u003e\u0026lt;T\u0026gt;(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eT\u003c/span\u003e(arg));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003efactory\u003c/code\u003e 函数有两个模板参数 \u003ccode\u003eT\u003c/code\u003e 与 \u003ccode\u003eArgT\u003c/code\u003e，并假定类型 \u003ccode\u003eT\u003c/code\u003e 有一个构造函数，可以接受 \u003ccode\u003econst ArgT\u0026amp;\u003c/code\u003e 类型的参数，进行 \u003ccode\u003eT\u003c/code\u003e 类型对象的构造，然后返回一个 \u003ccode\u003eT\u003c/code\u003e 类型的智能指针，指向构造出来的对象。\u003c/p\u003e\n\u003cp\u003e毫无疑问，在这个例子里，\u003ccode\u003efactory\u003c/code\u003e 函数的 \u003ccode\u003earg\u003c/code\u003e 变量既可以接受左值，也可以接受右值（允许将右值绑定在常量左值引用上）。但这里还有一个问题，按照之前的分析，不论 \u003ccode\u003earg\u003c/code\u003e 接受的是什么类型，到了 \u003ccode\u003efactory\u003c/code\u003e 函数内部，\u003ccode\u003earg\u003c/code\u003e 本身都将是一个左值。这样一来，假设类型 \u003ccode\u003eT\u003c/code\u003e 的构造函数支持对 \u003ccode\u003eArgT\u003c/code\u003e 类型的右值引用，也将永远不会被调用。也就是说，\u003ccode\u003efactory\u003c/code\u003e 函数无法实现 move 语义，也就无法不能算是完美转发。\u003c/p\u003e\n\u003cp\u003e这里我们引入一个函数，它是标准库的一部分：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003eforward\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e S\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eS\u0026amp;\u0026amp; \u003cspan class=\"title\"\u003eforward\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e std::remove_reference\u0026lt;S\u0026gt;::type\u0026amp; a)\u003c/span\u003e \u003cspan class=\"keyword\"\u003enoexcept\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003estatic_cast\u003c/span\u003e\u0026lt;S\u0026amp;\u0026amp;\u0026gt;(a);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当 \u003ccode\u003ea\u003c/code\u003e 的类型是 \u003ccode\u003eS\u0026amp;\u003c/code\u003e 的时候，函数将返回 \u003ccode\u003eS\u0026amp;\u003c/code\u003e；当 \u003ccode\u003ea\u003c/code\u003e 的类型是 \u003ccode\u003eS\u0026amp;\u0026amp;\u003c/code\u003e 的时候，函数将返回 \u003ccode\u003eS\u0026amp;\u0026amp;\u003c/code\u003e。因此，在这种情况下，我们只需要稍微改动工厂函数的定义就可以了：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003efactory-final\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e T, \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e ArgT\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003estd::shared_ptr\u0026lt;T\u0026gt; \u003cspan class=\"title\"\u003efactory\u003c/span\u003e\u003cspan class=\"params\"\u003e(ArgT\u0026amp;\u0026amp; arg)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e std::\u003cspan class=\"built_in\"\u003eshapred_ptr\u003c/span\u003e\u0026lt;T\u0026gt;(\u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"built_in\"\u003eT\u003c/span\u003e(std::forward\u0026lt;ArgT\u0026gt;(arg)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e于是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e当 \u003ccode\u003earg\u003c/code\u003e 是接受的参数是 \u003ccode\u003eType\u0026amp;\u003c/code\u003e 时，\u003ccode\u003eArgT\u003c/code\u003e 是 \u003ccode\u003eType\u0026amp;\u003c/code\u003e，\u003ccode\u003earg\u003c/code\u003e 的类型是 \u003ccode\u003eType\u0026amp;\u003c/code\u003e，\u003ccode\u003eT::T(Type\u0026amp;)\u003c/code\u003e 被调用；\u003c/li\u003e\n\u003cli\u003e当 \u003ccode\u003earg\u003c/code\u003e 是接受的参数是 \u003ccode\u003eType\u0026amp;\u0026amp;\u003c/code\u003e 时，\u003ccode\u003eArgT\u003c/code\u003e 是 \u003ccode\u003eType\u0026amp;\u0026amp;\u003c/code\u003e，\u003ccode\u003earg\u003c/code\u003e 的类型是 \u003ccode\u003eType\u0026amp;\u0026amp;\u003c/code\u003e，\u003ccode\u003eT::T(Type\u0026amp;\u0026amp;)\u003c/code\u003e 被调用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这样一来，就保留了 move 语义，实现了完美转发。\u003c/p\u003e\n\u003ch3 id=\"std-move\"\u003e\u003ca href=\"#std-move\" class=\"headerlink\" title=\"std::move\"\u003e\u003c/a\u003e\u003ccode\u003estd::move\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e标准库还定义了 \u003ccode\u003estd::move\u003c/code\u003e 函数，它的作用就是将传入的参数以右值引用的方式返回。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003estd::move\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etemplate\u003c/span\u003e\u0026lt;\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eT\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e std::remove_reference\u0026lt;T\u0026gt;::\u003cspan class=\"function\"\u003etype\u0026amp;\u0026amp;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"title\"\u003estd::move\u003c/span\u003e\u003cspan class=\"params\"\u003e(T\u0026amp;\u0026amp; a)\u003c/span\u003e \u003cspan class=\"keyword\"\u003enoexcept\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"keyword\"\u003etypename\u003c/span\u003e std::remove_reference\u0026lt;T\u0026gt;::type\u0026amp;\u0026amp; RvalRef;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003estatic_cast\u003c/span\u003e\u0026lt;RvalRef\u0026gt;(a);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e首先，出现了两次 \u003ccode\u003estd::remove_reference\u0026lt;T\u0026gt;::type\u0026amp;\u0026amp;\u003c/code\u003e，它确保不论 \u003ccode\u003eT\u003c/code\u003e 传入的是什么，都将返回一个真实类型的右值引用。\u003ccode\u003estatic_cast\u0026lt;RvalRef\u0026gt;(a)\u003c/code\u003e 则将 \u003ccode\u003ea\u003c/code\u003e 强制转换成右值引用并返回。有了 \u003ccode\u003estd::move\u003c/code\u003e，我们就可以调用 \u003ccode\u003estd::unique_ptr\u003c/code\u003e 的移动赋值运算符了（当然，单独这样调用可能没有什么意义）：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::unique_ptr\u0026lt;Type\u0026gt; new_ptr = std::\u003cspan class=\"built_in\"\u003emove\u003c/span\u003e(old_ptr);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// old_ptr 应当立即被销毁，或者赋予别的值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 不应对 old_ptr 当前的状态做任何假设\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，因为使用了 \u003ccode\u003estd::move\u003c/code\u003e 窃取了 \u003ccode\u003eold_ptr\u003c/code\u003e 中的资源，然后将他们移动到了 \u003ccode\u003enew_ptr\u003c/code\u003e 中去。这就隐含了一层意思：接下来我们不会在用 \u003ccode\u003eold_ptr\u003c/code\u003e 做任何事情，除非我们显式地对 \u003ccode\u003eold_ptr\u003c/code\u003e 赋予新值。事实上，我们不应对 \u003ccode\u003eold_ptr\u003c/code\u003e 当前的状态做任何假设，它就和已定义但未初始化的状态一样。因为，\u003ccode\u003eold_ptr\u003c/code\u003e 当前的状态，完全取决于 \u003ccode\u003estd::unique_ptr\u0026lt;Type\u0026gt;::operator=(unique_ptr\u0026lt;Type\u0026gt;\u0026amp;\u0026amp;)\u003c/code\u003e 的行为。\u003c/p\u003e\n\u003ch3 id=\"移动迭代器（move-iterator）\"\u003e\u003ca href=\"#移动迭代器（move-iterator）\" class=\"headerlink\" title=\"移动迭代器（move_iterator）\"\u003e\u003c/a\u003e移动迭代器（move_iterator）\u003c/h3\u003e\u003cp\u003e现在假设有这样一个容器 \u003ccode\u003estd::vector\u0026lt;std::unique_ptr\u0026lt;RegTree\u0026gt;\u0026gt;\u003c/code\u003e，即在向量中保存了若干指向 \u003ccode\u003eRegTree\u003c/code\u003e 的 \u003ccode\u003eunique_ptr\u003c/code\u003e 智能指针；又有一个函数 \u003ccode\u003eBoostNewTrees(std::vector\u0026lt;std::unique_ptr\u0026lt;RegTree\u0026gt;\u0026gt;\u0026amp; ret)\u003c/code\u003e，将会首先清洗 \u003ccode\u003eret\u003c/code\u003e 中的数据，然后再将新的数据放入 \u003ccode\u003eret\u003c/code\u003e 中。\u003c/p\u003e\n\u003cp\u003e现在，我需要循环多次执行 \u003ccode\u003eBoostNewTrees\u003c/code\u003e 函数，并将他们生成的数据依次放入一个容器里。那么，下面的代码会产生编译错误：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::vector\u0026lt;std::unique_ptr\u0026lt;RegTree\u0026gt;\u0026gt; ret;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e \u003cspan class=\"built_in\"\u003ei\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e); i != limit; ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::vector\u0026lt;std::unique_ptr\u0026lt;RegTree\u0026gt;\u0026gt; tmp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eBoostNewTrees\u003c/span\u003e(tmp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ret.\u003cspan class=\"built_in\"\u003einsert\u003c/span\u003e(ret.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e(), tmp.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(), tmp.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e());  \u003cspan class=\"comment\"\u003e// compile error!\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是因为，在调用 \u003ccode\u003eret.insert()\u003c/code\u003e 函数时，传入的迭代器 \u003ccode\u003etmp.begin()\u003c/code\u003e 在解引用时，会返回 \u003ccode\u003estd::unique_ptr\u0026lt;RegTree\u0026gt;\u0026amp;\u003c/code\u003e，进而尝试调用拷贝构造函数 \u003ccode\u003eunique_ptr\u0026lt;RegTree\u0026gt;(const unique_ptr\u0026lt;RegTree\u0026gt;\u0026amp;)\u003c/code\u003e，复制内容。然而，该函数被声明为「删除的」，不允许用户调用，于是报错。\u003c/p\u003e\n\u003cp\u003e为此，我们需要调用 \u003ccode\u003estd::make_move_iterator\u003c/code\u003e 函数（定义在 \u003ccode\u003eiterator\u003c/code\u003e 头文件里），将普通的迭代器转换为移动迭代器。相比普通迭代器，移动迭代器仅仅在解引用时的行为有不同：它将返回元素类型的右值引用（而不是普通迭代器返回的左值引用）。这相当于对普通迭代器每次解引用之后，都调用一次 \u003ccode\u003estd::move\u003c/code\u003e 获取右值引用。于是，在进行 \u003ccode\u003einsert\u003c/code\u003e 的时候，调用的就是移动构造函数 \u003ccode\u003eunique_ptr\u0026lt;RegTree\u0026gt;(unique_ptr\u0026lt;RegTree\u0026gt;\u0026amp;\u0026amp;)\u003c/code\u003e 了，而这是允许的。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::vector\u0026lt;std::unique_ptr\u0026lt;RegTree\u0026gt;\u0026gt; ret;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e \u003cspan class=\"built_in\"\u003ei\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e); i != limit; ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::vector\u0026lt;std::unique_ptr\u0026lt;RegTree\u0026gt;\u0026gt; tmp;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eBoostNewTrees\u003c/span\u003e(tmp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ret.\u003cspan class=\"built_in\"\u003einsert\u003c/span\u003e(ret.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::\u003cspan class=\"built_in\"\u003emake_move_iterator\u003c/span\u003e(tmp.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e()),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        std::\u003cspan class=\"built_in\"\u003emake_move_iterator\u003c/span\u003e(tmp.\u003cspan class=\"built_in\"\u003eend\u003c/span\u003e()));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// now we get `ret`.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"参考\"\u003e\u003ca href=\"#参考\" class=\"headerlink\" title=\"参考\"\u003e\u003c/a\u003e参考\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e《C++ Primer, 5th Edition》\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://thbecker.net/articles/rvalue_references/section_01.html\"\u003ehttp://thbecker.net/articles/rvalue_references/section_01.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://accu.org/index.php/journals/227\"\u003ehttps://accu.org/index.php/journals/227\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.ibm.com/support/knowledgecenter/SSGH3R_13.1.2/com.ibm.xlcpp131.aix.doc/language_ref/reference_collapsing.html\"\u003ehttp://www.ibm.com/support/knowledgecenter/SSGH3R_13.1.2/com.ibm.xlcpp131.aix.doc/language_ref/reference_collapsing.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-12-11T07:38:32Z",
  "Author": "Liam Huang"
}