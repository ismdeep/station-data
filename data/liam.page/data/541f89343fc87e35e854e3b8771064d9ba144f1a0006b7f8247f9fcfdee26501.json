{
  "Source": "liam.page",
  "Title": "组合算法（C++ 实现）",
  "Link": "https://liam.page/2016/01/31/binomial-in-cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e排列组合是高中数学中比较难的部分。用我高中数学老师的话说，叫做「会者不难，难者不会」，说是排列组合基本靠悟。\u003c/p\u003e\n\u003cp\u003e高中数学中，排列组合相关的题目，重点是求在某个场景下，排列/组合的可能数是多少，并不要求学生列出这些可能的排列/组合分别是什么。在实际工程应用中，有些场景却会有这样的需求。\u003c/p\u003e\n\u003cp\u003e在 Python 中，标准库 \u003ccode\u003eitertools\u003c/code\u003e 提供了排列、组合、笛卡尔积的方法。然而在 C++ 中，标准库只提供了 \u003ccode\u003enext_permutation\u003c/code\u003e 和 \u003ccode\u003eprev_permutation\u003c/code\u003e，通常来说不太够用。\u003c/p\u003e\n\u003cp\u003e这里，我们给出两种思路的算法。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"二进制辅助的方法\"\u003e\u003ca href=\"#二进制辅助的方法\" class=\"headerlink\" title=\"二进制辅助的方法\"\u003e\u003c/a\u003e二进制辅助的方法\u003c/h2\u003e\u003cp\u003e我们先来讨论一下非递归的方法。\u003c/p\u003e\n\u003cp\u003e对于组合来说，对每个元素是否选取，只有「选」和「不选」两种状态。因此，我们可以用一串二进制，来表示「选与不选」。例如：\u003ccode\u003e10110\u003c/code\u003e 表示五选三时，第一位、第三位和第四位被选择，剩下两位则不选。\u003c/p\u003e\n\u003cp\u003e接下来，我们要非重复、不遗漏地找到所有可能的组合方式，就有必要找到某种顺序。这种顺序应该满足：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e不重复\u003c/li\u003e\n\u003cli\u003e不遗漏\u003c/li\u003e\n\u003cli\u003e有某种可以观察的良好性质\u003c/li\u003e\n\u003cli\u003e在计算机上容易实现\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e不难想到，如果我们以二进制来表示一种组合状态，那么它就对应着一个十进制数。比如五选三时，就是要求解五位二进制数中，有三个数位是 \u003ccode\u003e1\u003c/code\u003e 的全部可能性。要不重复不遗漏地找出这些可能性，我们可以很简单地定义这样的顺序：找到满足五位二进制数中有三个数位是 \u003ccode\u003e1\u003c/code\u003e 的数字的升序排列。\u003c/p\u003e\n\u003cp\u003e我们首先来看看一个已经排序好的序列：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e11100 -\u0026gt; 7   (左边表示低位，即实际的二进制数应是 00111。下同)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11010 -\u0026gt; 11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10110 -\u0026gt; 13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e01110 -\u0026gt; 14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11001 -\u0026gt; 19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10101 -\u0026gt; 21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e01101 -\u0026gt; 22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10011 -\u0026gt; 25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e01011 -\u0026gt; 26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e00111 -\u0026gt; 28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不难发现，这实际上是一个「逐位移动」的问题。想要得到升序中相邻的数，显而易见，应该将低位的 \u003ccode\u003e1\u003c/code\u003e 与相邻的高位的 \u003ccode\u003e0\u003c/code\u003e 交换位置。也就是说，提高了这个 \u003ccode\u003e1\u003c/code\u003e 的权重。同时，应该将比发生换位的 \u003ccode\u003e1\u003c/code\u003e 低位的所有的 \u003ccode\u003e1\u003c/code\u003e 挪到最低位。\u003c/p\u003e\n\u003cp\u003e放进我们的示例当中，就有伪代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eGiven:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    int: choose, from\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOutout:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    vector\u0026lt;string\u0026gt;: result\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e---\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eworking \u0026lt;- \u0026#34;1\u0026#34; * choose + \u0026#34;0\u0026#34; * (from - choose)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresult.append(working)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewhile (found(10))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    swap (found(10))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    sort (working, working + found(10), reverse = true)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    result.append(working)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样，我们可以写出相应的 C++ 代码：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003ebinomial.cc\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"keyword\"\u003enamespace\u003c/span\u003e std;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003evector\u0026lt;string\u0026gt;\u0026amp; \u003cspan class=\"title\"\u003ecombination\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e  \u003cspan class=\"params\"\u003e(vector\u0026lt;string\u0026gt;\u0026amp; res, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; choose, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; from)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003ebool\u003c/span\u003e \u003cspan class=\"title\"\u003ecompare\u003c/span\u003e \u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e\u0026amp; lhs, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e\u0026amp; rhs)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e \u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  vector\u0026lt;string\u0026gt; res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e choose = \u003cspan class=\"number\"\u003e3\u003c/span\u003e, from = \u003cspan class=\"number\"\u003e5\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003ecombination\u003c/span\u003e (res, choose, from);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i != res.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e(); ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cout \u0026lt;\u0026lt; res[i] \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\t\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e j = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; j != from; ++j) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (res[i][j] == \u003cspan class=\"string\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cout \u0026lt;\u0026lt; j + \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cout \u0026lt;\u0026lt; endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003evector\u0026lt;string\u0026gt;\u0026amp; \u003cspan class=\"title\"\u003ecombination\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e  \u003cspan class=\"params\"\u003e(vector\u0026lt;string\u0026gt;\u0026amp; res, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; choose, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; from)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  string wk = \u003cspan class=\"built_in\"\u003estring\u003c/span\u003e (choose, \u003cspan class=\"string\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e) + \u003cspan class=\"built_in\"\u003estring\u003c/span\u003e (from - choose, \u003cspan class=\"string\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  res.\u003cspan class=\"built_in\"\u003epush_back\u003c/span\u003e (wk);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e found = string::npos;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e ((found = wk.\u003cspan class=\"built_in\"\u003efind\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;10\u0026#34;\u003c/span\u003e)) != string::npos) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 1. swap found\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    wk[found] ^= wk[found + \u003cspan class=\"number\"\u003e1\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    wk[found + \u003cspan class=\"number\"\u003e1\u003c/span\u003e] ^= wk[found];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    wk[found] ^= wk[found + \u003cspan class=\"number\"\u003e1\u003c/span\u003e];\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// 2. sort before\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003esort\u003c/span\u003e (wk.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e(), wk.\u003cspan class=\"built_in\"\u003ebegin\u003c/span\u003e() + found, compare);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res.\u003cspan class=\"built_in\"\u003epush_back\u003c/span\u003e (wk);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003ebool\u003c/span\u003e \u003cspan class=\"title\"\u003ecompare\u003c/span\u003e \u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e\u0026amp; lhs, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e\u0026amp; rhs)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e lhs \u0026gt; rhs;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里我用 \u003ccode\u003estd::string\u003c/code\u003e 实现了算法。实际上，可以用更快的 \u003ccode\u003ecstring\u003c/code\u003e 来实现（因为它实际是数组）。\u003c/p\u003e\n\u003ch2 id=\"平凡的递归解法\"\u003e\u003ca href=\"#平凡的递归解法\" class=\"headerlink\" title=\"平凡的递归解法\"\u003e\u003c/a\u003e平凡的递归解法\u003c/h2\u003e\u003cp\u003e现在我们来看看求解组合的递归算法。\u003c/p\u003e\n\u003cp\u003e首先，我们回忆一下高中数学中提到的组合数递推关系：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\\begin{equation} \\label{eq:binomial-re} \\mathrm{C}_n^m = \\mathrm{C}_{n - 1}^{m - 1} + \\mathrm{C}_{n - 1}^{m}. \\end{equation}\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在高中讲到组合数时，老师一定根据组合数的定义，手工推导了这一递推关系。但是，当时老师并不一定讲了这个递推关系的内在含义。\u003c/p\u003e\n\u003cp\u003e实际上，这个递推关系有着明确的意义。我们考虑从 $n$ 个物件中取出 $m$ 个物件的情况（$m \u0026lt; n$）。对第一个物件来说，我们要不然选它，然后在剩下的 $n - 1$ 个物件中取出 $m - 1$ 个物件；要不然不选它，然后干脆地在剩下的 $n - 1$ 个物件中取出 $m$ 个物件。\u003c/p\u003e\n\u003cp\u003e将这两种情况合起来，就得到公式 \\ref{eq:binomial-re} 了。\u003c/p\u003e\n\u003cp\u003e上述分析给出了明确的递归思路，那么不难得到下面的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003ebinomial.cc\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eusing\u003c/span\u003e \u003cspan class=\"keyword\"\u003enamespace\u003c/span\u003e std;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003evector\u0026lt;string\u0026gt;\u0026amp; \u003cspan class=\"title\"\u003ecombination\u003c/span\u003e \u003cspan class=\"params\"\u003e(vector\u0026lt;string\u0026gt;\u0026amp; res, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; choose, string\u0026amp; working, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; pos)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e \u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  vector\u0026lt;string\u0026gt; res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e choose = \u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003estring \u003cspan class=\"title\"\u003eworking\u003c/span\u003e \u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003ecombination\u003c/span\u003e (res, choose, working, \u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i != res.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e(); ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cout \u0026lt;\u0026lt; res[i] \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\t\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e j = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; j != working.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e(); ++j) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (res[i][j] == \u003cspan class=\"string\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cout \u0026lt;\u0026lt; j + \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cout \u0026lt;\u0026lt; endl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003evector\u0026lt;string\u0026gt;\u0026amp; \u003cspan class=\"title\"\u003ecombination\u003c/span\u003e \u003cspan class=\"params\"\u003e(vector\u0026lt;string\u0026gt;\u0026amp; res, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; choose, string\u0026amp; working, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e\u0026amp; pos)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (choose \u0026gt; working.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e() - pos) \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003esize_t\u003c/span\u003e i = pos; i != working.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e(); ++i) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    working[i] = \u003cspan class=\"string\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (choose == \u003cspan class=\"number\"\u003e0\u003c/span\u003e || pos == working.\u003cspan class=\"built_in\"\u003esize\u003c/span\u003e()) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    res.\u003cspan class=\"built_in\"\u003epush_back\u003c/span\u003e (working);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  working[pos] = \u003cspan class=\"string\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003ecombination\u003c/span\u003e (res, choose - \u003cspan class=\"number\"\u003e1\u003c/span\u003e, working, pos + \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  working[pos] = \u003cspan class=\"string\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003ecombination\u003c/span\u003e (res, choose, working, pos + \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e res;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-01-31T04:30:53Z",
  "Author": "Liam Huang"
}