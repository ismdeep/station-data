{
  "Source": "liam.page",
  "Title": "探幽：C++ 的读入速度",
  "Link": "https://liam.page/2016/11/19/the-speed-of-reading-files-in-Cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e这篇文章的缘起有二：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e很多人主张「应当在几乎所有情况下使用 C 风格的 I/O」（\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.quora.com/What-is-use-of-the-statement-ios_base-sync_with_stdio-false-cin-tie-NULL-cout-tie-NULL-What-does-it-do/answer/Utkarsh-Bhatt?srid=WsLB\"\u003e比如这里\u003c/a\u003e），而我很怀疑；\u003c/li\u003e\n\u003cli\u003e另一方面，在刷 POJ 的时候，使用 \u003ccode\u003estd::cin\u003c/code\u003e 确实能 TLE 而改成 \u003ccode\u003estd::scanf\u003c/code\u003e 就 AC 了，因此想试试看 \u003ccode\u003estd::cin\u003c/code\u003e 能否加速。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e中文网络里，已有\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html\"\u003e码农场\u003c/a\u003e和 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.byvoid.com/blog/fast-readfile/\"\u003ebyvoid 菊苣\u003c/a\u003e的讨论。不过二者对于原理的解释，自我感觉都不够清晰；又本着自己动手做实验的坚持，决定写下这篇文章，探讨 C++ 的读入速度的问题，特别是读入文件速度的问题。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"从稍微底层介绍起\"\u003e\u003ca href=\"#从稍微底层介绍起\" class=\"headerlink\" title=\"从稍微底层介绍起\"\u003e\u003c/a\u003e从稍微底层介绍起\u003c/h2\u003e\u003cp\u003e\u003ccode\u003estd::cin\u003c/code\u003e 为什么慢？要解释这个问题，就得从稍微底层的角度说起。\u003c/p\u003e\n\u003cp\u003e以 Linux 为例。Linux 内核负责管理计算机硬件，对接硬件规格，向上提供系统调用（System Call）。内核之上的运行时库（Runtime Library）负责对接系统调用，向上提供操作系统应用编程接口（Operation System Application Programming Interface, OS API）。\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/computer-architecture/05.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e对于我们使用 C/C++ 编程来说，所作的几乎全部事情，都基于运行时库提供的 OS API（\u003ccode\u003eglibc\u003c/code\u003e 提供的 POSIX API）；少数操作，可以通过 OS API 中提供的类函数直接操作系统调用（如 \u003ccode\u003efork()\u003c/code\u003e 函数）。\u003c/p\u003e\n\u003cp\u003e因此，不难理解，不论是 \u003ccode\u003estd::cin\u003c/code\u003e 还是 \u003ccode\u003estd::scanf\u003c/code\u003e 都是对 OS API 的封装，而 OS API 又是对系统调用的封装。至于再往下，系统调用就直接通过内核操作硬件了。因此，可以粗略地估计，直接使用系统调用做 I/O 会比用 OS API 要快；而用 OS API 又会比封装 OS API 的语言库函数要慢。\u003c/p\u003e\n\u003cp\u003e我们这里讨论 \u003ccode\u003estd::cin\u003c/code\u003e 和 \u003ccode\u003estd::scanf\u003c/code\u003e，因此主要关系 I/O 中的 Input 部分。在 Linux 系统调用中，和文件读取相关的系统调用有两个类函数。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evoid *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);\u003c/code\u003e: 封装名为 \u003ccode\u003emmap2\u003c/code\u003e 的系统调用（\u003ccode\u003emmap\u003c/code\u003e 自 Linux 2.4 起弃用）；\u003ccode\u003emmap\u003c/code\u003e 将磁盘上的文件一一映射到实存空间，当进程调用相关内存的时候，通过缺页错误真正将文件内容拷贝到实存。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003essize_t read(int fd, void *buf, size_t count);\u003c/code\u003e: 封装名为 \u003ccode\u003eread\u003c/code\u003e 的系统调用。这里 \u003ccode\u003essize_t\u003c/code\u003e 是 \u003ccode\u003e__kernel_ssize_t\u003c/code\u003e 的 \u003ccode\u003etypedef\u003c/code\u003e；而 \u003ccode\u003e__kernel_ssize_t\u003c/code\u003e 在 32 位系统上是 \u003ccode\u003eint\u003c/code\u003e 的 \u003ccode\u003etypedef\u003c/code\u003e，在 64 位系统上是 \u003ccode\u003elong ing\u003c/code\u003e 的 \u003ccode\u003etypedef\u003c/code\u003e。\u003ccode\u003eread\u003c/code\u003e 会从文件描述符（file description）\u003ccode\u003efd\u003c/code\u003e 中读入 \u003ccode\u003ecount\u003c/code\u003e 个字节，存入 \u003ccode\u003ebuf\u003c/code\u003e 缓存中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e由于 \u003ccode\u003emmap\u003c/code\u003e 做的事情比 \u003ccode\u003eread\u003c/code\u003e 少（事实上它几乎只分配了内存空间并做了一个映射），所以 \u003ccode\u003emmap\u003c/code\u003e 函数本身会比 \u003ccode\u003eread\u003c/code\u003e 函数快一些。\u003c/p\u003e\n\u003cp\u003e在标准库中，和输入相关函数的有以下一些。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esize_t fread ( void * ptr, size_t size, size_t count, FILE * stream );\u003c/code\u003e: 从文件流中读取一块内容，存入 \u003ccode\u003eptr\u003c/code\u003e 指向的内存。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint scanf ( const char * format, ... );\u003c/code\u003e: 从标准输入中读入内容，并以格式化字符串将读入的内容存入相应的指针。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estd::istream\u003c/code\u003e: C++ 风格的输入流（包括 \u003ccode\u003estd::cin\u003c/code\u003e 等）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"std-cin-做了哪些额外的工作\"\u003e\u003ca href=\"#std-cin-做了哪些额外的工作\" class=\"headerlink\" title=\"std::cin 做了哪些额外的工作\"\u003e\u003c/a\u003e\u003ccode\u003estd::cin\u003c/code\u003e 做了哪些额外的工作\u003c/h2\u003e\u003cp\u003e通常为人诟病的是 \u003ccode\u003estd::cin\u003c/code\u003e 的速度。\u003ccode\u003estd::cin\u003c/code\u003e 是标准库里的东西。我们知道，标准库是要为千万人所用的东西，所以它对性能要求非常严格。按理说，标准库里的东西，只要正确使用，就不应该慢。那么现在，既然它慢，就有个原因。这个原因，又肯定是它做了额外的工作（相比 \u003ccode\u003estd::scanf\u003c/code\u003e）。那么 \u003ccode\u003estd::cin\u003c/code\u003e 做了哪些额外的工作呢？\u003c/p\u003e\n\u003cp\u003e事实上，为了「安全」，\u003ccode\u003estd::cin\u003c/code\u003e 主要做了两件额外的事情：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e与 \u003ccode\u003estd::cout\u003c/code\u003e 绑定，每次 \u003ccode\u003estd::cin\u003c/code\u003e 从缓冲区读入内容之前，确保已经执行过 \u003ccode\u003estd::cout.flush()\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e与 \u003ccode\u003estdio\u003c/code\u003e 同步（synchronize），确保混搭使用 C 风格的 I/O 操作不会引发问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果我们能手工确保不会出问题，那么就可以省略 \u003ccode\u003estd::cin\u003c/code\u003e 做的这些额外的工作。\u003c/p\u003e\n\u003ch3 id=\"std-ios-tie\"\u003e\u003ca href=\"#std-ios-tie\" class=\"headerlink\" title=\"std::ios::tie\"\u003e\u003c/a\u003e\u003ccode\u003estd::ios::tie\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e首先我们解决「绑定」的问题。\u003c/p\u003e\n\u003cp\u003e绑定是通过 \u003ccode\u003estd::ios::tie\u003c/code\u003e 这个函数实现的。它作为 \u003ccode\u003eios\u003c/code\u003e 类的成员函数，有两个重载。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eostream* tie() const\u003c/code\u003e: 返回当前绑定的输出流实例的指针。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eostream* tie (ostream* tiestr)\u003c/code\u003e: 返回当前绑定的输出流实例的指针，再将 \u003ccode\u003etiestr\u003c/code\u003e 绑定到当前实例。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ecplusplus 网站上提供了这样的示例：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003edemo_tie.cpp\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// redefine tied object\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e     \u003cspan class=\"comment\"\u003e// std::ostream, std::cout, std::cin\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;fstream\u0026gt;\u003c/span\u003e      \u003cspan class=\"comment\"\u003e// std::ofstream\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e \u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  std::ostream *prevstr;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  std::ofstream ofs;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ofs.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e (\u003cspan class=\"string\"\u003e\u0026#34;test.txt\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;tie example:\\n\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  *std::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e() \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;This is inserted into cout\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  prevstr = std::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e (\u0026amp;ofs);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  *std::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e() \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;This is inserted into the file\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  std::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e (prevstr);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ofs.\u003cspan class=\"built_in\"\u003eclose\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e默认情况下，\u003ccode\u003estd::cin\u003c/code\u003e 与 \u003ccode\u003estd::cout\u003c/code\u003e 绑定。因此第一次调用 \u003ccode\u003estd::cin.tie()\u003c/code\u003e 返回的是 \u003ccode\u003estd::cout\u003c/code\u003e 的指针。因此第一次输出将会打印到标准输出上。\u003c/p\u003e\n\u003cp\u003e之后，我们用 \u003ccode\u003estd::cin.tie (\u0026amp;ofs)\u003c/code\u003e 将一个文件输出流绑定在 \u003ccode\u003estd::cin\u003c/code\u003e 上，并将 \u003ccode\u003estd::cout\u003c/code\u003e 的指针存在 \u003ccode\u003eprevstr\u003c/code\u003e 中。这时候，第二次调用 \u003ccode\u003estd::cin.tie()\u003c/code\u003e 返回的是 \u003ccode\u003eofs\u003c/code\u003e 的指针。因此第二次输出将会打印到 \u003ccode\u003eofs\u003c/code\u003e 绑定的文件中（\u003ccode\u003etest.txt\u003c/code\u003e）。\u003c/p\u003e\n\u003cp\u003e因此，代码正确执行后，将会在控制台打印：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003etie example:\u003cbr/\u003eThis is inserted into cout\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在文件 \u003ccode\u003etest.txt\u003c/code\u003e 中写入：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is inserted into the file\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e为了解除 \u003ccode\u003estd::cin\u003c/code\u003e 与 \u003ccode\u003estd::cout\u003c/code\u003e 的绑定，我们可以这样做\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003cfigcaption\u003e\u003cspan\u003euntie\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::ostream *prevstr = std::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::cin.\u003cspan class=\"built_in\"\u003etie\u003c/span\u003e(\u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ... use cin without tying to cout\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"std-ios-base-sync-with-stdio\"\u003e\u003ca href=\"#std-ios-base-sync-with-stdio\" class=\"headerlink\" title=\"std::ios_base::sync_with_stdio\"\u003e\u003c/a\u003e\u003ccode\u003estd::ios_base::sync_with_stdio\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e接下来我们解决同步的问题。\u003c/p\u003e\n\u003cp\u003e在所有输入输出流的基类（\u003ccode\u003estd::ios_base\u003c/code\u003e）中定义了 \u003ccode\u003esync_with_stdio\u003c/code\u003e 函数。它的原型是：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003ebool\u003c/span\u003e \u003cspan class=\"title\"\u003esync_with_stdio\u003c/span\u003e\u003cspan class=\"params\"\u003e( \u003cspan class=\"type\"\u003ebool\u003c/span\u003e sync = \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e )\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e默认情况下，这个同步机制是打开的。于是，在 C++ 的流上做的任何操作，会被立即同步到相应的 C 的流中。因此，在代码里我们可以混搭 C 风格和 C++ 风格的流操作。\u003c/p\u003e\n\u003cp\u003e我们可以通过这样做，以解除 C++ 风格的输入输出流与 C 风格的输入输出流的绑定：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003estd::ios_base::\u003cspan class=\"built_in\"\u003esync_with_stdio\u003c/span\u003e(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"实验\"\u003e\u003ca href=\"#实验\" class=\"headerlink\" title=\"实验\"\u003e\u003c/a\u003e实验\u003c/h2\u003e\u003ch3 id=\"随机数生成\"\u003e\u003ca href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"\u003e\u003c/a\u003e随机数生成\u003c/h3\u003e\u003cp\u003e作为实验的预备，我们需要生成一组随机数，作为读入。这里计划生成的文件，样式为：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ea_1 b_1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea_2 b_2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea_k b_k\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea_n b_n\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中，$a_1, \\ldots, a_n$ 是随机整数，$b_1, \\ldots, b_n$ 是随机浮点数。我们用 Python 来实现随机数的生成和输出。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003egen_random.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e random\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egetRandom\u003c/span\u003e(\u003cspan class=\"params\"\u003efname_base, lines_num\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  fname = \u003cspan class=\"string\"\u003e\u0026#39;%s_%d.txt\u0026#39;\u003c/span\u003e % (fname_base, lines_num)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e \u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(fname, \u003cspan class=\"string\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fout:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    temp = \u003cspan class=\"string\"\u003e\u0026#39;%d %f\\n\u0026#39;\u003c/span\u003e % (random.randint(-\u003cspan class=\"number\"\u003e1000\u003c/span\u003e, \u003cspan class=\"number\"\u003e1000\u003c/span\u003e), random.gauss(\u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fout.write(temp)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  exp  = [\u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e, \u003cspan class=\"number\"\u003e7\u003c/span\u003e, \u003cspan class=\"number\"\u003e8\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  NUMS = \u003cspan class=\"built_in\"\u003emap\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e x: \u003cspan class=\"number\"\u003e10\u003c/span\u003e ** x, exp)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  base = \u003cspan class=\"string\"\u003e\u0026#39;random\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e num \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e NUMS:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    getRandom(base, num)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"实验环境\"\u003e\u003ca href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"\u003e\u003c/a\u003e实验环境\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e编译器：gcc-4.7.2\u003c/li\u003e\n\u003cli\u003e操作系统：CentOS 5.4\u003c/li\u003e\n\u003cli\u003eCPU 型号：Intel(R) Xeon(R) CPU \u003ca href=\"mailto:E5645@2.4\"\u003eE5645@2.4\u003c/a\u003e GHz\u003c/li\u003e\n\u003cli\u003e主存大小：65979428 KiB\u003c/li\u003e\n\u003cli\u003e磁盘大小：388 GiB\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"实验代码\"\u003e\u003ca href=\"#实验代码\" class=\"headerlink\" title=\"实验代码\"\u003e\u003c/a\u003e实验代码\u003c/h3\u003e\u003cfigure class=\"highlight c\"\u003e\u003cfigcaption\u003e\u003cspan\u003escanf.cpp\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;chrono\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ea\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title function_\"\u003eb\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e0.0\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e start = \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::high_resolution_clock::now();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (~\u003cspan class=\"built_in\"\u003escanf\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;%d %f\u0026#34;\u003c/span\u003e, \u0026amp;a, \u0026amp;b)) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e end = \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::high_resolution_clock::now();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e take_time =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::duration_cast\u0026lt;\u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::microseconds\u0026gt;(end - start);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::\u003cspan class=\"built_in\"\u003ecout\u003c/span\u003e \u0026lt;\u0026lt; take_time.count() \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34; us\\n\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight c\"\u003e\u003cfigcaption\u003e\u003cspan\u003ecin.cpp\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;chrono\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ea\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title function_\"\u003eb\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e0.0\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e start = \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::high_resolution_clock::now();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::\u003cspan class=\"built_in\"\u003ecin\u003c/span\u003e \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e end = \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::high_resolution_clock::now();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e take_time =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::duration_cast\u0026lt;\u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::microseconds\u0026gt;(end - start);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::\u003cspan class=\"built_in\"\u003ecout\u003c/span\u003e \u0026lt;\u0026lt; take_time.count() \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34; us\\n\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight c\"\u003e\u003cfigcaption\u003e\u003cspan\u003ecin-speed_up.cpp\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cstdio\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;chrono\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003ea\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003edouble\u003c/span\u003e \u003cspan class=\"title function_\"\u003eb\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"number\"\u003e0.0\u003c/span\u003e)\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::\u003cspan class=\"built_in\"\u003ecin\u003c/span\u003e.tie(\u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::ios_base::sync_with_stdio(\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e start = \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::high_resolution_clock::now();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::\u003cspan class=\"built_in\"\u003ecin\u003c/span\u003e \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b) {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e end = \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::high_resolution_clock::now();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e take_time =\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::duration_cast\u0026lt;\u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::chrono::microseconds\u0026gt;(end - start);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003estd\u003c/span\u003e::\u003cspan class=\"built_in\"\u003ecout\u003c/span\u003e \u0026lt;\u0026lt; take_time.count() \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34; us\\n\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"实验结果\"\u003e\u003ca href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"\u003e\u003c/a\u003e实验结果\u003c/h3\u003e\u003cp\u003e这里用管道的方式，将输入数据传给编译好的可执行映像。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003ecat\u003c/span\u003e foobar.txt | ./a.out\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里将每一份数据重复输入可执行映像 5 次，然后去除最低和最高的执行时间，取中间三个做平均值，得到结果如下（单位：微秒）。\u003c/p\u003e\n\u003ciframe id=\"tmp_downloadhelper_iframe\" style=\"display: none;\"\u003e\u003c/iframe\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e数据大小\u003c/td\u003e\u003cth\u003ecin\u003c/th\u003e\u003cth\u003ecin -O2\u003c/th\u003e\u003cth\u003ecin 加速\u003c/th\u003e\u003cth\u003ecin 加速 -O2\u003c/th\u003e\u003cth\u003escanf\u003c/th\u003e\u003cth\u003escanf -O2\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-6\"\u003e 10^3\u003c/script\u003e\u003c/th\u003e\u003ctd\u003e1962\u003c/td\u003e\u003ctd\u003e2179\u003c/td\u003e\u003ctd\u003e1131\u003c/td\u003e\u003ctd\u003e1020\u003c/td\u003e\u003ctd\u003e754\u003c/td\u003e\u003ctd\u003e773\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-7\"\u003e 10^4\u003c/script\u003e\u003c/th\u003e\u003ctd\u003e20099\u003c/td\u003e\u003ctd\u003e20448\u003c/td\u003e\u003ctd\u003e10496\u003c/td\u003e\u003ctd\u003e9817\u003c/td\u003e\u003ctd\u003e7187\u003c/td\u003e\u003ctd\u003e7205\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-8\"\u003e 10^5\u003c/script\u003e\u003c/th\u003e\u003ctd\u003e139541\u003c/td\u003e\u003ctd\u003e146781\u003c/td\u003e\u003ctd\u003e75328\u003c/td\u003e\u003ctd\u003e70302\u003c/td\u003e\u003ctd\u003e52498\u003c/td\u003e\u003ctd\u003e55002\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-9\"\u003e 10^6\u003c/script\u003e\u003c/th\u003e\u003ctd\u003e1401558\u003c/td\u003e\u003ctd\u003e1382098\u003c/td\u003e\u003ctd\u003e681064\u003c/td\u003e\u003ctd\u003e651954\u003c/td\u003e\u003ctd\u003e476777\u003c/td\u003e\u003ctd\u003e481314\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003cth\u003e\u003cscript type=\"math/tex\" id=\"MathJax-Element-10\"\u003e 10^7\u003c/script\u003e\u003c/th\u003e\u003ctd\u003e13318033\u003c/td\u003e\u003ctd\u003e13956841\u003c/td\u003e\u003ctd\u003e6687289\u003c/td\u003e\u003ctd\u003e6468692\u003c/td\u003e\u003ctd\u003e4779453\u003c/td\u003e\u003ctd\u003e4760468\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003e从表中可以看出，\u003ccode\u003estd::scanf\u003c/code\u003e 在实验条件下速度始终最快，但与「加速之后的」\u003ccode\u003estd::cin\u003c/code\u003e 处于同一个数量级。而它们都比默认的 \u003ccode\u003estd::cin\u003c/code\u003e 要快出一个数量级。这个结论随着数据量的增长保持不变。\u003c/p\u003e\n\u003cp\u003e另外，使用编译器的 \u003ccode\u003e-O2\u003c/code\u003e 参数，打开编译器优化之后，\u003ccode\u003estd::cin\u003c/code\u003e 对优化不敏感，甚至在一些数据集上优化之后的速度反而变慢；加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 和 \u003ccode\u003estd::scanf\u003c/code\u003e 则对优化敏感，其中加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 对优化尤其敏感。\u003c/p\u003e\n\u003cp\u003e在这个实验中，\u003ccode\u003estd::scanf\u003c/code\u003e 的确在速度上有优势，似乎验证了「很多人」的主张。不过，\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tatanaideyo.hatenablog.com/entry/2014/10/24/214714\"\u003etatanaideyo\u003c/a\u003e 做了类似的实验，结果表明：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estd::scanf\u003c/code\u003e 和加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 一定比 \u003ccode\u003estd::cin\u003c/code\u003e 快；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estd::scanf\u003c/code\u003e 在读入浮点数时比加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 快；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estd::scanf\u003c/code\u003e 在读入整形数值时比加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 慢。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"总结\"\u003e\u003ca href=\"#总结\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 并不一定比 \u003ccode\u003estd::scanf\u003c/code\u003e 慢；在大多数日常使用的情形下，其效率在渐进意义上与 \u003ccode\u003estd::scanf\u003c/code\u003e 相当。tatanaideyo 则表明，如果数据中包含大量的整形数值，则使用加速之后的 \u003ccode\u003estd::cin\u003c/code\u003e 会更有优势；反之若数据中包含大量的浮点数，则使用 \u003ccode\u003estd::scanf\u003c/code\u003e 更佳。\u003c/p\u003e\n\u003cp\u003e更多探讨可以参考：\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://codeforces.com/blog/entry/5217\"\u003ehttp://codeforces.com/blog/entry/5217\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e\u003ca href=\"#参考\" class=\"headerlink\" title=\"参考\"\u003e\u003c/a\u003e参考\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e《程序员的自我修养：链接、装载和库》\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.tutorialspoint.com/unix_system_calls/read.htm\"\u003ehttp://www.tutorialspoint.com/unix_system_calls/read.htm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://man7.org/linux/man-pages/man2/read.2.html\"\u003ehttp://man7.org/linux/man-pages/man2/read.2.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://man7.org/linux/man-pages/man2/mmap.2.html\"\u003ehttp://man7.org/linux/man-pages/man2/mmap.2.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cplusplus.com/reference/cstdio/fread/\"\u003ehttp://www.cplusplus.com/reference/cstdio/fread/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cplusplus.com/reference/cstdio/scanf/\"\u003ehttp://www.cplusplus.com/reference/cstdio/scanf/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cplusplus.com/reference/ios/ios/tie/\"\u003ehttp://www.cplusplus.com/reference/ios/ios/tie/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio\"\u003ehttp://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.byvoid.com/blog/fast-readfile/\"\u003ehttps://www.byvoid.com/blog/fast-readfile/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html\"\u003ehttp://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://heavywatal.github.io/cxx/speed.html\"\u003ehttps://heavywatal.github.io/cxx/speed.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tatanaideyo.hatenablog.com/entry/2014/10/24/214714\"\u003ehttp://tatanaideyo.hatenablog.com/entry/2014/10/24/214714\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://codeforces.com/blog/entry/5217\"\u003ehttp://codeforces.com/blog/entry/5217\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://stackoverflow.com/questions/14052627/why-do-we-need-to-tie-cin-and-cout\"\u003ehttp://stackoverflow.com/questions/14052627/why-do-we-need-to-tie-cin-and-cout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.quora.com/What-is-use-of-the-statement-ios_base-sync_with_stdio-false-cin-tie-NULL-cout-tie-NULL-What-does-it-do\"\u003ehttps://www.quora.com/What-is-use-of-the-statement-ios_base-sync_with_stdio-false-cin-tie-NULL-cout-tie-NULL-What-does-it-do\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.cnblogs.com/huxiao-tee/p/4660352.html\"\u003ehttp://www.cnblogs.com/huxiao-tee/p/4660352.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://en.cppreference.com/w/cpp/chrono/duration\"\u003ehttp://en.cppreference.com/w/cpp/chrono/duration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-11-19T15:09:53Z",
  "Author": "Liam Huang"
}