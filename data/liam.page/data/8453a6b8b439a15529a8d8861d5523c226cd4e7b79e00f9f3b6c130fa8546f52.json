{
  "Source": "liam.page",
  "Title": "谈谈 C/C++ 中的 offsetof",
  "Link": "https://liam.page/2018/01/10/a-customized-offsetof-in-Cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e此篇讲一讲 C/C++ 中的 \u003ccode\u003eoffsetof\u003c/code\u003e。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"介绍\"\u003e\u003ca href=\"#介绍\" class=\"headerlink\" title=\"介绍\"\u003e\u003c/a\u003e介绍\u003c/h2\u003e\u003cp\u003e\u003ccode\u003eoffsetof\u003c/code\u003e 是源自 C 语言的宏，它接受两个参数（类型名和成员名），返回一个 \u003ccode\u003estd::size_t\u003c/code\u003e 类型的常量表达式。\u003ccode\u003eoffsetof\u003c/code\u003e 的返回值是成员在该类型对象中以字节计算的的偏移量。其中，传入计算的类型名，必须满足标准内存布局的要求；即\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e所有非 \u003ccode\u003estatic\u003c/code\u003e 数据成员的访问控制权限相同；\u003c/li\u003e\n\u003cli\u003e没有虚函数；\u003c/li\u003e\n\u003cli\u003e不从虚基类继承；\u003c/li\u003e\n\u003cli\u003e所有非 \u003ccode\u003estatic\u003c/code\u003e 数据成员都不是引用类型；\u003c/li\u003e\n\u003cli\u003e所有非 \u003ccode\u003estatic\u003c/code\u003e 数据成员类型和基类都满足上述要求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e若传入计算的类型名不满足内存布局的要求，或者求解的成员是 \u003ccode\u003estatic\u003c/code\u003e 成员或成员函数，则调用该宏是未定义行为（Undefined Behaviour）。\u003c/p\u003e\n\u003ch2 id=\"实现\"\u003e\u003ca href=\"#实现\" class=\"headerlink\" title=\"实现\"\u003e\u003c/a\u003e实现\u003c/h2\u003e\u003cp\u003e按照定义，有\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eoffsetof(s, m)\u003c/code\u003e 的值只与类型和成员有关，也就是说，在计算 \u003ccode\u003eoffsetof(s, m)\u003c/code\u003e 的时候，不应传入 \u003ccode\u003es\u003c/code\u003e 类型具体某个对象，也不应为计算该值而临时构造一个对象；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eoffsetof(s, m)\u003c/code\u003e 的值，其单位是字节；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eoffsetof(s, m)\u003c/code\u003e 的值应是 \u003ccode\u003estd::size_t\u003c/code\u003e 类型。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ccode\u003eoffsetof\u003c/code\u003e 的这三个特性，也是实现 \u003ccode\u003eoffsetof\u003c/code\u003e 宏的三个难点。为了解决这些问题，首先，实现应当让编译器相信在某处存在一个「虚拟的」但是「可用的」对象。而后，根据该虚拟对象，可以取得目标成员 \u003ccode\u003em\u003c/code\u003e 的地址。随后，利用 \u003ccode\u003em\u003c/code\u003e 的地址与该虚拟对象的起始地址做差，即可得知 \u003ccode\u003em\u003c/code\u003e 的偏移量；为了求得以字节为单位的 \u003ccode\u003eptrdiff_t\u003c/code\u003e，需将 \u003ccode\u003em\u003c/code\u003e 的地址转变为 \u003ccode\u003echar\u003c/code\u003e 类型的指针。最后，只需将 \u003ccode\u003eptrdiff_t\u003c/code\u003e 转换为 \u003ccode\u003estd::size_t\u003c/code\u003e 即可。\u003c/p\u003e\n\u003cp\u003e因此，有如下 C++ 实现：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003edefine\u003c/span\u003e offsetof(s, m) (reinterpret_cast\u003cspan class=\"string\"\u003e\u0026lt;size_t\u0026gt;\u003c/span\u003e(\u0026amp;reinterpret_cast\u003cspan class=\"string\"\u003e\u0026lt;const volatile char\u0026amp;\u0026gt;\u003c/span\u003e(static_cast\u003cspan class=\"string\"\u003e\u0026lt;s*\u0026gt;\u003c/span\u003e(nullptr)-\u0026gt;m)))\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处，通过 \u003ccode\u003estatic_cast\u0026lt;s*\u0026gt;(nullptr)\u003c/code\u003e，编译器相信在 \u003ccode\u003enullptr\u003c/code\u003e 处（\u003ccode\u003e0x0\u003c/code\u003e）有一个真实存在的 \u003ccode\u003es\u003c/code\u003e 类型的对象。此处使用 \u003ccode\u003estatic_cast\u003c/code\u003e 而非 \u003ccode\u003ereinterpret_cast\u003c/code\u003e 是因为 C++ 标准不允许将 \u003ccode\u003enullptr\u003c/code\u003e 通过 \u003ccode\u003ereinterpret_cast\u003c/code\u003e 转换成其他类型的指针；此类转换应用 \u003ccode\u003estatic_cast\u003c/code\u003e。由于 \u003ccode\u003estatic_cast\u0026lt;s*\u0026gt;(nullptr)\u003c/code\u003e 返回指向 \u003ccode\u003es\u003c/code\u003e 类型对象的指针，因此 \u003ccode\u003estatic_cast\u0026lt;s*\u0026gt;(nullptr)-\u0026gt;m\u003c/code\u003e 就是一个虚拟但在编译器看来可用的成员变量 \u003ccode\u003em\u003c/code\u003e。为了求得以字节为单位的 \u003ccode\u003eptrdiff_t\u003c/code\u003e，实现中通过 \u003ccode\u003e\u0026amp;reinterpret_cast\u0026lt;const volatile char\u0026amp;\u0026gt;(static_cast\u0026lt;s*\u0026gt;(nullptr)-\u0026gt;m)\u003c/code\u003e 获得一个 \u003ccode\u003econst volatile char*\u003c/code\u003e 类型的变量。由于在该实现中，虚拟的变量位于 \u003ccode\u003e0x0\u003c/code\u003e 位置，故而 \u003ccode\u003e\u0026amp;reinterpret_cast\u0026lt;const volatile char\u0026amp;\u0026gt;(static_cast\u0026lt;s*\u0026gt;(nullptr)-\u0026gt;m)\u003c/code\u003e 即是 \u003ccode\u003em\u003c/code\u003e 在 \u003ccode\u003es\u003c/code\u003e 类型对象当中相对对象起始地址的偏移量。最后，只需将它转换为 \u003ccode\u003esize_t\u003c/code\u003e 类型的值即可：\u003ccode\u003ereinterpret_cast\u0026lt;size_t\u0026gt;(\u0026amp;reinterpret_cast\u0026lt;const volatile char\u0026amp;\u0026gt;(static_cast\u0026lt;s*\u0026gt;(nullptr)-\u0026gt;m))\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e同样，可以有 C 风格的实现：\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003edefine\u003c/span\u003e offsetof(s, m) (size_t)((char*)(\u0026amp;((s*)0)-\u0026gt;m))\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"测试\"\u003e\u003ca href=\"#测试\" class=\"headerlink\" title=\"测试\"\u003e\u003c/a\u003e测试\u003c/h2\u003e\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003edefine\u003c/span\u003e offsetof(s, m) (reinterpret_cast\u003cspan class=\"string\"\u003e\u0026lt;size_t\u0026gt;\u003c/span\u003e(\u0026amp;reinterpret_cast\u003cspan class=\"string\"\u003e\u0026lt;const volatile char\u0026amp;\u0026gt;\u003c/span\u003e(static_cast\u003cspan class=\"string\"\u003e\u0026lt;s*\u0026gt;\u003c/span\u003e(nullptr)-\u0026gt;m)))\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title class_\"\u003eS\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003echar\u003c/span\u003e c;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003edouble\u003c/span\u003e d;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003echar\u003c/span\u003e cc;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;the first element is at offset %zu\\n\u0026#34;\u003c/span\u003e, \u003cspan class=\"built_in\"\u003eoffsetof\u003c/span\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e S, c));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;the double is at offset %zu\\n\u0026#34;\u003c/span\u003e, \u003cspan class=\"built_in\"\u003eoffsetof\u003c/span\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e S, d));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;the third element is at offset %zu\\n\u0026#34;\u003c/span\u003e, \u003cspan class=\"built_in\"\u003eoffsetof\u003c/span\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e S, cc));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上述测试代码的结果是：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ./a.out\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethe first element is at offset 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethe double is at offset 8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethe third element is at offset 16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2018-01-10T11:04:57Z",
  "Author": "Liam Huang"
}