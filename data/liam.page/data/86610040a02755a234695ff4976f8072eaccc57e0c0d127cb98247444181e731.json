{
  "Source": "liam.page",
  "Title": "Python 中的黑暗角落（一）：理解 yield 关键字",
  "Link": "https://liam.page/2017/06/30/understanding-yield-in-python/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003ePython 是非常灵活的语言，其中 \u003ccode\u003eyield\u003c/code\u003e 关键字是普遍容易困惑的概念。\u003c/p\u003e\n\u003cp\u003e此篇将介绍 \u003ccode\u003eyield\u003c/code\u003e 关键字，及其相关的概念。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"迭代、可迭代、迭代器\"\u003e\u003ca href=\"#迭代、可迭代、迭代器\" class=\"headerlink\" title=\"迭代、可迭代、迭代器\"\u003e\u003c/a\u003e迭代、可迭代、迭代器\u003c/h2\u003e\u003ch3 id=\"迭代（iteration）与可迭代（iterable）\"\u003e\u003ca href=\"#迭代（iteration）与可迭代（iterable）\" class=\"headerlink\" title=\"迭代（iteration）与可迭代（iterable）\"\u003e\u003c/a\u003e迭代（iteration）与可迭代（iterable）\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e迭代是一种操作；可迭代是对象的一种特性。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e很多数据都是「容器」；它们包含了很多其他类型的元素。实际使用容器时，我们常常需要逐个获取其中的元素。\u003cstrong\u003e逐个获取元素的过程，就是「迭代」\u003c/strong\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# iteration\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea_list = [\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e a_list:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(i)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果我们可以从一个对象中，逐个地获取元素，那么我们就说这个对象是「可迭代的」。\u003c/p\u003e\n\u003cp\u003ePython 中的顺序类型，都是可迭代的（\u003ccode\u003elist\u003c/code\u003e, \u003ccode\u003etuple\u003c/code\u003e, \u003ccode\u003estring\u003c/code\u003e）。其余包括 \u003ccode\u003edict\u003c/code\u003e, \u003ccode\u003eset\u003c/code\u003e, \u003ccode\u003efile\u003c/code\u003e 也是可迭代的。对于用户自己实现的类型，如果提供了 \u003ccode\u003e__iter__()\u003c/code\u003e 或者 \u003ccode\u003e__getitem__()\u003c/code\u003e 方法，那么该类的对象也是可迭代的。\u003c/p\u003e\n\u003ch3 id=\"迭代器（iterator）\"\u003e\u003ca href=\"#迭代器（iterator）\" class=\"headerlink\" title=\"迭代器（iterator）\"\u003e\u003c/a\u003e迭代器（iterator）\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e迭代器是一种对象。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e迭代器抽象的是一个「数据流」，是只允许迭代一次的对象。对迭代器不断调用 \u003ccode\u003enext()\u003c/code\u003e 方法，则可以依次获取下一个元素；当迭代器中没有元素时，调用 \u003ccode\u003enext()\u003c/code\u003e 方法会抛出 \u003ccode\u003eStopIteration\u003c/code\u003e 异常。迭代器的 \u003ccode\u003e__iter__()\u003c/code\u003e 方法返回迭代器自身；因此迭代器也是可迭代的。\u003c/p\u003e\n\u003ch3 id=\"迭代器协议（iterator-protocol）\"\u003e\u003ca href=\"#迭代器协议（iterator-protocol）\" class=\"headerlink\" title=\"迭代器协议（iterator protocol）\"\u003e\u003c/a\u003e迭代器协议（iterator protocol）\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e迭代器协议指的是容器类需要包含一个特殊方法。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果一个容器类提供了 \u003ccode\u003e__iter__()\u003c/code\u003e 方法，并且该方法能返回一个能够逐个访问容器内所有元素的迭代器，则我们说该容器类实现了迭代器协议。\u003c/p\u003e\n\u003cp\u003ePython 中的迭代器协议和 Python 中的 \u003ccode\u003efor\u003c/code\u003e 循环是紧密相连的。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# iterator protocol and for loop\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e x \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e something:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(x)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003ePython 处理 \u003ccode\u003efor\u003c/code\u003e 循环时，首先会调用内建函数 \u003ccode\u003eiter(something)\u003c/code\u003e，它实际上会调用 \u003ccode\u003esomething.__iter__()\u003c/code\u003e，返回 \u003ccode\u003esomething\u003c/code\u003e 对应的迭代器。而后，\u003ccode\u003efor\u003c/code\u003e 循环会调用内建函数 \u003ccode\u003enext()\u003c/code\u003e，作用在迭代器上，获取迭代器的下一个元素，并赋值给 \u003ccode\u003ex\u003c/code\u003e。此后，Python 才开始执行循环体。\u003c/p\u003e\n\u003ch2 id=\"生成器、yield-表达式\"\u003e\u003ca href=\"#生成器、yield-表达式\" class=\"headerlink\" title=\"生成器、yield 表达式\"\u003e\u003c/a\u003e生成器、\u003ccode\u003eyield\u003c/code\u003e 表达式\u003c/h2\u003e\u003ch3 id=\"生成器函数（generator-function）和生成器（generator）\"\u003e\u003ca href=\"#生成器函数（generator-function）和生成器（generator）\" class=\"headerlink\" title=\"生成器函数（generator function）和生成器（generator）\"\u003e\u003c/a\u003e生成器函数（generator function）和生成器（generator）\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003e生成器函数是一种特殊的函数；生成器则是特殊的迭代器。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果一个函数包含 \u003ccode\u003eyield\u003c/code\u003e 表达式，那么它是一个生成器函数；调用它会返回一个特殊的迭代器，称为生成器。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003efunc\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003egen\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"built_in\"\u003etype\u003c/span\u003e(func))   \u003cspan class=\"comment\"\u003e# \u0026lt;class \u0026#39;function\u0026#39;\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"built_in\"\u003etype\u003c/span\u003e(gen))    \u003cspan class=\"comment\"\u003e# \u0026lt;class \u0026#39;function\u0026#39;\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"built_in\"\u003etype\u003c/span\u003e(func())) \u003cspan class=\"comment\"\u003e# \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(\u003cspan class=\"built_in\"\u003etype\u003c/span\u003e(gen()))  \u003cspan class=\"comment\"\u003e# \u0026lt;class \u0026#39;generator\u0026#39;\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如上，生成器 \u003ccode\u003egen\u003c/code\u003e 看起来和普通的函数没有太大区别。仅只是将 \u003ccode\u003ereturn\u003c/code\u003e 换成了 \u003ccode\u003eyield\u003c/code\u003e。用 \u003ccode\u003etype()\u003c/code\u003e 函数打印二者的类型也能发现，\u003ccode\u003efunc\u003c/code\u003e 和 \u003ccode\u003egen\u003c/code\u003e 都是函数。然而，二者的返回值的类型就不同了。\u003ccode\u003efunc()\u003c/code\u003e 是一个 \u003ccode\u003eint\u003c/code\u003e 类型的对象；而 \u003ccode\u003egen()\u003c/code\u003e 则是一个迭代器对象。\u003c/p\u003e\n\u003ch3 id=\"yield-表达式\"\u003e\u003ca href=\"#yield-表达式\" class=\"headerlink\" title=\"yield 表达式\"\u003e\u003c/a\u003e\u003ccode\u003eyield\u003c/code\u003e 表达式\u003c/h3\u003e\u003cp\u003e如前所述，如果一个函数定义中包含 \u003ccode\u003eyield\u003c/code\u003e 表达式，那么该函数是一个生成器函数（而非普通函数）。实际上，\u003ccode\u003eyield\u003c/code\u003e 仅能用于定义生成器函数。\u003c/p\u003e\n\u003cp\u003e与普通函数不同，生成器函数被调用后，其函数体内的代码并不会立即执行，而是返回一个生成器（generator-iterator）。当返回的生成器调用成员方法时，相应的生成器函数中的代码才会执行。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003esquare\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e x \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003erange\u003c/span\u003e(\u003cspan class=\"number\"\u003e4\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e x ** \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esquare_gen = square()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e x \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e square_gen:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(x)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e前面说到，\u003ccode\u003efor\u003c/code\u003e 循环会调用 \u003ccode\u003eiter()\u003c/code\u003e 函数，获取一个生成器；而后调用 \u003ccode\u003enext()\u003c/code\u003e 函数，将生成器中的下一个值赋值给 \u003ccode\u003ex\u003c/code\u003e；再执行循环体。因此，上述 \u003ccode\u003efor\u003c/code\u003e 循环基本等价于：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003egenitor = square_gen.__iter__()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x = geniter.\u003cspan class=\"built_in\"\u003enext\u003c/span\u003e() \u003cspan class=\"comment\"\u003e# Python 3 是 __next__()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(x)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意到，\u003ccode\u003esquare\u003c/code\u003e 是一个生成器函数；作为它的返回值，\u003ccode\u003esquare_gen\u003c/code\u003e 已经是一个迭代器；迭代器的 \u003ccode\u003e__iter__()\u003c/code\u003e 返回它自己。因此 \u003ccode\u003egeniter\u003c/code\u003e 对应的生成器函数，即是 \u003ccode\u003esquare\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e每次执行到 \u003ccode\u003ex = geniter.next()\u003c/code\u003e 时，\u003ccode\u003esquare\u003c/code\u003e 函数会从上一次暂停的位置开始，一直执行到下一个 \u003ccode\u003eyield\u003c/code\u003e 表达式，将 \u003ccode\u003eyield\u003c/code\u003e 关键字后的表达式列表返回给调用者，并再次暂停。注意，\u003cstrong\u003e每次从暂停恢复时，生成器函数的内部变量、指令指针、内部求值栈等内容和暂停时完全一致\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"生成器的方法\"\u003e\u003ca href=\"#生成器的方法\" class=\"headerlink\" title=\"生成器的方法\"\u003e\u003c/a\u003e生成器的方法\u003c/h3\u003e\u003cp\u003e生成器有一些方法。调用这些方法可以控制对应的生成器函数；不过，若是生成器函数已在执行过程中，调用这些方法则会抛出 \u003ccode\u003eValueError\u003c/code\u003e 异常。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egenerator.next()\u003c/code\u003e：从上一次在 \u003ccode\u003eyield\u003c/code\u003e 表达式暂停的状态恢复，继续执行到下一次遇见 \u003ccode\u003eyield\u003c/code\u003e 表达式。当该方法被调用时，当前 \u003ccode\u003eyield\u003c/code\u003e 表达式的值为 \u003ccode\u003eNone\u003c/code\u003e，下一个 \u003ccode\u003eyield\u003c/code\u003e 表达式中的表达式列表会被返回给该方法的调用者。若没有遇到 \u003ccode\u003eyield\u003c/code\u003e 表达式，生成器函数就已经退出，那么该方法会抛出 \u003ccode\u003eStopIterator\u003c/code\u003e 异常。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egenerator.send(value)\u003c/code\u003e：和 \u003ccode\u003egenerator.next()\u003c/code\u003e 类似，差别仅在与它会将当前 \u003ccode\u003eyield\u003c/code\u003e 表达式的值设置为 \u003ccode\u003evalue\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egenerator.throw(type[, value[, traceback]])\u003c/code\u003e：向生成器函数抛出一个类型为 \u003ccode\u003etype\u003c/code\u003e 值为 \u003ccode\u003evalue\u003c/code\u003e 调用栈为 \u003ccode\u003etraceback\u003c/code\u003e 的异常，而后让生成器函数继续执行到下一个 \u003ccode\u003eyield\u003c/code\u003e 表达式。其余行为与 \u003ccode\u003egenerator.next()\u003c/code\u003e 类似。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egenerator.close()\u003c/code\u003e：告诉生成器函数，当前生成器作废不再使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"举例和说明\"\u003e\u003ca href=\"#举例和说明\" class=\"headerlink\" title=\"举例和说明\"\u003e\u003c/a\u003e举例和说明\u003c/h3\u003e\u003ch4 id=\"如果你看不懂生成器函数\"\u003e\u003ca href=\"#如果你看不懂生成器函数\" class=\"headerlink\" title=\"如果你看不懂生成器函数\"\u003e\u003c/a\u003e如果你看不懂生成器函数\u003c/h4\u003e\u003cp\u003e如果你还是不太能理解生成器函数，那么大致上你可以这样去理解。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在函数开始处，加入 \u003ccode\u003eresult = list()\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e将每个 \u003ccode\u003eyield\u003c/code\u003e 表达式 \u003ccode\u003eyield expr\u003c/code\u003e 替换为 \u003ccode\u003eresult.append(expr)\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e在函数末尾处，加入 \u003ccode\u003ereturn result\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"关于「下一个」yield-表达式\"\u003e\u003ca href=\"#关于「下一个」yield-表达式\" class=\"headerlink\" title=\"关于「下一个」yield 表达式\"\u003e\u003c/a\u003e关于「下一个」\u003ccode\u003eyield\u003c/code\u003e 表达式\u003c/h4\u003e\u003cp\u003e介绍「生成器的方法」时，我们说当调用 \u003ccode\u003egenerator.next()\u003c/code\u003e 时，生成器函数会从当前位置开始执行到下一个 \u003ccode\u003eyield\u003c/code\u003e 表达式。这里的「下一个」指的是执行逻辑的下一个。因此\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003ef123\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e item \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e f123(): \u003cspan class=\"comment\"\u003e# 1, 2, and 3, will be printed\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(item)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003ef13\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e \u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e item \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e f13(): \u003cspan class=\"comment\"\u003e# 1 and 3, will be printed\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(item)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"使用-send-方法与生成器函数通信\"\u003e\u003ca href=\"#使用-send-方法与生成器函数通信\" class=\"headerlink\" title=\"使用 send() 方法与生成器函数通信\"\u003e\u003c/a\u003e使用 \u003ccode\u003esend()\u003c/code\u003e 方法与生成器函数通信\u003c/h4\u003e\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003efunc\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        y = (\u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        x += y\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egeniter = func()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egeniter.\u003cspan class=\"built_in\"\u003enext\u003c/span\u003e()  \u003cspan class=\"comment\"\u003e# 1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egeniter.send(\u003cspan class=\"number\"\u003e3\u003c/span\u003e) \u003cspan class=\"comment\"\u003e# 4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egeniter.send(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003cspan class=\"comment\"\u003e# 14\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处，生成器函数 \u003ccode\u003efunc\u003c/code\u003e 用 \u003ccode\u003eyield\u003c/code\u003e 表达式，将处理好的 \u003ccode\u003ex\u003c/code\u003e 发送给生成器的调用者；与此同时，生成器的调用者通过 \u003ccode\u003esend\u003c/code\u003e 函数，将外部信息作为生成器函数内部的 \u003ccode\u003eyield\u003c/code\u003e 表达式的值，保存在 \u003ccode\u003ey\u003c/code\u003e 当中，并参与后续的处理。\u003c/p\u003e\n\u003cp\u003e这一特性是使用 \u003ccode\u003eyield\u003c/code\u003e 在 Python 中使用协程的基础。\u003c/p\u003e\n\u003ch2 id=\"yield-的好处\"\u003e\u003ca href=\"#yield-的好处\" class=\"headerlink\" title=\"yield 的好处\"\u003e\u003c/a\u003e\u003ccode\u003eyield\u003c/code\u003e 的好处\u003c/h2\u003e\u003cp\u003ePython 的老用户应该会熟悉 Python 2 中的一个特性：内建函数 \u003ccode\u003erange\u003c/code\u003e 和 \u003ccode\u003exrange\u003c/code\u003e。其中，\u003ccode\u003erange\u003c/code\u003e 函数返回的是一个列表，而 \u003ccode\u003exrange\u003c/code\u003e 返回的是一个迭代器。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在 Python 3 中，\u003ccode\u003erange\u003c/code\u003e 相当于 Python 2 中的 \u003ccode\u003exrange\u003c/code\u003e；而 Python 2 中的 \u003ccode\u003erange\u003c/code\u003e 可以用 \u003ccode\u003elist(range())\u003c/code\u003e 来实现。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePython 之所以要提供这样的解决方案，是因为在很多时候，我们只是需要逐个顺序访问容器内的元素。大多数时候，我们不需要「一口气获取容器内所有的元素」。比方说，顺序访问容器内的前 5 个元素，可以有两种做法：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e获取容器内的所有元素，然后取出前 5 个；\u003c/li\u003e\n\u003cli\u003e从头开始，逐个迭代容器内的元素，迭代 5 个元素之后停止。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e显而易见，如果容器内的元素数量非常多（比如有 \u003ccode\u003e10 ** 8\u003c/code\u003e 个），或者容器内的元素体积非常大，那么后一种方案能节省巨大的时间、空间开销。\u003c/p\u003e\n\u003cp\u003e现在假设，我们有一个函数，其产出（返回值）是一个列表。而若我们知道，调用者对该函数的返回值，只有逐个迭代这一种方式。那么，如果函数生产列表中的每一个元素都需要耗费非常多的时间，或者生成所有元素需要等待很长时间，则使用 \u003ccode\u003eyield\u003c/code\u003e 把函数变成一个生成器函数，每次只产生一个元素，就能节省很多开销了。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-06-30T07:52:59Z",
  "Author": "Liam Huang"
}