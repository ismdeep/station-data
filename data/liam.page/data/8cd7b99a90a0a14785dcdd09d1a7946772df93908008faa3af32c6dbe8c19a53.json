{
  "Source": "liam.page",
  "Title": "程序员的自我修养（⑫）：C++ 的内存顺序·中",
  "Link": "https://liam.page/2021/12/11/memory-order-cpp-02/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e前两篇（\u003ca href=\"/2021/06/05/memory-model-cpp/\"\u003e内存模型\u003c/a\u003e与\u003ca href=\"/2021/06/06/memory-order-cpp-01/\"\u003e内存顺序·上\u003c/a\u003e）翻译了 CPPreference 上关于内存模型和内存顺序的概念，务虚伦理较多。此篇继续相关讨论，虽仍主要是\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/atomic/memory_order\"\u003e对应页面\u003c/a\u003e的翻译，但会展开做一些讨论。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"六种内存顺序标记\"\u003e\u003ca href=\"#六种内存顺序标记\" class=\"headerlink\" title=\"六种内存顺序标记\"\u003e\u003c/a\u003e六种内存顺序标记\u003c/h2\u003e\u003cp\u003eC++ 标准库定义了六中内存顺序标记（memory order tag）。他们被定义为一个枚举类型。在 C++11 之后、C++20 之前，定义为：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"keyword\"\u003eenum\u003c/span\u003e \u003cspan class=\"title class_\"\u003ememory_order\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    memory_order_relaxed,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    memory_order_consume,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    memory_order_acquire,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    memory_order_release,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    memory_order_acq_rel,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    memory_order_seq_cst\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} memory_order;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在 C++20 中，则使用新的 \u003ccode\u003eenum class\u003c/code\u003e 重新定义：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eenum class\u003c/span\u003e \u003cspan class=\"title class_\"\u003ememory_order\u003c/span\u003e : \u003cspan class=\"comment\"\u003e/*unspecified*/\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    relaxed, consume, acquire, release, acq_rel, seq_cst\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"keyword\"\u003econstexpr\u003c/span\u003e memory_order memory_order_relaxed = memory_order::relaxed;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"keyword\"\u003econstexpr\u003c/span\u003e memory_order memory_order_consume = memory_order::consume;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"keyword\"\u003econstexpr\u003c/span\u003e memory_order memory_order_acquire = memory_order::acquire;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"keyword\"\u003econstexpr\u003c/span\u003e memory_order memory_order_release = memory_order::release;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"keyword\"\u003econstexpr\u003c/span\u003e memory_order memory_order_acq_rel = memory_order::acq_rel;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003einline\u003c/span\u003e \u003cspan class=\"keyword\"\u003econstexpr\u003c/span\u003e memory_order memory_order_seq_cst = memory_order::seq_cst;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们知道，原子变量上没有数据竞争，从而提供了良定义的多线程并发读写能力。因此，原子变量有可能实际上建立了线程间的同步关系，于是建立了某种\u003cins\u003e先于（happens-before）\u003c/ins\u003e关系。\u003c/p\u003e\n\u003cp\u003e在原子操作上添加六种内存顺序标记（中的一部分），会\u003cstrong\u003e影响（但不一定改变；视 CPU 架构）原子操作附近的内存访问顺序（包括其他原子操作，亦包含对非原子变量的读写操作）\u003c/strong\u003e。注意，内存顺序（通过六种标记）讨论的实际上是线程内原子操作附近非原子操作访问内存的顺序，而非是多线程之间的执行顺序。只不过，因为原子变量自身可能建立了线程间的同步关系，所以\u003cstrong\u003e两个线程内各自的内存顺序会经由原子变量的同步建立间接的顺序关系\u003c/strong\u003e。亦即，\u003cstrong\u003e内存顺序本质上是在讨论单线程内指令执行顺序对多线程影响\u003c/strong\u003e的问题。显然，通过添加内存顺序标记，编译器优化和 CPU 指令多发射（multiple issue）、CPU 乱序执行（out-of-order execution）都可能受到一定影响。\u003c/p\u003e\n\u003cp\u003e所有原子操作默认的内存顺序标记是 \u003ccode\u003estd::memory_order_seq_cst\u003c/code\u003e，亦即，提供顺序一致性的顺序保证（后续讨论）。目前而言，在绝大多数 CPU 架构上，顺序一致性模型都需要或多或少地在原子操作前后加上内存屏障（memory fence）。因而，顺序一致性虽好，但会损失部分性能。使用其它内存顺序标记则或多或少降低顺序一致性的保证。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e标记\u003c/th\u003e\n\u003cth\u003e作用\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ememory_order_relaxed\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e宽松操作：仅保证原子操作自身的原子性，对其他读写操作不做任何同步，亦无顺序上的限制。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ememory_order_consume\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e打上此标记的 load 操作对相关内存位置施加\u003cins\u003e\u003ca href=\"/2021/06/06/memory-order-cpp-01/#%E6%B6%88%E8%B4%B9%E6%93%8D%E4%BD%9C%EF%BC%88consume-operation%EF%BC%89\"\u003e消费操作（consume operation）\u003c/a\u003e\u003c/ins\u003e：当前线程中，所有依赖当前 load 操作读取的值的读写操作不得重排序至当前操作之前。因此，其他线程中相同原子变量\u003cins\u003e释放操作（release operation）\u003c/ins\u003e依赖的变量的写入，对当前线程是可见的。多数平台上，该标记仅影响编译器优化。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ememory_order_acquire\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e打上此标记的 load 操作对相关内存位置施加\u003cins\u003e\u003ca href=\"/2021/06/06/memory-order-cpp-01/#%E5%8D%A0%E6%9C%89%E6%93%8D%E4%BD%9C%EF%BC%88aquire-operation%EF%BC%89\"\u003e占有操作（aquire operation）\u003c/a\u003e\u003c/ins\u003e：当前线程中，所有读写操作不得重排序至当前操作之前。因此，其他线程中相同原子变量\u003cins\u003e释放操作（release operation）\u003c/ins\u003e之前的写入，对当前线程是可见的。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ememory_order_release\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e打上此标记的 store 操作对相关内存位置施加\u003cins\u003e\u003ca href=\"/2021/06/06/memory-order-cpp-01/#%E9%87%8A%E6%94%BE%E6%93%8D%E4%BD%9C%EF%BC%88release-operation%EF%BC%89\"\u003e释放操作（release operation）\u003c/a\u003e\u003c/ins\u003e：当前线程中，所有读写操作不得重排至当前操作之后。因此，当前操作所在线程之前的写入操作，在其他线程中，对该原子变量施加\u003cins\u003e占有操作（aquire operation）\u003c/ins\u003e之后是可见的。也因此，当前操作所在线程中，当前操作所依赖的写入操作，在其他线程中，对该原子变量施加\u003cins\u003e消费操作（consume operation）\u003c/ins\u003e之后是可见的。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ememory_order_acq_rel\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e打上此标记的 read-modify-write 操作既是\u003cins\u003e占有操作（aquire operation）\u003c/ins\u003e又是\u003cins\u003e释放操作（release operation）\u003c/ins\u003e：当前线程中的读写操作不能重排至当前操作之后（如果原本在之前），亦不能重排至当前操作之前（如果原本在之后）。因此，其他线程中相同原子变量\u003cins\u003e释放操作（release operation）\u003c/ins\u003e之前的写入，对当前 modification 是可见的；该 modification 对其他线程中相同原子变量\u003cins\u003e占有操作（aquire operation）\u003c/ins\u003e之后亦是可见的。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ememory_order_seq_cst\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e打上此标记的 load 操作对相关内存位置施加\u003cins\u003e占有操作（aquire operation）\u003c/ins\u003e；打上此标记的 store 操作对相关内存位置施加\u003cins\u003e释放操作（release operation）\u003c/ins\u003e；打上此标记的 read-modify-write 对相关内存位置施加\u003cins\u003e占有操作（aquire operation）\u003c/ins\u003e和\u003cins\u003e释放操作（release operation）\u003c/ins\u003e。此外，对所有线程来说，所有打上该标记的写操作，存在一个全局修改顺序（尽管具体顺序在执行时才确定）。也就是说，对于所有线程来说，看见的这些写操作的顺序是一致的。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"宽松顺序（Relaxed-ordering）\"\u003e\u003ca href=\"#宽松顺序（Relaxed-ordering）\" class=\"headerlink\" title=\"宽松顺序（Relaxed ordering）\"\u003e\u003c/a\u003e宽松顺序（Relaxed ordering）\u003c/h2\u003e\u003cp\u003e宽松顺序仅保证原子操作自身的原子性，对其他读写操作不做任何同步，亦无顺序上的限制。因此，它们不是同步操作，仅保证原子变量上读写操作的原子性，以及各个原子变量自身修改顺序的一致性（对于同一个变量的两次修改，虽然顺序不一定，但是所有其他线程观察到的修改顺序都是相同的）。\u003c/p\u003e\n\u003cp\u003e假定 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e 是两个全局变量，均被初始化为零，则下列代码执行完毕之后，存在 \u003ccode\u003er1 == r2 == 42\u003c/code\u003e 的可能性。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// global\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; x{\u003cspan class=\"number\"\u003e0\u003c/span\u003e}, y{\u003cspan class=\"number\"\u003e0\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Thread 1:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er1 = y.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_relaxed);  \u003cspan class=\"comment\"\u003e// A\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(r1, std::memory_order_relaxed);  \u003cspan class=\"comment\"\u003e// B\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Thread 2:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er2 = x.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_relaxed);  \u003cspan class=\"comment\"\u003e// C\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ey.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e, std::memory_order_relaxed);  \u003cspan class=\"comment\"\u003e// D\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是因为，虽然在线程 1 和线程 2 之间没有任何同步；于是，对于原子变量 \u003ccode\u003ey\u003c/code\u003e 的\u003cins\u003e修改顺序（Modification Order）\u003c/ins\u003e来说，D 可能先于 A 发生；同样，对于原子变量 \u003ccode\u003ex\u003c/code\u003e 的\u003cins\u003e修改顺序（Modification Order）\u003c/ins\u003e来说，B 可能先于 C 发生。\u003c/p\u003e\n\u003cp\u003e宽松顺序的典型场景是不断增加的计数器。计数器的增加只需有原子性的保证，而对同步或是内存顺序没有要去。例如，\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr\"\u003e\u003ccode\u003estd::shared_ptr\u003c/code\u003e\u003c/a\u003e 当中的引用计数的增加。实例代码：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;thread\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;atomic\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; cnt = {\u003cspan class=\"number\"\u003e0\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ef\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e n = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; n \u0026lt; \u003cspan class=\"number\"\u003e1000\u003c/span\u003e; ++n) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cnt.\u003cspan class=\"built_in\"\u003efetch_add\u003c/span\u003e(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, std::memory_order_relaxed);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::vector\u0026lt;std::thread\u0026gt; v;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"type\"\u003eint\u003c/span\u003e n = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; n \u0026lt; \u003cspan class=\"number\"\u003e10\u003c/span\u003e; ++n) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        v.\u003cspan class=\"built_in\"\u003eemplace_back\u003c/span\u003e(f);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"keyword\"\u003eauto\u003c/span\u003e\u0026amp; t : v) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        t.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::cout \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;Final counter value is \u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其输出应该是：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFinal counter value is 10000\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不过，对于 \u003ccode\u003estd::shard_ptr\u003c/code\u003e 当中的引用计数来说，其减少需要与析构函数当中的 load 操作有 acquire-release 的同步。\u003c/p\u003e\n\u003ch2 id=\"释放-获取顺序（Release-Acquire-ordering）\"\u003e\u003ca href=\"#释放-获取顺序（Release-Acquire-ordering）\" class=\"headerlink\" title=\"释放-获取顺序（Release-Acquire ordering）\"\u003e\u003c/a\u003e释放-获取顺序（Release-Acquire ordering）\u003c/h2\u003e\u003cp\u003e若在线程 A 当中的原子 store 操作被标记上 \u003ccode\u003estd::memory_order_release\u003c/code\u003e，而若在线程 B 当中相同原子变量的 load 操作被标记上 \u003ccode\u003estd::memory_order_acquire\u003c/code\u003e，则所有在线程 A 看来\u003cins\u003e先于（happens-before）\u003c/ins\u003e该 store 操作的那些内存写入（包括非原子变量写入和宽松顺序的原子变量写入），在线程 B 中都有\u003cins\u003e可见副作用（Visible side-effects）\u003c/ins\u003e。也就是说，一旦线程 B 的原子 load 操作完成，线程 B 可见线程 A 写入内存的所有内容。\u003c/p\u003e\n\u003cp\u003e这一同步仅只建立在对同一原子变量执行释放操作和获取操作的线程中。其他线程观察到的内存访问顺序可能异于同步的线程之中的任意一个。\u003c/p\u003e\n\u003cp\u003e在部分强顺序的 CPU 架构中（例如 \u003ccode\u003ex86\u003c/code\u003e, SPARC TSO, IBM mainframe 等），释放-获取顺序对大多数操作来说都是自动保证的。因此，对于释放-获取顺序的同步来说，无需引入额外的 CPU 指令（来确保内存顺序）；但在编译器优化阶段，仍需加入一些限制（例如：编译器不能将非原子的 store 操作挪到原子 store-release 操作之后；亦不能将非原子的 load 操作挪到原子 load-acquire 操作之前）。\u003c/p\u003e\n\u003cp\u003e在弱顺序的 CPU 架构中（例如 ARM,Itanium, PowerPC），则需加入额外的 CPU 指令或是内存屏障。\u003c/p\u003e\n\u003cp\u003e互斥锁（例如 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/thread/mutex\"\u003e\u003ccode\u003estd::mutex\u003c/code\u003e\u003c/a\u003e/\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/atomic/atomic_flag\"\u003eatomic spinlock\u003c/a\u003e）亦属于释放-获取同步：当锁被线程 A 释放而后被线程 B 获取，则在锁被释放之前临界区中所有对共享变量的写入操作在线程 B 获取锁之后均可见。\u003c/p\u003e\n\u003cp\u003e下例中，通过原子变量 \u003ccode\u003eptr\u003c/code\u003e 建立起了 \u003ccode\u003eproducer\u003c/code\u003e 线程和 \u003ccode\u003econsumer\u003c/code\u003e 线程之间的获取-释放同步，因此两个 \u003ccode\u003eassert\u003c/code\u003e 永远不会失败。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;thread\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;atomic\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cassert\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;std::string*\u0026gt; ptr{\u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e data{\u003cspan class=\"number\"\u003e42\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eproducer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::string* p  = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e std::\u003cspan class=\"built_in\"\u003estring\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ptr.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(p, std::memory_order_release);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003econsumer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::string* p2;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e == (p2 = ptr.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_acquire)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(*p2 == \u003cspan class=\"string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e); \u003cspan class=\"comment\"\u003e// never fires\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(data == \u003cspan class=\"number\"\u003e42\u003c/span\u003e); \u003cspan class=\"comment\"\u003e// never fires\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003et1\u003c/span\u003e\u003cspan class=\"params\"\u003e(producer)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003et2\u003c/span\u003e\u003cspan class=\"params\"\u003e(consumer)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    t1.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); t2.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下例则展示了在三个线程之中，获取-释放顺序的传递。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;thread\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;atomic\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cassert\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::vector\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; data;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; flag = {\u003cspan class=\"number\"\u003e0\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ethread_1\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data.\u003cspan class=\"built_in\"\u003epush_back\u003c/span\u003e(\u003cspan class=\"number\"\u003e42\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    flag.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, std::memory_order_release);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ethread_2\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e expected = \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (!flag.\u003cspan class=\"built_in\"\u003ecompare_exchange_strong\u003c/span\u003e(expected, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, std::memory_order_acq_rel)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        expected = \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ethread_3\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (flag.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_acquire) \u0026lt; \u003cspan class=\"number\"\u003e2\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(data.\u003cspan class=\"built_in\"\u003eat\u003c/span\u003e(\u003cspan class=\"number\"\u003e0\u003c/span\u003e) == \u003cspan class=\"number\"\u003e42\u003c/span\u003e); \u003cspan class=\"comment\"\u003e// will never fire\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003ea\u003c/span\u003e\u003cspan class=\"params\"\u003e(thread_1)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003eb\u003c/span\u003e\u003cspan class=\"params\"\u003e(thread_2)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003ec\u003c/span\u003e\u003cspan class=\"params\"\u003e(thread_3)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    a.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); b.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); c.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"释放-消费顺序（Release-Consume-ordering）\"\u003e\u003ca href=\"#释放-消费顺序（Release-Consume-ordering）\" class=\"headerlink\" title=\"释放-消费顺序（Release-Consume ordering）\"\u003e\u003c/a\u003e释放-消费顺序（Release-Consume ordering）\u003c/h2\u003e\u003cp\u003e若在线程 A 当中的原子 store 操作被标记上 \u003ccode\u003estd::memory_order_release\u003c/code\u003e，而若在线程 B 当中相同原子变量的 load 操作被标记上 \u003ccode\u003estd::memory_order_consume\u003c/code\u003e，则所有在线程 A 看来\u003cins\u003e先于（happens-before）\u003c/ins\u003e该 store 操作的那些内存写入（包括非原子变量写入和宽松顺序的原子变量写入），在线程 B 中依赖该原子变量的表达式和函数看来都有\u003cins\u003e可见副作用（Visible side-effects）\u003c/ins\u003e。也就是说，一旦线程 B 的原子 load 操作完成，线程 B 中依赖该原子变量的表达式和函数可见线程 A 写入内存的所有内容。\u003c/p\u003e\n\u003cp\u003e这一同步仅只建立在对同一原子变量执行消费操作和获取操作的线程中。其他线程观察到的内存访问顺序可能异于同步的线程之中的任意一个。\u003c/p\u003e\n\u003cp\u003e在除 DEC Alpha 之外的主流 CPU 上，释放-消费顺序（亦称：依赖顺序）是自动保证的。因此，对于释放-获取顺序的同步来说，无需引入额外的 CPU 指令（来确保内存顺序）；但在编译器优化阶段，仍需加入一些限制（例如：编译器不能将非原子的 store 操作挪到原子 store-release 操作之后；亦不能将涉及到依赖链的非原子的 load 操作挪到原子 load-consume 操作之前）。\u003c/p\u003e\n\u003cp\u003e该顺序的使用，往往见于对并发共享数据结构有频繁读取而极少写入的场景（例如路由表、安全策略、防火墙规则等）。\u003c/p\u003e\n\u003cp\u003e注意，截至 2015 年 2 月，尚未有编译器追踪了依赖链条，因此，消费操作被提升为获取操作。\u003c/p\u003e\n\u003cp\u003e下例中，通过原子变量 \u003ccode\u003eptr\u003c/code\u003e 建立起了 \u003ccode\u003eproducer\u003c/code\u003e 线程和 \u003ccode\u003econsumer\u003c/code\u003e 线程之间的释放-消费同步，因此第一个 \u003ccode\u003eassert\u003c/code\u003e 永远不会失败，但第二个 \u003ccode\u003eassert\u003c/code\u003e 可能失败。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;thread\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;atomic\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cassert\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;std::string*\u0026gt; ptr;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e data;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eproducer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::string* p  = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e std::\u003cspan class=\"built_in\"\u003estring\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = \u003cspan class=\"number\"\u003e42\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ptr.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(p, std::memory_order_release);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003econsumer\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    std::string* p2;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (\u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e == (p2 = ptr.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_consume)));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(*p2 == \u003cspan class=\"string\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e); \u003cspan class=\"comment\"\u003e// never fires: *p2 carries dependency from ptr\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(data == \u003cspan class=\"number\"\u003e42\u003c/span\u003e); \u003cspan class=\"comment\"\u003e// may or may not fire: data does not carry dependency from ptr\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003et1\u003c/span\u003e\u003cspan class=\"params\"\u003e(producer)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003et2\u003c/span\u003e\u003cspan class=\"params\"\u003e(consumer)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    t1.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); t2.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"顺序一致顺序（Sequentially-consistent-ordering）\"\u003e\u003ca href=\"#顺序一致顺序（Sequentially-consistent-ordering）\" class=\"headerlink\" title=\"顺序一致顺序（Sequentially-consistent ordering）\"\u003e\u003c/a\u003e顺序一致顺序（Sequentially-consistent ordering）\u003c/h2\u003e\u003cp\u003e标记上 \u003ccode\u003estd::memory_order_seq_cst\u003c/code\u003e 的原子操作不仅满足释放-获取顺序的要求（一个线程中 store-release 之前的写入操作在另一个 load-acquire 之后都可见），而且为所有如此标记的原子操作建立了\u003cstrong\u003e唯一的全局统一修改顺序（single total modification order）\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e正式地说，在不考虑 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence\"\u003e\u003ccode\u003estd::atomic_thread_fence\u003c/code\u003e\u003c/a\u003e 的情况下，对于每个 load 原子变量 M 的操作 B（标记为 \u003ccode\u003estd::memory_order_seq_cst\u003c/code\u003e），它读取到的值来自以下三种可能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在上述\u003cstrong\u003e唯一的全局统一修改顺序\u003c/strong\u003e中的上一个修改了 M 的操作 A 的结果；\u003c/li\u003e\n\u003cli\u003e若存在这样的 A，B 还可能读到另一个修改了 M 的操作 C，它没有标记为 \u003ccode\u003estd::memory_order_seq_cst\u003c/code\u003e，并且不\u003cins\u003e先于（happens-before）\u003c/ins\u003e A；\u003c/li\u003e\n\u003cli\u003e若不存在这样的 A，B 读取的结果来自另一个修改了 M 的没有标记为 \u003ccode\u003estd::memory_order_seq_cst\u003c/code\u003e的操作 D。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- Sequential ordering may be necessary for multiple producer-multiple consumer situations where all consumers must observe the actions of all producers occurring in the same order. --\u003e\n\n\u003cp\u003e顺序一致对于多生产者多消费者的情形是必要的。这是因为，所有消费者必须能够以相同的顺序观察到所有生产者的行为。\u003c/p\u003e\n\u003c!-- Total sequential ordering requires a full memory fence CPU instruction on all multi-core systems. This may become a performance bottleneck since it forces the affected memory accesses to propagate to every core. --\u003e\n\n\u003cp\u003e在所有多核系统中（注：逻辑核），完全的顺序一致都会插入大量内存屏障指令。这使得相应的内存访问需要对所有核心进行广播，因而可能成为性能瓶颈。\u003c/p\u003e\n\u003c!-- This example demonstrates a situation where sequential ordering is necessary. Any other ordering may trigger the assert because it would be possible for the threads c and d to observe changes to the atomics x and y in opposite order. --\u003e\n\n\u003cp\u003e下例中，顺序一致即是必要的。其他更弱的顺序模型可能导致线程 C 和线程 D 观察到原子变量 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e 以不同的顺序修改，从而导致 \u003ccode\u003eassert\u003c/code\u003e 失败。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;thread\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;atomic\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;cassert\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;\u003cspan class=\"type\"\u003ebool\u003c/span\u003e\u0026gt; x = {\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;\u003cspan class=\"type\"\u003ebool\u003c/span\u003e\u0026gt; y = {\u003cspan class=\"literal\"\u003efalse\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::atomic\u0026lt;\u003cspan class=\"type\"\u003eint\u003c/span\u003e\u0026gt; z = {\u003cspan class=\"number\"\u003e0\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ewrite_x\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e, std::memory_order_seq_cst);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ewrite_y\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    y.\u003cspan class=\"built_in\"\u003estore\u003c/span\u003e(\u003cspan class=\"literal\"\u003etrue\u003c/span\u003e, std::memory_order_seq_cst);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eread_x_then_y\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (!x.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_seq_cst));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (y.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_seq_cst)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ++z;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eread_y_then_x\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e (!y.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_seq_cst));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (x.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e(std::memory_order_seq_cst)) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ++z;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003emain\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003ea\u003c/span\u003e\u003cspan class=\"params\"\u003e(write_x)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003eb\u003c/span\u003e\u003cspan class=\"params\"\u003e(write_y)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003ec\u003c/span\u003e\u003cspan class=\"params\"\u003e(read_x_then_y)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003estd::thread \u003cspan class=\"title\"\u003ed\u003c/span\u003e\u003cspan class=\"params\"\u003e(read_y_then_x)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    a.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); b.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); c.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e(); d.\u003cspan class=\"built_in\"\u003ejoin\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(z.\u003cspan class=\"built_in\"\u003eload\u003c/span\u003e() != \u003cspan class=\"number\"\u003e0\u003c/span\u003e);  \u003cspan class=\"comment\"\u003e// will never happen\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"与-volatile-的关系\"\u003e\u003ca href=\"#与-volatile-的关系\" class=\"headerlink\" title=\"与 volatile 的关系\"\u003e\u003c/a\u003e与 \u003ccode\u003evolatile\u003c/code\u003e 的关系\u003c/h2\u003e\u003c!-- Within a thread of execution, accesses (reads and writes) through volatile glvalues cannot be reordered past observable side-effects (including other volatile accesses) that are sequenced-before or sequenced-after within the same thread, but this order is not guaranteed to be observed by another thread, since volatile access does not establish inter-thread synchronization. --\u003e\n\n\u003cp\u003e在\u003cstrong\u003e同一线程\u003c/strong\u003e中，对 \u003ccode\u003evolatile\u003c/code\u003e 修饰的\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/language/value_category#glvalue\"\u003e泛左值\u003c/a\u003e（包括左值和将亡值）的访问（包括读写）不允许被重排序至\u003cins\u003e先序于（sequenced-before）\u003c/ins\u003e该操作的可观测的副作用（包括其他 \u003ccode\u003evolatile\u003c/code\u003e 访问）之前，亦不允许被重排序至\u003cins\u003e后序于（sequenced-after）\u003c/ins\u003e该操作的可观测的副作用（同上）之后。然而，\u003ccode\u003evolatile\u003c/code\u003e 访问并未建立线程之间的同步，故而在其他线程中，上述顺序无法得到保证。\u003c/p\u003e\n\u003c!-- In addition, volatile accesses are not atomic (concurrent read and write is a data race) and do not order memory (non-volatile memory accesses may be freely reordered around the volatile access). --\u003e\n\n\u003cp\u003e此外，对 \u003ccode\u003evolatile\u003c/code\u003e 修饰的泛左值的访问不是原子的（这意味着读写同一内存位置上的 \u003ccode\u003evolatile\u003c/code\u003e 变量属于\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.cppreference.com/w/cpp/language/memory_model\"\u003e数据竞争\u003c/a\u003e），同时也不影响内存顺序（非 \u003ccode\u003evolatile\u003c/code\u003e-访问可以在 \u003ccode\u003evolatile\u003c/code\u003e-访问附近自由重排序）。\u003c/p\u003e\n\u003c!-- One notable exception is Visual Studio, where, with default settings, every volatile write has release semantics and every volatile read has acquire semantics (Microsoft Docs), and thus volatiles may be used for inter-thread synchronization. Standard volatile semantics are not applicable to multithreaded programming, although they are sufficient for e.g. communication with a std::signal handler that runs in the same thread when applied to sig_atomic_t variables. --\u003e\n\n\u003cp\u003e一个例外是 Visual Studio。根据\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.microsoft.com/en-us/cpp/cpp/volatile-cpp\"\u003e微软提供的文档\u003c/a\u003e，在默认设置下，\u003ccode\u003evolatile\u003c/code\u003e-读自带 acquire 语义而 \u003ccode\u003evolatile\u003c/code\u003e-写自带 release 语义。因此，这些 \u003ccode\u003evolatile\u003c/code\u003e-访问可被用来建立线程间的同步。但要注意，标准的 \u003ccode\u003evolatile\u003c/code\u003e 语义不应被用于多线程编程。（这一点在\u003ca href=\"/2018/01/18/volatile-in-C-and-Cpp/\"\u003e前作\u003c/a\u003e中也有讨论）\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-12-11T00:27:42Z",
  "Author": "Liam Huang"
}