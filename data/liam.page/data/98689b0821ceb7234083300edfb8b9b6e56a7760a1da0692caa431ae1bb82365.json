{
  "Source": "liam.page",
  "Title": "Python HTTP 库：requests 快速入门",
  "Link": "https://liam.page/2016/02/27/The-requests-library-in-Python/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e2013 年我接触 Python 的时候，就听闻 Python 的网络编程能力十分强大。因此，在熟悉 Python 的基本语法之后，我就和几个小伙伴一起合作，试着用 Python 的 \u003ccode\u003eurllib\u003c/code\u003e 和 \u003ccode\u003eurllib2\u003c/code\u003e 库构建了一个百度贴吧 Python 客户端。\u003c/p\u003e\n\u003cp\u003e然而，使用的过程中，我发现两个标准库的语法并不自然，甚至可以说十分反人类——用着很难受。又有，我平时使用 Python 甚少涉及到网络编程的内容。因此，Python 的网络编程就被我放下了，直到我认识了 \u003ccode\u003erequests\u003c/code\u003e 库。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"初识-requests\"\u003e\u003ca href=\"#初识-requests\" class=\"headerlink\" title=\"初识 requests\"\u003e\u003c/a\u003e初识 \u003ccode\u003erequests\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e\u003ccode\u003erequests\u003c/code\u003e 库的宣言是\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHTTP for Humans （给人用的 HTTP 库）\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e我们首先来验证一下。\u003c/p\u003e\n\u003cp\u003e在网络编程中，最最基本的任务包含：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e发送请求\u003c/li\u003e\n\u003cli\u003e登录\u003c/li\u003e\n\u003cli\u003e获取数据\u003c/li\u003e\n\u003cli\u003e解析数据\u003c/li\u003e\n\u003cli\u003e反序列化打印内容\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们以 GitHub 为例，先看一下使用 \u003ccode\u003eurllib2\u003c/code\u003e 要怎么做。为了把事情弄简单点，我们假设实现已经知道，GET 请求 \u003ccode\u003ehttps://api.github.com/\u003c/code\u003e 返回的内容是个 JSON 格式的数据（实际上通过 \u003ccode\u003econtent-type\u003c/code\u003e 也能判断）。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e urllib2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e json\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egh_url  = \u003cspan class=\"string\"\u003e\u0026#39;https://api.github.com\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_user = \u003cspan class=\"string\"\u003e\u0026#39;user\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_psw  = \u003cspan class=\"string\"\u003e\u0026#39;password\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereq = urllib2.Request(gh_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epassword_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epassword_manager.add_password(\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, gh_url, cs_user, cs_psw)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eauth_manager = urllib2.HTTPBasicAuthHandler(password_manager)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eopener = urllib2.build_opener(auth_manager)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eurllib2.install_opener(opener)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehandler = urllib2.urlopen(req)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e handler.getcode() == requests.codes.ok:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    text = handler.read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    d_text = json.loads(text)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e k, v \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e d_text.items():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e k, v\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果运行正确，那么代码应该返回：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eissues_url https://api.github.com/issues\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecurrent_user_repositories_url https://api.github.com/user/repos{?type,page,per_page,sort}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erate_limit_url https://api.github.com/rate_limit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erepository_url https://api.github.com/repos/{owner}/{repo}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003euser_repositories_url https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eteam_url https://api.github.com/teams\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e同样的效果，用 \u003ccode\u003erequests\u003c/code\u003e 库则有如下代码：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url  = \u003cspan class=\"string\"\u003e\u0026#39;https://api.github.com\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_user = \u003cspan class=\"string\"\u003e\u0026#39;user\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_psw  = \u003cspan class=\"string\"\u003e\u0026#39;password\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get(cs_url, auth=(cs_user, cs_psw))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e r.status_code == requests.codes.ok\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e k, v \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e r.json().items():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e k, v\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e溢美之词就不用说了，读到这里的你心里肯定只有一声「卧槽，这才是 Python 该有的样子」。那么，接下来我们看看 \u003ccode\u003erequests\u003c/code\u003e 都有哪些黑魔法。\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e\u003ca href=\"#安装\" class=\"headerlink\" title=\"安装\"\u003e\u003c/a\u003e安装\u003c/h2\u003e\u003cp\u003e最推荐的方式，是直接安装推荐过的 \u003ca href=\"/2015/11/21/Python-distribution-Anaconda/\"\u003eAnaconda\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e如果你不想安装 Anaconda，那么建议你使用 \u003ccode\u003epip\u003c/code\u003e 安装；只需在命令行下执行：\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epip install requests\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"基本用法\"\u003e\u003ca href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"\u003e\u003c/a\u003e基本用法\u003c/h2\u003e\u003cp\u003e\u003ccode\u003erequests\u003c/code\u003e 的基本用法，呃，真是不能再基本了。最基本的操作，就是以某种 HTTP 方法向远端服务器发送一个请求而已；而 \u003ccode\u003erequests\u003c/code\u003e 库就是这么做的。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://httpbin.org\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get(\u003cspan class=\"string\"\u003e\u0026#34;%s/%s\u0026#34;\u003c/span\u003e % (cs_url, \u003cspan class=\"string\"\u003e\u0026#39;get\u0026#39;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.post(\u003cspan class=\"string\"\u003e\u0026#34;%s/%s\u0026#34;\u003c/span\u003e % (cs_url, \u003cspan class=\"string\"\u003e\u0026#39;post\u0026#39;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.put(\u003cspan class=\"string\"\u003e\u0026#34;%s/%s\u0026#34;\u003c/span\u003e % (cs_url, \u003cspan class=\"string\"\u003e\u0026#39;put\u0026#39;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.delete(\u003cspan class=\"string\"\u003e\u0026#34;%s/%s\u0026#34;\u003c/span\u003e % (cs_url, \u003cspan class=\"string\"\u003e\u0026#39;delete\u0026#39;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.patch(\u003cspan class=\"string\"\u003e\u0026#34;%s/%s\u0026#34;\u003c/span\u003e % (cs_url, \u003cspan class=\"string\"\u003e\u0026#39;patch\u0026#39;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.options(\u003cspan class=\"string\"\u003e\u0026#34;%s/%s\u0026#34;\u003c/span\u003e % (cs_url, \u003cspan class=\"string\"\u003e\u0026#39;get\u0026#39;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从语法上看，\u003ccode\u003erequests\u003c/code\u003e 库设计的非常自然。所谓 \u003ccode\u003erequests.get\u003c/code\u003e，就是以 GET 方式发送一个 REQUEST，**得到一个 \u003ccode\u003eResponse\u003c/code\u003e 类的结果，保存为 \u003ccode\u003er\u003c/code\u003e**。\u003c/p\u003e\n\u003cp\u003e你可以在 \u003ccode\u003er\u003c/code\u003e 中取得所有你想得到的和 HTTP 有关的信息。下面，我们以 GET 方法为例，依次介绍。\u003c/p\u003e\n\u003ch3 id=\"URL-传参-x2F-获取请求的-URL\"\u003e\u003ca href=\"#URL-传参-x2F-获取请求的-URL\" class=\"headerlink\" title=\"URL 传参 / 获取请求的 URL\"\u003e\u003c/a\u003eURL 传参 / 获取请求的 URL\u003c/h3\u003e\u003cp\u003e如果你经常上网（废话，看到这里的都上过网吧……），一定见过类似下面的链接：\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://encrypted.google.com/search?q=hello\"\u003ehttps://encrypted.google.com/search?q=hello\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e即：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;协议\u0026gt;://\u0026lt;域名\u0026gt;/\u0026lt;接口\u0026gt;?\u0026lt;键1\u0026gt;=\u0026lt;值1\u0026gt;\u0026amp;\u0026lt;键2\u0026gt;=\u0026lt;值2\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003erequests\u003c/code\u003e 库提供的 HTTP 方法，都提供了名为 \u003ccode\u003eparams\u003c/code\u003e 的参数。这个参数可以接受一个 Python 字典，并自动格式化为上述格式。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.so.com/s\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eparam  = {\u003cspan class=\"string\"\u003e\u0026#39;ie\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;q\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;query\u0026#39;\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, params = param)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.url\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行将得到：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehttp://www.so.com/s?q=query\u0026amp;ie=utf-8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"HTTP-状态码-x2F-重定向跳转\"\u003e\u003ca href=\"#HTTP-状态码-x2F-重定向跳转\" class=\"headerlink\" title=\"HTTP 状态码 / 重定向跳转\"\u003e\u003c/a\u003eHTTP 状态码 / 重定向跳转\u003c/h3\u003e\u003cp\u003e\u003ccode\u003erequests\u003c/code\u003e 库定义的 \u003ccode\u003eResponse\u003c/code\u003e 类可以方便地获取请求的 HTTP 状态码和重定向状态。\u003c/p\u003e\n\u003cp\u003e360 公司的搜索引擎，原名「好搜」，现在改为「360 搜索」；域名也从 \u003ccode\u003ewww.haosou.com\u003c/code\u003e 改成了 \u003ccode\u003ewww.so.com\u003c/code\u003e。如果你在地址栏输入 \u003ccode\u003ewww.haosou.com\u003c/code\u003e，那么会经由 302 跳转到 \u003ccode\u003ewww.so.com\u003c/code\u003e。我们借此来演示。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.so.com/s\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eparam  = {\u003cspan class=\"string\"\u003e\u0026#39;ie\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;q\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;query\u0026#39;\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, params = param)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.url, r.status_code\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.haosou.com/s\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, params = param)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.url, r.status_code, r.history\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结果是：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehttp://www.so.com/s?q=query\u0026amp;ie=utf-8 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehttp://www.so.com/s?q=query\u0026amp;ie=utf-8 200 [\u0026lt;Response [302]\u0026gt;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们发现，\u003ccode\u003erequests\u003c/code\u003e 默认自动地处理了 302 跳转。在经过跳转的请求中，返回的 URL 和状态码都是跳转之后的信息；唯独在 \u003ccode\u003ehistory\u003c/code\u003e 中，用 Python 列表记录了跳转情况。\u003c/p\u003e\n\u003cp\u003e大多数情况下，自动处理是挺好的。不过，有时候我们也想单步追踪页面跳转情况。此时，可以给请求加上 \u003ccode\u003eallow_redirects = False\u003c/code\u003e 参数。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.so.com/s\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eparam  = {\u003cspan class=\"string\"\u003e\u0026#39;ie\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;q\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;query\u0026#39;\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, params = param)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.url, r.status_code\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.haosou.com/s\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, params = param, allow_redirects = \u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.url, r.status_code, r.history\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出结果：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehttp://www.so.com/s?q=query\u0026amp;ie=utf-8 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehttp://www.haosou.com/s?q=query\u0026amp;ie=utf-8 302 []\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不允许 \u003ccode\u003erequests\u003c/code\u003e 自动处理跳转后，返回的 URL 和状态码都符合预期了。\u003c/p\u003e\n\u003ch3 id=\"超时设置\"\u003e\u003ca href=\"#超时设置\" class=\"headerlink\" title=\"超时设置\"\u003e\u003c/a\u003e超时设置\u003c/h3\u003e\u003cp\u003e\u003ccode\u003erequests\u003c/code\u003e 的超时设置以\u003cstrong\u003e秒\u003c/strong\u003e为单位。例如，对请求加参数 \u003ccode\u003etimeout = 5\u003c/code\u003e 即可设置超时为 5 秒。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# a very short timeout is set intentionally\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.zhihu.com\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, timeout = \u003cspan class=\"number\"\u003e0.000001\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回报错：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;D:\\test\\py\\test.py\u0026#34;, line 6, in \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r = requests.get (cs_url, timeout = 0.000001)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;C:\\Users\\username\\AppData\\Local\\Continuum\\Anaconda\\lib\\site-packages\\requests\\api.py\u0026#34;, line 69, in get\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return request(\u0026#39;get\u0026#39;, url, params=params, **kwargs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;C:\\Users\\username\\AppData\\Local\\Continuum\\Anaconda\\lib\\site-packages\\requests\\api.py\u0026#34;, line 50, in request\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = session.request(method=method, url=url, **kwargs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;C:\\Users\\username\\AppData\\Local\\Continuum\\Anaconda\\lib\\site-packages\\requests\\sessions.py\u0026#34;, line 465, in request\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    resp = self.send(prep, **send_kwargs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;C:\\Users\\username\\AppData\\Local\\Continuum\\Anaconda\\lib\\site-packages\\requests\\sessions.py\u0026#34;, line 573, in send\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r = adapter.send(request, **kwargs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;C:\\Users\\username\\AppData\\Local\\Continuum\\Anaconda\\lib\\site-packages\\requests\\adapters.py\u0026#34;, line 419, in send\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    raise ConnectTimeout(e, request=request)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erequests.exceptions.ConnectTimeout: HTTPConnectionPool(host=\u0026#39;www.zhihu.com\u0026#39;, port=80): Max retries exceeded with url: / (Caused by ConnectTimeoutError(\u0026lt;requests.packages.urllib3.connection.HTTPConnection object at 0x0000000002AFABE0\u0026gt;, \u0026#39;Connection to www.zhihu.com timed out. (connect timeout=1e-06)\u0026#39;))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"请求头\"\u003e\u003ca href=\"#请求头\" class=\"headerlink\" title=\"请求头\"\u003e\u003c/a\u003e请求头\u003c/h3\u003e\u003cp\u003e我们利用 \u003ccode\u003ehttpbin\u003c/code\u003e 这个网站，先来看一下 \u003ccode\u003erequests\u003c/code\u003e 发出的 HTTP 报文默认的请求头是什么样子的。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://httpbin.org/get\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.content\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回结果：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;args\u0026#34;: {},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;headers\u0026#34;: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Accept\u0026#34;: \u0026#34;*/*\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Host\u0026#34;: \u0026#34;httpbin.org\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;User-Agent\u0026#34;: \u0026#34;python-requests/2.7.0 CPython/2.7.10 Windows/7\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;origin\u0026#34;: \u0026#34;xx.xx.xx.xx\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;url\u0026#34;: \u0026#34;http://httpbin.org/get\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e注意，这里使用 \u003ccode\u003er.content\u003c/code\u003e 来查看请求头部是因为 \u003ccode\u003ehttpbin\u003c/code\u003e 这个网站的特殊性——它什么也不干，就把请求的内容返回给请求者。在 \u003ccode\u003erequests\u003c/code\u003e 当中，应当使用 \u003ccode\u003er.request.headers\u003c/code\u003e 来查看请求的头部。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e通常我们比较关注其中的 \u003ccode\u003eUser-Agent\u003c/code\u003e 和 \u003ccode\u003eAccept-Encoding\u003c/code\u003e。如果我们要修改 HTTP 头中的这两项内容，只需要将一个合适的字典参数传给 \u003ccode\u003eheaders\u003c/code\u003e 即可。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_headers = {\u003cspan class=\"string\"\u003e\u0026#39;User-Agent\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;From Liam Huang\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Accept-Encoding\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;gzip\u0026#39;\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://httpbin.org/get\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url, headers = my_headers)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.content\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;args\u0026#34;: {},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;headers\u0026#34;: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Accept\u0026#34;: \u0026#34;*/*\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Host\u0026#34;: \u0026#34;httpbin.org\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;User-Agent\u0026#34;: \u0026#34;From Liam Huang\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;origin\u0026#34;: \u0026#34;xx.xx.xx.xx\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;url\u0026#34;: \u0026#34;http://httpbin.org/get\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e可以看到，UA 和 AE 都已经被修改了。\u003c/p\u003e\n\u003ch3 id=\"响应头\"\u003e\u003ca href=\"#响应头\" class=\"headerlink\" title=\"响应头\"\u003e\u003c/a\u003e响应头\u003c/h3\u003e\u003cp\u003e作为 HTTP 请求的响应，返回的内容中也有 HTTP 头。它是一个反序列化为 Python 字典的数据结构，可以通过 \u003ccode\u003eResponse.headers\u003c/code\u003e 来查看。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://httpbin.org/get\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.headers\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;content-length\u0026#34;: \u0026#34;263\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;server\u0026#34;: \u0026#34;nginx\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;connection\u0026#34;: \u0026#34;keep-alive\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;access-control-allow-credentials\u0026#34;: \u0026#34;true\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;date\u0026#34;: \u0026#34;Fri, 26 Feb 2016 10:26:17 GMT\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;access-control-allow-origin\u0026#34;: \u0026#34;*\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;content-type\u0026#34;: \u0026#34;application/json\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"响应内容\"\u003e\u003ca href=\"#响应内容\" class=\"headerlink\" title=\"响应内容\"\u003e\u003c/a\u003e响应内容\u003c/h3\u003e\u003ch4 id=\"字节模式-x2F-自动解包\"\u003e\u003ca href=\"#字节模式-x2F-自动解包\" class=\"headerlink\" title=\"字节模式 / 自动解包\"\u003e\u003c/a\u003e字节模式 / 自动解包\u003c/h4\u003e\u003cp\u003e长期以来，互联网都存在带宽有限的情况。因此，网络上传输的数据，很多情况下都是经过压缩的。经由 \u003ccode\u003erequests\u003c/code\u003e 发送的请求，当收到的响应内容经过 gzip 或 deflate 压缩时，**\u003ccode\u003erequests\u003c/code\u003e 会自动为我们解包**。我们可以用 \u003ccode\u003eResponse.content\u003c/code\u003e 来获得以字节形式返回的相应内容。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.zhihu.com\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e r.status_code == requests.codes.ok:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.content\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这相当于 \u003ccode\u003eurllib2.urlopen(url).read()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果相应内容不是文本，而是二进制数据（比如图片），那么上述打印结果可能会糊你一脸。这里以图片为例，示例一下该怎么办。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e StringIO \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e StringIO\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://liam0205.me/uploads/avatar/avatar-2.jpg\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e r.status_code == requests.codes.ok:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Image.\u003cspan class=\"built_in\"\u003eopen\u003c/span\u003e(StringIO(r.content)).show()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行无误的话，能看到我和我爱人的照片。\u003c/p\u003e\n\u003ch4 id=\"文本模式-x2F-编码\"\u003e\u003ca href=\"#文本模式-x2F-编码\" class=\"headerlink\" title=\"文本模式 / 编码\"\u003e\u003c/a\u003e文本模式 / 编码\u003c/h4\u003e\u003cp\u003e如果响应返回是文本，那么你可以用 \u003ccode\u003eResponse.text\u003c/code\u003e 获得 Unicode 编码的响应返回内容。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.zhihu.com\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e r.status_code == requests.codes.ok:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.text\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e要获得 Unicode 编码的结果，意味着 \u003ccode\u003erequests\u003c/code\u003e 会为我们做解码工作。那么 \u003ccode\u003erequests\u003c/code\u003e 是按照何种编码去对返回结果解码的呢？\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erequests\u003c/code\u003e 会读取 HTTP header 中关于字符集的内容。如果获取成功，则会依此进行解码；若不然，则会根据响应内容对编码进行猜测。具体来说，我们可以用 \u003ccode\u003eResponse.encoding\u003c/code\u003e 来查看/修改使用的编码。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url = \u003cspan class=\"string\"\u003e\u0026#39;http://www.zhihu.com\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get (cs_url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e r.status_code == requests.codes.ok:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.encoding\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"反序列化-JSON-数据\"\u003e\u003ca href=\"#反序列化-JSON-数据\" class=\"headerlink\" title=\"反序列化 JSON 数据\"\u003e\u003c/a\u003e反序列化 JSON 数据\u003c/h4\u003e\u003cp\u003e开篇给出的第一个 \u003ccode\u003erequests\u003c/code\u003e 示例中，特别吸引人的一点就是 \u003ccode\u003erequests\u003c/code\u003e 无需任何其他库，就能解析序列化为 JSON 格式的数据。\u003c/p\u003e\n\u003cp\u003e我们以 IP 查询 Google 公共 DNS 为例：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url   = \u003cspan class=\"string\"\u003e\u0026#39;http://ip.taobao.com/service/getIpInfo.php\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_param = {\u003cspan class=\"string\"\u003e\u0026#39;ip\u0026#39;\u003c/span\u003e:\u003cspan class=\"string\"\u003e\u0026#39;8.8.8.8\u0026#39;\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.get(cs_url, params = my_param)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.json()[\u003cspan class=\"string\"\u003e\u0026#39;data\u0026#39;\u003c/span\u003e][\u003cspan class=\"string\"\u003e\u0026#39;country\u0026#39;\u003c/span\u003e].encode(\u003cspan class=\"string\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结果将输出：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e美国\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"模拟登录-GitHub-看看\"\u003e\u003ca href=\"#模拟登录-GitHub-看看\" class=\"headerlink\" title=\"模拟登录 GitHub 看看\"\u003e\u003c/a\u003e模拟登录 GitHub 看看\u003c/h2\u003e\u003ch3 id=\"Cookie-介绍\"\u003e\u003ca href=\"#Cookie-介绍\" class=\"headerlink\" title=\"Cookie 介绍\"\u003e\u003c/a\u003eCookie 介绍\u003c/h3\u003e\u003cp\u003eHTTP 协议是无状态的。因此，若不借助其他手段，远程的服务器就无法知道以前和客户端做了哪些通信。Cookie 就是「其他手段」之一。\u003c/p\u003e\n\u003cp\u003eCookie 一个典型的应用场景，就是用于记录用户在网站上的登录状态。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e用户登录成功后，服务器下发一个（通常是加密了的）Cookie 文件。\u003c/li\u003e\n\u003cli\u003e客户端（通常是网页浏览器）将收到的 Cookie 文件保存起来。\u003c/li\u003e\n\u003cli\u003e下次客户端与服务器连接时，将 Cookie 文件发送给服务器，由服务器校验其含义，恢复登录状态（从而避免再次登录）。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"Cookie-在-requests-中\"\u003e\u003ca href=\"#Cookie-在-requests-中\" class=\"headerlink\" title=\"Cookie 在 requests 中\"\u003e\u003c/a\u003eCookie 在 \u003ccode\u003erequests\u003c/code\u003e 中\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003eCookie? 你说的是小甜点吧！\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e别忘了，\u003ccode\u003erequests\u003c/code\u003e 是给人类设计的 Python 库。想想使用浏览器浏览网页的时候，我们没有手工去保存、重新发送 Cookie 对吗？浏览器都为我们自动完成了。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e在 \u003ccode\u003erequests\u003c/code\u003e 中，也是这样\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e当浏览器作为客户端与远端服务器连接时，远端服务器会根据需要，产生一个 SessionID，并附在 Cookie 中发给浏览器。接下来的时间里，只要 Cookie 不过期，浏览器与远端服务器的连接，都会使用这个 SessionID；而浏览器会自动与服务器协作，维护相应的 Cookie。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003erequests\u003c/code\u003e 中，也是这样。我们可以创建一个 \u003ccode\u003erequests.Session\u003c/code\u003e，尔后在该 Session 中与远端服务器通信，其中产生的 Cookie，**\u003ccode\u003erequests\u003c/code\u003e 会自动为我们维护好**。\u003c/p\u003e\n\u003ch3 id=\"POST-表单\"\u003e\u003ca href=\"#POST-表单\" class=\"headerlink\" title=\"POST 表单\"\u003e\u003c/a\u003ePOST 表单\u003c/h3\u003e\u003cp\u003ePOST 方法可以将一组用户数据，以表单的形式发送到远端服务器。远端服务器接受后，依照表单内容做相应的动作。\u003c/p\u003e\n\u003cp\u003e调用 \u003ccode\u003erequests\u003c/code\u003e 的 POST 方法时，可以用 \u003ccode\u003edata\u003c/code\u003e 参数接收一个 Python 字典结构。\u003ccode\u003erequests\u003c/code\u003e 会自动将 Python 字典序列化为实际的表单内容。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url    = \u003cspan class=\"string\"\u003e\u0026#39;http://httpbin.org/post\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_data   = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;key1\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;value1\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;key2\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;value2\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er = requests.post (cs_url, data = my_data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.content\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026#34;form\u0026#34;: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;key1\u0026#34;: \u0026#34;value1\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;key2\u0026#34;: \u0026#34;value2\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"实际模拟登录-GitHub-试试看\"\u003e\u003ca href=\"#实际模拟登录-GitHub-试试看\" class=\"headerlink\" title=\"实际模拟登录 GitHub 试试看\"\u003e\u003c/a\u003e实际模拟登录 GitHub 试试看\u003c/h3\u003e\u003cp\u003e模拟登录的第一步，首先是要搞清楚我们用浏览器登录时都发生了什么。\u003c/p\u003e\n\u003cp\u003eGitHub 登录页面是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/login\"\u003ehttps://github.com/login\u003c/a\u003e。我们首先清空浏览器 Cookie 记录，然后用 Chrome 打开登录页面。\u003c/p\u003e\n\u003cp\u003e填入 Username 和 Password 之后，我们打开 Tamper Chrome 和 Chrome 的元素审查工具（找到 Network 标签页），之后点登录按钮。\u003c/p\u003e\n\u003cp\u003e在 Tamper Chrome 中，我们发现：虽然登录页面是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/login\"\u003ehttps://github.com/login\u003c/a\u003e，但实际接收表单的是 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/session\"\u003ehttps://github.com/session\u003c/a\u003e。若登录成功，则跳转到 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e 首页，返回状态码 \u003ccode\u003e200\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/python/tamper-login-github.png\" alt=\"Tamper Chrome 截图\"/\u003e\u003c/p\u003e\n\u003cp\u003e而在 Chrome 的审查元素窗口中，我们可以看到提交给 \u003ccode\u003esession\u003c/code\u003e 接口的表单信息。内里包含\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecommit\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eutf8\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eauthenticity_token\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elogin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg data-src=\"/uploads/images/python/chrome-check-login-github.png\" alt=\"Chrome 审查元素截图\"/\u003e\u003c/p\u003e\n\u003cp\u003e其中，\u003ccode\u003ecommit\u003c/code\u003e 和 \u003ccode\u003eutf8\u003c/code\u003e 两项是定值；\u003ccode\u003elogin\u003c/code\u003e 和 \u003ccode\u003epassword\u003c/code\u003e 分别是用户名和密码，这很好理解。唯独 \u003ccode\u003eauthenticity_token\u003c/code\u003e 是一长串无规律的字符，我们不清楚它是什么。\u003c/p\u003e\n\u003cp\u003ePOST 动作发生在与 \u003ccode\u003esession\u003c/code\u003e 接口交互之前，因此可能的信息来源只有 \u003ccode\u003elogin\u003c/code\u003e 接口。我们打开 login 页面的源码，试着搜索 \u003ccode\u003eauthenticity_token\u003c/code\u003e 就不难发现有如下内容：\u003c/p\u003e\n\u003cfigure class=\"highlight html\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003einput\u003c/span\u003e \u003cspan class=\"attr\"\u003ename\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;authenticity_token\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003etype\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;hidden\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003evalue\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;......\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e原来，所谓的 \u003ccode\u003eauthenticity_token\u003c/code\u003e 是明白卸载 HTML 页面里的，只不过用 \u003ccode\u003ehidden\u003c/code\u003e 模式隐藏起来了。为此，我们只需要使用 Python 的正则库解析一下，就好了。\u003c/p\u003e\n\u003cp\u003e这样一来，事情就变得简单起来，编码吧！\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003e模拟登录 GitHub\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e re\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url  = \u003cspan class=\"string\"\u003e\u0026#39;https://github.com/login\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_user = \u003cspan class=\"string\"\u003e\u0026#39;user\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_psw  = \u003cspan class=\"string\"\u003e\u0026#39;psw\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_headers = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;User-Agent\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;Accept\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;Accept-Encoding\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;gzip\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;Accept-Language\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esss     = requests.Session()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er       = sss.get(cs_url, headers = my_headers)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereg     = \u003cspan class=\"string\"\u003er\u0026#39;\u0026lt;input name=\u0026#34;authenticity_token\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;(.*)\u0026#34; /\u0026gt;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epattern = re.\u003cspan class=\"built_in\"\u003ecompile\u003c/span\u003e(reg)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresult  = pattern.findall(r.content)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etoken   = result[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_data = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;commit\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;Sign in\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;utf8\u0026#39;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#39;%E2%9C%93\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;authenticity_token\u0026#39;\u003c/span\u003e : token,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;login\u0026#39;\u003c/span\u003e : cs_user,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;password\u0026#39;\u003c/span\u003e : cs_psw\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecs_url  = \u003cspan class=\"string\"\u003e\u0026#39;https://github.com/session\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003er       = sss.post(cs_url, headers = my_headers, data = my_data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e r.url, r.status_code, r.history\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出：\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehttps://github.com/ 200 [\u0026lt;Response [302]\u0026gt;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e代码很好理解，其实只是完全地模拟了浏览器的行为。\u003c/p\u003e\n\u003cp\u003e首先，我们准备好了和 Chrome 一致的 HTTP 请求头部信息。具体来说，其中的 \u003ccode\u003eUser-Agent\u003c/code\u003e 是比较重要的。而后，仿照浏览器与服务器的通信，我们创建了一个 \u003ccode\u003erequests.Session\u003c/code\u003e。接着，我们用 GET 方法打开登录页面，并用正则库解析到 \u003ccode\u003eauthenticity_token\u003c/code\u003e。随后，将所需的数据，整备成一个 Python 字典备用。最后，我们用 POST 方法，将表单提交到 \u003ccode\u003esession\u003c/code\u003e 接口。\u003c/p\u003e\n\u003cp\u003e最终的结果也是符合预期的：经由 \u003ccode\u003e302\u003c/code\u003e 跳转，打开了（\u003ccode\u003e200\u003c/code\u003e）GitHub 首页。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2016-02-26T23:05:38Z",
  "Author": "Liam Huang"
}