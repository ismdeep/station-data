{
  "Source": "liam.page",
  "Title": "在 C++ 中利用反射，动态获取 Protobuf 结构中的字段",
  "Link": "https://liam.page/2020/06/29/Dynamic-Get-Fields-in-Protobuf-by-Their-Name-in-Cpp/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e最近在实际业务中，我遇到了这样一类问题。\u003c/p\u003e\n\u003cp\u003e首先，我们定义了一个通用类，比如 \u003ccode\u003emessage Feature\u003c/code\u003e。然后，在一个大的特征分组中，我们定义了若干个特征。比如\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emessage FooGroup {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Feature foo = 1;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Feature bar = 2;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Feature baz = 3;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但在实际使用中，我们需要根据配置文件，有筛选地选出其中的某几个来使用——比如选择使用 \u003ccode\u003efoo\u003c/code\u003e 和 \u003ccode\u003ebaz\u003c/code\u003e。为此，我们会传递 \u003ccode\u003e\u0026#34;foo\u0026#34;\u003c/code\u003e 和 \u003ccode\u003e\u0026#34;baz\u0026#34;\u003c/code\u003e 给函数 \u003ccode\u003eget_feature\u003c/code\u003e，并期待它能返回 \u003ccode\u003econst Feature\u0026amp;\u003c/code\u003e，分别装着 \u003ccode\u003efoo\u003c/code\u003e 和 \u003ccode\u003ebaz\u003c/code\u003e 的常量引用。\u003c/p\u003e\n\u003cp\u003e查阅 Protobuf 的文档之后发现，使用描述器（Descriptor）、字段描述器（FieldDescriptor）和反射（Reflection）来实现该功能。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"函数原型\"\u003e\u003ca href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"\u003e\u003c/a\u003e函数原型\u003c/h2\u003e\u003cp\u003e我们的 \u003ccode\u003eget_feature\u003c/code\u003e 函数的原型应该形如：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e Feature\u0026amp; \u003cspan class=\"title\"\u003eget_features\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e FooGroup\u0026amp; group, \u003cspan class=\"type\"\u003econst\u003c/span\u003e std::string\u0026amp; name)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"描述器\"\u003e\u003ca href=\"#描述器\" class=\"headerlink\" title=\"描述器\"\u003e\u003c/a\u003e描述器\u003c/h2\u003e\u003cp\u003eProtobuf 的描述器定义在头文件 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor\"\u003e\u003ccode\u003edescriptor.h\u003c/code\u003e\u003c/a\u003e。为了使用描述器，你需要引用相应的头文件：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;google/protobuf/descriptor.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eProtobuf 的描述器包含了通过 Protobuf 定义的消息类的相关信息。这实际上实现了所谓的「自省」（Introspection）。对于一个具体的消息类对象，可以使用 \u003ccode\u003eGetDescriptor()\u003c/code\u003e 接口来获取其描述器。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::Descriptor* des = group.\u003cspan class=\"built_in\"\u003eGetDescriptor\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"字段描述器\"\u003e\u003ca href=\"#字段描述器\" class=\"headerlink\" title=\"字段描述器\"\u003e\u003c/a\u003e字段描述器\u003c/h2\u003e\u003cp\u003eProtobuf 的字段描述器也定义在头文件 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor\"\u003e\u003ccode\u003edescriptor.h\u003c/code\u003e\u003c/a\u003e 当中，它包含了对于消息类中某个字段的描述。在概念上，近似于 C++ 中类的成员指针。\u003c/p\u003e\n\u003cp\u003e由于消息类中某个字段的描述也属于消息类的描述的一部分，因此我们需要通过消息类的描述器来获取其中字段的描述器。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::Descriptor* des = group.\u003cspan class=\"built_in\"\u003eGetDescriptor\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::FieldDescriptor* fdes = des-\u0026gt;\u003cspan class=\"built_in\"\u003eFindFieldByName\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里，\u003ccode\u003eFindFieldByName\u003c/code\u003e 接口接受一个 \u003ccode\u003econst std::string\u0026amp;\u003c/code\u003e，并查找描述器对应的消息类中，是否有相应名称的字段。如果存在，则返回相应的字段描述器。如果不存在，则返回 \u003ccode\u003enullptr\u003c/code\u003e。注意，这里的 \u003ccode\u003eFindFieldByName\u003c/code\u003e 是大小写敏感的。\u003c/p\u003e\n\u003cp\u003e这样一来，我们就获取了 \u003ccode\u003eFooGroup\u003c/code\u003e 这个消息类当中字段 \u003ccode\u003efoo\u003c/code\u003e 的字段描述器（近似理解成 C++ 中的类成员指针）。\u003c/p\u003e\n\u003ch2 id=\"反射\"\u003e\u003ca href=\"#反射\" class=\"headerlink\" title=\"反射\"\u003e\u003c/a\u003e反射\u003c/h2\u003e\u003cp\u003eProtobuf 的反射定义在头文件 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message\"\u003e\u003ccode\u003emessage.h\u003c/code\u003e\u003c/a\u003e 当中。为了使用它，你需要引用相应的头文件：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;google/protobuf/message.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eProtobuf 的反射定义了一系列接口，用以在运行时动态地访问、修改消息类中的成员。对于一个具体的消息类对象，可以用 \u003ccode\u003eGetReflection()\u003c/code\u003e 接口来获取其反射。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::Reflection* ref = group.\u003cspan class=\"built_in\"\u003eGetReflection\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后，就可以通过反射提供的一系列接口来访问消息类中的字段了。由于我们需要获取 \u003ccode\u003econst Feature\u0026amp;\u003c/code\u003e，所以我们需要用到 \u003ccode\u003econst Message\u0026amp; GetMessage(const Message \u0026amp; message, const FieldDescriptor * field, MessageFactory * factory = nullptr) const\u003c/code\u003e 这个接口。注意到，它返回的是 \u003ccode\u003econst Messasge\u0026amp;\u003c/code\u003e。这里 \u003ccode\u003eMessage\u003c/code\u003e 是所有 Protobuf 消息类的父类。于是，我们可以在获取到它之后，通过 \u003ccode\u003edynamic_cast\u0026lt;const Feature\u0026amp;\u0026gt;\u003c/code\u003e 将 \u003ccode\u003eMessage\u003c/code\u003e 的常量引用动态转换成 \u003ccode\u003eFeature\u003c/code\u003e 的常量引用。\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003edynamic_cast\u003c/span\u003e\u0026lt;\u003cspan class=\"type\"\u003econst\u003c/span\u003e Feature\u0026amp;\u0026gt;(ref-\u0026gt;\u003cspan class=\"built_in\"\u003eGetMessage\u003c/span\u003e(group, fdes));\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"完整实现\"\u003e\u003ca href=\"#完整实现\" class=\"headerlink\" title=\"完整实现\"\u003e\u003c/a\u003e完整实现\u003c/h2\u003e\u003cp\u003e如此，我们就能给出完整实现了：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003econst\u003c/span\u003e Feature\u0026amp; \u003cspan class=\"title\"\u003eget_feature\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e FooGroup\u0026amp; group, \u003cspan class=\"type\"\u003econst\u003c/span\u003e std::string\u0026amp; name)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::Descriptor* des = group.\u003cspan class=\"built_in\"\u003eGetDescriptor\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::FieldDescriptor* fdes = des-\u0026gt;\u003cspan class=\"built_in\"\u003eFindFieldByName\u003c/span\u003e(name);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"built_in\"\u003eassert\u003c/span\u003e(fdes != \u003cspan class=\"literal\"\u003enullptr\u003c/span\u003e);  \u003cspan class=\"comment\"\u003e// in case of typo or something.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003econst\u003c/span\u003e google::protobuf::Reflection* ref = group.\u003cspan class=\"built_in\"\u003eGetReflection\u003c/span\u003e();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"built_in\"\u003edynamic_cast\u003c/span\u003e\u0026lt;\u003cspan class=\"type\"\u003econst\u003c/span\u003e Feature\u0026amp;\u0026gt;(ref-\u0026gt;\u003cspan class=\"built_in\"\u003eGetMessage\u003c/span\u003e(group, fdes));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-06-29T12:51:47Z",
  "Author": "Liam Huang"
}