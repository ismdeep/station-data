{
  "Source": "liam.page",
  "Title": "Scala 中下划线的一些魔法",
  "Link": "https://liam.page/2019/10/24/underscore-magic-in-Scala/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e这段时间开始学习使用 Scala。和大多数初学者一样，面对 Scala 的各种符号，我也是一脸懵哔。尤其是 Scala 中的下划线 \u003ccode\u003e_\u003c/code\u003e 在不同场合有不同含义，简直慌。适应一段时间之后，这里总结记录一下我遇见的下划线的含义。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"导入模块包\"\u003e\u003ca href=\"#导入模块包\" class=\"headerlink\" title=\"导入模块包\"\u003e\u003c/a\u003e导入模块包\u003c/h2\u003e\u003cp\u003e在 Scala 导入模块包时，\u003ccode\u003e_\u003c/code\u003e 的作用类似于 Java 导入模块包时的 \u003ccode\u003e*\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 引入 matching 包中的所有类\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e scala.util.matching._\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 引入对象 Fun 中的所有成员（相当于 Java 中的 static import）\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.test.\u003cspan class=\"type\"\u003eFun\u003c/span\u003e._\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 引入对象 Fun 中的所有成员，但将 `Foo` 改名为 `Bar`（相当于 Python 中的 `import Foo from com.test.Fun as Bar`）\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.test.\u003cspan class=\"type\"\u003eFun\u003c/span\u003e.{ \u003cspan class=\"type\"\u003eFoo\u003c/span\u003e =\u0026gt; \u003cspan class=\"type\"\u003eBar\u003c/span\u003e , _ }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// imports all the members except Foo. To exclude a member rename it to _\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// 引入对象 Fun 中的所有成员，但通过将 `Foo` 改名为 `_` 而忽略。\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e com.test.\u003cspan class=\"type\"\u003eFun\u003c/span\u003e.{ \u003cspan class=\"type\"\u003eFoo\u003c/span\u003e =\u0026gt; _ , _ }\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"模式匹配\"\u003e\u003ca href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"\u003e\u003c/a\u003e模式匹配\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.scala-lang.org/tour/pattern-matching.html\"\u003eScala 中的模式匹配\u003c/a\u003e和 C/C++ 或者 Java 中的 \u003ccode\u003eswitch\u003c/code\u003e - \u003ccode\u003ecase\u003c/code\u003e 语句类似。在 Scala 中的模式匹配中，下划线 \u003ccode\u003e_\u003c/code\u003e 是匹配任意内容的通配符。最基本的用法时，\u003ccode\u003e_\u003c/code\u003e 相当于 C/C++ 中的 \u003ccode\u003edefault\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e scala.util.\u003cspan class=\"type\"\u003eRandom\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eval\u003c/span\u003e x: \u003cspan class=\"type\"\u003eInt\u003c/span\u003e = \u003cspan class=\"type\"\u003eRandom\u003c/span\u003e.nextInt(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;zero\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"number\"\u003e2\u003c/span\u003e =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e _ =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34;other\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e更高阶的用法中，\u003ccode\u003e_\u003c/code\u003e 可以嵌套使用，这时候就远超出 \u003ccode\u003edefault\u003c/code\u003e case 的作用了。\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eexpr \u003cspan class=\"keyword\"\u003ematch\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"type\"\u003eList\u003c/span\u003e(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, _, _) =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34; a list with three element and the first element is 1 \u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"type\"\u003eList\u003c/span\u003e(_*)  =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34; a list with zero or more elements \u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e \u003cspan class=\"type\"\u003eMap\u003c/span\u003e[_, _] =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34; matches a map with any key type and any value type \u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003ecase\u003c/span\u003e _ =\u0026gt; \u003cspan class=\"string\"\u003e\u0026#34; others \u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"匿名函数的参数\"\u003e\u003ca href=\"#匿名函数的参数\" class=\"headerlink\" title=\"匿名函数的参数\"\u003e\u003c/a\u003e匿名函数的参数\u003c/h2\u003e\u003cp\u003eScala 和 Python、C++ 等语言一样，也有匿名函数的设定。下划线 \u003ccode\u003e_\u003c/code\u003e 可用作是匿名函数的参数的占位符，但对于每一个参数，只能用下划线占位一次。例如，在 Scala 中 \u003ccode\u003e2 * _\u003c/code\u003e 相当于 Python 中的 \u003ccode\u003elambda x: 2 * x\u003c/code\u003e 或者 C++ 中的 \u003ccode\u003e[](auto x) { return 2 * x; }\u003c/code\u003e；但对于 Python 中的 \u003ccode\u003elambda x: x * x\u003c/code\u003e 不能写成 Scala 中的 \u003ccode\u003e_ * _\u003c/code\u003e——因为在 Scala 中，\u003ccode\u003e_ * _\u003c/code\u003e 表示匿名函数接受 2 个参数，函数返回值是两个参数的乘积。又例如，下列 Scala 代码中的 \u003ccode\u003eprint(_)\u003c/code\u003e 相当于 \u003ccode\u003ex =\u0026gt; print(x)\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eList\u003c/span\u003e(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e).foreach(print(_))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下列 Scala 代码中的 \u003ccode\u003e_ + _\u003c/code\u003e 相当于 \u003ccode\u003e(x, y) =\u0026gt; x + y\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eList\u003c/span\u003e(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e).reduceLeft(_ + _)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"阻止函数意外调用\"\u003e\u003ca href=\"#阻止函数意外调用\" class=\"headerlink\" title=\"阻止函数意外调用\"\u003e\u003c/a\u003e阻止函数意外调用\u003c/h2\u003e\u003cp\u003e众所周知，Scala 是函数式语言。在 Scala 中，函数是一等公民，和普通变量一样可以赋值。但由于在 Scala 中函数调用时可省略括号，如果你打算将一个函数赋值给一个新的变量，则函数可能会被意外地调用而后将函数的返回值赋值。这种时候，我们需要在函数名之后加上 \u003ccode\u003e_\u003c/code\u003e 来阻止函数调用——类似 TeX 中的 \u003ccode\u003e\\relax\u003c/code\u003e 阻止继续执行的作用。\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eTest\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efoo\u003c/span\u003e \u003c/span\u003e= {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// some code\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eval\u003c/span\u003e bar = foo _\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"区分-getter-和-setter\"\u003e\u003ca href=\"#区分-getter-和-setter\" class=\"headerlink\" title=\"区分 getter 和 setter\"\u003e\u003c/a\u003e区分 getter 和 setter\u003c/h2\u003e\u003cp\u003e在 Scala 中，对象中的非私有成员会自动生成一对 getter 和 setter。对于私有成员，程序员也可以自己实现 getter 和 setter。这时候，我们需要在 setter 后加上下划线 \u003ccode\u003e_\u003c/code\u003e 来实现类似 C++ 中函数重载的效果。\u003c/p\u003e\n\u003cfigure class=\"highlight scala\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eTest\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e a = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eage\u003c/span\u003e \u003c/span\u003e= a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eage_\u003c/span\u003e \u003c/span\u003e= (n:\u003cspan class=\"type\"\u003eInt\u003c/span\u003e) = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    require(n \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    a = n\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eval\u003c/span\u003e t = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"type\"\u003eTest\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003et.age = \u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprintln(t.age)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e相当于 C++ 代码：\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title class_\"\u003eTest\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"type\"\u003eint\u003c/span\u003e a = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title\"\u003eage\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e a;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eage\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e a_)\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    a = a_;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTest t;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003et.\u003cspan class=\"built_in\"\u003eage\u003c/span\u003e(\u003cspan class=\"number\"\u003e5\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estd::cout \u0026lt;\u0026lt; t.\u003cspan class=\"built_in\"\u003eage\u003c/span\u003e() \u0026lt;\u0026lt; std::endl;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-10-24T02:42:27Z",
  "Author": "Liam Huang"
}