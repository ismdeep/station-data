{
  "Source": "liam.page",
  "Title": "Beamer frame 中的抄录环境",
  "Link": "https://liam.page/2019/08/26/verbatim-environments-and-frame-in-beamer/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e今天 \u003ccode\u003e@Butui Hu\u003c/code\u003e 在群里问了一个老问题：怎么在 Beamer 的 frame 当中使用 \u003ccode\u003eminted\u003c/code\u003e 环境？\u003c/p\u003e\n\u003cp\u003e这个问题的答案很简单：其实不论是 \u003ccode\u003eminted\u003c/code\u003e 还是 \u003ccode\u003elstlisting\u003c/code\u003e 还是基本的 \u003ccode\u003everbatim\u003c/code\u003e，这些「抄录」环境与 \u003ccode\u003eframe\u003c/code\u003e 联用时，统统都需要给 \u003ccode\u003eframe\u003c/code\u003e 加上 \u003ccode\u003efragile\u003c/code\u003e 参数，形如：\u003c/p\u003e\n\u003cfigure class=\"highlight tex\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\begin\u003c/span\u003e{frame}[fragile]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e% verbatim-like environment.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\end\u003c/span\u003e{frame}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但问题是，为啥事情会变成这个样子？这篇文章简单讨论一下。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"抄录环境是怎么实现的？\"\u003e\u003ca href=\"#抄录环境是怎么实现的？\" class=\"headerlink\" title=\"抄录环境是怎么实现的？\"\u003e\u003c/a\u003e抄录环境是怎么实现的？\u003c/h2\u003e\u003cp\u003e首先我们要解决的第一个问题是，类似 \u003ccode\u003everbatim\u003c/code\u003e 的抄录环境是怎么实现的？\u003c/p\u003e\n\u003cp\u003e基本上说，抄录环境有这么一些特征：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用等宽字符字族 \u003ccode\u003e\\ttfamily\u003c/code\u003e 排版内容；\u003c/li\u003e\n\u003cli\u003e排版所有空格，而非\u003ca href=\"/2018/01/31/TeX-by-Topic-the-Structure-of-the-TeX-processor/#%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5\"\u003e让输入处理器进入 S 状态忽略空格\u003c/a\u003e；\u003c/li\u003e\n\u003cli\u003e在每个回车处换行；\u003c/li\u003e\n\u003cli\u003e原样抄录\u003cstrong\u003e每一个\u003c/strong\u003e字符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当然，对于 \u003ccode\u003eminted\u003c/code\u003e 和 \u003ccode\u003elstlisting\u003c/code\u003e 之类的环境，还会有为特定字符、词组渲染颜色的功能。但这些都是「锦上添花」，我们要关注的核心还是上面四条。\u003c/p\u003e\n\u003cp\u003e很显然，抄录环境对于输入内容的处理方式与正常内容的处理方式有很大差异。比如，反斜线 \u003ccode\u003e\\\u003c/code\u003e 原本作为 TeX 默认的转义字符，此时却要原样输出。我们知道，TeX 中之所以有诸多特殊用途的字符（\u003ccode\u003e\\\u003c/code\u003e, \u003ccode\u003e{\u003c/code\u003e, \u003ccode\u003e}\u003c/code\u003e, \u003ccode\u003e$\u003c/code\u003e 等等），其原因在于\u003ca href=\"/2018/05/05/TeX-by-Topic-Category-Codes-and-Internal-States/\"\u003e输入处理器读入内容时，会为每个字符分配分类码\u003c/a\u003e。输入处理器会根据字符和字符的分类码，将输入内容处理成记号流（token stream），交由展开处理器继续处理。显然，抄录环境要改变 TeX 中特殊用途的字符的行为，就必须要改变他们的分类码。实际上，这些字符的分类码，在抄录环境中，都会被设置为 \u003ccode\u003e12\u003c/code\u003e（other）。\u003c/p\u003e\n\u003cp\u003e此外，为了恢复这些特殊用途的字符，TeX 要在合适的位置重新设置这些字符的分类码。对于 LaTeX 使用者来说，很显然这个「时机」就应该是 \u003ccode\u003e\\end{verbatim}\u003c/code\u003e 出现时了。这个论断说对也对，说不对也不完全对。考虑到，进入抄录环境之后，诸如 \u003ccode\u003e\\\u003c/code\u003e 的分类码已经改变，因此 \u003ccode\u003e\\end{verbatim}\u003c/code\u003e 不会像正常的「结束环境」的标志那样被 TeX 识别并处理。于是，为了达到预期效果，你必须把 \u003ccode\u003e\\end{verbatim}\u003c/code\u003e 单独成行，作为恢复分类码的标志。也就是说，\u003ccode\u003e\\end{verbatim}\u003c/code\u003e 在这里起到的是一个纯粹的标志作用，而不是通常意义上「结束环境」的作用。\u003c/p\u003e\n\u003cfigure class=\"highlight tex\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\begingroup\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\catcode\u003c/span\u003e `|=0 \u003cspan class=\"keyword\"\u003e\\catcode\u003c/span\u003e `[= 1 \u003cspan class=\"keyword\"\u003e\\catcode\u003c/span\u003e`]=2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e\\catcode\u003c/span\u003e `\u003cspan class=\"keyword\"\u003e\\{\u003c/span\u003e=12 \u003cspan class=\"keyword\"\u003e\\catcode\u003c/span\u003e `\u003cspan class=\"keyword\"\u003e\\}\u003c/span\u003e=12 \u003cspan class=\"keyword\"\u003e\\catcode\u003c/span\u003e`\u003cspan class=\"keyword\"\u003e\\\\\u003c/span\u003e=12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|gdef|@xverbatim\u003cspan class=\"params\"\u003e#1\u003c/span\u003e\u003cspan class=\"keyword\"\u003e\\end\u003c/span\u003e{verbatim}[\u003cspan class=\"params\"\u003e#1\u003c/span\u003e|end[verbatim]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|gdef|@sxverbatim\u003cspan class=\"params\"\u003e#1\u003c/span\u003e\u003cspan class=\"keyword\"\u003e\\end\u003c/span\u003e{verbatim*}[\u003cspan class=\"params\"\u003e#1\u003c/span\u003e|end[verbatim*]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|endgroup\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面这段代码是 LaTeX2e 中有关抄录环境结束的命令的定义。在由 \u003ccode\u003ebegingroup\u003c/code\u003e 和 \u003ccode\u003eendgroup\u003c/code\u003e 形成的 semi-group 分组中，我们将 \u003ccode\u003e|\u003c/code\u003e 定义为转义字符（\u003ccode\u003e0\u003c/code\u003e），\u003ccode\u003e[]\u003c/code\u003e 分别定义为分组开始和结束的字符（\u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e），然后把 \u003ccode\u003e{}\\\u003c/code\u003e 都定义为「其他字符」（\u003ccode\u003e12\u003c/code\u003e）。虽有，用 \u003ccode\u003e|gdef\u003c/code\u003e（相当于平时的 \u003ccode\u003e\\gdef\u003c/code\u003e）超出 semi-group 的范围，定义控制序列 \u003ccode\u003e@xverbatim\u003c/code\u003e，它接受 1 个参数，这个参数以 \u003ccode\u003e\\end{verbatim}\u003c/code\u003e 这串字符结尾，同时将它的内容替换成实际内容 \u003ccode\u003e#1\u003c/code\u003e，以及有实际含义的 \u003ccode\u003e|end[verbatim]\u003c/code\u003e（后者会被展开成 \u003ccode\u003e\\endverbatim\u003c/code\u003e 命令，负责真正的「结束环境」的工作）。\u003c/p\u003e\n\u003cp\u003e一顿操作猛如虎，最终还靠分类码。而最最重要的是我们得知道，\u003cstrong\u003e分类码是由输入处理器在读入文件时设置的\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"脆弱命令是怎么回事？\"\u003e\u003ca href=\"#脆弱命令是怎么回事？\" class=\"headerlink\" title=\"脆弱命令是怎么回事？\"\u003e\u003c/a\u003e脆弱命令是怎么回事？\u003c/h2\u003e\u003cp\u003e在输入处理器把文本流变成记号流之后，展开处理器和执行处理器就开始工作啦！通常来说，展开处理器会拼了老命将记号展开成更加底层的记号，直到不可展开，然后执行处理器开始执行各个不可展开的底层记号。\u003c/p\u003e\n\u003cp\u003e但某些情况下，这个流程会有问题。其中一个典型的例子，就是所谓的「移动参数」问题。\u003c/p\u003e\n\u003cp\u003e考虑 \u003ccode\u003e\\section{}\u003c/code\u003e 命令。它做四件事：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e编号自增 1\u003c/li\u003e\n\u003cli\u003e输出章节标题\u003c/li\u003e\n\u003cli\u003e处理目录（和 PDF 书签）\u003c/li\u003e\n\u003cli\u003e做页眉的章节标记\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e其中 (3) 依赖于将标题内容和编号写入 \u003ccode\u003e\u0026lt;jobname\u0026gt;.toc\u003c/code\u003e 文件，当 TeX 第二遍编译时，从 \u003ccode\u003e\u0026lt;jobname\u0026gt;.toc\u003c/code\u003e 文件读入内容再去排版目录。也就是说，此类命令的具体含义在两次编译过程中是不一样的，而具体它是什么含义（最终效果），要等排版完成之后才能确定。\u003c/p\u003e\n\u003cp\u003e问题在于：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTeX 在写文件时，会将宏——此处特别注意 \u003ccode\u003e\\section{}\u003c/code\u003e 参数中可能包含的宏——完全展开；\u003c/li\u003e\n\u003cli\u003e但完全展开写入文件之后，又要重新为 TeX 所读入，这时可能造成奇怪的错误。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e比方说，\u003ccode\u003e\\(\\)\u003c/code\u003e 展开后会包含很多带有 \u003ccode\u003e@\u003c/code\u003e 的内容，如果将这些内容写入文件，再重新读入，就会因为 \u003ccode\u003e@\u003c/code\u003e 的分类码是 \u003ccode\u003e12\u003c/code\u003e 而非 \u003ccode\u003e11\u003c/code\u003e 不能作为控制序列的一部分而报错。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e我们将提前展开和延后展开的最终效果不一样的命令，称之为脆弱命令（fragile commands）。与之对应的，就是健壮命令（robust commands）。\u003c/p\u003e\n\u003ch2 id=\"这和-frame-有什么关系？\"\u003e\u003ca href=\"#这和-frame-有什么关系？\" class=\"headerlink\" title=\"这和 frame 有什么关系？\"\u003e\u003c/a\u003e这和 \u003ccode\u003eframe\u003c/code\u003e 有什么关系？\u003c/h2\u003e\u003cp\u003e为此我们需要查看 Beamer 的文档。文档 12.9 节提到：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you wish to use a \u003ccode\u003e{verbatim}\u003c/code\u003e environment in a \u003ccode\u003eframe\u003c/code\u003e, you have to add the option \u003ccode\u003e[fragile]\u003c/code\u003e to the \u003ccode\u003e{frame}\u003c/code\u003e environment. In this case, \u003ccode\u003e[...]\u003c/code\u003e and the \u003ccode\u003e\\end{frame}\u003c/code\u003e must be alone on a single line. Using this option will cause the frame contents to be written to an external file and the read back.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这段提到了在 \u003ccode\u003eframe\u003c/code\u003e 当中使用抄录环境，必须制定 \u003ccode\u003efragile\u003c/code\u003e 参数。但仍然没有解释「为啥要用」。继续找到文档 8.1 节：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf a frame contains fragile text, different internal mechanisms are used to typeset the frame to ensure that inside the frame the character codes can be reset. The price of switching to another internal mechanism is that either you cannot use overlays or an external file needs to be written and read back (which is not always desirable).\u003c/p\u003e\n\u003cp\u003eIn detail, the following happens when this option is given for normal (pdf)LaTeX: The contents of the frame is scanned and then written to a special file named \u003ccode\u003e⟨jobname⟩.vrb\u003c/code\u003e or, if a label has been assigned to the frame, \u003ccode\u003e⟨jobname⟩.⟨current frame number⟩.vrb\u003c/code\u003e. Then, the frame is started anew and the content of this file is read back. Since, upon reading of a file, the character codes can be modified, this allows you to use both verbatim text and overlays.\u003c/p\u003e\n\u003cp\u003eTo determine the end of the frame, the following rule is used: The first occurence of a single line containing exactly \u003ccode\u003e\\end{⟨frame environment name⟩}\u003c/code\u003e ends the frame. The \u003ccode\u003e⟨environment name⟩\u003c/code\u003e is normally \u003ccode\u003eframe\u003c/code\u003e, but it can be changed using the \u003ccode\u003eenvironment\u003c/code\u003e option. This special rule is needed since the frame contents is, after all, not interpreted when it is gathered.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这样我们就明白了。\u003ccode\u003eframe\u003c/code\u003e 在某种程度上限制了环境内容对分类码的修改。因此，对于抄录环境这样需要修改分类码来实现目的的「脆弱内容」，我们要指定 \u003ccode\u003efragile\u003c/code\u003e 参数，然后 Beamer 会将这些内容写入到外部文件（为此 \u003ccode\u003eframe\u003c/code\u003e 环境变成了脆弱命令）。然后，在再次读入这些内容时，让输入处理器有机会正确处理分类码。如此一来，才能顾全这些「脆弱内容」的渲染，和 Beamer 的 \u003ccode\u003eoverlay\u003c/code\u003e 效果。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-08-26T04:19:34Z",
  "Author": "Liam Huang"
}