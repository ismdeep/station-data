{
  "Source": "liam.page",
  "Title": "程序员的自我修养（八）：使用 JProbe 调试 Linux 内核",
  "Link": "https://liam.page/2018/04/28/debug-in-Linux-kernel-jprobe/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e对于我这种普通程序员来说，Linux 内核是神秘而高贵的，轻易我们不敢去说内核相关的事情。不过，有时候逼不得已，也得硬着头皮对内核进行一些调试。（比如发现一些异常现象，怀疑是某个系统调用的异常行为在作祟时）为此，学习一些内核调试技术也是有必要的。\u003c/p\u003e\n\u003cp\u003e限于个人水平，此篇以操作指南为主，不涉及过多的理论知识——其实是我不懂。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"KProbes-介绍\"\u003e\u003ca href=\"#KProbes-介绍\" class=\"headerlink\" title=\"KProbes 介绍\"\u003e\u003c/a\u003eKProbes 介绍\u003c/h2\u003e\u003cp\u003eJProbe 是 KProbes 的一部分。因此，介绍 JProbe 大致应当从 KProbes 开始。\u003c/p\u003e\n\u003ch3 id=\"游戏的名目\"\u003e\u003ca href=\"#游戏的名目\" class=\"headerlink\" title=\"游戏的名目\"\u003e\u003c/a\u003e游戏的名目\u003c/h3\u003e\u003cblockquote\u003e\n\u003cp\u003eThe Name of the Game\u003cbr/\u003e--- Knuth, \u003cem\u003eThe TeXbook\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eKProbes 的名字由字母 K 和 Probes 组合而成。此处，字母 K 表示是「Kernel」的缩写，表示 Linux 内核；英文单词 probe 则是「探测」的意思。因此 KProbes 从名字来说，即是内核探测工具的意思。\u003c/p\u003e\n\u003ch3 id=\"KProbes-的背景\"\u003e\u003ca href=\"#KProbes-的背景\" class=\"headerlink\" title=\"KProbes 的背景\"\u003e\u003c/a\u003eKProbes 的背景\u003c/h3\u003e\u003cp\u003e在内核或者内核模块的调试过程中，了解一些函数是否被调用、何时被调用、调用后的执行情况如何、传入参数和返回值分别是什么是很自然的想法。为此，最简单的方法是修改这些函数的源码，在适当的位置打印相关日志。不过，这种方案虽然听起来简单，实际操作时候却不简单：需要重新编译内核。这算是很高的代价了。\u003c/p\u003e\n\u003cp\u003eKProbes 技术大体上就是为了解决这一需求而设计的。KProbes 允许用户\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e自行定义回调函数；\u003c/li\u003e\n\u003cli\u003e动态地插入或者移除探测点；\u003c/li\u003e\n\u003cli\u003e当内核执行到相关探测点时，KProbes 会调用用户注册的回调函数，待回调函数执行完毕后再继续正常的执行流程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e显而易见，利用 KProbes 的回调函数收集和打印相关信息比上述「简单的方法」代价要小得多了。\u003c/p\u003e\n\u003ch3 id=\"KProbes-的组成\"\u003e\u003ca href=\"#KProbes-的组成\" class=\"headerlink\" title=\"KProbes 的组成\"\u003e\u003c/a\u003eKProbes 的组成\u003c/h3\u003e\u003cp\u003eKProbes 提供了三种探测手段：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKProbe\u003c/li\u003e\n\u003cli\u003eJProbe\u003c/li\u003e\n\u003cli\u003eKRetProbe\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这里，KProbe 最基本也最强大，是后续两种探测手段的基础。KProbe 允许在任意位置放置探测点，例如可以在函数内部某条指令处放置探测点；并且提供了探测点调用前、调用后、访存出错三种情况的回调方式。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e调用前回调：\u003ccode\u003epre_handler\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e调用后回调：\u003ccode\u003epost_handler\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e访存出错回调：\u003ccode\u003efault_handler\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eJProbe 是本文的重点，它和 KRetProbe 都是在 KProbe 的基础上实现的。JProbe 的探测点在函数入口处，可用于收集函数的参数；KRetProbe 则顾名思义，其探测点在函数出口处，可用于收集函数的返回值。\u003c/p\u003e\n\u003ch3 id=\"硬件依赖\"\u003e\u003ca href=\"#硬件依赖\" class=\"headerlink\" title=\"硬件依赖\"\u003e\u003c/a\u003e硬件依赖\u003c/h3\u003e\u003cp\u003e从前面的描述不难看出，KProbes 这类技术一方面需要在某些时候让内核执行流程陷入到用户注册的回调函数中，另一方面需要单步执行被探测点的指令。因此，KProbes 对硬件平台是有依赖的。前者依赖 CPU 的异常处理，而后者依赖单步调试技术。\u003c/p\u003e\n\u003cp\u003e在目前主流的 i386, x86_64, arm 等平台上，KProbes 已经能较好地工作。在其它平台上，KProbes 则可能只实现了部分功能。具体则需要查看内核相关文档：\u003ccode\u003eDocumentation/kprobes.txt\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"KProbes-的一些限制\"\u003e\u003ca href=\"#KProbes-的一些限制\" class=\"headerlink\" title=\"KProbes 的一些限制\"\u003e\u003c/a\u003eKProbes 的一些限制\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eKProbes 允许在同一个位置注册多个 KProbe 探测点，但是不能注册多个 JProbe 探测点。\u003c/li\u003e\n\u003cli\u003eJProbe 不能以 JProbe 的回调函数或者 KProbe \u003ccode\u003epost_handler\u003c/code\u003e 作为探测点。\u003c/li\u003e\n\u003cli\u003eKProbes 可以于包括中断处理函数在内的几乎所有函数中注册探测点，但是不能在 KProbes 自身的相关函数中注册探测点（定义在 \u003ccode\u003ekernel/kprobes.c\u003c/code\u003e 以及 \u003ccode\u003earch/*/kernel/kprobes.c\u003c/code\u003e 中的函数），以及不能在 \u003ccode\u003edo_page_fault\u003c/code\u003e 和 \u003ccode\u003enotifier_call_chain\u003c/code\u003e 中注册探测点。\u003c/li\u003e\n\u003cli\u003eKProbes 的探测依赖函数调用，因此在内联函数或者可能被内联的函数中注册探测点可能失效。\u003c/li\u003e\n\u003cli\u003eKProbes 的各种回调函数会关闭内核抢占，甚至依平台不同关闭终端，因此在回调函数中不应调用会放弃当前 CPU 时间片的函数（例如互斥量相关函数）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"JProbe-使用方法\"\u003e\u003ca href=\"#JProbe-使用方法\" class=\"headerlink\" title=\"JProbe 使用方法\"\u003e\u003c/a\u003eJProbe 使用方法\u003c/h2\u003e\u003ch3 id=\"回调函数\"\u003e\u003ca href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"\u003e\u003c/a\u003e回调函数\u003c/h3\u003e\u003cp\u003e首先我们要明确，我们希望利用 JProbe 做什么，也就是 JProbe 的回调函数应该如何实现。\u003c/p\u003e\n\u003cp\u003e我们假设有这样一个任务：关注某一个进程在调用 Linux 虚拟文件系统的 write 操作时，打印其进程 ID (PID)，并打印参数中的偏移量。假设这个进程的名字是 \u003ccode\u003e\u0026#34;liam_test\u0026#34;\u003c/code\u003e。考虑到我们要在 \u003ccode\u003evfs_write\u003c/code\u003e 函数的入口处做探测，我们需要实现的回调函数其实是 \u003ccode\u003evfs_write\u003c/code\u003e 的一个代理，因此它的参数应当与 \u003ccode\u003evfs_write\u003c/code\u003e 完全一致。因此有如下实现。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003essize_t\u003c/span\u003e \u003cspan class=\"title function_\"\u003ejvfs_write\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e file *file, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e __user *buf, \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e count, \u003cspan class=\"type\"\u003eloff_t\u003c/span\u003e *pos)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!\u003cspan class=\"built_in\"\u003estrcmp\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;liam_test\u0026#34;\u003c/span\u003e, current-\u0026gt;comm)  \u003cspan class=\"comment\"\u003e/* we\u0026#39;re in the program `liam_test` */\u003c/span\u003e  ) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;pid: %u, pos: %lld.\\n\u0026#34;\u003c/span\u003e, current-\u0026gt;pid, *pos);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    jprobe_return();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意这里涉及了 \u003ccode\u003ejprobe_return()\u003c/code\u003e 这个 JProbe API。在回调函数执行完毕以后，必须调用该函数，如此执行流才会回到正常的执行路径中去。\u003c/p\u003e\n\u003ch3 id=\"JProbe-结构体\"\u003e\u003ca href=\"#JProbe-结构体\" class=\"headerlink\" title=\"JProbe 结构体\"\u003e\u003c/a\u003eJProbe 结构体\u003c/h3\u003e\u003cp\u003e实现好了回调函数之后，我们来看如何用 JProbe 结构体，将回调函数和被探测的函数关联起来。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * Special probe type that uses setjmp-longjmp type tricks to resume\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * execution at a specified entry with a matching prototype corresponding\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * to the probed function - a trick to enable arguments to become\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * accessible seamlessly by probe handling logic.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * Note:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * Because of the way compilers allocate stack space for local variables\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * etc upfront, regardless of sub-scopes within a function, this mirroring\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * principle currently works only for probes placed on function entry points.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ejprobe\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ekprobe\u003c/span\u003e \u003cspan class=\"title\"\u003ekp\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003evoid\u003c/span\u003e *entry;    \u003cspan class=\"comment\"\u003e/* probe handling code to jump to */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结构体本身非常简单，内里只有一个 \u003ccode\u003estruct kprobe\u003c/code\u003e 和一个 \u003ccode\u003evoid*\u003c/code\u003e 指针。前者说明 JProbe 是基于 KProbe 实现的，后者保存回调函数的入口。为此我们还需要查看 \u003ccode\u003estruct kprobe\u003c/code\u003e 的实现，具体每个成员的含义以注释的形式给出。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ekprobe\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* Hash 表，索引值为被探测点的地址 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ehlist_node\u003c/span\u003e \u003cspan class=\"title\"\u003ehlist\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 同一探测点上多个 kprobe 结构的链表 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003elist_head\u003c/span\u003e \u003cspan class=\"title\"\u003elist\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 记录当前 probe 被暂时放弃的计数器 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003elong\u003c/span\u003e nmissed;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 被探测点的地址 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ekprobe_opcode_t\u003c/span\u003e *addr;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 被探测函数的名字 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e *symbol_name;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 被探测点相对函数入口的偏移量 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e offset;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 被探测点即将被执行时的回调函数 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ekprobe_pre_handler_t\u003c/span\u003e pre_handler;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 被探测点执行完毕后的回调函数 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ekprobe_post_handler_t\u003c/span\u003e post_handler;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 在执行上述两个回调函数或者单步执行被探测点处指令时出现访存错误时的回调函数 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ekprobe_fault_handler_t\u003c/span\u003e fault_handler;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 在上述三个回调函数执行过程中，若触发断点指令，则调用该回调函数 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ekprobe_break_handler_t\u003c/span\u003e break_handler;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 断点处的原始指令 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003ekprobe_opcode_t\u003c/span\u003e opcode;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 上述原始指令的拷贝，被用于单步执行 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003earch_specific_insn\u003c/span\u003e \u003cspan class=\"title\"\u003eainsn\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e/* 该 probe 的状态标记 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    u32 flags;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因此，对于一个典型的 JProbe 任务（探测 \u003ccode\u003evfs_write\u003c/code\u003e 函数的传入参数），我们通常会设置这样的结构体。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ejprobe\u003c/span\u003e \u003cspan class=\"title\"\u003ewrite_stub\u003c/span\u003e =\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    .kp = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .symbol_name = \u003cspan class=\"string\"\u003e\u0026#34;vfs_write\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    .entry = jvfs_write,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样的结构体表示我们希望在 \u003ccode\u003evfs_write\u003c/code\u003e 这个符号（对应内核的 \u003ccode\u003evfs_write()\u003c/code\u003e 函数）的入口处进行探测，探测时的回调函数是 \u003ccode\u003ejvfs_write\u003c/code\u003e。注意，\u003ca href=\"/2017/02/05/pointer-in-C-and-Cpp/\"\u003e当函数名被用作值时，它等价于一个指针\u003c/a\u003e。这样，我们就通过 \u003ccode\u003ewrite_stub\u003c/code\u003e 这个 \u003ccode\u003estruct jprobe\u003c/code\u003e 将回调函数和被探测函数关联起来了。\u003c/p\u003e\n\u003ch3 id=\"注册与卸载\"\u003e\u003ca href=\"#注册与卸载\" class=\"headerlink\" title=\"注册与卸载\"\u003e\u003c/a\u003e注册与卸载\u003c/h3\u003e\u003cp\u003e接下来的工作，就是要向系统内核注册我们实现的 JProbe 了。为此，我们需要实现两个函数 \u003ccode\u003ejprobe_init\u003c/code\u003e 和 \u003ccode\u003ejprobe_exit\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e __init \u003cspan class=\"title function_\"\u003ejprobe_init\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e ret;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ret = register_jprobe(\u0026amp;write_stub);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (ret \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;register_jprobe failed, returned %d\\n\u0026#34;\u003c/span\u003e, ret);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e-1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;Planted jprobe at %p, handler addr %p\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       write_stub.kp.addr, write_stub.entry);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e __exit \u003cspan class=\"title function_\"\u003ejprobe_exit\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    unregister_jprobe(\u0026amp;write_stub);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;jprobe at %p unregistered\\n\u0026#34;\u003c/span\u003e, write_stub.kp.addr);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处 \u003ccode\u003ejprobe_init\u003c/code\u003e 和 \u003ccode\u003ejprobe_exit\u003c/code\u003e 两个函数的名字可以自由更改，重点是其中调用的 \u003ccode\u003eregister_jprobe\u003c/code\u003e 和 \u003ccode\u003eunregister_jprobe\u003c/code\u003e 两个 JProbe API。JProbe 中，注册与卸载相关的 API 有如下一些。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/* 向内核注册 JProbe 探测点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003eregister_jprobe\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e jprobe *jp)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/* 卸载 JProbe 探测点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eunregister_jprobe\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e jprobe *jp)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/* 向内核注册多个 JProbe 探测点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003eregister_jprobes\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e jprobe **jps, \u003cspan class=\"type\"\u003eint\u003c/span\u003e num)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/* 卸载多个 JProbe 探测点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003evoid\u003c/span\u003e \u003cspan class=\"title function_\"\u003eunregister_jprobes\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e jprobe **jps, \u003cspan class=\"type\"\u003eint\u003c/span\u003e num)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/* 暂停指定探测点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003edisable_jprobe\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e jprobe *jp)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/* 恢复指定探测点 */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003eint\u003c/span\u003e \u003cspan class=\"title function_\"\u003eenable_jprobe\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e jprobe *jp)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"实现为内核模块\"\u003e\u003ca href=\"#实现为内核模块\" class=\"headerlink\" title=\"实现为内核模块\"\u003e\u003c/a\u003e实现为内核模块\u003c/h3\u003e\u003cp\u003e为了将我们的代码插入内核，我们需要将 JProbe 探测点实现为内核模块。为此我们需要调用一些内核宏。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emodule_init(jprobe_init)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emodule_exit(jprobe_exit)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMODULE_AUTHOR(\u003cspan class=\"string\"\u003e\u0026#34;Liam Huang\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMODULE_DESCRIPTION(\u003cspan class=\"string\"\u003e\u0026#34;Print information of \\\u0026#34;vfs_write\\\u0026#34;, when current process command name is \\\u0026#34;liam_test\\\u0026#34;\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMODULE_LICENSE(\u003cspan class=\"string\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"编译内核模块\"\u003e\u003ca href=\"#编译内核模块\" class=\"headerlink\" title=\"编译内核模块\"\u003e\u003c/a\u003e编译内核模块\u003c/h3\u003e\u003cp\u003e完整的 \u003ccode\u003ewrite_stub.c\u003c/code\u003e 文件应当如下。\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;linux/module.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;linux/version.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;linux/kernel.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;linux/init.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e#\u003cspan class=\"keyword\"\u003einclude\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026lt;linux/kprobes.h\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003essize_t\u003c/span\u003e \u003cspan class=\"title function_\"\u003ejvfs_write\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e file *file, \u003cspan class=\"type\"\u003econst\u003c/span\u003e \u003cspan class=\"type\"\u003echar\u003c/span\u003e __user *buf, \u003cspan class=\"type\"\u003esize_t\u003c/span\u003e count, \u003cspan class=\"type\"\u003eloff_t\u003c/span\u003e *pos)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!\u003cspan class=\"built_in\"\u003estrcmp\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;liam_test\u0026#34;\u003c/span\u003e, current-\u0026gt;comm)  \u003cspan class=\"comment\"\u003e/* we\u0026#39;re in the program `liam_test` */\u003c/span\u003e  ) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;pid: %u, pos: %lld.\\n\u0026#34;\u003c/span\u003e, current-\u0026gt;pid, *pos);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    jprobe_return();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ejprobe\u003c/span\u003e \u003cspan class=\"title\"\u003ewrite_stub\u003c/span\u003e =\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    .kp = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .symbol_name = \u003cspan class=\"string\"\u003e\u0026#34;vfs_write\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    .entry = jvfs_write,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003eint\u003c/span\u003e __init \u003cspan class=\"title function_\"\u003ejprobe_init\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"type\"\u003eint\u003c/span\u003e ret;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ret = register_jprobe(\u0026amp;write_stub);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (ret \u0026lt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;register_jprobe failed, returned %d\\n\u0026#34;\u003c/span\u003e, ret);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e-1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;Planted jprobe at %p, handler addr %p\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                       write_stub.kp.addr, write_stub.entry);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"type\"\u003estatic\u003c/span\u003e \u003cspan class=\"type\"\u003evoid\u003c/span\u003e __exit \u003cspan class=\"title function_\"\u003ejprobe_exit\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"type\"\u003evoid\u003c/span\u003e)\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    unregister_jprobe(\u0026amp;write_stub);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    printk(KERN_INFO \u003cspan class=\"string\"\u003e\u0026#34;jprobe at %p unregistered\\n\u0026#34;\u003c/span\u003e, write_stub.kp.addr);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emodule_init(jprobe_init)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emodule_exit(jprobe_exit)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMODULE_AUTHOR(\u003cspan class=\"string\"\u003e\u0026#34;Liam Huang\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMODULE_DESCRIPTION(\u003cspan class=\"string\"\u003e\u0026#34;Print information of \\\u0026#34;vfs_write\\\u0026#34;, when current process command name is \\\u0026#34;liam_test\\\u0026#34;\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMODULE_LICENSE(\u003cspan class=\"string\"\u003e\u0026#34;GPL\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们编写如下 \u003ccode\u003eMakefile\u003c/code\u003e，以便调用 \u003ccode\u003emake\u003c/code\u003e 来将源码编译为内核模块。\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eobj-m +=write_stub.o\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eKDIR= /lib/modules/$(shell uname -r)/build\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eall:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        $(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclean:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           rm -rf *.o *.ko *.mod.* .c* .t*\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此时调用 \u003ccode\u003emake\u003c/code\u003e 即可编译得到内核模块 \u003ccode\u003ewrite_stub.ko\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ make\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emake -C /lib/modules/2.6.32-2.0.0.8-6/build SUBDIRS=/home/Yuuki/test/c modules\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#39;make[1]: Entering directory `/usr/src/kernels/2.6.32-220.7.1.el6.2.0.0.8.x86_64\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Building modules, stage 2.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  MODPOST 1 modules\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emake[1]: Leaving directory `/usr/src/kernels/2.6.32-220.7.1.el6.2.0.0.8.x86_64\u003cspan class=\"string\"\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e$ ls\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003edelay_stub.c  delay_stub.ko  delay_stub.ko.unsigned  delay_stub.mod.c  delay_stub.mod.o  delay_stub.o  Makefile\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"热插拔内核模块\"\u003e\u003ca href=\"#热插拔内核模块\" class=\"headerlink\" title=\"热插拔内核模块\"\u003e\u003c/a\u003e热插拔内核模块\u003c/h3\u003e\u003cp\u003eLinux 提供了 \u003ccode\u003einsmod\u003c/code\u003e 和 \u003ccode\u003ermmod\u003c/code\u003e 两个命令来热插拔内核模块。因此，在 \u003ccode\u003einsmod write_stub.ko\u003c/code\u003e 之后，名为 \u003ccode\u003e\u0026#34;liam_test\u0026#34;\u003c/code\u003e 的程序调用 \u003ccode\u003evfs_write\u003c/code\u003e 就会在内核信息中打印 PID 和相关参数了；而在 \u003ccode\u003ermmod write_stub.ko\u003c/code\u003e 之后，则可以将该模块从内核中卸载。\u003c/p\u003e\n\u003cfigure class=\"highlight bash\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ lsmod\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eModule                  Size  Used by\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etcp_diag                1041  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einet_diag               8703  1 tcp_diag\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efuse                   66726  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ sudo insmod write_stub.ko\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ lsmod\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eModule                  Size  Used by\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edelay_stub              1346  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etcp_diag                1041  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einet_diag               8703  1 tcp_diag\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efuse                   66726  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e需要注意的是，这种做法需要内核支持。具体来说，内核必须打开如下编译选项\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCONFIG_KPROBES\u003c/code\u003e: 以便支持 KProbes；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCONFIG_MODULES\u003c/code\u003e：以便支持模块动态加载；\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCONFIG_MODULE_UNLOAD\u003c/code\u003e：以便支持模块动态卸载。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你可以在 \u003ccode\u003e/boot/config-XXX\u003c/code\u003e 中找到内核编译选项的记录，以检查你的内核是否打开了上述选项。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2018-04-28T03:49:30Z",
  "Author": "Liam Huang"
}