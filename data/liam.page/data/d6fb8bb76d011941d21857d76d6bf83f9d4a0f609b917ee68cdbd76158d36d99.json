{
  "Source": "liam.page",
  "Title": "使用 TRANSFORM 在 Hive 中调用用户自定义的脚本",
  "Link": "https://liam.page/2020/05/11/TRANSFORM-in-Hive/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e在实际工作一个典型的机器学习任务中，我们在线上和线下都要对特征数据进行处理。线上处理的目的是为了推理预测，线下处理的目的则是为了准备训练数据。显然，因为处理区分线上线下，数据一致性就会成为非常关键的问题。\u003c/p\u003e\n\u003cp\u003e然而，数据一致性是挺烫手的山芋。因为，如果尝试在线上线下先后两次实现同样的功能，不论如何小心，都有出错的可能。更不用说，如果使用不同语言，那对于数据处理上的些微不同最终都可能破坏数据一致性。\u003c/p\u003e\n\u003cp\u003e因此，保证数据一致性最好的办法就是用一份代码在两个地方干同样的事情。我们线上服务是用 C++ 编写的，因此我们可以将特征 ETL 抽象成单独的模块，分别链接到线上服务以及离线特征处理程序中。这样，二者对于特征的 ETL 的行为就完全一致了。\u003c/p\u003e\n\u003cp\u003e剩下的问题就是：离线数据通过 Kafka 落在 Hive 表当中，我们需要在 Hive 处理数据的过程中，嵌入我们自己编写的特征处理程序。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003e经过简单的检索，我发现 Hive SQL 的 \u003ccode\u003eTRANSFORM\u003c/code\u003e 语法可以很方便地完成这一工作。\u003c/p\u003e\n\u003cp\u003e首先，我们需要使用 \u003ccode\u003eADD FILE\u003c/code\u003e 将可执行程序以及可能的其他资源文件加入 Hive 豪华套餐。\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eADD\u003c/span\u003e FILE hdfs:\u003cspan class=\"operator\"\u003e/\u003c/span\u003e\u003cspan class=\"operator\"\u003e/\u003c/span\u003epath\u003cspan class=\"operator\"\u003e/\u003c/span\u003e\u003cspan class=\"keyword\"\u003eto\u003c/span\u003e\u003cspan class=\"operator\"\u003e/\u003c/span\u003efeature_etl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eADD\u003c/span\u003e FILE hdfs:\u003cspan class=\"operator\"\u003e/\u003c/span\u003e\u003cspan class=\"operator\"\u003e/\u003c/span\u003epath\u003cspan class=\"operator\"\u003e/\u003c/span\u003e\u003cspan class=\"keyword\"\u003eto\u003c/span\u003e\u003cspan class=\"operator\"\u003e/\u003c/span\u003efeature_etl.cfg;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e而后，我们就可以将 \u003ccode\u003eTRANSFORM\u003c/code\u003e 语句嵌入在 \u003ccode\u003eSELECT\u003c/code\u003e 子句当中了：\u003c/p\u003e\n\u003cfigure class=\"highlight sql\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eSELECT\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  TRANSFORM (column1, column2)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eUSING\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;./feature_etl --config_file=./feature_etl.cfg\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eAS\u003c/span\u003e (out_column1 STRING, out_column2 \u003cspan class=\"type\"\u003eBIGINT\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eFROM\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  db_name.tb_name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eWHERE\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  conds;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecolumn1\u003c/code\u003e 和 \u003ccode\u003ecolumn2\u003c/code\u003e 是原始表 \u003ccode\u003edb_name.tb_name\u003c/code\u003e 中的列名字。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTRANSFORM\u003c/code\u003e 子句表示 Hive 会将 \u003ccode\u003ecolumn1\u003c/code\u003e 和 \u003ccode\u003ecolumn2\u003c/code\u003e 以制表符 \u003ccode\u003e\\t\u003c/code\u003e 分割拼成一个字符串传给用户指定的程序。\u003cul\u003e\n\u003cli\u003e注意，如果 \u003ccode\u003ecolumn1\u003c/code\u003e 或者 \u003ccode\u003ecolumn2\u003c/code\u003e 当中包含制表符，则用户需要自行处理，Hive 对此不负责。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUSING\u003c/code\u003e 子句指示使用什么命令来处理输入。这里我们用 \u003ccode\u003e./feature_etl --config_file=./feature_etl.cfg\u003c/code\u003e。\u003cul\u003e\n\u003cli\u003e注意，使用 \u003ccode\u003eADD FILE\u003c/code\u003e 导入的文件就在「当前目录」中。\u003c/li\u003e\n\u003cli\u003e另外，Hive 会像 Hadoop Streaming 任务那样，将数据通过标准输入传给用户指定的程序，并从标准输出读取输出。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAS\u003c/code\u003e 子句指示用户程序的输出都有哪些列。\u003cul\u003e\n\u003cli\u003e注意，用户程序的输出也应当是以制表符 \u003ccode\u003e\\t\u003c/code\u003e 分割拼成的字符串；如果输出字符串中包含换行符，则会被 Hive 视作是输出了多条数据（一行变多行）。\u003c/li\u003e\n\u003cli\u003e另外，\u003ccode\u003eAS\u003c/code\u003e 子句当中可以指定列数据的类型，若不指定则默认都是字符串。Hive 会和往常一样去解析数据类型。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e另外，Hive 也提供了 \u003ccode\u003eMAP\u003c/code\u003e 和 \u003ccode\u003eREDUCE\u003c/code\u003e 子句，同样可以使用用户自定程序处理数据。但是 \u003ccode\u003eMAP\u003c/code\u003e 和 \u003ccode\u003eREDUCE\u003c/code\u003e 其实只是 \u003ccode\u003eTRANSFORM\u003c/code\u003e 的别称，使用 \u003ccode\u003eMAP\u003c/code\u003e 并不一定会在 MapReduce 的 Map 阶段进行处理，使用 \u003ccode\u003eREDUCE\u003c/code\u003e 也是一样。因此，使用这两个子句难免有误导之嫌，不如不用，统一转向 \u003ccode\u003eTRANSFORM\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTRANSFORM\u003c/code\u003e 子句还有其他一些细节，可参考 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Transform\"\u003eApache 的 wiki 页\u003c/a\u003e。\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2020-05-11T14:57:50Z",
  "Author": "Liam Huang"
}