{
  "Source": "liam.page",
  "Title": "在 C++ 中类的构造函数中使用 this 指针",
  "Link": "https://liam.page/2021/03/17/using-this-pointer-in-ctor/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e遇见一个有趣的问题。\u003c/p\u003e\n\u003cp\u003eC++ 里面，在类的 constructor 当中使用 this 指针访问成员，是否是安全的？在哪些情况下安全？在哪些情况下不安全？\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003cp\u003eAo Shen 给了一个\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://isocpp.org/wiki/faq/ctors#using-this-in-ctors\"\u003e标准答案\u003c/a\u003e，跟我之前的认知一致：只要对类内成员初始化顺序，以及对基类子类初始化顺序熟悉，就很容易理解了。\u003c/p\u003e\n\u003cp\u003e因为类内成员初始化顺序和类内成员声明顺序一致，基类总是在子类之前初始化。所以\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在父类初始化列表当中，使用 \u003ccode\u003ethis\u003c/code\u003e 引用更早声明的变量初始化是安全的。\u003c/li\u003e\n\u003cli\u003e在父类构造函数体当中，使用 \u003ccode\u003ethis\u003c/code\u003e 指针引用类内成员是安全的（不包括子类成员）。\u003c/li\u003e\n\u003cli\u003e在父类构造函数体当中，down-cast \u003ccode\u003ethis\u003c/code\u003e 指针为子类指针，这一行为本身是安全的；但是使用 down-casted 指针访问子类成员是不安全的。\u003c/li\u003e\n\u003cli\u003e在子类初始化列表当中，使用 \u003ccode\u003ethis\u003c/code\u003e 指针引用父类成员总是安全的。\u003c/li\u003e\n\u003cli\u003e访问函数的情况，则看对应的函数访问的类内成员是否已经初始化。\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-03-17T03:44:57Z",
  "Author": "Liam Huang"
}