{
  "Source": "liam.page",
  "Title": "Python 中的黑暗角落（三）：模块与包",
  "Link": "https://liam.page/2017/07/23/modules-and-packages-of-python/",
  "Content": "\u003cdiv class=\"post-body\" itemprop=\"articleBody\"\u003e\n\n      \n        \u003cp\u003e如果你用过 Python，那么你一定用过 \u003ccode\u003eimport\u003c/code\u003e 关键字加载过各式各样的模块。但你是否熟悉 Python 中的模块与包的概念呢？或者，以下几个问题，你是否有明确的答案？\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e什么是模块？什么又是包？\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efrom matplotlib.ticker import Formatter, FixedLocator\u003c/code\u003e 中的 \u003ccode\u003ematplotlib\u003c/code\u003e 和 \u003ccode\u003eticker\u003c/code\u003e 分别是什么？中间的句点是什么意思？\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efrom matplotlib.pyplot import *\u003c/code\u003e 中，\u003ccode\u003eimport *\u003c/code\u003e 的背后会发生什么？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e鲁迅先生说：「于无声处听惊雷」，讲的是平淡时却有令人惊奇、意外的事情。\u003ccode\u003eimport\u003c/code\u003e 相关的模块、包的概念也是如此。如果你对上面几个问题存有疑问，那么这篇就是为你而作的。\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"模块\"\u003e\u003ca href=\"#模块\" class=\"headerlink\" title=\"模块\"\u003e\u003c/a\u003e模块\u003c/h2\u003e\u003ch3 id=\"为什么要有模块\"\u003e\u003ca href=\"#为什么要有模块\" class=\"headerlink\" title=\"为什么要有模块\"\u003e\u003c/a\u003e为什么要有模块\u003c/h3\u003e\u003cp\u003e众所周知，Python 有一个交互式的解释器。在解释器中，你可以使用 Python 的所有功能。但是，解释器是一次性的。也就是说，如果你关掉解释器，那么先前定义、运行的一切东西，都会丢失不见。另一方面，在解释器中输入代码是一件很麻烦的事情；这是因为在解释器中复用代码比较困难。\u003c/p\u003e\n\u003cp\u003e为此，人们会把相对稳定、篇幅较长的代码保存在一个纯文本文件中。一般来说，我们把这样扩展名为 \u003ccode\u003e.py\u003c/code\u003e 的文件称为 Python 脚本。为了提高代码复用率，我们可以把一组相关的 Python 相关的定义、声明保存在同一个 \u003ccode\u003e.py\u003c/code\u003e 文件中。此时，这个 Python 脚本就是一个 Python 模块（Module）。我们可以在解释器中，或者在其他 Python 脚本中，通过 \u003ccode\u003eimport\u003c/code\u003e 载入定义好的 Python 模块。\u003c/p\u003e\n\u003ch3 id=\"模块的识别\"\u003e\u003ca href=\"#模块的识别\" class=\"headerlink\" title=\"模块的识别\"\u003e\u003c/a\u003e模块的识别\u003c/h3\u003e\u003cp\u003e和 Python 中的其它对象一样，Python 也为模块定义了一些形如 \u003ccode\u003e__foo__\u003c/code\u003e 的变量。对于模块来说，最重要的就是它的名字 \u003ccode\u003e__name__\u003c/code\u003e 了。每当 Python 执行脚本，它就会为该脚本赋予一个名字。对于「主程序」来说，这一脚本的 \u003ccode\u003e__name__\u003c/code\u003e 被定义为 \u003ccode\u003e\u0026#34;__main__\u0026#34;\u003c/code\u003e；对于被 \u003ccode\u003eimport\u003c/code\u003e 进主程序的模块来说，这一脚本的 \u003ccode\u003e__name__\u003c/code\u003e 被定义为脚本的文件名（base filename）。因此，我们可以用 \u003ccode\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/code\u003e 在模块代码中定义一些测试代码。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003efibonacci.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003efib_yield\u003c/span\u003e(\u003cspan class=\"params\"\u003en\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    a, b = \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e b \u0026lt; n:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        a, b = b, a+b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003efib\u003c/span\u003e(\u003cspan class=\"params\"\u003en\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e num \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e fib_yield(n):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(num)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fib(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们将其保存为 \u003ccode\u003efibonacci.py\u003c/code\u003e，而后在 Python 解释器中 \u003ccode\u003eimport\u003c/code\u003e 它。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e1\u003c/span\u003e]: \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e fibonacci\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e2\u003c/span\u003e]: \u003cspan class=\"built_in\"\u003edir\u003c/span\u003e(fibonacci)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eOut[\u003cspan class=\"number\"\u003e2\u003c/span\u003e]:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"string\"\u003e\u0026#39;__builtins__\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"string\"\u003e\u0026#39;__doc__\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"string\"\u003e\u0026#39;__file__\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"string\"\u003e\u0026#39;__name__\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"string\"\u003e\u0026#39;__package__\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"string\"\u003e\u0026#39;fib\u0026#39;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"string\"\u003e\u0026#39;fib_yield\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e3\u003c/span\u003e]: \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(fibonacci.__name__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efibonacci\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e4\u003c/span\u003e]: fibonacci.fib(\u003cspan class=\"number\"\u003e5\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e5\u003c/span\u003e]: \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e num \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e fibonacci.fib_yield(\u003cspan class=\"number\"\u003e5\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...:     \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(num)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以观察到，\u003ccode\u003efibonacci.py\u003c/code\u003e 在作为模块引入时，\u003ccode\u003efibonacci.__name__\u003c/code\u003e 被设置为文件名 \u003ccode\u003e\u0026#34;fibonacci\u0026#34;\u003c/code\u003e。但若在命令行直接执行 \u003ccode\u003epython fibonacci.py\u003c/code\u003e，则 \u003ccode\u003eif\u003c/code\u003e 语句块会被执行，此时 \u003ccode\u003e__name__\u003c/code\u003e 是 \u003ccode\u003e\u0026#34;__main__\u0026#34;\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"模块的内部变量和初始化\"\u003e\u003ca href=\"#模块的内部变量和初始化\" class=\"headerlink\" title=\"模块的内部变量和初始化\"\u003e\u003c/a\u003e模块的内部变量和初始化\u003c/h3\u003e\u003cp\u003ePython 为每个模块维护了单独的符号表，因此可以实现类似 C++ 中名字空间（namespace）的功能。Python 模块中的函数，可以使用模块的内部变量，完成相关的初始化操作；同时，\u003ccode\u003eimport\u003c/code\u003e 模块的时候，也不用担心这些模块内部变量与用户自定义的变量同名冲突。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003emodule_var.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efoo = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title function_\"\u003eshow\u003c/span\u003e():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(foo)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    show()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处我们在模块 \u003ccode\u003emodule_var\u003c/code\u003e 内部定义了内部变量 \u003ccode\u003efoo\u003c/code\u003e，并且在函数 \u003ccode\u003eshow\u003c/code\u003e 中引用了它。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e7\u003c/span\u003e]: \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e module_var\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...: foo = \u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...: \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(foo)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...: \u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e(module_var.foo)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...: module_var.show()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ...:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e值得一提的是，模块的初始化操作（这里指 \u003ccode\u003efoo = 0\u003c/code\u003e 这条语句），仅只在 Python 解释器第一次处理该模块的时候执行。也就是说，如果同一个模块被多次 \u003ccode\u003eimport\u003c/code\u003e，它只会执行一次初始化。\u003c/p\u003e\n\u003ch3 id=\"from-import\"\u003e\u003ca href=\"#from-import\" class=\"headerlink\" title=\"from ... import ...\"\u003e\u003c/a\u003e\u003ccode\u003efrom ... import ...\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e模块提供了类似名字空间的限制，不过 Python 也允许从模块中导入指定的符号（变量、函数、类等）到当前模块。导入后，这些符号就可以直接使用，而不需要前缀模块名。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e8\u003c/span\u003e]: \u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e fibonacci \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e fib_yield, fib\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e9\u003c/span\u003e]: fib(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e8\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e值得一提的是，被导入的符号，如果引用了模块内部的变量，那么在导入之后也依然会使用模块内的变量，而不是当前环境中的同名变量。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e11\u003c/span\u003e]: \u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e module_var \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e show\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e12\u003c/span\u003e]: foo = \u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e13\u003c/span\u003e]: show()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e也有更粗暴的方式，导入模块内的所有公开符号（没有前缀 \u003ccode\u003e_\u003c/code\u003e 的那些）。不过，一般来说，除了实验、排查，不建议这样做。因为，通常你不知道模块定义了哪些符号、是否与当前环境有重名的符号。一旦有重名，那么，这样粗暴地导入模块内所有符号，就会覆盖掉当前环境的版本。从而造成难以排查的错误。\u003c/p\u003e\n\u003ch3 id=\"模块搜索路径\"\u003e\u003ca href=\"#模块搜索路径\" class=\"headerlink\" title=\"模块搜索路径\"\u003e\u003c/a\u003e模块搜索路径\u003c/h3\u003e\u003cp\u003e之前我们都在讨论模块的好处，但是忽略了一个问题：Python 怎样知道从何处找到模块文件？\u003c/p\u003e\n\u003cp\u003e如果你熟悉命令行，那么这个问题对你来说就不难理解。在命令行中执行的任何命令，实际上背后都对应了一个可执行文件。命令行解释器（比如 cmd, bash）会从一个全局的环境变量 \u003ccode\u003ePATH\u003c/code\u003e 中读取一个有序的列表。这个列表包含了一系列的路径，而命令行解释器，会依次在这些路径里，搜索需要的可执行文件。\u003c/p\u003e\n\u003cp\u003ePython 搜寻模块文件，也遵循了类似的思路。比如，用户在 Python 中尝试导入 \u003ccode\u003eimport foobar\u003c/code\u003e，那么\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e首先，Python 会在内建模块中搜寻 \u003ccode\u003efoobar\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e若未找到，则 Python 会在当前工作路径（当前脚本所在路径，或者执行 Python 解释器的路径）中搜寻 \u003ccode\u003efoobar\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e若仍未找到，则 Python 会在环境变量 \u003ccode\u003ePYTHONPATH\u003c/code\u003e 中指示的路径中搜寻 \u003ccode\u003efoobar\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e若依旧未能找到，则 Python 会在安装时指定的路径中搜寻 \u003ccode\u003efoobar\u003c/code\u003e；\u003c/li\u003e\n\u003cli\u003e若仍旧失败，则 Python 会报错，提示找不到 \u003ccode\u003efoobar\u003c/code\u003e 这个模块。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eIn [\u003cspan class=\"number\"\u003e14\u003c/span\u003e]: \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e foobar\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e---------------------------------------------------------------------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eImportError                               Traceback (most recent call last)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;ipython-\u003cspan class=\"built_in\"\u003einput\u003c/span\u003e-\u003cspan class=\"number\"\u003e14\u003c/span\u003e-909badd622c0\u0026gt; \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e----\u0026gt; \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e foobar\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eImportError: No module named foobar\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"pyc-文件\"\u003e\u003ca href=\"#pyc-文件\" class=\"headerlink\" title=\"pyc 文件\"\u003e\u003c/a\u003e\u003ccode\u003epyc\u003c/code\u003e 文件\u003c/h3\u003e\u003cp\u003e和 LaTeX 中遇到的问题一样：装载大量文本文件是很慢的。因此 Python 也采用了类似 LaTeX 的解决方案：将模块编译成容易装载的文件，并保存起来（相当于 LaTeX 中的 dump 格式文件 \u003ccode\u003e.fmt\u003c/code\u003e）。这些编译好并保存起来的文件，有后缀名 \u003ccode\u003e.pyc\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e当 Python 编译好模块之后，下次载入时，Python 就会读取相应的 \u003ccode\u003e.pyc\u003c/code\u003e 文件，而不是 \u003ccode\u003e.py\u003c/code\u003e 文件。而装载 \u003ccode\u003e.pyc\u003c/code\u003e 文件会比装载 \u003ccode\u003e.py\u003c/code\u003e 文件更快。\u003c/p\u003e\n\u003cp\u003e值得一提的是，对于 \u003ccode\u003e.pyc\u003c/code\u003e，很多人一直有误解。事实上，从运行的角度，装载 \u003ccode\u003e.pyc\u003c/code\u003e 并不比装载 \u003ccode\u003e.py\u003c/code\u003e 文件更快。此处的加速，仅只在装载模块的过程中起作用。因此 \u003ccode\u003e.pyc\u003c/code\u003e 中的 \u003ccode\u003eC\u003c/code\u003e 更多地可以理解为 cache。\u003c/p\u003e\n\u003ch2 id=\"包\"\u003e\u003ca href=\"#包\" class=\"headerlink\" title=\"包\"\u003e\u003c/a\u003e包\u003c/h2\u003e\u003cp\u003e包（package）是 Python 中对模块的更高一级的抽象。简单来说，Python 允许用户\u003cstrong\u003e把目录当成模块看待\u003c/strong\u003e。这样一来，目录中的不同模块文件，就变成了「包」里面的子模块。此外，包目录下还可以有子目录，这些子目录也可以是 Python 包。这种分层，对模块识别、管理，都是非常有好处的。特别地，对于一些大型 Python 工具包，内里可能有成百上千个不同功能的模块。若是逐个模块发布，那简直成了灾难。\u003c/p\u003e\n\u003cp\u003e科学计算领域，SciPy, NumPy, Matplotlib 等第三方工具，都是用包的形式发布的。\u003c/p\u003e\n\u003ch3 id=\"目录结构\"\u003e\u003ca href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"\u003e\u003c/a\u003e目录结构\u003c/h3\u003e\u003cp\u003ePython 要求每一个「包」目录下，都必须有一个名为 \u003ccode\u003e__init__.py\u003c/code\u003e 的文件。从这个文件的名字上看，首先它有 \u003ccode\u003e__\u003c/code\u003e 作为前后缀，我们就知道，这个文件肯定是 Python 内部用来做某种识别用的；其次，它有 \u003ccode\u003einit\u003c/code\u003e，我们知道它一定和初始化有关；最后，它有 \u003ccode\u003e.py\u003c/code\u003e 作为后缀名，因此它也是一个 Python 模块，可以完成一些特定的工作。\u003c/p\u003e\n\u003cp\u003e现在假设你想编写一个 Python 工具包，用来处理图片，它可能由多个 Python 模块组成。于是你会考虑把它做成一个 Python 包，内部按照功能分成若干子包，再继续往下分成不同模块去实现。比如会有这样的目录结构。\u003c/p\u003e\n\u003cfigure class=\"highlight plaintext\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epicture/                        Top-level package\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      __init__.py               Initialize the picture package\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      formats/                  Subpackage for file format conversions\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              __init__.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              jpgread.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              jpgwrite.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              pngread.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              pngwrite.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              bmpread.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              bmpwrite.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      filters/                  Subpackage for filters\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              __init__.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              boxblur.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              gaussblur.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              sharpen.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此处 \u003ccode\u003epicture\u003c/code\u003e 目录下有 \u003ccode\u003e__init__.py\u003c/code\u003e，因此 Python 会将其作为一个 Python 包；类似地，子目录 \u003ccode\u003eformats\u003c/code\u003e 和 \u003ccode\u003efilters\u003c/code\u003e 就成了 \u003ccode\u003epicture\u003c/code\u003e 下的子包。这里，子包的划分以功能为准。\u003ccode\u003eformats\u003c/code\u003e 下的模块，设计用于处理不同格式的图片文件的读写；而 \u003ccode\u003efilters\u003c/code\u003e 下的模块，则被设计用于实现各种滤镜效果。\u003c/p\u003e\n\u003ch3 id=\"使用-Python-包\"\u003e\u003ca href=\"#使用-Python-包\" class=\"headerlink\" title=\"使用 Python 包\"\u003e\u003c/a\u003e使用 Python 包\u003c/h3\u003e\u003cp\u003ePython 包的使用和模块的使用类似，是很自然的方式。以我们的 \u003ccode\u003epicture\u003c/code\u003e 包为例，若你想使用其中具体的模块，可以这样做。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e picutre.filters.gaussblur\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如此，你就导入了 \u003ccode\u003epicture\u003c/code\u003e 包中 \u003ccode\u003efilters\u003c/code\u003e 子包中的 \u003ccode\u003egaussblur\u003c/code\u003e 模块，你就能使用高斯模糊模块提供的功能了。具体使用方式，和使用模块也保持一致。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epicture.filters.gaussblur.gaussblur_filter(\u003cspan class=\"built_in\"\u003einput\u003c/span\u003e, output)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这看起来很繁琐，因此你可能会喜欢用 \u003ccode\u003efrom ... import ...\u003c/code\u003e 语句，脱去过多的名字限制。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e picture.filters \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e gaussblur\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样一来，你就可以直接按如下方式使用高斯模糊这一滤镜了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003egaussblur.gaussblur_filter(\u003cspan class=\"built_in\"\u003einput\u003c/span\u003e, output)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"init-py\"\u003e\u003ca href=\"#init-py\" class=\"headerlink\" title=\"__init__.py\"\u003e\u003c/a\u003e\u003ccode\u003e__init__.py\u003c/code\u003e\u003c/h3\u003e\u003cp\u003e之前简单地介绍了 \u003ccode\u003e__init__.py\u003c/code\u003e 这个特殊的文件，但未展开。这里我们展开详说。\u003c/p\u003e\n\u003cp\u003e首先的问题是，为什么要设计 \u003ccode\u003e__init__.py\u003c/code\u003e，而不是自动地把任何一个目录都当成是 Python 包？这主要是为了防止重名造成的问题。比如，很可能用户在目录下新建了一个子目录，名为 \u003ccode\u003ecollections\u003c/code\u003e；但 Python 有内建的同名模块。若不加任何限制地，将子目录当做是 Python 包，那么，\u003ccode\u003eimport collections\u003c/code\u003e 就会引入这个 Python 包。而这样的行为，可能不是用户预期的。从这个意义上说，设计 \u003ccode\u003e__init__.py\u003c/code\u003e 是一种保护措施。\u003c/p\u003e\n\u003cp\u003e接下来的问题是，\u003ccode\u003e__init__.py\u003c/code\u003e 具体还有什么用？\u003c/p\u003e\n\u003cp\u003e首先来说，\u003ccode\u003e__init__.py\u003c/code\u003e 可以执行一些初始化的操作。这是因为，\u003ccode\u003e__init__.py\u003c/code\u003e 作为模块文件，会在相应的 Python 包被引入时首先引入。这就是说，\u003ccode\u003eimport picture\u003c/code\u003e 相当于是 \u003ccode\u003eimport picture.__init__\u003c/code\u003e。因此，\u003ccode\u003e__init__.py\u003c/code\u003e 中可以保留一些初始化的代码——比如引入依赖的其他 Python 模块。\u003c/p\u003e\n\u003cp\u003e其次，细心的你可能发现，上一小节中，我们没有介绍对 Python 包的 \u003ccode\u003efrom picture import *\u003c/code\u003e 的用法。这是因为，从一个包中导入所有内容，这一行为是不明确的；必须要由包的作者指定。我们可以在 \u003ccode\u003e__init__.py\u003c/code\u003e 中定义名为 \u003ccode\u003e__all__\u003c/code\u003e 的 Python 列表。这样一来，就能使用 \u003ccode\u003efrom picture import *\u003c/code\u003e 了。\u003c/p\u003e\n\u003cp\u003e具体来说，我们可以在 \u003ccode\u003epicture/__init__.py\u003c/code\u003e 中做如下定义。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003e__init__.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e collections          \u003cspan class=\"comment\"\u003e# import the built-in package\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__all__ = [\u003cspan class=\"string\"\u003e\u0026#34;formats\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;filters\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此时，若我们在用户模块中 \u003ccode\u003efrom picture import *\u003c/code\u003e，则首先会引入 Python 内建的 \u003ccode\u003ecollections\u003c/code\u003e 模块，而后引入 \u003ccode\u003epicture.formats\u003c/code\u003e 和 \u003ccode\u003epicture.filters\u003c/code\u003e 这两个 Python 子包了。\u003c/p\u003e\n\u003ch3 id=\"在包内使用相对层级引用其他模块\"\u003e\u003ca href=\"#在包内使用相对层级引用其他模块\" class=\"headerlink\" title=\"在包内使用相对层级引用其他模块\"\u003e\u003c/a\u003e在包内使用相对层级引用其他模块\u003c/h3\u003e\u003cp\u003e细心的你应该已经发现，在引入 Python 包中的模块时，我们用句点 \u003ccode\u003e.\u003c/code\u003e 代替了斜线（或者反斜线）来标记路径的层级（实际上是包和模块的层级）。在 Python 包的内部，我们也可以使用类似相对路径的方式，使用相对层级来简化包内模块的互相引用。\u003c/p\u003e\n\u003cp\u003e比如，在 \u003ccode\u003egaussblur.py\u003c/code\u003e 中，你可以通过以下四种方式，引入 \u003ccode\u003eboxblur.py\u003c/code\u003e，而它们的效果是一样的。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003cfigcaption\u003e\u003cspan\u003egaussblur.py\u003c/span\u003e\u003c/figcaption\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e boxblur\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e . \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e boxblur\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e ..filters \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e boxblur\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e .. \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e filters.boxblur \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e boxblur\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n    \u003c/div\u003e",
  "Date": "2017-07-22T17:00:49Z",
  "Author": "Liam Huang"
}