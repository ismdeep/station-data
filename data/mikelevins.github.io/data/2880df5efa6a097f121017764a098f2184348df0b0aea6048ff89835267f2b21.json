{
  "Source": "mikelevins.github.io",
  "Title": "Art is not optional",
  "Link": "https://mikelevins.github.io/posts/2021-01-04-art-is-not-optional/",
  "Content": "\u003cdiv class=\"post\"\u003e\n\n\t\t\t\t\t\u003cdiv class=\"post-heading\"\u003e\n\t\t\t\t\t\t\u003ch1\u003eArt is not optional\u003c/h1\u003e\n\t\t\t\t\t\t\u003cspan class=\"post-date\"\u003e\u003ca href=\"https://mikelevins.github.io/posts/2021-01-04-art-is-not-optional/\"\u003e# Jan 4, 2021\u003c/a\u003e\u003c/span\u003e\n\t\t\t\t\t\u003c/div\u003e\n\n\t\t\t\t\t\u003cp\u003eArt is one of the oldest things that humans do. A handful of carvings have been found in a few different places that are somewhere between half a million and three quarters of a million years old, probably older than Homo sapiens.\u003c/p\u003e\n\u003cp\u003eArt is older than writing or architecture or agriculture. It’s older than most kinds of tools. It might be older than fire; history.com claims that the oldest “unequivocal” evidence of human control of fire is about 400,000 years old.\u003c/p\u003e\n\u003cp\u003eEvery human society makes art.\u003c/p\u003e\n\u003cp\u003eNow, we can (and do) argue about what we need it for, but surely we must need it for something, or it wouldn’t be everywhere that humans have been for the entirety of our existence.\u003c/p\u003e\n\u003cp\u003eNot everyone is an artist. Some are. Some aren’t. Apparently, most people aren’t. But the way it seems to me is that if you’re an artist, you’re an artist, like it or not. It’s not something you choose to be. You just are.\u003c/p\u003e\n\u003cp\u003eI’m an artist myself. The first thing that I ever knew about myself was that I was an artist. I’ve drawn pictures and made stories ever since I can remember. Since before I can remember, if my parents are to be believed.\u003c/p\u003e\n\u003cp\u003eIt’s not necessarily a good thing. You might be a bad artist, for example. Certainly, not all of my works are good. Not most of them, either. I think I’m in good company there, though. I doubt that any artist does only good work.\u003c/p\u003e\n\u003cp\u003eIf you’re a bad artist, and you have enough discernment to realize it, then you might be pretty unhappy about it. I don’t think all of my works are terrible, but enough of them are to make me pretty unhappy sometimes. I’ve had reason from time to time to wish I was not an artist; to wish that I didn’t need to make things, that I could forget the whole thing.\u003c/p\u003e\n\u003cp\u003eI can’t though. It’s not an option.\u003c/p\u003e\n\u003cp\u003eIn fact, forget \u003cem\u003eneeding\u003c/em\u003e. I make things. I just do. I do it all the time. If I’m stuck somewhere inconvenient with no tools or materials and nothing to work with, I nevertheless make up stories and songs and think up things that I could draw if only I had something to draw with.\u003c/p\u003e\n\u003cp\u003eIt’s not optional. I always make things.\u003c/p\u003e\n\u003cp\u003eAs far as I can tell, other artists are similar. They make things. They just do. If you look for it, you can tell who the artists are. They’re always making things, or thinking about making things, or imagining making things, or talking about making things, or studying making things, or looking at tools for making things, or…\u003c/p\u003e\n\u003cp\u003eMost people like some kind of art. It might be some particular style of music or drawings or paintings or stories or movies or whatever, but most people like some kind of art. Artists like art differently. They respond to art by making more art. By needing to make more art.\u003c/p\u003e\n\u003cp\u003eNowadays I make most of my revenue by writing software. I’m an artist first, though, and that influences the way I write software. I write software because of art, as a matter of fact.\u003c/p\u003e\n\u003cp\u003eAfter a year of art school, I took a major in the sciences. It was zoology at first–I’ve loved animals since I can remember–but physics and mathematics seduced me. For the major I had to take a couple of computer programming classes: one in FORTRAN and one in BASIC for instrument control. I thought they were okay, but I didn’t really care about them.\u003c/p\u003e\n\u003cp\u003eI didn’t care about computers until a year or two later, when the Mac was released and I got my hands on MacPaint. MacPaint was awesome. I reacted to it the way I always react to art that I like: I wanted to do it myself. I needed to.\u003c/p\u003e\n\u003cp\u003eSo now, all of a sudden, I had to have a computer so I could learn to program it.\u003c/p\u003e\n\u003cp\u003eI was ridiculously poor (starving artist and college student, so yeah), so I had to beg, borrow, and steal to get a very cheap Commodore computer, but I got one. It wasn’t a Mac, and I certainly couldn’t write MacPaint for it, but I did learn how to write a dumb little paint program in assembly language. I was ecstatic.\u003c/p\u003e\n\u003cp\u003eThen I discovered Conway’s life. I wrote a program to execute Conway’s life, but I’m an artist. I can’t just reproduce some known solution to something. I have to make things. So I fiddled with it. I made a variant of life with four colors of cells, each of which obeyed a different set of rules.\u003c/p\u003e\n\u003cp\u003eSo that they would interact, and not just be four different life games in the same space, I made them count one another’s cells in their decisions about whether to live or die.\u003c/p\u003e\n\u003cp\u003eI fiddled with the rules and their implementation for weeks. I used to stay up late at night monkeying with it and let it run overnight. I’d get up in the morning and rush into the other room to see what the program had done. Sometimes it was supremely boring. All the cells would be dead and gone, or one of the colors would have completely taken over. Sometimes it was breathtaking. I sort of forgot why I had wanted to to learn programming and just got sucked into the process of making things that made things.\u003c/p\u003e\n\u003cp\u003eI think that might be an important factor in the sort of programmer I turned out to be. I went to work at Apple and learned a bunch of programming languages and played with a bunch of systems in Apple’s Competitive Intelligence lab and discovered that I love Lisp.\u003c/p\u003e\n\u003cp\u003eWhen I first encountered Lisp, I thought it looked quite ugly–a jumble of parentheses and gobbledygook all in uppercase letters.\u003c/p\u003e\n\u003cp\u003eIn retrospect, though, and knowing Lisp as I know it now, more than thirty years later, it seems obvious that it would win me over. It’s like it was made for me. It’s designed to write programs by starting the Lisp running and fooling with it, teaching it new tricks one-by-one, changing the Lisp bit-by-bit into the program that you discover you want to make.\u003c/p\u003e\n\u003cp\u003eThere’s an old saying that Lisp is like a ball of mud. Maybe that’s why I like it. Working with it is like shaping clay. You start with the ball of mud and you start pushing it around and pulling on it and shoving it this way and that way and turning it into something that you discover hiding in it. It starts out as a ball of mud, and it never stops being a ball of mud, but after the application of some imagination and elbow grease, it turns into something else, too.\u003c/p\u003e\n\u003cp\u003eMaybe something beautiful, if you’re lucky.\u003c/p\u003e\n\u003cp\u003eAnyhow, I have to make things, and if I have to make things, I might as well make things that people will pay for. And I might as well do it with tools that seem to have been made for me.\u003c/p\u003e\n\u003cp\u003eLike Lisp.\u003c/p\u003e\n\n\n\t\t\t\t\u003c/div\u003e",
  "Date": "2021-01-04T00:00:00Z",
  "Author": "mikel evins"
}