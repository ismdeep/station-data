{
  "Source": "mikelevins.github.io",
  "Title": "Heresy",
  "Link": "https://mikelevins.github.io/posts/2009-07-17-heresy/",
  "Content": "\u003cdiv class=\"post\"\u003e\n\n\t\t\t\t\t\u003cdiv class=\"post-heading\"\u003e\n\t\t\t\t\t\t\u003ch1\u003eHeresy\u003c/h1\u003e\n\t\t\t\t\t\t\u003cspan class=\"post-date\"\u003e\u003ca href=\"https://mikelevins.github.io/posts/2009-07-17-heresy/\"\u003e# Jul 17, 2009\u003c/a\u003e\u003c/span\u003e\n\t\t\t\t\t\u003c/div\u003e\n\n\t\t\t\t\t\u003cp\u003eI’m coming to the close of a contract, and I’m spending part time\ndoing what is natural in that situation: looking for new contracts,\nand preparing some of my personal projects for release as products.\u003c/p\u003e\n\u003cp\u003eThe first product scheduled for delivery is a Cocoa application for\nMac OS X. Written in Scheme. This, of course, is heresy.\u003c/p\u003e\n\u003cp\u003eCocoa applications are supposed to be written in Objective-C. (Well,\nto be fair, about a third of the code in this one is Objective-C. The\nrest I wrote in Scheme.)\u003c/p\u003e\n\u003cp\u003eWhy would I do a crazy thing like that?\u003c/p\u003e\n\u003cp\u003eWell, I like Lisp. I’m a Lisp programmer for a reason, that reason\nbeing that Lisp is the clear winner on the Joy-Per-Unit-Effort\nscale. I’m not really partisan in my choice of Lisps. I like Scheme\nand Common Lisp and Clojure all just fine. If I ever had a favorite\nLisp, it was Dylan, but it’s been a while since Dylan really felt like\na Lisp.\u003c/p\u003e\n\u003cp\u003eSo I was planning to release this product, and I was looking at\noptions for packaging it. I could certainly have just written it in\nObjective-C. I’ve been using Objective-C and Apple’s development tools\n(and NeXT’s development tools before that) for nigh onto twenty years\nnow. It’s a comfortable and familiar ecosystem. But I figured I’d give\nLisp a fair shot before settling on the conventional choice because,\nyou know, I like Lisp.\u003c/p\u003e\n\u003cp\u003eClojure? Nah; the quick route there is a Swing app. The Java Virtual\nMachine has many advantages, but delivering great Cocoa apps is not\none of them. Sure, if you spend enough time and effort, you can\nachieve a sort of approximation of a Cocoa UI, but it’s not a fun\nprocess. Less Joy Is Bad.\u003c/p\u003e\n\u003cp\u003eCommon Lisp? Maybe. I love Clozure Common Lisp, and it has a great\nCocoa interface. Only trouble is, universal apps are off the table,\nfor now. Lispworks? Another good possibility. But my license is\ngetting a little long in the tooth. If I was going to build a product\non it, I should really get a new license, so I can have the latest\nversion of Lispworks. And y’know? Right now, end of contract, looking\nfor new contracts, and other revenue streams…not the best moment to\nspend a few thousand bucks speculatively. Prudence. One learns a\nmodicum of prudence.\u003c/p\u003e\n\u003cp\u003eI was experimenting with a few options, and\n\u003ca href=\"http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Main_Page\"\u003eGambit-C\u003c/a\u003e\npleasantly surprised me. Gambit’s been installed on my systems since,\noh, probably since 1990 at least. It’s a great Scheme system that has\ngotten steadily better over the years. But there’s not really any\nCocoa support there, or so I thought. Go ahead, Google around; you\nwon’t find much of anything. Except this:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://jlongster.com/blog/\"\u003ehttp://jlongster.com/blog/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIt describes how this fellow set up remote debugging of a Gambit app\nrunning on the iPhone. Wait a second; Gambit on the iPhone? Um. Turns\nout I know something about iPhone apps. Turns out I’ve written some\niPhone products\n(\u003ca href=\"http://www.iphone4kids.net/2009/06/21/firstwords-learning-how-to-spell/)\"\u003ehttp://www.iphone4kids.net/2009/06/21/firstwords-learning-how-to-spell/)\u003c/a\u003e. If\nthis guy has Gambit code running on the iPhone, I’m pretty sure I can\nget Gambit code to run a Cocoa app, as well.\u003c/p\u003e\n\u003cp\u003eIn fact, it was a piece of cake.\u003c/p\u003e\n\u003cp\u003eI had allocated a number of hours spread over a week or so to evaluate\nseveral alternative possibilities before just settling down and\nbuilding the app in plain, vanilla Objective-C. After the first\nsession with Gambit, I cancelled all the other evaluations and just\nwrote the app in Gambit.\u003c/p\u003e\n\u003cp\u003eIt’s true that there is no Objective-C interface in Gambit. Turns out\nyou don’t need one. Gambit has a very good foreign-function\ninterface–a C interface really. Gambit compiles Scheme to C code, and\nthen compiles the resulting C code to native code. One advantage of\nthis approach, which is used by several other Schemes (Chicken and\nBigloo, for example), is that you can embed C code in your Scheme, and\npretty freely mix the two languages. In point of fact, because Gambit\nuses the platform’s C compiler, and because Apple’s C compiler handles\nObjective-C, you can in fact embed Objective-C code in your Scheme.\u003c/p\u003e\n\u003cp\u003eFor example,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003eapplication-main\n  (\u003cspan style=\"color:#a6e22e\"\u003ec-lambda\u003c/span\u003e () int\n\u0026lt;\u0026lt;c-code\n   NSApplication *app = [NSApplication sharedApplication]\u003cspan style=\"color:#75715e\"\u003e;\u003c/span\u003e\n   NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init]\u003cspan style=\"color:#75715e\"\u003e;\u003c/span\u003e\n   [NSBundle loadNibNamed: [[[NSBundle mainBundle] infoDictionary] objectForKey: @\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;NSMainNibFile\u0026#34;\u003c/span\u003e]\n             owner: app]\u003cspan style=\"color:#75715e\"\u003e;\u003c/span\u003e\n   [app run]\u003cspan style=\"color:#75715e\"\u003e;\u003c/span\u003e\n   [pool release]\u003cspan style=\"color:#75715e\"\u003e;\u003c/span\u003e\n   ___result = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e;\u003c/span\u003e\nc-code\n))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWell, whaddya know? We don’t need no steenking Cocoa interface.\u003c/p\u003e\n\u003cp\u003eSo currently the app is about two thirds Scheme code and one third\nObjective-C code. It works great. It launches in under half a second\nand loads its test database in about seventy milliseconds. UI\nresponsiveness and scrolling are as fast as you could possibly want. I\nbuilt the UI the conventional way, in Interface Builder, and it calls\ninto the Scheme code to display and edit data. The delivered app\nbundle is 7MB and it’s a universal application that runs on Tiger and\nlater.\u003c/p\u003e\n\u003cp\u003eTurns out Gambit is a great platform for Cocoa app development. Who\nknew?\u003c/p\u003e\n\n\n\t\t\t\t\u003c/div\u003e",
  "Date": "2009-07-17T00:00:00Z",
  "Author": "mikel evins"
}