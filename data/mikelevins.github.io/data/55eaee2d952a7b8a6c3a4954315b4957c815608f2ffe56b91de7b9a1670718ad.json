{
  "Source": "mikelevins.github.io",
  "Title": "A peek at Categories",
  "Link": "https://mikelevins.github.io/posts/2009-10-23-a-peek-at-categories/",
  "Content": "\u003cdiv class=\"post\"\u003e\n\n\t\t\t\t\t\u003cdiv class=\"post-heading\"\u003e\n\t\t\t\t\t\t\u003ch1\u003eA peek at Categories\u003c/h1\u003e\n\t\t\t\t\t\t\u003cspan class=\"post-date\"\u003e\u003ca href=\"https://mikelevins.github.io/posts/2009-10-23-a-peek-at-categories/\"\u003e# Oct 23, 2009\u003c/a\u003e\u003c/span\u003e\n\t\t\t\t\t\u003c/div\u003e\n\n\t\t\t\t\t\u003cp\u003eI’ve begun preparations to package Categories for release. The first\nthing I’m doing is going over the surface syntax. In previous\niterations I’ve built Categories from the bottom up, which confirmed\nthat the concepts and mechanisms worked, but left a few warts in the\nsurface syntax. This time, I figured I’d start at the surface syntax\nand work the other way, in hopes that the result will be more\ncongenial.\u003c/p\u003e\n\u003cp\u003eThis rather long post describes the current state of the Categories\nsurface syntax. Those who are interested in such things are invited to\ntell me what’s wrong with it.\u003c/p\u003e\n\u003cp\u003eCategories has three logical parts: datatypes (representation),\nfunctions (behavior), and domains (taxonomy). Following Larry Tesler’s\nmaxim that ‘simple things should be simple; complex things should be\npossible,’ I’ll start by describing just the simplest and most common\nuse-cases, and then make another pass through all three parts of the\nsystem to add in the more complicated options.\u003c/p\u003e\n\u003ch2 id=\"datatypes\"\u003eDatatypes\u003c/h2\u003e\n\u003cp\u003eRepresentation is the province of Datatypes. Types are first-class\nobjects in Categories. They can be created by evaluating expressions,\npassed to and returned from functions, and bound to variables.\u003c/p\u003e\n\u003cp\u003eCategories defines a set of primitive type objects that represent\nbuilt-in types of the underlying platform. For example, the Scheme\nversion defines primitive types like \u003ccode\u003e\u0026lt;pair\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;symbol\u0026gt;\u003c/code\u003e, and it\narranges for its reflective operations to return appropriate\nvalues. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e? (\u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo\u003c/span\u003e)\n\n\u0026lt;symbol\u0026gt;\n\n? (\u003cspan style=\"color:#a6e22e\"\u003etype?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo\u003c/span\u003e \u0026lt;symbol\u0026gt;)\n\n\u003cspan style=\"color:#66d9ef\"\u003e#t\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"type-synonyms\"\u003eType synonyms\u003c/h2\u003e\n\u003cp\u003eThe simplest possible way to define a type is to say that it’s the\nsame as some existing type. Of course, even simpler than that is to\njust go ahead and use the existing type. But sometimes you want a\ndifferent name for the type, to better communicate its intended\nuse. Sometimes you want to use an existing type for now, but may want\nto represent the data differently in the future. To make these uses\neasier, Categories provides type synonyms:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;name\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003etype-synonym\u003c/span\u003e \u0026lt;string\u0026gt;))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBy defining \u003ccode\u003e\u0026lt;name\u0026gt;\u003c/code\u003e as a synonym for \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e you can use \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e\nobjects to represent names, while calling them \u003ccode\u003e\u0026lt;name\u0026gt;\u003c/code\u003es in your code to\nclearly communicate their purpose. Later, if you find that you need to\nrepresent names in some other way–say as some structured object that\ntakes into account various different kinds of names that people\nuse–you can replace the definition of \u003ccode\u003e\u0026lt;name\u0026gt;\u003c/code\u003e. You’ll then have to\nchange the implementations of functions that operate on \u003ccode\u003e\u0026lt;name\u0026gt;\u003c/code\u003es, of\ncourse, but if you structure your APIs appropriately, that’s all\nyou’ll have to change.\u003c/p\u003e\n\u003ch3 id=\"structures\"\u003eStructures\u003c/h3\u003e\n\u003cp\u003eMore commonly, we want to create structured types by grouping several\nsimpler types into named fields. In Categories, that kind of type is\ncalled a structure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;cartesian-point\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () x y))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLike other types, structures are first class objects. The above code\nbinds a new structure to the variable \u003ccode\u003e\u0026lt;cartesian-point\u0026gt;\u003c/code\u003e. The new\nstructure has two keys: x and y. Instances of \u003ccode\u003e\u0026lt;cartesian-point\u0026gt;\u003c/code\u003e will\ncontain two values, one stored on the key x, and the other stored on\nthe key y.\u003c/p\u003e\n\u003cp\u003eYou can create an instance of a structure by applying the function\nmake to it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;cartesian-point\u0026gt;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can get the value associated with a key by applying the function\nget-key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e? (\u003cspan style=\"color:#a6e22e\"\u003eget-key\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;cartesian-point\u0026gt;) \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u003c/span\u003e)\n\nError: Unbound key x \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUnfortunately, we didn’t specify any value for x when we created the\ninstance. You can do that by passing in an initializer for the key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e? (\u003cspan style=\"color:#a6e22e\"\u003eget-key\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;cartesian-point\u0026gt; x: \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e) \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u003c/span\u003e) \n\n\u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can also specify a default value for a key in the definition of\nthe type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;cartesian-point\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () \n    (\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e default: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n    y))\n\n? (\u003cspan style=\"color:#a6e22e\"\u003eget-key\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;cartesian-point\u0026gt;) \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u003c/span\u003e) \n  \n\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBefore I go any farther, I had better explain why there’s an empty\nlist after the symbol ‘structure’ in:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;cartesian-point\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () \n    x\n    y)) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen you create a new structure, you can specify zero or more existing\nstructures to include in its definition. So if I wanted to define a\nnew type of 3D point that is just like a cartesian point, but with an\nextra coordinate, I could define it like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;3d-point\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003e\u0026lt;cartesian-point\u0026gt;\u003c/span\u003e) \n   z)) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e‘Okay,’ you’re thinking, ‘that’s nothing new. The new type inherits\nfrom the old one.’ Not so fast: there’s no such thing as inheritance\nin types. Including a type just means you don’t have to retype all its\nfield definitions when you want to reuse them. Categories does support\ninheritance, but that belongs to domains, not to datatypes. Remember:\ndatatypes are representation. Inheritance belongs to taxonomy, and\nthat’s the province of domains, not of datatypes.\u003c/p\u003e\n\u003ch3 id=\"structure-amenities\"\u003eStructure amenities\u003c/h3\u003e\n\u003cp\u003eThe structure constructor provides a few more conveniences. You can\nsay that you want Categories to automatically construct getter\nfunctions for the new type’s keys:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;cartesian-point\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () \n    (\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e get: get-x) \n    (\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e get: get-y))) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow you can fetch the x value from a cartesian point like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e? (\u003cspan style=\"color:#a6e22e\"\u003eget-x\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;cartesian-point\u0026gt; x: \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e))\n\n\u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you leave off the get: argument for a key, then you have to use\nget-key and the key’s name to fetch the value.\u003c/p\u003e\n\u003cp\u003eYou can also specify a setter:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;cartesian-point\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () \n    (\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e get: get-x set: set-x!)  \n    (\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e get: get-y set: set-y!)))  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCategories then constructs a function for setting the value associated\nwith the key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e? (\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003ep (\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;cartesian-point\u0026gt; x: \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e))\n\n\u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003e\u0026lt;\u0026lt;cartesian-point\u0026gt; x: \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e y: \u003cspan style=\"color:#f92672\"\u003e#\u003c/span\u003e\u0026lt;unbound\u0026gt;\u0026gt;\n\n? (\u003cspan style=\"color:#a6e22e\"\u003eget-x\u003c/span\u003e p) \n\n\u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e\n\n? (\u003cspan style=\"color:#a6e22e\"\u003eset-x!\u003c/span\u003e p \u003cspan style=\"color:#ae81ff\"\u003e1001\u003c/span\u003e) \n\n? (\u003cspan style=\"color:#a6e22e\"\u003eget-x\u003c/span\u003e p) \n\n\u003cspan style=\"color:#ae81ff\"\u003e1001\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you omit the set: argument then Categories makes the key\nread-only. Categories is generally biased in favor of immutable data.\u003c/p\u003e\n\u003ch3 id=\"functions\"\u003eFunctions\u003c/h3\u003e\n\u003cp\u003eNow that we know how to define datatypes, what do we do with them? We\napply \u003cstrong\u003efunctions\u003c/strong\u003e to them.\u003c/p\u003e\n\u003cp\u003eFunctions are objects that can be applied to zero or more parameters\nand return zero or more results. Functions as defined in Categories\nare polymoprphic. In other words, the same function can have several\ndifferent definitions. The one that applies to a particular set of\ninputs depends on the inputs.\u003c/p\u003e\n\u003cp\u003eThis practice of making the particular implementation of a function\ndepend on its inputs is called \u003cstrong\u003epolymorphism\u003c/strong\u003e, and is one of the\nfoundations of object-oriented programming. Choosing a specific\nimplementation to run is called \u003cstrong\u003edispatching\u003c/strong\u003e. Categories provides\npolymorphic functions with programmable dispatching.\u003c/p\u003e\n\u003cp\u003eWe’ll look at how you can create your own dispatching schemes\nbelow. First, though, let’s look at what it’s like to define and use\nfunctions in the simplest way.\u003c/p\u003e\n\u003ch3 id=\"the-default-domain\"\u003eThe Default domain\u003c/h3\u003e\n\u003cp\u003eThe simplest way to define and use functions in Categories is with the\n\u003cstrong\u003edefault domain\u003c/strong\u003e. Categories assumes you are using the default\ndomain unless you tell it otherwise. The features of the default\ndomain generally resemble those of CLOS.\u003c/p\u003e\n\u003cp\u003eLike types, functions are first-class objects. You can create one and\nbind it to a variable, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003eserialize \n  (\u003cspan style=\"color:#a6e22e\"\u003efunction\u003c/span\u003e ((\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt;store\u0026gt;))\n    (vector \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;store\u003c/span\u003e \n            (\u003cspan style=\"color:#a6e22e\"\u003eversion\u003c/span\u003e s) \n            (map serialize (\u003cspan style=\"color:#a6e22e\"\u003ecolumns\u003c/span\u003e s)) \n            (\u003cspan style=\"color:#a6e22e\"\u003ecolumn-order\u003c/span\u003e s) \n            (\u003cspan style=\"color:#a6e22e\"\u003esort-column\u003c/span\u003e s) \n            (\u003cspan style=\"color:#a6e22e\"\u003esort-reversed?\u003c/span\u003e s) \n            (map serialize (\u003cspan style=\"color:#a6e22e\"\u003erows\u003c/span\u003e s)) \n            (\u003cspan style=\"color:#a6e22e\"\u003enotes\u003c/span\u003e s)))) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe function object that is bound to the variable named ‘serialize’ is\ncreated with a single implementation, corresponding to the type\n\u003ccode\u003e\u0026lt;store\u0026gt;\u003c/code\u003e. If we want to add another implementation, we can use\nadd-method!:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003eadd-method!\u003c/span\u003e serialize ((\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u0026lt;document\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhy do the parameter lists have double parentheses? Because each\nparameter may be type-qualified:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003eadd-method!\u003c/span\u003e serialize ((\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u0026lt;document\u0026gt;)(\u003cspan style=\"color:#a6e22e\"\u003eouts\u003c/span\u003e \u0026lt;stream\u0026gt;)) \n  \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can define a method to execute when no match is found for the\ninputs by omitting the type qualifiers:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003eadd-method!\u003c/span\u003e serialize (\u003cspan style=\"color:#a6e22e\"\u003esomething\u003c/span\u003e somewhere) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt can be an inconvenience to keep track of where the definition of\nthe function first appears, and to make sure that all the add-method!\ncalls appear after it. If you instead use the define-function macro,\nthat bookkeeping is handled for you automatically:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e serialize ((\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt;store\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\n(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e serialize ((\u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e \u0026lt;document\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn that case, it doesn’t matter which comes first.\u003c/p\u003e\n\u003ch3 id=\"domains\"\u003eDomains\u003c/h3\u003e\n\u003cp\u003eSo how exactly does dispatching work in Categories? Well, that depends\non what domain you use. By default, you use the default domain. The\ndefault domain, which is named -c3-, uses a dispatching algorithm very\nsimilar to that of CLOS. It’s not identical to CLOS; it uses a scheme\nfirst described in\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://192.220.96.201/dylan/linearization-oopsla96.html\"\u003ehttp://192.220.96.201/dylan/linearization-oopsla96.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThat scheme, which is generally called ‘C3,’ yields dispatching\nbehavior that is very similar to that of CLOS, but which in a few\ncomplicated corner cases produces less surprising results. It’s the\ndefault in Categories because I like it, and because it has served the\ngeneral programming community well. It was designed for the Dylan\nprogramming language, but has been adopted by implementors outside the\nDylan community, including the Python implementors and the designers\nof the Class::C3 object system for Perl.\u003c/p\u003e\n\u003cp\u003eAlthough C3 is the default dispatching scheme, it’s not the only\ndispatching scheme supported by Categories.  Two other dispatching\nschemes are provided with Categories, and by defining domains, you can\nmake your own.\u003c/p\u003e\n\u003cp\u003eBefore we get to that, though, let’s just look at how to use something\nother than the default domain.\u003c/p\u003e\n\u003cp\u003eWhen you write:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e serialize ((\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt;store\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethat expression is really shorthand. It leaves out a reference to the\ndomain you’re using. If we wrote it out in full, it would look like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e -c3- serialize ((\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt;store\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can see that here we’ve said explicitly that we’re defining a\nfunction that operates in the -c3- domain. We could instead use one of\nthe other domains supplied with Categories, the Flat domain:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e -flat- serialize ((\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e \u0026lt;store\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe difference between -c3- and -flat- is that -c3- defines supertype\nrelations among types, and -flat- doesn’t. Suppose you make an\ninstance of \u003c!-- raw HTML omitted --\u003e and call serialize on it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e$r (\u003cspan style=\"color:#a6e22e\"\u003emake\u003c/span\u003e \u0026lt;repository\u0026gt;)) \n\n(\u003cspan style=\"color:#a6e22e\"\u003eserialize\u003c/span\u003e $r) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat happens? That depends on whether serialize is defined on the -c3-\nor on the -flat- domain. It’s the domain that defines how dispatching\nis done. If it’s defined on -flat- then the answer is simple:\nserialize finds no match for $r. Unless a default method is defined as\nin the example above, an error is signaled.\u003c/p\u003e\n\u003cp\u003eThe -c3- domain defines a more complicated–and more\nfamiliar–dispatching scheme. It will try to match $r against\nserialize methods that are defined on \u003ccode\u003e\u0026lt;repository\u0026gt;\u003c/code\u003e.  When it fails to\nfind one, it then tries to find serialize methods defined on\nsupertypes of \u003ccode\u003e\u0026lt;repository\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDidn’t I say above that datatypes don’t define supertype or\ninheritance relations? Yes, because \u003cem\u003edomains\u003c/em\u003e do. The -c3- domain\ndefines supertype relations with multiple inheritance. It tries to\nfind an inherited method that matches, using the C3 algorithm to\ndetermine which matching method is most specific. Once again, if no\nsuch method is found then either the default method is called or, if\nthere is no default method, an error is signaled.\u003c/p\u003e\n\u003ch3 id=\"more-options\"\u003eMore options\u003c/h3\u003e\n\u003cp\u003eThat’s a first pass across the simplest and most commonly-used\nfeatures of Categories. Let’s go over the parts of the system one more\ntime, and look at a few more options that it provides.\u003c/p\u003e\n\u003ch3 id=\"categories\"\u003eCategories\u003c/h3\u003e\n\u003cp\u003eFirst of all, I left out an important group of types, because it’s\nhard to explain what they’re for until you’ve seen how Categories\nworks with domains. A constructor named ‘category’ creates a kind of\ntype that is different from the others. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;vehicle\u0026gt; (\u003cspan style=\"color:#a6e22e\"\u003ecategory\u003c/span\u003e \u0026lt;car\u0026gt; \u0026lt;truck\u0026gt;)) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe expression above binds a new type to \u003ccode\u003e\u0026lt;vehicle\u0026gt;\u003c/code\u003e. The new type,\nwhich is called a category, represents any of the types passed as\ninputs to the ‘category’ constructor. Once \u003ccode\u003e\u0026lt;vehicle\u0026gt;\u003c/code\u003e is defined, any\nmethod matching \u003ccode\u003e\u0026lt;vehicle\u0026gt;\u003c/code\u003e will also apply to \u003ccode\u003e\u0026lt;car\u0026gt;\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;truck\u0026gt;\u003c/code\u003e. You can therefore define functions that accept \u003ccode\u003e\u0026lt;vehicle\u0026gt;\u003c/code\u003e\nvalues, and those functions will work on \u003ccode\u003e\u0026lt;car\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;truck\u0026gt;\u003c/code\u003e values,\n\u003cem\u003eeven if the functions are defined on the flat domain\u003c/em\u003e. In other\nwords, even without inheritance, it is possible to define functions\nthat operate the same way on a variety of different types.\u003c/p\u003e\n\u003ch3 id=\"supertypes-and-subtypes\"\u003eSupertypes and subtypes\u003c/h3\u003e\n\u003cp\u003eOkay, but suppose you actually want types that have supertypes and\nsubtypes? Well, then, you can use -c3-,or any domain that supports\nsupertype relations, and you can add your own types to it. For\nexample,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003eadd-type!\u003c/span\u003e -c3- \u0026lt;truck\u0026gt; \n  supertypes: (list \u0026lt;transportation\u0026gt; \u0026lt;four-wheeled-objects\u0026gt;)) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e…adds to -c3- a type named \u003ccode\u003e\u0026lt;truck\u0026gt;\u003c/code\u003e, with supertypes\n\u003ccode\u003e\u0026lt;transportation\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;four-wheeled-objects\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can, of course, also add types to the -flat- domain:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003eadd-type!\u003c/span\u003e -flat- \u0026lt;truck\u0026gt;) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can’t specify any supertypes for it, though, because -flat-\ndoesn’t support supertype relations. If you try to, then add-type!\nwill signal an error.\u003c/p\u003e\n\u003ch3 id=\"name-collisions\"\u003eName collisions\u003c/h3\u003e\n\u003cp\u003eWhat happens if I define a type that includes two other types that\nhave different definitions for the same key?\u003c/p\u003e\n\u003cp\u003eFor example, suppose I have these two definitions:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;monument\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () \n    (\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e type: \u0026lt;historical-epoch\u0026gt;))\n\n(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;property\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e () \n    (\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e type: \u0026lt;count-of-years\u0026gt;)) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow suppose I want to define \u003ccode\u003e\u0026lt;historic-property\u0026gt;\u003c/code\u003e like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;historic-property\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003e\u0026lt;monument\u0026gt;\u003c/span\u003e \u0026lt;property\u0026gt;) \n    (\u003cspan style=\"color:#a6e22e\"\u003esquare-footage\u003c/span\u003e asking-price)) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWell, I can’t. The definition of age in \u003ccode\u003e\u0026lt;monument\u0026gt;\u003c/code\u003e conflicts with\nthe definition of age in \u003ccode\u003e\u0026lt;property\u0026gt;\u003c/code\u003e. What I can do, though, is\nrename one or both of the included keys:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e\u0026lt;historic-property\u0026gt; \n  (\u003cspan style=\"color:#a6e22e\"\u003estructure\u003c/span\u003e ((\u003cspan style=\"color:#a6e22e\"\u003e\u0026lt;monument\u0026gt;\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e as: period))\n              (\u003cspan style=\"color:#a6e22e\"\u003e\u0026lt;property\u0026gt;\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e as: how-old)))\n    (\u003cspan style=\"color:#a6e22e\"\u003esquare-footage\u003c/span\u003e asking-price))) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"the-predicate-domain\"\u003eThe Predicate domain\u003c/h3\u003e\n\u003cp\u003eBesides the default C3 domain and the flat domain, Categories includes\na third domain that works very differently from either. The -pred-\ndomain matches input function arguments with a user-defined predicate\nfunction. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e -pred- ((\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e y z) all-odd?)  \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe example above shows a function that will match any three inputs,\nas long as calling the function all-odd? on the sequence of three\ninputs returns true. You can define functions that match on any\npredicate you like. You just have to ensure that when the function\npasses the inputs to your predicate, the predicate correctly returns\neither true or false.\u003c/p\u003e\n\u003cp\u003eThe -pred- domain also uses the C3 algorithm to support supertype\nrelations among predicates. Using the -pred- domain you can construct\nwhatever relations among predicate functions you like, and Categories\nwill dispatch appropriately. For example, you define all-integers? to\nbe a supertype of all-odd?, and then anything that matches all-odd?\nwill also match all-integers?.\u003c/p\u003e\n\u003cp\u003eI should probably mention here that -pred- may not be all that useful\nto anyone. It exists mainly because I wanted to make sure that it was\nworkable to build a dispatching scheme in Categories that was quite a\nbit different from the usual thing.\u003c/p\u003e\n\u003cp\u003eOne mystery remains with the -pred- domain, though: the syntax for\ndefining a function is different from the syntax used with the -c3-\nand -flat- domains. How does that work?\u003c/p\u003e\n\u003ch3 id=\"defining-domains\"\u003eDefining domains\u003c/h3\u003e\n\u003cp\u003eThe unique define-function syntax of the -pred- domain is provided by\nthe domain itself. It turns out that the operators ‘function’ and\ndefine-function\u0026#39; don’t define the syntax of parameter lists; the\ndomain does. The -c3- and -flat- domains both define a syntax that is\nfamiliar to users of CLOS and similar object systems. You write\ndefine-function forms like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e -c3- add ((\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u0026lt;integer\u0026gt;)(\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u0026lt;integer\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe forms \u003ccode\u003e(x \u0026lt;integer\u0026gt;)\u003c/code\u003e and \u003ccode\u003e(y \u0026lt;integer\u0026gt;)\u003c/code\u003e mean that the formal\nparameters x and y match inputs only if those inputs can be matched\nwith the \u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e type, according to the domain.\u003c/p\u003e\n\u003cp\u003eA domain like -pred- works quite differently, and requires a different\nsyntax for parameter lists. Instead of piecewise matching input values\nagainst types, -pred- matches the parameter list as a whole against\npredicates applied to it. That makes it possible to dispatch on\nconditions that -c3- and -flat- can’t check. For example, -pred- can\nmatch a sequence of five integers that are monotonically increasing,\nor a sequence of characters that forms a palindrome.\u003c/p\u003e\n\u003cp\u003eBut if some domains require unique parameter-list syntax, that means\nCategories must have a way to define that syntax; and it does.\u003c/p\u003e\n\u003cp\u003eWhen you define a domain, you are defining three things:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003ea format for function parameter lists\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ea function that determines whether a particular method matches a\ngiven sequence of input values\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ea function that can tell you which of two methods better matches a\ngiven set of inputs\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere’s what a domain definition looks like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e-my-domain- \n  (\u003cspan style=\"color:#a6e22e\"\u003edomain\u003c/span\u003e catalog: some-catalog-data-structure \n          parser: (\u003cspan style=\"color:#66d9ef\"\u003elambda \u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edomain\u003c/span\u003e formals) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n          matcher: (\u003cspan style=\"color:#66d9ef\"\u003elambda \u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edomain\u003c/span\u003e signature values) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n          comparator: (\u003cspan style=\"color:#66d9ef\"\u003elambda \u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003edomain\u003c/span\u003e signature1 signature2 values) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)))  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRight away you’ll notice that, although I said you have to define\nthree things, there are four inputs to the domain\nconstructor. Categories provides each domain with a data structure\ncalled a \u003cstrong\u003ecatalog\u003c/strong\u003e. The catalog can be anything you like. It can be\na false value, or an integer, or a table, or a more complex data\nstructure. It’s up to you. Its purpose is to provide storage for any\nauxiliary data that your domain might need to perform its tasks\ncorrectly and efficiently. You can use it to store method caches, or\narrangements of supertypes designed to make lookup fast, or whatever\nyou wish. You can also ignore it completely, if you wish.\u003c/p\u003e\n\u003cp\u003eThe other inputs to the domain constructor are essential, though. Each\nof them is a function that defines one aspect of how the domain\nworks. Because your domain may have crucial data stored in its\ncatalog, all three of the functions accept the domain itself as the\nfirst argument. Its up to you what you do with that argument; it’s\navailable in case you need it.\u003c/p\u003e\n\u003cp\u003eBesides the domain parameter, the functions that define a domain deal\nwith three other items: formal parameters, method signatures, and\ninput values.\u003c/p\u003e\n\u003cp\u003eA formal parameter is an object that represents the formal arguments\nin a function definition. Categories doesn’t define the format of\nargument lists; that’s up to the domain. When it processes a function\ndefinition, it extracts the formal parameter from the function or\ndefine-function expression, and passes it to the domain’s parser. The\nparser must accept the formal parameter and return a method\nsignature. It’s the parser that determines what the argument list of a\nfunction definition looks like.\u003c/p\u003e\n\u003cp\u003eThe parser doesn’t have to be complicated. Consider a -c3- function\ndefinition again:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#a6e22e\"\u003edefine-function\u003c/span\u003e -c3- add ((\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e \u0026lt;integer\u0026gt;)(\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e \u0026lt;integer\u0026gt;)) \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)  \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAll the parser needs to do is collect the type qualifiers from the\nformal parameter list, which is \u003ccode\u003e((x \u0026lt;integer\u0026gt;)(y \u0026lt;integer\u0026gt;))\u003c/code\u003e, and\nmake a method signature that matches two inputs that are both of type\n\u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThat brings us to method signatures, and to the matcher. Once again,\nthe method signature can be any data structure you like, as long as it\nstores the information that the matcher needs. Categories passes to\nthe matcher a method signature and a collection of input values. The\nmatcher must return true if the signature matches the inputs, and\nfalse otherwise. For -c3-, a method signature can simply be a sequence\nof types. For example, the method signature for the add function\ndefined above is just \u003ccode\u003e(\u0026lt;integer\u0026gt; \u0026lt;integer\u0026gt;)\u003c/code\u003e. The -c3- domain will\nsay that any sequence of two values matches that signature, as long as\nboth are of type \u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e, or of some type that, according to -c3-,\nis a subtype of \u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhat if more than one signature matches a set of inputs? How does the\ndomain know what to do?\u003c/p\u003e\n\u003cp\u003eThat’s what the comparator is for. After a function determines all the\nsignatures that match a set of inputs, it sorts them. The comparator\nis the function it uses to determine their order. The comparator must\naccept two signatures and a sequence of input values. If the first\nsignature is a better match than the second for the inputs, then the\ncomparator returns -1. If the second signature is a better match, it\nreturns 1. If neither is better, it returns 0. It’s best to try to\narrange for the comparator not to return zero, if that makes sense for\nthe domain you’re designing, because returning zero means you can’t\ntell which method to apply. Categories has to signal a dispatch error\nwhen that happens.\u003c/p\u003e\n\u003ch3 id=\"customizing-the-default-domain\"\u003eCustomizing the default domain\u003c/h3\u003e\n\u003cp\u003eIt may happen that you want to make your own domain, but you don’t\nreally want to totally rewrite how everything works. Maybe, for\nexample, you want to use something other than C3 to order methods, but\neverything else about how Categories works suits you fine. In order to\nmake it easier to customize just the part you want to customize,\nCategories provides functions that implement the behavior of the\ndefault domain. You can make your own domains using them, and you can\nreplace just one of them, or two of them, or you can use all of the\nstandard functions, but change their inputs or outputs a little using\nyour own code.\u003c/p\u003e\n\u003cp\u003eAs an example, you can make a domain that duplicates the behavior of\nthe default domain like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-scheme\" data-lang=\"scheme\"\u003e(\u003cspan style=\"color:#66d9ef\"\u003edefine \u003c/span\u003e-my-c3-domain- \n  (\u003cspan style=\"color:#a6e22e\"\u003edomain\u003c/span\u003e catalog: (\u003cspan style=\"color:#a6e22e\"\u003emake-c3-catalog\u003c/span\u003e)\n          parser: (\u003cspan style=\"color:#a6e22e\"\u003ec3-signature-parser\u003c/span\u003e) \n          matcher: (\u003cspan style=\"color:#a6e22e\"\u003ec3-signature-matcher\u003c/span\u003e)\n          comparator: (\u003cspan style=\"color:#a6e22e\"\u003ec3-signature-comparator\u003c/span\u003e))) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"what-next\"\u003eWhat next?\u003c/h3\u003e\n\u003cp\u003eAll of the features described in this overview have been implemented,\nbut the working code doesn’t provide this surface syntax. The syntax\nof the working versions is not too different in most places, but it’s\na little more complicated and not quite so tidy. I’ll be fixing that\nas part of getting the code ready for release.\u003c/p\u003e\n\u003cp\u003eThe prototype I’ve most recently been working on is implemented on top\nof Gambit Scheme 4.5.2. I’ve tried to avoid making it particularly\nGambit-specific, but the surface syntax I chose does use DSSSL\nkeywords, which not all Schemes support. In addition, some of the\nsyntax needs to be defined as macros. For reasons of convenience,\nthose will be defined using Gambit’s define-macro form, rather than\nsomething more portable. It may turn out that someone wants Categories\non some Scheme that lacks DSSSL keywords, or where a different means\nof defining macros is needed. I’ll cross that bridge when I come to\nit.\u003c/p\u003e\n\u003cp\u003eI plan to port it back to Clojure, as well. The first few versions of\nCategories were written in Clojure, but I wanted to move it elsewhere,\nmainly to gain the perspective of looking at it as something\nindependent of a particular language, rather than as an extension\nspecifically to Clojure. I’m planning a sizeable project in Clojure\nshortly, though, and I know for sure that I’ll want what Categories\noffers me for it.\u003c/p\u003e\n\u003cp\u003eIt may be that the design of Categories has serious flaws. If so, feel\nfree to enlighten me about them. If they can be repaired, I’ll do my\nbest to fix them. If not, I’ll have to look for alternatives. I could\nalways port \u003ca href=\"http://github.com/adlai/sheeple\"\u003eSheeple\u003c/a\u003e to Clojure, or\nmaybe implement \u003ca href=\"http://users.rcn.com/david-moon/PLOT/\"\u003ePLOT’s\u003c/a\u003e object\nsystem.\u003c/p\u003e\n\n\n\t\t\t\t\u003c/div\u003e",
  "Date": "2009-10-23T00:00:00Z",
  "Author": "mikel evins"
}