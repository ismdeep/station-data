{
  "Source": "mikelevins.github.io",
  "Title": "Why repl.it disappoints me",
  "Link": "https://mikelevins.github.io/posts/2021-04-04-replit/",
  "Content": "\u003cdiv class=\"post\"\u003e\n\n\t\t\t\t\t\u003cdiv class=\"post-heading\"\u003e\n\t\t\t\t\t\t\u003ch1\u003eWhy repl.it disappoints me\u003c/h1\u003e\n\t\t\t\t\t\t\u003cspan class=\"post-date\"\u003e\u003ca href=\"https://mikelevins.github.io/posts/2021-04-04-replit/\"\u003e# Apr 4, 2021\u003c/a\u003e\u003c/span\u003e\n\t\t\t\t\t\u003c/div\u003e\n\n\t\t\t\t\t\u003cp\u003eI’ve written before about my \u003ca href=\"https://mikelevins.github.io/posts/2020-12-18-repl-driven/\"\u003ehigh\nregard\u003c/a\u003e\nfor \u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eread-eval-print\nloops\u003c/a\u003e,\nand about an \u003ca href=\"https://mikelevins.github.io/posts/2020-02-03-programming-as-teaching/\"\u003eapproach to\nprogramming\u003c/a\u003e\nthat is built around interacting with them. You might therefore assume\nthat I would be enthusiastic about \u003ca href=\"https://replit.com/\"\u003ereplit\u003c/a\u003e, a\nweb-based platform for interactive programming in dozens of programming\nlanguages.\u003c/p\u003e\n\u003cp\u003eI want to be enthusiastic about it. replit’s heart certainly seems to\nbe in the right place. In various mission statements, recruiting\nposts, and other communications, it has described its mission as\n“shaking up” the software industry, building the “best, simplest, and\nfastest coding environment”, creating “learnable programming\nenvironments”, and engaging in “vision-driven design”.\u003c/p\u003e\n\u003cp\u003eBut then I look at their list of supported languages. Where is\nSmalltalk, the most iconic repl-driven programming environment in\nhistory?\u003c/p\u003e\n\u003cp\u003eHow about Lisp? If there’s another language that rivals Smalltalk’s\niconic status in repl-driven programming, it’s Lisp. Well, it does\nappear in their list–at least, Emacs Lisp does. Now, I’m an Emacs\nuser myself, and I do have to admit that Emacs is certainly a\nrepl-driven environment, but why limit yourself to the text-editing\nniche when great-quality Common Lisp compilers are free for the\ntaking?\u003c/p\u003e\n\u003cp\u003eMaybe replit’s staff believes that their constituency isn’t interested\nin crufty old Smalltalk and Common Lisp?\u003c/p\u003e\n\u003cp\u003ereplit’s list of language requests includes both Smalltalk and Lisp,\nbut I want to make a different argument for why they should include\nthese languages: because they showed us over forty years ago what a\n“vision-driven” “learnable programming environment” looked like.\u003c/p\u003e\n\u003cp\u003eHave a look at \u003ca href=\"https://www.youtube.com/watch?v=NqKyHEJe9_w\"\u003eYesterday’s Computer of\nTomorrow\u003c/a\u003e, for example,\nin which Dan Ingalls demonstrates Smalltalk-76 on a vintage Xerox\nAlto. Now that’s a repl-driven programming environment!\u003c/p\u003e\n\u003cp\u003eYou can also search YouTube and find demonstrations of old Lisp\nenvironments from decades past like Interlisp, Symbolics Genera,\nMacintosh Common Lisp, and so\non.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=x6-b_hazcyk\"\u003eHere’s\u003c/a\u003e a recent demo of\nthe Interlisp environment that some veteran Interlispers are in the\nprocess of bringing up on an emulator.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=o4-YnLpLgtk\"\u003eThis one\u003c/a\u003e is Kalman Reti\ndemonstrating the old Symbolics Genera environment running emulated on\nUbuntu Linux.\u003c/p\u003e\n\u003cp\u003eMaybe replit is under the mistaken impression that these old languages\nare extinct, or that they exist only as museum pieces, like the\nemulated environments in the above videos. If so, they’re wrong. There\nare excellent free and commercial implementations of Smalltalk and\nCommon Lisp that you can still get today, and that are still actively\ndeveloped and used to build software.\u003c/p\u003e\n\u003cp\u003eBut even if it were true, I would argue that it’s valuable to make\nSmalltalk and Common Lisp accessible to everyone, especially if your\nmission is to create the repl-driven platform of the future. You want\nto build the world’s greatest repl platform? You might want to get to\nknow the great repl platforms that other people already built. You\nwant to inspire a generation of programmers to “shake up” the software\nindustry? Give them a good look at some tools that already did that\nyears before many of them were born.\u003c/p\u003e\n\u003cp\u003eThe first time I visited the replit site, I looked at their list of\nsupported languages and was disappointed. That first time, Emacs Lisp\nand Scheme weren’t even on the list. I checked today and Common Lisp\nand Smalltalk still aren’t.\u003c/p\u003e\n\u003cp\u003eDon’t get me wrong: replit is a great idea. The company has a mission\nthat I sincerely endorse. I applaud the founders for thinking of it,\nand again for launching and growing it.\u003c/p\u003e\n\u003cp\u003eBut if I had thought up a networked multiplayer repl platform, the\nvery first languages I would have picked to host would have been\nSmalltalk and Lisp. I wouldn’t have picked them for their popularity.\nI would have picked them because they showed us decades ago what a\nrepl could be, and because they’re still better and more inspiring\nthan most of the repls that have come after them.\u003c/p\u003e\n\n\n\t\t\t\t\u003c/div\u003e",
  "Date": "2021-04-04T00:00:00Z",
  "Author": "mikel evins"
}