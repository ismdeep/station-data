{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——认识CNI",
  "Link": "https://morningspace.github.io/tech/k8s-net-cni/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#准备工作\"\u003e准备工作\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#配置cni插件\"\u003e配置CNI插件\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#cniversion\"\u003ecniVersion\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#name\"\u003ename\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#type\"\u003etype\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#bridge和isgateway\"\u003ebridge和isGateway\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#ipmasq\"\u003eipMasq\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#ipam\"\u003eipam\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#运行cni插件\"\u003e运行CNI插件\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#cni_command\"\u003eCNI_COMMAND\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#cni_containerid\"\u003eCNI_CONTAINERID\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#cni_netns\"\u003eCNI_NETNS\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#cni_ifname\"\u003eCNI_IFNAME\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#cni_path\"\u003eCNI_PATH\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#验证\"\u003e验证\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eKubernetes的网络是构建在CNI基础之上的。为什么我们需要CNI？它是如何工作的呢？本文将通过对CNI的bridge插件的使用，并结合network namespace，来演示它的工作原理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/cni.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在搭建和配置Kubernetes集群环境的时候，可能你会注意到，有时我们会通过配置CNI来为Kubernetes选择不同的网络，比如像常见的bridge network，还有像flannel，weave，calico等。\u003c/p\u003e\n\n\u003cp\u003eCNI的全称是Container Network Interface，它为容器提供了一种基于插件结构的标准化网络解决方案。以往，容器的网络层是和具体的底层网络环境高度相关的，不同的网络服务提供商有不同的实现。CNI从网络服务里抽象出了一套标准接口，从而屏蔽了上层网络和底层网络提供商的网络实现之间的差异。并且，通过插件结构，它让容器在网络层的具体实现变得可插拔了，所以非常灵活。\u003c/p\u003e\n\n\u003cp\u003eCNI隶属于\u003ca href=\"https://cncf.io\"\u003eCNCF(Cloud Native Computing Foundation)\u003c/a\u003e，在GitHub上有两个项目。其中，\u003ca href=\"https://github.com/containernetworking/cni\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecni\u003c/code\u003e项目\u003c/a\u003e包含了它的\u003ca href=\"https://github.com/containernetworking/cni/blob/master/SPEC.md\"\u003e规范\u003c/a\u003e和一个用Go语言编写的库。我们可以利用这个库编写自己的CNI插件对容器网络进行配置。另一个\u003ca href=\"https://github.com/containernetworking/plugins\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eplugins\u003c/code\u003e项目\u003c/a\u003e，包含了一系列作为参考实现的标准插件。这些插件彼此独立，但根据需要也可以组合起来使用，比如：flannel插件底层就是调用的bridge插件来完成bridge和veth的创建的。当然，还有很多第三方开发的插件，它们不在这个项目里。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们将利用CNI标准插件中的bridge插件来进行相关的实验，通过它来理解CNI的工作原理。\u003c/p\u003e\n\n\u003ch2 id=\"准备工作\"\u003e准备工作\u003c/h2\u003e\n\n\u003cp\u003e我们依然沿用\u003ca href=\"/tech/k8s-net-docker0/\"\u003eKubernetes网络篇——从docker0开始\u003c/a\u003e中所使用的实验环境。如果在这之前我们已经在实验环境里做过一些实验，并且希望从一个干净的环境重新开始，可以先退出实验环境（即：lab-dind容器），然后执行如下命令：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose stop dind\nStopping lab-kubernetes_dind_1_6de26708a911 ... \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose \u003cspan class=\"nb\"\u003erm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e dind\nGoing to remove lab-kubernetes_dind_1_6de26708a911\nRemoving lab-kubernetes_dind_1_6de26708a911 ... \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e关于启动实验环境的步骤，可以参考\u003ca href=\"/tech/k8s-net-docker0/\"\u003eKubernetes网络篇——从docker0开始\u003c/a\u003e一文里的“实验环境”部分。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们进入实验环境，在当前用户的home目录下新建一个子目录叫test-cni，并进入到该目录。我们后面的所有实验都将在这个目录下进行：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003etest-cni\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003etest-cni/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\n/root/test-cni\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在，让我们在test-cni目录下新建一个子目录叫plugins，然后在该目录下把最新的CNI插件包下载并解压。CNI的\u003ca href=\"https://github.com/containernetworking/plugins\"\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eplugins\u003c/code\u003e项目\u003c/a\u003e把所有标准插件的二进制可执行文件打成了一个包，可以从它的GitHub库下载到。比如：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003eplugins\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003eplugins/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\n/root/test-cni/plugins\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-OL\u003c/span\u003e https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgz\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003etar\u003c/span\u003e \u003cspan class=\"nt\"\u003e-xzvf\u003c/span\u003e cni-plugins-linux-amd64-v0.8.1.tgz\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们在解压后的目录里可以看到很多可执行文件，分别对应不同的CNI插件。本文，我们关注的是bridge插件。\u003c/p\u003e\n\n\u003cp\u003e因为我们在本文中将使用network namespace来模拟容器，所以在开始真正实验之前，我们还需要创建一个network namespace：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns add lab-ns\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns list\nlab-ns\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"配置cni插件\"\u003e配置CNI插件\u003c/h2\u003e\n\n\u003cp\u003e在运行CNI插件对容器网络进行配置的时候，我们首先需要告诉插件有关网络的定义信息。CNI对网络的定义是以JSON文件的格式保存的。接下来，我们在cni目录下再新建一个conf子目录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003econf\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003econf\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\n/root/test-cni/conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并把JSON格式的网络定义文件保存在这个目录下：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e lab-br0.conf \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\n{\n    \u0026#34;cniVersion\u0026#34;: \u0026#34;0.4.0\u0026#34;,\n    \u0026#34;name\u0026#34;: \u0026#34;lab-br0\u0026#34;,\n    \u0026#34;type\u0026#34;: \u0026#34;bridge\u0026#34;,\n    \u0026#34;bridge\u0026#34;: \u0026#34;lab-br0\u0026#34;,\n    \u0026#34;isGateway\u0026#34;: true,\n    \u0026#34;ipMasq\u0026#34;: true,\n    \u0026#34;ipam\u0026#34;: {\n        \u0026#34;type\u0026#34;: \u0026#34;host-local\u0026#34;,\n        \u0026#34;subnet\u0026#34;: \u0026#34;10.15.10.0/24\u0026#34;,\n        \u0026#34;routes\u0026#34;: [\n            { \u0026#34;dst\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34; },\n        ],\n        \u0026#34;rangeStart\u0026#34;: \u0026#34;10.15.10.100\u0026#34;,\n        \u0026#34;rangeEnd\u0026#34;: \u0026#34;10.15.10.200\u0026#34;,\n        \u0026#34;gateway\u0026#34;: \u0026#34;10.15.10.99\u0026#34;\n    }\n}\n\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，我们对这个文件里的每个配置项一一进行解释：\u003c/p\u003e\n\n\u003ch3 id=\"cniversion\"\u003ecniVersion\u003c/h3\u003e\n\n\u003cp\u003e代表CNI规范所用的版本。截止本文撰写期间，CNI规范的最新版本是0.4.0。\u003c/p\u003e\n\n\u003ch3 id=\"name\"\u003ename\u003c/h3\u003e\n\n\u003cp\u003e目标网络的名称。\u003c/p\u003e\n\n\u003ch3 id=\"type\"\u003etype\u003c/h3\u003e\n\n\u003cp\u003e所用插件的类型。在我们的例子，用的是bridge插件。\u003c/p\u003e\n\n\u003ch3 id=\"bridge和isgateway\"\u003ebridge和isGateway\u003c/h3\u003e\n\n\u003cp\u003e这两个都是和bridge插件相关的特定参数：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ebridge：我们通过它告诉bridge插件，将要创建的bridge(网桥)名称。\u003c/li\u003e\n  \u003cli\u003eisGateway：为true就是告诉插件，作为网关，给我们的bridge指定一个IP地址。这样，连接到bridge的容器就可以拿它当网关来用了。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"ipmasq\"\u003eipMasq\u003c/h3\u003e\n\n\u003cp\u003e为目标网络配上Outbound Masquerade(地址伪装)，即：由容器内部通过网关向外发送数据包时，对数据包的源IP地址进行修改。\u003c/p\u003e\n\n\u003cp\u003e当我们的容器以宿主机作为网关时，这个参数是必须要设置的。否则，从容器内部发出的数据包就没有办法通过网关路由到其他网段。因为容器内部的IP地址无法被目标网段识别，所以这些数据包最终会被丢弃掉。\u003c/p\u003e\n\n\u003ch3 id=\"ipam\"\u003eipam\u003c/h3\u003e\n\n\u003cp\u003eIPAM(IP Adderss Management)即IP地址管理，提供了一系列方法用于对IP和路由进行管理。实际上，它对应的是由CNI提供的一组标准IPAM插件，比如像host-local，dhcp，static等。其他插件，比如本文中用到的bridge插件，会调用我们所指定的IPAM插件，实现对网络设备IP地址的分配和管理。\u003c/p\u003e\n\n\u003cp\u003e以host-local插件为例，只要我们为它提供配置信息，定义好期望的子网与网关信息，以及允许的IP地址范围（可选），插件就会帮我们自动在目标网段里分配好IP地址。为了保证把IP地址不冲突，它把IP地址的分配信息保存在了宿主机的本地文件系统里，这样可以确保在同一台宿主机上运行的所有容器，IP地址一定都是彼此唯一的。\u003c/p\u003e\n\n\u003cp\u003e另一个插件dhcp，则会在宿主机上启动一个DHCP daemon守护进程。跑在宿主机上的容器，可以通过它向网络上的DHCP服务器发送请求，以获得相应的IP地址。\u003c/p\u003e\n\n\u003cp\u003e下面我们来看一下具体的参数配置：\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003etype：指定所用IPAM插件的名称，在我们的例子里，用的是host-local。\u003c/li\u003e\n  \u003cli\u003esubnet：为目标网络分配网段，包括网络ID和子网掩码，以CIDR形式标记。在我们的例子里为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.0/24\u003c/code\u003e，也就是目标网段为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.0\u003c/code\u003e，子网掩码为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e255.255.255.0\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003eroutes：用于指定路由规则，插件会为我们在容器的路由表里生成相应的规则。其中，dst表示希望到达的目标网段，以CIDR形式标记。gw对应网关的IP地址，也就是要到达目标网段所要经过的“next hop(下一跳)”。如果省略gw的话，那么插件会自动帮我们选择默认网关。在我们的例子里，gw选择的是默认网关，而dst为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.0.0.0/0\u003c/code\u003e则代表“任何网络”，表示数据包将通过默认网关发往任何网络。实际上，这对应的是一条默认路由规则，即：当所有其他路由规则都不匹配时，将选择该路由。\u003c/li\u003e\n  \u003cli\u003erangeStart：允许分配的IP地址范围的起始值\u003c/li\u003e\n  \u003cli\u003erangeEnd：允许分配的IP地址范围的结束值\u003c/li\u003e\n  \u003cli\u003egateway：为网关（也就是我们将要在宿主机上创建的bridge）指定的IP地址。如果省略的话，那么插件会自动从允许分配的IP地址范围内选择起始值作为网关的IP地址。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"运行cni插件\"\u003e运行CNI插件\u003c/h2\u003e\n\n\u003cp\u003e定义好网络配置文件以后，接下来就该运行CNI插件了。我们的bridge插件将会在宿主机上为我们创建bridge，然后把容器（或者说network namespace）通过veth pair连接到bridge上。\u003c/p\u003e\n\n\u003cp\u003e在开始运行插件之前，还有一件事情要做。我们要告诉bridge插件有关容器的一些信息，这些信息是通过环境变量传递给插件的。\u003c/p\u003e\n\n\u003ch3 id=\"cni_command\"\u003eCNI_COMMAND\u003c/h3\u003e\n\n\u003cp\u003e告诉CNI插件要执行的命令，允许的命令有ADD，DEL，CHECK，VERSION。我们的例子里用的是ADD，就是告诉插件把容器加入到bridge所对应的网络里。\u003c/p\u003e\n\n\u003cp\u003e对于支持CNI规范的容器系统而言，当容器启动的时候，系统就会自动调用相应的CNI插件，并设置CNI_COMMAND为ADD。相应地，DEL是在容器被销毁时调用的，用于清除在执行ADD阶段分配的网络资源。\u003c/p\u003e\n\n\u003cp\u003eCHECK用于检查容器网络是否正常。VERSION则用来显示插件的版本。\u003c/p\u003e\n\n\u003ch3 id=\"cni_containerid\"\u003eCNI_CONTAINERID\u003c/h3\u003e\n\n\u003cp\u003e告诉CNI插件，将要加入目标网络的容器所对应的network namespace的ID。在我们的例子里，就是lab-ns0。\u003c/p\u003e\n\n\u003ch3 id=\"cni_netns\"\u003eCNI_NETNS\u003c/h3\u003e\n\n\u003cp\u003e容器对应的network namespace在宿主机上的文件路径。可以在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/run/netns\u003c/code\u003e目录下找到我们刚才手工创建的network namespace:\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /var/run/netns\nlab-ns\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"cni_ifname\"\u003eCNI_IFNAME\u003c/h3\u003e\n\n\u003cp\u003e作为veth pair在容器一端的网络接口，我们所期望的名称。在我们的例子里，这个网络接口的名称是eth0。\u003c/p\u003e\n\n\u003ch3 id=\"cni_path\"\u003eCNI_PATH\u003c/h3\u003e\n\n\u003cp\u003eCNI插件的所在路径。在我们的例子里，因为是手工运行插件，所以我们直接去相应的路径下执行命令就可以了。但通常情况下，对CNI插件的调用是由容器系统来完成的，比如像Kubernetes，这个时候就需要通过CNI_PATH告诉系统去哪里找插件了。\u003c/p\u003e\n\n\u003cp\u003e最后，我们切换到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eplugins\u003c/code\u003e目录来运行bridge插件，把网络定义文件通过标准输入设备(STDIN)传给插件，同时指定相应的环境变量：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\n/root/test-cni/plugins\n\n\u003cspan class=\"nv\"\u003e$ CNI_COMMAND\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eADD \u003cspan class=\"nv\"\u003eCNI_CONTAINERID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003elab-ns \u003cspan class=\"nv\"\u003eCNI_NETNS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/var/run/netns/lab-ns \u003cspan class=\"nv\"\u003eCNI_IFNAME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eCNI_PATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ./bridge \u0026lt;../conf/lab-br0.conf\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\u0026#34;cniVersion\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0.4.0\u0026#34;\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;interfaces\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;lab-br0\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;mac\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;be:54:02:8c:4b:87\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;veth8ec19086\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;mac\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;76:52:41:98:f1:56\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;eth0\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;mac\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;42:2d:af:d7:0b:f0\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;sandbox\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;/var/run/netns/lab-ns\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;ips\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;interface\u0026#34;\u003c/span\u003e: 2,\n            \u003cspan class=\"s2\"\u003e\u0026#34;address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;10.15.10.100/24\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;gateway\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;10.15.10.99\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;routes\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;dst\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;dns\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从输出结果可以看到，根据我们刚才定义的目标网络，bridge插件为lab-br0分配的IP地址是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.99\u003c/code\u003e，为lab-ns分配的IP地址是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.100\u003c/code\u003e。下面我们就来进一步验证这一结果。\u003c/p\u003e\n\n\u003ch2 id=\"验证\"\u003e验证\u003c/h2\u003e\n\n\u003cp\u003e我们来看一下宿主机的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip addr show\n... ...\n5: lab-br0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether be:54:02:8c:4b:87 brd ff:ff:ff:ff:ff:ff\n    inet 10.15.10.99/24 brd 10.15.10.255 scope global lab-br0\n       valid_lft forever preferred_lft forever\n6: veth8ec19086@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master lab-br0 state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 76:52:41:98:f1:56 brd ff:ff:ff:ff:ff:ff link-netns lab-ns\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，bridge插件为我们新建的网桥lab-br0，IP地址正是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.99\u003c/code\u003e。还有veth pair在宿主机一端的网络接口veth8ec19086@if5。\u003c/p\u003e\n\n\u003cp\u003e查看lab-ns的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns ip addr show\n... ...\n5: eth0@if6: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 42:2d:af:d7:0b:f0 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.15.10.100/24 brd 10.15.10.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::402d:afff:fed7:bf0/64 scope \u003cspan class=\"nb\"\u003elink \n       \u003c/span\u003evalid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，veth pair位于lab-ns一端的网络接口，eth0@if6。bridge插件为它分配的IP地址是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.100\u003c/code\u003e，就在我们之前所指定的IP地址范围内。\u003c/p\u003e\n\n\u003cp\u003e再来看一下宿主机上的iptables：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eiptables-save | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003elab-br\n\u003cspan class=\"nt\"\u003e-A\u003c/span\u003e POSTROUTING \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.15.10.100/32 \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;name: \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elab-br0\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e id: \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elab-ns\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e CNI-95c521ba458df43df4d8c523\n\u003cspan class=\"nt\"\u003e-A\u003c/span\u003e CNI-95c521ba458df43df4d8c523 \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.15.10.0/24 \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;name: \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elab-br0\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e id: \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elab-ns\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e ACCEPT\n\u003cspan class=\"nt\"\u003e-A\u003c/span\u003e CNI-95c521ba458df43df4d8c523 \u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 224.0.0.0/4 \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;name: \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elab-br0\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e id: \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003elab-ns\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e MASQUERADE\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp\u003e可以看到，因为我们之前配了IP地址伪装，所以bridge插件自动为我们生成了相应的规则。当数据包里的源地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.100/32\u003c/code\u003e时，上面三条规则中的第一条就会匹配；然后就会跳到第二条规则，如果这个时候数据包里的目标地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.0/24\u003c/code\u003e网段，那么这条规则也会匹配，并跳到第三条规则；最后一条规则是为了排除目标地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e224.0.0.0/4\u003c/code\u003e的数据包，因为这种类型的数据包是为了在当前子网内进行多播(Multicast)用的，因此不应该被转发出去。当所有这些条件都满足时，我们指定系统为其进行IP地址伪装。\u003c/p\u003e\n\n\u003cp\u003e接着来看一下lab-ns里的路由规则：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns ip route\ndefault via 10.15.10.99 dev eth0 \n10.15.10.0/24 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.15.10.100 \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp\u003e这里的第一条规则，就是前面提到的默认路由规则。第二条规则告诉我们，所有来自lab-ns（IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.100\u003c/code\u003e）的数据包都将发往\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.0/24\u003c/code\u003e网段。而所有目标地址为其他网段的数据包，则将匹配默认路由规则，通过网关lab-br0（IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.99\u003c/code\u003e）进行转发。\u003c/p\u003e\n\n\u003cp\u003e另外，如果我们查看\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/lib/cni/\u003c/code\u003e目录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /var/lib/cni/networks\nlab-br0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp\u003e会发现这里有一个子目录，目录名就是我们指定的位于宿主机上的网桥lab-br0。作为IPAM插件的host-local，就是把IP地址的配置信息保存在这个目录下的：\u003c/p\u003e\n\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /var/lib/cni/networks/lab-br0/\ntotal 8\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e    1 root     root            12 Jun 15 23:14 10.15.10.100\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e    1 root     root            12 Jun 15 23:14 last_reserved_ip.0\n\u003cspan class=\"nt\"\u003e-rwxr-x---\u003c/span\u003e    1 root     root             0 Jun 15 23:14 lock\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.10.100\u003c/code\u003e文件，其文件名就是我们分配给lab-ns的IP地址，而文件内容则对应network namespace的Id：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ cat /var/lib/cni/networks/lab-br0/10.15.10.100\nlab-ns\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e至于last_reserved_ip.0文件，它保存了上次用过的IP地址，从而保证了host-local在下次为容器分配IP地址时，不会和网段里的其他设备产生冲突：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /var/lib/cni/networks/lab-br0/last_reserved_ip.0 \n10.15.10.100\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，让我们启动loopback网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003edev lo up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，在lab-ns内部测试一下和网关的连通性：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns ping 10.15.10.99 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 10.15.10.99 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.15.10.99\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 10.15.10.99: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.132 ms\n64 bytes from 10.15.10.99: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.164 ms\n64 bytes from 10.15.10.99: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.167 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 10.15.10.99 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.132/0.154/0.167 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e还有和lab-ns里eth0的连通性：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns ping 10.15.10.100 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 10.15.10.100 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.15.10.100\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 10.15.10.100: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.088 ms\n64 bytes from 10.15.10.100: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.132 ms\n64 bytes from 10.15.10.100: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.131 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 10.15.10.100 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.088/0.117/0.132 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-03-07T00:00:00+08:00\"\u003eMarch 7, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86CNI%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-cni%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-cni%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-cni%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/2021-relaunch/\" class=\"pagination--pager\" title=\"2021，重新出发\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/k8s-net-cni-docker-rkt/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——将CNI用于容器\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-03-07T00:00:00+08:00",
  "Author": "MornigSpace"
}