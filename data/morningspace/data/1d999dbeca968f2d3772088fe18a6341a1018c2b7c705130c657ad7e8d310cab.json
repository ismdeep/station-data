{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——Pod网络(上)",
  "Link": "https://morningspace.github.io/tech/k8s-net-pod-1/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#kubernetes里的cni\"\u003eKubernetes里的CNI\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#关于pod\"\u003e关于Pod\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#pause容器\"\u003ePause容器\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eKubenenetes是怎么使用CNI的呢？作为Kubernetes集群里最小的执行单元，Pod究竟有哪些特点呢？为什么每个Pod都自带一个Pause容器呢？\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/pod-1.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"kubernetes里的cni\"\u003eKubernetes里的CNI\u003c/h2\u003e\n\n\u003cp\u003e通过前面几篇文章，我们对CNI有了一定的了解。现在，让我们回到作为容器编排技术的Kubernetes上，看一下它是怎么使用CNI的。\u003c/p\u003e\n\n\u003cp\u003e在本文以及后续几篇文章里，我们会以\u003ca href=\"https://github.com/kubernetes-sigs/kubeadm-dind-cluster\"\u003ekubeadm-dind-cluster\u003c/a\u003e为例来做一些实验。这是Kubernetes SIG(Special Interest Group)下的一个子项目，它利用kubeadm，结合Docker-in-Docker技术，把Docker容器当作Kubernetes集群中的节点，可以实现在本机快速搭建起一个多节点的集群环境。有关如何使用kubeadm-dind-cluster，以及笔者对它所做的优化，可以参考Kuberntes系列的热身篇\u003ca href=\"/tech/k8s-run/\"\u003eLaunch multi-node Kubernetes cluster locally in one minute, and more…\u003c/a\u003e一文。\u003c/p\u003e\n\n\u003cp\u003e默认情况下，kubeadm-dind-cluster会启动一个由三个节点构成的集群，包括一个master和两个node。下面我们就选择master节点，登录到上面去看一下。因为这些节点本质上都是Docker容器，所以我们可以用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker exec\u003c/code\u003e命令进入到代表master节点的容器里。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e kube-master bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们知道，Kubernetes是通过kubelet作为各个节点的agent，对节点进行管理的。通过执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eps axuw\u003c/code\u003e命令，可以查看到kubelet在启动时所使用的参数：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eps axuw | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecni\nroot       348  4.9  1.4 916936 116788 ?       Ssl  23:25   1:03 /k8s/hyperkube kubelet \u003cspan class=\"nt\"\u003e--kubeconfig\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/etc/kubernetes/kubelet.conf \u003cspan class=\"nt\"\u003e--config\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/var/lib/kubelet/config.yaml \u003cspan class=\"nt\"\u003e--cgroup-driver\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecgroupfs \u003cspan class=\"nt\"\u003e--network-plugin\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecni \u003cspan class=\"nt\"\u003e--pod-infra-container-image\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ek8s.gcr.io/pause:3.1 \u003cspan class=\"nt\"\u003e--pod-manifest-path\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/etc/kubernetes/manifests \u003cspan class=\"nt\"\u003e--allow-privileged\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"nt\"\u003e--network-plugin\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecni \u003cspan class=\"nt\"\u003e--cni-conf-dir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/etc/cni/net.d \u003cspan class=\"nt\"\u003e--cni-bin-dir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/opt/cni/bin \u003cspan class=\"nt\"\u003e--cluster-dns\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e10.96.0.10 \u003cspan class=\"nt\"\u003e--cluster-domain\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecluster.local \u003cspan class=\"nt\"\u003e--eviction-hard\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ememory.available\u0026lt;100Mi,nodefs.available\u0026lt;100Mi,nodefs.inodesFree\u0026lt;1000 \u003cspan class=\"nt\"\u003e--fail-swap-on\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"nt\"\u003e--bootstrap-kubeconfig\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/etc/kubernetes/bootstrap-kubelet.conf \u003cspan class=\"nt\"\u003e--feature-gates\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003eDynamicKubeletConfig\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"nt\"\u003e--v\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4\nroot      9725  0.0  0.0  11108   912 pts/0    S+   23:46   0:00 \u003cspan class=\"nb\"\u003egrep \u003c/span\u003ecni\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e比如在我们的例子里，可以注意到kubelet的命令行参数里有如下几个参数是和CNI有关的：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--network-plugin\u003c/code\u003e：用于指明Kubernetes所使用的网络插件，如果取值为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecni\u003c/code\u003e，就说明用的是CNI插件；\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--cni-bin-dir\u003c/code\u003e：指向一个目录，用于存放所有CNI插件的二进制可执行文件，在我们的例子里，它的值为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/cni/bin\u003c/code\u003e；\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--cni-conf-dir\u003c/code\u003e：用于存放CNI网络配置文件的目录，Kubernetes就是根据它来配置Pod网络的，在我们的例子里，它的值为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/cni/net.d\u003c/code\u003e；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果我们查看一下\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/opt/cni/bin\u003c/code\u003e目录下的内容，就会看到很多CNI插件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /opt/cni/bin/\nbridge\tdhcp  flannel  host-device  host-local\tipvlan\tloopback  macvlan  portmap  ptp  sample  tuning  vlan\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e而\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/cni/net.d\u003c/code\u003e目录下，则保存了一个名叫\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecni.conf\u003c/code\u003e的网络配置文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /etc/cni/net.d/\ncni.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个配置文件是由kubeadm-dind-cluster的脚本自动生成的，它在集群中的每个节点上都存在，且内容稍有不同，这里列出的是master节点上的内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /etc/cni/net.d/cni.conf \n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;cniVersion\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0.3.1\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;dindnet\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;dind0\u0026#34;\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;isDefaultGateway\u0026#34;\u003c/span\u003e: \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;hairpinMode\u0026#34;\u003c/span\u003e: \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;ipMasq\u0026#34;\u003c/span\u003e: \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e,\n  \u003cspan class=\"s2\"\u003e\u0026#34;ipam\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\u0026#34;type\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;host-local\u0026#34;\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;ranges\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"s2\"\u003e\u0026#34;subnet\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;10.244.1.0/24\u0026#34;\u003c/span\u003e,\n          \u003cspan class=\"s2\"\u003e\u0026#34;gateway\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;10.244.1.1\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;routes\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;dst\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当kubelet收到请求要创建Pod的时候，它会去搜索\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecni-conf-dir\u003c/code\u003e目录下的这个配置文件，从中找到要执行的插件名称。然后去\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecni-bin-dir\u003c/code\u003e目录下执行相应的插件，为Pod配置网络环境。\u003c/p\u003e\n\n\u003cp\u003e可以看到，在我们的例子里，Kubernetes将会使用CNI的bridge插件，在宿主机一端生成一个名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edind0\u003c/code\u003e的bridge；并且它是利用IPAM插件host-local对网络进行IP地址分配的；作为Pod的网关，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edind0\u003c/code\u003e的IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.1.1\u003c/code\u003e，所有Pod都将位于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.1.0/24\u003c/code\u003e网段内；整个集群的网络名称为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edindnet\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e如果我们查看作为宿主机的当前节点上的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip addr show\n... ...\n4: dind0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 2e:52:45:ea:0f:ee brd ff:ff:ff:ff:ff:ff\n    inet 10.244.1.1/24 scope global dind0\n       valid_lft forever preferred_lft forever\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以注意到，的确有一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edind0\u003c/code\u003e的bridge，它的IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.1.1/24\u003c/code\u003e。那么，CNI插件在Pod一端又做了些什么呢？下面我们就一起来看一下。\u003c/p\u003e\n\n\u003ch2 id=\"关于pod\"\u003e关于Pod\u003c/h2\u003e\n\n\u003cp\u003ePod是由一个或多个容器构成的，它们彼此共享存储和网络，被共同调度，并在同一上下文里运行。位于同一Pod里的这些容器，就好比是容器技术出现之前，运行在同一物理机上的多个彼此相关的应用程序。因为Pod里的容器是共享网络的，准确地说是共享同一个network namespace，所以对外只有一个IP地址；同时，彼此之间又可以相互访问。\u003c/p\u003e\n\n\u003cp\u003e虽然我们目前还没有部署任何新的Pod，但是Kubernetes自身提供的服务也是通过Pod来部署的，它们通常都在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-system\u003c/code\u003e名字空间下。利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl get pod\u003c/code\u003e命令，我们可以列出集群中目前包含的Pod：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eget pod \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e kube-system \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ecustom-columns\u003cspan class=\"o\"\u003e=\u003c/span\u003eNAME:.metadata.name,NODE:.spec.nodeName,IP:.status.podIP\nNAME                                  NODE          IP\ncoredns-fb8b8dccf-vxxt5               kube-node-1   10.244.2.2\netcd-kube-master                      kube-master   10.192.0.2\nkube-apiserver-kube-master            kube-master   10.192.0.2\nkube-controller-manager-kube-master   kube-master   10.192.0.2\nkube-proxy-f2d74                      kube-master   10.192.0.2\nkube-proxy-px4g4                      kube-node-2   10.192.0.4\nkube-proxy-qkvwj                      kube-node-1   10.192.0.3\nkube-scheduler-kube-master            kube-master   10.192.0.2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-o\u003c/code\u003e参数对数据结果做了定制，目的是为了让输出结果在排版上更加紧凑。可以看到，这里列出了每一个Pod所在的节点，以及对应的IP地址。\u003c/p\u003e\n\n\u003cp\u003e我们知道，虽然Pod对容器进行了“包装”，但Pod里的容器实际上还是跑在Pod所在的节点机器上的。因此，我们仍然可以在节点上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker ps\u003c/code\u003e命令来查看跑在这个节点上的所有容器。\u003c/p\u003e\n\n\u003cp\u003e比如，我们以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eetcd-kube-master\u003c/code\u003e这个Pod为例，它就跑在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-master\u003c/code\u003e这个节点上，也就是当前集群里的master节点。在master节点上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker ps\u003c/code\u003e命令查看相应的Docker容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker ps | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eetcd\nd4fedb6f3e8f        2c4adeb21b4f           \u003cspan class=\"s2\"\u003e\u0026#34;etcd --advertise-cl…\u0026#34;\u003c/span\u003e   3 hours ago         Up 3 hours                              k8s_etcd_etcd-kube-master_kube-system_b3df8d6088284257da0011ac71ef453c_1\ndac475b9907b        k8s.gcr.io/pause:3.1   \u003cspan class=\"s2\"\u003e\u0026#34;/pause\u0026#34;\u003c/span\u003e                 3 hours ago         Up 3 hours                              k8s_POD_etcd-kube-master_kube-system_b3df8d6088284257da0011ac71ef453c_1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，除了etcd本身对应的容器以外，这里还有一个叫“pause”的容器，那这个pause又是干什么用的呢？\u003c/p\u003e\n\n\u003ch2 id=\"pause容器\"\u003ePause容器\u003c/h2\u003e\n\n\u003cp\u003e当我们用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker inspect\u003c/code\u003e命令查看etcd容器时：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker inspect d4fedb6f3e8f|grep NetworkMode\n            \u003cspan class=\"s2\"\u003e\u0026#34;NetworkMode\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;container:dac475b9907b82ec5ab0c227789df1221fba8e9cf53341aff1e4a34ab569390c\u0026#34;\u003c/span\u003e,\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会发现，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eNetworkMode\u003c/code\u003e的值遵循\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econtainer:\u0026lt;name|id\u0026gt;\u003c/code\u003e这样一种格式。这里面的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ename\u003c/code\u003e或\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eid\u003c/code\u003e是指某个容器的名称或Id。按照Docker的文档，这种格式的意思，是要求容器在启动以后加入到另一个容器的所在网络里，也就是network namespace。在我们的例子里，etcd启动后加入的，就是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003econtainer:\u003c/code\u003e后面的Id值所对应的那个容器。对照前面\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker ps\u003c/code\u003e的输出结果会发现，这个被要求加入的容器正是pause。也就是说，etcd加入了pause的网络。前面我们提到Pod里所有容器共享同一网络，实际上指的就是pause容器的网络。\u003c/p\u003e\n\n\u003cp\u003e那么，为什么选择pause容器的网络作为Pod的网络呢？试想一下，假设我们选择某个应用程序的容器来承担这个角色，一旦这个容器因为某些原因而崩溃，那么Pod里其他容器的网络就无法连通了，新的容器也无法再加入到Pod的网络里来。\u003c/p\u003e\n\n\u003cp\u003e这一现象可以通过实验来验证。假设我们在当前机器上启动两个容器，分别是：busybox1和busybox2，并让busybox2加入到busybox1的网络里：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-dit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e busybox1 busybox\ne4202f80580d1940d6e6b22bf7019bce5a9c11cc186e6a0d4e5263a7721261a0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-dit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e busybox2 \u003cspan class=\"nt\"\u003e--net\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003econtainer:busybox1 busybox\n0201b9edebb50b65be342e2b2014174ded2ac15c7fb01486379f7b4762d1aa40\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，如果我们分别对两个容器调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip addr show\u003c/code\u003e命令：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003ebusybox1 ip addr show\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003ebusybox2 ip addr show\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会发现它们的输出结果是完全一样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: tunl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ipip 0.0.0.0 brd 0.0.0.0\n3: ip6tnl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1452 qdisc noop qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/tunnel6 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 brd 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\n10: eth0@if11: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN\u0026gt; mtu 1500 qdisc noqueue \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这说明busybox1和busybox2是共享网络的，它们用了同一个网络接口eth0，IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e172.17.0.2\u003c/code\u003e。这个地址从宿主机一端是可以ping通的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eping 172.17.0.2 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3           \nPING 172.17.0.2 \u003cspan class=\"o\"\u003e(\u003c/span\u003e172.17.0.2\u003cspan class=\"o\"\u003e)\u003c/span\u003e 56\u003cspan class=\"o\"\u003e(\u003c/span\u003e84\u003cspan class=\"o\"\u003e)\u003c/span\u003e bytes of data.\n64 bytes from 172.17.0.2: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.161 ms\n64 bytes from 172.17.0.2: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.086 ms\n64 bytes from 172.17.0.2: \u003cspan class=\"nv\"\u003eicmp_seq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.082 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 172.17.0.2 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 received, 0% packet loss, \u003cspan class=\"nb\"\u003etime \u003c/span\u003e2087ms\nrtt min/avg/max/mdev \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.082/0.109/0.161/0.038 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在，假如我们把busybox1停掉：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker stop busybox1\nbusybox1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后再看busybox2的网络配置：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003ebusybox2 ip addr show\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: tunl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ipip 0.0.0.0 brd 0.0.0.0\n3: ip6tnl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1452 qdisc noop qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/tunnel6 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 brd 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会发现，输出结果里已经找不到eth0了。这个时候，虽然busybox2还处于运行状态，但是由于没有eth0，网络是没有办法连通的。\u003c/p\u003e\n\n\u003cp\u003e正是由于这样的原因，对于承担Pod网络环境的容器而言，就提出了一定的要求：它必须是简单小巧，而不会出错的！\u003c/p\u003e\n\n\u003cp\u003e再来看一看我们的pause容器，有兴趣的同学可以读一下它在GitHub上的\u003ca href=\"https://github.com/kubernetes/kubernetes/tree/master/build/pause/\"\u003e源代码\u003c/a\u003e，后面有机会我会单独写一篇文章来介绍它的逻辑。我们会发现，pause的代码非常简单，它的核心逻辑就是循环调用Linux提供的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003epause()\u003c/code\u003e函数，让当前进程进入休眠，直到有外部信号进来。这也是pause容器名称的由来。正是pause的特点，决定了它非常适合为Pod提供网络。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-04-11T00:00:00+08:00\"\u003eApril 11, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94Pod%E7%BD%91%E7%BB%9C%28%E4%B8%8A%29%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-pod-1%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-pod-1%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-pod-1%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/k8s-net-cni-coding-go/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——自己动手写CNI插件(下)\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/k8s-net-pod-2/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——Pod网络(下)\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-04-11T00:00:00+08:00",
  "Author": "MornigSpace"
}