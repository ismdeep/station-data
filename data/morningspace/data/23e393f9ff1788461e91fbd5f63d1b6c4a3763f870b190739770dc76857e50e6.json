{
  "Source": "morningspace",
  "Title": "编写自己的Kube Macro",
  "Link": "https://morningspace.github.io/tech/kubemacro-3/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#自己动手写macro\"\u003e自己动手写Macro\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#创建shell脚本文件\"\u003e创建Shell脚本文件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#实现macro的逻辑\"\u003e实现Macro的逻辑\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#为macro添加注释\"\u003e为Macro添加注释\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#关于macro的依赖\"\u003e关于Macro的依赖\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003eKubeMacro是一个kubectl插件，它用于把一组针对于kubectl命令或Kubernetes API的调用封装成一个命令，以便于在命令行多次执行。KubeMacro是一个位于\u003ca href=\"https://github.com/morningspace/kubemacro\"\u003eGitHub\u003c/a\u003e上的开源项目。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/kubemacro/kubemacro-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e作为KubeMacro系列的第三篇文章，本文将向大家介绍如何编写一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube macro\u003c/code\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"自己动手写macro\"\u003e自己动手写Macro\u003c/h2\u003e\n\n\u003cp\u003eKubeMacro本质上是一个kube macro的执行器。默认情况下，它并不绑定任何预定义的macro。我们可以通过访问 \u003ca href=\"https://morningspace.github.io/kubemacro-hub/\"\u003eKubeMacro Hub\u003c/a\u003e 网站浏览并安装由他人开发的kube macro。\u003c/p\u003e\n\n\u003cp\u003e如果现有的macro无法满足需求，你也可以编写属于你自己的macro。本文里，我将带着大家一步一步编写出一个macro，用于打印一组pod及其所包含的容器。此外，也非常欢迎大家把自己开发的macro提交到KubeMacro Hub，这样其他人也可以从中获益。\u003c/p\u003e\n\n\u003ch2 id=\"创建shell脚本文件\"\u003e创建Shell脚本文件\u003c/h2\u003e\n\n\u003cp\u003e首先，让我们创建一个shell脚本文件，取名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget-pod-containers.sh\u003c/code\u003e，并将它放到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e$HOME/.kubemacro\u003c/code\u003e目录下。这里是KubeMacro加载所有macro的地方。每当KubeMacro启动时，它会寻找该目录下的所有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.sh\u003c/code\u003e文件，并作为macro加载到内存。\u003c/p\u003e\n\n\u003cp\u003e在这个脚本文件里，我们是通过一个shell函数来实现macro的逻辑的。在我们的例子里，这个函数的名字是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget-pod-containers\u003c/code\u003e，目前函数体还是空的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003eget-pod-containers \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n :\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e为了测试这个macro，我们可以调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl macro\u003c/code\u003e命令，并指定函数名\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget-pod-containers\u003c/code\u003e作为该macro的名字：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl macro get-pod-containers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e正常情况下，我们会看到命令能够正确返回，只是返回结果是空的。接下来，让我们为函数加入具体的实现逻辑。\u003c/p\u003e\n\n\u003ch2 id=\"实现macro的逻辑\"\u003e实现Macro的逻辑\u003c/h2\u003e\n\n\u003cp\u003e将下列逻辑加入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget-pod-containers\u003c/code\u003e函数：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003eget-pod-containers \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e=()\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003ens\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# Parse the arguments input from command line\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$# \u003c/span\u003e\u003cspan class=\"nt\"\u003e-gt\u003c/span\u003e 0 \u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n    case\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"nt\"\u003e--namespace\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"nt\"\u003e-n\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"nt\"\u003e--namespace\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003ens\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$2\u003c/span\u003e\n      args+\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"nv\"\u003e$2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eshift\n      shift\u003c/span\u003e \u003cspan class=\"p\"\u003e;;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"nt\"\u003e--all-namespaces\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003ens\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;all namespaces\u0026#34;\u003c/span\u003e\n      args+\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e \u003cspan class=\"p\"\u003e;;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      args+\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eshift\u003c/span\u003e \u003cspan class=\"p\"\u003e;;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eesac\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# Run kubectl get and define custom columns to include pod container names\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003ecustom_columns\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;NAME:.metadata.name,CONTAINERS:.spec.containers[*].name\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ns\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;all namespaces\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nv\"\u003ecustom_columns\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;NAMESPACE:.metadata.namespace,\u003c/span\u003e\u003cspan class=\"nv\"\u003e$custom_columns\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\n  \u003c/span\u003ekubectl get pods \u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e custom-columns\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$custom_columns\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e大体而言，上述函数做了两件事情：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e解析从命令行传入的输入参数。\u003c/li\u003e\n  \u003cli\u003e执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl get\u003c/code\u003e命令，并定制了输出列，通过指定JSONPath，把从pod定义中解析得到的容器名显示输出。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e现在，让我们再次执行该macro。这一次我们会看到，命令会把所有位于当前namespace下的pod及其容器都返回回来：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl macro get-pod-containers\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"为macro添加注释\"\u003e为Macro添加注释\u003c/h2\u003e\n\n\u003cp\u003e到目前为止，我们已经实现了macro的全部逻辑。是不是很简单啊？不过，还有一件事情我们需要做。当执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl macro\u003c/code\u003e并带着\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-h/--help\u003c/code\u003e参数或者不带任何参数时，为了能够让我们的macro出现在已安装macro的列表里，我们还需要为macro添加一个特别的注释。\u003c/p\u003e\n\n\u003cp\u003e此外，当我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl macro \u0026lt;macro\u0026gt;\u003c/code\u003e命令并带着\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-h/--help\u003c/code\u003e参数时，为了能够打印输出针对该macro的帮助信息，我们还需要提前准备好相应的帮助信息。这些信息也是通过macro注释添加的。\u003c/p\u003e\n\n\u003cp\u003e不仅如此，如果你希望通过KubeMacro Hub把自己的macro分享给其他人，为macro定义更为详细的描述说明与使用方法同样也必须通过这个macro注释来实现。\u003c/p\u003e\n\n\u003cp\u003e为macro添加的注释必须以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e##\u003c/code\u003e开头，并以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e##\u003c/code\u003e结尾，两者之间包含了若干个字段，每个字段的名字都是以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e@\u003c/code\u003e打头的。下面是一个注释模版，包含了每个字段的详细解释：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Name: \u0026lt;Input your single-line macro name here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Description: \u0026lt;Input your single-line macro description here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026lt;Input detailed description for your macro started from here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026lt;It supports multiple lines and markdown syntax\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Author: \u0026lt;Input single-line author name here, support markdown syntax\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Usage: \u0026lt;Input your single-line macro usage information here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Options:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   \u0026lt;Input help information for all your options started from here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   \u0026lt;It supports multiple lines\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Examples:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   \u0026lt;Input detailed information for all examples started from here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   \u0026lt;It supports multiple lines\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Dependencies: \u0026lt;Input single-line comma-separated dependencies of your macro here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下面是针对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget-pod-containers\u003c/code\u003e的注释内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Name: get-pod-containers\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Description: List the pods with their containers.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# This is a sample macro to demonstrate how to write a macro by your own.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# It can be used to list pods and their containers. For example, to list\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# all pods and their containers in `kube-system` namespace:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# ```shell\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kubectl macro get-pod-containers -n kube-system\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# NAME                                         CONTAINERS\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# coredns-6955765f44-gtx2q                     coredns\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# coredns-6955765f44-tz96m                     coredns\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# etcd-kind-control-plane                      etcd\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kindnet-4pzm7                                kindnet-cni\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kube-apiserver-kind-control-plane            kube-apiserver\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kube-controller-manager-kind-control-plane   kube-controller-manager\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kube-proxy-b6wn8                             kube-proxy\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kube-scheduler-kind-control-plane            kube-scheduler\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# ```\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Author: [morningspace](https://github.com/morningspace/)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Usage: kubectl macro get-pod-containers [options]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Options:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   context is ignored even if specified with --namespace.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   -h, --help: Print the help information.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   -n, --namespace=\u0026#39;\u0026#39;: If present, the namespace scope for this CLI request.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   -l, --selector=\u0026#39;\u0026#39;: Selector (label query) to filter on, not including uninitialized ones.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#       --version: Print the version information.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   if no object name is provided.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#       --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Examples:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   # To list all pods with their containers in a namespace.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   kubectl macro get-pod-containers -n foo\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   # To list all pods with their containers in all namespaces.\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   kubectl macro get-pod-containers -A\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Dependencies: kubectl\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ecluster \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  ...\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e为了验证，我们可以执行如下命令，看一下我们的macro是否已经出现在已安装macro的列表中了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl macro \u003cspan class=\"nt\"\u003e--help\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果一切正常，我们会在返回结果中找到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eget-pod-containers\u003c/code\u003e。执行如下命令，打印输出macro的帮助信息：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl macro get-pod-containers \u003cspan class=\"nt\"\u003e--help\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们会看到如下输出结果，这正是我们在注释里定义的内容：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eget-pod-containers: List the pods with their containers.\nUsage: kubectl macro get-pod-containers [options]\nOptions:\n  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current\n  context is ignored even if specified with --namespace.\n  -h, --help: Print the help information.\n  -n, --namespace=\u0026#39;\u0026#39;: If present, the namespace scope for this CLI request.\n  -l, --selector=\u0026#39;\u0026#39;: Selector (label query) to filter on, not including uninitialized ones.\n      --version: Print the version information.\n  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded\n  if no object name is provided.\n      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.\nExamples:\n  # To list all pods with their containers in a namespace.\n  kubectl macro get-pod-containers -n foo\n  # To list all pods with their containers in all namespaces.\n  kubectl macro get-pod-containers -A\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"关于macro的依赖\"\u003e关于Macro的依赖\u003c/h2\u003e\n\n\u003cp\u003e也许你已经注意到了，在前面的macro注释里有一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e@Dependencies\u003c/code\u003e字段。一个macro可能会包含多个依赖。比如，有的macro需要用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejq\u003c/code\u003e命令来解析JSON数据，有的macro则依赖于其他macro来共同完成一项任务。为了成功执行一个macro，需要确保其所依赖的部分已经事先安装好了。\u003c/p\u003e\n\n\u003cp\u003e当编写一个macro的时候，我们可以根据需要为macro定义它的依赖。每当KubeMacro执行一个macro时，它首先会检查该macro是否存在任何依赖。如果有的话，KubeMacro会检查这些依赖是否已存在。如果不存在，则会报错。\u003c/p\u003e\n\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\n\u003cp\u003eget-pod-containers的最终版本可以从\u003ca href=\"https://github.com/morningspace/kubemacro/blob/main/docs/assets/get-pod-containers.sh\"\u003e这里\u003c/a\u003e找到。至此，我们可以看到，编写一个kube macro是非常容易的。如果你发现现有macro都不能满足你的需求时，那就自己动手写一个吧。你还可以以pull request的形式把macro提交到KubeMacro Hub的\u003ca href=\"http://github.com/morningspace/kubemacro-hub\"\u003eGitHub库\u003c/a\u003e。一旦被成功合并，其他人也能从中获益。\u003c/p\u003e\n\n\u003cp\u003e如果你想了解更多有关KubeMacro的信息，请阅读它的\u003ca href=\"https://morningspace.github.io/kubemacro/docs/\"\u003e在线文档\u003c/a\u003e。如果你喜欢这个项目，欢迎给它\u003ca href=\"https://github.com/morningspace/kubemacro\"\u003e加星\u003c/a\u003e。同时，也非常欢迎针对该项目的任何形式的贡献，比如bug报告以及代码提交。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-06-12T00:00:00+08:00\"\u003eJune 12, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84Kube+Macro%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubemacro-3%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubemacro-3%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubemacro-3%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/kubemacro-2/\" class=\"pagination--pager\" title=\"KubeMacro Hub：寻找你的Kube Macro\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/kubeassert-1/\" class=\"pagination--pager\" title=\"KubeAssert快速入门\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-06-12T00:00:00+08:00",
  "Author": "MornigSpace"
}