{
  "Source": "morningspace",
  "Title": "Elastic Shell 101 - Reindex Using Dialog",
  "Link": "https://morningspace.github.io/tech/elash101-4/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#what-is-it\"\u003eWhat is it\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#run-using-dialog\"\u003eRun using dialog\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#run-reindex\"\u003eRun reindex\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#query-tasks\"\u003eQuery tasks\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#generate-report\"\u003eGenerate report\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/101.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"what-is-it\"\u003eWhat is it\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/morningspace/elastic-shell\"\u003eElastic Shell\u003c/a\u003e is an open source project that includes a set of command line utilities and run as a client to help you manage \u003ca href=\"https://www.elastic.co/products/elasticsearch\"\u003eElasticsearch\u003c/a\u003e. It is entirely written in Bash Shell.\u003c/p\u003e\n\n\u003cp\u003e“Elastic Shell 101” is a series of posts that tells you how to use it.\u003c/p\u003e\n\n\u003cp\u003eIn this post, I will use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereindex\u003c/code\u003e command as example to show you how to run Elastic Shell in interactive mode using \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edialog\u003c/code\u003e and we will reindex remotely from one Elasticsearch cluster to another.\u003c/p\u003e\n\n\u003ch2 id=\"run-using-dialog\"\u003eRun using dialog\u003c/h2\u003e\n\n\u003cp\u003eUsually, we run Elastic Shell as a command line tool. It does not require user input when the command is running. However, Elastic Shell can also be run in interactive mode which provides context menu that allows user input to drive the way it goes. It is useful when you want to demonstrate, test, or investigate something with your Elasticsearch cluster. It clearly gives people the execution path.\u003c/p\u003e\n\n\u003cp\u003eWhen run Elastic Shell in interactive mode, it supports two types of user interface: plain text UI and dialog UI. In this post, I will show you how to run Elastic Shell using dialog UI. For plain text UI, you can check \u003ca href=\"/tech/elash101-3/\"\u003eElastic Shell 101 - Run in Interactive Mode\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eTo use dialog UI, you just need to add option \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--ui-dialog\u003c/code\u003e. We will use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereindex\u003c/code\u003e command as an example. After launch Elastic Shell, you will see the welcome dialog, then the main menu as below.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-main.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eEach menu item maps to the sub-command that is also available when run Elastic Shell in non-iteractive mode. In order to select a menu item, you can use arrow keys then press Enter key, or you can input the number in front of each menu item.\u003c/p\u003e\n\n\u003ch2 id=\"run-reindex\"\u003eRun reindex\u003c/h2\u003e\n\n\u003cp\u003eIn order to test reindex from one Elasticsearch cluster to another, you need to prepare two clusters, and have them both run in Docker containers.\u003c/p\u003e\n\n\u003cp\u003eBefore kick off the reindex, check both the source cluster and target cluster. In my case, the hostname of the source cluster is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch-old\u003c/code\u003e and the target cluster is \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch\u003c/code\u003e. They both use the default port number 9200. We will run reindex to migrate data from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch-old\u003c/code\u003e to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUse \u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html\"\u003eElasticsearch /_cat APIs\u003c/a\u003e to check indices on the target cluster, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch\u003c/code\u003e. There should be no index created yet. Before check the source cluster, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch-old\u003c/code\u003e, it needs to run \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfig\u003c/code\u003e command at first to change the hostname of the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_host\u003c/code\u003e setting, from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch-old\u003c/code\u003e to \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-config.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, run \u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html\"\u003eElasticsearch /_cat APIs\u003c/a\u003e again. It shows there’s an index called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egithub\u003c/code\u003e with more than four thousands documents stored there.\u003c/p\u003e\n\n\u003cp\u003eNow, let’s change the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003enet_host\u003c/code\u003e setting back to the target cluster, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelasticsearch\u003c/code\u003e, before start reindex.\u003c/p\u003e\n\n\u003cp\u003eThere’s one more thing to note. From the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfig\u003c/code\u003e dialog, you can see there are some settings where the names are started with “reindex”. They are the settings that are dedicated for reindex. You can adjust each of them as needed. Also, they can be found in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain.properties\u003c/code\u003e file in Elastic Shell \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfig\u003c/code\u003e folder, and can be overridden by environment variables.\u003c/p\u003e\n\n\u003cp\u003eOne of the reindex settings called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereindex_wait_for_completion\u003c/code\u003e. It’s false by default which means Elastic Shell will return immediately right after the reindex request is sent out. The reindex process will be run as tasks in background. We can use the \u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html\"\u003eElasticsearch Task Management API\u003c/a\u003e to query the tasks status.\u003c/p\u003e\n\n\u003cp\u003eNow, let’s kick off the reindex. Select \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erun\u003c/code\u003e from the main menu, input a job name, for example, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emyjob1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-input-jobname.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, select a pre-defined reindex request. These requests map to the disk files that are stored in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereindex\u003c/code\u003e folder which is the sub-folder of the Elastic Shell \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfig\u003c/code\u003e folder. Let’s select \u003ccode class=\"language-plaintext highlighter-rouge\"\u003erequest-gibhub\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-select-request.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, select queries. If you select query, it will be added to the reindex request when it’s sent to the source cluster to reindex a subset of the documents. For example, in our case, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003equeries-by-time\u003c/code\u003e option actually includes a set of time ranges that can be added as query to the reindex request, so that we can reindex a subset of the documents that matches the time range one request at a time.\u003c/p\u003e\n\n\u003cp\u003eMoreover, if we run multiple requests simultaneously, and each request covers a subset of the data, it will make the reindex more efficient. Let’s select \u003ccode class=\"language-plaintext highlighter-rouge\"\u003equeries-by-time\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-select-queries.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"query-tasks\"\u003eQuery tasks\u003c/h2\u003e\n\n\u003cp\u003eBecause the overall time range has been divided into a few pieces, and the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ewait_for_completion\u003c/code\u003e is false, there will be corresponding number of tasks run in background at the same time. Each time when Elastic Shell sends the reindex request with the query for a particular time range, it returns a task id that maps to the corresponding reindex task. In our case, we have 5 tasks.\u003c/p\u003e\n\n\u003cp\u003eLet’s select \u003ccode class=\"language-plaintext highlighter-rouge\"\u003etasks \u0026gt; running\u003c/code\u003e from the main menu to check the running tasks. This actually calls \u003ca href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html\"\u003eElasticsearch Task Management API\u003c/a\u003e under the hood. It will probably show empty result, which means all tasks that we launched just now have been completed. This is because the total amount of our test documents is relatively small which makes our reindex complete very quickly. If there’s much data, you will see the running tasks.\u003c/p\u003e\n\n\u003cp\u003eNow, let’s check the completed tasks. Use the job name that we input just now, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emyjob1\u003c/code\u003e. You will see all the details of the completed tasks.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-tasks-completed.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"generate-report\"\u003eGenerate report\u003c/h2\u003e\n\n\u003cp\u003eBesides the tasks monitoring, Elastic Shell also generates report for the reindex job. Select \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereport\u003c/code\u003e from the main menu, and use the name of the job that you want to check. You will see the report of your reindex job.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/dialog-report.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eFor each task, it includes the task id, the number of the documents reindexed by this task, the number of batches, time cost, the reindex query used, and so on. At the end of the report, there’s a summary of all the tasks being involved in the job. It includes the total number of the documents reindexed by all tasks, the total number of batches, the total time cost, and so on.\u003c/p\u003e\n\n\u003cp\u003eFor more stories on Elastic Shell, stay tuned for next posts! Any question about this post or Elastic Shell, feel free to leave comments or drop email at morningspace@yahoo.com.\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#elasticsearch\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003eelasticsearch\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#shell\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003eshell\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#studio\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003estudio\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#studio-elash-101\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003estudio-elash-101\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-04-13T00:00:00+08:00\"\u003eApril 13, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Elastic+Shell+101+-+Reindex+Using+Dialog%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Felash101-4%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Felash101-4%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Felash101-4%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/elash101-3/\" class=\"pagination--pager\" title=\"Elastic Shell 101 - Manage Snapshot Interactively\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/elash101-5/\" class=\"pagination--pager\" title=\"Elastic Shell 101 - Advanced Features\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-04-13T00:00:00+08:00",
  "Author": "MornigSpace"
}