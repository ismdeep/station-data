{
  "Source": "morningspace",
  "Title": "Git合并那些事——认识几种Merge方法",
  "Link": "https://morningspace.github.io/tech/git-merge-stories-1/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#准备实验环境\"\u003e准备实验环境\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#fast-forward-merge\"\u003eFast-Forward Merge\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#three-way-merge\"\u003eThree-Way Merge\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#squash-merge\"\u003eSquash Merge\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003e多人开发中的合并冲突是我们使用Git时常常会遇到的情况，小小合并门道大，讲述合并的那些事儿，晴耕 · 白话之“Git合并那些事”系列​持续连载中……\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"准备实验环境\"\u003e准备实验环境\u003c/h2\u003e\n\n\u003cp\u003e本文推荐大家使用\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e提供的两个Docker镜像作为实验环境：一个代表远程Git服务（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elab-git-remote\u003c/code\u003e），一个代表本地Git客户端（\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elab-git-local\u003c/code\u003e）。这两个镜像都可以从Docker Hub上找到：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003edocker pull morningspace/lab-git-remote\ndocker pull morningspace/lab-git-local\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有关这两个Docker镜像的具体使用方法，请见\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e项目的README。本文后续讨论的所有动手环节，都将围绕这两个Docker镜像展开。\u003c/p\u003e\n\n\u003cp\u003e为了方便后面做实验，我们先把这两个Docker镜像启动起来。首先是远程Git服务：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003edocker run \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e team-git-remote \u003cspan class=\"nt\"\u003e--hostname\u003c/span\u003e team-git-remote \u003cspan class=\"nt\"\u003e--net\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003elab \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 8080:80 morningspace/lab-git-remote\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后是本地Git客户端：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003edocker run \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e git-local-william \u003cspan class=\"nt\"\u003e--hostname\u003c/span\u003e git-local-william \u003cspan class=\"nt\"\u003e--net\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003elab \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nv\"\u003euser_name\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eWilliam \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nv\"\u003euser_email\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ewilliam@example.com morningspace/lab-git-local\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意，这里的用户名和邮件地址是通过参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e\u003c/code\u003e传入容器的，容器会根据传入的值，自动生成相应的Public Key。这个Public Key在容器启动时会打印到控制台。为了让Git客户端成功访问远程Git服务，我们需要从Git客户端通过SSH以root账号登录到远程Git服务（密码为passw0rd），然后把Public Key加入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/home/git/.ssh/authorized_keys\u003c/code\u003e文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003essh root@team-git-remote\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u0026lt;your_public_key\u0026gt; \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e /home/git/.ssh/authorized_keys\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，我们来创建一个本地Git库，本文我们要讨论的所有关于合并的故事都将在这个Git库里发生：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit init merge-stories\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /root/merge-stories/.git/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003emerge-stories\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"fast-forward-merge\"\u003eFast-Forward Merge\u003c/h2\u003e\n\n\u003cp\u003e首先，我们来看一下什么是Fast-Forward Merge（快进式合并）。Fast-Forward Merge是Git的各种合并方式中最容易理解的，也是较为常见的一种情况。\u003c/p\u003e\n\n\u003cp\u003e下面我们先往本地Git库里提交一些变更。在命令行下，按照顺序依次提交变更c1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nc1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c1\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster \u003cspan class=\"o\"\u003e(\u003c/span\u003eroot-commit\u003cspan class=\"o\"\u003e)\u003c/span\u003e cfbff28] c1\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e和c2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nc1 - c2\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c2\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster 9229adb] c2\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 1 deletion\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，再从master分支切换到dev分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout \u003cspan class=\"nt\"\u003e-b\u003c/span\u003e dev\nSwitched to a new branch \u003cspan class=\"s1\"\u003e\u0026#39;dev\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e继续提交变更c3：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nc1 - c2\n      + - c3\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c3\n\u003cspan class=\"o\"\u003e[\u003c/span\u003edev c594fa9] c3\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e和c4：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nc1 - c2\n      + - c3 - c4\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c4\n\u003cspan class=\"o\"\u003e[\u003c/span\u003edev 0f029c3] c4\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 1 deletion\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e执行上述命令后，用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e可以看到我们的提交历史：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们在两个分支上的提交历史如图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-1.jpg\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e现在，让我们切换回master分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并把dev分支上的变更合并到master：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge dev\nUpdating 9229adb..0f029c3\nFast-forward\n README | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到输出结果中的“Fast-forward”，这表明Git在做合并时采用的是Fast-Forward Merge。此时，再观察一下Git的提交历史：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master, dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以及相应的图示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e我们会发现，由于master分支从c2开始与dev分叉以后就再也没有新的提交了，所以Git只是简单地把master的head指针向前移动到c4，合并就完成了。这就是所谓的Fast-Forward Merge。因为不涉及内容变更的比较，所以这种合并方式效率很高。Fast-Forward Merge要求参与合并的两个分支上的提交必须是“一脉相承”的父子或祖孙关系。不过它有个缺点，作为被合并的dev分支，它的提交历史在合并以后会和master分支的提交历史重合。\u003c/p\u003e\n\n\u003cp\u003e如果我们想在合并后保留来自被合并分支的提交历史，并显式标注出合并发生的位置，那就需要在执行合并时加上参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--no-ff\u003c/code\u003e。当然，这样也表示我们在合并时将不使用Fast-Forward Merge。为了演示这一点，让我们用git reset回退到c2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e 9229adb\nHEAD is now at 9229adb c2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，再进行一次从dev到master的合并，并指定参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--no-ff\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e--no-ff\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c5 dev\nMerge made by the \u003cspan class=\"s1\"\u003e\u0026#39;recursive\u0026#39;\u003c/span\u003e strategy.\n README | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这一次，由于没有采用Fast-Forward Merge，Git会为我们生成一个新的提交。在执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e时，我们还利用参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-m\u003c/code\u003e为这个新的提交记录指定了“名称”：c5。这里是合并之后的提交历史：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   b735987 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c5\n|\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e以及相应的图示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e实际上，当使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--no-ff\u003c/code\u003e参数进行合并时，我们的合并方式就变成了Three-Way Merge了。下面我们就来看一看，什么是Three-Way Merge。\u003c/p\u003e\n\n\u003ch2 id=\"three-way-merge\"\u003eThree-Way Merge\u003c/h2\u003e\n\n\u003cp\u003e前一节我们提到了，如果在合并时使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--no-ff\u003c/code\u003e参数，Git就会采用Three-Way Merge（三方合并）对两个分支进行合并。那么什么是Three-Way Merge呢？这所谓的“三方”到底是哪三方呢？\u003c/p\u003e\n\n\u003cp\u003e我们先通过一个例子来说明：假设William和Nicole各自都在对同一个文件进行修改。这个时候，我们要对两个人的修改进行合并了。如果只对William和Nicole各自的文件进行对比，也就是所谓的“diff”（或者也有人称之为“Two-Way Merge”），那么工具在帮我们做合并时，只知道两个文件在同一行上有差异，却没办法知道在合并后的版本里，到底该保留谁的版本，所以只能交给用户自己手工来决定。这就是普通的Merge工具所能做的。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-4.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e和普通的Merge工具相比，Git最大的不同在于它记录了文件的提交历史，因此可以向前回溯文件修改前的“原件”。它在合并时不仅会看两人各自的文件内容，还会看之前的原件。通过和原来版本的对比，就可以清楚地知道，应该保留Nicole的版本，因为William的版本和原件相比并没有变化。这一过程可以由工具自动完成，而不用像Two-Way Merge那样，需要交给用户手工来决定，这就是Three-Way Merge。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-5.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e前面我们提到了，在用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e进行合并时，如果使用参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--no-ff\u003c/code\u003e，就会强制采用Three-Way Merge。实际上，还有一种常见的情况也会自动触发Three-Way Merge。下面我们就通过对本地Git库的操作，结合提交历史具体来看一下。接着前一节的例子，我们在master分支上再次执行git reset回退到c2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e 9229adb\nHEAD is now at 9229adb c2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后对README进行修改：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \n      c5\n      /\nc1 - c2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并生成新的提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c5\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster 098be39] c5\n 1 file changed, 2 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e查看提交历史就可以看到，master分支在与dev分支分叉之后有了新的提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 098be39 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c5\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如图所示，这个时候我们就没有办法简单地通过移动指针来进行合并了。否则，master分支上分叉以后的提交就会在合并之后丢失：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-6.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这个时候，Git会自动采用Three-Way Merge方式进行合并。首先，它会在两个分支上分别找到head指针（又被称为branch tip）所对应的提交：c4和c5。然后，找到距离它们俩最近的“共同祖先”：c2（也就是前面所说的“原件”，又被称为common ancestor），然后进行Three-Way Merge。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c6 dev\nAuto-merging README\nMerge made by the \u003cspan class=\"s1\"\u003e\u0026#39;recursive\u0026#39;\u003c/span\u003e strategy.\n README | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e根据合并的结果，Git会生成一个新的快照，并创建一个新的提交指向这个快照。这个提交被称为“合并提交”（merge commit）：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   9c3ee95 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c6\n|\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | 098be39 c5\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这种提交特别的地方在于，它有两个parent。如图所示，合并提交c6的parent分别是c4和c5：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-7.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"squash-merge\"\u003eSquash Merge\u003c/h2\u003e\n\n\u003cp\u003e接下来，我们再来看另一种Merge方式——Squash Merge。所谓Squash Merge，是指Git在做两个分支间的合并时，会把被合并分支（通常被称为topic分支）上的所有变更“压缩（squash）”成一个提交，追加到当前分支的后面，作为“合并提交”（merge commit）。从参与合并的文件变更上来说，Squash Merge和普通Merge并没有任何区别，效果完全一样。唯一的区别体现在提交历史上：正如我们前面提到的，对于普通的Merge而言，在当前分支上的合并提交通常会有两个parent；而Squash Merge却只有一个。\u003c/p\u003e\n\n\u003cp\u003e下面我们通过一个例子来加深理解。还是回到我们前面做实验用的本地Git库，在master分支上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit reset\u003c/code\u003e回退到c2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e 098be39\nHEAD is now at 098be39 c5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，master分支和dev分支的提交历史是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 098be39 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c5\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-8.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e现在，让我们执行一次Squash Merge，把dev分支的内容合并到master分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e--squash\u003c/span\u003e dev\nAuto-merging README\nSquash commit \u003cspan class=\"nt\"\u003e--\u003c/span\u003e not updating HEAD\nAutomatic merge went well\u003cspan class=\"p\"\u003e;\u003c/span\u003e stopped before committing as requested\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，生成新的提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c6\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster 0b7fd35] c6\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e观察提交历史：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 0b7fd35 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c6\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 098be39 c5\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0f029c3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e c594fa9 c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9229adb c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e cfbff28 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从图上可以看到，作为合并提交的c6，的确只有一个parent，即：c5。而且，如果这个时候我们把dev分支删掉，整个提交历史就会变得非常干净。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-9.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eSquash Merge不会像普通Merge那样在合并后的提交历史里保留被合并分支的分叉，被合并分支上的提交记录也不会出现在合并后的提交历史里，所有被合并分支上的变更都被“压缩”成了一个合并提交。\u003c/p\u003e\n\n\u003cp\u003e如果在被合并分支上，完整的提交历史里包含了很多中间提交（intermediate commit），比如：改正一个小小的拼写错误可能也会成为一个独立的提交，而我们并不希望在合并时把这些细节都反应在当前分支的提交历史里。这时，我们就可以选择Squash Merge。\u003c/p\u003e\n\n\u003cp\u003e另外，后面我们还会看到，如果在合并时想去除被合并分支上的那些中间提交，我们还可选择Rebase。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-08-18T00:00:00+08:00\"\u003eAugust 18, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E5%90%88%E5%B9%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86%E5%87%A0%E7%A7%8DMerge%E6%96%B9%E6%B3%95%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-1%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-1%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-1%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/inside-git-3/\" class=\"pagination--pager\" title=\"Git解密——认识Git引用\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/git-merge-stories-2/\" class=\"pagination--pager\" title=\"Git合并那些事——Merge策略（上）\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-08-18T00:00:00+08:00",
  "Author": "MornigSpace"
}