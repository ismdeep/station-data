{
  "Source": "morningspace",
  "Title": "Elastic Shell 101 - Advanced Features",
  "Link": "https://morningspace.github.io/tech/elash101-5/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#what-is-it\"\u003eWhat is it\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#auto-completion\"\u003eAuto completion\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#logging\"\u003eLogging\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#run-upgrade\"\u003eRun upgrade\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#dry-run\"\u003eDry run\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#dependency-check\"\u003eDependency check\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e\u003cimg src=\"/assets/images/studio/elash/101.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"what-is-it\"\u003eWhat is it\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/morningspace/elastic-shell\"\u003eElastic Shell\u003c/a\u003e is an open source project that includes a set of command line utilities and run as a client to help you manage \u003ca href=\"https://www.elastic.co/products/elasticsearch\"\u003eElasticsearch\u003c/a\u003e. It is entirely written in Bash Shell.\u003c/p\u003e\n\n\u003cp\u003e“Elastic Shell 101” is a series of posts that tells you how to use it.\u003c/p\u003e\n\n\u003cp\u003eIn this post, I will use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupgrade\u003c/code\u003e command as an example to demonstrate some advanced features of Elastic Shell such as \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eauto completion\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003elogging\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edry run\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edependency check\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"auto-completion\"\u003eAuto completion\u003c/h2\u003e\n\n\u003cp\u003eTo remember all the Elastic Shell commands, sub-commands, options, and arguments may not be very easy. There are a couple of ways that can help.\u003c/p\u003e\n\n\u003cp\u003eYou can run command with \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--help\u003c/code\u003e option to read the help information. Or, you don’t have to input all the command arguments because Elastic Shell can tell you what are the next available sub commands or arguments that you can use based on the context.\u003c/p\u003e\n\n\u003cp\u003eOther than that, you can use \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eauto completion\u003c/code\u003e. For example, if we type \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelash\u003c/code\u003e, then double tabs, it will give you a suggestion list for the available commands that you can use.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# elash \nindex     reindex   snapshot  upgrade   \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIf you type \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelash up\u003c/code\u003e, then it will auto-complete that for you because only the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupgrade\u003c/code\u003e command is started from \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eup\u003c/code\u003e. Continue to type double tabs, it will continue to give you the suggestions.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# elash upgrade \ncat          rolling      config       --ui-dialog  --help       \nfull         report       --ui-text    --dry-run    \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eWith all these different ways, you can learn how to run the Elastic Shell commands by yourself!\u003c/p\u003e\n\n\u003ch2 id=\"logging\"\u003eLogging\u003c/h2\u003e\n\n\u003cp\u003eElastic Shell prints logs to the console when you run its commands. It also supports logging to file. This leverages on \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyslogd\u003c/code\u003e and is disabled by default.\u003c/p\u003e\n\n\u003cp\u003eTo enable it, if you are using the Elastic Shell Docker image, just simply start \u003ccode class=\"language-plaintext highlighter-rouge\"\u003esyslogd\u003c/code\u003e. Then all set. The log file called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eelash.log\u003c/code\u003e can be found at \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/log\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet’s run a full upgrade and see what it logs to the file. The Elastic Shell \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupgrade\u003c/code\u003e command has a sub-command called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ereport\u003c/code\u003e. It is used to report the current upgrade status of the Elasticsearch cluster. In our case, we can see there are three nodes in the cluster. The current Elasticsearch version is 5.5.1. We are going to upgrade them to the target Elasticsearch version 6.3.2.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# elash upgrade report \n\nReport of Upgrades\n------------------------------------------------------------------------------\n                          Host       From    Current         To   Upgraded\n------------------------------------------------------------------------------\n   http://elasticsearch-1:9200      5.5.1      5.5.1      6.3.2         no\n   http://elasticsearch-2:9200      5.5.1      5.5.1      6.3.2         no\n   http://elasticsearch-3:9200      5.5.1      5.5.1      6.3.2         no\n------------------------------------------------------------------------------\n\nCommands/Options:\n  cat\n  full\n  rolling\n  report\n  config\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThe source version, target version, and the hostnames of the cluster nodes are configured in \u003ccode class=\"language-plaintext highlighter-rouge\"\u003emain.properties\u003c/code\u003e file located at Elastic Shell \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfig\u003c/code\u003e folder. They can also be overridden by environment variables.\u003c/p\u003e\n\n\u003ch2 id=\"run-upgrade\"\u003eRun upgrade\u003c/h2\u003e\n\n\u003cp\u003eLet’s run \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupgrade full\u003c/code\u003e to launch a full cluster restart upgrade that requires a full cluster restart during the upgrade. You will see, Elastic Shell will disable shard allocation at first, then perform a synced flush which is configurable.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# elash upgrade full\n\nSet Shard Allocation\n------------------------------------------------------------------------------\n{\n  \u0026#34;acknowledged\u0026#34;: true,\n  \u0026#34;persistent\u0026#34;: {\n    \u0026#34;cluster\u0026#34;: {\n      \u0026#34;routing\u0026#34;: {\n        \u0026#34;allocation\u0026#34;: {\n          \u0026#34;enable\u0026#34;: \u0026#34;none\u0026#34;\n        }\n      }\n    }\n  },\n  \u0026#34;transient\u0026#34;: {}\n}\n\nPerform Synced Flush\n------------------------------------------------------------------------------\n{\n  \u0026#34;_shards\u0026#34;: {\n    \u0026#34;total\u0026#34;: 0,\n    \u0026#34;successful\u0026#34;: 0,\n    \u0026#34;failed\u0026#34;: 0\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThen, it will wait for the cluster to be stopped. During the time, let’s stop the cluster and start a new one which have the Elasticsearch with target version installed. After it’s started, let’s go back to the terminal window that is running Elastic Shell.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eProgress\n------------------------------------------------------------------------------\nThu Feb 21 06:50:20 UTC 2019 waiting for the cluster to be stopped......[done]\nThu Feb 21 06:50:25 UTC 2019 waiting for the cluster to be started...................[done]\nThu Feb 21 06:50:45 UTC 2019 the cluster has been restarted\n\nSet Shard Allocation\n------------------------------------------------------------------------------\n{\n  \u0026#34;acknowledged\u0026#34;: true,\n  \u0026#34;persistent\u0026#34;: {},\n  \u0026#34;transient\u0026#34;: {}\n}\n\nProgress\n------------------------------------------------------------------------------\nThu Feb 21 06:50:46 UTC 2019 waiting for the cluster to be green.[done]\nThu Feb 21 06:50:46 UTC 2019 the cluster has become green\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eYou will see the cluster restart has been detected by Elastic Shell, and after the new cluster is fully started, Elastic Shell will re-enable the shard allocation, then wait for the cluster healthiness becomes green.\u003c/p\u003e\n\n\u003cp\u003eNow, let’s go to check the log file. It shows what command we choose, and all steps that Elastic Shell performed with every single request it sends.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# cat /var/log/elash.log \nFeb 21 06:59:18 ab097271ac11 local7.info root: ##################################################\nFeb 21 06:59:18 ab097271ac11 local7.info root: # elash started at Thu Feb 21 06:59:18 UTC 2019\nFeb 21 06:59:18 ab097271ac11 local7.info root: ##################################################\nFeb 21 06:59:18 ab097271ac11 local7.info root: Current arg: full, available options: cat full rolling report config\nFeb 21 06:59:18 ab097271ac11 local7.info root: User choice: choice=full\nFeb 21 06:59:18 ab097271ac11 local7.info root: curl --show-error -X GET http://elasticsearch-1:9200/ 2\u0026gt;\u0026amp;1 --silent --header Content-Type: application/json\nFeb 21 06:59:19 ab097271ac11 local7.info root: curl --show-error -X PUT http://elasticsearch-1:9200/_cluster/settings 2\u0026gt;\u0026amp;1 --silent --data {\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"dry-run\"\u003eDry run\u003c/h2\u003e\n\n\u003cp\u003eIt is important to note that some operations such as upgrade, reindex, delete index are dangerous. To avoid mistake, you can run Elastic Shell in dry run mode before run it in production environment. In order to do so, you just need to add \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--dry-run\u003c/code\u003e option.\u003c/p\u003e\n\n\u003cp\u003eFor example, let’s try to delete \u003ccode class=\"language-plaintext highlighter-rouge\"\u003egithub\u003c/code\u003e index in dry run mode. By default, you will see the returned response is mocked.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# elash index --dry-run delete github\n\nDelete github\n------------------------------------------------------------------------------\n(dry run...)\n\nCommands/Options:\n  companydatabase\n  github\n  ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis is true because Elastic Shell doesn’t really touch the target server. All HTTP calls made to Elasticsearch cluster are mocked and they do not go through the network traffic. After dry run is finished, usually, you can open the log file to check the curl command details being involved and see if that is what you expect. For example, to check if the hostname, port number, or the name of the index to be deleted is correct.\u003c/p\u003e\n\n\u003cp\u003eIn some cases that are more complicated, such as upgrade, we cannot simply return the same mock response all the time. For example, our \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupgrade report\u003c/code\u003e command will actually send request to Elasticsearch cluster and read the cluster information to know the current version, so that can decide whether or not a cluster node has been upgraded. In such case, we can not simply return a fixed mock response.\u003c/p\u003e\n\n\u003cp\u003eElastic Shell provides a configuration file called \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edryrun.properties\u003c/code\u003e. It’s in the Elastic Shell \u003ccode class=\"language-plaintext highlighter-rouge\"\u003econfig\u003c/code\u003e folder. We can use that file to configure whatever expected result for every single request.\u003c/p\u003e\n\n\u003cp\u003eBefore check \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edryrun.properties\u003c/code\u003e, let’s run \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupgrade report\u003c/code\u003e command at first, and check its logs.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eFeb 21 07:15:01 ab097271ac11 local7.info root: ##################################################\nFeb 21 07:15:01 ab097271ac11 local7.info root: # elash started at Thu Feb 21 07:15:01 UTC 2019\nFeb 21 07:15:01 ab097271ac11 local7.info root: ##################################################\nFeb 21 07:15:01 ab097271ac11 local7.info root: Current arg: report, available options: cat full rolling report config\nFeb 21 07:15:01 ab097271ac11 local7.info root: User choice: choice=report\nFeb 21 07:15:01 ab097271ac11 local7.info root: curl --show-error -X GET http://elasticsearch-1:9200/ 2\u0026gt;\u0026amp;1 --silent --header Content-Type: application/json\nFeb 21 07:15:01 ab097271ac11 local7.info root: curl --show-error -X GET http://elasticsearch-2:9200/ 2\u0026gt;\u0026amp;1 --silent --header Content-Type: application/json\nFeb 21 07:15:01 ab097271ac11 local7.info root: curl --show-error -X GET http://elasticsearch-3:9200/ 2\u0026gt;\u0026amp;1 --silent --header Content-Type: application/json\nFeb 21 07:15:01 ab097271ac11 local7.info root: Report of Upgrades\nFeb 21 07:15:01 ab097271ac11 local7.info root: ------------------------------------------------------------------------------\nFeb 21 07:15:01 ab097271ac11 local7.info root:                           Host       From    Current         To   Upgraded\nFeb 21 07:15:01 ab097271ac11 local7.info root: ------------------------------------------------------------------------------\nFeb 21 07:15:01 ab097271ac11 local7.info root:    http://elasticsearch-1:9200      5.5.1      6.3.2      6.3.2        yes\nFeb 21 07:15:01 ab097271ac11 local7.info root:    http://elasticsearch-2:9200      5.5.1      6.3.2      6.3.2        yes\nFeb 21 07:15:01 ab097271ac11 local7.info root:    http://elasticsearch-3:9200      5.5.1      6.3.2      6.3.2        yes\nFeb 21 07:15:01 ab097271ac11 local7.info root: ------------------------------------------------------------------------------\nFeb 21 07:15:01 ab097271ac11 local7.info root: all nodes have been upgraded from 5.5.1 to 6.3.2\nFeb 21 07:15:01 ab097271ac11 local7.info root: ##################################################\nFeb 21 07:15:01 ab097271ac11 local7.info root: # elash stopped at Thu Feb 21 07:15:01 UTC 2019\nFeb 21 07:15:01 ab097271ac11 local7.info root: ##################################################\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eYou will see there are three HTTP calls involved in this command. Each one was sent to a different node to get server information which includes the Elasticsearch version. We can add the three calls into \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edryrun.properties\u003c/code\u003e, with the expected versions.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# cat elash/config/dryrun.properties \n# dry run upgrade report\nhttp://elasticsearch-1:9200/           ={ \u0026#34;version\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5.5.1\u0026#34; }  }\nhttp://elasticsearch-2:9200/           ={ \u0026#34;version\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5.6.12\u0026#34; }  }\nhttp://elasticsearch-3:9200/           ={ \u0026#34;version\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;6.3.2\u0026#34; }  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eAs above, we force the first node to return 5.5.1, the second to return 5.6.12, and the third to return 6.3.2. Then rerun it in dry run mode.\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ebash-4.4# elash upgrade --dry-run report \n\nReport of Upgrades\n------------------------------------------------------------------------------\n                          Host       From    Current         To   Upgraded\n------------------------------------------------------------------------------\n   http://elasticsearch-1:9200      5.5.1      5.5.1      6.3.2         no\n   http://elasticsearch-2:9200      5.5.1     5.6.12      6.3.2    partial\n   http://elasticsearch-3:9200      5.5.1      6.3.2      6.3.2        yes\n------------------------------------------------------------------------------\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNow, you see, even we’ve upgraded all the cluster nodes, it still reported only the last node has been upgraded. This is because all version information is coming from our \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edryrun.properties\u003c/code\u003e file rather than the real Elasticsearch cluster.\u003c/p\u003e\n\n\u003ch2 id=\"dependency-check\"\u003eDependency check\u003c/h2\u003e\n\n\u003cp\u003eThere is one more thing to note. Elastic Shell has a few dependencies to make it work. For example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e is used to send the HTTP request\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejq\u003c/code\u003e is a great tool used to parse or prettify JSON data\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edialog\u003c/code\u003e is used to display dialogs and menus when run in interactive mode\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you use the Elastic Shell Docker image, they are installed out of the box. If not, then you may need to install them by yourself.\u003c/p\u003e\n\n\u003cp\u003eMost of the dependencies are optional. Elastic Shell will check its depdencies when it’s launched. If they are not installed, there will be alternatives or feature restricted. For example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIf \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e is not installed, the tool will be launched in dry run mode.\u003c/li\u003e\n  \u003cli\u003eIf \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejq\u003c/code\u003e is not installed, the JSON output will not be prettified and some features that require to parse JSON data may be disabled.\u003c/li\u003e\n  \u003cli\u003eIf \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edialog\u003c/code\u003e is not there, the \u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--ui-dialog\u003c/code\u003e option will not be available.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou will be prompted with these information as warnings when launch Elastic Shell. For example, in my case, when I run Elastic Shell on my local machine instead of the Docker container. I can see two warnings:\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e$ ./main.sh index cat\nmain.sh: (warn) dependency \u0026#39;jq\u0026#39; not found, some features may not be available\nmain.sh: (warn) dependency \u0026#39;dialog\u0026#39; not found, dialog mode disabled\n\nCommands/Options:\n  indices\n  shards\n  nodes\n  ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eThis is because I don’t have \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ejq\u003c/code\u003e and \u003ccode class=\"language-plaintext highlighter-rouge\"\u003edialog\u003c/code\u003e installed on my local machine.\u003c/p\u003e\n\n\u003cp\u003eAny question about this post or Elastic Shell, feel free to leave comments or drop email at morningspace@yahoo.com.\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#elasticsearch\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003eelasticsearch\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#shell\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003eshell\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#studio\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003estudio\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#studio-elash-101\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003estudio-elash-101\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-04-26T00:00:00+08:00\"\u003eApril 26, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Elastic+Shell+101+-+Advanced+Features%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Felash101-5%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Felash101-5%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Felash101-5%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/elash101-4/\" class=\"pagination--pager\" title=\"Elastic Shell 101 - Reindex Using Dialog\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/use-docker-reg-cli-1/\" class=\"pagination--pager\" title=\"Docker Registry CLI轻松管理Docker注册表(上)\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-04-26T00:00:00+08:00",
  "Author": "MornigSpace"
}