{
  "Source": "morningspace",
  "Title": "Git工作流面面观——集中式工作流",
  "Link": "https://morningspace.github.io/tech/git-workflow-2/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#名词解释\"\u003e名词解释\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#如何工作\"\u003e如何工作？\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/workflow.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"名词解释\"\u003e名词解释\u003c/h2\u003e\n\n\u003cp\u003e所谓集中式工作流(Centralized Workflow)，是指所有人共享一个Git库，且只有一个分支(即master)，所有人的变更都统一提交到这个Git库的master上。\u003c/p\u003e\n\n\u003cp\u003e这种工作流程非常适合那些从其他传统版本控制工具（如：SVN）迁移过来的团队，因为这就是他们以前熟悉的工作方式。它允许每个人在本地有一个属于自己的隔离环境，能够独立工作，然后在需要的时候把本地的工作同步到远程的共享库。\u003c/p\u003e\n\n\u003cp\u003e当然，这样做并没有完全发挥出Git在分布式协作方面的优势。而且，随着团队规模的扩大，大家在维护共享库时产生冲突的机会也会逐渐增多，从而会使共享库成为整个团队开发的瓶颈。\u003c/p\u003e\n\n\u003cp\u003e尽管如此，集中式工作流仍然是很重要的一种工作流，因为它是其他Git工作流的基础。本质上讲，其他工作流都是它的某种“衍生”。接下来，我们就通过一个模拟示例来演示一下集中式工作流的运行方式。\u003c/p\u003e\n\n\u003ch2 id=\"如何工作\"\u003e如何工作？\u003c/h2\u003e\n\n\u003cp\u003e第一步，在服务器上建立一个远程Git库，供所有人使用：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003essh git@my-git-remote\ngit\u0026gt; create test-centralized\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /home/git/test-centralized.git/\ngit\u0026gt; \u003cspan class=\"nb\"\u003eexit\n\u003c/span\u003eConnection to my-git-remote closed.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第二步，所有人把远程库克隆到本地：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit clone git@my-git-remote:~/test-centralized.git\nCloning into \u003cspan class=\"s1\"\u003e\u0026#39;test-centralized\u0026#39;\u003c/span\u003e...\nwarning: You appear to have cloned an empty repository.\n\u003cspan class=\"nb\"\u003ecd \u003c/span\u003etest-centralized/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第三步，开发人员在本地进行日常开发，把变更提交到本地Git库。比如，William在开发feature-1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME     \nGit workflows\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Centralized workflow\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add README \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;working on feature-1\u0026#39;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster \u003cspan class=\"o\"\u003e(\u003c/span\u003eroot-commit\u003cspan class=\"o\"\u003e)\u003c/span\u003e b550c19] working on feature-1\n 1 file changed, 2 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eNicole在开发feature-2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nGit workflows\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add README \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;working on feature-2\u0026#39;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster \u003cspan class=\"o\"\u003e(\u003c/span\u003eroot-commit\u003cspan class=\"o\"\u003e)\u003c/span\u003e dac348b] working on feature-2\n 1 file changed, 2 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第四步，开发人员把本地master分支上的变更推送到远程。比如，William完成工作以后，把变更成功推送到了远程：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit push\nCounting objects: 3, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nWriting objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e3/3\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 243 bytes | 30.00 KiB/s, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nTotal 3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nTo my-git-remote:~/test-centralized.git\n \u003cspan class=\"k\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003enew branch]      master -\u0026gt; master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，Nicole也完成工作了，当她尝试推送时却被Git拒绝了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit push\nTo my-git-remote:~/test-centralized.git\n \u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003erejected]        master -\u0026gt; master \u003cspan class=\"o\"\u003e(\u003c/span\u003efetch first\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nerror: failed to push some refs to \u003cspan class=\"s1\"\u003e\u0026#39;git@my-git-remote:~/test-centralized.git\u0026#39;\u003c/span\u003e\nhint: Updates were rejected because the remote contains work that you \u003cspan class=\"k\"\u003edo\n\u003c/span\u003ehint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., \u003cspan class=\"s1\"\u003e\u0026#39;git pull ...\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e before pushing again.\nhint: See the \u003cspan class=\"s1\"\u003e\u0026#39;Note about fast-forwards\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;git push --help\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003edetails.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这是由于在Nicole推送之前，远程库里已经有了William推送的变更，而这些变更还没有出现在Nicole本地。为了避免后面推送的变更覆盖前面的，Git拒绝了Nicole的请求。\u003c/p\u003e\n\n\u003cp\u003e第五步，Nicole需要先利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit pull\u003c/code\u003e命令抓取远程库的最新变更，然后集成到本地。集成的时候，最好使用rebase的方式（使用参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--rebase\u003c/code\u003e），把本地生成的提交逐个“追加”到远程库最新提交的后面，而不是把所有工作都放到一个大的合并提交里面（不使用参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--rebase\u003c/code\u003e的时候）。这样做的好处是，可以保证整个项目的提交历史始终是线性的，易于理解。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit pull \u003cspan class=\"nt\"\u003e--rebase\u003c/span\u003e\nwarning: no common commits\nremote: Counting objects: 3, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Total 3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nUnpacking objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e3/3\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nFrom my-git-remote:~/test-centralized\n \u003cspan class=\"k\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003enew branch]      master     -\u0026gt; origin/master\nFirst, rewinding \u003cspan class=\"nb\"\u003ehead \u003c/span\u003eto replay your work on top of it...\nApplying: working on feature-2\nUsing index info to reconstruct a base tree...\nFalling back to patching base and 3-way merge...\nAuto-merging README\nCONFLICT \u003cspan class=\"o\"\u003e(\u003c/span\u003eadd/add\u003cspan class=\"o\"\u003e)\u003c/span\u003e: Merge conflict \u003cspan class=\"k\"\u003ein \u003c/span\u003eREADME\nerror: Failed to merge \u003cspan class=\"k\"\u003ein \u003c/span\u003ethe changes.\nPatch failed at 0001 working on feature-2\nUse \u003cspan class=\"s1\"\u003e\u0026#39;git am --show-current-patch\u0026#39;\u003c/span\u003e to see the failed patch\n\nResolve all conflicts manually, mark them as resolved with\n\u003cspan class=\"s2\"\u003e\u0026#34;git add/rm \u0026lt;conflicted_files\u0026gt;\u0026#34;\u003c/span\u003e, \u003cspan class=\"k\"\u003ethen \u003c/span\u003erun \u003cspan class=\"s2\"\u003e\u0026#34;git rebase --continue\u0026#34;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nYou can instead skip this commit: run \u003cspan class=\"s2\"\u003e\u0026#34;git rebase --skip\u0026#34;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nTo abort and get back to the state before \u003cspan class=\"s2\"\u003e\u0026#34;git rebase\u0026#34;\u003c/span\u003e, run \u003cspan class=\"s2\"\u003e\u0026#34;git rebase --abort\u0026#34;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果集成的时候遇到了冲突，比如在我们这个例子里，那就需要先解决冲突：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nGit workflows\n\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e\u0026lt; HEAD\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Centralized workflow\n\u003cspan class=\"o\"\u003e=======\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e working on feature-2\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nGit workflows\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Centralized workflow\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add README \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase \u003cspan class=\"nt\"\u003e--continue\u003c/span\u003e\nApplying: working on feature-2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在这种情况下，使用rebase的方式进行集成，可以把冲突的范围局限在单个提交里，而不是所有提交都揉在一起。而且，这样做还可以保持每个提交记录都专注于自己的事情，当出现问题时更容易定位引入问题的地方，需要回退提交历史的时候也可以让回退的影响降到最小。解决完合并冲突以后，本地的提交历史变成下面这样了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e\n3f92cbb \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e working on feature-2\nb550c19 \u003cspan class=\"o\"\u003e(\u003c/span\u003eorigin/master\u003cspan class=\"o\"\u003e)\u003c/span\u003e working on feature-1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e第六步，Nicole再次尝试推送她的修改，这一回终于成功了。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit push\nCounting objects: 3, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nWriting objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e3/3\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 280 bytes | 28.00 KiB/s, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nTotal 3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nTo my-git-remote:~/test-centralized.git\n   b550c19..3f92cbb  master -\u0026gt; master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-12-31T00:00:00+08:00\"\u003eDecember 31, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E9%9D%A2%E9%9D%A2%E8%A7%82%E2%80%94%E2%80%94%E9%9B%86%E4%B8%AD%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-workflow-2%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-workflow-2%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-workflow-2%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/git-workflow-1/\" class=\"pagination--pager\" title=\"Git工作流面面观——分支模型\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/git-workflow-3/\" class=\"pagination--pager\" title=\"Git工作流面面观——特性分支工作流\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-12-31T00:00:00+08:00",
  "Author": "MornigSpace"
}