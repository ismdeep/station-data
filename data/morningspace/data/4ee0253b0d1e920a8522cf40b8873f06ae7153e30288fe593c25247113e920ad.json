{
  "Source": "morningspace",
  "Title": "Git合并那些事——Merge策略（下）",
  "Link": "https://morningspace.github.io/tech/git-merge-stories-3/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#为什么没有theirs策略\"\u003e为什么没有Theirs策略？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#octopus策略\"\u003eOctopus策略\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#subtree策略\"\u003eSubtree策略\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#另一种方法\"\u003e另一种方法\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003e多人开发中的合并冲突是我们使用Git时常常会遇到的情况，小小合并门道大，讲述合并的那些事儿，晴耕 · 白话之“Git合并那些事”系列​持续连载中……\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-strategies-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"为什么没有theirs策略\"\u003e为什么没有Theirs策略？\u003c/h2\u003e\n\n\u003cp\u003e前面提到Ours策略，也许大家会认为一定还有一个Theirs策略。Recursive策略里不就有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-Xours\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-Xtheirs\u003c/code\u003e参数吗？有意思的是，如果我们翻Git的文档，也许会觉得奇怪，居然没有Theirs策略！\u003c/p\u003e\n\n\u003cp\u003e事实上，Git在以前的版本里是有Theirs策略的，但后来它被去掉了。其实道理也很简单，因为它太危险了。正如Ours策略会毫不犹豫地丢弃被合并分支上的修改，Theirs策略也会毫不犹豫的丢弃当前分支上的修改。这相当于自己之前在当前分支上所做的工作全部丢掉了！\u003c/p\u003e\n\n\u003cp\u003e如果你真的想丢弃自己的修改，完全可以用其他git命令来代替。比如，还是继续前面的例子。先回退到上次合并前的提交记录c8：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e HEAD^\nHEAD is now at 306f03a c8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后新建一个分支，用来备份我们在当前分支上所做的工作：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch i-was-stupid\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e此时，我们在master分支上的提交历史是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 306f03a \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master, i-was-stupid\u003cspan class=\"o\"\u003e)\u003c/span\u003e c8\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   0935c24 c6\n|\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e   26dfc71 \u003cspan class=\"o\"\u003e(\u003c/span\u003efeature2\u003cspan class=\"o\"\u003e)\u003c/span\u003e c3\n| |\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e  1725ff2 c5\n|\u003cspan class=\"se\"\u003e\\ \\ \\ \u003c/span\u003e \n| | |/  \n| |/|   \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e | 39b06d9 c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | | c096f34 c4\n| |/  \n|/|   \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | ff8acc9 c2\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 8937d6a c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit reset\u003c/code\u003e，指定：回退到feature1上head指针所指向的提交记录c7：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e feature1\nHEAD is now at 9232cf1 c7\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再观察master分支的提交历史，会发现之前不在feature1分支上出现的提交记录c3，c6，c8都不见了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9232cf1 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master, feature1\u003cspan class=\"o\"\u003e)\u003c/span\u003e c7\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   1725ff2 c5\n|\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 39b06d9 c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | c096f34 c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | ff8acc9 c2\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 8937d6a c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003emaster分支上余下的提交历史和feature1的提交历史是完全一样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout feature1\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;feature1\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 9232cf1 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; feature1, master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c7\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   1725ff2 c5\n|\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 39b06d9 c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | c096f34 c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | ff8acc9 c2\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 8937d6a c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"octopus策略\"\u003eOctopus策略\u003c/h2\u003e\n\n\u003cp\u003e前面我们介绍的Recursive策略和Resolve策略都是针对两个分支的合并。假如我们要合并的分支超过两个，那该怎么办呢？这个时候，我们依然可以使用Recursive策略，对分支进行两两合并。但是，这样做每合并一次就会产生一个新的合并提交（merge commit）。过多的合并提交出现在提交历史里，会成为一种“杂音”，对提交历史造成不必要的“污染”，让它变得更加复杂，更难看懂。\u003c/p\u003e\n\n\u003cp\u003e这个时候，Octopus策略就派上用场了。Git在对两个以上的分支进行合并时，会自动选择Octopus策略。它的主要特点在于，只会生成一个合并提交，从而最大限度地减少了因为合并对提交历史造成的“污染”。因为按照这种合并策略得到的提交历史形似章鱼，所以名字还是起的很形象的。\u003c/p\u003e\n\n\u003cp\u003e下面我们就通过实际例子来感受一下。首先，我们新建一个本地Git库，叫做test-octopus-merge：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit init test-octopus-merge\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /root/test-octopus-merge/.git/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003etest-octopus-merge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在master分支上新建README文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nMerge strategies include:\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Resolve\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Octopus\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并建立提交记录c0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c0\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster \u003cspan class=\"o\"\u003e(\u003c/span\u003eroot-commit\u003cspan class=\"o\"\u003e)\u003c/span\u003e 849aa5b] c0\n 1 file changed, 4 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后新建两个分支，feature1和feature2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout \u003cspan class=\"nt\"\u003e-b\u003c/span\u003e feature1\nSwitched to a new branch \u003cspan class=\"s1\"\u003e\u0026#39;feature1\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout \u003cspan class=\"nt\"\u003e-b\u003c/span\u003e feature2\nSwitched to a new branch \u003cspan class=\"s1\"\u003e\u0026#39;feature2\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并且，分别在分支feature2上建立提交记录c1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nMerge strategies include:\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Recursive\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Resolve\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Octopus\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c1\n\u003cspan class=\"o\"\u003e[\u003c/span\u003efeature2 c60b6e8] c1\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在feature1上建立提交记录c2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout feature1\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;feature1\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nMerge strategies include:\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Resolve\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Ours\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Octopus\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c2\n\u003cspan class=\"o\"\u003e[\u003c/span\u003efeature1 79cc879] c2\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在master上建立提交记录c3：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nMerge strategies include:\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Resolve\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Octopus\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Subtree\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e ...\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c3\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster 3d795fb] c3\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e，把feature1和feature2一次性合并到master：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c4 feature1 feature2\nTrying simple merge with feature1\nSimple merge did not work, trying automatic merge.\nAuto-merging README\nTrying simple merge with feature2\nSimple merge did not work, trying automatic merge.\nAuto-merging README\nMerge made by the \u003cspan class=\"s1\"\u003e\u0026#39;octopus\u0026#39;\u003c/span\u003e strategy.\n README | 2 ++\n 1 file changed, 2 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从输出结果中可以看到，Git的确在合并时采用了Octopus策略。这个时候，再用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e查看提交历史，会发现分支feature1和feature2在向master合并时只生成了一个提交记录，即c4：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e-.   d2780ca \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n|\u003cspan class=\"se\"\u003e\\ \\ \u003c/span\u003e \n| | \u003cspan class=\"k\"\u003e*\u003c/span\u003e c60b6e8 \u003cspan class=\"o\"\u003e(\u003c/span\u003efeature2\u003cspan class=\"o\"\u003e)\u003c/span\u003e c1\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e | 79cc879 \u003cspan class=\"o\"\u003e(\u003c/span\u003efeature1\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n| |/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | 3d795fb c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 849aa5b c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如图所示，c4就是c1，c2，c3在分支合并后产生的合并提交：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-13.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e如果要是采用Recursive策略会怎么样呢，让我们先退回到提交记录c3：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e HEAD^\nHEAD is now at 3d795fb c3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，在master分支上逐个合并feature1和feature2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c4 feature1\nAuto-merging README\nMerge made by the \u003cspan class=\"s1\"\u003e\u0026#39;recursive\u0026#39;\u003c/span\u003e strategy.\n README | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c5 feature2\nAuto-merging README\nMerge made by the \u003cspan class=\"s1\"\u003e\u0026#39;recursive\u0026#39;\u003c/span\u003e strategy.\n README | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从输出结果中可以看到，这次Git使用了Recursive策略。这个时候，我们观察提交历史就会发现，每合并一次都会产生一个新的提交记录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   5544665 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c5\n|\u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e c60b6e8 \u003cspan class=\"o\"\u003e(\u003c/span\u003efeature2\u003cspan class=\"o\"\u003e)\u003c/span\u003e c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e |   dfef4b0 c4\n|\u003cspan class=\"se\"\u003e\\ \\ \u003c/span\u003e \n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e | 79cc879 \u003cspan class=\"o\"\u003e(\u003c/span\u003efeature1\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n| |/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e | 3d795fb c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 849aa5b c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，c4是在合并feature1时产生的，c5是在合并feature2时产生：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-14.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e最后，关于Octopus策略还有一点需要说明：尽管它功能十分强大，但实际使用的机会却并不多。可以想像，如果一下子要合并五六个分支，那是一种什么样的感觉。平时我们遇到最多的，还是两个分支合并的情况。\u003c/p\u003e\n\n\u003ch2 id=\"subtree策略\"\u003eSubtree策略\u003c/h2\u003e\n\n\u003cp\u003eSubtree是一种比较特别的策略。它通常用于这样的场合：假设有两个项目A和B，其中项目A依赖于项目B。我们可以把项目B的内容映射到项目A的一个子目录下。那么当把项目B合并到项目A时，我们可以选择Subtree策略，Git会帮我们自动把项目B的内容更新到项目A的对应子目录下。下面我们就用一个例子来演示一下。\u003c/p\u003e\n\n\u003cp\u003e首先，我们新建一个本地Git库，叫做test-subtree-merge：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit init test-subtree-merge\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /root/test-subtree-merge/.git/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003etest-subtree-merge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在master分支上新建一些文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nUnderstanding Git \u003cspan class=\"k\"\u003efor \u003c/span\u003eDummies: Subtree Merge\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi VERSION\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eVERSION\n1.0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并建立提交记录c0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c0\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster \u003cspan class=\"o\"\u003e(\u003c/span\u003eroot-commit\u003cspan class=\"o\"\u003e)\u003c/span\u003e a7dd35a] c0\n 2 files changed, 2 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 README\n create mode 100644 VERSION\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，我们要把另一个项目作为当前项目的依赖加入到test-subtree-merge里。这里我们使用的是\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e项目的Docker镜像。其中，代表Git服务的镜像\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emorningspace/lab-git-remote\u003c/code\u003e自带了一个Git库：hello-git。现在，我们就用git remote add命令在当前项目里创建一个指向hello-git的远程引用：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit remote add \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e hello-git git@my-git-remote:~/hello-git.git\nUpdating hello-git\nwarning: no common commits\nremote: Counting objects: 6, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Compressing objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e2/2\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Total 6 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nUnpacking objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e6/6\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nFrom my-git-remote:~/hello-git\n \u003cspan class=\"k\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003enew branch]      master     -\u0026gt; hello-git/master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，指定参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-f\u003c/code\u003e是为了让Git能在执行完git remote add之后立刻执行git fetch，从远程库把hello-git的内容下载到本地，但是并不立即合并。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们在当前项目上新开一个分支hello-git，并把下载到本地的hello-git保存到该分支上：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout \u003cspan class=\"nt\"\u003e-b\u003c/span\u003e hello-git hello-git/master\nBranch \u003cspan class=\"s1\"\u003e\u0026#39;hello-git\u0026#39;\u003c/span\u003e \u003cspan class=\"nb\"\u003eset \u003c/span\u003eup to track remote branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e from \u003cspan class=\"s1\"\u003e\u0026#39;hello-git\u0026#39;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nSwitched to a new branch \u003cspan class=\"s1\"\u003e\u0026#39;hello-git\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过对比可以发现，两个分支上的内容的确是不同的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003eREADME\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME         \nHello Git!\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003eREADME\tVERSION\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME \nUnderstanding Git \u003cspan class=\"k\"\u003efor \u003c/span\u003eDummies: Subtree Merge\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，hello-git分支对应的是作为依赖项目的hello-git，master则对应的是当前项目。\u003c/p\u003e\n\n\u003cp\u003e现在，我们要把hello-git的内容放到master分支上的一个子目录下了。这里我们需要用到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit read-tree\u003c/code\u003e命令，它会把hello-git分支上的tree对象读入当前项目的暂存区（staging area）和工作目录（working directory）。并且，还可以通过参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--prefix\u003c/code\u003e指定子目录的名字。关于tree对象和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit read-tree\u003c/code\u003e命令的更多内容，可以参看“\u003ca href=\"/tech/inside-git-2\"\u003eGit解密——Tree对象和Commit对象\u003c/a\u003e”一文。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit read-tree \u003cspan class=\"nt\"\u003e--prefix\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehello-git/ \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e hello-git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e检查当前目录可以看到，在项目的根目录下的确多了一个子目录hello-git。而且，它所包含的正是hello-git的内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003eREADME\tVERSION  hello-git\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003ehello-git/README \nHello Git!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们把hello-git子目录提交到本地库：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c1\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster e6d5826] c1\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 hello-git/README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，假设hello-git有了更新，我们可以切换到hello-git分支，然后利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit pull\u003c/code\u003e命令下载更新：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout hello-git\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;hello-git\u0026#39;\u003c/span\u003e\nYour branch is up to \u003cspan class=\"nb\"\u003edate \u003c/span\u003ewith \u003cspan class=\"s1\"\u003e\u0026#39;hello-git/master\u0026#39;\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit pull\nremote: Counting objects: 3, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Compressing objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e2/2\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Total 3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nUnpacking objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e3/3\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nFrom my-git-remote:~/hello-git\n   038dce5..fb23aeb  master     -\u0026gt; hello-git/master\nUpdating 038dce5..fb23aeb\nFast-forward\n .gitignore | 0\n 1 file changed, 0 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 0 deletions\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 .gitignore\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后再切换到master分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e进行合并，并选择subtree作为合并策略：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e subtree \u003cspan class=\"nt\"\u003e--no-commit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--allow-unrelated-histories\u003c/span\u003e hello-git\nAutomatic merge went well\u003cspan class=\"p\"\u003e;\u003c/span\u003e stopped before committing as requested\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c2\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster dbf7309] c2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意，在执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e时，如果你所使用的Git是2.9及以上版本，那就需要加上一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--allow-unrelated-histories\u003c/code\u003e参数，否则Git会报“fatal: refusing to merge unrelated histories”的错误。\u003c/p\u003e\n\n\u003cp\u003e这时我们通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e查看提交历史会发现，Git在合并时会把hello-git的提交历史也加入进来：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e\ndbf7309 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\nfb23aeb \u003cspan class=\"o\"\u003e(\u003c/span\u003ehello-git/master, hello-git\u003cspan class=\"o\"\u003e)\u003c/span\u003e add more\ne6d5826 c1\na7dd35a c0\n038dce5 say hello to git\ncb1130c init commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果我们不希望在当前项目里出现依赖项目的提交历史，可以在合并时加上\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--squash\u003c/code\u003e参数。为了演示这一点，让我们先回到提交记录c1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e e6d5826\nHEAD is now at e6d5826 c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后再执行一次合并，带上\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--squash\u003c/code\u003e参数：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e subtree \u003cspan class=\"nt\"\u003e--squash\u003c/span\u003e \u003cspan class=\"nt\"\u003e--no-commit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--allow-unrelated-histories\u003c/span\u003e hello-git\nSquash commit \u003cspan class=\"nt\"\u003e--\u003c/span\u003e not updating HEAD\nAutomatic merge went well\u003cspan class=\"p\"\u003e;\u003c/span\u003e stopped before committing as requested\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c2\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster 194c075] c2\n 1 file changed, 0 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 0 deletions\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 hello-git/.gitignore\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候再执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e，就会发现整个提交历史都是当前项目的，非常干净：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e\n194c075 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\ne6d5826 c1\na7dd35a c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"另一种方法\"\u003e另一种方法\u003c/h3\u003e\n\n\u003cp\u003e前面所使用的方法，需要在当前项目里新建一个分支用来保存hello-git的提交历史和内容。如果你不是很介意hello-git和当前项目的提交历史混在一起，那么还有一种更简单的做法，不需要建立额外的分支。为了演示这一点，我们先把当前项目恢复到初始状态（提交记录c0处），并删除分支hello-git：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit reset \u003cspan class=\"nt\"\u003e--hard\u003c/span\u003e a7dd35a\nHEAD is now at a7dd35a c0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch \u003cspan class=\"nt\"\u003e-D\u003c/span\u003e hello-git\nDeleted branch hello-git \u003cspan class=\"o\"\u003e(\u003c/span\u003ewas fb23aeb\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e直接把hello-git的提交记录下载到master分支上：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e ours \u003cspan class=\"nt\"\u003e--no-commit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--allow-unrelated-histories\u003c/span\u003e hello-git/master\nAutomatic merge went well\u003cspan class=\"p\"\u003e;\u003c/span\u003e stopped before committing as requested\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因为这里我们使用了Ours合并策略，所以只有hello-git的提交历史被下载到当前项目，而当前项目的内容则不会被hello-git所覆盖。\u003c/p\u003e\n\n\u003cp\u003e紧接着，我们还是利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit read-tree\u003c/code\u003e把hello-git的tree对象读入当前项目的暂存区和工作目录。和前面相比，参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-u\u003c/code\u003e后面跟的不再是本地的hello-git分支了，而是指向hello-git远程Git库的远程引用：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit read-tree \u003cspan class=\"nt\"\u003e--prefix\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehello-git/ \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e hello-git/master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e上述命令执行的效果和前面一样，当前项目里多了一个hello-git子目录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003eREADME\tVERSION  hello-git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在我们把内容提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c1\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster efa288f] c1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果这个时候hello-git有更新，我们可以不用先在分支上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit pull\u003c/code\u003e下载更新，然后再合并；而是直接在master分支上用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit pull\u003c/code\u003e进行合并。在Git里，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit pull\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit merge\u003c/code\u003e一样，都支持通过参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-s\u003c/code\u003e来指定合并策略：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit pull \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e subtree hello-git master\nremote: Counting objects: 3, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Compressing objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e2/2\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nremote: Total 3 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nUnpacking objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e3/3\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nFrom my-git-remote:~/hello-git\n \u003cspan class=\"k\"\u003e*\u003c/span\u003e branch            master     -\u0026gt; FETCH_HEAD\n   fb23aeb..67d7938  master     -\u0026gt; hello-git/master\nMerge made by the \u003cspan class=\"s1\"\u003e\u0026#39;subtree\u0026#39;\u003c/span\u003e strategy.\n hello-git/.gitignore | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-09-01T00:00:00+08:00\"\u003eSeptember 1, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E5%90%88%E5%B9%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E2%80%94%E2%80%94Merge%E7%AD%96%E7%95%A5%EF%BC%88%E4%B8%8B%EF%BC%89%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-3%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-3%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-3%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/git-merge-stories-2/\" class=\"pagination--pager\" title=\"Git合并那些事——Merge策略（上）\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/all-in-one-k8s-playground/\" class=\"pagination--pager\" title=\"All-in-One K8S Playground中文使用指南\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-09-01T00:00:00+08:00",
  "Author": "MornigSpace"
}