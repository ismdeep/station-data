{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——Service网络(下)",
  "Link": "https://morningspace.github.io/tech/k8s-net-service-2/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#使用tcpdump\"\u003e使用tcpdump\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#使用iptables\"\u003e使用iptables\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#多pod间的负载均衡\"\u003e多Pod间的负载均衡\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#主机访问的iptables规则\"\u003e主机访问的iptables规则\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e利用tcpdump和iptables这两个超级“武器”，让我们一起来揭开Service网络背后的神秘面纱吧！\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/service-2.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在\u003ca href=\"/tech/k8s-net-service-1/\"\u003eKubernetes网络篇——Service网络(上)\u003c/a\u003e一文里我们学会了Service的定义，部署和访问，并了解了Kubernetes的DNS服务。本文，我们将借助tcpdump和iptables这两个工具，对Service网络的数据包和iptables规则进行分析，从而进一步理解Service网络的工作原理。\u003c/p\u003e\n\n\u003ch2 id=\"使用tcpdump\"\u003e使用tcpdump\u003c/h2\u003e\n\n\u003cp\u003e假设我们从位于节点kube-node-2上的lab-sleeper容器内部向位于节点kube-node-1上的lab-web容器发起一个HTTP请求，Kubernetes在网络层面到底做了哪些事情呢？\u003c/p\u003e\n\n\u003cp\u003e为此，我们在节点kube-node-2安装了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e工具。利用它，我们可以对流经该节点网络接口的数据包进行分析：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eapt-get update\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eapt-get \u003cspan class=\"nb\"\u003einstall \u003c/span\u003etcpdump\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e先来看一下lab-sleeper容器在宿主机一端的veth接口，观察一下流经这个接口的数据包。为此，我们需要在kube-node-2上找到lab-sleeper容器的veth接口。先看一下lab-sleeper容器内部的eth0接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e lab-sleeper-7ff95f64d7-6p7bh ip \u003cspan class=\"nb\"\u003elink\u003c/span\u003e\n... ...\n5: eth0@if11: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether ae:6c:5c:6d:d5:83 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，@符号后面跟的序号为11，这说明和它相对应的宿主机一端的veth接口序号为11。再来看一下宿主机上的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink\u003c/span\u003e\n... ...\n11: veth707db50e@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master dind0 state UP mode DEFAULT group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 76:d5:ba:61:7c:7c brd ff:ff:ff:ff:ff:ff link-netnsid 1\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，序号为11的网络接口为veth707db50e，这就是我们要监听的接口。而且，veth707db50e的@符号后面跟的序号为5，这说明容器端和它相对应的veth接口，其序号也应该是5。这和我们前面查看容器内网络接口的输出结果是一致的。\u003c/p\u003e\n\n\u003cp\u003e下面我们开始监控veth707db50e接口，在kube-node-2上执行如下命令：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e veth707db50e \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e\ntcpdump: verbose output suppressed, use \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e or \u003cspan class=\"nt\"\u003e-vv\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003efull protocol decode\nlistening on veth707db50e, link-type EN10MB \u003cspan class=\"o\"\u003e(\u003c/span\u003eEthernet\u003cspan class=\"o\"\u003e)\u003c/span\u003e, capture size 262144 bytes\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-i\u003c/code\u003e用于指定监控的网络接口，即：veth707db50e；参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-nn\u003c/code\u003e用于告诉\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e，在输出结果里以数字方式显示IP和端口。\u003c/p\u003e\n\n\u003cp\u003e然后，我们从另一个终端窗口登录到master节点，在lab-sleeper容器里执行curl命令，向test-svc发送请求：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e lab-sleeper-7ff95f64d7-6p7bh curl http://test-svc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，我们会在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e所在的终端窗口看到类似下面这样的输出：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e08:14:47.120669 IP 10.244.3.5.34361 \u0026gt; 10.96.0.10.53: 90+ A? test-svc.default.svc.cluster.local. (52)\n08:14:47.121229 IP 10.96.0.10.53 \u0026gt; 10.244.3.5.34361: 90*- 1/0/0 A 10.107.169.79 (102)\n08:14:47.121373 IP 10.244.3.5.34361 \u0026gt; 10.96.0.10.53: 8557+ AAAA? test-svc.default.svc.cluster.local. (52)\n08:14:47.121834 IP 10.96.0.10.53 \u0026gt; 10.244.3.5.34361: 8557*- 0/1/0 (145)\n08:14:47.124539 IP 10.244.3.5.41408 \u0026gt; 10.107.169.79.80: Flags [S], seq 3978858651, win 29200, options [mss 1460,sackOK,TS val 217014590 ecr 0,nop,wscale 7], length 0\n08:14:47.124719 IP 10.107.169.79.80 \u0026gt; 10.244.3.5.41408: Flags [S.], seq 3710748951, ack 3978858652, win 28960, options [mss 1460,sackOK,TS val 217014590 ecr 217014590,nop,wscale 7], length 0\n08:14:47.124775 IP 10.244.3.5.41408 \u0026gt; 10.107.169.79.80: Flags [.], ack 1, win 229, options [nop,nop,TS val 217014590 ecr 217014590], length 0\n08:14:47.124960 IP 10.244.3.5.41408 \u0026gt; 10.107.169.79.80: Flags [P.], seq 1:73, ack 1, win 229, options [nop,nop,TS val 217014590 ecr 217014590], length 72: HTTP: GET / HTTP/1.1\n08:14:47.125037 IP 10.107.169.79.80 \u0026gt; 10.244.3.5.41408: Flags [.], ack 73, win 227, options [nop,nop,TS val 217014590 ecr 217014590], length 0\n08:14:47.125445 IP 10.107.169.79.80 \u0026gt; 10.244.3.5.41408: Flags [P.], seq 1:239, ack 73, win 227, options [nop,nop,TS val 217014590 ecr 217014590], length 238: HTTP: HTTP/1.1 200 OK\n08:14:47.125490 IP 10.244.3.5.41408 \u0026gt; 10.107.169.79.80: Flags [.], ack 239, win 237, options [nop,nop,TS val 217014590 ecr 217014590], length 0\n08:14:47.127164 IP 10.244.3.5.41408 \u0026gt; 10.107.169.79.80: Flags [F.], seq 73, ack 851, win 247, options [nop,nop,TS val 217014590 ecr 217014590], length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里我们可以看到，前4行显示，容器（IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.5\u003c/code\u003e）是在和kube-dns（IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.96.0.10\u003c/code\u003e）进行通信；从第5行开始，就在和test-svc（IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.107.169.79\u003c/code\u003e）进行真正的HTTP通信了。因此，对容器来说，所有发送出去的数据包，其目标地址都是Service的IP地址；相应地，所有返回的数据包，其源地址也都是Service的IP地址。在容器看来，它始终都是在和Service通信，并没有和“躲”在Service背后的Pod有直接交流。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们再往上一层，看一看流经宿主机网卡eth0的数据包，所有从当前节点发往其他节点的数据包都会经过这个网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etcpdump \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e eth0 \u003cspan class=\"nt\"\u003e-nn\u003c/span\u003e port 53 or port 80\ntcpdump: verbose output suppressed, use \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e or \u003cspan class=\"nt\"\u003e-vv\u003c/span\u003e \u003cspan class=\"k\"\u003efor \u003c/span\u003efull protocol decode\nlistening on eth0, link-type EN10MB \u003cspan class=\"o\"\u003e(\u003c/span\u003eEthernet\u003cspan class=\"o\"\u003e)\u003c/span\u003e, capture size 262144 bytes\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们给\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e加了过滤条件。这样可以让我们真正关心的数据包不会淹没在大量无关的输出结果里。通过参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eport\u003c/code\u003e，我们告诉\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e只监听端口53和80。前者是DNS服务的端口；后者是HTTP服务的端口，即lab-web，也就是躲在test-svc背后我们要访问的目标Pod。\u003c/p\u003e\n\n\u003cp\u003e再次从lab-sleeper容器里通过curl命令发起对test-svc的请求，我们得到了类似下面这样的输出：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e10:22:17.990253 IP 10.192.0.4.39982 \u0026gt; 10.244.2.2.53: 19731+ A? test-svc.default.svc.cluster.local. (52)\n10:22:17.991031 IP 10.192.0.4.39982 \u0026gt; 10.244.2.2.53: 2856+ AAAA? test-svc.default.svc.cluster.local. (52)\n10:22:17.992065 IP 10.244.2.2.53 \u0026gt; 10.192.0.4.39982: 2856*- 0/1/0 (145)\n10:22:17.993465 IP 10.244.2.2.53 \u0026gt; 10.192.0.4.39982: 19731*- 1/0/0 A 10.107.169.79 (102)\n10:22:18.001390 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [S], seq 519874336, win 29200, options [mss 1460,sackOK,TS val 217780596 ecr 0,nop,wscale 7], length 0\n10:22:18.001516 IP 10.244.2.4.80 \u0026gt; 10.192.0.4.38010: Flags [S.], seq 17221823, ack 519874337, win 28960, options [mss 1460,sackOK,TS val 217780596 ecr 217780596,nop,wscale 7], length 0\n10:22:18.001574 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [.], ack 1, win 229, options [nop,nop,TS val 217780596 ecr 217780596], length 0\n10:22:18.002088 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [P.], seq 1:73, ack 1, win 229, options [nop,nop,TS val 217780596 ecr 217780596], length 72: HTTP: GET / HTTP/1.1\n10:22:18.002196 IP 10.244.2.4.80 \u0026gt; 10.192.0.4.38010: Flags [.], ack 73, win 227, options [nop,nop,TS val 217780596 ecr 217780596], length 0\n10:22:18.002311 IP 10.244.2.4.80 \u0026gt; 10.192.0.4.38010: Flags [P.], seq 1:239, ack 73, win 227, options [nop,nop,TS val 217780596 ecr 217780596], length 238: HTTP: HTTP/1.1 200 OK\n10:22:18.002335 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [.], ack 239, win 237, options [nop,nop,TS val 217780596 ecr 217780596], length 0\n10:22:18.002373 IP 10.244.2.4.80 \u0026gt; 10.192.0.4.38010: Flags [P.], seq 239:851, ack 73, win 227, options [nop,nop,TS val 217780596 ecr 217780596], length 612: HTTP\n10:22:18.002399 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [.], ack 851, win 247, options [nop,nop,TS val 217780596 ecr 217780596], length 0\n10:22:18.009205 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [F.], seq 73, ack 851, win 247, options [nop,nop,TS val 217780597 ecr 217780596], length 0\n10:22:18.009392 IP 10.244.2.4.80 \u0026gt; 10.192.0.4.38010: Flags [F.], seq 851, ack 74, win 227, options [nop,nop,TS val 217780597 ecr 217780597], length 0\n10:22:18.009422 IP 10.192.0.4.38010 \u0026gt; 10.244.2.4.80: Flags [.], ack 852, win 247, options [nop,nop,TS val 217780597 ecr 217780597], length 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，和之前一样，前面4行仍然是容器和DNS服务之间的通信；从第5行开始，则是容器和HTTP服务之间的通信。不同的地方在于，从容器里发送出来的数据包在经过eth0的时候，源地址已经变成了节点的IP。在我们的例子里，也就是kube-node-2的IP地址\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.192.0.4\u003c/code\u003e。相应地，所有eth0接收到的数据包，其目标地址也变成了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.192.0.4\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e另外，在和DNS服务交互的数据包里，DNS服务的IP地址也变成了真正提供服务的Pod——coredns的地址了。如果查一下kube-system下的Pod就会发现，coredns的IP地址就是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.2.2\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e kube-system \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME                                  READY   STATUS    RESTARTS   AGE     IP           NODE          NOMINATED NODE   READINESS GATES\ncoredns-fb8b8dccf-nggnj               1/1     Running   0          7h47m   10.244.2.2   kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，原来test-svc的IP地址，也被替换成了真正提供HTTP服务的Pod地址，即：位于节点kube-node-1上的lab-web，IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.2.4\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e结合两次\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e的结果，我们可以用下面这张图来做一个小结。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/test-svc-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e从lab-sleeper发出的数据包，其目标地址总是Service的虚拟IP，包括kube-dns和我们的test-svc。但当经过主机的eth0以后，目标地址就会被替换成真正提供服务的后端Pod，即coredns和test-pod，而源地址则会被替换成主机的IP。同样地，对于返回的数据包，其源地址和目标地址又会被逆向还原。这样，在lab-sleeper看来，它始终是在和Service进行通信，而没有和Service所管理的后端Pod存在任何直接的交流。\u003c/p\u003e\n\n\u003ch2 id=\"使用iptables\"\u003e使用iptables\u003c/h2\u003e\n\n\u003cp\u003e通过对流经eth0的数据包进行监控，我们看到了Service很好的屏蔽了它所管理的后端Pod。但是，Kubernetes是怎么做到这一点的呢？这就需要借助另一个工具\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e了。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/iptables.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在Kubernetes里，Service的网络实际上是通过iptables规则来实现的。因此，理解Service网络的工作原理，还应该分析一下\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e的规则。\u003c/p\u003e\n\n\u003cp\u003e这些规则是通过kube-proxy在Kubernetes集群的各个节点上自动生成的。每当有新的Service变动来自master节点，kube-proxy都会收到事件通知，并更新\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则。并且，集群当中的每个节点上都有一份相同的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e配置，这样就保证了，当有Pod在任何节点上想访问某个Service的时候，都能正确地路由到目标地址。\u003c/p\u003e\n\n\u003cp\u003e下面，我们在lab-sleeper所在的kube-node-2上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables-save\u003c/code\u003e命令，将会得到了类似下面这样的输出：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eiptables-save\n⎢ ...\n① \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e PREROUTING \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kubernetes service portals\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SERVICES\n⎢ ...\n⑨ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e POSTROUTING \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kubernetes postrouting rules\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-POSTROUTING\n⎢ ...\n④ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-MARK-MASQ \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e MARK \u003cspan class=\"nt\"\u003e--set-xmark\u003c/span\u003e 0x4000/0x4000\n⑩ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-POSTROUTING \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kubernetes service traffic requiring SNAT\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e mark \u003cspan class=\"nt\"\u003e--mark\u003c/span\u003e 0x4000/0x4000 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e MASQUERADE\n⎢ ...\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-CLAGU7VMF4VCXE4X \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.244.2.2/32 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-CLAGU7VMF4VCXE4X \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e DNAT \u003cspan class=\"nt\"\u003e--to-destination\u003c/span\u003e 10.244.2.2:9153\n⑦ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-E2HMOHPUOGTHZJEP \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.244.2.4/32 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⑧ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-E2HMOHPUOGTHZJEP \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e DNAT \u003cspan class=\"nt\"\u003e--to-destination\u003c/span\u003e 10.244.2.4:80\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-H7FN6LU3RSH6CC2T \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.244.2.2/32 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-H7FN6LU3RSH6CC2T \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e DNAT \u003cspan class=\"nt\"\u003e--to-destination\u003c/span\u003e 10.244.2.2:53\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-TCIZBYBD3WWXNWF5 \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.244.2.2/32 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-TCIZBYBD3WWXNWF5 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e udp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e udp \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e DNAT \u003cspan class=\"nt\"\u003e--to-destination\u003c/span\u003e 10.244.2.2:53\n⎢ ...\n② \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.96.0.10/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e udp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kube-system/kube-dns:dns cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e udp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 53 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.96.0.10/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e udp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kube-system/kube-dns:dns cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e udp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 53 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SVC-TCOU7JCQXEZGVUNU\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.96.0.10/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kube-system/kube-dns:dns-tcp cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 53 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.96.0.10/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kube-system/kube-dns:dns-tcp cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 53 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SVC-ERIFXISQEP7F7OF4\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.96.0.10/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kube-system/kube-dns:metrics cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 9153 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.96.0.10/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kube-system/kube-dns:metrics cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 9153 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SVC-JD5MR3NA4I4DYORP\n③ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.107.169.79/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;default/test-svc: cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 80 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⑤ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SERVICES \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 10.107.169.79/32 \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;default/test-svc: cluster IP\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e--dport\u003c/span\u003e 80 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SVC-W3OX4ZP4Y24AQZNW\n⎢ ...\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-ERIFXISQEP7F7OF4 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-H7FN6LU3RSH6CC2T\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-JD5MR3NA4I4DYORP \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-CLAGU7VMF4VCXE4X\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-TCOU7JCQXEZGVUNU \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-TCIZBYBD3WWXNWF5\n⑥ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-W3OX4ZP4Y24AQZNW \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-E2HMOHPUOGTHZJEP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etcpdump\u003c/code\u003e的执行我们已经知道了，Kubernetes实际上是对数据包的源地址和目标地址做了网络地址转换(Network Addtress Translation，即NAT)，我们只需要查看NAT表的PREROUTING链和POSTROUTING链就可以了。所以这里对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables-save\u003c/code\u003e的输出结果做了点处理。首先，我们略去了无关的规则，只保留了关心的部分；其次，为了方便后面解释说明，我们在某些规则前面加上了序号。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e当数据包从lab-sleeper发出，并经过eth0的时候，首先会命中行①处的PREROUTING规则。因为没有任何额外的匹配条件，所以这条规则总是会命中；\u003c/li\u003e\n  \u003cli\u003e紧接着，根据行①的规则，它会跳转到KUBE-SERVICES链，即：从行②处开始的一系列KUBE-SERVICES规则。这里前几条规则都是和DNS服务相关的，因为原理大同小异，所以我们就略过了。假设目前这个数据包就是发往lab-web的，那么最后它将匹配行③处的KUBE-SERVICES；\u003c/li\u003e\n  \u003cli\u003e行③处的规则代表了目标地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.107.169.79\u003c/code\u003e，端口号为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e80\u003c/code\u003e的数据包，它将跳转到行④处的KUBE-MARK-MASQ规则；\u003c/li\u003e\n  \u003cli\u003e行④处的KUBE-MARK-MASQ实际代表了IP地址伪装(MASQUERADE)，准确地说是对源地址进行伪装。至于怎么伪装，我们等一下再说。因为目前还在PREROUTING链上，所以这里并不是进行真正地伪装，而是利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--set-xmark\u003c/code\u003e设置了一个特殊的标记\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0x4000/0x4000\u003c/code\u003e，表示这个数据包是需要地址伪装的。后面，我们会看POSTROUTING链是如何根据这个标记对数据包进行IP地址伪装的；\u003c/li\u003e\n  \u003cli\u003e由于行④处的KUBE-MARK-MASQ规则后面跟了一个非终止目标（non-terminating target，即：不像ACCEPT，DROP，REJECT那样，会终止整个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则链的解析），所以它会重新跳回行③处，沿着KUBE-SERVICES链继续往下走到行⑤处；\u003c/li\u003e\n  \u003cli\u003e行⑤处的KUBE-SERVICES同样匹配目标地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.107.169.79\u003c/code\u003e，端口号为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e80\u003c/code\u003e的数据包，它将跳到行⑥处的KUBE-SVC-W3OX4ZP4Y24AQZNW规则，然后再到行⑦处开始的KUBE-SEP-E2HMOHPUOGTHZJEP链上；\u003c/li\u003e\n  \u003cli\u003e从行⑦处开始的两条KUBE-SEP-E2HMOHPUOGTHZJEP规则里，只有第二条规则满足我们的数据包，即行⑧处。这里，我们会进行一次针对目标地址的网络地址转换(DNAT)，把目标地址替换成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.2.4:80\u003c/code\u003e，即真正在test-svc后端提供HTTP服务的test-pod。这也是为什么我们在eth0上监控到发送出去的数据包里，目标地址被替换成test-pod的IP的原因；\u003c/li\u003e\n  \u003cli\u003e最后，从行⑨处开始我们进入POSTROUTING链，然后跳转到行⑩处的KUBE-POSTROUTING规则；\u003c/li\u003e\n  \u003cli\u003e行⑩处的KUBE-POSTROUTING规则会对数据包进行判断，如果发现它有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0x4000/0x4000\u003c/code\u003e标记，就会跳到MASQUERADE规则，也就是真正对数据包的源地址进行IP地址伪装。具体来说，就是自动把数据包里的源地址替换成主机网卡eth0的IP地址，即：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.192.0.4\u003c/code\u003e。这也是为什么我们在eth0上监控到发送出去的数据包里，源地址被替换成主机IP的原因；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e最后，数据包在经过网络地址转换以后，被发送到了test-pod，当有数据包从test-pod返回的时候，操作系统（实际上是位于Linux kernel层的netfilter）会进行相应的逆向转换，把地址又重新替换成原来的值。所以，在lab-sleeper看来，它是一直在和test-svc打交道。\u003c/p\u003e\n\n\u003ch2 id=\"多pod间的负载均衡\"\u003e多Pod间的负载均衡\u003c/h2\u003e\n\n\u003cp\u003e下面我们来看一下，Service后端连接多个Pod的情况。看一下在多个Pod的情况下，Service是如何做负载均衡的。我们先利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl scale\u003c/code\u003e命令，把test-pod的个数从当前的1个扩展到3个：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl scale \u003cspan class=\"nt\"\u003e--replicas\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3 deployment/test-pod\ndeployment.extensions/test-pod scaled\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl get pods\u003c/code\u003e命令确认所有test-pod都已经成功启动：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME                           READY   STATUS    RESTARTS   AGE   IP           NODE          NOMINATED NODE   READINESS GATES\nlab-sleeper-7ff95f64d7-6p7bh   1/1     Running   0          23h   10.244.3.5   kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-9dd7d4f7b-56znc       1/1     Running   0          27h   10.244.2.4   kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-9dd7d4f7b-7jtcv       1/1     Running   0          15s   10.244.3.6   kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-9dd7d4f7b-qdmvd       1/1     Running   0          15s   10.244.2.6   kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，再次执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables-save\u003c/code\u003e命令，并把输出结果和扩展Pod之前的结果进行对比，我们发现下面几条\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则是新加的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-EEXR7SABLH35O4XP \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.244.3.6/32 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-EEXR7SABLH35O4XP \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e DNAT \u003cspan class=\"nt\"\u003e--to-destination\u003c/span\u003e 10.244.3.6:80\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-WFXGQBTRL5EC2R2Y \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e 10.244.2.6/32 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-MARK-MASQ\n⎢ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SEP-WFXGQBTRL5EC2R2Y \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e tcp \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e DNAT \u003cspan class=\"nt\"\u003e--to-destination\u003c/span\u003e 10.244.2.6:80\n① \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-W3OX4ZP4Y24AQZNW \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e statistic \u003cspan class=\"nt\"\u003e--mode\u003c/span\u003e random \u003cspan class=\"nt\"\u003e--probability\u003c/span\u003e 0.33332999982 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-E2HMOHPUOGTHZJEP\n② \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-W3OX4ZP4Y24AQZNW \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e statistic \u003cspan class=\"nt\"\u003e--mode\u003c/span\u003e random \u003cspan class=\"nt\"\u003e--probability\u003c/span\u003e 0.50000000000 \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-WFXGQBTRL5EC2R2Y\n③ \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e KUBE-SVC-W3OX4ZP4Y24AQZNW \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SEP-EEXR7SABLH35O4XP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，前4条规则是test-pod扩展以后，针对新生成的两个Pod进行网络地址转换用的。因为原理相同，所以这里我们就略过了。下面我们重点关注一下后3条规则。\u003c/p\u003e\n\n\u003cp\u003e我们看到，行①和行②处的规则使用了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatistic\u003c/code\u003e模块，这是对进入网卡的数据包进行概率计算用的，即：通过概率计算的结果来决定是否匹配规则。下面我们具体来看一下：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/test-svc-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e假设数据包现在到达行①处，由于行①设定的概率值为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.33332999982\u003c/code\u003e，所以在所有数据包里，将会有1/3的数据包匹配这条规则，而剩下2/3的数据包则会到达行②。和当前规则相匹配的数据包，它的目标地址会被替换成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.2.4\u003c/code\u003e，对应\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-9dd7d4f7b-56znc\u003c/code\u003e；\u003c/li\u003e\n  \u003cli\u003e由于行②设定的概率值为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e0.50000000000\u003c/code\u003e，所以在余下的数据包里，将会有1/2的数据包匹配这条规则，而剩下1/2的数据包则会到达行③。这里，2/3的一半就是1/3。和当前规则相匹配的数据包，它的目标地址会被替换成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.2.6\u003c/code\u003e，对应\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-9dd7d4f7b-qdmvd\u003c/code\u003e；\u003c/li\u003e\n  \u003cli\u003e最后还剩下1/3的数据包到达了行③，由于行③并没有设定概率值，所以相当于概率值为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e1\u003c/code\u003e，即：所有剩下的数据包都将匹配这条规则。匹配这条规则的数据包，其目标地址会被替换成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.6\u003c/code\u003e，对应\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-9dd7d4f7b-7jtcv\u003c/code\u003e；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e经过上述处理以后，发往test-svc的数据包最终被平均分布到了3个test-pod上，从而实现了负载均衡。\u003c/p\u003e\n\n\u003cp\u003e这种负载均衡有一个要求，那就是和Service相连的每一个后端Pod，提供的应该都是相同的服务。而且，因为经过负载均衡处理以后，发往同一Service的前后两次请求无法保证会到达同一Pod，所以这些Pod应该都是无状态的，也就是不依赖于任何客户端状态。\u003c/p\u003e\n\n\u003ch2 id=\"主机访问的iptables规则\"\u003e主机访问的iptables规则\u003c/h2\u003e\n\n\u003cp\u003e最后补充一点，大家在\u003ca href=\"/tech/k8s-net-service-1/\"\u003eKubernetes网络篇——Service网络(上)\u003c/a\u003e一文里已经看到了，我们不仅可以从Pod内部访问集群里的某个Service，还可以直接在主机（即：集群节点）上对Service进行访问，这同样是通过设置\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则做到的。\u003c/p\u003e\n\n\u003cp\u003e如果我们回顾前面\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables-save\u003c/code\u003e的输出结果，应该会注意到里面有一条类型为OUTPUT的规则：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e-A\u003c/span\u003e OUTPUT \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e comment \u003cspan class=\"nt\"\u003e--comment\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;kubernetes service portals\u0026#34;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-j\u003c/span\u003e KUBE-SERVICES\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e根据\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e的文档，如果数据包是直接由本地应用产生的，那么OUTPUT链就会被触发。在集群节点的主机上直接发起\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e命令访问test-svc，就属于这种情况。因此，就会匹配这条OUTPUT规则，并跳转到KUBE-SERVICES链上。而对照前面的分析，从这条规则往后，数据包在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则链上的走向就和来自Pod内部的普通数据包一摸一样了。不过，由于主机没有配置使用kube-dns，所以我们只能用IP地址访问Service，而无法通过名称来访问。\u003c/p\u003e\n\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\n\u003cp\u003e通过前面的实验我们可以看到，在Kubernetes的集群里，Pod和节点之所以能够访问到Service，完全是因为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则在起作用。\u003c/p\u003e\n\n\u003cp\u003e跑在Pod里的容器利用路由规则，把数据包成功送到宿主机以后，就把“接力棒”交给了宿主机上的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则。正是因为这些规则的作用，数据包才能被成功发送的目的地。而这个目的地很可能是跨集群节点的。\u003c/p\u003e\n\n\u003cp\u003e所以，Service的网络在本质上只是当前主机上的一堆\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e规则，并不是一个网络设备。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-05-03T00:00:00+08:00\"\u003eMay 3, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94Service%E7%BD%91%E7%BB%9C%28%E4%B8%8B%29%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-service-2%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-service-2%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-service-2%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/k8s-net-service-1/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——Service网络(上)\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/k8s-net-externalip-nodeport/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——ExternalIP和NodePort\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-05-03T00:00:00+08:00",
  "Author": "MornigSpace"
}