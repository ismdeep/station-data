{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——从docker0开始",
  "Link": "https://morningspace.github.io/tech/k8s-net-docker0/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#实验环境\"\u003e实验环境\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#什么是docker0\"\u003e什么是Docker0\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#启动第一个容器\"\u003e启动第一个容器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#启动另一个容器\"\u003e启动另一个容器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#验证网络连通性\"\u003e验证网络连通性\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#iptables和-p参数\"\u003eIPTables和-p参数\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eLinux的network bridge和network namespace是两个非常重要的概念，它们是理解Kubernetes网络工作原理的基础。本文从docker0出发，讨论network bridge的工作原理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/docker-engine.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e网络名字空间(network namespace)是Linux内核提供的一项非常重要的功能，它是网络虚拟化技术的基础，也是Kubernetes和以Docker为代表的容器技术在实现它们各自的网络时所依赖的基础。所以，要理解Kubernetes的网络工作原理，首先要从network namespace入手。\u003c/p\u003e\n\n\u003cp\u003e在Linux内核里，每个network namespace都有它自己的网络设置，比如像：网络接口(network interfaces)，路由表(routing tables)等。我们利用network namespace，可以把不同的网络设置彼此隔离开来。当运行多个Docker容器的时候，Docker会在每个容器内部创建相应的network namespace，从而实现不同容器之间的网络隔离。\u003c/p\u003e\n\n\u003cp\u003e但是光有隔离还不行，因为容器还要和外界进行网络联通，所以除了network namespace以外，另一个重要的概念是网桥(network bridge)。它是由Linux内核提供的一种链路层设备，用于在不同网段之间转发数据包。Docker就是利用网桥来实现容器和外界之间的通信的。默认情况下，Docker服务会在它所在的机器上创建一个名为docker0的网桥。下面我们就先从docker0入手，通过一系列动手实验，了解网桥在容器之间进行通信时所起的作用。\u003c/p\u003e\n\n\u003ch2 id=\"实验环境\"\u003e实验环境\u003c/h2\u003e\n\n\u003cp\u003e在开始实验之前，首先确保Docker服务所在的宿主机上已经安装了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiproute2\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebridge-utils\u003c/code\u003e, \u003ccode class=\"language-plaintext highlighter-rouge\"\u003eiptables\u003c/code\u003e这几个依赖。因为在本文以及后续Kubernetes网络的系列文章中，我们会经常用到这些依赖包所提供的命令行工具。如果没有安装这些依赖的话，可以手动进行安装。比如，以Alpine Linux为例：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eapk add iproute2 bridge-utils iptables\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e或者，也可以使用\u003ca href=\"https://github.com/morningspace/lab-k8s\"\u003elab-k8s\u003c/a\u003e为我们提供的名为morningspace/lab-dind的Docker镜像，里面预装了所有的依赖。在撰写这一系列文章的时候，笔者就是利用该镜像在一台Mac笔记本上完成的所有实验。\u003c/p\u003e\n\n\u003cp\u003e由于目前Mac上运行的Docker Desktop依然是把Docker放在一个虚拟机上跑的，而这个虚拟机通常情况下又不太容易直接访问到，所以如果我们想查看虚拟机上的网络设置会比较困难。这就是为什么笔者建议我们在做实验的时候使用lab-dind镜像的原因。该镜像是一个标准的Alpine Linux，进入容器以后，还可以执行各种docker命令，进行我们的实验。比如在容器内部启动另一个容器，这和在物理机上的操作体验是完全一样的。这就是所谓的dind(Docker-in-Docker)技术。虽然严格地说，这种操作方式和跑在物理机上的Linux，以及相应的Docker环境还是有一定的差异的，但这并不妨碍我们做实验。\u003c/p\u003e\n\n\u003cp\u003e如果我们已经把\u003ca href=\"https://github.com/morningspace/lab-k8s\"\u003elab-k8s\u003c/a\u003e项目客隆到了本地，那么就可以直接在项目的根目录下运行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker-compose\u003c/code\u003e命令来启动lab-dind容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose up \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e dind\nCreating lab-k8s_dind_1_9791018c4641 ... \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e等容器成功启动起来以后，我们再通过如下命令进入到容器内部：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker-compose \u003cspan class=\"nb\"\u003eexec \u003c/span\u003edind bash\nbash-4.4#\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，就可以开始进行各种实验了。本文从这里开始，包括这一系列的后续文章，里面提到的所有实验环节都假设大家是在lab-dind容器里进行的。\u003c/p\u003e\n\n\u003ch2 id=\"什么是docker0\"\u003e什么是Docker0\u003c/h2\u003e\n\n\u003cp\u003e现在我们来看一下Docker的默认网桥docker0。首先，我们利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebrctl\u003c/code\u003e命令，列出当前系统的所有网桥：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebrctl show\nbridge name\tbridge \u003cspan class=\"nb\"\u003eid\t\t\u003c/span\u003eSTP enabled\tinterfaces\ndocker0\t\t8000.024277d8e553\tno\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在我们的实验环境里，目前就只有docker0这一个网桥。执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifconfig\u003c/code\u003e，我们还可以列出docker0的详细信息：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eifconfig docker0\ndocker0   Link encap:Ethernet  HWaddr 02:42:77:D8:E5:53  \n          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0\n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.0 B\u003cspan class=\"o\"\u003e)\u003c/span\u003e  TX bytes:0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.0 B\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从输出结果里，我们可以看到，docker0的IP地址为172.17.0.1，子网掩码为255.255.0.0。\u003c/p\u003e\n\n\u003cp\u003e前面我们提到过，docker0是由Docker服务在启动时自动创建出来的以太网桥。默认情况下，所有Docker容器都会连接到docker0，然后再通过这个网桥来实现容器和外界之间的通信。那么，Docker具体是怎么做到这一点的呢？我们先用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker network ls\u003c/code\u003e命令来看一下Docker默认提供的几种网络：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker network \u003cspan class=\"nb\"\u003els\n\u003c/span\u003eNETWORK ID          NAME                DRIVER              SCOPE\nd307261937e9        bridge              bridge              \u003cspan class=\"nb\"\u003elocal\n\u003c/span\u003e9a4e6a25b62e        host                host                \u003cspan class=\"nb\"\u003elocal\n\u003c/span\u003e53cf3a3b2e4f        none                null                \u003cspan class=\"nb\"\u003elocal\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们知道，Docker容器在启动时，如果没有显式指定加入任何网络，就会默认加入到名为bridge的网络。而这个bridge网络就是基于docker0实现的。\u003c/p\u003e\n\n\u003cp\u003e除此以外，这里的host和none是有特殊含义的。其中，加入host网络的容器，可以实现和Docker daemon守护进程（也就是Docker服务）所在的宿主机网络环境进行直接通信；而none网络，则表示容器在启动时不带任何网络设备。\u003c/p\u003e\n\n\u003ch2 id=\"启动第一个容器\"\u003e启动第一个容器\u003c/h2\u003e\n\n\u003cp\u003e现在，我们就来看一下Docker容器在加入bridge网络的过程中，容器以及宿主机网络设置的变化情况。首先，我们通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker network inspect\u003c/code\u003e命令，看一下bridge网络目前的状态：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker network inspect bridge\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;d307261937e987e9a0d46279c2033824920167f31f1b0371a9f7dfc52b9e55ca\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Scope\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;local\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Driver\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;IPAM\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;Driver\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;Options\u0026#34;\u003c/span\u003e: null,\n            \u003cspan class=\"s2\"\u003e\u0026#34;Config\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"s2\"\u003e\u0026#34;Subnet\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;172.17.0.0/16\u0026#34;\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Containers\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{}\u003c/span\u003e,\n        ... ...\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们注意到，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSubnet\u003c/code\u003e字段的值为172.17.0.0/16。这表明了，bridge网络位于172.17.0.0网段，子网掩码为255.255.0.0。这和前面\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eifconfig\u003c/code\u003e命令看到的结果保持一致，docker0的IP地址刚好位于这一网段内。\u003c/p\u003e\n\n\u003cp\u003e对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e172.17.0.0/16\u003c/code\u003e这种写法感到陌生的同学，可以在网上搜一下CIDR。这是一种被称为“无类域间路由”的标记方法，其英文全称为Classless Inter-Domain Routing（简称CIDR）。这个名字听起来有点唬人，不过没关系，我们只要记住，“/”前面的部分代表当前网段的网络ID，“/”后面的部分代表子网掩码中连续1的个数。比如，在我们的例子里，16就表示连续16个1，对应的子网掩码就是：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e11111111.11111111.00000000.00000000\u003c/code\u003e，十进制表示就是：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e255.255.0.0\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e另外，我们还注意到，这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContainers\u003c/code\u003e字段目前是空的。接下来，我们启动一个新的Docker容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-dit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e busybox1 busybox sh\nUnable to find image \u003cspan class=\"s1\"\u003e\u0026#39;busybox:latest\u0026#39;\u003c/span\u003e locally\nlatest: Pulling from library/busybox\nff5eadacfa0b: Pull \u003cspan class=\"nb\"\u003ecomplete \n\u003c/span\u003eDigest: sha256:c888d69b73b5b444c2b0bd70da28c3da102b0aeb327f3a297626e2558def327f\nStatus: Downloaded newer image \u003cspan class=\"k\"\u003efor \u003c/span\u003ebusybox:latest\n4710242fd42dc97b8f36470ceb8a29c32979a60f00cccc8d55edcab04216d6d3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，Docker为我们在当前宿主机上启动了一个名为busybox1的容器。这个时候，再查看bridge网络：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker network inspect bridge\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;d307261937e987e9a0d46279c2033824920167f31f1b0371a9f7dfc52b9e55ca\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Scope\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;local\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Driver\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;IPAM\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;Driver\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;Options\u0026#34;\u003c/span\u003e: null,\n            \u003cspan class=\"s2\"\u003e\u0026#34;Config\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"s2\"\u003e\u0026#34;Subnet\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;172.17.0.0/16\u0026#34;\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Containers\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;4710242fd42dc97b8f36470ceb8a29c32979a60f00cccc8d55edcab04216d6d3\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"s2\"\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;busybox1\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;EndpointID\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;2c82c71f3dc5b34e283c7f72c300912ce0f0e11890e7570c0b72bc748a5c1184\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;MacAddress\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;02:42:ac:11:00:02\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;IPv4Address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;172.17.0.2/16\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;IPv6Address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        ... ...\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e就会发现，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContainers\u003c/code\u003e字段里出现了busybox1，也就是我们刚刚启动的那个容器。这说明busybox1容器已经成功地加入到了我们的bridge网络里。如果这个时候查看docker0网桥：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebrctl show\nbridge name\tbridge \u003cspan class=\"nb\"\u003eid\t\t\u003c/span\u003eSTP enabled\tinterfaces\ndocker0\t\t8000.024277d8e553\tno\t\tvethe657f66\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e就会发现，和一开始执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebrctl show\u003c/code\u003e的输出结果相比，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003einterfaces\u003c/code\u003e字段的位置多了一个名叫vethe657f66的网络接口。实际上，这是一种虚拟以太网设备(Virtual Ethernet Device，简称veth)。确切地说，这不是一个设备，而是一对设备，所以也被称为“veth pair”。它包含两个总是成对出现的网络接口，分别连接不同的network namespace。一端的网络接口接收到数据以后，就会立刻传送给另一端，从而在两个network namespace之间建立起了一个“通道”，实现了彼此之间的网络连通。通常，这一对接口本身并不会被分配IP地址。在我们的例子里，这个veth pair的一端位于容器busybox1里，另一端则位于宿主机上，也就是这里的vethe657f66。执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip addr show\u003c/code\u003e命令查看该接口的详细信息：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip addr show vethe657f66\n6: vethe657f66@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master docker0 state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 1a:e1:8a:b5:d3:93 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，vethe657f66后面跟着一个后缀@if5。其中的数字5，代表了作为这个veth pair的另一端（即位于busybox1容器里的那个网络接口）在对应的network namespace里所有网络接口中的位置序号。也就是每当我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip addr show\u003c/code\u003e命令的时候，输出结果里每个网络接口前面的那个数字。如果我们在busybox1里执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip addr show\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003ebusybox1 ip addr show\n... ...\n5: eth0@if6: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN\u0026gt; mtu 1500 qdisc noqueue \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e就可以看到，eth0的序号正是5，和宿主机里vethe657f66后面的@if5是一致的。与此同时，busybox1里eth0的后缀是@if6。对照前面vethe657f66的输出结果，它的序号正是6。这说明，宿主机里的vethe657f66和busybox1里的eth0构成了一对veth pair。利用这个“通道”，我们的busybox1就可以实现和外界的通信了。\u003c/p\u003e\n\n\u003ch2 id=\"启动另一个容器\"\u003e启动另一个容器\u003c/h2\u003e\n\n\u003cp\u003e接下来，我们再来启动另一个容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e-dit\u003c/span\u003e \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e busybox2 busybox sh\nfa6c607330b5cf06753e86e89b0fa7c9620e7187a4905a67c07499fdc477d4c2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，查看bridge网络：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker network inspect bridge\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;d307261937e987e9a0d46279c2033824920167f31f1b0371a9f7dfc52b9e55ca\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Scope\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;local\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Driver\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;bridge\u0026#34;\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;IPAM\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;Driver\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;Options\u0026#34;\u003c/span\u003e: null,\n            \u003cspan class=\"s2\"\u003e\u0026#34;Config\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"s2\"\u003e\u0026#34;Subnet\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;172.17.0.0/16\u0026#34;\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"s2\"\u003e\u0026#34;Containers\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;4710242fd42dc97b8f36470ceb8a29c32979a60f00cccc8d55edcab04216d6d3\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"s2\"\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;busybox1\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;EndpointID\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;2c82c71f3dc5b34e283c7f72c300912ce0f0e11890e7570c0b72bc748a5c1184\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;MacAddress\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;02:42:ac:11:00:02\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;IPv4Address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;172.17.0.2/16\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;IPv6Address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;fa6c607330b5cf06753e86e89b0fa7c9620e7187a4905a67c07499fdc477d4c2\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"s2\"\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;busybox2\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;EndpointID\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;2980a88338acb0b07ea4deb1e5a25d0264ece9fb16c5a8386469e853a101684a\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;MacAddress\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;02:42:ac:11:00:03\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;IPv4Address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;172.17.0.3/16\u0026#34;\u003c/span\u003e,\n                \u003cspan class=\"s2\"\u003e\u0026#34;IPv6Address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        ... ...\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，每次启动新的容器，默认总是会加入到这个bridge网络里的。现在的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eContainers\u003c/code\u003e字段，已经包含两个容器了，分别是busybox1和busybox2。我们还可以继续查看docker0网桥，以及veth pair分别在宿主机和容器里的网络接口信息，这里就不再赘述了。\u003c/p\u003e\n\n\u003ch2 id=\"验证网络连通性\"\u003e验证网络连通性\u003c/h2\u003e\n\n\u003cp\u003e这个时候，如果我们分别在宿主机和两个容器里执行ping命令，会发现它们三者是彼此连通的。比如，在宿主机里可以ping通容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eping 172.17.0.2 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 172.17.0.2 \u003cspan class=\"o\"\u003e(\u003c/span\u003e172.17.0.2\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 172.17.0.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.125 ms\n64 bytes from 172.17.0.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.175 ms\n64 bytes from 172.17.0.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.194 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 172.17.0.2 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.125/0.164/0.194 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在容器里可以ping通宿主机：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003ebusybox1 ping 172.17.0.1 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 172.17.0.1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e172.17.0.1\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 172.17.0.1: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.090 ms\n64 bytes from 172.17.0.1: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.147 ms\n64 bytes from 172.17.0.1: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.162 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 172.17.0.1 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.090/0.133/0.162 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e也可以ping通其他容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003ebusybox1 ping 172.17.0.3 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 172.17.0.3 \u003cspan class=\"o\"\u003e(\u003c/span\u003e172.17.0.3\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 172.17.0.3: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.513 ms\n64 bytes from 172.17.0.3: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.533 ms\n64 bytes from 172.17.0.3: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.238 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 172.17.0.3 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.238/0.428/0.533 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"iptables和-p参数\"\u003eIPTables和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p\u003c/code\u003e参数\u003c/h2\u003e\n\n\u003cp\u003e如果数据包里包含的目标端口号是8080，就把该数据包转发到目标容器：修改目标地址为容器的IP地址，修改目标端口号为容器内服务的端口号。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-11-23T00:00:00+08:00\"\u003eNovember 23, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94%E4%BB%8Edocker0%E5%BC%80%E5%A7%8B%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-docker0%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-docker0%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-docker0%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/git-merge-stories-8/\" class=\"pagination--pager\" title=\"Git合并那些事——Rebase的烦恼\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/all-in-one-openshift-v4-playground/\" class=\"pagination--pager\" title=\"All-in-One K8S Playground支持OpenShift v4\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-11-23T00:00:00+08:00",
  "Author": "MornigSpace"
}