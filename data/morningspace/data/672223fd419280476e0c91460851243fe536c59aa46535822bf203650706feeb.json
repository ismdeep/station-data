{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——模拟Docker网络",
  "Link": "https://morningspace.github.io/tech/k8s-net-mimic-docker/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#创建网桥\"\u003e创建网桥\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#创建network-namespace\"\u003e创建network namespace\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#创建并配置veth-pair\"\u003e创建并配置veth pair\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#验证网络连通性\"\u003e验证网络连通性\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eLinux的network bridge和network namespace是两个非常重要的概念，它们是理解Kubernetes网络工作原理的基础。本文，我们将通过对Docker网络环境的模拟，进一步理解network namespace和veth pair的工作原理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/docker-overlay.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在\u003ca href=\"/tech/k8s-docker0/\"\u003eKubernetes网络篇——从docker0开始\u003c/a\u003e一文里，我们已经初步讨论了Linux网络名字空间(network namespace)和网桥(network bridge)的基本概念，并通过对Docker的默认网桥docker0的分析，明白了Docker是如何利用docker0和veth pair，实现容器和外界的网络通信的。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们将手工创建network namespace和相应的网桥来模拟Docker的行为，以进一步理解Docker在容器启动时网络设置的工作原理。\u003c/p\u003e\n\n\u003ch2 id=\"创建网桥\"\u003e创建网桥\u003c/h2\u003e\n\n\u003cp\u003e利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebrctl\u003c/code\u003e命令，我们可以创建自己的网桥：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebrctl addbr lab-br0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebrctl show\nbridge name\tbridge \u003cspan class=\"nb\"\u003eid\t\t\u003c/span\u003eSTP enabled\tinterfaces\ndocker0\t\t8000.024277d8e553\tno\t\tvethe657f66\n\t\t\t\t\t\t\tveth617de44\nlab-br0\t\t8000.000000000000\tno\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并为它指定IP地址：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eifconfig lab-br0 10.15.10.1 netmask 255.255.255.0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eifconfig lab-br0\nlab-br0   Link encap:Ethernet  HWaddr 36:5F:BE:DC:14:14  \n          inet addr:10.15.10.1  Bcast:10.15.10.255  Mask:255.255.255.0\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.0 B\u003cspan class=\"o\"\u003e)\u003c/span\u003e  TX bytes:0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e0.0 B\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们为新建的lab-br0网桥指定的IP地址为10.15.10.1。它位于10.15.10.0网段内，子网掩码为255.255.255.0。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/network-1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"创建network-namespace\"\u003e创建network namespace\u003c/h2\u003e\n\n\u003cp\u003e然后，我们再创建一个network namespace，比如叫lab-ns0，用来模拟一个容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns add lab-ns0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns list\nlab-ns0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/network-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"创建并配置veth-pair\"\u003e创建并配置veth pair\u003c/h2\u003e\n\n\u003cp\u003e接下来，再为lab-ns0指定一对虚拟以太网接口，分别起名veth0和veth1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003eadd veth0 \u003cspan class=\"nb\"\u003etype \u003c/span\u003eveth peer name veth1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003elist\n... ...\n10: veth1@veth0: \u0026lt;BROADCAST,MULTICAST,M-DOWN\u0026gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 62:a1:e7:5c:20:29 brd ff:ff:ff:ff:ff:ff\n11: veth0@veth1: \u0026lt;BROADCAST,MULTICAST,M-DOWN\u0026gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 22:ad:bb:d2:cc:60 brd ff:ff:ff:ff:ff:ff\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e到目前为止，这两个新建的网络接口都位于宿主机上，属于global(或者称为default)的network namespace。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/network-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e接下来，让我们把其中一端veth1连接到lab-ns0。相当于把veth1“移入”容器对应的network namespace里。作为对比，我们可以在开始移动之前，查看一下lab-ns0目前的网络设备：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003elist\n1: lo: \u0026lt;LOOPBACK\u0026gt; mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: tunl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop state DOWN mode DEFAULT group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ipip 0.0.0.0 brd 0.0.0.0\n3: ip6tnl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1452 qdisc noop state DOWN mode DEFAULT group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/tunnel6 :: brd ::\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后执行如下命令，把veth1移到lab-ns0里：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eveth1 netns lab-ns0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/network-4.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这个时候再查看lab-ns0里的网络设备：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003elist\n... ...\n10: veth1@if11: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 62:a1:e7:5c:20:29 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e就会发现，和原来相比lab-ns0里多了一个新的网络接口veth1。而且，根据后缀@if11可知，它应该对应于宿主机上序号为11的网络接口。再次在宿主机上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip link list\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink \u003c/span\u003elist\n... ...\n11: veth0@if10: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 22:ad:bb:d2:cc:60 brd ff:ff:ff:ff:ff:ff link-netns lab-ns0\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到veth0前面的序号正是11。而且，原来出现在输出结果里的veth1这时已经消失不见了，原因就是由于我们把它挪到了lab-ns0里。\u003c/p\u003e\n\n\u003cp\u003e如果这个时候，我们再把位于lab-ns0里的veth1重新命名为eth0，那就和前面busybox1, busybox2容器里的veth接口看上去一摸一样了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003eveth1 name eth0\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip \u003cspan class=\"nb\"\u003elink \u003c/span\u003elist\n... ...\n10: eth0@if11: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 62:a1:e7:5c:20:29 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，让我们为lab-ns0里的eth0设置IP地址：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip addr add 10.15.10.2/24 dev eth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip addr show\u003c/code\u003e命令查看eth0，可以验证IP地址是否设置成功：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip addr show eth0\n10: eth0@if11: \u0026lt;BROADCAST,MULTICAST\u0026gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 62:a1:e7:5c:20:29 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.15.10.2/24 scope global eth0\n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在，让我们把veth pair的另一端，也就是veth0，连接到lab-br0网桥，或者说“移入”lab-br0，从而实现lab-ns0和宿主机之间的网络连通：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebrctl addif lab-br0 veth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/network-5.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这个时候执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebrctl show\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ebrctl show\nbridge name\tbridge \u003cspan class=\"nb\"\u003eid\t\t\u003c/span\u003eSTP enabled\tinterfaces\ndocker0\t\t8000.024277d8e553\tno\t\tvethe657f66\n\t\t\t\t\t\t\tveth617de44\nlab-br0\t\t8000.22adbbd2cc60\tno\t\tveth0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对照之前的输出结果可以看到，这个时候在lab-br0的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eintnerfaces\u003c/code\u003e字段下出现了veth0，这表明veth0已经成功连接到lab-br0了。\u003c/p\u003e\n\n\u003cp\u003e如果这个时候我们在lab-ns0里执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip route list\u003c/code\u003e命令查看静态路由规则：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip route list\n10.15.10.0/24 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.15.10.2 linkdown \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会看到这里唯一的一条路由规则指明了，所有从IP地址为10.15.10.2过来的数据包，都将被路由到10.15.10.0/24这一网段。对照前面我们知道，10.15.10.2对应的就是网络接口veth1，也就是lab-ns0里后来被我们重命名为eth0的那个接口。而10.15.10.0/24则是我们在为lab-br0指定IP地址时所定义的网段。\u003c/p\u003e\n\n\u003cp\u003e再来看一下宿主机上的静态路由规则：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip route list\ndefault via 172.20.0.1 dev eth0 \n10.15.10.0/24 dev lab-br0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.15.10.1 \n172.17.0.0/16 dev docker0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 172.17.0.1 \n172.20.0.0/16 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 172.20.0.2 \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edev lab-br0\u003c/code\u003e所在行对应的路由规则表明了，通过IP地址10.15.10.1过来的数据包，也会被路由到10.15.10.0/24这一网段，而10.15.10.1就是我们为lab-br0网桥指定的IP地址。\u003c/p\u003e\n\n\u003cp\u003e通过对路由规则的分析，我们可以得出结论：数据包在经过lab-ns0的eth0，以及宿主机上的lab-br0时，最终都会被路由到同一网段10.15.10.0/24，因此它们彼此之间应该是可以互相连通的。接下来，我们就来验证这个结论。\u003c/p\u003e\n\n\u003ch2 id=\"验证网络连通性\"\u003e验证网络连通性\u003c/h2\u003e\n\n\u003cp\u003e可以在宿主机和network namespace之间尝试用ping命令验证网络的连通性。不过在这之前，我们还需要把veth pair的两端分别启动起来。首先是宿主机一端的veth0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003edev veth0 up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后是lab-ns0里的eth0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003edev eth0 up\n\u003cspan class=\"c\"\u003e# 此处会生成路由规则\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后还需要把lab-ns0里的loopback接口启动起来：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ip \u003cspan class=\"nb\"\u003elink set \u003c/span\u003edev lo up\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，我们就可以执行ping命令了。比如，在宿主机上试着ping一下lab-ns0里的eth0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eping 10.15.10.2 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 10.15.10.2 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.15.10.2\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 10.15.10.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.121 ms\n64 bytes from 10.15.10.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.163 ms\n64 bytes from 10.15.10.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.164 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 10.15.10.2 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.121/0.149/0.164 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e或者从lab-ns0里试着ping一下宿主机上的lab-br0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ping 10.15.10.1 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 10.15.10.1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.15.10.1\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 10.15.10.1: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.109 ms\n64 bytes from 10.15.10.1: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.117 ms\n64 bytes from 10.15.10.1: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.167 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 10.15.10.1 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.109/0.131/0.167 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e或者从lab-ns0里试着ping一下eth0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ping 10.15.10.2 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 10.15.10.2 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.15.10.2\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 10.15.10.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.106 ms\n64 bytes from 10.15.10.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.129 ms\n64 bytes from 10.15.10.2: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.117 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 10.15.10.2 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.106/0.117/0.129 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e除此以外，如果我们重复上面的步骤，再新建一个network namespace，比如叫lab-ns1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns list\nlab-ns1 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 4\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nlab-ns0 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e: 3\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并且为它也配好位于同一网段的veth pair，IP地址为10.15.10.3：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns1 ip addr show eth0\n12: eth0@if13: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 72:0d:b2:5f:89:a3 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.15.10.3/24 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::700d:b2ff:fe5f:89a3/64 scope \u003cspan class=\"nb\"\u003elink \n       \u003c/span\u003evalid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e相应的路由规则也会把经过它的数据包路由到10.15.10.0/24网段：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns1 ip route list\n10.15.10.0/24 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.15.10.3 \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，如果我们从其中一个network namespace，尝试ping另一个：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip netns \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-ns0 ping 10.15.10.3 \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e 3\nPING 10.15.10.3 \u003cspan class=\"o\"\u003e(\u003c/span\u003e10.15.10.3\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 56 data bytes\n64 bytes from 10.15.10.3: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.271 ms\n64 bytes from 10.15.10.3: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.181 ms\n64 bytes from 10.15.10.3: \u003cspan class=\"nb\"\u003eseq\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2 \u003cspan class=\"nv\"\u003ettl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e64 \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0.637 ms\n\n\u003cspan class=\"nt\"\u003e---\u003c/span\u003e 10.15.10.3 ping statistics \u003cspan class=\"nt\"\u003e---\u003c/span\u003e\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.181/0.363/0.637 ms\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e结果发现也是能ping通的。这说明，多个network namespace只要被路由到同一网段（也就是加入到同一网络），那它们之间就可以实现互通。在Docker里，多个容器通过加入同一bridge网络实现互通，就是这个原理！\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-12-13T00:00:00+08:00\"\u003eDecember 13, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94%E6%A8%A1%E6%8B%9FDocker%E7%BD%91%E7%BB%9C%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-mimic-docker%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-mimic-docker%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-mimic-docker%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/openshift-v4-trap-and-pitfalls/\" class=\"pagination--pager\" title=\"OpenShift v4的填坑之旅\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/git-workflow-1/\" class=\"pagination--pager\" title=\"Git工作流面面观——分支模型\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-12-13T00:00:00+08:00",
  "Author": "MornigSpace"
}