{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——将CNI用于容器",
  "Link": "https://morningspace.github.io/tech/k8s-net-cni-docker-rkt/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#docker与cni\"\u003eDocker与CNI\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#让docker使用cni\"\u003e让Docker使用CNI\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#配置cni插件\"\u003e配置CNI插件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#运行cni插件\"\u003e运行CNI插件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#验证网络\"\u003e验证网络\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#关于rkt\"\u003e关于rkt\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#rkt结合cni\"\u003erkt结合CNI\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#关于实验环境\"\u003e关于实验环境\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#安装rkt\"\u003e安装rkt\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#配置cni插件-1\"\u003e配置CNI插件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#启动容器\"\u003e启动容器\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#验证网络-1\"\u003e验证网络\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eCNI在真正的容器系统里是如何工作的呢？本文将利用CNI的bridge插件，分别以Docker和rkt为例，来演示它的工作原理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"docker与cni\"\u003eDocker与CNI\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/docker.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在\u003ca href=\"/tech/k8s-net-cni/\"\u003eKubernetes网络篇——认识CNI\u003c/a\u003e一文里，我们利用标准的CNI插件bridge，为手工创建的network namespace建立起了相应的网络环境。本文，我们来看一下如何把CNI用于真正的容器系统，首先来看一下Docker。\u003c/p\u003e\n\n\u003cp\u003e要让Docker使用CNI并没有想象中那么简单和直观。在\u003ca href=\"/tech/k8s-net-docker0/\"\u003eKubernetes网络篇——从docker0开始\u003c/a\u003e和\u003ca href=\"/tech/k8s-net-mimic-docker/\"\u003e模拟Docker网络\u003c/a\u003e里我们已经看到了，利用bridge network可以实现容器和外界的网络通信。但bridge network是位于Layer-2即数据链路层的设备，只提供基于Layer-2的数据包转发，没有办法实现基于Layer-3即网络层的路由功能，以及其他一些像overlay network这样的高阶功能。这些需求要单靠Docker自己是无法全部满足的。更好的办法是开放标准接口，让第三方来实现它们自己的网络服务，这就是Docker网络的设计思路，这和CNI的出发点很类似。Docker也有很多支持各种网络功能的插件，但它们遵循的标准并不是CNI，而是另一套被称为CNM(Container Network Model)的标准。\u003c/p\u003e\n\n\u003cp\u003e不过，Docker并不是唯一的容器技术，还有一些其他的竞争者，比如像rkt，就是支持CNI的。一般认为，CNI的接口更加简单，所以它被认可和采纳的范围更广一些。另外，以Kubernetes为代表的一些容器集群与编排技术，也不希望绑定到某个特定的容器技术上，所以就会倾向于接受程度更广的CNI。关于这一点，Kubernetes的网站上有\u003ca href=\"https://kubernetes.io/blog/2016/01/why-kubernetes-doesnt-use-libnetwork/\"\u003e一篇文章\u003c/a\u003e，专门提到了它之所以没有选择CNM的原因。\u003c/p\u003e\n\n\u003ch2 id=\"让docker使用cni\"\u003e让Docker使用CNI\u003c/h2\u003e\n\n\u003cp\u003e虽然Docker有自己的网络插件机制，但我们还是可以让它和CNI工作在一起的。为了做到这一点，可以在启动容器时指定\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--net=none\u003c/code\u003e，告诉Docker不要带任何网络设备，下面我们就来演示一下。\u003c/p\u003e\n\n\u003cp\u003e这次我们选择以nginx为例，把它当作一个基本的Web服务器。默认的nginx镜像不包含\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip\u003c/code\u003e命令，为了方便后面的实验，我们以nginx作为base镜像，在它的基础上安装了iproute2。把下面的Dockerfile保存到当前目录：\u003c/p\u003e\n\u003cdiv class=\"language-docker highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e nginx\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003eapt-get update \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e    apt-get \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e \u003cspan class=\"nt\"\u003e--no-install-recommends\u003c/span\u003e \u003cspan class=\"nt\"\u003e--no-install-suggests\u003c/span\u003e \u003cspan class=\"nt\"\u003e-y\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e    iproute2 \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e    \u003cspan class=\"nb\"\u003erm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-rf\u003c/span\u003e /var/lib/apt/lists/\u003cspan class=\"k\"\u003e*\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后执行下面的命令构建Docker镜像：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker build \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e morningspace/lab-web \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并启动相应的容器，不带任何网络：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker run \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e lab-web \u003cspan class=\"nt\"\u003e--net\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enone \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e morningspace/lab-web\n2296af8b515dcda2683deb4e95935427ffbce9a5e13332e33c52230fadc1aec0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e等容器启动以后，查看它的网络设置：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-web ip addr show\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: tunl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop state DOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ipip 0.0.0.0 brd 0.0.0.0\n3: ip6tnl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1452 qdisc noop state DOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/tunnel6 :: brd ::\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们会发现，这个时候容器里只有一个loopback和两个默认创建的网络接口，并没有带IP地址的以太网接口，所以容器也就没有和宿主机的bridge连接起来。\u003c/p\u003e\n\n\u003ch3 id=\"配置cni插件\"\u003e配置CNI插件\u003c/h3\u003e\n\n\u003cp\u003e接下来，我们要利用CNI把这个Docker容器连接到宿主机的bridge上。首先为CNI插件创建配置文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e lab-br1.conf \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\n{\n    \u0026#34;cniVersion\u0026#34;: \u0026#34;0.4.0\u0026#34;,\n    \u0026#34;name\u0026#34;: \u0026#34;lab-br1\u0026#34;,\n    \u0026#34;type\u0026#34;: \u0026#34;bridge\u0026#34;,\n    \u0026#34;bridge\u0026#34;: \u0026#34;lab-br1\u0026#34;,\n    \u0026#34;isGateway\u0026#34;: true,\n    \u0026#34;ipMasq\u0026#34;: true,\n    \u0026#34;ipam\u0026#34;: {\n        \u0026#34;type\u0026#34;: \u0026#34;host-local\u0026#34;,\n        \u0026#34;subnet\u0026#34;: \u0026#34;10.15.20.0/24\u0026#34;,\n        \u0026#34;routes\u0026#34;: [\n            { \u0026#34;dst\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34; }\n        ]\n    }\n}\n\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e关于文件里的每一项配置，这里就不再一一解释了，大家可以在\u003ca href=\"/tech/k8s-net-cni/\"\u003eKubernetes网络篇——认识CNI\u003c/a\u003e一文里找到详细的说明。\u003c/p\u003e\n\n\u003ch3 id=\"运行cni插件\"\u003e运行CNI插件\u003c/h3\u003e\n\n\u003cp\u003e接下来，我们要运行CNI插件为容器创建网络了。之前曾经提到过，在运行CNI插件时，我们需要通过环境变量CNI_CONTAINERID和CNI_NETNS告诉插件容器的Id和对应network namespace的路径。\u003c/p\u003e\n\n\u003cp\u003e为了拿到这两个数据，我们可以执行如下命令，对容器的元数据进行查询：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker inspect lab-web | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-E\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;SandboxKey|Id\u0026#39;\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Id\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;2296af8b515dcda2683deb4e95935427ffbce9a5e13332e33c52230fadc1aec0\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;SandboxKey\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;/var/run/docker/netns/801b81aea4e1\u0026#34;\u003c/span\u003e,\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，属性Id的取值，对应的就是容器的Id，SandboxKey的取值就是network namespace的路径。有了这两个值，我们就可以运行CNI插件了。此处，我们确保当前位于/root/test-cni/plugins目录下：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ CNI_COMMAND\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eADD \u003cspan class=\"nv\"\u003eCNI_CONTAINERID\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2296af8b515dcda2683deb4e95935427ffbce9a5e13332e33c52230fadc1aec0 \u003cspan class=\"nv\"\u003eCNI_NETNS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/var/run/docker/netns/801b81aea4e1 \u003cspan class=\"nv\"\u003eCNI_IFNAME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0 \u003cspan class=\"nv\"\u003eCNI_PATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e ./bridge \u0026lt;../conf/lab-br1.conf\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\u0026#34;cniVersion\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0.4.0\u0026#34;\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;interfaces\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;lab-br1\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;mac\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;52:ba:e2:62:01:1e\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;vethd5747d99\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;mac\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;2e:42:d8:e3:c9:11\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e,\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;eth0\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;mac\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;26:3f:a5:1f:c8:27\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;sandbox\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;/var/run/docker/netns/801b81aea4e1\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;ips\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;version\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;4\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;interface\u0026#34;\u003c/span\u003e: 2,\n            \u003cspan class=\"s2\"\u003e\u0026#34;address\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;10.15.20.5/24\u0026#34;\u003c/span\u003e,\n            \u003cspan class=\"s2\"\u003e\u0026#34;gateway\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;10.15.20.1\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;routes\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s2\"\u003e\u0026#34;dst\u0026#34;\u003c/span\u003e: \u003cspan class=\"s2\"\u003e\u0026#34;0.0.0.0/0\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n    \u003cspan class=\"s2\"\u003e\u0026#34;dns\u0026#34;\u003c/span\u003e: \u003cspan class=\"o\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"验证网络\"\u003e验证网络\u003c/h3\u003e\n\n\u003cp\u003e接下来，让我们来验证一下CNI为我们配置的网络环境。首先查看一下宿主机的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip addr show\n... ...\n9: lab-br1: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 52:ba:e2:62:01:1e brd ff:ff:ff:ff:ff:ff\n    inet 10.15.20.1/24 brd 10.15.20.255 scope global lab-br1\n       valid_lft forever preferred_lft forever\n21: vethd5747d99@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master lab-br1 state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 2e:42:d8:e3:c9:11 brd ff:ff:ff:ff:ff:ff link-netnsid 2\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，输出结果里和原来相比多了lab-br1和veth pair在宿主机一端的接口vethd5747d99@if5。并且，CNI为lab-br1自动分配的IP地址\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.1\u003c/code\u003e，正好位于我们指定的网段\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.0/24\u003c/code\u003e范围内。\u003c/p\u003e\n\n\u003cp\u003e再来看一下容器里的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-web ip addr show\n... ...\n5: eth0@if21: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 26:3f:a5:1f:c8:27 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.15.20.5/24 brd 10.15.20.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，和原来相比除了默认的几个网络接口以外，还多了一个eth0，并且CNI为它分配的IP地址\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.5\u003c/code\u003e，也在我们指定的网段内。\u003c/p\u003e\n\n\u003cp\u003e接下来再看一下容器的路由规则：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003elab-web ip route\ndefault via 10.15.20.1 dev eth0 \n10.15.20.0/24 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.15.20.5 \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，所有来自\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.5\u003c/code\u003e，也就是当前容器的数据包，都将直接发往\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.0/24\u003c/code\u003e网段。对于其他情况，则选择默认路由规则，数据包将被发往位于宿主机上的网桥。\u003c/p\u003e\n\n\u003cp\u003e最后，我们来验证一下从宿主机到容器的网络连通性：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl http://10.15.20.5\n\u0026lt;\u003cspan class=\"o\"\u003e!\u003c/span\u003eDOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n\u0026lt;\u003cspan class=\"nb\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt;\n\u0026lt;style\u0026gt;\n    body \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        width: 35em\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        margin: 0 auto\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        font-family: Tahoma, Verdana, Arial, sans-serif\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n\u0026lt;h1\u0026gt;Welcome to nginx!\u0026lt;/h1\u0026gt;\n... ...\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过上面的实验我们看到了，利用CNI插件为Docker容器设置网络环境和为network namespace设置网络环境没有什么差别。我们只要告诉插件，目标网络的配置信息，以及容器的Id和对应network namespace的路径，剩下的事情就可以交给插件自己来完成了。\u003c/p\u003e\n\n\u003ch2 id=\"关于rkt\"\u003e关于rkt\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/rkt.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://coreos.com/rkt/\"\u003erkt\u003c/a\u003e是2014年底由\u003ca href=\"https://coreos.com/\"\u003eCoreOS\u003c/a\u003e推出的。作为Docker容器技术的竞争者之一，它的主要特点包括：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e以pod而非容器为基本执行单元，也就是所谓的“pod-native”。这里pod的概念和Kubernetes里的pod是类似的，即：在一个共享的上下文里执行的一个或多个容器化应用，这也是它和Docker的主要区别之一；\u003c/li\u003e\n  \u003cli\u003erkt和Docker相比的另一个显著不同在于，它不像Docker那样有一个集中的Daemon来负责所有容器的生命周期管理，这样可以更好的和Linux的一些所谓的init系统相兼容，比如像：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esystemd\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eupstart\u003c/code\u003e等；\u003c/li\u003e\n  \u003cli\u003e与Docker不同，rkt是直接原生支持CNI的，因此它不用像Docker那样，需要在启动容器时，通过特殊参数禁掉默认的网络设置逻辑以后，再手工执行CNI插件；\u003c/li\u003e\n  \u003cli\u003erkt还兼容Docker的镜像格式，它可以直接从Docker的注册表里抓取镜像并运行容器；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e如果说本文前半部分用Docker来演示CNI的使用看起来有点“不太正规”，那么后半部分作为原生支持CNI的rkt，通过它来演示CNI应该会更具有代表性，也更符合实际情况。下面我们就来看一下，rkt是怎么和CNI结合在一起工作的。\u003c/p\u003e\n\n\u003ch2 id=\"rkt结合cni\"\u003erkt结合CNI\u003c/h2\u003e\n\n\u003ch3 id=\"关于实验环境\"\u003e关于实验环境\u003c/h3\u003e\n\n\u003cp\u003e由于rkt是和Docker一样的容器运行环境，因此针对rkt的实验，就不太适合在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emorningspace/lab-dind\u003c/code\u003e这样的Docker容器里进行了。对于这一部分实验，我是在本地MacOS上的一个虚机环境里进行的，我所使用的Linux发行版本是debian/jessie64。它是跑在VirtualBox上，并通过Vagrant来管理的。关于如何在MacOS上利用VirtualBox和Vagrant来跑Debian，因为不是本文关注的焦点，所以这里就不展开了。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e笔者还真的尝试过在基于CentOS的Docker容器里跑rkt，而且貌似差不多要成功了。不过后来觉得太tricky了，加上时间关系，最后还是选择了放弃。过程中遇到的“坑”主要是：在容器里运行overlay文件系统的冲突，以及privileged权限的缺失问题。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"安装rkt\"\u003e安装rkt\u003c/h3\u003e\n\n\u003cp\u003e在Debian上安装rkt很简单，rkt的发布版本包含了.deb的安装包，我们只要在它的GitHub库里选择希望安装的版本，然后把它下载到本地进行安装就可以了，比如：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ewget https://github.com/rkt/rkt/releases/download/v1.30.0/rkt_1.30.0-1_amd64.deb\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ewget https://github.com/rkt/rkt/releases/download/v1.30.0/rkt_1.30.0-1_amd64.deb.asc\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egpg \u003cspan class=\"nt\"\u003e--keyserver\u003c/span\u003e keys.gnupg.net \u003cspan class=\"nt\"\u003e--recv-key\u003c/span\u003e 18AD5014C99EF7E3BA5F6CE950BDD3E0FC8A365E\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egpg \u003cspan class=\"nt\"\u003e--verify\u003c/span\u003e rkt_1.30.0-1_amd64.deb.asc\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003edpkg \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e rkt_1.30.0-1_amd64.deb\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e当安装完毕以后，可以执行下面的命令来验证安装是否成功：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003erkt version\nrkt Version: 1.30.0\nappc Version: 0.8.11\nGo Version: go1.8.3\nGo OS/Arch: linux/amd64\nFeatures: \u003cspan class=\"nt\"\u003e-TPM\u003c/span\u003e +SDJOURNAL\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"配置cni插件-1\"\u003e配置CNI插件\u003c/h3\u003e\n\n\u003cp\u003erkt是借助CNI来配置容器的网络接口的。因此，我们也需要为CNI插件提供相应的配置文件。由于rkt原生支持CNI，所以我们不需要像Docker那样手工执行CNI插件，而是把配置文件放到特定目录下，默认位于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/rkt/net.d\u003c/code\u003e，rkt会在容器启动的时候自动扫描这个目录下的配置文件。\u003c/p\u003e\n\n\u003cp\u003e为方便后面的操作，我们先把当前用户切换到root，并创建\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/rkt/net.d\u003c/code\u003e目录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003esu\nPassword:\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e /etc/rkt/net.d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后在该目录下创建配置文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /etc/rkt/net.d\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e lab-rkt-br.conf \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\n{\n    \u0026#34;cniVersion\u0026#34;: \u0026#34;0.4.0\u0026#34;,\n    \u0026#34;name\u0026#34;: \u0026#34;lab-rkt-br\u0026#34;,\n    \u0026#34;type\u0026#34;: \u0026#34;bridge\u0026#34;,\n    \u0026#34;bridge\u0026#34;: \u0026#34;lab-rkt-br\u0026#34;,\n    \u0026#34;isGateway\u0026#34;: true,\n    \u0026#34;ipMasq\u0026#34;: true,\n    \u0026#34;ipam\u0026#34;: {\n        \u0026#34;type\u0026#34;: \u0026#34;host-local\u0026#34;,\n        \u0026#34;subnet\u0026#34;: \u0026#34;10.15.20.0/16\u0026#34;,\n        \u0026#34;routes\u0026#34;: [\n            { \u0026#34;dst\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34; }\n        ]\n    }\n}\n\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"启动容器\"\u003e启动容器\u003c/h3\u003e\n\n\u003cp\u003e执行下面的命令启动一个容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003erkt run \u003cspan class=\"nt\"\u003e--insecure-options\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eimage \u003cspan class=\"nt\"\u003e--interactive\u003c/span\u003e \u003cspan class=\"nt\"\u003e--net\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003elab-rkt-br docker://busybox\nDownloading sha256:8e674ad76dc \u003cspan class=\"o\"\u003e[===============================]\u003c/span\u003e 763 KB / 763 KB\nrun: disabling overlay support: \u003cspan class=\"s2\"\u003e\u0026#34;overlay entry not present in /proc/filesystems\u0026#34;\u003c/span\u003e\n/ \u003cspan class=\"c\"\u003e#\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--net\u003c/code\u003e参数告诉rkt，容器在启动时要加入的网络；\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--interactive\u003c/code\u003e参数告诉rkt，容器在启动以后进入交互模式；另外，我们选择了位于\u003ca href=\"https://hub.docker.com/\"\u003eDocker Hub\u003c/a\u003e上的Docker镜像busybox。为此，我们需要在镜像名前面加上\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker://\u003c/code\u003e。同时，因为Docker镜像不像rkt那样支持签名验证(signature verification)，所以还要加上\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--insecure-options=image\u003c/code\u003e参数。\u003c/p\u003e\n\n\u003ch3 id=\"验证网络-1\"\u003e验证网络\u003c/h3\u003e\n\n\u003cp\u003e因为执行完\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erkt run\u003c/code\u003e以后，就进入到busybox容器里面了，所以我们可以在容器里执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip\u003c/code\u003e命令，查看网络接口的变化情况：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e/ # ip addr show\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue \n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n3: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue \n    link/ether b2:e1:43:77:64:85 brd ff:ff:ff:ff:ff:ff\n    inet 10.15.20.2/16 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::b0e1:43ff:fe77:6485/64 scope link \n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，这里的eth0对应的就是veth pair在容器内的那一端，它的IP地址是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.2\u003c/code\u003e，位于我们之前定义的网段\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.0/16\u003c/code\u003e范围内。\u003c/p\u003e\n\n\u003cp\u003e紧接着，我们再通过按键\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCtrl + ]]]\u003c/code\u003e，即：按住\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eCtrl\u003c/code\u003e的同时连续按三次\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e]\u003c/code\u003e，从容器的交互模式里退出并回到宿主机。然后进入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/lib/cni/networks\u003c/code\u003e目录，也就是我们的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ehost-local\u003c/code\u003e插件保存网络配置信息的地方：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /var/lib/cni/networks/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003elab-rkt-br\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003elab-rkt-br/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003e10.15.20.2\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003e10.15.20.2 \n0310ac0a-08f8-4d84-8b65-1669bb9c5f19\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp\u003e可以看到，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003enetworks\u003c/code\u003e目录下的子目录名就是我们之前定义的网络名\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elab-rkt-br\u003c/code\u003e。这个目录下包含的文件\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.2\u003c/code\u003e，其名称就是我们为容器分配的IP地址，文件内容则是容器的Id。\u003c/p\u003e\n\n\u003cp\u003e我们可以通过执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erkt list --full\u003c/code\u003e查看当前运行的所有容器，并返回完整的容器Id：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003erkt list \u003cspan class=\"nt\"\u003e--full\u003c/span\u003e\nUUID\t\t\t\t\tAPP\tIMAGE NAME\t\t\t\t\tIMAGE ID\t\tSTATE\tCREATED\t\t\t\t\tSTARTED\t\t\t\t\tNETWORKS\n0310ac0a-08f8-4d84-8b65-1669bb9c5f19\tbusybox\tregistry-1.docker.io/library/busybox:latest\tsha512-bea5a3990a66\trunning\t2019-06-17 12:49:40.58 +0000 GMT\t2019-06-17 12:49:40.784 +0000 GMT\tlab-rkt-br:ip4\u003cspan class=\"o\"\u003e=\u003c/span\u003e10.15.20.2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在UUID一栏所显示的值，正是我们在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.15.20.2\u003c/code\u003e文件里看到的值。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-03-14T00:00:00+08:00\"\u003eMarch 14, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94%E5%B0%86CNI%E7%94%A8%E4%BA%8E%E5%AE%B9%E5%99%A8%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-cni-docker-rkt%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-cni-docker-rkt%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-cni-docker-rkt%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/k8s-net-cni/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——认识CNI\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/k8s-net-cni-coding-shell/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——自己动手写CNI插件(上)\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-03-14T00:00:00+08:00",
  "Author": "MornigSpace"
}