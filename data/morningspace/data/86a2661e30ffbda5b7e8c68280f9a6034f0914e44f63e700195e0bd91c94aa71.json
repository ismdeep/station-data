{
  "Source": "morningspace",
  "Title": "Git解密——认识Git引用",
  "Link": "https://morningspace.github.io/tech/inside-git-3/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#认识git引用\"\u003e认识Git引用\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#head指针\"\u003eHEAD指针\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#tag对象及引用\"\u003eTag对象及引用\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#remote引用\"\u003eRemote引用\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003e也许你早已经熟悉了Git的日常使用，但是你可曾想过：为什么每次新建Git库时都要执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e呢？执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e后生成的.git目录里到底藏了哪些秘密？平常使用Git客户端，以及命令行执行git命令时，Git在背后到底为我们默默地做了些什么呢？阅读本文以后，一切谜团都将引刃而解！\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e注：\n本文的大部分写作灵感来自于\u003ca href=\"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain\"\u003e“Pro Git book”\u003c/a\u003e。感谢原作者的精彩分享。\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/logo-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"认识git引用\"\u003e认识Git引用\u003c/h2\u003e\n\n\u003cp\u003e前面我们介绍了Git对象的基本概念，以及几类典型的Git对象。从本节开始，我们将把目光投向Git引用（Reference），也就是指向Git对象的指针。\u003c/p\u003e\n\n\u003cp\u003e我们已经看到，在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e后面加上某个commit对象的唯一键，可以查看从这个提交开始往前的所有提交历史。但是，这依然需要我们记住commit对象的唯一键才行。如果能把唯一键存到某个文件里，然后利用这个文件的文件名来引用相应的commit对象，就不需要我们记住那些毫无规律的hash值了。事实上，Git就是这么做的。在Git里，这些引用被保存在.git/refs目录下。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind .git/refs\n.git/refs\n.git/refs/heads\n.git/refs/tags\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind .git/refs \u003cspan class=\"nt\"\u003e-type\u003c/span\u003e f\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e观察.git/refs目录我们可以发现，refs下面还有两个子目录，分别是heads和tags。关于heads和tags，后面我们还会详细讨论。由于目前为止，我们还没有创建任何引用，所以.git/refs下是一套空的目录结构。下面我们就来手工新建一个引用，让它指向当前分支（默认即master分支）的最新提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho \u003c/span\u003ee0ec828eda6b51b170fff6b5fdfa03a3cb70a13e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e .git/refs/heads/master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这样我们就可以用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e来查看master分支上从head指针开始往前的所有提交历史了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--pretty\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eoneline master\ne0ec828eda6b51b170fff6b5fdfa03a3cb70a13e \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e third commit\n04081ddb43269238a1cb8a61a2d04a36986febfa second commit\n4c50701f89265f9ca6eeb3ddffae450da55f9bd5 first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另外，Git还专门提供了一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit update-ref\u003c/code\u003e命令，也可以用它来给引用设值：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit update-ref refs/heads/master e0ec828eda6b51b170fff6b5fdfa03a3cb70a13e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e实际上，Git的分支功能就是基于引用实现的。Git在每个分支上都有一个head指针，指向该分支的最新提交。比如，如果我们要在第二次提交的地方新开一个分支，可以这样做：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit update-ref refs/heads/dev 04081ddb43269238a1cb8a61a2d04a36986febfa\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e结果相当于我们用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit branch\u003c/code\u003e命令新建了一个名为dev的分支。如果这个时候执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit branch\u003c/code\u003e，我们会看到除了master分支外，还多了一个dev分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e master\n  dev\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e查看dev分支的提交历史，我们会发现这次的提交历史是从第二次提交开始的，这是因为第三次提交只存在于master分支上：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--pretty\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eoneline dev\n04081ddb43269238a1cb8a61a2d04a36986febfa \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e second commit\n4c50701f89265f9ca6eeb3ddffae450da55f9bd5 first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eGit引用与相应commit对象之间的关联关系如下图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/inside-git-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"head指针\"\u003eHEAD指针\u003c/h2\u003e\n\n\u003cp\u003e前面提到了，利用Git引用可以帮助我们创建分支。所以，位于.git/refs/heads下的引用又被称为branch引用。有一个问题，当我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit branch \u0026lt;branch\u0026gt;\u003c/code\u003e新建分支的时候，Git是怎么知道最新提交所对应的唯一键的呢？答案就在.git/HEAD文件里。按照Git的说法，HEAD文件是一种指向当前分支上最新提交的符号引用（symbolic reference）。所谓符号引用是指，它并不直接指向某个commit对象，而是指向另一个引用，再由那个引用间接地指向commit对象。比如，如果我们查看.git/HEAD文件的当前内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/HEAD\nref: refs/heads/master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e会发现它的值等于refs/heads/master，代表了master分支上的head指针。再通过查看.git/refs/heads目录下的master文件，我们就能找到对应的commit对象了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/refs/heads/master \ne0ec828eda6b51b170fff6b5fdfa03a3cb70a13e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果这个时候我们把分支从master切换到dev，然后再看HEAD文件的内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout dev\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;dev\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/HEAD\nref: refs/heads/dev\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e就会发现HEAD文件所对应的引用已经变成了refs/heads/dev，也就是dev分支上的head指针。HEAD文件与相应Git引用之间的关系如下图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/inside-git-4.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e另外，当我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit commit\u003c/code\u003e时，Git在创建commit对象时也会更新HEAD文件，让head指针指向新的commit对象，并把HEAD文件里原来所指向的commit对象作为新commit对象的parent。\u003c/p\u003e\n\n\u003cp\u003e对于符号引用的操作，Git还提供了一个专门的命令：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit symbolic-ref\u003c/code\u003e。利用它，我们不仅可以实现对HEAD文件内容的读取，还可以进行安全的写入：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit symbolic-ref HEAD\nrefs/heads/master\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit symbolic-ref HEAD refs/heads/dev\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/HEAD\nref: refs/heads/dev\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"tag对象及引用\"\u003eTag对象及引用\u003c/h2\u003e\n\n\u003cp\u003eTag是Git提供的又一种对象类型，它和commit对象有点类似，包含了：tag添加者的信息，tag的添加日期，相关注解信息，以及一个指向commit对象的引用。和commit对象不同的是：tag对象通常指向的是一个commit对象，而commit对象则指向tree对象。Tag有点类似于commit对象的别名，并且它和commit对象之间的这种对应关系一旦定义，就不会再变了。\u003c/p\u003e\n\n\u003cp\u003eGit支持两种类型的tag：annotated和lightweight。我们可以利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit update-ref\u003c/code\u003e很轻松地创建出一个lightweight类型的tag：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit update-ref refs/tags/v1.0 04081ddb43269238a1cb8a61a2d04a36986febfa\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e实际上，这种tag只是一个指向相应commit对象的引用。查看.git/refs/tags目录下文件v1.0的内容会发现，里面所包含的引用指向的是我们之前的第二次提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/refs/tags/v1.0\n04081ddb43269238a1cb8a61a2d04a36986febfa\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 04081ddb43269238a1cb8a61a2d04a36986febfa\ntree 955f6fef4f43ee1f5d93cbea718cce3048450f4b\nparent 4c50701f89265f9ca6eeb3ddffae450da55f9bd5\nauthor dev \u0026lt;dev@example.com\u0026gt; 1556719543 +0000\ncommitter dev \u0026lt;dev@example.com\u0026gt; 1556719543 +0000\n\nsecond commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e创建annotated类型的tag，则要稍微复杂一些。Git首先会建立一个tag对象指向某个commit对象，然后在.git/refs/tags目录下的对应文件里写入指向该tag对象的引用，而不是直接指向commit对象。下面我们就利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit tag -a\u003c/code\u003e来创建一个annotated类型的tag：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit tag \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e v1.1 07ef9d54dd0da246d069dfa2ad2350751203ecb2 \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;include bak\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e来看一下.git/refs/tags目录下文件v1.1的内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/refs/tags/v1.1\n6d9cfead57862bc571d52d11f54f25789a103513\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这是一个指向tag对象的引用：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 6d9cfead57862bc571d52d11f54f25789a103513\nobject 07ef9d54dd0da246d069dfa2ad2350751203ecb2\n\u003cspan class=\"nb\"\u003etype \u003c/span\u003etree\ntag v1.1\ntagger dev \u0026lt;dev@example.com\u0026gt; 1556746261 +0000\n\ninclude bak\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个tag对象指向的是另一个commit对象，代表了当前分支的最新提交，即：“third commit”所对应的commit对象。\u003c/p\u003e\n\n\u003ch2 id=\"remote引用\"\u003eRemote引用\u003c/h2\u003e\n\n\u003cp\u003eRemote是一种特殊类型的引用，对应于远程Git库的提交。如果我们添加了一个remote类型的引用，并且把本地变更通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit push\u003c/code\u003e推送到了远程，Git就会在.git/refs/remotes目录下新建一个文件，针对当前分支最近一次推送所对应的commit对象，存入该对象的唯一键。\u003c/p\u003e\n\n\u003cp\u003e和前面提到的branch引用相比，remote引用是相对“只读”的。对于branch引用而言，当我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit checkout\u003c/code\u003e切换分支后，引用的值就变了。而对于remote引用而言，因为它们所指向的是远程Git库对应分支下的最新提交。只要这个信息在远程库里没有改变，那么本地的引用也是不会变的。\u003c/p\u003e\n\n\u003cp\u003e下面，我们来添加一个名为origin的remote引用，并把我们在本地master分支上的改动推送到远程。\u003c/p\u003e\n\n\u003cp\u003e如果我们使用的是\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e提供的Docker镜像，那么首先需要在代表远程Git服务的容器里创建好与本地同名的远程库。为此，我们需要在代表本地Git客户端的容器里通过SSH以用户git的身份登录到远程Git服务，并利用Git Shell命令创建远程库：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003essh git@my-git-remote\ngit\u0026gt; create inside-git\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /home/git/inside-git.git/\ngit\u0026gt; list\ninside-git.git\nhello-git.git\ngit\u0026gt; \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e退出远程Git服务，并回到本地Git客户端后，我们就可以把本地的当前变更推送到远程库了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit remote add origin git@my-git-remote:~/inside-git.git\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit push origin master\nCounting objects: 9, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nDelta compression using up to 4 threads.\nCompressing objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e5/5\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nWriting objects: 100% \u003cspan class=\"o\"\u003e(\u003c/span\u003e9/9\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 664 bytes | 221.00 KiB/s, \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\nTotal 9 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 1\u003cspan class=\"o\"\u003e)\u003c/span\u003e, reused 0 \u003cspan class=\"o\"\u003e(\u003c/span\u003edelta 0\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nTo my-git-remote:~/inside-git.git\n \u003cspan class=\"k\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003enew branch]      master -\u0026gt; master\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，Git就会在.git/refs/remotes/origin目录下新建一个名为master的文件。查看其内容会发现，它所指向的正是我们在master分支上的最新提交，也是我们向远程Git服务推送更新时所对应的提交：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e .git/refs/remotes/origin/master\ne0ec828eda6b51b170fff6b5fdfa03a3cb70a13e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-08-11T00:00:00+08:00\"\u003eAugust 11, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E8%A7%A3%E5%AF%86%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86Git%E5%BC%95%E7%94%A8%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-3%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-3%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-3%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/inside-git-2/\" class=\"pagination--pager\" title=\"Git解密——Tree对象和Commit对象\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/git-merge-stories-1/\" class=\"pagination--pager\" title=\"Git合并那些事——认识几种Merge方法\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-08-11T00:00:00+08:00",
  "Author": "MornigSpace"
}