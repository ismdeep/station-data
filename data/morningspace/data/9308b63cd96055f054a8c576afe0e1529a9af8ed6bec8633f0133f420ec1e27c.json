{
  "Source": "morningspace",
  "Title": "为KubeAssert定制断言",
  "Link": "https://morningspace.github.io/tech/kubeassert-3/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#自己动手写断言\"\u003e自己动手写断言\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#创建shell脚本文件\"\u003e创建Shell脚本文件\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#实现断言的逻辑\"\u003e实现断言的逻辑\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#为断言添加注释\"\u003e为断言添加注释\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003eKubeAssert是一个kubectl插件，用于在命令行声明针对Kubernetes资源的断言（assertion）。KubeAssert是一个位于\u003ca href=\"https://github.com/morningspace/kubeassert\"\u003eGitHub\u003c/a\u003e上的开源项目。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/kubeassert/kubeassert-3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e作为KubeAssert系列文章的第三篇，本文将向大家介绍，当现有断言无法满足需求的时候，如何通过编写自己的断言来扩展KubeAssert的能力。\u003c/p\u003e\n\n\u003ch2 id=\"自己动手写断言\"\u003e自己动手写断言\u003c/h2\u003e\n\n\u003cp\u003e虽然KubeAssert默认提供的断言可以支持Kubernetes集群日常操作的很多场景，但是，也有可能这些断言并不能满足你的特定需求。KubeAssert支持定制断言，它允许你自己动手编写断言，然后让KubeAssert加载并运行。\u003c/p\u003e\n\n\u003cp\u003e作为一个例子，本文我们将编写一个自定义断言，用来验证kubeconfig里是否包含指定的集群。其中，集群的名称是在该断言被执行的时候通过命令行参数传入的。\u003c/p\u003e\n\n\u003ch2 id=\"创建shell脚本文件\"\u003e创建Shell脚本文件\u003c/h2\u003e\n\n\u003cp\u003e首先，让我们创建一个shell脚本文件，取名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecustom-assertions.sh\u003c/code\u003e，并将它放到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e$HOME/.kubeassert\u003c/code\u003e目录下。这里是KubeAssert加载所有断言的地方。每当KubeAssert启动时，它会寻找该目录下的所有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e.sh\u003c/code\u003e文件，并作为断言加载到内存。\u003c/p\u003e\n\n\u003cp\u003e一个脚本文件可以包含多个断言，每个断言都是通过shell函数来实现的。本例中，我们只有一个断言，对应函数名是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster\u003c/code\u003e，目前函数体还是空的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ecluster \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n :\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e为了测试断言，我们可以调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl assert\u003c/code\u003e命令，并指定函数名\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster\u003c/code\u003e，作为该断言的名字：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert cluster\nASSERT PASS\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e正常情况下，我们会看到命令能够正确返回，只是返回结果是空的。接下来，让我们为函数加入具体的实现逻辑。\u003c/p\u003e\n\n\u003ch2 id=\"实现断言的逻辑\"\u003e实现断言的逻辑\u003c/h2\u003e\n\n\u003cp\u003e为了实现一个断言，通常我们需要做下面这几件事情：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e验证输入参数：在本例中，就是由用户通过命令行输入的集群名。如果验证失败，比如用户没有指定集群名，可以调用函数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elogger::error\u003c/code\u003e输出错误信息，然后以非零值立即返回并退出断言。\u003c/li\u003e\n  \u003cli\u003e打印断言信息：通过调用函数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elogger::assert\u003c/code\u003e，我们可以在命令行打印出一条断言信息，以便告诉用户这个断言即将要做的事情。\u003c/li\u003e\n  \u003cli\u003e执行断言逻辑：作为断言的主体部分，此处通常会调用一系列kubectl命令或Kubernetes API，例如：调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl config\u003c/code\u003e命令，从kubeconfig中查询集群信息。\u003c/li\u003e\n  \u003cli\u003e验证断言结果：通过对kubectl或Kubernetes API的返回结果进行解析，判断断言成功与否。如果断言失败，则调用函数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elogger::fail\u003c/code\u003e输出一条断言失败的信息。如果成功，则不需要做任何事情，或者也可以根据需要调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003elogger::info\u003c/code\u003e函数打印一些日志信息。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e将下列逻辑加入\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster\u003c/code\u003e函数：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ecluster \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# Validate input arguments\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"nt\"\u003e-z\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e logger::error \u003cspan class=\"s2\"\u003e\u0026#34;You must specify a cluster name.\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e1\n  \u003cspan class=\"c\"\u003e# Print assertion message\u003c/span\u003e\n  logger::assert \u003cspan class=\"s2\"\u003e\u0026#34;Cluster with name \u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e should be included in kubeconfig.\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# Run some kubectl commands\u003c/span\u003e\n  kubectl config get-clusters\n  \u003cspan class=\"c\"\u003e# Validate results\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"nv\"\u003e$HOME\u003c/span\u003e/.kubeassert/result.txt | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-q\u003c/span\u003e ^\u003cspan class=\"nv\"\u003e$1$;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Print normal logs\u003c/span\u003e\n    logger::info \u003cspan class=\"s2\"\u003e\u0026#34;Found \u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e in kubeconfig.\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Print failure message\u003c/span\u003e\n    logger::fail \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e not found.\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可能你已经注意到了，函数中对于断言结果的验证，是通过解析一个位置处于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e$HOME/.kubeassert/\u003c/code\u003e目录下的名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eresult.txt\u003c/code\u003e的文件实现的。KubeAssert把调用kubectl的返回结果都存入了该文件。\u003c/p\u003e\n\n\u003cp\u003e现在，让我们试一下执行该断言时不指定集群名的情况：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert cluster\nERROR You must specify a cluster name.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e结果报错，并提示调用断言时必须指定集群名。再试一下指定一个kubeconfig中不存在的集群名：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert cluster kind\nASSERT Cluster with name kind should be included \u003cspan class=\"k\"\u003ein \u003c/span\u003ekubeconfig.\nASSERT FAIL kind not found.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e结果显示断言失败，并给出了原因。指定一个kubeconfig中存在的集群名：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert cluster kind-foo\nASSERT Cluster with name kind-foo should be included \u003cspan class=\"k\"\u003ein \u003c/span\u003ekubeconfig.\nINFO Found kind-foo \u003cspan class=\"k\"\u003ein \u003c/span\u003ekubeconfig.\nASSERT PASS\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这次结果显示断言成功了。\u003c/p\u003e\n\n\u003cp\u003e如果断言执行过程中遇到了问题，需要进行排查，我们也可以在执行断言时加上\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-v\u003c/code\u003e参数，以打开详细日志输出的开关。这样，我们就可以看到断言中涉及了哪些kubectl调用，以及它们各自的返回结果是什么。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert cluster kind-foo \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\nASSERT Cluster with name kind-foo should be included \u003cspan class=\"k\"\u003ein \u003c/span\u003ekubeconfig.\nINFO kubectl config get-clusters\nNAME\nkind-foo\nkind-bar\nINFO Found kind-foo \u003cspan class=\"k\"\u003ein \u003c/span\u003ekubeconfig.\nASSERT PASS\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"为断言添加注释\"\u003e为断言添加注释\u003c/h2\u003e\n\n\u003cp\u003e到目前为止，我们已经实现了断言的全部逻辑。不过，还有一件事情我们需要做。当执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl assert\u003c/code\u003e并带着\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-h/--help\u003c/code\u003e参数或者不带任何参数时，为了能够让我们的断言出现在已安装断言的列表里，我们还需要为断言添加一个特别的注释。\u003c/p\u003e\n\n\u003cp\u003e此外，当我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl assert \u0026lt;assertion\u0026gt;\u003c/code\u003e命令并带着\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-h/--help\u003c/code\u003e参数时，为了能够打印输出针对该断言的帮助信息，我们还需要提前准备好相应的帮助信息。这些信息也是通过断言注释添加的。\u003c/p\u003e\n\n\u003cp\u003e为断言添加的注释必须以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e##\u003c/code\u003e开头，并以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e##\u003c/code\u003e结尾，两者之间包含了若干个字段，每个字段的名字都是以\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e@\u003c/code\u003e打头的。下面是一个注释模版，包含了每个字段的详细解释：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Name: \u0026lt;Input your single-line assertion name here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Description: \u0026lt;Input your single-line assertion description here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Usage: \u0026lt;Input your single-line assertion usage information here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Options:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026lt;Input help information for all your options started from here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026lt;It supports multiple lines\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Examples:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026lt;Input detailed information for all examples started from here\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# \u0026lt;It supports multiple lines\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e对于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOptions\u003c/code\u003e字段，KubeAssert提供了几个预定义变量可供我们使用。如果我们的断言支持某些KubeAssert预定义的通用Option，那么在定义\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eOptions\u003c/code\u003e字段时，我们就可以引用这些预定义变量作为占位符。在输出实际的帮助信息时，KubeAssert会把这些占位符替换成真正的内容。\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e${GLOBAL_OPTIONS}：该变量代表了适用于所有断言的全局Option，比如：用于输出帮助信息的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-h/--help\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e${SELECT_OPTIONS}：该变量代表了用于对资源进行过滤的Option，比如：用于标签过滤的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-l/--selector\u003c/code\u003e，以及用于指定namespace的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n/--namespace\u003c/code\u003e。\u003c/li\u003e\n  \u003cli\u003e${OP_VAL_OPTIONS}：该变量代表了比较运算符，例如：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-eq\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-lt\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-gt\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-ge\u003c/code\u003e，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-le\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e通过使用这些变量，我们可以确保所有断言的帮助信息里涉及这些Option的描述都是一致的。\u003c/p\u003e\n\n\u003cp\u003e下面是针对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster\u003c/code\u003e断言的注释内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Name: cluster\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Description: Assert specified cluster included in kubeconfig\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Usage: kubectl assert cluster (NAME) [options]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Options:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# ${GLOBAL_OPTIONS}\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Examples:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# # To assert a cluster is included in kubeconfig\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kubectl assert cluster kind-foo\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ecluster \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n ...\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e为了验证，我们可以执行如下命令，看一下我们的断言是否已经出现在已安装断言的列表中了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert \u003cspan class=\"nt\"\u003e--help\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果一切正常，我们会在返回结果中找到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecluster\u003c/code\u003e。执行如下命令，打印输出断言的帮助信息：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl assert cluster \u003cspan class=\"nt\"\u003e--help\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们会看到如下输出结果，这正是我们在注释里定义的内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003eAssert cluster with specified name included \u003cspan class=\"k\"\u003ein \u003c/span\u003ekubeconfig file\nUsage: kubectl assert cluster \u003cspan class=\"o\"\u003e(\u003c/span\u003eNAME\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eoptions]\nOptions:\n  \u003cspan class=\"nt\"\u003e-h\u003c/span\u003e, \u003cspan class=\"nt\"\u003e--help\u003c/span\u003e: Print the \u003cspan class=\"nb\"\u003ehelp \u003c/span\u003einformation.\n  \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e, \u003cspan class=\"nt\"\u003e--verbose\u003c/span\u003e: Enable the verbose log.\n  \u003cspan class=\"nt\"\u003e-V\u003c/span\u003e, \u003cspan class=\"nt\"\u003e--version\u003c/span\u003e: Print the version information.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\n\u003cp\u003e断言cluster的最终版本如下：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Name: cluster\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Description: Assert specified cluster included in kubeconfig\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Usage: kubectl assert cluster (NAME) [options]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Options:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   ${GLOBAL_OPTIONS}\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @Examples:\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   # To assert a cluster is included in kubeconfig\u003c/span\u003e\n\u003cspan class=\"c\"\u003e#   kubectl assert cluster kind-foo\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ecluster \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# Validate input arguments\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"nt\"\u003e-z\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e logger::error \u003cspan class=\"s2\"\u003e\u0026#34;You must specify a cluster name.\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e1\n  \u003cspan class=\"c\"\u003e# Print assertion message\u003c/span\u003e\n  logger::assert \u003cspan class=\"s2\"\u003e\u0026#34;Cluster with name \u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e should be included in kubeconfig.\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# Run some kubectl commands\u003c/span\u003e\n  kubectl config get-clusters\n  \u003cspan class=\"c\"\u003e# Validate results\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"nv\"\u003e$HOME\u003c/span\u003e/.kubeassert/result.txt | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"nt\"\u003e-q\u003c/span\u003e ^\u003cspan class=\"nv\"\u003e$1$;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Print normal logs\u003c/span\u003e\n    logger::info \u003cspan class=\"s2\"\u003e\u0026#34;Found \u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e in kubeconfig.\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# Print failure message\u003c/span\u003e\n    logger::fail \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e not found.\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如你所见，为KubeAssert定制断言是非常容易的。在下一篇文章里，我将和大家分享，如何把KubeAssert和\u003ca href=\"https://kuttl.dev/\"\u003eKUTTL\u003c/a\u003e集成在一起，让针对Kubernetes集群的自动化测试如虎添翼。\u003c/p\u003e\n\n\u003cp\u003e如果你想了解更多有关KubeAssert的信息，请阅读它的\u003ca href=\"https://morningspace.github.io/kubeassert/docs/\"\u003e在线文档\u003c/a\u003e。如果你喜欢这个项目，欢迎给它\u003ca href=\"https://github.com/morningspace/kubeassert\"\u003e加星\u003c/a\u003e。同时，也非常欢迎针对该项目的任何形式的贡献，比如bug报告以及代码提交。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-07-03T00:00:00+08:00\"\u003eJuly 3, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=%E4%B8%BAKubeAssert%E5%AE%9A%E5%88%B6%E6%96%AD%E8%A8%80%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubeassert-3%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubeassert-3%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubeassert-3%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/kubeassert-2/\" class=\"pagination--pager\" title=\"高效使用KubeAssert\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/kubeassert-4/\" class=\"pagination--pager\" title=\"集成KubeAssert与KUTTL\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-07-03T00:00:00+08:00",
  "Author": "MornigSpace"
}