{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——Ingress",
  "Link": "https://morningspace.github.io/tech/k8s-net-ingress/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#部署backend应用\"\u003e部署backend应用\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#部署ingress-controller\"\u003e部署Ingress Controller\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#关于rbac\"\u003e关于RBAC\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#定义ingress-resource\"\u003e定义Ingress Resource\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#ingress和pod\"\u003eIngress和Pod\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#修改ingress-resource\"\u003e修改Ingress Resource\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e利用Ingress，我们同样可以把集群内的Service暴露到集群外，而且还可以获得更多……\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/ingress.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e在\u003ca href=\"/tech/k8s-net-externalip-nodeport\"\u003eKubernetes网络篇——ExternalIP和NodePort\u003c/a\u003e一文里，我们了解了如何把集群内的Service暴露到集群外。本文要介绍的Ingress也有类似的功能，并且它结合了专业的第三方负载均衡和反向代理服务，比如像：Nginx，HAProxy，Traefik等，因此还提供了很多其他特性，比如：负载均衡，SSL，基于名称的虚拟主机(Name-based Virtual Host)服务等。\u003c/p\u003e\n\n\u003cp\u003eKubernetes的Ingress，可以把集群外部的HTTP或HTTPS请求路由到集群内部的多个Service，我们只需要部署一个Ingress Controller，就能以集中的方式统一来管理一个集群内所有需要暴露的Service。具体的路由方式，则是由定义在Ingress Resource里的规则来决定的，比如：根据主机名和URL路径，把请求路由到指定的Service。\u003c/p\u003e\n\n\u003cp\u003e下面我们就以Nginx Ingress为例，通过实际部署实验来认识一下Ingress。\u003c/p\u003e\n\n\u003ch2 id=\"部署backend应用\"\u003e部署backend应用\u003c/h2\u003e\n\n\u003cp\u003e为了方便后面做实验，我们需要在集群里部署一些测试应用，包括Pod和相应的Service。这里，我们依然沿用在\u003ca href=\"/tech/k8s-net-pod-2/\"\u003eKubernetes网络篇——Pod网络(下)\u003c/a\u003e一文里使用的例子，包括一个暴露80端口的Nginx和一个暴露8080端口的Tomcat。不同的是，这次我们把两个Web服务分别部署到了各自的Pod里，而不是放在同一个Pod。它们将作为Nginx的backend，对外提供HTTP服务。\u003c/p\u003e\n\n\u003cp\u003e另外，我们还引入了一个默认的backend应用。当HTTP请求经过Nginx时，根据事先定义的路由规则，请求通常会匹配相应的规则，并被路由到后端应用。但如果没有匹配到任何规则，那么Nginx就会把请求发送给默认的backend应用。根据Nginx Ingress的规定，这种应用需要提供两个URL：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/\u003c/code\u003e：返回404，并提供默认的404页面\u003c/li\u003e\n  \u003cli\u003e\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/healthz\u003c/code\u003e：返回200，用于提供针对该应用本身的健康检查\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e所以总共需要部署三个应用。我们把全部三个backend应用的Deployment和Service定义都合并到一起存成了一个文件，名叫\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebackends.yaml\u003c/code\u003e。因为篇幅限制，加上两个Web服务的YAML片段在以前的文章里已经出现过，内容基本相似，所以这里就不再重复了。下面列举的是默认backend应用的YAML片段：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault-http-backend\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault-http-backend\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault-http-backend\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault-http-backend\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ek8s.gcr.io/defaultbackend-amd64:1.5\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003econtainerPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e8080\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n        \u003cspan class=\"na\"\u003elivenessProbe\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ehttpGet\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/healthz\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e8080\u003c/span\u003e\n            \u003cspan class=\"na\"\u003escheme\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eHTTP\u003c/span\u003e\n          \u003cspan class=\"na\"\u003einitialDelaySeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e30\u003c/span\u003e\n          \u003cspan class=\"na\"\u003etimeoutSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e\n\u003cspan class=\"nn\"\u003e---\u003c/span\u003e\n\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eService\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault-http-backend\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n    \u003cspan class=\"na\"\u003etargetPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003edefault-http-backend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e---\u003c/code\u003e，我们把应用的Deployment定义和Service定义拼接在了一起。并且，我们用的是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ek8s.gcr.io\u003c/code\u003e提供的defaultbackend镜像。如果想加快镜像抓取的速度，也可以使用本地的私有Docker镜像注册表，比如，在\u003ca href=\"https://github.com/morningspace/lab-kubernetes\"\u003elab-kubernetes\u003c/a\u003e项目里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io\u003c/code\u003e。只要我们给k8s.gcr.io/defaultbackend-amd64镜像加上相应的标签，然后把它推送到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io\u003c/code\u003e就可以了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker tag k8s.gcr.io/defaultbackend-amd64:1.5 mr.io/defaultbackend-amd64:1.5\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker push mr.io/defaultbackend-amd64:1.5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，让我们把所有backend应用部署到集群里：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e backends.yaml\ndeployment.apps/test-pod-1 created\ndeployment.apps/test-pod-2 created\ndeployment.apps/default-http-backend created\nservice/test-svc-1 created\nservice/test-svc-2 created\nservice/default-http-backend created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e另外，我们还需要一个以Pod形式部署的lab-sleeper，做为测试用的客户端，从Pod内部访问我们的Web服务。关于lab-sleeper的镜像，请查看\u003ca href=\"/tech/k8s-net-service-1/\"\u003eKubernetes网络篇——Service网络(上)\u003c/a\u003e一文。下面是执行部署的命令和返回的结果：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create deployment lab-sleeper \u003cspan class=\"nt\"\u003e--image\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003emr.io/lab-sleeper\ndeployment.apps/lab-sleeper created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl\u003c/code\u003e提供的命令查看一下部署的情况：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get deployments\nNAME                   READY   UP-TO-DATE   AVAILABLE   AGE\ndefault-http-backend   1/1     1            1           2m51s\nlab-sleeper            1/1     1            1           22s\ntest-pod-1             1/1     1            1           2m51s\ntest-pod-2             1/1     1            1           2m51s\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME                                    READY   STATUS    RESTARTS   AGE   IP           NODE          NOMINATED NODE   READINESS GATES\ndefault-http-backend-6464987848-dwsmk   1/1     Running   0          3m8s   10.244.3.2   kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\nlab-sleeper-7ff95f64d7-mwpdj            1/1     Running   0          39s    10.244.2.4   kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-1-64c6878596-hzjxl             1/1     Running   0          3m8s   10.244.3.3   kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-2-785db554c6-vrn9w             1/1     Running   0          3m8s   10.244.2.3   kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get services \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT\u003cspan class=\"o\"\u003e(\u003c/span\u003eS\u003cspan class=\"o\"\u003e)\u003c/span\u003e   AGE   SELECTOR\ndefault-http-backend   ClusterIP   10.98.39.188     \u0026lt;none\u0026gt;        80/TCP    3m24s   \u003cspan class=\"nv\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003edefault-http-backend\nkubernetes             ClusterIP   10.96.0.1        \u0026lt;none\u0026gt;        443/TCP   25d     \u0026lt;none\u0026gt;\ntest-svc-1             ClusterIP   10.108.0.250     \u0026lt;none\u0026gt;        80/TCP    3m25s   \u003cspan class=\"nv\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003elab-web-1\ntest-svc-2             ClusterIP   10.103.200.191   \u0026lt;none\u0026gt;        80/TCP    3m25s   \u003cspan class=\"nv\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003elab-web-2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，所有Pod都已经成功启动，相应的Service也都成功创建出来了。\u003c/p\u003e\n\n\u003cp\u003e在继续下面的实验之前，我们还可以用lab-sleeper测一下部署的这些backend应用。比如：从lab-sleeper内部访问test-svc-1，应该由Nginx返回响应：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e lab-sleeper-7ff95f64d7-mwpdj curl http://test-svc-1\n\u0026lt;\u003cspan class=\"o\"\u003e!\u003c/span\u003eDOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n\u0026lt;\u003cspan class=\"nb\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt;\n\u0026lt;style\u0026gt;\n    body \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        width: 35em\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        margin: 0 auto\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        font-family: Tahoma, Verdana, Arial, sans-serif\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e访问test-svc-2，则应该由Tomcat返回响应：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e lab-sleeper-7ff95f64d7-mwpdj curl http://test-svc-2\n\u0026lt;\u003cspan class=\"o\"\u003e!\u003c/span\u003eDOCTYPE html\u0026gt;\n\u0026lt;html \u003cspan class=\"nv\"\u003elang\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u0026lt;\u003cspan class=\"nb\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n        \u0026lt;meta \u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e /\u0026gt;\n        \u0026lt;title\u0026gt;Apache Tomcat/8.5.42\u0026lt;/title\u0026gt;\n        \u0026lt;\u003cspan class=\"nb\"\u003elink \u003c/span\u003e\u003cspan class=\"nv\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;favicon.ico\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;icon\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;image/x-icon\u0026#34;\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan class=\"nb\"\u003elink \u003c/span\u003e\u003cspan class=\"nv\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;favicon.ico\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;shortcut icon\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;image/x-icon\u0026#34;\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan class=\"nb\"\u003elink \u003c/span\u003e\u003cspan class=\"nv\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;tomcat.css\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;stylesheet\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;text/css\u0026#34;\u003c/span\u003e /\u0026gt;\n    \u0026lt;/head\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果要是访问default-http-backend，则应该返回默认的404响应：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e lab-sleeper-7ff95f64d7-mwpdj curl http://default-http-backend\ndefault backend - 404\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"部署ingress-controller\"\u003e部署Ingress Controller\u003c/h2\u003e\n\n\u003cp\u003e接下来，我们要部署Nginx Ingress Controller了。本质上，Nginx Ingress Controller就是一个以Pod形式部署在Kubernetes集群里的Nginx的Daemon。它通过监控Kubernetes API的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/ingresses\u003c/code\u003e服务来监控Ingress Resource的变化，并相应地更新Nginx的配置。下面是它的部署YAML片段：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eserviceAccountName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress-serviceaccount\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress-controller\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emr.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eargs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e/nginx-ingress-controller\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e--configmap=$(POD_NAMESPACE)/nginx-configuration\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003e--default-backend-service=$(POD_NAMESPACE)/default-http-backend\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eenv\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePOD_NAME\u003c/span\u003e\n              \u003cspan class=\"na\"\u003evalueFrom\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"na\"\u003efieldRef\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                  \u003cspan class=\"na\"\u003efieldPath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emetadata.name\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePOD_NAMESPACE\u003c/span\u003e\n              \u003cspan class=\"na\"\u003evalueFrom\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"na\"\u003efieldRef\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n                  \u003cspan class=\"na\"\u003efieldPath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emetadata.namespace\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n              \u003cspan class=\"na\"\u003econtainerPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n          \u003cspan class=\"na\"\u003elivenessProbe\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"na\"\u003ehttpGet\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n              \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/healthz\u003c/span\u003e\n              \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e10254\u003c/span\u003e\n              \u003cspan class=\"na\"\u003escheme\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eHTTP\u003c/span\u003e\n            \u003cspan class=\"na\"\u003einitialDelaySeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\n            \u003cspan class=\"na\"\u003etimeoutSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ereadinessProbe\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"na\"\u003ehttpGet\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n              \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/healthz\u003c/span\u003e\n              \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e10254\u003c/span\u003e\n              \u003cspan class=\"na\"\u003escheme\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eHTTP\u003c/span\u003e\n            \u003cspan class=\"na\"\u003einitialDelaySeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\n            \u003cspan class=\"na\"\u003etimeoutSeconds\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e10\u003c/span\u003e\n\u003cspan class=\"nn\"\u003e---\u003c/span\u003e\n\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eService\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eNodePort\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eport\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etargetPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们用的是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003equay.io\u003c/code\u003e上的nginx-ingress-controller镜像，并且把它推送到了本地的私有Docker注册表：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker tag quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1 mr.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker push mr.io/kubernetes-ingress-controller/nginx-ingress-controller\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在定义Service的时候，我们是以NodePort的形式把Ingress Controller暴露到集群外的。因为我们的实验环境是在本地，不像AWS，Azure，GCP等云服务环境，有现成的LoadBalancer服务，所以使用NodePort是比较合理的。稍后，我们就可以通过访问集群节点的IP地址和端口号来访问Nginx Ingress了。\u003c/p\u003e\n\n\u003cp\u003e执行下面的命令把Nginx Ingress Controller部署到集群里：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e ingress-controller.yaml\ndeployment.apps/nginx-ingress created\nservice/nginx-ingress created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后查看部署的情况：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get deployments nginx-ingress\nNAME            READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-ingress   1/1     1            1           5m42s\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME                                    READY   STATUS    RESTARTS   AGE     IP            NODE          NOMINATED NODE   READINESS GATES\ndefault-http-backend-6464987848-dwsmk   1/1     Running   0          4h20m   10.244.3.2    kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\nlab-sleeper-7ff95f64d7-mwpdj            1/1     Running   0          4h18m   10.244.2.4    kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\nnginx-ingress-6877758467-vrbzc          1/1     Running   0          5m55s   10.244.3.10   kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-1-64c6878596-hzjxl             1/1     Running   0          4h20m   10.244.3.3    kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\ntest-pod-2-785db554c6-vrn9w             1/1     Running   0          4h20m   10.244.2.3    kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get services nginx-ingress \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT\u003cspan class=\"o\"\u003e(\u003c/span\u003eS\u003cspan class=\"o\"\u003e)\u003c/span\u003e        AGE     SELECTOR\nnginx-ingress   NodePort   10.108.175.68   \u0026lt;none\u0026gt;        80:32222/TCP   7m54s   \u003cspan class=\"nv\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003enginx-ingress\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e确认部署成功以后，可以尝试在lab-sleeper内部访问Nginx Ingress服务。从上面的输出结果里可以看到，Ingress的Cluster IP是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.10\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e lab-sleeper-7ff95f64d7-mwpdj curl http://10.244.3.10\ndefault backend - 404\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们也可以在任何一个集群节点上通过IP地址和端口号访问Nginx Ingress。比如这里我们访问的是master节点，端口号可以从前面的输出结果里找到：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl http://10.192.0.2:32222\ndefault backend - 404\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"关于rbac\"\u003e关于RBAC\u003c/h3\u003e\n\n\u003cp\u003eKubernetes的RBAC功能从1.8开始就已经基本稳定了，所以很多Kubernetes的部署环境都默认开启了RBAC。我们的实验环境——\u003ca href=\"https://github.com/kubernetes-sigs/kubeadm-dind-cluster\"\u003ekubeadm-dind-cluster\u003c/a\u003e也不例外。\u003c/p\u003e\n\n\u003cp\u003e要开启RBAC功能，就需要在Kubernetes启动API Server的时候带上参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--authorization-mode=RBAC\u003c/code\u003e。如果好奇的话，我们也可以登录到master节点上，在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/etc/kubernetes/manifests\u003c/code\u003e目录下寻找一个叫\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekube-apiserver.yaml\u003c/code\u003e的文件，这是API Server的部署文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /etc/kubernetes/manifests/kube-apiserver.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: null\n  labels:\n    component: kube-apiserver\n    tier: control-plane\n  name: kube-apiserver\n  namespace: kube-system\nspec:\n  containers:\n  - \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e:\n    - kube-apiserver\n    - \u003cspan class=\"nt\"\u003e--advertise-address\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e10.192.0.2\n    - \u003cspan class=\"nt\"\u003e--allow-privileged\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n    - \u003cspan class=\"nt\"\u003e--authorization-mode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eNode,RBAC\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，启动kube-apiserver的命令行参数里就有\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--authorization-mode\u003c/code\u003e，可以看到我们的集群环境是开启了RBAC的。\u003c/p\u003e\n\n\u003cp\u003e对于这种情况，我们需要为Nginx Ingress Controller配置相应的：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eServiceAccount\u003c/li\u003e\n  \u003cli\u003eClusterRole\u003c/li\u003e\n  \u003cli\u003eRole\u003c/li\u003e\n  \u003cli\u003eRoleBinding\u003c/li\u003e\n  \u003cli\u003eClusterRoleBinding\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e否则，启动Nginx Ingress Controller时就可能会失败。关于如何定义RBAC的相关配置，大家可以参考\u003ca href=\"https://github.com/morningspace/lab-kubernetes\"\u003elab-kubernetes\u003c/a\u003e里的示例，这里就不展开了。\u003c/p\u003e\n\n\u003ch2 id=\"定义ingress-resource\"\u003e定义Ingress Resource\u003c/h2\u003e\n\n\u003cp\u003e接下来，我们要为Nginx Ingress定义Ingress Resource了，也就是为Nginx定义路由规则。前面我们已经提到过，在Ingress Resource里定义的规则会在运行期被Nginx Ingress Controller动态检测到，并转成Nginx的配置信息。\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eextensions/v1beta1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eIngress\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx-ingress\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eannotations\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"s\"\u003enginx.ingress.kubernetes.io/rewrite-target\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003erules\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ehost\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekubernetes.lab\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehttp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/svc-1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ebackend\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etest-svc-1\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eservicePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/svc-2\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ebackend\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etest-svc-2\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eservicePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里的规则很简单，当请求到达Ingress时，如果主机名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubernetes.lab\u003c/code\u003e，且URL路径为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/svc-1\u003c/code\u003e，则导向test-svc-1；如果URL路径为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/svc-2\u003c/code\u003e，则导向test-svc-2。同时，通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003erewrite-target\u003c/code\u003e注解，我们把URL重写为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e现在，让我们先把Ingress Resource部署到集群里：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e ingress.yaml\ningress.extensions/nginx-ingress created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后查看部署的情况：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get ingress\nNAME            HOSTS            ADDRESS   PORTS   AGE\nnginx-ingress   kubernetes.lab             80      14s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e下面，我们就可以来验证，刚才定义的路由规则是否已经生效了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e host:kubernetes.lab http://10.192.0.2:32222/svc-1\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e host:kubernetes.lab http://10.192.0.2:32222/svc-2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们是直接从master节点上向Ingress服务发送请求的。因为没有为集群节点配DNS，所以我们用了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-H\u003c/code\u003e参数，把主机名作为HTTP头传给Ingress。当然，也可以在节点本地的hosts里加上主机名和IP地址的映射，这样就不需要HTTP头了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /etc/hosts\n... ...\n10.192.0.2\tkubernetes.lab\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"ingress和pod\"\u003eIngress和Pod\u003c/h3\u003e\n\n\u003cp\u003e虽然我们在定义Ingress Resource的时候用的是Service，但Ingress Controller实际是直接和Pod打交道的。因为Kubernetes知道每个Service包含哪些Pod，所以Ingress Controller只要查询Kubernetes的API Server，就能得到Service当前的所有Pod。\u003c/p\u003e\n\n\u003cp\u003e因为Ingress是直接对Pod而非Service进行负载均衡，所以它可以实现比如像Session保持这样的功能，即：来自同一个客户端的前后两次请求最终送达的是同一个Pod。\u003c/p\u003e\n\n\u003ch2 id=\"修改ingress-resource\"\u003e修改Ingress Resource\u003c/h2\u003e\n\n\u003cp\u003e我们可以利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl edit ingress\u003c/code\u003e对Ingress Resource里的路由规则动态进行修改。Nginx Ingress Controller会定期监控Kubernetes的API Server，一旦Ingress Resource有更新，Controller就会重新生成Nginx的配置，并重新加载Nginx。比如，我们可以为Ingress配上虚拟主机：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e当主机名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esvc-1.kubernetes.lab\u003c/code\u003e时，导向test-svc-1；\u003c/li\u003e\n  \u003cli\u003e当主机名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003esvc-2.kubernetes.lab\u003c/code\u003e时，导向test-svc-2；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003erules\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ehost\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekubernetes.lab\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehttp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/svc-1\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ebackend\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etest-svc-1\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eservicePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003epath\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e/svc-2\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ebackend\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etest-svc-2\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eservicePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ehost\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esvc-1.kubernetes.lab\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehttp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ebackend\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etest-svc-1\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eservicePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ehost\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003esvc-2.kubernetes.lab\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehttp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003epaths\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ebackend\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eserviceName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etest-svc-2\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eservicePort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果我们观察Nginx Ingress Controller的日志，就可以看到，当修改Ingress后，就会有类似下面这样的日志产生：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl logs nginx-ingress-6877758467-vrbzc\n... ...\nI0627 14:56:41.872772       7 controller.go:170] Configuration changes detected, backend reload required.\nI0627 14:56:41.875866       7 event.go:209] Event\u003cspan class=\"o\"\u003e(\u003c/span\u003ev1.ObjectReference\u003cspan class=\"o\"\u003e{\u003c/span\u003eKind:\u003cspan class=\"s2\"\u003e\u0026#34;Ingress\u0026#34;\u003c/span\u003e, Namespace:\u003cspan class=\"s2\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e, Name:\u003cspan class=\"s2\"\u003e\u0026#34;nginx-ingress\u0026#34;\u003c/span\u003e, UID:\u003cspan class=\"s2\"\u003e\u0026#34;c6070246-98eb-11e9-b7fa-0ee56cf2fc99\u0026#34;\u003c/span\u003e, APIVersion:\u003cspan class=\"s2\"\u003e\u0026#34;extensions/v1beta1\u0026#34;\u003c/span\u003e, ResourceVersion:\u003cspan class=\"s2\"\u003e\u0026#34;16248\u0026#34;\u003c/span\u003e, FieldPath:\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e})\u003c/span\u003e: \u003cspan class=\"nb\"\u003etype\u003c/span\u003e: \u003cspan class=\"s1\"\u003e\u0026#39;Normal\u0026#39;\u003c/span\u003e reason: \u003cspan class=\"s1\"\u003e\u0026#39;CREATE\u0026#39;\u003c/span\u003e Ingress default/nginx-ingress\nI0627 14:56:42.033294       7 controller.go:188] Backend successfully reloaded.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们再来验证一下：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e host:svc-1.kubernetes.lab http://10.192.0.2:32222\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e host:svc-2.kubernetes.lab http://10.192.0.2:32222\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\n\u003cp\u003e和ExternalIP以及NodePort一样，Ingress可以把Kubernetes集群内的Service暴露到集群外，但它还提供了更多丰富的功能，比如负载均衡，SSL，虚拟主机等。Ingress对负载均衡的配置不涉及对Service的修改，所以它是和Service解耦的，并且它以集中的方式统一配置路由规则，非常便于管理。\u003c/p\u003e\n\n\u003cp\u003e有很多Ingress Controller可供选择，除了本文介绍的Nginx之外，常见的还有Traefik，HAProxy，Isitio，Kong等。\u003c/p\u003e\n\n\u003cp\u003e当然，功能更加丰富的同时，Ingress的部署也相对更加复杂一些。前面我们已经看到了，部署涉及Ingress Resource，Ingress Controller的Deployment和Service。另外，除了针对Ingress Resource进行路由规则的配置外，如果我们还想对Ingress Controller本身的功能进行配置，还需要配置ConfigMap，以及Secret（比如要开启SSL功能）。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-05-22T00:00:00+08:00\"\u003eMay 22, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94Ingress%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-ingress%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-ingress%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-ingress%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/k8s-net-externalip-nodeport/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——ExternalIP和NodePort\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/kubemacro-1/\" class=\"pagination--pager\" title=\"KubeMacro快速入门\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-05-22T00:00:00+08:00",
  "Author": "MornigSpace"
}