{
  "Source": "morningspace",
  "Title": "Git解密——Tree对象和Commit对象",
  "Link": "https://morningspace.github.io/tech/inside-git-2/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#tree对象\"\u003eTree对象\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#commit对象\"\u003eCommit对象\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003e也许你早已经熟悉了Git的日常使用，但是你可曾想过：为什么每次新建Git库时都要执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e呢？执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e后生成的.git目录里到底藏了哪些秘密？平常使用Git客户端，以及命令行执行git命令时，Git在背后到底为我们默默地做了些什么呢？阅读本文以后，一切谜团都将引刃而解！\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e注：\n本文的大部分写作灵感来自于\u003ca href=\"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain\"\u003e“Pro Git book”\u003c/a\u003e。感谢原作者的精彩分享。\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/logo-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"tree对象\"\u003eTree对象\u003c/h2\u003e\n\n\u003cp\u003e这一节，让我们一起来认识一下tree对象。它是Git对象中很重要的一种类型。blob对象只能保存某个文件的内容本身以及它的唯一键，它并不会保存文件名。而tree对象，不仅可以保存文件名，还可以保存多个文件的内容及其唯一键，而且它还允许嵌套子树（subtree），即：让一个tree对象包含另一个tree对象。所以，如果说blob对象和文件相对应，那么tree对象就是和目录相对应的。\u003c/p\u003e\n\n\u003cp\u003e下面我们就来手工建一棵树。通常，Git首先会把要保存的内容放入暂存区（或者按照Git的术语，被称为index），然后以一组tree对象的形式将暂存区的内容写入Git数据库。因此，我们首先要更改暂存区的状态（或者称为更新index）。如果这个时候我们用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit status\u003c/code\u003e查看一下当前的本地Git库，会看到暂存区现在还是空的，这是因为我们还没有把需要提交的变更放入暂存区。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to include \u003cspan class=\"k\"\u003ein \u003c/span\u003ewhat will be committed\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\tREADME\n\nnothing added to commit but untracked files present \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git add\u0026#34;\u003c/span\u003e to track\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如果想更新暂存区（即更新index），比如：把第一版README放入暂存区，我们需要借助\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit update-index\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit update-index \u003cspan class=\"nt\"\u003e--add\u003c/span\u003e \u003cspan class=\"nt\"\u003e--cacheinfo\u003c/span\u003e 100644 968b2bf72e28d8c6756054730880cf9f9ab06062 README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--add\u003c/code\u003e表示我们要往暂存区里新加文件；参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--cacheinfo\u003c/code\u003e则表示，我们要加的文件并不在当前目录下，而是存在于Git的数据库里。的确，我们加入暂存区的是README的第一个版本，而当前目录下保存的则是README的第二个版本。\u003c/p\u003e\n\n\u003cp\u003e100644对应的是一个mode值，代表普通文件。在Git里，几个常用的mode值包括：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e100644 - 普通文件；\u003c/li\u003e\n  \u003cli\u003e100755 - 可执行文件；\u003c/li\u003e\n  \u003cli\u003e120000 - 符号链接（symbolic link）；\u003c/li\u003e\n  \u003cli\u003e040000 - 目录；\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e随后是文件对应的唯一键，以及文件名。\u003c/p\u003e\n\n\u003cp\u003e这个时候如果我们再执行一次\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit status\u003c/code\u003e，就会看到暂存区里有内容了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to unstage\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\tnew file:   README\n\nChanges not staged \u003cspan class=\"k\"\u003efor \u003c/span\u003ecommit:\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to update what will be committed\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to discard changes \u003cspan class=\"k\"\u003ein \u003c/span\u003eworking directory\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\tmodified:   README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，“Changes to be committed”下的README就是我们存入暂存区，且等待提交的第一版README；“Changes not staged for commit”下的README，则是当前目录下的README，也就是它的第二版。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们就可以利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit write-tree\u003c/code\u003e把存入暂存区的内容以一个tree对象的形式写入Git数据库了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit write-tree\n4bfa25dce3532386b8924ca569efbada55685794\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们再用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e，分别结合\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-p\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t\u003c/code\u003e参数，验证一下刚刚存入的tree对象：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 4bfa25dce3532386b8924ca569efbada55685794\n100644 blob 968b2bf72e28d8c6756054730880cf9f9ab06062\tREADME\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e 4bfa25dce3532386b8924ca569efbada55685794\ntree\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从返回的结果可以看到，唯一键4bfa25d打头的Git对象，的确是tree类型的，并且它包含了一个文件名为README的blob类型的Git对象，其唯一键为968b2bf打头，且是一个普通类型的文件，恰好对应README的第一版。这说明，我们的tree对象已经创建成功了。\u003c/p\u003e\n\n\u003cp\u003e紧接着我们再来建一棵树。这次，我们打算新建一个文件放入暂存区，同时还要将README的第二版也加入暂存区：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;1.0\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e VERSION\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit update-index \u003cspan class=\"nt\"\u003e--add\u003c/span\u003e VERSION\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit update-index \u003cspan class=\"nt\"\u003e--add\u003c/span\u003e README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit write-tree\n955f6fef4f43ee1f5d93cbea718cce3048450f4b\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，我们再用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e查看一下新建的tree对象：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 955f6fef4f43ee1f5d93cbea718cce3048450f4b\n100644 blob 4f4fc3399cef946fc77e12211808d0590715793d\tREADME\n100644 blob d3827e75a5cadb9fe4a27e1cb9b6d192e7323120\tVERSION\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过对比唯一键可以发现，这里所指向的正是第二版README对应的Git对象。并且，我们也注意到了，一个tree对象可以保存不只一个Git对象。\u003c/p\u003e\n\n\u003cp\u003e不仅如此，前面提到过，tree对象是可以包含子树的。比如：我们还可以把之前创建的第一颗树作为第二颗树的子树。利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit read-tree\u003c/code\u003e把第一棵树整个读入暂存区，然后再写入Git的数据库：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit read-tree \u003cspan class=\"nt\"\u003e--prefix\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ebak 4bfa25dce3532386b8924ca569efbada55685794\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit write-tree\n07ef9d54dd0da246d069dfa2ad2350751203ecb2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--prefix\u003c/code\u003e参数，相当于在当前目录下“新建”了一个名为bak的子目录。当然，我们并没有真的在当前目录下创建这个子目录，它只存在于Git的数据库里。所以，这个时候如果我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit status\u003c/code\u003e，就会发现bak/README会同时出现在“Changes to be committed”和“Changes not staged for commit”下面。前者说明，bak/README以经被暂存，而后者则表明当前目录下和暂存区相比，bak/README是缺失的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to unstage\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\tnew file:   README\n\tnew file:   VERSION\n\tnew file:   bak/README\n\nChanges not staged \u003cspan class=\"k\"\u003efor \u003c/span\u003ecommit:\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git add/rm \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to update what will be committed\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e(\u003c/span\u003euse \u003cspan class=\"s2\"\u003e\u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34;\u003c/span\u003e to discard changes \u003cspan class=\"k\"\u003ein \u003c/span\u003eworking directory\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n\tdeleted:    bak/README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e通过执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit checkout\u003c/code\u003e命令，我们可以把暂存区的内容恢复到本地（即所谓的工作区）。那样就可以在当前目录下看到这个bak子目录以及它下面的README文件了，而且是README文件的第一版：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout \u003cspan class=\"nt\"\u003e--\u003c/span\u003e bak/README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003eREADME  VERSION  bak\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003ebak/README \nInside Git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，我们再次利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e，查看一下新建tree对象的详情：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 07ef9d54dd0da246d069dfa2ad2350751203ecb2\n100644 blob 4f4fc3399cef946fc77e12211808d0590715793d\tREADME\n100644 blob d3827e75a5cadb9fe4a27e1cb9b6d192e7323120\tVERSION\n040000 tree 4bfa25dce3532386b8924ca569efbada55685794\tbak\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后一行表明，我们的bak子目录（即唯一键为4bfa25d打头的tree对象）的确已经被作为子树加入到当前的tree对象里了。如下图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/inside-git-1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"commit对象\"\u003eCommit对象\u003c/h2\u003e\n\n\u003cp\u003e利用tree对象，我们实际上为本地Git库保存了一份反映当前更改的快照（snapshot），因为它包含了本次要提交的全部更改。但问题在于，我们必须记住这些快照的唯一键，才能利用键值得到快照所对应的变更。并且，除了具体变更内容外，我们并不知道是谁，在什么时候，保存了这份快照，以及为什么要保存（相当于\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit commit\u003c/code\u003e时提供的备注信息）。这些信息都可以包含在一个commit类型的Git对象里。下面我们就来看一下，如何手工创建一个commit对象，来模拟\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit commit\u003c/code\u003e的过程。\u003c/p\u003e\n\n\u003cp\u003e创建commit对象，需要用到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit commit-tree\u003c/code\u003e，并通过唯一键指定我们需要提交的tree对象，以及对应的备注信息：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;first commit\u0026#39;\u003c/span\u003e | git commit-tree 4bfa25\n4c50701f89265f9ca6eeb3ddffae450da55f9bd5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e注意，我们在指定tree对象的时候并没有使用完整的唯一键，而是截取了前面几位。这在命令行下执行git命令时是很常见的，只要它能唯一标识对应的Git对象就行。\u003c/p\u003e\n\n\u003cp\u003e上述命令的执行，将会为我们建立一个commit对象。其返回的结果，就是指向该commit对象的唯一键。利用返回的唯一键，我们用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e查看一下这个commit对象的详情：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 4c50701f89265f9ca6eeb3ddffae450da55f9bd5\ntree 4bfa25dce3532386b8924ca569efbada55685794\nauthor dev \u0026lt;dev@example.com\u0026gt; 1556718994 +0000\ncommitter dev \u0026lt;dev@example.com\u0026gt; 1556718994 +0000\n\nfirst commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，返回结果包含了我们要提交的tree对象的唯一键，作者和提交者的个人信息，以及提交时所提供的备注信息。这就相当于我们执行了一次\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit commit\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e下面，我们再多建几个commit对象：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;second commit\u0026#39;\u003c/span\u003e | git commit-tree 955f6f \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 4c50701\n04081ddb43269238a1cb8a61a2d04a36986febfa\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;third commit\u0026#39;\u003c/span\u003e  | git commit-tree 07ef9d \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 04081dd\ne0ec828eda6b51b170fff6b5fdfa03a3cb70a13e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，如果我们执行一下\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e就会发现，不经意间我们已经建立起了完整的提交历史。而这一提交历史，全部都是利用git底层命令完成的。效果和执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit commit\u003c/code\u003e是一摸一样的！在执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit log\u003c/code\u003e时，加上与“third commit”对应的唯一键，我们可以查看到从该提交开始往前的所有提交历史：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log e0ec82\ncommit e0ec828eda6b51b170fff6b5fdfa03a3cb70a13e\nAuthor: dev \u0026lt;dev@example.com\u0026gt;\nDate:   Wed May 1 14:06:37 2019 +0000\n\n    third commit\n\ncommit 04081ddb43269238a1cb8a61a2d04a36986febfa\nAuthor: dev \u0026lt;dev@example.com\u0026gt;\nDate:   Wed May 1 14:05:43 2019 +0000\n\n    second commit\n\ncommit 4c50701f89265f9ca6eeb3ddffae450da55f9bd5\nAuthor: dev \u0026lt;dev@example.com\u0026gt;\nDate:   Wed May 1 13:56:34 2019 +0000\n\n    first commit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eGit的commit对象与相应tree对象之间的关系如下图所示：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/inside-git-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e本质上，我们在执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit add/commit\u003c/code\u003e命令时，Git在背后做的就是上面这些工作：把修改过的文件存成blob对象，更新index，写入tree对象，写入commit对象并指向tree对象，在多个commit对象之间建立起前后相继的关联关系。包括blob，tree，以及commit对象在内，每个Git对象都会对应到.git/objects目录下的一个文件。下面是到目前为止我们在inside-git的本地Git库里手工创建出来的所有Git对象：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind .git/objects \u003cspan class=\"nt\"\u003e-type\u003c/span\u003e f\n.git/objects/d3/827e75a5cadb9fe4a27e1cb9b6d192e7323120\n.git/objects/07/ef9d54dd0da246d069dfa2ad2350751203ecb2\n.git/objects/96/8b2bf72e28d8c6756054730880cf9f9ab06062\n.git/objects/95/5f6fef4f43ee1f5d93cbea718cce3048450f4b\n.git/objects/4f/4fc3399cef946fc77e12211808d0590715793d\n.git/objects/4c/50701f89265f9ca6eeb3ddffae450da55f9bd5\n.git/objects/e0/ec828eda6b51b170fff6b5fdfa03a3cb70a13e\n.git/objects/04/081ddb43269238a1cb8a61a2d04a36986febfa\n.git/objects/4b/fa25dce3532386b8924ca569efbada55685794\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-08-03T00:00:00+08:00\"\u003eAugust 3, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E8%A7%A3%E5%AF%86%E2%80%94%E2%80%94Tree%E5%AF%B9%E8%B1%A1%E5%92%8CCommit%E5%AF%B9%E8%B1%A1%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-2%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-2%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-2%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/inside-git-1/\" class=\"pagination--pager\" title=\"Git解密——认识Git对象\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/inside-git-3/\" class=\"pagination--pager\" title=\"Git解密——认识Git引用\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-08-03T00:00:00+08:00",
  "Author": "MornigSpace"
}