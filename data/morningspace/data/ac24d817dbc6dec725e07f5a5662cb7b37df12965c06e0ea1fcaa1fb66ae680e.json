{
  "Source": "morningspace",
  "Title": "集成KubeAssert与KUTTL",
  "Link": "https://morningspace.github.io/tech/kubeassert-4/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#关于kuttl\"\u003e关于KUTTL\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#结合kubeassert与kuttl\"\u003e结合KubeAssert与KUTTL\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#用kubeassert编写kuttl断言\"\u003e用KubeAssert编写KUTTL断言\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#创建测试用例\"\u003e创建测试用例\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#编写第二个测试步骤\"\u003e编写第二个测试步骤\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003eKubeAssert是一个kubectl插件，用于在命令行声明针对Kubernetes资源的断言（assertion）。KubeAssert是一个位于\u003ca href=\"https://github.com/morningspace/kubeassert\"\u003eGitHub\u003c/a\u003e上的开源项目。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/studio/kubeassert/kubeassert-4.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e作为KubeAssert系列文章的第四篇，本文将向大家介绍，如何把KubeAssert和\u003ca href=\"https://kuttl.dev/\"\u003eKUTTL\u003c/a\u003e集成在一起，让针对Kubernetes集群的自动化测试如虎添翼。\u003c/p\u003e\n\n\u003ch2 id=\"关于kuttl\"\u003e关于KUTTL\u003c/h2\u003e\n\n\u003cp\u003eKUbernetes Test TooL (KUTTL)是一个Kubernetes的自动化测试工具，它利用YAML语法，提供了以声明式手段对Kubernetes进行测试的方法。KUTTL能在测试准备阶段动态注入即将要被测试的operator，并允许以YAML文件的形式对测试用例进行描述。测试过程中出现的断言，通常也是一系列YAML文件，用来验证Kubernetes资源的状态字段是否满足预期条件。此外，KUTTL也可以被用来实现Kubernetes集群的自动化部署。获取有关KUTTL的更多信息，可以访问它的\u003ca href=\"https://kuttl.dev/\"\u003e网站\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"结合kubeassert与kuttl\"\u003e结合KubeAssert与KUTTL\u003c/h2\u003e\n\n\u003cp\u003e在KUTTL里，测试的断言是用YAML语言来定义的。我们可以用YAML语法来描述某个Kubernetes对象是否匹配指定的对象名称，或者相应的状态字段。如果我们为对象指定了预期的名称，KUTTL就会在集群中查找匹配该条件的Kubernetes对象。例如，假设我们定义的断言如下所示：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ev1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ePod\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003emy-pod\u003c/span\u003e\n\u003cspan class=\"na\"\u003estatus\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n \u003cspan class=\"na\"\u003ephase\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eSuccessful\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e那么KUTTL就会在运行测试用例的namespace里寻找名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emy-pod\u003c/code\u003e的pod资源，并等待其字段\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatus.phase\u003c/code\u003e的值变成\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eSuccessful\u003c/code\u003e。\u003c/p\u003e\n\n\u003cp\u003e然而，KUTTL的断言表达能力非常有限。例如，默认情况下，KUTTL是无法用这种YAML格式的断言来验证pod的重启次数小于某个期望数值的，它也无法验证没有pod处于terminating状态这样的情况。这就是KubeAssert的用武之地了！\u003c/p\u003e\n\n\u003cp\u003e幸运的是，从v0.9.0开始，KUTTLE允许用户在声明断言时指定命令行命令或脚本文件。这就给了我们把KubeAssert和KUTTL集成在一起的机会，从而允许我们能写出更加灵活而强大的断言来。\u003c/p\u003e\n\n\u003ch2 id=\"用kubeassert编写kuttl断言\"\u003e用KubeAssert编写KUTTL断言\u003c/h2\u003e\n\n\u003cp\u003e接下来，让我们以KUTTL官网上的“\u003ca href=\"https://kuttl.dev/docs/kuttl-test-harness.html#writing-your-first-test\"\u003eWriting Your First Test\u003c/a\u003e”为例，看一下我们是如何把它改造成用KubeAssert来编写断言的。\u003c/p\u003e\n\n\u003ch3 id=\"创建测试用例\"\u003e创建测试用例\u003c/h3\u003e\n\n\u003cp\u003e首先，我们来创建一个\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etests/e2e\u003c/code\u003e目录，作为存放所有测试用例的根目录，并在该目录下创建\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexample-test\u003c/code\u003e子目录，代表对应的测试用例：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e tests/e2e/example-test\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etests/e2e/example-test/\u003c/code\u003e目录下创建测试步骤\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e00-install.yaml\u003c/code\u003e，用于创建一个名为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexample-deployment\u003c/code\u003e的deployment：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eexample-deployment\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eselector\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ematchLabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etemplate\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elabels\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eapp\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n    \u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtainers\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eimage\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003enginx:latest\u003c/span\u003e\n        \u003cspan class=\"na\"\u003eports\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003econtainerPort\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后，创建测试断言\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etests/e2e/example-test/00-assert.yaml\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekuttl.dev/v1beta1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTestAssert\u003c/span\u003e\n\u003cspan class=\"na\"\u003ecommands\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekubectl assert exist-enhanced deployment example-deployment -n $NAMESPACE --field-selector status.readyReplicas=3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e此处，我们使用了TestAssert，并通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecommand\u003c/code\u003e定义调用了KubeAssert。判断如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eexample-deployment\u003c/code\u003e的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatus.readyReplicas\u003c/code\u003e字段取值为3，则认为测试步骤执行完毕。请注意，我们在这里使用了环境变量\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e$NAMESPACE\u003c/code\u003e。这是KUTTL提供的，用来指明当前测试所在的namespace。\u003c/p\u003e\n\n\u003ch3 id=\"编写第二个测试步骤\"\u003e编写第二个测试步骤\u003c/h3\u003e\n\n\u003cp\u003e在第二个测试步骤里，我们把deployment的replica数从3增加到了4。这是在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etests/e2e/example-test/01-scale.yaml\u003c/code\u003e中定义的：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapps/v1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDeployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003emetadata\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eexample-deployment\u003c/span\u003e\n\u003cspan class=\"na\"\u003espec\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ereplicas\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e为此，我们在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etests/e2e/example-test/01-assert.yaml\u003c/code\u003e中利用KubeAssert定义了相应的断言：\u003c/p\u003e\n\u003cdiv class=\"language-yaml highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekuttl.dev/v1beta1\u003c/span\u003e\n\u003cspan class=\"na\"\u003ekind\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eTestAssert\u003c/span\u003e\n\u003cspan class=\"na\"\u003ecommands\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ecommand\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ekubectl assert exist-enhanced deployment example-deployment -n $NAMESPACE --field-selector status.readyReplicas=4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e此处，我们所声明的断言几乎和前一个测试步骤里定义的一摸一样。唯一的区别是，我们把\u003ccode class=\"language-plaintext highlighter-rouge\"\u003estatus.readyReplicas\u003c/code\u003e的期望值改成了4。\u003c/p\u003e\n\n\u003cp\u003e执行该测试用例并验证测试是否通过：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003ekubectl kuttl \u003cspan class=\"nb\"\u003etest\u003c/span\u003e - start-kind\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e ./tests/e2e/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有关这一示例的更多信息，请访问位于KUTTL网站上的\u003ca href=\"https://kuttl.dev/docs/kuttl-test-harness.html#writing-your-first-test\"\u003e原文\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\n\u003cp\u003e如你所见，把KubeAssert与KUTTL集成在一起非常的容易。本文中，我们只演示了KubeAssert的几个非常基本的断言功能。根据实际需要，我们还可以在编写KUTTL的测试用例时定义更加复杂的KubeAssert断言。\u003c/p\u003e\n\n\u003cp\u003e如果你想了解更多有关KubeAssert的信息，请阅读它的\u003ca href=\"https://morningspace.github.io/kubeassert/docs/\"\u003e在线文档\u003c/a\u003e。如果你喜欢这个项目，欢迎给它\u003ca href=\"https://github.com/morningspace/kubeassert\"\u003e加星\u003c/a\u003e。同时，也非常欢迎针对该项目的任何形式的贡献，比如bug报告以及代码提交。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-07-10T00:00:00+08:00\"\u003eJuly 10, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=%E9%9B%86%E6%88%90KubeAssert%E4%B8%8EKUTTL%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubeassert-4%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubeassert-4%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fkubeassert-4%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/kubeassert-3/\" class=\"pagination--pager\" title=\"为KubeAssert定制断言\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/enhanced-oc-1/\" class=\"pagination--pager\" title=\"如何高效安全的管理OpenShift集群\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-07-10T00:00:00+08:00",
  "Author": "MornigSpace"
}