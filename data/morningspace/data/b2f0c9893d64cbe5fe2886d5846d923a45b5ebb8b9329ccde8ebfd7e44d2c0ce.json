{
  "Source": "morningspace",
  "Title": "Git解密——认识Git对象",
  "Link": "https://morningspace.github.io/tech/inside-git-1/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#git目录\"\u003e.git目录\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#认识git对象\"\u003e认识Git对象\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#blob对象\"\u003eBlob对象\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#git对象的存储\"\u003eGit对象的存储\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003e也许你早已经熟悉了Git的日常使用，但是你可曾想过：为什么每次新建Git库时都要执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e呢？执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e后生成的.git目录里到底藏了哪些秘密？平常使用Git客户端，以及命令行执行git命令时，Git在背后到底为我们默默地做了些什么呢？阅读本文以后，一切谜团都将引刃而解！\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e注：\n本文的大部分写作灵感来自于\u003ca href=\"https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain\"\u003e“Pro Git book”\u003c/a\u003e。感谢原作者的精彩分享。\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/logo-1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"git目录\"\u003e.git目录\u003c/h2\u003e\n\n\u003cp\u003e众所周知，每次我们在本地新建一个Git库时，都要执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit init\u003c/code\u003e命令。Git会在新建库的根目录下为我们自动创建一个.git目录，把所有它要用到的信息都保存在这个神奇的目录里。我们日常对Git的所有操作，本质上讲，就是在对这个目录进行维护。也正是因为这个原因，如果我们想备份Git库的话，实际上只要复制这个.git目录就可以了。\u003c/p\u003e\n\n\u003cp\u003e为了方便后面做实验，让我们先在本地新建一个Git库，并观察.git目录下包含的内容。本文推荐大家利用\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e提供的两个Docker镜像作为实验环境：一个代表远程Git服务（lab-git-remote），另一个代表本地Git客户端（lab-git-local）。这两个镜像都可以从Docker Hub上找到：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003edocker pull morningspace/lab-git-remote\ndocker pull morningspace/lab-git-local\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有关这两个Docker镜像的具体使用方法，请见\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e项目的README。本文后续讨论的所有动手环节，都将围绕这两个Docker镜像展开。现在，我们就来创建本地Git库：inside-git。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit init inside-git\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /root/inside-git/.git/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003einside-git\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e .git\ntotal 32\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 root root   23 Apr 30 00:46 HEAD\ndrwxr-xr-x 2 root root 4096 Apr 30 00:46 branches\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 root root   92 Apr 30 00:46 config\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 root root   73 Apr 30 00:46 description\ndrwxr-xr-x 2 root root 4096 Apr 30 00:46 hooks\ndrwxr-xr-x 2 root root 4096 Apr 30 00:46 info\ndrwxr-xr-x 4 root root 4096 Apr 30 00:46 objects\ndrwxr-xr-x 4 root root 4096 Apr 30 00:46 refs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因为我们还没有往Git库里添加任何内容，所以.git基本上只是一个空的目录结构。这其中，我们将重点关注两个目录和一个文件，分别是：objects目录，refs目录，以及HEAD文件。那么，它们到底有什么用途呢？别急，我们接着往下看。\u003c/p\u003e\n\n\u003ch2 id=\"认识git对象\"\u003e认识Git对象\u003c/h2\u003e\n\n\u003cp\u003e在Git的世界里，Git把它所管理的一切内容都当作了一个个的Git对象（Git object），这些对象就被保存在.git目录下。Git在保存这些对象时，还会为它们生成一个基于SHA-1算法的全局唯一的hash值，以便后面利用这个hash值对Git对象进行存取和引用。\u003c/p\u003e\n\n\u003cp\u003e所以，Git的核心，其实就是一个基于文件系统的，存储“键值对”的数据库。或者，更加“正式”一点的说法是，Git是一个在内容上可寻址的文件系统（Content-Addressable Filesystem）。\u003c/p\u003e\n\n\u003cp\u003e基于这一认识，我们再回过头来看.git目录下的这两个目录和一个文件：\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eobjects: 顾名思义，这个目录里存的都是Git对象。它以Git对象的形式保存了该Git库所包含和管理的全部内容；\u003c/li\u003e\n  \u003cli\u003erefs: 保存了指向Git对象的引用。准确地说，这个引用所指向的，是与分支，标签，远程库等相关联的commit对象。Git把它所管理的对象分成了几种类型，commit对象就是其中之一。关于commit对象，引用，以及refs目录，后面我们还会详细介绍；\u003c/li\u003e\n  \u003cli\u003eHEAD: 这个很容易理解，它保存了当前分支的head指针，实际上就是指向当前分支最新提交（也是一个commit对象）的引用。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"blob对象\"\u003eBlob对象\u003c/h2\u003e\n\n\u003cp\u003e有了前面的铺垫，从这一节开始，我们将真正开启探索Git底层机制的神奇之旅啦！\u003c/p\u003e\n\n\u003cp\u003e我们要做的第一件事情，是手工创建一个Git对象。Git对象的创建，在我们日常使用Git时，都是由Git在背后悄悄完成的。通过手工创建，很快我们就会揭开它的神秘面纱，看一看Git到底是如何跟踪和管理内容的。\u003c/p\u003e\n\n\u003cp\u003e说是手工创建，其实也不完全是。这里，我们依然要借助于Git的一个特殊命令：\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e。利用它，我们可以把内容存入.git/objects目录，并返回指向该内容的唯一键（即hash值）。这个命令，我们在日常使用Git时可能从来都没有用到过，它属于Git的底层命令。我们平时执行的那些git命令，背后其实调用的都是像\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e那样更为底层的命令。在后面的内容里，我们将大量使用这些底层命令，来理解Git背后隐藏的秘密。\u003c/p\u003e\n\n\u003cp\u003eOK，现在就让我们利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e，手工把一个新建的文件存入Git库：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Inside Git\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit hash-object \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e README\n968b2bf72e28d8c6756054730880cf9f9ab06062\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-w\u003c/code\u003e是为了告诉Git，在返回唯一键的同时，把内容存入Git库。关于存入Git库中的Git对象的格式，后面我们还会详细解释，这里先略过不表。\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e的返回结果，即Git对象的唯一键，是一个长度为40个字符的基于SHA-1算法的hash值。\u003c/p\u003e\n\n\u003cp\u003e此时，我们会发现在.git目录的objects子目录下多了一个新文件。文件名和上级目录名称的组合刚好构成了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e返回的唯一键：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind .git/objects \u003cspan class=\"nt\"\u003e-type\u003c/span\u003e f\n.git/objects/96/8b2bf72e28d8c6756054730880cf9f9ab06062\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e利用另一个Git的底层命令\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e，我们还可以还原刚才所保存的内容正文：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 968b2bf72e28d8c6756054730880cf9f9ab06062\nInside Git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e接下来，我们再对README的内容做些修改，然后存成一个新的Git对象：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Welcome to Inside Git\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit hash-object \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e README\n4f4fc3399cef946fc77e12211808d0590715793d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e现在再来看一下我们的.git目录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efind .git/objects \u003cspan class=\"nt\"\u003e-type\u003c/span\u003e f\n.git/objects/96/8b2bf72e28d8c6756054730880cf9f9ab06062\n.git/objects/4f/4fc3399cef946fc77e12211808d0590715793d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候.git目录下已经有两个Git对象了，它们分别对应于README文件的两个不同版本。如果在执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e命令时使用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-t\u003c/code\u003e参数，我们还能看到Git对象的所属类型：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e 968b2bf72e28d8c6756054730880cf9f9ab06062\nblob\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e 4f4fc3399cef946fc77e12211808d0590715793d\nblob\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，与文件相对应的Git对象都是blob类型的。很快我们就会看到，除了blob对象，Git还支持很多其他类型的对象。\u003c/p\u003e\n\n\u003ch2 id=\"git对象的存储\"\u003eGit对象的存储\u003c/h2\u003e\n\n\u003cp\u003e前面提到过，存入Git库中的Git对象是有着特定格式的。具体来说，它包含了一个header字段，后跟一个’\\0’字符，然后才是内容正文。整个Git对象在存入Git库时，还会经过一次zlib的deflate压缩处理：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u0026lt;header字段\u0026gt;\\0\u0026lt;内容正文\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp\u003e其中，header字段的格式为：\u003c/p\u003e\n\u003cdiv class=\"language-plaintext highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u0026lt;对象类型\u0026gt; \u0026lt;内容正文长度\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003cp\u003e这里的对象类型指的就是Git对象的类型，比如：blob，tree，commit，tag等。事实上，对header字段采用SHA-1算法计算得到的结果，就是Git对象的唯一键。它是一个长度为40个字符的字符串。\u003c/p\u003e\n\n\u003cp\u003e为了验证这一点，下面我们将再次手工创建一个Git对象。和之前不同的是，这里我们不再使用git提供的现成命令\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e了，而是采用第三方命令行工具：sha1sum和pigz。\u003c/p\u003e\n\n\u003cp\u003e注意：如果你使用的是\u003ca href=\"https://github.com/morningspace/lab-hello-git\"\u003eHello Git\u003c/a\u003e提供的Docker镜像，那么这些命令行工具都已经预装了。否则需要自行安装，比如在Ubuntu上安装pigz，可以执行如下命令：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eapt-get update\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eapt-get \u003cspan class=\"nb\"\u003einstall \u003c/span\u003epigz\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e假设我们的内容正文是“What is inside Git?”，字符串长度为19，对应的Git对象类型为blob。按照上面的格式把header字段和内容正文用’\\0’字符隔开，然后利用sha1sum计算SHA-1的hash值如下：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-ne\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;blob 19\\0What is inside Git?\u0026#39;\u003c/span\u003e | \u003cspan class=\"nb\"\u003esha1sum\u003c/span\u003e | \u003cspan class=\"nb\"\u003eawk\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{print $1}\u0026#39;\u003c/span\u003e\n5fe76ad3e039c1fdc74201715f8c150bed50e351\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们在执行echo时，加上了参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-n\u003c/code\u003e和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-e\u003c/code\u003e。前者是为了避免echo在输出字符串时自动添加换行符；后者是为了让echo能够识别反斜杠转义符（即字符串中的’\\0’）。\u003c/p\u003e\n\n\u003cp\u003e然后，我们再用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e来验证一下，这个用sha1sum生成的hash值是否是正确的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;What is inside Git?\u0026#39;\u003c/span\u003e | git hash-object \u003cspan class=\"nt\"\u003e--stdin\u003c/span\u003e\n5fe76ad3e039c1fdc74201715f8c150bed50e351\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e返回的结果表明，用sha1sum生成的结果和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit hash-object\u003c/code\u003e是完全一致的。这里，使用参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--stdin\u003c/code\u003e是为了告诉git，从标准输入中读取内容。\u003c/p\u003e\n\n\u003cp\u003e接下来，我们再来看一下Git对象的存储。按照规则，我们把前面生成的唯一键拆成两个部分：前两位作为目录名，在.git/objects下新建一个子目录；后38位则作为文件名，在该子目录下新建一个文件。同时，在把Git对象写入该文件时调用pigz，对包含header值在内的完整内容进行压缩处理：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e .git/objects/5f\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-ne\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;blob 19\\0What is inside Git?\u0026#39;\u003c/span\u003e | pigz \u003cspan class=\"nt\"\u003e-cz\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e .git/objects/5f/e76ad3e039c1fdc74201715f8c150bed50e351\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e我们为pigz指定了两个参数：参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-c\u003c/code\u003e表示将所有信息输出到标准输出设备。当然，因为我们使用了重定向符，所以标准输出设备的输出最终被存成了文件。另一个参数\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-z\u003c/code\u003e，则指示pigz在进行压缩处理时采用zlib的deflate算法。默认情况下pigz使用的是gzip算法，两者在格式上有所不同。\u003c/p\u003e\n\n\u003cp\u003e如果此时我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit cat-file\u003c/code\u003e查看该Git对象的内容：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit cat-file \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e 5fe76ad3e039c1fdc74201715f8c150bed50e351\nWhat is inside Git?\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e就会发现，返回的结果和我们用pigz进行压缩处理之前的内容正文是一摸一样的。这和我们用pigz的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e-d\u003c/code\u003e参数对Git对象进行解压得到的结果也完全一致：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003epigz \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u0026lt; .git/objects/5f/e76ad3e039c1fdc74201715f8c150bed50e351\nblob 19What is inside Git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里的返回结果包含了header字段和内容正文，中间的’\\0’由于是不可见字符，所以没有显示出来。\u003c/p\u003e\n\n\u003cp\u003e好了，今天就先到这里啦。在下篇文章里，我们将讨论Git中的另外两种重要的对象，它们分别是：Tree和Commit！\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-07-28T00:00:00+08:00\"\u003eJuly 28, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E8%A7%A3%E5%AF%86%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86Git%E5%AF%B9%E8%B1%A1%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-1%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-1%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Finside-git-1%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/understanding-tech-for-dummies/\" class=\"pagination--pager\" title=\"“晴耕 · 白话”栏目上线预告\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/inside-git-2/\" class=\"pagination--pager\" title=\"Git解密——Tree对象和Commit对象\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-07-28T00:00:00+08:00",
  "Author": "MornigSpace"
}