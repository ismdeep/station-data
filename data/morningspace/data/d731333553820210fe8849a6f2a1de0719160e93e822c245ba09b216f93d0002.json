{
  "Source": "morningspace",
  "Title": "Kubernetes网络篇——Pod网络(下)",
  "Link": "https://morningspace.github.io/tech/k8s-net-pod-2/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#部署第一个pod\"\u003e部署第一个Pod\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#准备工作\"\u003e准备工作\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#部署pod\"\u003e部署Pod\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#验证结果\"\u003e验证结果\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#给pod增加一个容器\"\u003e给Pod增加一个容器\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#使用相同端口\"\u003e使用相同端口\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#使用不同端口\"\u003e使用不同端口\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#小结\"\u003e小结\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cp\u003e注：\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e通过\u003ca href=\"/tech/k8s-net-pod-1/\"\u003eKubernetes网络篇——Pod网络(上)\u003c/a\u003e一文，我们已经对Pod以及Pause容器有了基本的认识。本文，我们将通过对Pod的部署实验，进一步认识Kubernetes的Pod网络。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/pod-2.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"部署第一个pod\"\u003e部署第一个Pod\u003c/h2\u003e\n\n\u003ch3 id=\"准备工作\"\u003e准备工作\u003c/h3\u003e\n\n\u003cp\u003e下面我们通过一个Pod的部署，来看一下Kubernetes在为Pod建立网络的过程中还有哪些值得注意的地方。为了方便后面做实验，我们在master节点的目录\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/root\u003c/code\u003e下新建一个文件夹：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003etest-k8s-net\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003etest-k8s-net/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后在这个目录下，把下列Deployment定义存成文件，取名\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-1.yaml\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e test-pod-1.yaml \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\u003c/span\u003e\u003cspan class=\"sh\"\u003e\u0026#34;\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-pod\n  labels:\n    app: lab-web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: lab-web\n  template:\n    metadata:\n      labels:\n        app: lab-web\n    spec:\n      containers:\n      - name: lab-web\n        image: mr.io/lab-web\n        ports:\n        - containerPort: 80\n          name: web-port\n\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里用于测试的镜像\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io/lab-web\u003c/code\u003e，就是我们在\u003ca href=\"/tech/k8s-net-cni-docker-rkt/\"\u003eKubernetes网络篇——将CNI用于容器\u003c/a\u003e一文里用过的镜像\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emorningspace/lab-web\u003c/code\u003e。只是为了方便在本地做测试的时候，能够让Kubernetes集群里的节点快速拉取镜像，我们把镜像在本地构建出来以后，推送到了本地的私有Docker注册表\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io\u003c/code\u003e上：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker build \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e mr.io/lab-web \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker push mr.io/lab-web \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有关kubeadm-dind-cluster如何结合私有Docker注册表的使用方法，可以参考Kuberntes系列的热身篇：\u003ca href=\"/tech/k8s-run/\"\u003eLaunch multi-node Kubernetes cluster locally in one minute, and more…\u003c/a\u003e一文，以及位于GitHub上的\u003ca href=\"https://github.com/morningspace/lab-kubernetes\"\u003elab-kubernetes\u003c/a\u003e项目。\u003c/p\u003e\n\n\u003ch3 id=\"部署pod\"\u003e部署Pod\u003c/h3\u003e\n\n\u003cp\u003e接下来，我们调用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl\u003c/code\u003e命令把test-pod部署到集群里：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl create \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e test-pod-1.yaml\ndeployment.apps/test-pod created\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看default名字空间下的Pod清单，可以看到test-pod已经被成功部署到了节点kube-node-2上，对应的IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.3\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide\nNAME                       READY   STATUS    RESTARTS   AGE   IP           NODE          NOMINATED NODE   READINESS GATES\ntest-pod-6575bc889-hw6bx   1/1     Running   0          31s   10.244.3.3   kube-node-2   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3 id=\"验证结果\"\u003e验证结果\u003c/h3\u003e\n\n\u003cp\u003e在\u003ca href=\"/tech/k8s-net-cni/\"\u003eKubernetes网络篇——认识CNI\u003c/a\u003e一文里，我们提到过，CNI在使用host-local作为IPAM插件时，会把IP地址的配置信息保存在\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e/var/lib/cni/\u003c/code\u003e目录下。前面我们已经看到，kubeadm-dind-cluster用的也是host-local，所以我们可以“登录”到Pod所在的节点：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e kube-node-2 bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e看一下这个目录：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /var/lib/cni/networks\ndindnet\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edindnet\u003c/code\u003e是kubeadm-dind-cluster为整个Kubernetes集群网络定义的名称，来看一下这个子目录下都有哪些文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e /var/lib/cni/networks/dindnet\n10.244.3.3  last_reserved_ip.0\tlock\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e看过\u003ca href=\"/tech/k8s-net-cni/\"\u003eKubernetes网络篇——认识CNI\u003c/a\u003e一文的同学对这个应该已经很熟悉了。这里的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.3\u003c/code\u003e文件对应的是CNI插件为test-pod分配的IP地址，这和我们前面用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl get pods\u003c/code\u003e得到的结果是一致的。而这个文件包含的内容，则对应于test-pod的pause容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /var/lib/cni/networks/dindnet/10.244.3.3\na5f99e13e6adefc620d7af17a559a6f51d584e3d6b4a4703728ebfe48de91a33\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker ps\u003c/code\u003e查看kube-node-2上所有和test-pod相关的容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker ps | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003etest-pod\nb3f451ace2c4        mr.io/lab-web          \u003cspan class=\"s2\"\u003e\u0026#34;nginx -g \u0026#39;daemon of…\u0026#34;\u003c/span\u003e   3 minutes ago       Up 3 minutes                            k8s_lab-web_test-pod-6575bc889-hw6bx_default_d4d37088-9412-11e9-882b-2e5245ea0fee_0\na5f99e13e6ad        k8s.gcr.io/pause:3.1   \u003cspan class=\"s2\"\u003e\u0026#34;/pause\u0026#34;\u003c/span\u003e                 3 minutes ago       Up 3 minutes                            k8s_POD_test-pod-6575bc889-hw6bx_default_d4d37088-9412-11e9-882b-2e5245ea0fee_0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，pause容器的Id值\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ea5f99e13e6ad\u003c/code\u003e，正是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.3\u003c/code\u003e文件里Id值的前几位。\u003c/p\u003e\n\n\u003cp\u003e再来看一下test-pod里的另一个容器lab-web。通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edocker ps\u003c/code\u003e的输出结果，我们可以找到它的容器Id，然后再在这个容器里执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003eip addr show\u003c/code\u003e命令：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003eb3f451ace2c4 ip addr show\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: tunl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1480 qdisc noop state DOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ipip 0.0.0.0 brd 0.0.0.0\n3: ip6tnl0@NONE: \u0026lt;NOARP\u0026gt; mtu 1452 qdisc noop state DOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/tunnel6 :: brd ::\n5: eth0@if9: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 82:ba:d8:36:03:de brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.244.3.3/24 scope global eth0\n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，这里的eth0对应的IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.3\u003c/code\u003e，实际上就是pause容器共享给lab-web的IP地址，也是整个test-pod的IP地址。\u003c/p\u003e\n\n\u003cp\u003e然后，我们再来看一下作为宿主机kube-node-2那一端的网络接口：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003eip addr show\n... ...\n4: dind0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 1a:e1:4a:42:8f:c2 brd ff:ff:ff:ff:ff:ff\n    inet 10.244.3.1/24 scope global dind0\n       valid_lft forever preferred_lft forever\n9: veth0a9314e9@if5: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue master dind0 state UP group default \n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 5a:83:e2:5b:8c:ca brd ff:ff:ff:ff:ff:ff link-netnsid 1\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e除了之前已经创建的dind0，还有一个新的接口veth0a9314e9。作为veth pair在宿主机一端的网络接口，它的序号是9。这和我们在lab-web容器里看到的接口eth0，其@符号后面跟着的序号是一致的。同样地，lab-web容器里eth0前面的序号是5，这和veth0a9314e9的@符号后面跟着的序号也是一致的。\u003c/p\u003e\n\n\u003cp\u003e再看一下容器lab-web的路由，也就是Pod的路由：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker \u003cspan class=\"nb\"\u003eexec \u003c/span\u003eb3f451ace2c4 ip route show\ndefault via 10.244.3.1 dev eth0 \n10.244.3.0/24 dev eth0 proto kernel scope \u003cspan class=\"nb\"\u003elink \u003c/span\u003esrc 10.244.3.3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，所有来自Pod的数据包，即IP地址为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.3\u003c/code\u003e，都将发送到网段\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.0/24\u003c/code\u003e。其他的数据包则会和默认路由相匹配，通过eth0发送给网关\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.1\u003c/code\u003e，也就是位于宿主机上的\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edind0\u003c/code\u003e。这说明，veth pair在宿主机一端已经成功连接到\u003ccode class=\"language-plaintext highlighter-rouge\"\u003edind0\u003c/code\u003e了。\u003c/p\u003e\n\n\u003cp\u003e最后，我们的lab-web容器实际上是一个对外暴露80端口的nginx。在宿主机上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e命令，通过\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e10.244.3.3\u003c/code\u003e向test-pod发送HTTP请求：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl http://10.244.3.3\n\u0026lt;\u003cspan class=\"o\"\u003e!\u003c/span\u003eDOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n\u0026lt;\u003cspan class=\"nb\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt;\n\u0026lt;style\u0026gt;\n    body \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        width: 35em\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        margin: 0 auto\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        font-family: Tahoma, Verdana, Arial, sans-serif\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可以看到，位于test-pod里的lab-web容器是能够成功对外提供服务的。下图给出了test-pod的网络拓扑：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/test-pod-1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"给pod增加一个容器\"\u003e给Pod增加一个容器\u003c/h2\u003e\n\n\u003ch3 id=\"使用相同端口\"\u003e使用相同端口\u003c/h3\u003e\n\n\u003cp\u003e接下来，我们再给test-pod增加一个容器，修改\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-1.yaml\u003c/code\u003e文件如下，并另存为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-2.yaml\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi test-pod-2.yaml \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003etest-pod-2.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-pod\n  labels:\n    app: lab-web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: lab-web\n  template:\n    metadata:\n      labels:\n        app: lab-web\n    spec:\n      containers:\n      - name: lab-web\n        image: mr.io/lab-web\n        ports:\n        - containerPort: 80\n          name: web-port\n      - name: lab-web-2\n        image: mr.io/lab-web\n        ports:\n        - containerPort: 80\n          name: web-2-port\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们尝试为test-pod增加一个新的容器：lab-web-2，使用的镜像同样是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io/lab-web\u003c/code\u003e，并且保持默认端口号80不变。然后执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl apply\u003c/code\u003e命令重新部署test-pod：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl apply \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e test-pod-2.yaml\ndeployment.apps/test-pod configured\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e可是，当我们查看Pod状态的时候，发现test-pod处于Error状态，两个容器中只有一个启动成功了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods\nNAME                        READY   STATUS   RESTARTS   AGE\ntest-pod-78f5d68d7b-r8mbd   1/2     Error    1          19s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看容器lab-web-2的日志可以看到，由于端口号80被占用，lab-web-2里的nginx并没有成功启动起来：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl logs test-pod-78f5d68d7b-r8mbd \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e lab-web-2\n2019/06/22 00:22:36 \u003cspan class=\"o\"\u003e[\u003c/span\u003eemerg] 1#1: \u003cspan class=\"nb\"\u003ebind\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e to 0.0.0.0:80 failed \u003cspan class=\"o\"\u003e(\u003c/span\u003e98: Address already \u003cspan class=\"k\"\u003ein \u003c/span\u003euse\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nnginx: \u003cspan class=\"o\"\u003e[\u003c/span\u003eemerg] \u003cspan class=\"nb\"\u003ebind\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e to 0.0.0.0:80 failed \u003cspan class=\"o\"\u003e(\u003c/span\u003e98: Address already \u003cspan class=\"k\"\u003ein \u003c/span\u003euse\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2019/06/22 00:22:36 \u003cspan class=\"o\"\u003e[\u003c/span\u003eemerg] 1#1: \u003cspan class=\"nb\"\u003ebind\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e to 0.0.0.0:80 failed \u003cspan class=\"o\"\u003e(\u003c/span\u003e98: Address already \u003cspan class=\"k\"\u003ein \u003c/span\u003euse\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nnginx: \u003cspan class=\"o\"\u003e[\u003c/span\u003eemerg] \u003cspan class=\"nb\"\u003ebind\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e to 0.0.0.0:80 failed \u003cspan class=\"o\"\u003e(\u003c/span\u003e98: Address already \u003cspan class=\"k\"\u003ein \u003c/span\u003euse\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n2019/06/22 00:22:36 \u003cspan class=\"o\"\u003e[\u003c/span\u003eemerg] 1#1: still could not \u003cspan class=\"nb\"\u003ebind\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\nnginx: \u003cspan class=\"o\"\u003e[\u003c/span\u003eemerg] still could not \u003cspan class=\"nb\"\u003ebind\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这就进一步证明了，在一个Pod里的多个容器是彼此共享同一网络的。它们就好像一台物理机上的多个应用，端口被其中一个应用占用以后，其他应用就不能再使用同一端口了。\u003c/p\u003e\n\n\u003ch3 id=\"使用不同端口\"\u003e使用不同端口\u003c/h3\u003e\n\n\u003cp\u003e我们对\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-2.yaml\u003c/code\u003e稍作修改，并另存为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etest-pod-3.yaml\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi test-pod-3.yaml \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003etest-pod-3.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-pod\n  labels:\n    app: lab-web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: lab-web\n  template:\n    metadata:\n      labels:\n        app: lab-web\n    spec:\n      containers:\n      - name: lab-web\n        image: mr.io/lab-web\n        ports:\n        - containerPort: 80\n          name: web-port\n      - name: lab-web-2\n        image: mr.io/lab-tomcat\n        ports:\n        - containerPort: 8080\n          name: web-2-port\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这里，我们把lab-web-2的镜像换成了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io/lab-tomcat\u003c/code\u003e，实际上就是tomcat在Docker Hub上的官方镜像，使用8080端口。和\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io/lab-web\u003c/code\u003e一样，我们把它下载到本地后重新打上标签，并推送到私有Docker注册表\u003ccode class=\"language-plaintext highlighter-rouge\"\u003emr.io\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker tag tomcat mr.io/lab-tomcat\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003edocker push mr.io/lab-tomcat \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再次部署test-pod：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl apply \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e test-pod-3.yaml\ndeployment.apps/test-pod configured\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e查看Pod的状态可以看到，这一回test-pod部署成功了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl get pods \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e wide                                                                   \nNAME                        READY   STATUS    RESTARTS   AGE   IP           NODE          NOMINATED NODE   READINESS GATES\ntest-pod-747778fb68-pfhjw   2/2     Running   0          59m   10.244.2.6   kube-node-1   \u0026lt;none\u0026gt;           \u0026lt;none\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e有没有注意到，这次test-pod被部署到了kube-node-1上。这说明Kubernetes在选择部署Pod的节点时完全是动态的。现在，让我们进入到test-pod的lab-web-2容器里。这次我们使用的是\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ekubectl exec\u003c/code\u003e命令。这样，就不必先登录到kube-node-1节点后再进入容器了，我们在master节点就可以直接进入容器：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ekubectl \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e \u003cspan class=\"nt\"\u003e-it\u003c/span\u003e test-pod-747778fb68-pfhjw \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e lab-web-2 bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后在容器里执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ecurl\u003c/code\u003e命令，访问localhost的端口8080：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl http://localhost:8080\n\u0026lt;\u003cspan class=\"o\"\u003e!\u003c/span\u003eDOCTYPE html\u0026gt;\n\u0026lt;html \u003cspan class=\"nv\"\u003elang\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u0026lt;\u003cspan class=\"nb\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n        \u0026lt;meta \u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e /\u0026gt;\n        \u0026lt;title\u0026gt;Apache Tomcat/8.5.42\u0026lt;/title\u0026gt;\n        \u0026lt;\u003cspan class=\"nb\"\u003elink \u003c/span\u003e\u003cspan class=\"nv\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;favicon.ico\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;icon\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;image/x-icon\u0026#34;\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan class=\"nb\"\u003elink \u003c/span\u003e\u003cspan class=\"nv\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;favicon.ico\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;shortcut icon\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;image/x-icon\u0026#34;\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan class=\"nb\"\u003elink \u003c/span\u003e\u003cspan class=\"nv\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;tomcat.css\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003erel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;stylesheet\u0026#34;\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;text/css\u0026#34;\u003c/span\u003e /\u0026gt;\n    \u0026lt;/head\u0026gt;\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e从返回结果可以看出，我们访问的是当前容器的tomcat服务器。如果，访问localhost的HTTP默认端口80：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl http://localhost\n\u0026lt;\u003cspan class=\"o\"\u003e!\u003c/span\u003eDOCTYPE html\u0026gt;\n\u0026lt;html\u0026gt;\n\u0026lt;\u003cspan class=\"nb\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt;\n\u0026lt;style\u0026gt;\n    body \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        width: 35em\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        margin: 0 auto\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        font-family: Tahoma, Verdana, Arial, sans-serif\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u0026lt;/style\u0026gt;\n\u0026lt;/head\u0026gt;\n... ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e则返回的是来自nginx的响应，这说明我们访问的是nginx服务器。虽然nginx没有部署在当前容器里，但是由于它和tomcat是共享同一网络的，所以就好像部署在同一台物理机上一样，因此我们可以用localhost访问到它。下图给出了test-pod新的网络拓扑：\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/k8s/test-pod-2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\n\n\u003cp\u003e对Pod网络的理解，关键在于pause容器。Kubernetes在为Pod分配资源时，会为每个Pod启动一个pause容器，并通过CNI插件为其配置好网络环境。然后再创建其他应用容器，并把它们加入到pause所提供的网络里。Pod的网络实际上是由pause容器来提供的，即便Pod里有某个容器崩溃了，只要pause还在，Pod的网络就不会受到影响。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_kubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#kubernetes\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003ekubernetes\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2021-04-18T00:00:00+08:00\"\u003eApril 18, 2021\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Kubernetes%E7%BD%91%E7%BB%9C%E7%AF%87%E2%80%94%E2%80%94Pod%E7%BD%91%E7%BB%9C%28%E4%B8%8B%29%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-pod-2%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-pod-2%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fk8s-net-pod-2%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/k8s-net-pod-1/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——Pod网络(上)\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/k8s-net-service-1/\" class=\"pagination--pager\" title=\"Kubernetes网络篇——Service网络(上)\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2021-04-18T00:00:00+08:00",
  "Author": "MornigSpace"
}