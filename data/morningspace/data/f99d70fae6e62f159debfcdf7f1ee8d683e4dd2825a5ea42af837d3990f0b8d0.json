{
  "Source": "morningspace",
  "Title": "Git合并那些事——神奇的Rebase",
  "Link": "https://morningspace.github.io/tech/git-merge-stories-6/",
  "Content": "\u003cdiv class=\"page__inner-wrap\"\u003e\n      \n\n      \u003csection class=\"page__content e-content\" itemprop=\"text\"\u003e\n        \n          \u003caside class=\"sidebar__right sticky\"\u003e\n            \u003cnav class=\"toc\"\u003e\n              \u003cheader\u003e\u003ch4 class=\"nav__title\"\u003e\u003ci class=\"fas fa-file-alt\"\u003e\u003c/i\u003e 在本页上\u003c/h4\u003e\u003c/header\u003e\n              \u003cul class=\"toc__menu\"\u003e\u003cli\u003e\u003ca href=\"#什么是rebase\"\u003e什么是Rebase？\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#更多玩法\"\u003e更多玩法\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#何时使用\"\u003e何时使用\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\n\n            \u003c/nav\u003e\n          \u003c/aside\u003e\n        \n        \u003cblockquote\u003e\n  \u003cp\u003e多人开发中的合并冲突是我们使用Git时常常会遇到的情况，小小合并门道大，讲述合并的那些事儿，晴耕 · 白话之“Git合并那些事”系列​持续连载中……\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e注：\n本文的部分写作灵感来自于\u003ca href=\"https://git-scm.com/book/en/v2\"\u003e“Pro Git book”\u003c/a\u003e。感谢原作者的精彩分享。\n本文采用\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e知识共享署名-相同方式共享 4.0 国际许可协议\u003c/a\u003e进行许可。\u003ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"\u003e\u003cimg alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/80x15.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/rebase.png\" alt=\"\" class=\"align-center\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"什么是rebase\"\u003e什么是Rebase？\u003c/h2\u003e\n\n\u003cp\u003e在Git里，要想把一个分支上的改动合并到另一个分支上，通常有两种做法：一种是Merge，另一种是Rebase。\u003c/p\u003e\n\n\u003cp\u003e其中，Merge是分支合并时比较直观的一种方式。它的基本思路是：在参与合并的两个分支上找到各自的最新提交，以及这两个分支的公共祖先，对这三个提交进行“三方合并”（Three-Way-Merge）。然后，根据合并后的结果生成新的提交，而两个分支上的提交则会成为新建提交的parent。有关Merge的更多内容，可以从\u003ca href=\"/tech/git-merge-stories-1/\"\u003eGit合并那些事儿——认识几种Merge方法\u003c/a\u003e一文中找到。\u003c/p\u003e\n\n\u003cp\u003e而Rebase，乍一看则不是那么容易理解。简单地说，Rebase就是把一个分支上的所有提交，在另一个分支上按照同样的顺序重新“回放”（replay）一遍。下面我们用一个具体的例子来体会一下。\u003c/p\u003e\n\n\u003cp\u003e首先，我们新建一个本地Git库，叫做test-rebase：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit init test-rebase\nInitialized empty Git repository \u003cspan class=\"k\"\u003ein\u003c/span\u003e /root/test-rebase/.git/\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003etest-rebase/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在master分支上新建README文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nThe magic rebase\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e When to use?\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并建立提交记录c0：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c0\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster \u003cspan class=\"o\"\u003e(\u003c/span\u003eroot-commit\u003cspan class=\"o\"\u003e)\u003c/span\u003e f14301e] c0\n 1 file changed, 2 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后创建分支dev：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch dev\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并继续在master分支上修改README文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nThe magic rebase\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e What is it?\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e When to use?\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e建立提交记录c1：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c1\n\u003cspan class=\"o\"\u003e[\u003c/span\u003emaster 8b8ca49] c1\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后再切换到dev分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout dev\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;dev\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e在dev分支上接着修改README文件：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003evi README\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat \u003c/span\u003eREADME\nThe magic rebase\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e When to use?\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e More use\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并建立提交记录c2：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e c2\n\u003cspan class=\"o\"\u003e[\u003c/span\u003edev 6528967] c2\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候的提交记录是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 6528967 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 8b8ca49 \u003cspan class=\"o\"\u003e(\u003c/span\u003emaster\u003cspan class=\"o\"\u003e)\u003c/span\u003e c1\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-19.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e现在，我们在dev分支上执行rebase：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase master\nFirst, rewinding \u003cspan class=\"nb\"\u003ehead \u003c/span\u003eto replay your work on top of it...\nApplying: c2\nUsing index info to reconstruct a base tree...\nM\tREADME\nFalling back to patching base and 3-way merge...\nAuto-merging README\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eGit在执行rebase的过程中，首先会找到dev分支和master分支各自的最新提交c1和c2；然后从c1和c2开始向前回溯，找到它们在提交历史上的“共同祖先”c0；把dev分支上从c0往后的每个提交记录和c0进行对比，并把对比结果存到临时文件里；然后重置dev分支的提交历史，使它和master分支的提交历史保持一致，即：原本只出现在master分支上的提交记录c1，现在也出现在了dev分支上；在这个基础上，然后再逐一追加只在dev分支上出现的提交记录，比如：c2，整个过程才算结束。我们来看一下提交历史：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 32abc1c \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 8b8ca49 \u003cspan class=\"o\"\u003e(\u003c/span\u003emaster\u003cspan class=\"o\"\u003e)\u003c/span\u003e c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e如图所示，原本的“分叉”被“拉直”了。由于c1现在也出现在dev分支上，并且成了c2的parent，这就好像我们为c2重新设立了“起点”：c2原来是从c0出发后到达的，现在变成从c1出发后到达了。Rebase的本意就是重新设立起点的意思。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-20.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e这里还有一点要注意，如果我们仔细观察提交记录c2，会发现它的唯一键（SHA-1值）在Rebase前后发生了改变，从\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e6528967\u003c/code\u003e变到了\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e32abc1c\u003c/code\u003e。虽然都叫c2，对应的快照也一摸一样，但是它们的确是两个不同的提交记录。\u003c/p\u003e\n\n\u003cp\u003e现在，让我们回到master分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e把dev分支合并到master：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge dev\nUpdating 8b8ca49..32abc1c\nFast-forward\n README | 1 +\n 1 file changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e因为不存在分叉，所以Git可以采用Fast-Forward方式进行合并，效率非常高。关于Fast-Forward Merge，同学们可以从\u003ca href=\"/tech/git-merge-stories-1/\"\u003eGit合并那些事儿——认识几种Merge方法\u003c/a\u003e一文中找到更多解释。\u003c/p\u003e\n\n\u003cp\u003e最终的提交历史是这个样子的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 32abc1c \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master, dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 8b8ca49 c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-21.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e利用Rebase得到的提交记录c2所指向的快照，和利用Merge得到的快照，在内容上是完全一样的。所以，从最终结果来看两者并没有什么差别。但是，Rebase让提交历史变得更加干净了。它把原来分叉了的提交历史进行了“线性化”处理（称为线性历史，linear history）。就好像所有工作都是线性挨个儿进行的，从来都没有分过叉。\u003c/p\u003e\n\n\u003ch2 id=\"更多玩法\"\u003e更多玩法\u003c/h2\u003e\n\n\u003cp\u003e关于Rebase的使用，还有更多玩法，这里我们就来举一个例子。接着上面的实验环境，让我们回退到分叉的状态，也就是Rebase之前的状态：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 55642be \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c1\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0bd4f42 \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c2\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e并切换到dev分支：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout dev\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;dev\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候，我们决定从dev分支新建另一个分支出来，叫：bug-fix，专门用于修复bug：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch bug-fix\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e然后继续在dev分支上工作，并创建了新的提交记录c3：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch\u003c/span\u003e .gitignore\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add .gitignore\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c3\n\u003cspan class=\"o\"\u003e[\u003c/span\u003edev ae216dc] c3\n 1 file changed, 0 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 0 deletions\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 .gitignore\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e而且，我们同时还在bug-fix分支上工作，并创建了新的提交记录c4：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout bug-fix\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;bug-fix\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003eVERSION\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit add VERSION \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e c4\n\u003cspan class=\"o\"\u003e[\u003c/span\u003ebug-fix 0cfd41c] c4\n 1 file changed, 0 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 0 deletions\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 VERSION\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e目前的提交历史是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 0cfd41c \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; bug-fix\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e ae216dc \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c3\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 0bd4f42 c2\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 55642be \u003cspan class=\"o\"\u003e(\u003c/span\u003emaster\u003cspan class=\"o\"\u003e)\u003c/span\u003e c1\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-22.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e现在，假设我们想把bug-fix分支上的修改合并到master分支，但是又不希望把dev分支上的修改带到master分支上。也就是说，我们只想把bug-fix分支上的c4合并到master上；而至于c2，虽然它也在bug-fix分支上，但它同时还属于dev分支，仍然在开发当中，所以不希望被合并到master上。为了达到这个效果，我们可以利用\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit rebase\u003c/code\u003e命令，结合\u003ccode class=\"language-plaintext highlighter-rouge\"\u003e--onto\u003c/code\u003e参数：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase \u003cspan class=\"nt\"\u003e--onto\u003c/span\u003e master dev bug-fix\nFirst, rewinding \u003cspan class=\"nb\"\u003ehead \u003c/span\u003eto replay your work on top of it...\nApplying: c4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这行命令的意思是，告诉Git：找到bug-fix分支和dev分支的共同祖先c2；在bug-fix分支上找到从c2开始往后的所有提交记录，即：c4；然后在master分支上重新“回放”这些提交记录，就好像是直接在master分支上工作的那样。相当于把c4的“起点”从原来的c2重新设置成了c1。\u003c/p\u003e\n\n\u003cp\u003e然后，我们再切换回master分支，执行一次Fast-Forward Merge，就可以把bug-fix分支上的变更合并到master上了。\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge bug-fix\nUpdating 55642be..c284ee9\nFast-forward\n VERSION | 0\n 1 file changed, 0 insertions\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e, 0 deletions\u003cspan class=\"o\"\u003e(\u003c/span\u003e-\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 VERSION\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最终的提交历史是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e c284ee9 \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; bug-fix, master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 55642be c1\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e ae216dc \u003cspan class=\"o\"\u003e(\u003c/span\u003edev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c3\n| \u003cspan class=\"k\"\u003e*\u003c/span\u003e 0bd4f42 c2\n|/  \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-23.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e假设现在我们要把dev分支上的变更也合并到master上了，同样利用Rebase。前面我们执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit rebase\u003c/code\u003e命令时，需要先切换到dev分支，等执行完Rebase以后还要再回到master分支，然后进行最后的合并。实际上，可以不用这么麻烦，只要我们按照下面的语法执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit rebase\u003c/code\u003e命令就行：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003egit rebase \u0026lt;basebranch\u0026gt; \u0026lt;topicbranch\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e其中，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebasebranch\u003c/code\u003e就是作为基准的那个分支，而\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etopicbranch\u003c/code\u003e则是被合并的那个分支。在我们的例子里，\u003ccode class=\"language-plaintext highlighter-rouge\"\u003ebasebranch\u003c/code\u003e就是master，而\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etopicbranch\u003c/code\u003e则是dev。如果\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etopicbranch\u003c/code\u003e没有提供，也就是我们前面执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit rebase\u003c/code\u003e时所使用的那种格式，那么Git会把当前所在分支作为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etopicbranch\u003c/code\u003e。这也就是为什么我们之前要先切换到被合并分支的原因。现在，我们在master分支上执行\u003ccode class=\"language-plaintext highlighter-rouge\"\u003egit rebase\u003c/code\u003e，并指定dev分支为\u003ccode class=\"language-plaintext highlighter-rouge\"\u003etopicbranch\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit rebase master dev\nFirst, rewinding \u003cspan class=\"nb\"\u003ehead \u003c/span\u003eto replay your work on top of it...\nApplying: c2\nUsing index info to reconstruct a base tree...\nM\tREADME\nFalling back to patching base and 3-way merge...\nAuto-merging README\nApplying: c3\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这个时候的提交历史是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--all\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 2fbf3be \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c3\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 73bdd74 c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e c284ee9 \u003cspan class=\"o\"\u003e(\u003c/span\u003emaster, bug-fix\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 55642be c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后，我们再回到master分支，对dev分支进行合并：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit checkout master\nSwitched to branch \u003cspan class=\"s1\"\u003e\u0026#39;master\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit merge dev\nUpdating c284ee9..2fbf3be\nFast-forward\n .gitignore | 0\n README     | 1 +\n 2 files changed, 1 insertion\u003cspan class=\"o\"\u003e(\u003c/span\u003e+\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n create mode 100644 .gitignore\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e最后的提交历史是这样的：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003e 2fbf3be \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master, dev\u003cspan class=\"o\"\u003e)\u003c/span\u003e c3\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 73bdd74 c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e c284ee9 \u003cspan class=\"o\"\u003e(\u003c/span\u003ebug-fix\u003cspan class=\"o\"\u003e)\u003c/span\u003e c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 55642be c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e这实际上相当于把dev分支上的提交记录c2和c3在master分支上做了“回放”。\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/images/lab/git/merge-stories-24.png\" alt=\"\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e最后，等到所有开发都完成以后，我们把多余的分支dev和bug-fix删除掉：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e dev\nDeleted branch dev \u003cspan class=\"o\"\u003e(\u003c/span\u003ewas 2fbf3be\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit branch \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e bug-fix\nDeleted branch bug-fix \u003cspan class=\"o\"\u003e(\u003c/span\u003ewas c284ee9\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e再看整个提交历史，就变成一条非常干净的直线了：\u003c/p\u003e\n\u003cdiv class=\"language-shell highlighter-rouge\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit log \u003cspan class=\"nt\"\u003e--oneline\u003c/span\u003e \u003cspan class=\"nt\"\u003e--graph\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 2fbf3be \u003cspan class=\"o\"\u003e(\u003c/span\u003eHEAD -\u0026gt; master\u003cspan class=\"o\"\u003e)\u003c/span\u003e c3\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 73bdd74 c2\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e c284ee9 c4\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e 55642be c1\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e f14301e c0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2 id=\"何时使用\"\u003e何时使用\u003c/h2\u003e\n\n\u003cp\u003e关于Git的提交历史，有两种观点。\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e一种观点认为，它如实的记录了人们的实际操作，所以不应该被“篡改”；\u003c/li\u003e\n  \u003cli\u003e另一种观点认为，多人协作开发的时候，提交历史的作用是把项目如何演化的过程展示给其他人看，所以没必要把全部细节都暴露出来。比如，像一些很细微的修改记录，类似整个提交历史中的某些中间状态，这些提交记录是可以去掉的。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e后一种观点就是人们通常使用Rebase修改提交历史的原因或依据。\u003c/p\u003e\n\n\u003cp\u003e关于什么时候可以使用Rebase的问题，一般的建议是：\u003c/p\u003e\n\n\u003cp\u003e如果你还没有把提交推送到远程Git库，Rebase是没问题的。因为，所有改动，包括对提交历史的改动都只发生在本地，不会对别人造成影响。而且，那样做还有助于在把提交推送到远程之前，让提交历史变得更加清晰。这个在开源项目的开发里是很常见的。比如：假设你以Contributor的身份在为某个开源项目贡献代码。一般我们会从原项目那里fork一份出来形成自己的Git库，然后在自己的Git库上新开一个分支，在分支上进行开发。要提交修改的时候，先把修改Rebase到远程的origin/master上（自己的Git库），然后再以Pull Request的方式提交到原项目，让这个项目的Maintainer来Review。如果我们使用了Rebase，那么Maintainer在合并修改的时候就会很轻松，他不需要做任何复杂的集成，只要简单地做一个Fast-Forward Merge就可以了。\u003c/p\u003e\n\n\u003cp\u003e但是，如果你的改动已经被推送到了远程Git库，并且其他人已经开始在这个基础上继续他们的工作时，那就最好不要轻易做Rebase了。后面，我还会专门用一篇文章来说明，在那种情况下做Rebase会有什么后果。以及，当问题发生时我们应该怎么处理。\u003c/p\u003e\n\n        \n      \u003c/section\u003e\n\n      \u003cfooter class=\"page__meta\"\u003e\n        \n        \n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-tags\" aria-hidden=\"true\"\u003e\u003c/i\u003e 标签: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/tags/#dummies\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#dummies-git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003edummies_git\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#git\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003egit\u003c/a\u003e\u003cspan class=\"sep\"\u003e, \u003c/span\u003e\n    \n      \u003ca href=\"/tags/#lab\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003elab\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n\n\n  \n\n\n  \n\n  \u003cp class=\"page__taxonomy\"\u003e\n    \u003cstrong\u003e\u003ci class=\"fas fa-fw fa-folder-open\" aria-hidden=\"true\"\u003e\u003c/i\u003e 分类: \u003c/strong\u003e\n    \u003cspan itemprop=\"keywords\"\u003e\n    \n      \u003ca href=\"/categories/#tech\" class=\"page__taxonomy-item p-category\" rel=\"tag\"\u003etech\u003c/a\u003e\n    \n    \u003c/span\u003e\n  \u003c/p\u003e\n\n\n        \n\n  \u003cp class=\"page__date\"\u003e\u003cstrong\u003e\u003ci class=\"fas fa-fw fa-calendar-alt\" aria-hidden=\"true\"\u003e\u003c/i\u003e 更新时间:\u003c/strong\u003e \u003ctime class=\"dt-published\" datetime=\"2019-11-02T00:00:00+08:00\"\u003eNovember 2, 2019\u003c/time\u003e\u003c/p\u003e\n\n      \u003c/footer\u003e\n\n      \u003csection class=\"page__share\"\u003e\n  \n    \u003ch4 class=\"page__share-title\"\u003e分享\u003c/h4\u003e\n  \n\n  \u003ca href=\"https://twitter.com/intent/tweet?text=Git%E5%90%88%E5%B9%B6%E9%82%A3%E4%BA%9B%E4%BA%8B%E2%80%94%E2%80%94%E7%A5%9E%E5%A5%87%E7%9A%84Rebase%20https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-6%2F\" class=\"btn btn--twitter\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Twitter\"\u003e\u003ci class=\"fab fa-fw fa-twitter\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Twitter\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-6%2F\" class=\"btn btn--facebook\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 Facebook\"\u003e\u003ci class=\"fab fa-fw fa-facebook\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e Facebook\u003c/span\u003e\u003c/a\u003e\n\n  \u003ca href=\"https://www.linkedin.com/shareArticle?mini=true\u0026amp;url=https%3A%2F%2Fmorningspace.github.io%2Ftech%2Fgit-merge-stories-6%2F\" class=\"btn btn--linkedin\" onclick=\"window.open(this.href, \u0026#39;window\u0026#39;, \u0026#39;left=20,top=20,width=500,height=500,toolbar=1,resizable=0\u0026#39;); return false;\" title=\"分享 LinkedIn\"\u003e\u003ci class=\"fab fa-fw fa-linkedin\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003cspan\u003e LinkedIn\u003c/span\u003e\u003c/a\u003e\n\u003c/section\u003e\n\n\n      \n  \u003cnav class=\"pagination\"\u003e\n    \n      \u003ca href=\"/tech/openshift-v3-trap-and-pitfalls/\" class=\"pagination--pager\" title=\"OpenShift v3的填坑之旅\n\"\u003e向前\u003c/a\u003e\n    \n    \n      \u003ca href=\"/tech/git-merge-stories-7/\" class=\"pagination--pager\" title=\"Git合并那些事——交互式Rebase\n\"\u003e向后\u003c/a\u003e\n    \n  \u003c/nav\u003e\n\n    \u003c/div\u003e",
  "Date": "2019-11-02T00:00:00+08:00",
  "Author": "MornigSpace"
}