{
  "Source": "qiwsir.github.io",
  "Title": "让Python程序轻松加速的方法",
  "Link": "https://qiwsir.github.io/2020/02/05/speed-python/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e让Python程序轻松加速的方法\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-02-05\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：Cameron MacLeod \u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e最近，我读了一篇有趣的文章，文中介绍了一些未充分使用的Python特性的。在文章中，作者提到，从Python 3.2开始，标准库附带了一个内置的装饰器\u003ccode\u003efunctools.lru_cache\u003c/code\u003e。我发现这个装饰器很令人兴奋，有了它，我们有可能轻松地为许多应用程序加速。\u003c/p\u003e\n\u003cp\u003e你可能在想，这很好，但这个装饰器究竟是什么？它提供对已构建的缓存的访问，该缓存使用LRU（\u003cstrong\u003e译者注：\u003c/strong\u003e Least Recently Used的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。）的置换策略，因此被命名为\u003ccode\u003elru_cache\u003c/code\u003e。当然，这句话听起来可能有点令人胆怯，所以让我们把它分解一下。\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/my_book4_20200116132005.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch2 id=\"什么是缓存？\"\u003e\u003ca href=\"#什么是缓存？\" class=\"headerlink\" title=\"什么是缓存？\"\u003e\u003c/a\u003e什么是缓存？\u003c/h2\u003e\u003cp\u003e缓存是一个可以快速访问的地方，可以在它里面存储访问速度较慢的内容。为了演示这一点，让我们以你的web浏览器为例。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/browser_cache_20200204105130.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e从网络上读取网页可能需要几秒钟，即使是快速的网络连接也如此。在计算机时代，这个问题是永恒的。为了解决这个问题，浏览器将你已经访问过的网页存储在计算机的缓存中，这样访问速度会加快数千倍。\u003c/p\u003e\n\u003cp\u003e使用缓存下载网页的步骤如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e检查页面的本地缓存。如果页面在那里，返回该页面。\u003c/li\u003e\n\u003cli\u003e在因网上找到网页并从那里下载。\u003c/li\u003e\n\u003cli\u003e将该网页存储在缓存中，以便将来更快地访问。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e虽然缓存并不会让你第一次访问网页的速度加快，但通常你是要屡次访问某一个网站页面的（想想Facebook——\u003cstrong\u003e注：对多数国人来讲，可能不是这个网站\u003c/strong\u003e，或者你的电子邮件），有了缓存之后，以后每次访问都会更快。\u003c/p\u003e\n\u003cp\u003e浏览器并不是唯一使用缓存的，从服务器到CPU和硬盘或SSD之间的计算机硬件，它们无处不在。从缓存中可以很快地获取数据，因此当你不止一次获取数据时，它可以大大加快程序的速度。\u003c/p\u003e\n\u003ch2 id=\"LRU是什么意思？\"\u003e\u003ca href=\"#LRU是什么意思？\" class=\"headerlink\" title=\"LRU是什么意思？\"\u003e\u003c/a\u003eLRU是什么意思？\u003c/h2\u003e\u003cp\u003e缓存只能存储有限数量的东西，而且通常它比可能存入所缓存的东西要小得多（例如，你的硬盘比互联网小得多）。这意味着有时需要将缓存中已有内容替换掉，放入其他内容。对于去掉什么的决策方法被称为置换策略。\u003c/p\u003e\n\u003cp\u003e这就是LRU的用武之地。LRU代表最近用得最少的缓存中内容，这是一种常用的缓存置换策略。\u003c/p\u003e\n\u003cp\u003e为什么置换策略很重要？\u003c/p\u003e\n\u003cp\u003e“最近使用最少”这种置换策略的基本思想是：如果你有一段时间没有访问过某个东西，你可能近期不会访问它。要使用此策略，只需在缓存已满时删除最早使用的项即可。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/lru_20200204105245.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e在上图中，缓存中的每个项都附带了访问时间。依据LRU策略，选择访问时间为2:55PM 的项作为要置换的项，因为它是最早被访问的。如果有两个对象具有相同的访问时间，那么LRU将从中随机选择一个。\u003c/p\u003e\n\u003cp\u003e这种去掉长时间不用的东西的策略，被称为Bélády的最优算法，它是置换缓存内容的最佳策略。当然，我们根本不知道未来会有什么操作。谢天谢地，在许多情况下，LRU提供了近乎最佳的性能。\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8_20200122130623.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch2 id=\"怎样使用它？\"\u003e\u003ca href=\"#怎样使用它？\" class=\"headerlink\" title=\"怎样使用它？\"\u003e\u003c/a\u003e怎样使用它？\u003c/h2\u003e\u003cp\u003e\u003ccode\u003efunctools.lru_cache\u003c/code\u003e是一个装饰器，因此你可以将它放在函数的顶部：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport functools\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e@functools.lru_cache(maxsize=128)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef fib(n):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  if n \u0026lt; 2:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  return fib(n-1) + fib(n-2)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eFibonacci数列在递归示例中经常被用到，要提升这个函数的速度，使用\u003ccode\u003efunctools.lru_cache\u003c/code\u003e之后，不费吹灰之力，就能让这个递归函数狂飙。在我的机器上运行这些代码，得到了这个函数有缓存版本和没有缓存版本的以下结果。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ python3 -m timeit -s \u0026#39;from fib_test import fib\u0026#39; \u0026#39;fib(30)\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 loops, best of 3: 282 msec per loop\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ python3 -m timeit -s \u0026#39;from fib_test import fib_cache\u0026#39; \u0026#39;fib_cache(30)\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10000000 loops, best of 3: 0.0791 usec per loop\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e增加一行代码之后，速度提高了3565107倍。\u003c/p\u003e\n\u003cp\u003e当然，我认为很难看出你在实际中会如何使用它，因为我们很少需要计算斐波那契数列。回到web页面示例，我们可以举一个更实际的用缓存渲染前端模板的例子。\u003c/p\u003e\n\u003cp\u003e在服务器开发中，通常单个页面存储为具有占位符变量的模板。例如，下面是一个页面模板，该页面显示某一天各种足球比赛的结果。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026lt;body\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;h1\u0026gt;Matches for {{day}}\u0026lt;/h1\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;table id=\u0026#34;matches\u0026#34;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u0026lt;tr\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;td\u0026gt;Home team\u0026lt;/td\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;td\u0026gt;Away team\u0026lt;/td\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;td\u0026gt;Score\u0026lt;/td\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u0026lt;/tr\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      {% for match in matches %}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u0026lt;tr\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;td\u0026gt;{{match[\u0026#34;home\u0026#34;]}}\u0026lt;/td\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;td\u0026gt;{{match[\u0026#34;away\u0026#34;]}}\u0026lt;/td\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026lt;td\u0026gt;{{match[\u0026#34;home_goals\u0026#34;]}} - {{match[\u0026#34;away_goals\u0026#34;]}}\u0026lt;/td\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u0026lt;/tr\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      {% endfor %}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026lt;/table\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u0026lt;/body\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e呈现模板时，看起来如下所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/match_20200204105426.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这是缓存的主要目标，因为每天的结果不会改变，而且很可能每天会有多次访问。下面是一个提供此模板的Flask应用程序。我引入了50ms的延迟来模拟通过网络或者从大型数据库获取匹配字典。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport json\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom flask import Flask, render_template\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp = Flask(__name__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewith open(\u0026#39;match.json\u0026#39;,\u0026#39;r\u0026#39;) as f:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    match_dict = json.load(f)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_matches(day):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # simulate network/database delay\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    time.sleep(0.05)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return match_dict[day]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e@app.route(\u0026#39;/matches/\u0026lt;day\u0026gt;\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef show_matches(day):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    matches = get_matches(day)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return render_template(\u0026#39;matches.html\u0026#39;, matches=matches, day=day)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    app.run()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e使用\u003ccode\u003erequests\u003c/code\u003e在不缓存的情况下获得三天的数据，在我的计算机上本地运行平均需要171ms。这还不错，但我们可以做得更好，即使考虑到人为的延迟。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e@app.route(\u0026#39;/matches/\u0026lt;day\u0026gt;\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e@functools.lru_cache(maxsize=4)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef show_matches(day):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    matches = get_matches(day)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return render_template(\u0026#39;matches.html\u0026#39;, matches=matches, day=day)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在本例中，我设置了\u003ccode\u003emaxsize=4\u003c/code\u003e，因为我的测试脚本只有相同的三天，最好设置2次幂。使用这种方法，10个循环的平均速度可以降到13.7ms。\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/Django2%E7%AB%8B%E4%BD%93%E5%9B%BE_20200117164816.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch2 id=\"还有什么应该知道？\"\u003e\u003ca href=\"#还有什么应该知道？\" class=\"headerlink\" title=\"还有什么应该知道？\"\u003e\u003c/a\u003e还有什么应该知道？\u003c/h2\u003e\u003cp\u003ePython文档虽然很详细，但是有一些东西还是要强调的。\u003c/p\u003e\n\u003ch3 id=\"内置函数\"\u003e\u003ca href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"\u003e\u003c/a\u003e内置函数\u003c/h3\u003e\u003cp\u003e装饰器附带了一些很有用的内置函数。\u003ccode\u003ecache_info()\u003c/code\u003e返回访问数（hits）、未访问数（misses）和当前缓存使用量（currsize）、最大容量（maxsize），帮助你了解缓存使用情况。\u003ccode\u003ecache_clear()\u003c/code\u003e将删除缓存中的所有元素。\u003c/p\u003e\n\u003ch3 id=\"有时候不要使用缓存\"\u003e\u003ca href=\"#有时候不要使用缓存\" class=\"headerlink\" title=\"有时候不要使用缓存\"\u003e\u003c/a\u003e有时候不要使用缓存\u003c/h3\u003e\u003cp\u003e通常，只有在以下情况下才能使用缓存：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在缓存期内，数据不会更改。\u003c/li\u003e\n\u003cli\u003e函数将始终为相同的参数返回相同的值（因此时间和随机对缓存没有意义）。\u003c/li\u003e\n\u003cli\u003e函数没有副作用。如果缓存被访问，则永远不会调用该函数，因此请确保不更改其中的任何状态。\u003c/li\u003e\n\u003cli\u003e函数不返回不同的可变对象。例如，返回列表的函数不适合缓存，因为将要缓存的是对列表的引用，而不是列表内容。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://www.cameronmacleod.com/blog/python-lru-cache\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.cameronmacleod.com/blog/python-lru-cache\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关注微信公众号：老齐教室。读深度文章，得精湛技艺，享绚丽人生。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#Python LRU 缓存\"\u003e\n    \u003cspan class=\"tag-code\"\u003ePython LRU 缓存\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/02/04/quicksort/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          通俗易懂讲算法：快速排序\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/02/08/%E7%90%86%E8%A7%A3%E5%BE%AE%E7%A7%AF%E5%88%86/\"\u003e\n        \n          理解微积分概念，必不可少\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-02-05T00:00:00Z",
  "Author": "老齐教室"
}