{
  "Source": "qiwsir.github.io",
  "Title": "剖析Web技术栈（四）",
  "Link": "https://qiwsir.github.io/2020/05/02/web-stack-forth/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e剖析Web技术栈（四）\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-05-02\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：Leonardo Giordani\u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e与本文相关书籍推荐：《跟老齐学Python：Django实战》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/Django2%E7%AB%8B%E4%BD%93%E5%9B%BE_20200117164816.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"4-Web-server\"\u003e\u003ca href=\"#4-Web-server\" class=\"headerlink\" title=\"4 Web server\"\u003e\u003c/a\u003e4 Web server\u003c/h2\u003e\u003ch3 id=\"4-1-基本原理\"\u003e\u003ca href=\"#4-1-基本原理\" class=\"headerlink\" title=\"4.1 基本原理\"\u003e\u003c/a\u003e4.1 基本原理\u003c/h3\u003e\u003cp\u003e我们给Web server的一般标签是：用于执行任务的软件，nginx和Apache是两个常用的web server，这两个开源项目目前在市场上处于领先地位，它们使用不同的技术方法，都实现了我们在上一节中讨论的所有特性（以及更多特性）。\u003c/p\u003e\n\u003ch3 id=\"4-2-实施\"\u003e\u003ca href=\"#4-2-实施\" class=\"headerlink\" title=\"4.2 实施\"\u003e\u003c/a\u003e4.2 实施\u003c/h3\u003e\u003cp\u003e为了测试nginx，又要避免与操作系统中其他软件包冲突，我们可以使用Docker。Docker对于模拟多机环境很有用，对于实际的生产环境，也能选择Docker（例如，AWS ECS与Docker容器配合使用）。\u003c/p\u003e\n\u003cp\u003e即将运行的基本配置非常简单，一个容器将包含Flask代码并使用Gunicorn运行框架，而另一个容器将运行nginx。Gunicorn将在内部端口8000上提供HTTP，这个端口不会被Docker公开，因此无法从浏览器访问。但是nignx将公开端口80，这是传统的HTTP端口。\u003c/p\u003e\n\u003cp\u003e在文件\u003ccode\u003ewsgi.py\u003c/code\u003e的同一目录中，创建一个\u003ccode\u003eDockerfile\u003c/code\u003e\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFROM python:3.6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eADD app /app\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eADD wsgi.py /\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWORKDIR .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRUN pip install flask gunicorn\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eEXPOSE 8000\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从Python Docker开始，添加\u003ccode\u003eapp\u003c/code\u003e目录和\u003ccode\u003ewsgi.py\u003c/code\u003e文件，并安装Gunicorn，然后在同一目录中名为\u003ccode\u003enginx.conf\u003c/code\u003e的文件中为nginx创建一个配置\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eserver {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    listen 80;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    server_name localhost;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    location / {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        proxy_pass http://application:8000/;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样就定义了一个服务器，它监听端口80，并将以\u003ccode\u003e/\u003c/code\u003e开头的所有URL连接到端口8000上名为\u003ccode\u003eapplication\u003c/code\u003e的服务器，该服务器是运行Gunicorn的容器。\u003c/p\u003e\n\u003cp\u003e最后，创建一个描述容器配置的文件\u003ccode\u003edocker compose.yml\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eversion: \u0026#34;3.7\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eservices:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  application:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    build:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      context: .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      dockerfile: Dockerfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    command: gunicorn --workers 3 --bind 0.0.0.0:8000 wsgi\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    expose:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        - 8000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  nginx:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    image: nginx\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    volumes:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     - ./nginx.conf:/etc/nginx/conf.d/default.conf\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ports:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      - 8080:80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    depends_on:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      - application\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如你所见，我们在nginx配置文件中提到的名称\u003ccode\u003eapplication\u003c/code\u003e不是一个魔法字符串，而是我们在Docker Compose配置中分配给Gunicorn容器的名称。\u003c/p\u003e\n\u003cp\u003e要创建这个基础设施，我们需要通过\u003ccode\u003epip install Docker Compose\u003c/code\u003e在我们的虚拟环境中安装Docker Compose。我还用项目名创建了一个名为\u003ccode\u003e.env\u003c/code\u003e的文件。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eCOMPOSE_PROJECT_NAME=service\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此时，你可以使用\u003ccode\u003eDocker Compose up -d\u003c/code\u003e运行Docker Compose。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose up -d\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating network \u0026#34;service_default\u0026#34; with the default driver\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating service_application_1 ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating service_nginx_1       ... done\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果一切正常，打开浏览器并访问\u003ccode\u003elocalhost\u003c/code\u003e应该会显示Flask提供的HTML页面。\u003c/p\u003e\n\u003cp\u003e通过\u003ccode\u003edocker compose\u003c/code\u003e日志，我们可以检查服务正在做什么。我们可以在名为\u003ccode\u003eapplication\u003c/code\u003e的服务日志中识别Gunicorn的输出。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose logs application\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to service_application_1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication_1  | [2020-02-14 08:35:42 +0000] [1] [INFO] Starting gunicorn 20.0.4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication_1  | [2020-02-14 08:35:42 +0000] [1] [INFO] Listening at: http://0.0.0.0:8000 (1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication_1  | [2020-02-14 08:35:42 +0000] [1] [INFO] Using worker: sync\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication_1  | [2020-02-14 08:35:42 +0000] [8] [INFO] Booting worker with pid: 8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication_1  | [2020-02-14 08:35:42 +0000] [9] [INFO] Booting worker with pid: 9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication_1  | [2020-02-14 08:35:42 +0000] [10] [INFO] Booting worker with pid: 10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在我们最感兴趣的是名为\u003ccode\u003enginx\u003c/code\u003e的服务，所以我们使用\u003ccode\u003edocker compose logs -f nginx\u003c/code\u003e实时跟踪日志。刷新你用浏览器访问的\u003ccode\u003elocalhost\u003c/code\u003e页面，容器应该输出如下内容：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose logs -f nginx\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to service_nginx_1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | 192.168.192.1 - - [14/Feb/2020:08:42:20 +0000] \u0026#34;GET / HTTP/1.1\u0026#34; 200 13 \u0026#34;-\u0026#34; \u0026#34;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0\u0026#34; \u0026#34;-\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是nginx的标准日志格式。它显示客户机的IP地址（\u003ccode\u003e192.168.192.1\u003c/code\u003e）、连接时间戳、HTTP请求和响应状态代码（200），以及客户端的其他信息。\u003c/p\u003e\n\u003cp\u003e现在让我们增加服务的数量，以查看负载平衡机制的作用。为此，我们首先需要更改nginx的日志格式，以显示对请求做出响应的机器的IP地址。更改“nginx.conf”文件，添加 \u003ccode\u003elog_format\u003c/code\u003e 和 \u003ccode\u003eaccess_log\u003c/code\u003e选项。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003elog_format upstreamlog \u0026#39;[$time_local] $host to: $upstream_addr: $request $status\u0026#39;;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eserver {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    listen 80;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    server_name localhost;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    location / {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        proxy_pass http://application:8000;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    access_log /var/log/nginx/access.log upstreamlog;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e变量\u003ccode\u003e$upstream_addr\u003c/code\u003e是nginx代理的服务器的IP地址。现在运行\u003ccode\u003edocker compose down\u003c/code\u003e停止所有容器，然后通过\u003ccode\u003edocker compose up -d --scale application=3\u003c/code\u003e重新启动。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose down\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eStopping service_nginx_1       ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eStopping service_application_1 ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRemoving service_nginx_1       ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRemoving service_application_1 ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRemoving network service_default\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ docker-compose up -d --scale application=3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating network \u0026#34;service_default\u0026#34; with the default driver\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating service_application_1 ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating service_application_2 ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating service_application_3 ... done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCreating service_nginx_1       ... done\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如你所见，Docker Compose为\u003ccode\u003eapplication\u003c/code\u003e启动了3个容器，如果你打开日期，可以看到如下内容。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose logs -f nginx\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to service_nginx_1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | [14/Feb/2020:09:00:16 +0000] localhost to: 192.168.240.4:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e你可以在这里找到\u003ccode\u003eto:192.168.240.4:8000\u003c/code\u003e，这是其中一个应用所在容器的IP地址。如果你现在多次访问该页面，应该会注意到上游地址的更改，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose logs -f nginx\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to service_nginx_1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | [14/Feb/2020:09:00:16 +0000] localhost to: 192.168.240.4:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | [14/Feb/2020:09:00:17 +0000] localhost to: 192.168.240.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | [14/Feb/2020:09:00:17 +0000] localhost to: 192.168.240.3:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | [14/Feb/2020:09:00:17 +0000] localhost to: 192.168.240.4:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1        | [14/Feb/2020:09:00:17 +0000] localhost to: 192.168.240.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这表明nginx正在执行负载平衡，但说实话，这是通过Docker的DNS进行的，而不是通过web服务器执行的显式操作。我们可以通过访问nginx容器并运行\u003ccode\u003edig application\u003c/code\u003e来验证这一点（你需要运行\u003ccode\u003eapt update\u003c/code\u003e和\u003ccode\u003eapt install dnsutils\u003c/code\u003e来安装\u003ccode\u003edig\u003c/code\u003e）。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eroot@99c2f348140e:/# dig application\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.11.5-P4-5.1-Debian \u0026lt;\u0026lt;\u0026gt;\u0026gt; application\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; global options: +cmd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; Got answer:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 7221\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; QUESTION SECTION:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;application.                   IN      A\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; ANSWER SECTION:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication.            600     IN      A       192.168.240.2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication.            600     IN      A       192.168.240.4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapplication.            600     IN      A       192.168.240.3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; Query time: 1 msec\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; SERVER: 127.0.0.11#53(127.0.0.11)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; WHEN: Fri Feb 14 09:57:24 UTC 2020\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e;; MSG SIZE  rcvd: 110\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e要查看nginx执行的负载平衡，我们可以显式地定义两个服务并为它们分配不同的权重。运行\u003ccode\u003edocker compose down\u003c/code\u003e并将nginx配置更改为：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eupstream app {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    server application1:8000 weight=3;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    server application2:8000;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elog_format upstreamlog \u0026#39;[$time_local] $host to: $upstream_addr: $request $status\u0026#39;;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eserver {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    listen 80;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    server_name localhost;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    location / {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        proxy_pass http://app;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    access_log /var/log/nginx/access.log upstreamlog;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们在这里定义了一个\u003ccode\u003eupstream\u003c/code\u003e结构。它列出了两种不同的服务：\u003ccode\u003eapplication1\u003c/code\u003e和\u003ccode\u003eapplication2\u003c/code\u003e。其中第一种服务的权重为3。这意味着：每4个请求中，有3个请求将被路由到第一种服务，1个被路由到第二种服务。现在nginx不仅仅依赖于DNS，而是有意识地在两种不同的服务之间进行选择。\u003c/p\u003e\n\u003cp\u003e我们在Docker Compose配置文件中相应地定义服务。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eversion: \u0026#34;3\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eservices:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  application1:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    build:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      context: .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      dockerfile: Dockerfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    command: gunicorn --workers 6 --bind 0.0.0.0:8000 wsgi\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    expose:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        - 8000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  application2:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    build:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      context: .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      dockerfile: Dockerfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    command: gunicorn --workers 3 --bind 0.0.0.0:8000 wsgi\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    expose:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        - 8000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  nginx:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    image: nginx\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    volumes:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     - ./nginx.conf:/etc/nginx/conf.d/default.conf\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ports:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      - 80:80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    depends_on:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      - application1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      - application2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我基本上重复了\u003ccode\u003eapplication\u003c/code\u003e的定义，但是第一种服务现在运行6个工作线，只是为了显示两者之间可能的区别。现在运行\u003ccode\u003edocker-compose up -d\u003c/code\u003e 和 \u003ccode\u003edocker-compose logs -f nginx\u003c/code\u003e。如果多次刷新浏览器上的页面，你将看到如下内容：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ docker-compose logs -f nginx\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAttaching to service_nginx_1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:25 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:25 +0000] localhost to: 172.18.0.2:8000: GET /favicon.ico HTTP/1.1 404\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:30 +0000] localhost to: 172.18.0.3:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:31 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:32 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:33 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:33 +0000] localhost to: 172.18.0.3:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:34 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:34 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:35 +0000] localhost to: 172.18.0.2:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003enginx_1         | [14/Feb/2020:11:03:35 +0000] localhost to: 172.18.0.3:8000: GET / HTTP/1.1 200\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e你可以清楚地看到\u003ccode\u003e172.18.0.2（application1）\u003c/code\u003e和\u003ccode\u003e172.18.0.3（application2）\u003c/code\u003e之间的负载平衡。\u003c/p\u003e\n\u003cp\u003e我不会在这里展示反向代理或HTTPS的例子，以免这篇文章过长，你可以在下一节中找到有关这类内容的资源。\u003c/p\u003e\n\u003ch3 id=\"4-3-参考资料\"\u003e\u003ca href=\"#4-3-参考资料\" class=\"headerlink\" title=\"4.3 参考资料\"\u003e\u003c/a\u003e4.3 参考资料\u003c/h3\u003e\u003cp\u003e这些资源提供了关于本节讨论的主题的更详细的信息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDocker Compose official documentation\u003c/li\u003e\n\u003cli\u003enginx documentation: in particular the sections about log_format and upstream directives\u003c/li\u003e\n\u003cli\u003eHow to configure logging in nginx\u003c/li\u003e\n\u003cli\u003eHow to configure load balancing in nginx\u003c/li\u003e\n\u003cli\u003eSetting up an HTTPS Server with nginx and how to created self-signed certificates\u003c/li\u003e\n\u003cli\u003eHow to create a reverse proxy with nginx, the documentation of the location directive and some insights on the location choosing algorithms (one of the most complex parts of nginx)\u003c/li\u003e\n\u003cli\u003eThe source code of this example is available here\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-4问题\"\u003e\u003ca href=\"#4-4问题\" class=\"headerlink\" title=\"4.4问题\"\u003e\u003c/a\u003e4.4问题\u003c/h3\u003e\u003cp\u003e现在，我们可以说任务完成了。我们在多线程Web框架前面加了一个用于生产的Web服务器，我们可以专注于编写Python代码，而不是处理HTTP头信息。\u003c/p\u003e\n\u003cp\u003e使用Web服务器允许我们扩展基础设施，只需在其后面添加新实例，而不会中断服务。HTTP并发服务器运行框架的多个实例，框架本身使HTTP抽象化，将其映射到我们的高级语言。\u003c/p\u003e\n\u003ch2 id=\"云基础设施\"\u003e\u003ca href=\"#云基础设施\" class=\"headerlink\" title=\"云基础设施\"\u003e\u003c/a\u003e云基础设施\u003c/h2\u003e\u003cp\u003e在互联网的早期，公司都要有自己的服务器，而系统管理员则直接在光秃秃的操作系统上运行所有东西，不用说，这是复杂、昂贵和容易失败的。\u003c/p\u003e\n\u003cp\u003e现在“云”是一个好东西，很多网站都部署到云上，而且也有很多组件供我们使用。\u003c/p\u003e\n\u003cp\u003e(完毕)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e阅读链接\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e剖析Web技术栈（一）\u003c/li\u003e\n\u003cli\u003e剖析Web技术栈（二）\u003c/li\u003e\n\u003cli\u003e剖析Web技术栈（三）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://www.thedigitalcatonline.com/blog/2020/02/16/dissecting-a-web-stack/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.thedigitalcatonline.com/blog/2020/02/16/dissecting-a-web-stack/\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e搜索技术问答的公众号：老齐教室\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在公众号中回复：\u003cstrong\u003e老齐\u003c/strong\u003e，可查看所有文章、书籍、课程。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/04/30/learn-python-with-laoqi/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          《跟老齐学Python：轻松入门》勘误和修订\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/05/03/sql-library-sqlite/\"\u003e\n        \n          Python中的SQL库：SQLite\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-05-02T00:00:00Z",
  "Author": "老齐教室"
}