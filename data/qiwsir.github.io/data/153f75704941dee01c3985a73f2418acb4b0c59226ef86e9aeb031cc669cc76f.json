{
  "Source": "qiwsir.github.io",
  "Title": "用 Python 压缩文件方法汇总",
  "Link": "https://qiwsir.github.io/2021/09/15/compressandarchivefile/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e用 Python 压缩文件方法汇总\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2021-09-15\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e对于流行的文件压缩格式，如 \u003ccode\u003etar\u003c/code\u003e 、\u003ccode\u003ezip\u003c/code\u003e 、\u003ccode\u003egzip\u003c/code\u003e 、\u003ccode\u003ebz2\u003c/code\u003e 等，乃至于更奇特的 \u003ccode\u003elzma\u003c/code\u003e 等格式，Python 都能轻易实现。本文将对有关压缩文件的问题给予阐述。\u003c/p\u003e\n\u003ch2 id=\"压缩格式以及相关模块\"\u003e\u003ca href=\"#压缩格式以及相关模块\" class=\"headerlink\" title=\"压缩格式以及相关模块\"\u003e\u003c/a\u003e压缩格式以及相关模块\u003c/h2\u003e\u003cp\u003ePython 提供了几乎为所有现有压缩文件的工具，下面逐一领略。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ezlib\u003c/code\u003e 是一个 Python 库，能够实现 \u003ccode\u003ezip\u003c/code\u003e 、\u003ccode\u003egzip\u003c/code\u003e 格式文件的压缩和解压缩。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ebz2\u003c/code\u003e 模块提供了对 \u003ccode\u003ebzip2\u003c/code\u003e 格式的压缩支持。它也只对单个文件起作用，因此不能归档。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003elzma\u003c/code\u003e 既是算法的名称，也是 Python 模块。它可以产生比一些旧方法更高的压缩比，并且是 \u003ccode\u003exz\u003c/code\u003e （更具体地说是 LZMA2 ）背后的算法。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003egzip\u003c/code\u003e 是大多数人都熟悉的应用，此外它也是一个 Python 模块的名称。此模块使用前面提到的 \u003ccode\u003ezlib\u003c/code\u003e 压缩算法，并充当类似于实用程序 \u003ccode\u003egzip\u003c/code\u003e 和 \u003ccode\u003egunzip\u003c/code\u003e的接口。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eshutils\u003c/code\u003e 是一个模块，我们通常不把该模块与压缩和解压缩联系在一起。但它提供了处理归档文件的实用方法，便于生成 \u003ccode\u003etar\u003c/code\u003e 、 \u003ccode\u003egztar\u003c/code\u003e 、 \u003ccode\u003ezip\u003c/code\u003e 、 \u003ccode\u003ebztar\u003c/code\u003e 或者 \u003ccode\u003exztar\u003c/code\u003e 这些类型的归档文件。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e顾名思义，\u003ccode\u003ezipfile\u003c/code\u003e 允许我们用 Python 中实现 zip 归档，提供了创建、读取、写入或追加 \u003ccode\u003ezip\u003c/code\u003e 文件所需的所有方法，还提供了便于操作这些文件的类和对象。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e和上面的 \u003ccode\u003ezipfile\u003c/code\u003e 类似， \u003ccode\u003etarfile\u003c/code\u003e 这个模块用于实现 \u003ccode\u003etar\u003c/code\u003e 归档，可以读取和写入 \u003ccode\u003egzip\u003c/code\u003e 、\u003ccode\u003ebz2\u003c/code\u003e 和 \u003ccode\u003elzma\u003c/code\u003e 文件或归档文件。 也支持与常规的 \u003ccode\u003etar\u003c/code\u003e 压缩软件能实现的其他功能。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"压缩与解压缩\"\u003e\u003ca href=\"#压缩与解压缩\" class=\"headerlink\" title=\"压缩与解压缩\"\u003e\u003c/a\u003e压缩与解压缩\u003c/h2\u003e\u003cp\u003e上面列出了很多选择，它们中有一些比较基本，有一些具有许多其他功能，但共同点显然是包含压缩功能。下面就来看看有关基本操作。\u003c/p\u003e\n\u003cp\u003e先看 \u003ccode\u003ezlib\u003c/code\u003e ，这是一个相当低级的库，因此可能不太常用，让我们来看看针对整个文件的压缩或解压缩方法。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e zlib, sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_in = \u003cspan class=\"string\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_out = \u003cspan class=\"string\"\u003e\u0026#34;compressed_data\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(filename_in, mode=\u003cspan class=\"string\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin, open(filename_out, mode=\u003cspan class=\"string\"\u003e\u0026#34;wb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fout:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = fin.read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    compressed_data = zlib.compress(data, zlib.Z_BEST_COMPRESSION)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Original size: \u003cspan class=\"subst\"\u003e{sys.getsizeof(data)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Original size: 1000033\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Compressed size: \u003cspan class=\"subst\"\u003e{sys.getsizeof(compressed_data)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Compressed size: 1024\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fout.write(compressed_data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(filename_out, mode=\u003cspan class=\"string\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = fin.read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    compressed_data = zlib.decompress(data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Compressed size: \u003cspan class=\"subst\"\u003e{sys.getsizeof(data)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Compressed size: 1024\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Decompressed size: \u003cspan class=\"subst\"\u003e{sys.getsizeof(compressed_data)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Decompressed size: 1000033\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的代码中所需要的输入文件，可以用 \u003ccode\u003ehead -c 1MB \u0026lt;/dev/zero \u0026gt; data\u003c/code\u003e 指令生成，此文件由零组成且大小为 1MB 。将文件读入内存滞后，用 \u003ccode\u003ezlib\u003c/code\u003e 中的  \u003ccode\u003ecompress\u003c/code\u003e 方法创建压缩数据。然后将该数据写入输出文件。\u003c/p\u003e\n\u003cp\u003e为了证明能够恢复数据——解压缩，再次打开上述生成的压缩文件并对其通过 \u003ccode\u003ezlibb\u003c/code\u003e 的 \u003ccode\u003edecompress\u003c/code\u003e 方法。通过 \u003ccode\u003eprint\u003c/code\u003e ，可以看到压缩和解压缩数据的大小都是匹配的。\u003c/p\u003e\n\u003cp\u003e下一个是 \u003ccode\u003ebz2\u003c/code\u003e ，它的使用方式与上面的 \u003ccode\u003ezlib\u003c/code\u003e 非常相似：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e bz2, os, sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_in = \u003cspan class=\"string\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_out = \u003cspan class=\"string\"\u003e\u0026#34;compressed_data.bz2\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(filename_in, mode=\u003cspan class=\"string\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin, bz2.open(filename_out, \u003cspan class=\"string\"\u003e\u0026#34;wb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fout:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fout.write(fin.read())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;Uncompressed size: \u003cspan class=\"subst\"\u003e{os.stat(filename_in).st_size}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Uncompressed size: 1000000\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;Compressed size: \u003cspan class=\"subst\"\u003e{os.stat(filename_out).st_size}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Compressed size: 48\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e bz2.open(filename_out, \u003cspan class=\"string\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = fin.read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Decompressed size: \u003cspan class=\"subst\"\u003e{sys.getsizeof(data)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Decompressed size: 1000033\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不出所料，使用方法大同小异。为了显示一些不同之处，在上面的示例中，我们简化了压缩步骤，将其减少到1行，并使用 \u003ccode\u003eos.stat\u003c/code\u003e来检查文件的大小。\u003c/p\u003e\n\u003cp\u003e这些低级模块中的最后一个是 \u003ccode\u003elzma\u003c/code\u003e ，为了避免反复显示相同的代码，这次执行增量压缩：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e lzma, os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elzc = lzma.LZMACompressor()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# cat /usr/share/dict/words | sort -R | head -c 1MB \u0026gt; data\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_in = \u003cspan class=\"string\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_out = \u003cspan class=\"string\"\u003e\u0026#34;compressed_data.xz\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(filename_in, mode=\u003cspan class=\"string\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin, open(filename_out, \u003cspan class=\"string\"\u003e\u0026#34;wb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fout:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e chunk \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e fin.read(\u003cspan class=\"number\"\u003e1024\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        compressed_chunk = lzc.compress(chunk.encode(\u003cspan class=\"string\"\u003e\u0026#34;ascii\u0026#34;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fout.write(compressed_chunk)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fout.write(lzc.flush())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;Uncompressed size: \u003cspan class=\"subst\"\u003e{os.stat(filename_in).st_size}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Uncompressed size: 972398\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;Compressed size: \u003cspan class=\"subst\"\u003e{os.stat(filename_out).st_size}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Compressed size: 736\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e lzma.open(filename_out, \u003cspan class=\"string\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    words = fin.read().decode(\u003cspan class=\"string\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e).split()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(words[:\u003cspan class=\"number\"\u003e5\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# [\u0026#39;dabbing\u0026#39;, \u0026#39;hauled\u0026#39;, \u0026#34;seediness\u0026#39;s\u0026#34;, \u0026#39;Iroquoian\u0026#39;, \u0026#39;vibe\u0026#39;]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e首先创建一个输入文件，文件中包含从字典中提取的一组单词，该字典在 \u003ccode\u003e/usr/share/dict/words\u003c/code\u003e 中，这样可以确认解压后的数据与原始数据相同。\u003c/p\u003e\n\u003cp\u003e然后，我们像前面的示例一样打开输入和输出文件。然而，这一次在 1024 位块中迭代随机数据，并使用 \u003ccode\u003eLZMACompressor.compress\u003c/code\u003e 方法压缩它们。然后将这些块写入输出文件。在读取和压缩整个文件之后，我们需要调用 \u003ccode\u003eflush\u003c/code\u003e ，以完成压缩过程、并从压缩器中清除任何剩余数据。\u003c/p\u003e\n\u003cp\u003e为了证实上述操作的有效性，我们以通常的方式打开并解压缩文件，并从文件中打印出几个单词。\u003c/p\u003e\n\u003cp\u003e下面要研究高级别的模块。现在使用 \u003ccode\u003egzip\u003c/code\u003e 执行相同的任务：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e os, sys, shutil, gzip\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_in = \u003cspan class=\"string\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename_out = \u003cspan class=\"string\"\u003e\u0026#34;compressed_data.tar.gz\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(filename_in, \u003cspan class=\"string\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin, gzip.open(filename_out, \u003cspan class=\"string\"\u003e\u0026#34;wb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fout:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Reads the file by chunks to avoid exhausting memory\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    shutil.copyfileobj(fin, fout)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;Uncompressed size: \u003cspan class=\"subst\"\u003e{os.stat(filename_in).st_size}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Uncompressed size: 1000000\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;Compressed size: \u003cspan class=\"subst\"\u003e{os.stat(filename_out).st_size}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Compressed size: 1023\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e gzip.open(filename_out, \u003cspan class=\"string\"\u003e\u0026#34;rb\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fin:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = fin.read()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Decompressed size: \u003cspan class=\"subst\"\u003e{sys.getsizeof(data)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# Decompressed size: 1000033\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这个例子中，结合了 \u003ccode\u003egzip\u003c/code\u003e 和 \u003ccode\u003eshutils\u003c/code\u003e 。看起来我们所做的批量压缩与之前使用 \u003ccode\u003ezlib\u003c/code\u003e 或 \u003ccode\u003ebz2\u003c/code\u003e 的效果相同，但由于 \u003ccode\u003eshutil.copyfileobj\u003c/code\u003e 方法，我们实现了分块增量压缩，而不必像使用\u003ccode\u003elzma\u003c/code\u003e那样循环数据。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egzip\u003c/code\u003e 模块的一个优点是：它还提供了命令行接口，我说的不是 Linux \u003ccode\u003egzip\u003c/code\u003e 和 \u003ccode\u003egunzip\u003c/code\u003e ，而是 Python 中所集成的：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epython3 -m gzip -h\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eusage: gzip.py [-h] [--fast | --best | -d] [file [file ...]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003els -l data*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-rw-rw-r-- \u003cspan class=\"number\"\u003e1\u003c/span\u003e martin martin \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e aug \u003cspan class=\"number\"\u003e22\u003c/span\u003e \u003cspan class=\"number\"\u003e18\u003c/span\u003e:\u003cspan class=\"number\"\u003e48\u003c/span\u003e data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Use fast compression on file \u0026#34;data\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epython3 -m gzip --fast data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# File named \u0026#34;data.gz\u0026#34; was generated:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003els -l data*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-rw-rw-r-- \u003cspan class=\"number\"\u003e1\u003c/span\u003e martin martin \u003cspan class=\"number\"\u003e1000000\u003c/span\u003e aug \u003cspan class=\"number\"\u003e22\u003c/span\u003e \u003cspan class=\"number\"\u003e18\u003c/span\u003e:\u003cspan class=\"number\"\u003e48\u003c/span\u003e data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-rw-rw-r-- \u003cspan class=\"number\"\u003e1\u003c/span\u003e martin martin    \u003cspan class=\"number\"\u003e1008\u003c/span\u003e aug \u003cspan class=\"number\"\u003e22\u003c/span\u003e \u003cspan class=\"number\"\u003e20\u003c/span\u003e:\u003cspan class=\"number\"\u003e50\u003c/span\u003e data.gz\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"更高效的工具\"\u003e\u003ca href=\"#更高效的工具\" class=\"headerlink\" title=\"更高效的工具\"\u003e\u003c/a\u003e更高效的工具\u003c/h2\u003e\u003cp\u003e如果你熟悉 \u003ccode\u003ezip\u003c/code\u003e 或 \u003ccode\u003etar\u003c/code\u003e ，或者必须用其中的一种格式存档，就应该认真阅读下面的内容。除了基本的压缩或解压缩操作外，这两个模块还包括其他的一些实用方法，例如校验、使用密码、在归档文件中列出文件等。所以，很有必要深入研究一番，确保掌握这些技能。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e zipfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# shuf -n5 /usr/share/dict/words \u0026gt; words.txt\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efiles = [\u003cspan class=\"string\"\u003e\u0026#34;words1.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words2.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words3.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words4.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words5.txt\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003earchive = \u003cspan class=\"string\"\u003e\u0026#34;archive.zip\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epassword = \u003cspan class=\"string\"\u003eb\u0026#34;verysecret\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e zipfile.ZipFile(archive, \u003cspan class=\"string\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e zf:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e file \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e files:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        zf.write(file)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    zf.setpassword(password)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e zipfile.ZipFile(archive, \u003cspan class=\"string\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e zf:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    crc_test = zf.testzip()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e crc_test \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(\u003cspan class=\"string\"\u003ef\u0026#34;Bad CRC or file headers: \u003cspan class=\"subst\"\u003e{crc_test}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    info = zf.infolist()  \u003cspan class=\"comment\"\u003e# also zf.namelist()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(info)  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# See all attributes at https://docs.python.org/3/library/zipfile.html#zipinfo-objects\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# [ \u0026lt;ZipInfo filename=\u0026#39;words1.txt\u0026#39; filemode=\u0026#39;-rw-r--r--\u0026#39; file_size=37\u0026gt;,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e#   \u0026lt;ZipInfo filename=\u0026#39;words2.txt\u0026#39; filemode=\u0026#39;-rw-r--r--\u0026#39; file_size=47\u0026gt;,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e#   ... ]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file = info[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e zf.open(file) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e f:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(f.read().decode())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# Olav\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# teakettles\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    zf.extract(file, \u003cspan class=\"string\"\u003e\u0026#34;/tmp\u0026#34;\u003c/span\u003e, pwd=password)  \u003cspan class=\"comment\"\u003e# also zf.extractall()\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上述代码有点长，它涵盖了 \u003ccode\u003ezipfile\u003c/code\u003e 模块的所有重要功能。在这段代码中，首先在 \u003ccode\u003ewith\u003c/code\u003e 上下文管理中，以 \u003ccode\u003ew\u003c/code\u003e 模式使用 \u003ccode\u003eZipFile\u003c/code\u003e创建 ZIP 归档文件，然后将文件添加到归档文件中。你会注意到，实际上不需要打开要添加的文件 —— 我们所需要做的就是调用 \u003ccode\u003ewrite\u003c/code\u003e 方法，并传入文件名为参数。添加所有文件后，我们还使用 \u003ccode\u003esetpassword\u003c/code\u003e 方法设置存档密码。\u003c/p\u003e\n\u003cp\u003e接下来，为了证明这种操作方法的有效性，打开归档文件。在读取任何文件之前，检查CRC和文件头，然后检索存档中所有文件的信息。在本例中，我们只打印 \u003ccode\u003eZipInfo\u003c/code\u003e 对象的列表，但你也可以检查其属性，以获得CRC、大小、压缩类型等。\u003c/p\u003e\n\u003cp\u003e检查完所有文件后，打开并读取其中一个文件。我们看到它具有预期的内容，所以可以继续并将其解压缩都指定路径（\u003ccode\u003e/tmp/\u003c/code\u003e ）。\u003c/p\u003e\n\u003cp\u003e除了创建和读取归档文件或普通文件外，ZIP 还允许我们将文件追加到现有的存档中。为此，只需将访问模式更改为 \u003ccode\u003ea\u003c/code\u003e （追加模式）：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e zipfile.ZipFile(archive, \u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e zf:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    zf.write(\u003cspan class=\"string\"\u003e\u0026#34;words6.txt\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(zf.namelist())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# [\u0026#39;words1.txt\u0026#39;, \u0026#39;words2.txt\u0026#39;, \u0026#39;words3.txt\u0026#39;, \u0026#39;words4.txt\u0026#39;, \u0026#39;words5.txt\u0026#39;, \u0026#39;words6.txt\u0026#39;]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与 \u003ccode\u003egzip\u003c/code\u003e 模块相同，Python的 \u003ccode\u003ezipfile\u003c/code\u003e 和 \u003ccode\u003etarfile\u003c/code\u003e 也提供 CLI 。要执行基本存档和提取，请使用以下命令：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epython3 -m zipfile -c arch.zip words1.txt words2.txt  # Create\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epython3 -m zipfile -t arch.zip  # Test\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDone testing\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epython3 -m zipfile -e arch.zip /tmp  # Extract\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003els /tmp/words*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e/tmp/words1.txt  /tmp/words2.txt\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最后但并非最不重要的是 \u003ccode\u003etarfile\u003c/code\u003e 模块。此模块类似于 \u003ccode\u003ezipfile\u003c/code\u003e ，但也实现了一些额外的功能：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e tarfile\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efiles = [\u003cspan class=\"string\"\u003e\u0026#34;words1.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words2.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words3.txt\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;words4.txt\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003earchive = \u003cspan class=\"string\"\u003e\u0026#34;archive.tar.gz\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e tarfile.open(archive, \u003cspan class=\"string\"\u003e\u0026#34;w:gz\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e tar:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e file \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e files:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tar.add(file)  \u003cspan class=\"comment\"\u003e# can also be dir (added recursively), symlink, etc\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;archive contains: \u003cspan class=\"subst\"\u003e{tar.getmembers()}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# [\u0026lt;TarInfo \u0026#39;words1.txt\u0026#39; at 0x7f71ed74f8e0\u0026gt;,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e#  \u0026lt;TarInfo \u0026#39;words2.txt\u0026#39; at 0x7f71ed74f9a8\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e#  ... ]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    info = tar.gettarinfo(\u003cspan class=\"string\"\u003e\u0026#34;words1.txt\u0026#34;\u003c/span\u003e)  \u003cspan class=\"comment\"\u003e# Other Linux attributes - https://docs.python.org/3/library/tarfile.html#tarinfo-objects\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;\u003cspan class=\"subst\"\u003e{tar.name}\u003c/span\u003e contains \u003cspan class=\"subst\"\u003e{info.name}\u003c/span\u003e with permissions \u003cspan class=\"subst\"\u003e{oct(info.mode)[\u003cspan class=\"number\"\u003e-3\u003c/span\u003e:]}\u003c/span\u003e, size: \u003cspan class=\"subst\"\u003e{info.size}\u003c/span\u003e and owner: \u003cspan class=\"subst\"\u003e{info.uid}\u003c/span\u003e:\u003cspan class=\"subst\"\u003e{info.gid}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# .../archive.tar contains words1.txt with permissions 644, size: 37 and owner: 500:500\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003echange_permissions\u003c/span\u003e\u003cspan class=\"params\"\u003e(tarinfo)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tarinfo.mode = \u003cspan class=\"number\"\u003e0o100600\u003c/span\u003e  \u003cspan class=\"comment\"\u003e# -rw-------.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e tarinfo\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    tar.add(\u003cspan class=\"string\"\u003e\u0026#34;words5.txt\u0026#34;\u003c/span\u003e, filter=change_permissions)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    tar.list()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# -rw-r--r-- martin/martin   37 2021-08-23 09:01:56 words1.txt\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# -rw-r--r-- martin/martin   47 2021-08-23 09:02:06 words2.txt\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# -rw------- martin/martin   42 2021-08-23 09:02:22 words5.txt\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们从归档文件的基本创建开始，这里使用的打开模式 \u003ccode\u003e\u0026#34;w:gz\u0026#34;\u003c/code\u003e ，指定要使用 GZ 压缩。然后将所有的文件添加到存档中。使用 \u003ccode\u003etarfile\u003c/code\u003e 模块，还可以传入符号链接（软连接）、或传入可以递归添加的整个目录。\u003c/p\u003e\n\u003cp\u003e接下来，为了确认所有文件都确实存在，我们使用 \u003ccode\u003egetmembers\u003c/code\u003e 方法。为了深入了解各个文件，可以使用 \u003ccode\u003egettarinfo\u003c/code\u003e 方法，它提供了所有 Linux 文件属性。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003etarfile\u003c/code\u003e 提供了一个我们在其他模块中没有看到的很酷的特性，那就是在将文件添加到归档文件时能够修改文件的属性。在上面的代码片段中，通过提供 \u003ccode\u003efilter\u003c/code\u003e 参数来更改文件的权限，该参数修改了 \u003ccode\u003eTarInfo.mode\u003c/code\u003e。此值必须作为八进制数提供，此处的 \u003ccode\u003e0o100600\u003c/code\u003e 将权限设置为 \u003ccode\u003e0600\u003c/code\u003e 或 \u003ccode\u003e-rw-------.\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e为了在进行此更改后获得文件的完整概览，我们可以运行 \u003ccode\u003elist\u003c/code\u003e 方法，它提供类似于 \u003ccode\u003els -l\u003c/code\u003e的输出。\u003c/p\u003e\n\u003cp\u003e使用\u003ccode\u003etar\u003c/code\u003e 存档的最后一件事是打开它并将其解压缩。为此，我们使用 \u003ccode\u003e\u0026#34;r:gz\u0026#34;\u003c/code\u003e 模式打开它，以文件名作为 \u003ccode\u003egetmember\u003c/code\u003e 方法的参数，返回文件对象，并将其解压缩到指定路径中。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e tarfile.open(archive, \u003cspan class=\"string\"\u003e\u0026#34;r:gz\u0026#34;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e tar:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    member = tar.getmember(\u003cspan class=\"string\"\u003e\u0026#34;words3.txt\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e member.isfile():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        tar.extract(member, \u003cspan class=\"string\"\u003e\u0026#34;/tmp/\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e如你所见，Python 的提供了包括低级和高级、特定和通用、简单和复杂的各类模块或库。可以根据实际需要进行选择，通常建议使用通用模块，如 \u003ccode\u003ezipfile\u003c/code\u003e 或 \u003ccode\u003etarfile\u003c/code\u003e ，只有在必要时才使用 \u003ccode\u003elzma\u003c/code\u003e 之类的模块。\u003c/p\u003e\n\u003cp\u003e当然，要想熟练使用以上各个模块的各种方法，还是要阅读官方文档。\u003c/p\u003e\n\u003ch2 id=\"参考文献\"\u003e\u003ca href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"\u003e\u003c/a\u003e参考文献\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://towardsdatascience.com/all-the-ways-to-compress-and-archive-files-in-python-e8076ccedb4b\" target=\"_blank\" rel=\"noopener\"\u003ehttps://towardsdatascience.com/all-the-ways-to-compress-and-archive-files-in-python-e8076ccedb4b\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2021/09/15/paralellizingcode/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          用 Python 实现并行计算\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2021/09/29/create-3d-model-from-2d-image/\"\u003e\n        \n          根据 2D 图片构建 3D 模型\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2021-09-15T00:00:00Z",
  "Author": "老齐教室"
}