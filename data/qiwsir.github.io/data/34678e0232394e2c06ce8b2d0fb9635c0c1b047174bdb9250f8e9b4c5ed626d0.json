{
  "Source": "qiwsir.github.io",
  "Title": "通过散列表深入理解字典",
  "Link": "https://qiwsir.github.io/2021/02/18/hash-table-and-dictionary/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e通过散列表深入理解字典\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2021-02-18\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e\u003cstrong\u003e注：\u003c/strong\u003e 本文是对《跟老齐学Python：轻松入门》和《Python大学实用教程》有关字典对象的学习补充和提升。更多有关这两本书的资料，请阅读如下链接：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e《跟老齐学Python：轻松入门》：\u003ca href=\"http://www.itdiffer.com/learn_python.html\" target=\"_blank\" rel=\"noopener\"\u003ehttp://www.itdiffer.com/learn_python.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e《Python大学实用教程》：\u003ca href=\"http://www.itdiffer.com/python_course.html\" target=\"_blank\" rel=\"noopener\"\u003ehttp://www.itdiffer.com/python_course.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003cp\u003e是否想过，为什么Python中的字典对象会那么快，而且可靠？先说答案，就是因为它依赖于一个重要的算法：散列表（hash table，也有译为“哈希表”）。\u003c/p\u003e\n\u003cp\u003e理解散列表，有助于深入理解Python中字典的运行原理，这对理解Python编程语言是一个巨大的进步，因为字典在Python中几乎随处可见。\u003c/p\u003e\n\u003ch2 id=\"散列函数\"\u003e\u003ca href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"\u003e\u003c/a\u003e散列函数\u003c/h2\u003e\u003cp\u003e在介绍散列表以及它在Python中的实现之前，先简要说明散列函数及其工作原理。\u003c/p\u003e\n\u003cp\u003e散列函数是一种可以将任何长度的数据映射到固定长度的值的函数，这个映射过程称为\u003cstrong\u003e散列\u003c/strong\u003e（hash）。\u003c/p\u003e\n\u003cp\u003e散列函数具有以下三个特点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e计算速度快：计算一条数据的散列值，必须要快。\u003c/li\u003e\n\u003cli\u003e确定性：相同的字符串的散列值总相同。\u003c/li\u003e\n\u003cli\u003e散列值长度固定：无论输入的是1个字节、10个字节还是1万个字节，生成的散列值始终是固定的预定长度。\u003c/li\u003e\n\u003cli\u003e不可逆性：散列函数是一个“单向函数”，将字符串输入到散列函数，得到了散列值，但是不能反过来，不能从散列值得到原来的字符串。由于这个特性，它可以用于加密。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e常用的散列函数有：\u003ca href=\"https://en.wikipedia.org/wiki/MD5\" target=\"_blank\" rel=\"noopener\"\u003eMD5\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/SHA-1\" target=\"_blank\" rel=\"noopener\"\u003eSHA-1\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/SHA-2\" target=\"_blank\" rel=\"noopener\"\u003eSHA-2\u003c/a\u003e, \u003ca href=\"https://it.wikipedia.org/wiki/NTLM\" target=\"_blank\" rel=\"noopener\"\u003eNTLM\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e能够找到一些网站，能够自动生成字符串的散列值，如下图所示，是使用\u003ca href=\"https://www.md5online.org提供的功能得到的。\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.md5online.org提供的功能得到的。\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-2-20/1613784151863-md5.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"散列的应用\"\u003e\u003ca href=\"#散列的应用\" class=\"headerlink\" title=\"散列的应用\"\u003e\u003c/a\u003e散列的应用\u003c/h2\u003e\u003cp\u003e散列的应用范围比较广，散列表只是其一，其他方面诸如加密、安全等。\u003c/p\u003e\n\u003cp\u003e比如用散列函数生成文件的摘要（digest），并应用于数字签名（digital signature）$^{[2]}$。\u003c/p\u003e\n\u003cp\u003e再比如存储用户密码，这是散列的另一种常见应用。如果你在某个网站注册了用户，但是忘记密码了，在登录页面中常常会有“找回密码”或者“重置密码”的链接。如果点击“找回密码”，网站真的向你提供的邮箱中发送了你的密码，说明这个网站在存储密码的时候，根本没有加密，极有可能是“明码”保存了。这是非常危险的，一旦网站的用户个人数据出问题——时长会暴出网站的用户数据出问题的新闻——密码就赫然呈现在世人面前了。负责任的网站，都会用散列函数，将用户的密码加密，用户只能“重置密码”，而不能“找回”。所以，通常是给你预留的邮箱中发送重置密码的链接。\u003c/p\u003e\n\u003ch2 id=\"Python的内置散列函数\"\u003e\u003ca href=\"#Python的内置散列函数\" class=\"headerlink\" title=\"Python的内置散列函数\"\u003e\u003c/a\u003ePython的内置散列函数\u003c/h2\u003e\u003cp\u003ePython的内置函数\u003ccode\u003ehash()\u003c/code\u003e是一个散列函数，它能够返回输入对象的十进制整数形式的散列值。\u003c/p\u003e\n\u003cp\u003e以数字为例，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"number\"\u003e10.0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"number\"\u003e3.1415926\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e326490306866391043\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回值即为输入数字的散列值。\u003c/p\u003e\n\u003cp\u003e特别注意，Python的\u003ccode\u003ehash()\u003c/code\u003e函数返回的是整数对象，这些对象在标准的64位Python 3解释器中始终以24个字节表示。\u003c/p\u003e\n\u003cp\u003e如上述代码，默认情况下，整数的散列值是其本身。 请注意，\u003ccode\u003ehash(10)\u003c/code\u003e和\u003ccode\u003ehash(10.0)\u003c/code\u003e的结果一样。显然，\u003ccode\u003e10\u003c/code\u003e和\u003ccode\u003e10.0\u003c/code\u003e是两个不同的对象（一个是整数，另外一个是浮点数），而它们的散列值相同。反过来，根据相同的散列值，无法唯一判定输入对象是哪一个。这就是可以用散列加密的原因。\u003c/p\u003e\n\u003cp\u003e看一下\u003ccode\u003ehash()\u003c/code\u003e的文档——看文档，是一项重要的能力和习惯$^{[3]}$ 。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehash(obj, /)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Return the hash value \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e the given object.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Two objects that compare equal must also have the same hash value, but the  reverse \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e necessarily true.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从文档中可知，如果两个对象相等，它们的散列值必须相等，或者说，如果两个对象已经通过\u003ccode\u003e==\u003c/code\u003e返回了\u003ccode\u003eTrue\u003c/code\u003e，就说明它们的散列值相等。反之，如果两个对象的散列值相等，这两个对象不一定相等，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"number\"\u003e-1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e-2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"number\"\u003e-2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e-2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"number\"\u003e-1\u003c/span\u003e == \u003cspan class=\"number\"\u003e-2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这更进一步说明，散列函数是“单向函数”。像上述示例这样，\u003ccode\u003e-1\u003c/code\u003e和\u003ccode\u003e-2\u003c/code\u003e的散列值相同，称为散列\u003cstrong\u003e碰撞\u003c/strong\u003e（collision），即两个对象的散列值产生了冲突。\u003c/p\u003e\n\u003cp\u003e以上示例中，都是以数字作为\u003ccode\u003ehash()\u003c/code\u003e的参数，如果改用字符串，返回的也是整数形式的散列值。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(\u003cspan class=\"string\"\u003e\u0026#34;跟老齐学Python\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e-8625257969505844567\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是，如果你在自己的计算机上重复上面的操作，注意字符串别输入错了，所得到的结果应该跟我这里演示的结果不同——前面参数为数字时，一定相同。\u003c/p\u003e\n\u003cp\u003e这是因为，自从Python3.3之后，对于字符串和字节对象，在进行散列处理之前，先增加了一个随机值，形象地说就是“加了一小撮盐”。“加盐”之后的字符串就变成了随机值。如果想出现这种情况，可以更改\u003ccode\u003ePYTHONHASHSEED\u003c/code\u003e的值$^{[4]}$，将它设置为大于零的整数。\u003c/p\u003e\n\u003ch2 id=\"可散列类型\"\u003e\u003ca href=\"#可散列类型\" class=\"headerlink\" title=\"可散列类型\"\u003e\u003c/a\u003e可散列类型\u003c/h2\u003e\u003cp\u003e在Python内置的对象类型中，并非都是可散列的，只有那些不可变对象，比如整数、浮点数、字符串、元组等，才是可散列的。\u003c/p\u003e\n\u003cp\u003e如果要将\u003ccode\u003ehash()\u003c/code\u003e用于不可散列的对象，结果会出现\u003ccode\u003eTypeError\u003c/code\u003e异常，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash([\u003cspan class=\"string\"\u003e\u0026#34;R\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;e\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;l\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;P\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;y\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;t\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;h\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;o\u0026#34;\u003c/span\u003e,\u003cspan class=\"string\"\u003e\u0026#34;n\u0026#34;\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTypeError: unhashable type: \u003cspan class=\"string\"\u003e\u0026#39;list\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然而，自定义的对象，默认是可散列的，并且默认情况下，是以对象的id值作为\u003ccode\u003ehash()\u003c/code\u003e的参数。这就意味着，用同一个类，创建了两个不同的实例对象，它们会有不同的散列值，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eLaoqi\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003epass\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ex = Laoqi()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ey = Laoqi()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e8777241446265\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(y)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e8777241446967\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(id(x)/\u003cspan class=\"number\"\u003e16\u003c/span\u003e)==hash(x)  \u003cspan class=\"comment\"\u003e# 说明x的散列值是依据其id值得到的\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(id(y)/\u003cspan class=\"number\"\u003e16\u003c/span\u003e)==hash(y)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果你所见，用同一个类创建了两个实例对象，它们的散列值不同，当然，如果执行\u003ccode\u003ex==y\u003c/code\u003e，返回的是\u003ccode\u003eFalse\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x == y\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFalse\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这符合Python的习惯，毕竟\u003ccode\u003ex\u003c/code\u003e和\u003ccode\u003ey\u003c/code\u003e是两个实例，在通常情况下，都是给类提供不同的参数，只不过这里演示得太简单了。\u003c/p\u003e\n\u003cp\u003e如果，由于某种需要，必须让两个实例具有相同的散列值，怎么办？可以在类里面重写\u003ccode\u003e__hash__()\u003c/code\u003e方法。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eLaoqi\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003e__hash__\u003c/span\u003e\u003cspan class=\"params\"\u003e(self)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e728\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ea = Laoqi()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eb = Laoqi()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ea == b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(a)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e728\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(b)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e728\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个示例进一步展示了前面提到的一种现象：散列值相同的对象不相等。并且，还说明，\u003ccode\u003ehash()\u003c/code\u003e函数其实是调用了对象中的\u003ccode\u003e__hash__()\u003c/code\u003e方法。如果检查一下，Python的内置对象类型中都有这个特殊方法。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;__hash__\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e dir(int)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;__hash__\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e dir(list)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;__hash__\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e dir(dict)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"string\"\u003e\u0026#39;__hash__\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e dir(str)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e......\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e前面提到，Python中的对象分为可散列和不可散列两种类型，而这里检测之后，所有内置对象类型都具有\u003ccode\u003e__hash__\u003c/code\u003e方法，是不是意味着都能用于\u003ccode\u003ehash()\u003c/code\u003e函数呢？前面说过可变对象是不可散列类型。这又怎么理解？做如下操作：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(list.__hash__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(str.__hash__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;slot wrapper \u003cspan class=\"string\"\u003e\u0026#39;__hash__\u0026#39;\u003c/span\u003e of \u003cspan class=\"string\"\u003e\u0026#39;str\u0026#39;\u003c/span\u003e objects\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以列表（可变对象，不可散列）和字符串（不可变对象，可散列）为例，发现它们的\u003ccode\u003e__hash__\u003c/code\u003e返回值不同，列表返回的是\u003ccode\u003eNone\u003c/code\u003e，而字符串返回的是一个对象。这就给我们启发了。如果这样定义：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eLaoqi\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    __hash__ = \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ec = Laoqi()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ehash(c)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTypeError: unhashable type: \u003cspan class=\"string\"\u003e\u0026#39;Laoqi\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在用所定义的类\u003ccode\u003eLaoqi\u003c/code\u003e创建了一个实例\u003ccode\u003ec\u003c/code\u003e，它就变成了不可散列的对象。综上可知，对象是否可散列，主要看它的\u003ccode\u003e__hash__\u003c/code\u003e是什么，如果是\u003ccode\u003eNone\u003c/code\u003e，则不可散列。\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"散列表\"\u003e\u003ca href=\"#散列表\" class=\"headerlink\" title=\"散列表\"\u003e\u003c/a\u003e散列表\u003c/h2\u003e\u003cp\u003e了解了散列函数之后，就可以看看散列表是什么了。散列表是一种数据结构，它存储的是键值对（key-value）。\u003c/p\u003e\n\u003cp\u003e在散列表中，每个键值对的键必须是可散列的，这是因为存储的键值对通过使用其键的散列值进行索引。如果查询散列表中的某个元素，其查询速度与表中所存储的键值对数量无关，不论表的长度增加10倍还是10万倍，查询某个特定元素的速度都不会受到影响。\u003c/p\u003e\n\u003cp\u003e散列表是怎么实现的呢？一种经典的做法是通过一个可变容器存储数据和索引，并通过键的散列值建立索引，借此可以查询到特定的数据。形象地说，是创建一个大桶（bucket），里面放很多小桶。每个小桶都由键的散列值建立索引，小桶中装的就是数据。\u003c/p\u003e\n\u003cp\u003e在下面的示例中，演示用Python实现散列表，从中可以理解散列表的基本余力。当然，在真正的编程中，不需要自定义这种散列表对象，因为Python中的字典类型对象就能实现。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e pprint\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eHashtable\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003e__init__\u003c/span\u003e\u003cspan class=\"params\"\u003e(self, elements)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.bucket_size = len(elements)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.buckets = [[] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(self.bucket_size)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._assign_buckets(elements)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003e_assign_buckets\u003c/span\u003e\u003cspan class=\"params\"\u003e(self, elements)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e key, value \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e elements:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            hashed_value = hash(key)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            index = hashed_value % self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            self.buckets[index].append((key, value))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eget_value\u003c/span\u003e\u003cspan class=\"params\"\u003e(self, input_key)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hashed_value = hash(input_key)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        index = hashed_value % self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        bucket = self.buckets[index]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e key, value \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e bucket:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e key == input_key:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e(value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003e__str__\u003c/span\u003e\u003cspan class=\"params\"\u003e(self)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e pprint.pformat(self.buckets) \u003cspan class=\"comment\"\u003e# 返回一个可打印的对象\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     capitals = [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"string\"\u003e\u0026#39;France\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Paris\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"string\"\u003e\u0026#39;United States\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Washington D.C.\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"string\"\u003e\u0026#39;Italy\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Rome\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"string\"\u003e\u0026#39;Canada\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Ottawa\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehashtable = Hashtable(capitals)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(hashtable)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003ef\u0026#34;The capital of Italy is \u003cspan class=\"subst\"\u003e{hashtable.get_value(\u003cspan class=\"string\"\u003e\u0026#39;Italy\u0026#39;\u003c/span\u003e)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意观察第10行开始的\u003ccode\u003efor\u003c/code\u003e循环语句，在第11行，计算每个可散列元素的键的散列值，用它计算一个索引值（第12行），将此索引值作为\u003ccode\u003eself.buckets\u003c/code\u003e容器（bucket，也有直接译为“桶”）的索引（第13行），并向该索引对应的数据结构（列表）中增加数据\u003ccode\u003e(key,value)\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果将前面提到过的环境变量\u003ccode\u003ePYTHONHASHSEED\u003c/code\u003e的值设置为\u003ccode\u003e46\u003c/code\u003e$^{[5]}$，就会得到下面的输出结果。有两个空容器，另外两个容器中分别存储了两个键值对数据。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e[[(\u003cspan class=\"string\"\u003e\u0026#39;United States\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Washington D.C.\u0026#39;\u003c/span\u003e), (\u003cspan class=\"string\"\u003e\u0026#39;Canada\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Ottawa\u0026#39;\u003c/span\u003e)],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [(\u003cspan class=\"string\"\u003e\u0026#39;France\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Paris\u0026#39;\u003c/span\u003e), (\u003cspan class=\"string\"\u003e\u0026#39;Italy\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Rome\u0026#39;\u003c/span\u003e)]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe capital of Italy \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e Rome\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意，如果不设置\u003ccode\u003ePYTHONHASHSEED\u003c/code\u003e 的值，会得到与上述显示不一样的值。\u003c/p\u003e\n\u003cp\u003e在这个示例中，用Python创建了一个散列表，以元组为元素的列表作为输入。在初始化的时候，以输入对象的长度创建一个列表容器，然后将输入的数据存储到此容器中。\u003c/p\u003e\n\u003cp\u003e然而，如你在输出中所见，在输出结果中，有两个空列表，有另外两个列表中分别存储了不同的两个数据，这是什么原因？是因为在这个Python散列表中出现了散列碰撞。\u003c/p\u003e\n\u003cp\u003e使用Python标准库中的\u003ccode\u003ehash()\u003c/code\u003e函数计算散列值，出现碰撞是在所难免的。为此可以用扩大容器的容量（即长度），从而降低出现碰撞的概率，但是不能根本杜绝。\u003c/p\u003e\n\u003cp\u003e另外，容器的数量扩大，也会浪费更多的空间。下面的示例做了一点修改，在第4行，将\u003ccode\u003eself.bucket_size\u003c/code\u003e变为原来的\u003ccode\u003e2\u003c/code\u003e倍了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehl_lines=”\u003cspan class=\"number\"\u003e3\u003c/span\u003e” \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eHashtable\u003c/span\u003e:\u003c/span\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003e__init__\u003c/span\u003e\u003cspan class=\"params\"\u003e(self, elements)\u003c/span\u003e:\u003c/span\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.bucket_size = len(elements) * \u003cspan class=\"number\"\u003e2\u003c/span\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.buckets = [[] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(self.bucket_size)] \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._assign_buckets(elements)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e再次执行程序，得到了下面的结果，仍然没有解决碰撞问题，并且已经有五个空容器了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e[[],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [(\u003cspan class=\"string\"\u003e\u0026#39;Canada\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Ottawa\u0026#39;\u003c/span\u003e)],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [(\u003cspan class=\"string\"\u003e\u0026#39;United States\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Washington D.C.\u0026#39;\u003c/span\u003e), (\u003cspan class=\"string\"\u003e\u0026#39;Italy\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Rome\u0026#39;\u003c/span\u003e)],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e [(\u003cspan class=\"string\"\u003e\u0026#39;France\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Paris\u0026#39;\u003c/span\u003e)]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe capital of Italy \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e Rome\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果有两个散列碰撞，它们会被放入同一个容易。既然碰撞在所难免，那么在实现哈希表的时候，就要解决这个问题。通常的解决方法有两种：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e开放式寻址法（open addressing）\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分离链接法（separate chaining）\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e分离链接法在上面的示例中已经实现过了，在示例中，其实使用的是一个嵌套列表，如果要查询指定的值，需要对整个列表全部扫描。由此可见，分离链接法是在一个容器中用另外一种数据结构创建一系列的数据对象。\u003c/p\u003e\n\u003cp\u003e使用开放式寻址方法，如果某个索引下的容易中已有数据，则只要找到一个新的容器即可，所以要判断容器中是否已经有数据，并且要能找到新的容易。在原有的\u003ccode\u003eHashtable\u003c/code\u003e类中修改\u003ccode\u003e_assign_buckets()\u003c/code\u003e方法，代码如下。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003e_assign_buckets\u003c/span\u003e\u003cspan class=\"params\"\u003e(self, elements)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    self.buckets = [\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e] * self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e key, value \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e elements:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        hashed_value = hash(key)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        index = hashed_value % self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e self.buckets[index] \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            print(\u003cspan class=\"string\"\u003ef\u0026#34;The key \u003cspan class=\"subst\"\u003e{key}\u003c/span\u003e collided with \u003cspan class=\"subst\"\u003e{self.buckets[index]}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            index = (index + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) % self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.buckets[index] = ((key, value))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面代码中，第2行，首先把大容器中设置了默认值\u003ccode\u003eNone\u003c/code\u003e，然后在第8行用\u003ccode\u003ewhile\u003c/code\u003e循环，检查某索引的列表内是否已经存储了数据。\u003c/p\u003e\n\u003cp\u003e之后，还需要修改\u003ccode\u003eget_value\u003c/code\u003e方法，有必要检查索引对应的数据是否为\u003ccode\u003eNone\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eget_value\u003c/span\u003e\u003cspan class=\"params\"\u003e(self, input_key)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    hashed_value = hash(input_key)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    index = hashed_value % self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e self.buckets[index] \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        key,value = self.buckets[index]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e key == input_key:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        index = (index + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) % self.bucket_size\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e前面的示例中，“Italy”键与“France”键的散列值冲突，按照修改之后的方法，这两个键就不会存储到同一个容器（列表）中，而是将“Italy”为键的数据存储到下一个“桶”里面。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eThe key Italy collided \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e (\u003cspan class=\"string\"\u003e\u0026#39;France\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Paris\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e (\u003cspan class=\"string\"\u003e\u0026#39;Canada\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Ottawa\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e (\u003cspan class=\"string\"\u003e\u0026#39;France\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Paris\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e (\u003cspan class=\"string\"\u003e\u0026#39;Italy\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Rome\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e (\u003cspan class=\"string\"\u003e\u0026#39;United States\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Washington D.C.\u0026#39;\u003c/span\u003e)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe capital of Italy \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e Rome\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在开放式寻址法中，如果要删除散列表中的元素，只能执行逻辑删除，而不是物理删除。因为如果删除正好是发生了散列冲突的数据，那么与其对应的另外一个数据，就没办法找到了。\u003c/p\u003e\n\u003cp\u003e例如，前面在示例中，“Italy”与先前插入的元素（“France”）冲突，于是将它存储到索引值加一后的下一个“桶”里面，如果物理删除“France”元素，将无法找到“Italy”无法访问。\u003c/p\u003e\n\u003cp\u003e因此，在使用开放式寻址策略时，要删除元素，必须用一个哑值（dummy value，即虚拟数据）替换其存储区，这样解释器就可以根据冲突的这个位置检索到下一个位置。\u003c/p\u003e\n\u003ch2 id=\"字典：Python散列表的应用\"\u003e\u003ca href=\"#字典：Python散列表的应用\" class=\"headerlink\" title=\"字典：Python散列表的应用\"\u003e\u003c/a\u003e字典：Python散列表的应用\u003c/h2\u003e\u003cp\u003e现在，我们已经了解了哈希表的基本含义，下面来看一下它在Python语言中最重要的应用：字典。Python中的字典是使用散列表和“开放式寻址”冲突解决方法构建的。\u003c/p\u003e\n\u003cp\u003e在Python的基本知识中，我们知道字典是“键-值对”的集合$^{[3]}$ ，因此要定义字典，必须提供一个用逗号括起来的大括号内的键-值对列表，如以下示例所示：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e   \u003cspan class=\"string\"\u003e\u0026#34;Carlsen\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2863\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e   \u003cspan class=\"string\"\u003e\u0026#34;Caruana\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2835\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e   \u003cspan class=\"string\"\u003e\u0026#34;Ding\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2791\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e   \u003cspan class=\"string\"\u003e\u0026#34;Nepomniachtchi\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2784\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e   \u003cspan class=\"string\"\u003e\u0026#34;Vachier-Lagrave\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2778\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里所创建的字典\u003ccode\u003echess_players\u003c/code\u003e中包括五个键值对：世界排名前五的国际象棋棋手名称及其得分。\u003c/p\u003e\n\u003cp\u003e要检索特定值，只需要使用方括号指定键即可：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; chess_players[\u0026#34;Nepomniachtchi\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2784\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eIf you try to access a non existing element, the Python interpreter throws a \u003ccode\u003eKey Error\u003c/code\u003e exception:\u003c/p\u003e\n\u003cp\u003e如果访问不存在的元素，Python解释器将抛出\u003ccode\u003eKey Error\u003c/code\u003e异常：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players[\u003cspan class=\"string\"\u003e\u0026#34;Mastromatteo\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eKeyError: \u003cspan class=\"string\"\u003e\u0026#39;Mastromatteo\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e字典内的元素，可以用\u003ccode\u003e.items()\u003c/code\u003e方法生成可迭代对象：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (k, v) \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e chess_players.items():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(k,v)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCarlsen \u003cspan class=\"number\"\u003e2863\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCaruana \u003cspan class=\"number\"\u003e2835\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDing \u003cspan class=\"number\"\u003e2791\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNepomniachtchi \u003cspan class=\"number\"\u003e2784\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eVachier-Lagrave \u003cspan class=\"number\"\u003e2778\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e另外，如果使用字典的\u003ccode\u003e.keys()\u003c/code\u003e和\u003ccode\u003e.values()\u003c/code\u003e两个方法，可以分别得到字典的键和值所生成的对象（在参考文献[3]中，对这类对象有特别说明），也是可迭代的。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players.keys()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edict_keys([\u003cspan class=\"string\"\u003e\u0026#34;Carlsen\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Caruana\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Ding\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Nepomniachtchi\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Vachier-Lagrave\u0026#34;\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players.values()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edict_values([\u003cspan class=\"number\"\u003e2863\u003c/span\u003e, \u003cspan class=\"number\"\u003e2835\u003c/span\u003e, \u003cspan class=\"number\"\u003e2791\u003c/span\u003e, \u003cspan class=\"number\"\u003e2784\u003c/span\u003e, \u003cspan class=\"number\"\u003e2778\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e字典是可变对象，可以增加键值对。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players[\u003cspan class=\"string\"\u003e\u0026#34;Grischuk\u0026#34;\u003c/span\u003e] = \u003cspan class=\"number\"\u003e2777\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003cspan class=\"string\"\u003e\u0026#39;Carlsen\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2863\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Caruana\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2835\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Ding\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2791\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Nepomniachtchi\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2784\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Vachier-Lagrave\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2778\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Grischuk\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2777\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意，字典中键值对的键，必须是可散列对象，因为字典是基于散列表而创建的。如果键不是可散列的，Python会爆出\u003ccode\u003eTypeError\u003c/code\u003e异常。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003emy_list = [\u003cspan class=\"string\"\u003e\u0026#34;Giri\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;Mamedyarov\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003echess_players[my_list] = \u003cspan class=\"number\"\u003e2764\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTypeError: unhashable type: \u003cspan class=\"string\"\u003e\u0026#39;list\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果要删除字典的键值对，可以使用\u003ccode\u003edel\u003c/code\u003e语句，注意，这不是函数。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003edel\u003c/span\u003e chess_players[\u003cspan class=\"string\"\u003e\u0026#34;Grischuk\u0026#34;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003echess_players\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003cspan class=\"string\"\u003e\u0026#39;Carlsen\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2863\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Caruana\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2835\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Ding\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2791\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Nepomniachtchi\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2784\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Vachier-Lagrave\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e2778\u003c/span\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e删除元素的语句，并不不会执行物理删除，它只是将语句中的“键”替换为虚拟值，这就是前面提到的开放寻址法所起的作用。但是，在实际操作总，由于解释器会为处理所有这些复杂问题，我们不用去关心，给我们的感觉就是“删除”了那个指定的键值对。\u003c/p\u003e\n\u003ch2 id=\"探寻所以然\"\u003e\u003ca href=\"#探寻所以然\" class=\"headerlink\" title=\"探寻所以然\"\u003e\u003c/a\u003e探寻所以然\u003c/h2\u003e\u003cp\u003e字典是散列表，那么它在后台是如何运行的？下面就在前面“知其然”基础上，了解一些“所以然”的内容。\u003c/p\u003e\n\u003cp\u003e特别提醒，此处我们的所有讨论，都是基于Python的最新版本，因为Python 3.6开始，字典已经发生了很大变化，并且变得更小，更快，甚至功能更强大，因为它现在已经能够实现“插入排序”了$^{[6]}$。\u003c/p\u003e\n\u003cp\u003e下面创建一个空字典，并检查它的大小，会发现这个空字典占据了\u003ccode\u003e240bytes\u003c/code\u003e的内存。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; import sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_dict = {}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; sys.getsizeof(my_dict)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e240\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e空字典占据\u003ccode\u003e240bytes\u003c/code\u003e的内存，但是，如果增加了数据，会发现，它所占内存并没有变化。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_dict[\u0026#34;a\u0026#34;] = 100\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; sys.getsizeof(my_dict)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e240\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是为什么呢？因为从Python 3.6开始，字典中值存储在不同的数据结构中，而字典仅包含指向实际值存储位置的指针。此外，当创建一个空字典时，它同时创建一个Python散列表，其中包含8个存储容器，长度只有240个字节，因此字典中增加了第一个元素后，根本没有改变其大小。\u003c/p\u003e\n\u003cp\u003e下面尝试增加更多的元素，会发现字典所占内存空间（即字典大小）在增长。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(\u003cspan class=\"number\"\u003e20\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    my_dict[i] = \u003cspan class=\"number\"\u003e100\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;elements = \u003cspan class=\"subst\"\u003e{i+\u003cspan class=\"number\"\u003e1\u003c/span\u003e}\u003c/span\u003e size = \u003cspan class=\"subst\"\u003e{sys.getsizeof(my_dict)}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e1\u003c/span\u003e size = \u003cspan class=\"number\"\u003e240\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e2\u003c/span\u003e size = \u003cspan class=\"number\"\u003e240\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e3\u003c/span\u003e size = \u003cspan class=\"number\"\u003e240\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e4\u003c/span\u003e size = \u003cspan class=\"number\"\u003e240\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e5\u003c/span\u003e size = \u003cspan class=\"number\"\u003e240\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e6\u003c/span\u003e size = \u003cspan class=\"number\"\u003e368\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e7\u003c/span\u003e size = \u003cspan class=\"number\"\u003e368\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e8\u003c/span\u003e size = \u003cspan class=\"number\"\u003e368\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e9\u003c/span\u003e size = \u003cspan class=\"number\"\u003e368\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e10\u003c/span\u003e size = \u003cspan class=\"number\"\u003e368\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e11\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e12\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e13\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e14\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e15\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e16\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e17\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e18\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e19\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eelements = \u003cspan class=\"number\"\u003e20\u003c/span\u003e size = \u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如上运行结果所示，在插入第六个元素（第10行）和第十一元素（第15行）之后，字典变大了，并非连续变大。这又是什么原因呢？这是为了使Python散列表更快并减少冲突，所以当字典充满三分之二时，解释器会调整字典的大小$^{[7]}$ 。\u003c/p\u003e\n\u003cp\u003e现在，将上面所创建字典中的元素都删除了，再看一看该字典的大小。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ekeys = list(my_dict.keys())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e key \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e keys:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003edel\u003c/span\u003e my_dict[key]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003emy_dict\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esys.getsizeof(my_dict)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e648\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与没有删除前比较，发现居然大小没变。之所以如此，就是由于字典的内存占用非常小，并且在使用字典时删除操作并不频繁，因此与每次删除后动态调整字典大小，解释器更愿意浪费一点空间。但是，如果通过调用\u003ccode\u003e.clear()\u003c/code\u003e方法清空字典，由于它是批量删除，因此释放了空间，并且最小达到72个字节。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003emy_dict.clear()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esys.getsizeof(my_dict)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e72\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e本文主要介绍了Python散列表及其在字典对象类型中的具体应用，从而更深入了解了字典的特点。\u003c/p\u003e\n\u003cp\u003e这篇文章的内容重点参考了\u003ca href=\"https://pyvideo.org/pycon-us-2017/modern-python-dictionaries-a-confluence-of-a-dozen-great-ideas.html\" target=\"_blank\" rel=\"noopener\"\u003eRaymond Hettinger在2017年Pycon大会上的演讲\u003c/a\u003e$^{[8]}$，\u003ca href=\"https://twitter.com/raymondh\" target=\"_blank\" rel=\"noopener\"\u003eRaymond Hettinger\u003c/a\u003e 是Python的核心开发者，为Python的发展做出了重大贡献。\u003c/p\u003e\n\u003ch2 id=\"参考文献\"\u003e\u003ca href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"\u003e\u003c/a\u003e参考文献\u003c/h2\u003e\u003cp\u003e[1]. \u003ca href=\"http://thepythoncorner.com/dev/hash-tables-understanding-dictionaries/\" target=\"_blank\" rel=\"noopener\"\u003ehttp://thepythoncorner.com/dev/hash-tables-understanding-dictionaries/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[2]. \u003ca href=\"https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[3]. Python大学实用教程. 齐伟. 北京：电子工业出版社\u003c/p\u003e\n\u003cp\u003e[4]. \u003ca href=\"https://docs.python.org/3.3/using/cmdline.html#envvar-PYTHONHASHSEED\" target=\"_blank\" rel=\"noopener\"\u003ehttps://docs.python.org/3.3/using/cmdline.html#envvar-PYTHONHASHSEED\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[5]. \u003ca href=\"https://stackoverflow.com/questions/30585108/disable-hash-randomization-from-within-python-program\" target=\"_blank\" rel=\"noopener\"\u003ehttps://stackoverflow.com/questions/30585108/disable-hash-randomization-from-within-python-program\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[6]. “插入顺序”在Python 3.6中实现，被Guido在Python 3.7中正式认可：\u003ca href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://mail.python.org/pipermail/python-dev/2017-December/151283.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[7]. \u003ca href=\"https://mail.python.org/pipermail/python-list/2000-March/048085.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://mail.python.org/pipermail/python-list/2000-March/048085.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[8]. \u003ca href=\"https://pyvideo.org/pycon-us-2017/modern-python-dictionaries-a-confluence-of-a-dozen-great-ideas.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://pyvideo.org/pycon-us-2017/modern-python-dictionaries-a-confluence-of-a-dozen-great-ideas.html\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2021/02/18/name-in-python/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python中`__name__`有什么用\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2021/02/23/golden-age/\"\u003e\n        \n          编程的黄金时代结束了吗？\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2021-02-18T00:00:00Z",
  "Author": "老齐教室"
}