{
  "Source": "qiwsir.github.io",
  "Title": "让Python程序跑得更快",
  "Link": "https://qiwsir.github.io/2020/01/17/%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e让Python程序跑得更快\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-01-17\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e来源：\u003ca href=\"https://martinheinz.dev/blog/13\" target=\"_blank\" rel=\"noopener\"\u003ehttps://martinheinz.dev/blog/13\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e作者：Martin\u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e讨厌Python的人总是说，他们不想使用Python的原因之一是它的速度太慢。这是一种非常愚蠢的观点。不管使用哪种编程语言，具体的程序是快还是慢，在很大程度上取决于写代码的人的技术能力，而非语言本身。\u003c/p\u003e\n\u003cp\u003e所以，让我们来证明一些人是错的，看看如何提高Python程序的性能，让它们变得非常快！\u003c/p\u003e\n\u003ch2 id=\"计时和剖析\"\u003e\u003ca href=\"#计时和剖析\" class=\"headerlink\" title=\"计时和剖析\"\u003e\u003c/a\u003e计时和剖析\u003c/h2\u003e\u003cp\u003e在开始优化任何东西之前，我们首先需要找出代码的哪些部分实际上会减慢整个程序的速度。有时，程序的瓶颈可能很明显，但如果你不知道它在哪里，下面演示一种找到它的方法：\u003c/p\u003e\n\u003cp\u003e注意：这是我将要用于演示的程序，它计算自然常数e的X次幂（参考了Python文档）：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# slow_program.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom decimal import *\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef exp(x):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    getcontext().prec += 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    i, lasts, s, fact, num = 0, 0, 1, 1, 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    while s != lasts:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        lasts = s\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        i += 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fact *= i\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        num *= x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        s += num / fact\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    getcontext().prec -= 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return +s\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexp(Decimal(150))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexp(Decimal(400))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexp(Decimal(3000))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"最懒的做法\"\u003e\u003ca href=\"#最懒的做法\" class=\"headerlink\" title=\"最懒的做法\"\u003e\u003c/a\u003e最懒的做法\u003c/h3\u003e\u003cp\u003e首先，最简单、最懒的解决方案，使用Unix的time命令：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e~ $ time python3 slow_program.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereal 0m11,058s\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003euser 0m11,050s\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esys  0m0,008s\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果你只想给整个程序计时，这样做是可行的。但仅仅计时通常是不够的…\u003c/p\u003e\n\u003ch3 id=\"深入分析\"\u003e\u003ca href=\"#深入分析\" class=\"headerlink\" title=\"深入分析\"\u003e\u003c/a\u003e深入分析\u003c/h3\u003e\u003cp\u003e使用cProfile，它会给你提供很多信息：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e~ $ python3 -m cProfile -s time slow_program.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         1297 function calls (1272 primitive calls) in 11.081 seconds\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   Ordered by: internal time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        3   11.079    3.693   11.079    3.693 slow_program.py:4(exp)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        1    0.000    0.000    0.002    0.002 {built-in method _imp.create_dynamic}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      4/1    0.000    0.000   11.081   11.081 {built-in method builtins.exec}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        6    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x9d12c0}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        6    0.000    0.000    0.000    0.000 abc.py:132(__new__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       23    0.000    0.000    0.000    0.000 _weakrefset.py:36(__init__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      245    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        2    0.000    0.000    0.000    0.000 {built-in method marshal.loads}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       10    0.000    0.000    0.000    0.000 \u0026lt;frozen importlib._bootstrap_external\u0026gt;:1233(find_spec)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      8/4    0.000    0.000    0.000    0.000 abc.py:196(__subclasscheck__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       15    0.000    0.000    0.000    0.000 {built-in method posix.stat}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        6    0.000    0.000    0.000    0.000 {built-in method builtins.__build_class__}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        1    0.000    0.000    0.000    0.000 __init__.py:357(namedtuple)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       48    0.000    0.000    0.000    0.000 \u0026lt;frozen importlib._bootstrap_external\u0026gt;:57(_path_join)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e       48    0.000    0.000    0.000    0.000 \u0026lt;frozen importlib._bootstrap_external\u0026gt;:59(\u0026lt;listcomp\u0026gt;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        1    0.000    0.000   11.081   11.081 slow_program.py:1(\u0026lt;module\u0026gt;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，我们使用cProfile模块和time参数运行测试脚本，以便按cumtime对行进行排序。这给了我们很多信息，你可以看到上面的行大约是实际输出的10%。由此我们可以看出exp函数是罪魁祸首（惊奇吧！）。现在我们可以更具体地计时和剖析…\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/my_book4_20200116132005.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch3 id=\"给特定函数计时\"\u003e\u003ca href=\"#给特定函数计时\" class=\"headerlink\" title=\"给特定函数计时\"\u003e\u003c/a\u003e给特定函数计时\u003c/h3\u003e\u003cp\u003e既然我们知道该将注意力集中在哪里，就可能希望对执行慢的函数计时，而不对代码的其余部分计时。为此，我们可以使用简单的装饰器：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef timeit_wrapper(func):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    @wraps(func)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def wrapper(*args, **kwargs):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        start = time.perf_counter()  # Alternatively, you can use time.process_time()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        func_return_val = func(*args, **kwargs)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        end = time.perf_counter()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(\u0026#39;{0:\u0026lt;10}.{1:\u0026lt;8} : {2:\u0026lt;8}\u0026#39;.format(func.__module__, func.__name__, end - start))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return func_return_val\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return wrapper\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个装饰器可以应用于将要执行的函数，如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e@timeit_wrapper\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef exp(x):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u0026#39;{0:\u0026lt;10} {1:\u0026lt;8} {2:^8}\u0026#39;.format(\u0026#39;module\u0026#39;, \u0026#39;function\u0026#39;, \u0026#39;time\u0026#39;))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexp(Decimal(150))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexp(Decimal(400))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexp(Decimal(3000))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这会带来如下的输出：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e~ $ python3.8 slow_program.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emodule     function   time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__main__  .exp      : 0.003267502994276583\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__main__  .exp      : 0.038535295985639095\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__main__  .exp      : 11.728486061969306\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们要考虑的一件事是实际（想要）测量的是什么样的时间。标准库中的time模块有\u003ccode\u003etime.perf_counter\u003c/code\u003e和\u003ccode\u003etime.process_time\u003c/code\u003e，区别是\u003ccode\u003eperf_counter\u003c/code\u003e返回绝对值，其中包括Python程序进程未运行的时间，因此它可能会受到机器负载的影响。另一方面，\u003ccode\u003eprocess_time\u003c/code\u003e只返回用户时间（不包括系统时间），这只是过程的时间。\u003c/p\u003e\n\u003ch2 id=\"加速程序的方法\"\u003e\u003ca href=\"#加速程序的方法\" class=\"headerlink\" title=\"加速程序的方法\"\u003e\u003c/a\u003e加速程序的方法\u003c/h2\u003e\u003cp\u003e现在到了有趣的部分：让你的Python程序运行得更快。我（基本上）不会向你展示一些能够神奇地解决性能问题的黑客技巧和代码片段。这里更多的是常规的想法和策略，它们在使用中可以对性能产生巨大的影响，在某些情况下可以提高30%的速度。\u003c/p\u003e\n\u003ch3 id=\"使用内置数据类型\"\u003e\u003ca href=\"#使用内置数据类型\" class=\"headerlink\" title=\"使用内置数据类型\"\u003e\u003c/a\u003e使用内置数据类型\u003c/h3\u003e\u003cp\u003e这一点很明显，内置数据类型非常快，特别是与我们的自定义类型（如树或链表）相比。这主要是因为内置代码是用C实现的，用Python编写代码时，我们在速度上无法真正与之匹配。\u003c/p\u003e\n\u003ch3 id=\"使用lru-cache的缓存机制\"\u003e\u003ca href=\"#使用lru-cache的缓存机制\" class=\"headerlink\" title=\"使用lru_cache的缓存机制\"\u003e\u003c/a\u003e使用lru_cache的缓存机制\u003c/h3\u003e\u003cp\u003e所谓lru_cache，其含义为： LRU (least recently used) cache，最近最少缓存应用。下面用一个简单的例子来说明：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport functools\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# caching up to 12 different results\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e@functools.lru_cache(maxsize=12)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef slow_func(x):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    time.sleep(2)  # Simulate long computation\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eslow_func(1)  # ... waiting for 2 sec before getting result\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eslow_func(1)  # already cached - result returned instantaneously!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eslow_func(3)  # ... waiting for 2 sec before getting result\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的函数使用\u003ccode\u003etime.sleep\u003c/code\u003e模拟繁重的计算。当使用参数\u003ccode\u003e1\u003c/code\u003e第一次调用时，它等待2秒，然后才返回结果。再次调用时，结果已被缓存，因此它跳过函数体并立即返回结果。\u003c/p\u003e\n\u003ch3 id=\"使用局部变量\"\u003e\u003ca href=\"#使用局部变量\" class=\"headerlink\" title=\"使用局部变量\"\u003e\u003c/a\u003e使用局部变量\u003c/h3\u003e\u003cp\u003e这与在每个范围内查找变量的速度有关。编写代码的时候，要将变量控制在局部的作用域内，作用域不仅仅关系到使用局部变量还是全局变量。实际上，即使是在函数(最快)中的局部变量、类级属性(如self.name——较慢)和全局变量(如 time.time（最慢）这样的导入函数)之间，查找速度也存在差异。\u003c/p\u003e\n\u003cp\u003e你可以通过执行看起来不必要的（没有直接用处的）任务来提高性能，比如：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e#  Example #1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclass FastClass:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def do_stuff(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        temp = self.value  # this speeds up lookup in loop\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        for i in range(10000):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ...  # Do something with `temp` here\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#  Example #2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport random\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef fast_function():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    r = random.random\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i in range(10000):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(r())  # calling `r()` here, is faster than global random.random()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/Django2%E7%AB%8B%E4%BD%93%E5%9B%BE_20200117164816.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch3 id=\"使用函数\"\u003e\u003ca href=\"#使用函数\" class=\"headerlink\" title=\"使用函数\"\u003e\u003c/a\u003e使用函数\u003c/h3\u003e\u003cp\u003e这似乎有悖常理，因为调用函数会把更多的东西放到堆栈中，并从函数返回中造成额外负担，但这与前面的观点有关。如果只将整个代码放在一个文件中而不将其放在函数中，则会因为全局变量而慢得多。因此，只需将整个代码包装在main函数中并调用一次，就可以加快代码的速度，如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef main():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...  # All your previously global code\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emain()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"不访问属性\"\u003e\u003ca href=\"#不访问属性\" class=\"headerlink\" title=\"不访问属性\"\u003e\u003c/a\u003e不访问属性\u003c/h3\u003e\u003cp\u003e另一个可能会减慢程序运行速度的因素是访问对象属性时使用的点运算符（\u003ccode\u003e.\u003c/code\u003e）。此运算符实际通过\u003ccode\u003e__getattribute__\u003c/code\u003e触发字典查找，这会在代码中产生额外的负担。那么，我们如何才能真正避免（限制）使用它呢？\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e#  Slow:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport re\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef slow_func():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i in range(10000):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        re.findall(regex, line)  # Slow!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#  Fast:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom re import findall\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef fast_func():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i in range(10000):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        findall(regex, line)  # Faster!\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"当心字符串\"\u003e\u003ca href=\"#当心字符串\" class=\"headerlink\" title=\"当心字符串\"\u003e\u003c/a\u003e当心字符串\u003c/h3\u003e\u003cp\u003e使用诸如\u003ccode\u003emodulus(%s)\u003c/code\u003e或\u003ccode\u003e.format()\u003c/code\u003e之类的方法在循环中运行时，对字符串的操作可能会变得非常慢。我们还有什么更好的选择？根据Raymond Hettinger最近的推文，唯一应该使用的是f-string，它是最可读、最简洁、最快的方法。因此，根据这条推文，这是你可以使用的方法——下面所列为各种方法从最快到最慢：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ef\u0026#39;{s} {t}\u0026#39;  # Fast!\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003es + \u0026#39;  \u0026#39; + t\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39; \u0026#39;.join((s, t))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;%s %s\u0026#39; % (s, t)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;{} {}\u0026#39;.format(s, t)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTemplate(\u0026#39;$s $t\u0026#39;).substitute(s=s, t=t)  # Slow!\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"生成器可以很快\"\u003e\u003ca href=\"#生成器可以很快\" class=\"headerlink\" title=\"生成器可以很快\"\u003e\u003c/a\u003e生成器可以很快\u003c/h3\u003e\u003cp\u003e生成器本身并不能变快，因为它们是为允许惰性计算而设计的，这样可以节省内存而不是时间。但是，节省的内存可能会使程序实际上运行得更快。怎样会这样？好吧，如果你有大型数据集，并且不使用生成器（迭代器），那么数据可能会导致CUP溢出，这将大大减慢在内存中查找值的速度。\u003c/p\u003e\n\u003cp\u003e在性能方面，CPU可以尽可能地保存它正在处理的所有数据，这一点非常重要，这些数据都在缓存中。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e优化的第一条规则是不要这样做。但是，如果你真的需要的话，我希望这几条建议能帮到你。如果你想阅读更多的Python文章，请关注“\u003cstrong\u003e老齐教室\u003c/strong\u003e”微信公众号，会不断推出这方面的文章。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关注微信公众号：老齐教室。读深度文章，得精湛技艺，享绚丽人生。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#Python 缓存 程序 速度\"\u003e\n    \u003cspan class=\"tag-code\"\u003ePython 缓存 程序 速度\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/01/16/%E5%A0%86%E6%8E%92%E5%BA%8F/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python中的堆排序\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/01/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/\"\u003e\n        \n          最适合你学习的深度学习框架\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-01-17T00:00:00Z",
  "Author": "老齐教室"
}