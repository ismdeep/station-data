{
  "Source": "qiwsir.github.io",
  "Title": "用4个简单的函数提升for循环",
  "Link": "https://qiwsir.github.io/2020/05/26/built-in-funtions-for-loop/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e用4个简单的函数提升for循环\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-05-26\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：Yong Cui, Ph.D.\u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e与本文相关的图书推荐：《Python大学实用教程》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/my_book4_20200116132005.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e本书适合初学者使用，面向零基础学习者，详细讲述了Python语言的有关知识，并秉承面向对象这种主流开发思想。此外，书中配有大量的练习，学习者通过这些练习，更能体验到开发实践中的应用。\u003c/center\u003e\n\n\u003chr/\u003e\n\u003ch2 id=\"概要\"\u003e\u003ca href=\"#概要\" class=\"headerlink\" title=\"概要\"\u003e\u003c/a\u003e概要\u003c/h2\u003e\u003cp\u003e在Python中，for循环经常被用于获得序列或者容器类的元素，比较让人熟知的就是针对可迭代对象的循环。for循环的基本语法如下：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efor item in iterable:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # do something here\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通常，可迭代对象包括序列（如：列表、元组和range对象）和容器类对象（如字典、集合），下面看一些示例：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; # 循环列表\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for item in [1, 2, 3]:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     pass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; # 循环元组\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for item in (1, 2, 3):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     pass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; # 循环range\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for item in range(3):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     pass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; # 循环字典\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for item in {0: \u0026#39;a\u0026#39;, 1: \u0026#39;b\u0026#39;, 2: \u0026#39;c\u0026#39;}:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     pass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; # 循环集合\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for item in set([1, 2, 3]):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     pass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面那些示例中的循环对象，都是基本的可迭代对象，此外，我们还可以用用内置函数，让for循环中的操作更优化，它们是：\u003ccode\u003eenumerate(), reversed(), sorted(), 和 zip()\u003c/code\u003e，在本文中，我将向您说明这些函数的用法。\u003c/p\u003e\n\u003ch2 id=\"enumerate-函数\"\u003e\u003ca href=\"#enumerate-函数\" class=\"headerlink\" title=\"enumerate()函数\"\u003e\u003c/a\u003e\u003ccode\u003eenumerate()\u003c/code\u003e函数\u003c/h2\u003e\u003cp\u003e第一个要介绍的内置函数是\u003ccode\u003eenumerate(iterable, start=0)\u003c/code\u003e，它的参数是一个可迭代对象，返回枚举对象。参数\u003ccode\u003estart\u003c/code\u003e的默认值是0，也可以随意设置，它表示迭代开始编号。\u003c/p\u003e\n\u003cp\u003e例如，有一个列表，里面是公司员工的姓名，我们想给每个员工确定一个员工ID，可以使用\u003ccode\u003eenumerate()\u003c/code\u003e函数这样实现：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; employees = [\u0026#39;John\u0026#39;, \u0026#39;Danny\u0026#39;, \u0026#39;Jennifer\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for id_number, name in enumerate(employees, start=30001):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(f\u0026#34;{name}\u0026#39;s employee ID #: {id_number}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eJohn\u0026#39;s employee ID #: 30001\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDanny\u0026#39;s employee ID #: 30002\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eJennifer\u0026#39;s employee ID #: 30003\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如上所示，我们创建了一个包含员工姓名的列表，它作为可迭代对象传给函数\u003ccode\u003eenumerate()\u003c/code\u003e，并且，\u003ccode\u003estart\u003c/code\u003e参数设置为\u003ccode\u003e30001\u003c/code\u003e，表示员工ID开始的编号。如你所见，每次循环，我们就得到了编号和列表中相应的元素。最后，根据我们的要求将结果打印出来。\u003c/p\u003e\n\u003ch2 id=\"reversed-函数\"\u003e\u003ca href=\"#reversed-函数\" class=\"headerlink\" title=\"reversed()函数\"\u003e\u003c/a\u003e\u003ccode\u003ereversed()\u003c/code\u003e函数\u003c/h2\u003e\u003cp\u003e第二个内置函数\u003ccode\u003ereversed(seq)\u003c/code\u003e，它以序列对象为参数（例如：元组和列表），返回一个反序的迭代器对象，本质上，这个函数的作用是将传入的序列对象中元素的排列顺序反序。\u003c/p\u003e\n\u003cp\u003e假设你的午餐如下面的列表所示，因为新冠病毒，就不要下馆子了。在接下来的一周内，你也不知道怎么变换吃的花样，于是，就干脆将列表中的食物反序吧。为此，我们可以使用\u003ccode\u003ereversed()\u003c/code\u003e函数。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; meals = [\u0026#39;pizza\u0026#39;, \u0026#39;hamberger\u0026#39;, \u0026#39;pasta\u0026#39;, \u0026#39;ramen\u0026#39;, \u0026#39;salad\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for meal in reversed(meals):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(meal)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esalad\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eramen\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epasta\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehamberger\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epizza\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e由上面代码可知，利用函数\u003ccode\u003ereversed()\u003c/code\u003e，得到了按变量\u003ccode\u003emeals\u003c/code\u003e中元素的相反顺序排列的食物。注意，对于\u003ccode\u003elist\u003c/code\u003e对象而言，也有一个\u003ccode\u003ereverse()\u003c/code\u003e方法，它能够原地将列表反序，即不会返回新的对象，或者说，只返回了\u003ccode\u003eNone\u003c/code\u003e，这个操作不能用于for循环中，比如：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for meal in meals.reverse():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(meal)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTypeError: \u0026#39;NoneType\u0026#39; object is not iterable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; meals.reverse() is None\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTrue\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"sorted\"\u003e\u003ca href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"\u003e\u003c/a\u003e\u003ccode\u003esorted()\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e第三个内置函数式\u003ccode\u003esorted(iterable, *, key=None, reverse=False)\u003c/code\u003e，其参数是可迭代对象，返回一个新的排序了的列表。需要注意两个关键词参数的使用，\u003ccode\u003ekey\u003c/code\u003e，通过它可以指定一个含有一个参数的函数，用这个函数比较可迭代对象中的每个元素；\u003ccode\u003ereverse\u003c/code\u003e用于指定排序方式，如果为\u003ccode\u003eTrue\u003c/code\u003e表示反序。\u003c/p\u003e\n\u003cp\u003e假设一个员工列表，其中每个元素表示一个员工对象，每个员工对象包含名字和上一季度的绩效考核分数。我们需要根据绩效考核的分数对员工进行排序。下面的代码演示了实现方法：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; class Employee:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __init__(self, name, score):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.score = score\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; employee0 = Employee(\u0026#39;John Smith\u0026#39;, 95)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; employee1 = Employee(\u0026#39;Mike Brown\u0026#39;, 99)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; employee2 = Employee(\u0026#39;Jennifer Thompson\u0026#39;, 97)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; employees = [employee0, employee1, employee2]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for employee in sorted(employees, key=lambda x: x.score, reverse=True):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(f\u0026#39;{employee.name} Score: {employee.score}\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMike Brown Score: 99\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eJennifer Thompson Score: 97\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eJohn Smith Score: 95\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在上面的代码中，我们自定义了一个类\u003ccode\u003eEmployee\u003c/code\u003e，用它来创建员工实例，并存储姓名和分数。然后创建3个员工实例，并将这三个员工实例存入一个列表中，这个列表将作为可迭代对象传给\u003ccode\u003esorted()\u003c/code\u003e函数。\u003cstrong\u003e注意：\u003c/strong\u003e参数\u003ccode\u003ekey\u003c/code\u003e的值，我们编写了一个lambda函数，它会对列表中每个员工实例的\u003ccode\u003escore\u003c/code\u003e属性进行比较。\u003ccode\u003ereverse\u003c/code\u003e参数的值设置为\u003ccode\u003eTrue\u003c/code\u003e，在输出结果中，会按照分数从大到小排序。\u003c/p\u003e\n\u003cp\u003e与\u003ccode\u003ereversed()\u003c/code\u003e类似，列表对象有一个\u003ccode\u003esort()\u003c/code\u003e方法，它能够对列表进行原地排序，所以，我们不能直接在for循环中用\u003ccode\u003elist.sort()\u003c/code\u003e方法。另外一个重要区别是，\u003ccode\u003esorted()\u003c/code\u003e函数可以用任何可迭代对象为参数（比如：元组、字典），这使它在排序上的能力比\u003ccode\u003esort()\u003c/code\u003e方法强悍，后者只能作为列表对象的方法。\u003c/p\u003e\n\u003ch2 id=\"zip-函数\"\u003e\u003ca href=\"#zip-函数\" class=\"headerlink\" title=\"zip()函数\"\u003e\u003c/a\u003e\u003ccode\u003ezip()\u003c/code\u003e函数\u003c/h2\u003e\u003cp\u003e第四个内置函数是\u003ccode\u003ezip(*iterables)\u003c/code\u003e，可以用一个或多个可迭代对象作为参数，会返回一个迭代器对象，并且将参数中的可迭代对象的元素对应合并，合并后的元素以元组形式组合，如合并后的第1个元组中包含作为参数的每个可迭代对象中的第1个元素。\u003c/p\u003e\n\u003cp\u003e假设有两个整数作为元素的列表，我们需要相对应整数的乘积，就可以使用\u003ccode\u003ezip()\u003c/code\u003e函数来实现这个操作：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; numbers0 = [4, 5, 6]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; numbers1 = [11, 12, 13]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for j, k in zip(numbers0, numbers1):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(f\u0026#39;{j} * {k} = {j*k}\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 * 11 = 44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 * 12 = 60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 * 13 = 78\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在上面的代码中，首先创建了两个列表\u003ccode\u003enumbers0\u003c/code\u003e和\u003ccode\u003enumbers1\u003c/code\u003e，将它们传给\u003ccode\u003ezip()\u003c/code\u003e函数，返回的元组中包含了对应的数字。\u003c/p\u003e\n\u003cp\u003e一个需要注意的是，\u003ccode\u003ezip()\u003c/code\u003e函数返回的迭代器对象的长度，是以参数中最短的可迭代对象为准。例如下面的示例，两个字符串的长度不同，最后得到的迭代器对象只有3个元组，并且，必须用\u003ccode\u003elist()\u003c/code\u003e函数对迭代器对象进行转换，才能显示其具体内容。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; letters0 = \u0026#39;abcde\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; letters1 = \u0026#39;xyz\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; list(zip(letters0, letters1))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[(\u0026#39;a\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;b\u0026#39;, \u0026#39;y\u0026#39;), (\u0026#39;c\u0026#39;, \u0026#39;z\u0026#39;)]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"要点总结\"\u003e\u003ca href=\"#要点总结\" class=\"headerlink\" title=\"要点总结\"\u003e\u003c/a\u003e要点总结\u003c/h2\u003e\u003cp\u003e本文主要探讨了for循环中使用的4个内置函数。这些函数的特点如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eenumerate()\u003c/code\u003e函数允许创建循环的计数起点。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ereversed()\u003c/code\u003e函数的作用主要是对序列进行反序。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esorted()\u003c/code\u003e函数能够对任何可迭代对象进行排序，并且可以灵活地指定任何排序关键词。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ezip()\u003c/code\u003e函数主要用于组合可迭代对象中对应的元素，并返回一个迭代器对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://medium.com/swlh/level-up-for-loops-in-python-with-4-simple-functions-da01173a834c\" target=\"_blank\" rel=\"noopener\"\u003ehttps://medium.com/swlh/level-up-for-loops-in-python-with-4-simple-functions-da01173a834c\u003c/a\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp style=\"text-align:center\"\u003e专注于\u003cstrong\u003e软件和AI\u003c/strong\u003e的公众号\u003c/p\u003e\n\u003cp style=\"text-align:center\"\u003e\u003cstrong\u003e老齐教室\u003c/strong\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/05/25/child-python-one/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          青少年编程：用Python探究数学（1）\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/05/26/quantum-computing-one/\"\u003e\n        \n          什么是量子计算\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-05-26T00:00:00Z",
  "Author": "老齐教室"
}