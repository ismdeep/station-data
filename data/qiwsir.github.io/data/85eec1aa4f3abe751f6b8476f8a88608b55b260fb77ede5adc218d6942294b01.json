{
  "Source": "qiwsir.github.io",
  "Title": "Python中的命名空间和作用域",
  "Link": "https://qiwsir.github.io/2020/08/12/python-namespace/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003ePython中的命名空间和作用域\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-08-12\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e编译：老齐\u003c/p\u003e\n\u003cp\u003e本文将介绍Python命名空间和作用域，它们用于分配Python程序中的对象。Python语言是一种能够实现面向对象编程的高级语言，或者说，在Python中，“万物皆对象”。\u003c/p\u003e\n\u003cp\u003e例如，\u003ccode\u003ex = \u0026#39;foo\u0026#39;\u003c/code\u003e中的\u003ccode\u003ex\u003c/code\u003e是一个变量，它应用了字符串对象\u003ccode\u003e\u0026#39;foo\u0026#39;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e在一个复杂的程序中，会创建成百上千个这样的变量名称或者函数名称、类名称等，每个名称都指向特定的对象。Python如何跟踪所有这些名称，以便它们不会相互干扰呢？\u003c/p\u003e\n\u003cp\u003e接下来就解决这个问题。\u003c/p\u003e\n\u003ch2 id=\"命名空间\"\u003e\u003ca href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"\u003e\u003c/a\u003e命名空间\u003c/h2\u003e\u003cp\u003e命名空间是当前定义的符号名称以及每个符号名称所引用的对象的信息的集合。可以将命名空间视为字典，其中键是对象名称，值是对象本身。每个键值对将一个名称映射到它所对应的对象。\u003c/p\u003e\n\u003cp\u003e正如《Python之禅》中所说的那样：命名空间是一个很棒的创意，让我们多做些这样的创意！\u003c/p\u003e\n\u003cp\u003e何止很棒，简直是绝妙。\u003c/p\u003e\n\u003cp\u003e在Python中，一共有三种类型的命名空间：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内置（built-in），Python语言内置的名称，比如函数名\u003ccode\u003eabs\u003c/code\u003e、\u003ccode\u003echar\u003c/code\u003e和异常名称\u003ccode\u003eBaseException\u003c/code\u003e、\u003ccode\u003eException\u003c/code\u003e等等。\u003c/li\u003e\n\u003cli\u003e全局（global），模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。\u003c/li\u003e\n\u003cli\u003e局部（local），函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://www.runoob.com/wp-content/uploads/2014/05/types_namespace-1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e每个命名空间有不同的声明周期，当Python执行一个程序时，会根据需要创建命名空间，并在不需要时删除。通常，在任何给定的时间都会存在许多命名空间。\u003c/p\u003e\n\u003ch3 id=\"内置命名空间\"\u003e\u003ca href=\"#内置命名空间\" class=\"headerlink\" title=\"内置命名空间\"\u003e\u003c/a\u003e内置命名空间\u003c/h3\u003e\u003cp\u003e内置命名空间包含Python所有内置对象的名称。当Python运行时，这些可以直接使用。你可以用以下命令列出内置命名空间中的对象：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; dir(__builtins__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u0026#39;ArithmeticError\u0026#39;, \u0026#39;AssertionError\u0026#39;, \u0026#39;AttributeError\u0026#39;, \u0026#39;BaseException\u0026#39;,\u0026#39;BlockingIOError\u0026#39;, \u0026#39;BrokenPipeError\u0026#39;, \u0026#39;BufferError\u0026#39;, \u0026#39;BytesWarning\u0026#39;, \u0026#39;ChildProcessError\u0026#39;, \u0026#39;ConnectionAbortedError\u0026#39;, \u0026#39;ConnectionError\u0026#39;, \u0026#39;ConnectionRefusedError\u0026#39;, \u0026#39;ConnectionResetError\u0026#39;, \u0026#39;DeprecationWarning\u0026#39;, \u0026#39;EOFError\u0026#39;, \u0026#39;Ellipsis\u0026#39;, \u0026#39;EnvironmentError\u0026#39;, \u0026#39;Exception\u0026#39;, \u0026#39;False\u0026#39;, \u0026#39;FileExistsError\u0026#39;, \u0026#39;FileNotFoundError\u0026#39;, \u0026#39;FloatingPointError\u0026#39;, \u0026#39;FutureWarning\u0026#39;, \u0026#39;GeneratorExit\u0026#39;, \u0026#39;IOError\u0026#39;, \u0026#39;ImportError\u0026#39;, \u0026#39;ImportWarning\u0026#39;, \u0026#39;IndentationError\u0026#39;, \u0026#39;IndexError\u0026#39;, \u0026#39;InterruptedError\u0026#39;, \u0026#39;IsADirectoryError\u0026#39;, \u0026#39;KeyError\u0026#39;, \u0026#39;KeyboardInterrupt\u0026#39;, \u0026#39;LookupError\u0026#39;, \u0026#39;MemoryError\u0026#39;, \u0026#39;ModuleNotFoundError\u0026#39;, \u0026#39;NameError\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;NotADirectoryError\u0026#39;, \u0026#39;NotImplemented\u0026#39;, \u0026#39;NotImplementedError\u0026#39;, \u0026#39;OSError\u0026#39;, \u0026#39;OverflowError\u0026#39;, \u0026#39;PendingDeprecationWarning\u0026#39;, \u0026#39;PermissionError\u0026#39;, \u0026#39;ProcessLookupError\u0026#39;, \u0026#39;RecursionError\u0026#39;, \u0026#39;ReferenceError\u0026#39;, \u0026#39;ResourceWarning\u0026#39;, \u0026#39;RuntimeError\u0026#39;, \u0026#39;RuntimeWarning\u0026#39;, \u0026#39;StopAsyncIteration\u0026#39;, \u0026#39;StopIteration\u0026#39;, \u0026#39;SyntaxError\u0026#39;, \u0026#39;SyntaxWarning\u0026#39;, \u0026#39;SystemError\u0026#39;, \u0026#39;SystemExit\u0026#39;, \u0026#39;TabError\u0026#39;, \u0026#39;TimeoutError\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;TypeError\u0026#39;, \u0026#39;UnboundLocalError\u0026#39;, \u0026#39;UnicodeDecodeError\u0026#39;, \u0026#39;UnicodeEncodeError\u0026#39;, \u0026#39;UnicodeError\u0026#39;, \u0026#39;UnicodeTranslateError\u0026#39;, \u0026#39;UnicodeWarning\u0026#39;, \u0026#39;UserWarning\u0026#39;, \u0026#39;ValueError\u0026#39;, \u0026#39;Warning\u0026#39;, \u0026#39;ZeroDivisionError\u0026#39;, \u0026#39;_\u0026#39;, \u0026#39;__build_class__\u0026#39;, \u0026#39;__debug__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__import__\u0026#39;, \u0026#39;__loader__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__package__\u0026#39;, \u0026#39;__spec__\u0026#39;, \u0026#39;abs\u0026#39;, \u0026#39;all\u0026#39;, \u0026#39;any\u0026#39;, \u0026#39;ascii\u0026#39;, \u0026#39;bin\u0026#39;, \u0026#39;bool\u0026#39;, \u0026#39;bytearray\u0026#39;, \u0026#39;bytes\u0026#39;, \u0026#39;callable\u0026#39;, \u0026#39;chr\u0026#39;, \u0026#39;classmethod\u0026#39;, \u0026#39;compile\u0026#39;, \u0026#39;complex\u0026#39;, \u0026#39;copyright\u0026#39;, \u0026#39;credits\u0026#39;, \u0026#39;delattr\u0026#39;, \u0026#39;dict\u0026#39;, \u0026#39;dir\u0026#39;, \u0026#39;divmod\u0026#39;, \u0026#39;enumerate\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;exit\u0026#39;, \u0026#39;filter\u0026#39;, \u0026#39;float\u0026#39;, \u0026#39;format\u0026#39;, \u0026#39;frozenset\u0026#39;, \u0026#39;getattr\u0026#39;, \u0026#39;globals\u0026#39;, \u0026#39;hasattr\u0026#39;, \u0026#39;hash\u0026#39;, \u0026#39;help\u0026#39;, \u0026#39;hex\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;int\u0026#39;, \u0026#39;isinstance\u0026#39;, \u0026#39;issubclass\u0026#39;, \u0026#39;iter\u0026#39;, \u0026#39;len\u0026#39;, \u0026#39;license\u0026#39;, \u0026#39;list\u0026#39;, \u0026#39;locals\u0026#39;, \u0026#39;map\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;memoryview\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;next\u0026#39;, \u0026#39;object\u0026#39;, \u0026#39;oct\u0026#39;, \u0026#39;open\u0026#39;, \u0026#39;ord\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;print\u0026#39;, \u0026#39;property\u0026#39;, \u0026#39;quit\u0026#39;, \u0026#39;range\u0026#39;, \u0026#39;repr\u0026#39;, \u0026#39;reversed\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;set\u0026#39;, \u0026#39;setattr\u0026#39;, \u0026#39;slice\u0026#39;, \u0026#39;sorted\u0026#39;, \u0026#39;staticmethod\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;sum\u0026#39;, \u0026#39;super\u0026#39;, \u0026#39;tuple\u0026#39;, \u0026#39;type\u0026#39;, \u0026#39;vars\u0026#39;, \u0026#39;zip\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003ePython解释器在启动时直接创建内置命名空间，并且这个命名空间一直存在，直到解释器终止。\u003c/p\u003e\n\u003ch3 id=\"全局命名空间\"\u003e\u003ca href=\"#全局命名空间\" class=\"headerlink\" title=\"全局命名空间\"\u003e\u003c/a\u003e全局命名空间\u003c/h3\u003e\u003cp\u003e全局命名空间包含主程序级别定义的任何名称。Python在主程序启动时创建全局命名空间，它一直存在，直到解释器终止。\u003c/p\u003e\n\u003cp\u003e严格地说，这可能不是唯一存在的全局命名空间。解释器还为程序使用\u003ccode\u003eimport\u003c/code\u003e语句加载的任何模块创建一个全局命名空间。\u003c/p\u003e\n\u003ch3 id=\"局部命名空间\"\u003e\u003ca href=\"#局部命名空间\" class=\"headerlink\" title=\"局部命名空间\"\u003e\u003c/a\u003e局部命名空间\u003c/h3\u003e\u003cp\u003e局部命名空间，也可以翻译为“本地命名空间”。比如函数，每一个函数一旦运行，就创建了一个新的命名空间，这个命名空间是函数的本地命名空间，它的存在一直持续到函数终止。\u003c/p\u003e\n\u003cp\u003e函数并非彼此独立存在的，而且这种关联不限于主程序级别的函数，你也可以在另一个函数中定义一个函数，即嵌套函数：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(\u0026#39;Start f()\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def g():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#39;Start g()\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#39;End g()\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         return\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(\u0026#39;End f()\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     return\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e Start f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e Start g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e End g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e End f()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在本例中，函数\u003ccode\u003eg()\u003c/code\u003e是在\u003ccode\u003ef()\u003c/code\u003e的内定义的，这种方式所定义的函数称为嵌套函数，也称为“闭包”——更详细解释，请参阅《Python大学实用教程》一书的有关章节。\u003c/p\u003e\n\u003cp\u003e当主程序调用\u003ccode\u003ef()\u003c/code\u003e时，Python会为\u003ccode\u003ef()\u003c/code\u003e创建一个新的命名空间。类似地，当\u003ccode\u003ef()\u003c/code\u003e调用\u003ccode\u003eg()\u003c/code\u003e时， \u003ccode\u003eg()\u003c/code\u003e将获得自己独立的命名空间。为\u003ccode\u003eg()\u003c/code\u003e创建的命名空间是本地命名空间，为\u003ccode\u003ef()\u003c/code\u003e创建的命名空间是闭包命名空间——与\u003ccode\u003eg()\u003c/code\u003e的命名空间名称区分，也可以认为两个都是局部命名空间。\u003c/p\u003e\n\u003cp\u003e局部命名空间的声明周期是自其建立开始，到它们各自的函数执行完毕终止。当这些命名空间的函数终止时，Python可能不会立即回收分配给这些命名空间的内存，但是对其中对象的所有引用都将失效。\u003c/p\u003e\n\u003ch2 id=\"变量作用域\"\u003e\u003ca href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"\u003e\u003c/a\u003e变量作用域\u003c/h2\u003e\u003cp\u003e有多个不同命名空间，这就意味着允许Python程序中可以在不同的命名空间中有几个不同实例同时存在——但是这些实例的名称相同。只要每个实例在不同的命名空间，它们都是单独维护的，不会相互干扰。\u003c/p\u003e\n\u003cp\u003e但这就产生了一个问题：假设你在代码中引用了名称\u003ccode\u003ex\u003c/code\u003e，并且\u003ccode\u003ex\u003c/code\u003e存在于多个命名空间中。Python怎么知道你指的是哪个命名空间？\u003c/p\u003e\n\u003cp\u003e答案就是“作用域”。名称的作用域是某个程序的区域，而在这个区域中该名称具有意义。解释器在运行时根据名称定义的位置以及名称在代码中被引用的位置来确定这一点。\u003c/p\u003e\n\u003cp\u003e例如代码中引用名称\u003ccode\u003ex\u003c/code\u003e，那么Python将按照以下的顺序搜索\u003ccode\u003ex\u003c/code\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e本地作用域：如果你在一个函数中引用\u003ccode\u003ex\u003c/code\u003e，那么解释器首先在该函数本地的最内部作用域内搜索它。\u003c/li\u003e\n\u003cli\u003e闭包作用域：如果\u003ccode\u003ex\u003c/code\u003e不在本地作用域中，而是出现在另一个函数内部的函数中，则解释器将搜索闭包函数的作用域。\u003c/li\u003e\n\u003cli\u003e全局作用域：如果以上两个搜索都没有结果，那么解释器接下来会查看全局作用域。\u003c/li\u003e\n\u003cli\u003e内置作用域：如果在其他地方找不到\u003ccode\u003ex\u003c/code\u003e，那么解释器将尝试内置的作用域。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://imgkr2.cn-bj.ufileos.com/91ecb61e-223b-416b-8744-6488f3e27b09.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13\u0026amp;Signature=N1udfqxlwg5B443WuIJxVbPvKn8%253D\u0026amp;Expires=1597022094\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这是Python文献中通常所称的LEGB规则（尽管Python文档中并没有实际出现这个术语）。解释器从内到外搜索名称，查找本地、闭包、全局，最后是内置作用域。\u003c/p\u003e\n\u003cp\u003e如果解释器在这些位置中找不到名称，那么Python将抛出NameError异常。\u003c/p\u003e\n\u003cp\u003e下面是LEGB规则的几个例子。在每种情况下，最里面的闭包函数\u003ccode\u003eg()\u003c/code\u003e 都试图向控制台显示名为\u003ccode\u003ex\u003c/code\u003e的变量的值。注意每个示例如何根据\u003ccode\u003ex\u003c/code\u003e的作用域打印\u003ccode\u003ex\u003c/code\u003e不同的值。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e例1：单一定义\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在第一个例子中，\u003ccode\u003ex\u003c/code\u003e只定义在\u003ccode\u003ef()\u003c/code\u003e和\u003ccode\u003eg()\u003c/code\u003e之外，因此它位于全局作用域：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; x = \u0026#39;global\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ...     def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 ...         print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8 ...     g() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 global\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e第6行的\u003ccode\u003eprint()\u003c/code\u003e语句只能引用一个可能的\u003ccode\u003ex\u003c/code\u003e，它显然是在全局命名空间中定义的\u003ccode\u003ex\u003c/code\u003e对象，即字符串\u003ccode\u003e“global”\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e例2：双重定义\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e在这个例子中，\u003ccode\u003ex\u003c/code\u003e的定义出现在两个地方，一个在\u003ccode\u003ef()\u003c/code\u003e之外；一个在\u003ccode\u003ef()\u003c/code\u003e内部，但在\u003ccode\u003eg()\u003c/code\u003e之外：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; x = \u0026#39;global\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ...     x = \u0026#39;enclosing\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 ...     def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 ...         print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 ...     g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13 enclosing\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与上一个示例一样，\u003ccode\u003eg()\u003c/code\u003e引用了\u003ccode\u003ex\u003c/code\u003e。但这一次，它有两个定义可供选择：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1行定义了全局作用域内的\u003ccode\u003ex\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e第4行在闭包作用域内再次定义了\u003ccode\u003ex\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e根据LEGB规则，解释器在查找全局作用域之前，先从闭包作用域中找到值。所以第7行的\u003ccode\u003eprint()\u003c/code\u003e语句显示\u003ccode\u003e“enclosing”\u003c/code\u003e而不是\u003ccode\u003e“global”\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e例3：三重定义\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e本示例中展示了关于\u003ccode\u003ex\u003c/code\u003e的三重定义。一个定义在\u003ccode\u003ef()\u003c/code\u003e之外；另一个定义在\u003ccode\u003ef()\u003c/code\u003e内部，但在\u003ccode\u003eg()\u003c/code\u003e之外；第三个定义在\u003ccode\u003eg()\u003c/code\u003e内部：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; x = \u0026#39;global\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ...     x = \u0026#39;enclosing\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 ...     def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 ...         x = \u0026#39;local\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8 ...         print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 ...     g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14 local\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在第8行的\u003ccode\u003eprint()\u003c/code\u003e语句必须区分三种不同的可能性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1行定义了全局作用域内的\u003ccode\u003ex\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e第4行在闭包作用域内再次定义了\u003ccode\u003ex\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e第7行在\u003ccode\u003eg()\u003c/code\u003e的本地作用域内又一次定义了\u003ccode\u003ex\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在这里，根据LEGB规则规定，\u003ccode\u003eg()\u003c/code\u003e首先看到自己在本地定义的\u003ccode\u003ex\u003c/code\u003e值。因此\u003ccode\u003eprint()\u003c/code\u003e 语句显示\u003ccode\u003e“local”\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e例4：无定义\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e最后的一个例子中， \u003ccode\u003eg()\u003c/code\u003e试图打印\u003ccode\u003ex\u003c/code\u003e的值，但是\u003ccode\u003ex\u003c/code\u003e在任何地方都没有定义。这种情况根本行不通：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 ...     def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ...         print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 ...     g() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 Traceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11   File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12   File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 6, in f\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13   File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 4, in g\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14 NameError: name \u0026#39;x\u0026#39; is not defined\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这一次，Python在任何命名空间中都找不到\u003ccode\u003ex\u003c/code\u003e，因此第4行的\u003ccode\u003eprint()\u003c/code\u003e语句抛出\u003ccode\u003eNameError\u003c/code\u003e异常。\u003c/p\u003e\n\u003ch2 id=\"Python命名空间词典\"\u003e\u003ca href=\"#Python命名空间词典\" class=\"headerlink\" title=\"Python命名空间词典\"\u003e\u003c/a\u003ePython命名空间词典\u003c/h2\u003e\u003cp\u003e前面提到，当首次介绍命名空间时，可以将命名空间视为字典，其中键是对象名称，值是对象本身。事实上，对于全局和本地命名空间，正是它们的本质！Python确实将这些命名空间作为字典实现。\u003c/p\u003e\n\u003cp\u003e注意：内置命名空间的用法不同于字典。Python将其作为一个模块来实现。\u003c/p\u003e\n\u003cp\u003ePython提供了名为\u003ccode\u003eglobals()\u003c/code\u003e和\u003ccode\u003elocals()\u003c/code\u003e的内置函数。这些内置函数允许你访问全局和本地的命名空间字典。\u003c/p\u003e\n\u003ch3 id=\"globals-函数\"\u003e\u003ca href=\"#globals-函数\" class=\"headerlink\" title=\"globals()函数\"\u003e\u003c/a\u003e\u003ccode\u003eglobals()\u003c/code\u003e函数\u003c/h3\u003e\u003cp\u003e内置函数\u003ccode\u003eglobals()\u003c/code\u003e返回对当前全局命名空间的字典，你可以使用它来访问全局命名空间中的对象。下面的示例体现了主程序启动时的情形：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; type(globals())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;dict\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; globals()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None,\u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None,\u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如你所见，解释器已经在\u003ccode\u003eglobals()\u003c/code\u003e中默认放置了一些内容，根据Python版本和操作系统的不同，它在你的环境中看起来可能会有所不同。但应该是相似的。\u003c/p\u003e\n\u003cp\u003e现在看看在全局作用域内定义变量时会发生什么：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x = \u0026#39;foo\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; globals()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None,\u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None,\u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;,\u0026#39;x\u0026#39;: \u0026#39;foo\u0026#39;}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在赋值语句\u003ccode\u003ex = \u0026#39;foo\u0026#39;\u003c/code\u003e之后，一个新的项出现在全局命名空间字典中。键是对象的名称\u003ccode\u003ex\u003c/code\u003e，值是对象的值\u003ccode\u003e“foo”\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e通常，你可以通过引用对象的符号名\u003ccode\u003ex\u003c/code\u003e，以常规的方式访问该对象。但是，你也可以通过全局命名空间字典间接访问它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; x \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2 \u0026#39;foo\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 \u0026gt;\u0026gt;\u0026gt; globals()[\u0026#39;x\u0026#39;] \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 \u0026#39;foo\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 \u0026gt;\u0026gt;\u0026gt; x is globals()[\u0026#39;x\u0026#39;] \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 True\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e第6行的比较证实了这些实际上是同一个对象。\u003c/p\u003e\n\u003cp\u003e还可以使用\u003ccode\u003eglobals()\u003c/code\u003e函数在全局命名空间中创建和修改条目：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; globals()[\u0026#39;y\u0026#39;] = 100 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 \u0026gt;\u0026gt;\u0026gt; globals() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 {\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 \u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 \u0026#39;x\u0026#39;: \u0026#39;foo\u0026#39;, \u0026#39;y\u0026#39;: 100} \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 \u0026gt;\u0026gt;\u0026gt; y\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 100\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u0026gt;\u0026gt;\u0026gt; globals()[\u0026#39;y\u0026#39;] = 3.1415913 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14 \u0026gt;\u0026gt;\u0026gt; y\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15 3.14159\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e第1行的语句与赋值语句\u003ccode\u003ey = 100\u003c/code\u003e具有相同的效果。第12行的语句相当于\u003ccode\u003ey = 3.14159\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e当简单的赋值语句就可以奏效时，就不要用\u003ccode\u003eglobals()\u003c/code\u003e来修改了，但它确实有效，而且很好地说明了这个概念。\u003c/p\u003e\n\u003ch3 id=\"locals-函数\"\u003e\u003ca href=\"#locals-函数\" class=\"headerlink\" title=\"locals()函数\"\u003e\u003c/a\u003e\u003ccode\u003elocals()\u003c/code\u003e函数\u003c/h3\u003e\u003cp\u003ePython还提供了一个相应的内置函数\u003ccode\u003elocals()\u003c/code\u003e。它类似于\u003ccode\u003eglobals()\u003c/code\u003e，但它访问的是本地命名空间中的对象：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f(x, y):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     s = \u0026#39;foo\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(locals())...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f(10, 0.5)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u0026#39;s\u0026#39;: \u0026#39;foo\u0026#39;, \u0026#39;y\u0026#39;: 0.5, \u0026#39;x\u0026#39;: 10}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在\u003ccode\u003ef()\u003c/code\u003e中调用\u003ccode\u003elocals()\u003c/code\u003e时，\u003ccode\u003elocals()\u003c/code\u003e返回表示函数的本地命名空间的字典。注意，除了本地定义的变量\u003ccode\u003es\u003c/code\u003e之外，本地命名空间还包括函数参数\u003ccode\u003ex\u003c/code\u003e和\u003ccode\u003ey\u003c/code\u003e，因为它们也是\u003ccode\u003ef()\u003c/code\u003e的本地参数。\u003c/p\u003e\n\u003cp\u003e如果在函数外部调用\u003ccode\u003elocals()\u003c/code\u003e ，那么它与\u003ccode\u003eglobals()\u003c/code\u003e用法相同。\u003c/p\u003e\n\u003ch3 id=\"深入探究\"\u003e\u003ca href=\"#深入探究\" class=\"headerlink\" title=\"深入探究\"\u003e\u003c/a\u003e深入探究\u003c/h3\u003e\u003cp\u003e\u003ccode\u003eglobals()\u003c/code\u003e和\u003ccode\u003elocals()\u003c/code\u003e之间有一个小的区别，了解这个区别是很有用的。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eglobals()\u003c/code\u003e返回包含全局命名空间的字典的实际引用。这意味着，如果调用\u003ccode\u003eglobals()\u003c/code\u003e，保存返回值，然后定义其他变量，那么这些新变量将显示在保存的返回值所指向的字典中：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; g = globals() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2 \u0026gt;\u0026gt;\u0026gt; g \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 {\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 \u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 \u0026#39;g\u0026#39;: {...}} \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8 \u0026gt;\u0026gt;\u0026gt; x = \u0026#39;foo\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 \u0026gt;\u0026gt;\u0026gt; y = 29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 \u0026gt;\u0026gt;\u0026gt; g\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 {\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13 \u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14 \u0026#39;g\u0026#39;: {...}, \u0026#39;x\u0026#39;: \u0026#39;foo\u0026#39;, \u0026#39;y\u0026#39;: 29}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里，\u003ccode\u003eg\u003c/code\u003e是对全局命名空间字典的引用。在第8行和第9行上的赋值语句之后，\u003ccode\u003ex\u003c/code\u003e和\u003ccode\u003ey\u003c/code\u003e出现在\u003ccode\u003eg\u003c/code\u003e所指向的字典中。\u003c/p\u003e\n\u003cp\u003e与上述不同，\u003ccode\u003elocals()\u003c/code\u003e虽然也返回一个字典，而该字典是本地命名空间的当前副本，而不是对它的引用。对本地命名空间的进一步添加不会影响以前从\u003ccode\u003elocals()\u003c/code\u003e返回的值，除非你再次调用它。此外，不能使用\u003ccode\u003elocals()\u003c/code\u003e的返回值来修改实际的本地命名空间中的对象：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e 1 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 2 ...     s = \u0026#39;foo\u0026#39; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 3 ...     loc = locals() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 4 ...     print(loc) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 5 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 6 ...     x = 20 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 7 ...     print(loc) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 8 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 9 ...     loc[\u0026#39;s\u0026#39;] = \u0026#39;bar\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 ...     print(s)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14 {\u0026#39;s\u0026#39;: \u0026#39;foo\u0026#39;}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15 {\u0026#39;s\u0026#39;: \u0026#39;foo\u0026#39;}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16 foo\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在本例中，\u003ccode\u003eloc\u003c/code\u003e指向\u003ccode\u003elocal()\u003c/code\u003e的返回值，它是本地命名空间的一个副本。第6行上的语句\u003ccode\u003ex = 20\u003c/code\u003e将\u003ccode\u003ex\u003c/code\u003e添加到本地名称空间，但不添加到\u003ccode\u003eloc\u003c/code\u003e指向的副本。类似地，第9行上的语句修改了\u003ccode\u003eloc\u003c/code\u003e所指向的副本中的键\u003ccode\u003e‘s\u0026#39;\u003c/code\u003e的值，但这对实际本地名称空间中的``s的值没有影响。\u003c/p\u003e\n\u003cp\u003e这是一个微妙的区别，但如果你不记住的话，可能会给你带来麻烦。\u003c/p\u003e\n\u003ch2 id=\"修改作用域之外的变量\"\u003e\u003ca href=\"#修改作用域之外的变量\" class=\"headerlink\" title=\"修改作用域之外的变量\"\u003e\u003c/a\u003e修改作用域之外的变量\u003c/h2\u003e\u003cp\u003e如果你已经读过《Python大学实用教程》这本书，一定已经知道Python中函数的参数，有的是按位置引用，有的是按值引用；有的参数值能够修改，有的不能修改。\u003c/p\u003e\n\u003cp\u003e下面代码演示了函数试图在其本地作用域之外修改变量时出现的问题：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; x = 20 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 ...     x = 40 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ...     print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 \u0026gt;\u0026gt;\u0026gt; f() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8 40 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 \u0026gt;\u0026gt;\u0026gt; x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当\u003ccode\u003ef()\u003c/code\u003e在第3行执行\u003ccode\u003ex=40\u003c/code\u003e时，它会创建一个新的本地引用，该引用指向一个值为\u003ccode\u003e40\u003c/code\u003e的整数对象。此时，\u003ccode\u003ef()\u003c/code\u003e将丢失对全局命名空间中名为\u003ccode\u003ex\u003c/code\u003e的对象的引用。因此该赋值语句不影响全局对象。\u003c/p\u003e\n\u003cp\u003e请注意，当\u003ccode\u003ef()\u003c/code\u003e在第4行执行\u003ccode\u003eprint(x)\u003c/code\u003e时，显示结果为\u003ccode\u003e40\u003c/code\u003e，即它自己的本地\u003ccode\u003ex\u003c/code\u003e的值。但是在\u003ccode\u003ef()\u003c/code\u003e 终止后，全局作用域内的\u003ccode\u003ex\u003c/code\u003e仍然是\u003ccode\u003e20\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果函数就地修改对象，它可以修改其本地作用域之外的可变类型的对象：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_list = [\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;baz\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     my_list[1] = \u0026#39;quux\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_list\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u0026#39;foo\u0026#39;, \u0026#39;quux\u0026#39;, \u0026#39;baz\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在本例中，\u003ccode\u003emy_list\u003c/code\u003e是一个列表，并且列表是可变的。在\u003ccode\u003ef()\u003c/code\u003e内部可以对\u003ccode\u003emy_list\u003c/code\u003e进行更改，尽管\u003ccode\u003emy_list\u003c/code\u003e在本地作用域之外。\u003c/p\u003e\n\u003cp\u003e但是，如果\u003ccode\u003ef()\u003c/code\u003e试图重新对\u003ccode\u003emy_list\u003c/code\u003e赋值，那么它将创建一个新的本地对象，并且不会修改全局的\u003ccode\u003emy_list\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_list = [\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;baz\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     my_list = [\u0026#39;qux\u0026#39;, \u0026#39;quux\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_list\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;baz\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这类似于\u003ccode\u003ef()\u003c/code\u003e试图修改可变函数参数时所发生的情况。\u003c/p\u003e\n\u003ch2 id=\"全局声明\"\u003e\u003ca href=\"#全局声明\" class=\"headerlink\" title=\"全局声明\"\u003e\u003c/a\u003e全局声明\u003c/h2\u003e\u003cp\u003e如果确实需要从\u003ccode\u003ef()\u003c/code\u003e中修改全局作用域中的值，该怎么办? 在Python中使用全局声明是可行的:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x = 20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     global x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     x = 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eglobal x\u003c/code\u003e语句表明，当\u003ccode\u003ef()\u003c/code\u003e运行时，对名称\u003ccode\u003ex\u003c/code\u003e的引用将指向全局命名空间中的\u003ccode\u003ex\u003c/code\u003e。这意味着赋值\u003ccode\u003ex = 40\u003c/code\u003e不会创建一个新的引用。它在全局作用域内给\u003ccode\u003ex\u003c/code\u003e赋了一个新值:\u003c/p\u003e\n\u003cp\u003e前面已经介绍过，\u003ccode\u003eglobals()\u003c/code\u003e返回对全局命名空间字典的引用。如果你愿意，可以使用\u003ccode\u003eglobals()\u003c/code\u003e 代替\u003ccode\u003eglobal\u003c/code\u003e语句来完成相同的任务：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x = 20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     globals()[\u0026#39;x\u0026#39;] = 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e完全没有必要这样做，因为全局声明已经较为明确地表达了这种做法的意图。但它确实为\u003ccode\u003eglobals()\u003c/code\u003e 的应用提供了另一个例证。\u003c/p\u003e\n\u003cp\u003e如果全局声明中指定的名称在函数启动时不存在于全局作用域中，则\u003ccode\u003eglobal\u003c/code\u003e语句和赋值的组合将创建这一名称：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e 1 \u0026gt;\u0026gt;\u0026gt; y \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 2 Traceback (most recent call last): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 3   File \u0026#34;\u0026lt;pyshell#79\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 4     y \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 5 NameError: name \u0026#39;y\u0026#39; is not defined \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 6  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 7 \u0026gt;\u0026gt;\u0026gt; def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 8 ...     global y \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 9 ...     y = 20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u0026gt;\u0026gt;\u0026gt; g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13 \u0026gt;\u0026gt;\u0026gt; y\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14 20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当\u003ccode\u003eg()\u003c/code\u003e开始运行时，在全局作用域内没有名为\u003ccode\u003ey\u003c/code\u003e的对象，但是\u003ccode\u003eg()\u003c/code\u003e在第8行使用\u003ccode\u003eglobal y\u003c/code\u003e 语句创建了一个这样的对象。\u003c/p\u003e\n\u003cp\u003e你也可以在单个全局声明中指定用多个逗号分隔的名称：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; x, y, z = 10, 20, 30 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ...     global x, y, z \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，我们通过第4行的单个\u003ccode\u003eglobal\u003c/code\u003e语句，声明\u003ccode\u003ex\u003c/code\u003e、\u003ccode\u003ey\u003c/code\u003e和\u003ccode\u003ez\u003c/code\u003e引用全局作用域内的对象。\u003c/p\u003e\n\u003cp\u003e全局声明中指定的名称不能出现在\u003ccode\u003eglobal\u003c/code\u003e语句之前的函数中：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2 ...     print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 ...     global x \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5   File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 3 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 SyntaxError: name \u0026#39;x\u0026#39; is used prior to global declaration\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e第3行上的\u003ccode\u003eglobal x\u003c/code\u003e语句的目的是让对\u003ccode\u003ex\u003c/code\u003e的引用指向全局作用域中的一个对象。但是第2行的\u003ccode\u003eprint()\u003c/code\u003e语句指向全局声明之前的\u003ccode\u003ex\u003c/code\u003e，这会引发SyntaxError异常。\u003c/p\u003e\n\u003ch2 id=\"非本地声明\"\u003e\u003ca href=\"#非本地声明\" class=\"headerlink\" title=\"非本地声明\"\u003e\u003c/a\u003e非本地声明\u003c/h2\u003e\u003cp\u003e嵌套函数的定义也存在类似的情况。全局声明允许函数访问和修改全局作用域中的对象。如果一个闭包函数需要修改闭包作用域的对象该怎么办?考虑一下这个例子:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e 1 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 2 ...     x = 20 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 3 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 4 ...     def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 5 ...         x = 40 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 6 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 7 ...     g() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 8 ...     print(x) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e 9 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在本例中，\u003ccode\u003ex\u003c/code\u003e的第一个定义在闭包作用域中，而不是在全局作用域中。就像\u003ccode\u003eg()\u003c/code\u003e不能直接修改全局作用域中的变量一样，它也不能修改闭包函数作用域中的\u003ccode\u003ex\u003c/code\u003e。在第5行赋值\u003ccode\u003ex = 40\u003c/code\u003e之后，闭包作用域中的\u003ccode\u003ex\u003c/code\u003e值仍然是\u003ccode\u003e20\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eglobal\u003c/code\u003e关键字不适用于解决这种情况:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     x = 20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def g():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         global x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         x = 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e由于\u003ccode\u003ex\u003c/code\u003e在闭包函数的作用域内，而不是全局作用域内，因此\u003ccode\u003eglobal\u003c/code\u003e关键字在这里不起作用。在\u003ccode\u003eg()\u003c/code\u003e终止后，闭包作用域中的\u003ccode\u003ex\u003c/code\u003e仍然是\u003ccode\u003e20\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e事实上，在本例中，\u003ccode\u003eglobal x\u003c/code\u003e语句不仅不能提供对闭包作用域内\u003ccode\u003ex\u003c/code\u003e的访问，而且还在全局范围内创建了一个名为\u003ccode\u003ex\u003c/code\u003e的对象，其值为\u003ccode\u003e40\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def f():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     x = 20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def g():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         global x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         x = 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     g()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e要从\u003ccode\u003eg()\u003c/code\u003e内部修改闭包作用域中的\u003ccode\u003ex\u003c/code\u003e，需要类似的关键字\u003ccode\u003enonlocal\u003c/code\u003e。在关键字\u003ccode\u003enonlocal\u003c/code\u003e 后边指定的名称引用最近的闭包作用域中的变量：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1 \u0026gt;\u0026gt;\u0026gt; def f(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2 ...     x = 20 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4 ...     def g(): \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5 ...         nonlocal x \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6 ...         x = 40 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7 ... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8 ...     g() \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9 ...     print(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12 \u0026gt;\u0026gt;\u0026gt; f()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13 40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在第5行\u003ccode\u003enonlocal x\u003c/code\u003e语句之后，当\u003ccode\u003eg()\u003c/code\u003e引用\u003ccode\u003ex\u003c/code\u003e时，它指的是最近的闭包作用域内的\u003ccode\u003ex\u003c/code\u003e，其定义在\u003ccode\u003ef()\u003c/code\u003e中的第2行。\u003c/p\u003e\n\u003cp\u003e第9行的\u003ccode\u003eprint()\u003c/code\u003e语句确认对\u003ccode\u003eg()\u003c/code\u003e的调用已将闭包作用域内的\u003ccode\u003ex\u003c/code\u003e值更改为\u003ccode\u003e40\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"最佳实践\"\u003e\u003ca href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"\u003e\u003c/a\u003e最佳实践\u003c/h2\u003e\u003cp\u003e尽管Python提供了关键字\u003ccode\u003eglobal\u003c/code\u003e和\u003ccode\u003enonlocal\u003c/code\u003e，但这些关键字的使用并不总是可取的。\u003c/p\u003e\n\u003cp\u003e当函数在本地作用域之外修改数据时，无论是使用关键字\u003ccode\u003eglobal\u003c/code\u003e或\u003ccode\u003enonlocal\u003c/code\u003e，还是直接就地修改可变类型，都会产生副作用。这种副作用类似于在函数中修改它的一个参数。一般认为修改全局变量是不明智的，不仅在Python中如此，在其他编程语言中也是如此。\u003c/p\u003e\n\u003cp\u003e和许多事情一样，这个问题可以归结为风格和偏好。对全局变量进行审慎和明智的修改有时可以降低程序的复杂性。\u003c/p\u003e\n\u003cp\u003e在Python中，使用关键字\u003ccode\u003eglobal\u003c/code\u003e至少可以明确表示函数正在修改一个全局变量。在许多语言中，函数只需赋值就可以修改全局变量，而不必以任何方式声明它。这使我们非常难以追踪全局数据修改的位置。\u003c/p\u003e\n\u003cp\u003e总之，在本地作用域之外修改变量通常是不必要的。人们几乎总是有更好的方法，通常使用的是函数返回值。\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/07/21/range-function/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          range函数小应用\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/08/14/add-column-pandas/\"\u003e\n        \n          根据条件增加DataFrame的列\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-08-12T00:00:00Z",
  "Author": "老齐教室"
}