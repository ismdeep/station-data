{
  "Source": "qiwsir.github.io",
  "Title": "如何合并没有共同标识符的数据集",
  "Link": "https://qiwsir.github.io/2020/03/13/fuzzymatcher-and-record-linkage/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e如何合并没有共同标识符的数据集\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-03-13\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者： Chris Moffitt \u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e与本文相关的图书推荐：《数据准备和特征工程》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B2_20200114135935.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2 id=\"引言\"\u003e\u003ca href=\"#引言\" class=\"headerlink\" title=\"引言\"\u003e\u003c/a\u003e引言\u003c/h2\u003e\u003cp\u003e合并数据集，是数据科学中常见的操作。对于有共同标识符的两个数据集，可以使用Pandas中提供的常规方法合并，但是，如果两个数据集没有共同的唯一标识符，怎么合并？这就是本文所要阐述的问题。对此，有两个术语会经常用到：记录连接和模糊匹配，例如，尝试把基于人名把不同数据文件连接在一起，或合并只有组织名称和地址的数据等，都是利用“记录链接”和“模糊匹配”完成的。\u003c/p\u003e\n\u003cp\u003e合并没有共同特征的数据，是比较常见且具有挑战性的业务，很难系统地解决，特别是当数据集很大时。如果用人工的方式，使用Excel和查询语句等简单方法能够实现，但这无疑要有很大的工作量。如何解决？Python此时必须登场。Python中有两个库，它们能轻而易举地解决这种问题，并且可以用相对简单的API支持复杂的匹配算法。\u003c/p\u003e\n\u003cp\u003e第一个库叫做fuzzymatcher，它用一个简单的接口就能根据两个DataFrame中记录的概率把它们连接起来，第二个库叫做RecordLinkage 工具包，它提供了一组强大的工具，能够实现自动连接记录和消除重复的数据。\u003c/p\u003e\n\u003cp\u003e在本文中，我们将学习如何使用这两个工具（或者两个库）来匹配两个不同的数据集，也就是基于名称和地址信息的数据集。此外，我们还将简要学习如何把这些匹配技术用于删除重复的数据。\u003c/p\u003e\n\u003ch2 id=\"问题\"\u003e\u003ca href=\"#问题\" class=\"headerlink\" title=\"问题\"\u003e\u003c/a\u003e问题\u003c/h2\u003e\u003cp\u003e只要试图将不同的数据集合并在一起，任何人都可能遇到类似的挑战。在下面的简单示例中，系统中有一个客户记录，我们需要确定数据匹配，而又不使用公共标识符。（下图中箭头标识的两个记录，就是要匹配的对象，它们没有公共标识符。）\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/manual_lookup_20200312142835.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e根据一个小样本的数据集和我们的直觉，记录号为18763和记录号为A1278两条记录看起来是一样的。我们知道Brothers 和 Bro以及Lane和LN是等价的，所以这个过程对人来说相对容易。然而，尝试在编程中利用逻辑来处理这个问题就是一个挑战。\u003c/p\u003e\n\u003cp\u003e以我的经验，大多数人会想到使用Excel，查看地址的各个组成部分，并根据州、街道号或邮政编码找到最佳匹配。在某些情况下，这是可行的。但是，我们可能希望使用更精细的方法来比较字符串，为此，几年前我曾写过一个叫做fuzzywuzzy的包。\u003c/p\u003e\n\u003cp\u003e挑战在于，这些算法（例如Levenshtein、Damerau-Levenshtein、Jaro-Winkler、q-gram、cosine）是计算密集型的，在大型数据集上进行大量匹配是无法调节比例的。\u003c/p\u003e\n\u003cp\u003e如果你有兴趣了解这些概念上的更多数学细节，可以查看维基百科中的有关内容，本文也包含了一些详解。最后，本文将更详细地讨论字符串匹配的方法。\u003c/p\u003e\n\u003cp\u003e幸运的是，有一些Python工具可以帮助我们实现这些方法，并解决其中的一些具有挑战性的问题。\u003c/p\u003e\n\u003ch2 id=\"数据\"\u003e\u003ca href=\"#数据\" class=\"headerlink\" title=\"数据\"\u003e\u003c/a\u003e数据\u003c/h2\u003e\u003cp\u003e在本文中，我们将使用美国医院的数据。之所以选这个数据集，是因为医院的数据具有一些独特性，使其难以匹配：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e许多医院在不同的城市都有相似的名字（圣卢克斯、圣玛丽、社区医院，这很类似我国很多城市都有“协和医院”一样）\u003c/li\u003e\n\u003cli\u003e在某个城市内，医院可以占用几个街区，因此地址可能不明确\u003c/li\u003e\n\u003cli\u003e医院附近往往有许多诊所和其他相关设施\u003c/li\u003e\n\u003cli\u003e医院也会被收购，名字的变更也很常见，从而使得数据处理过程更加困难\u003c/li\u003e\n\u003cli\u003e最后，美国有成千上万的医疗机构，所以这个问题很难按比例处理\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在这些例子中，我有两个数据集。第一个是内部数据集，包含基本的医院帐号、名称和所有权信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/account_data_20200312142953.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e第二个数据集包含医院信息(含有Provider的特征)，以及特定心衰手术的出院人数和医疗保险费用。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/provider_data_20200312143025.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e以上数据集来自Medicare.gov 和 CMS.gov，并经过简单的数据清洗。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本文项目已经发布到在线实验平台，请关注微信公众号《老齐教室》后，回复：#姓名+手机号+案例#。注意，#符号不要丢掉，否则无法查找到回复信息。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/officialaccounts_20200311104512.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e我们的业务场景：现在有医院报销数据和内部帐户数据，要讲两者进行匹配，以便从更多层面来分析每个医院的患者。在本例中，我们有5339个医院帐户和2697家医院的报销信息。但是，这两类数据集没有通用的ID，所以我们将看看是否可以使用前面提到的工具，根据医院的名称和地址信息将两个数据集合并。\u003c/p\u003e\n\u003ch2 id=\"方法1：fuzzymather包\"\u003e\u003ca href=\"#方法1：fuzzymather包\" class=\"headerlink\" title=\"方法1：fuzzymather包\"\u003e\u003c/a\u003e方法1：fuzzymather包\u003c/h2\u003e\u003cp\u003e在第一种方法中，我们将尝试使用fuzzymatcher，这个包利用sqlite的全文搜索功能来尝试匹配两个不同DataFrame中的记录。\u003c/p\u003e\n\u003cp\u003e安装fuzzymatcher很简单，如果使用conda安装，依赖项会自动检测安装，也可以使用pip安装fuzzymatcher。考虑到这些算法的计算负担，你会希望尽可能多地使用编译后的c组件，可以用conda实现。\u003c/p\u003e\n\u003cp\u003e在所有设置完成后，我们导入数据并将其放入DataFrames：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom pathlib import Path\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport fuzzymatcher\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehospital_accounts = pd.read_csv(\u0026#39;hospital_account_info.csv\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehospital_reimbursement = pd.read_csv(\u0026#39;hospital_reimbursement.csv\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以下是医院账户信息:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/account_data_20200312143538.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eHere is the reimbursement information:\u003c/p\u003e\n\u003cp\u003e这是报销信息:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/provider_data_20200312143718.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e由于这些列有不同的名称，我们需要定义哪些列与左右两边的DataFrame相匹配，医院帐户信息是左边的DataFrame，报销信息是右边的DataFrame。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eleft_on = [\u0026#34;Facility Name\u0026#34;, \u0026#34;Address\u0026#34;, \u0026#34;City\u0026#34;, \u0026#34;State\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eright_on = [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Provider Name\u0026#34;, \u0026#34;Provider Street Address\u0026#34;, \u0026#34;Provider City\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Provider State\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在用fuzzymatcher中的\u003ccode\u003efuzzy_left_join\u003c/code\u003e函数找出匹配项:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ematched_results = fuzzymatcher.fuzzy_left_join(hospital_accounts,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            hospital_reimbursement,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            left_on,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            right_on,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            left_id_col=\u0026#39;Account_Num\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                            right_id_col=\u0026#39;Provider_Num\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在幕后，fuzzymatcher为每个组合确定最佳匹配。对于这个数据集，我们分析了超过1400万个组合。在我的笔记本电脑上，这个过程花费了2分11秒。\u003c/p\u003e\n\u003cp\u003e变量\u003ccode\u003ematched_results\u003c/code\u003e所引用的DataFrame对象包含连接在一起的所有数据以及\u003ccode\u003ebest_match_score\u003c/code\u003e——这个特征的数据用于评估该匹配连接的优劣。\u003c/p\u003e\n\u003cp\u003e下面是这些列的一个子集，前5个最佳匹配项经过重新排列增强了可读性：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecols = [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;best_match_score\u0026#34;, \u0026#34;Facility Name\u0026#34;, \u0026#34;Provider Name\u0026#34;, \u0026#34;Address\u0026#34;, \u0026#34;Provider Street Address\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Provider City\u0026#34;, \u0026#34;City\u0026#34;, \u0026#34;Provider State\u0026#34;, \u0026#34;State\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ematched_results[cols].sort_values(by=[\u0026#39;best_match_score\u0026#39;], ascending=False).head(5)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/best_match_1_20200312144452.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e第一个项目的匹配得分是3.09分，看起来肯定是良好的匹配。你可以看到，对位于Red Wing的Mayo诊所，特征\u003ccode\u003eFacility Name\u003c/code\u003e和\u003ccode\u003eProvider Name\u003c/code\u003e的值基本一样，观察结果也证实这条匹配是很合适的。\u003c/p\u003e\n\u003cp\u003e我们也可以查看哪些地方的匹配效果不好：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ematched_results[cols].sort_values(by=[\u0026#39;best_match_score\u0026#39;], ascending=True).head(5)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里显示了一些糟糕的分数以及明显的不匹配情况:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/bad_match_1_20200312144552.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个例子凸显了一部分问题，即一个数据集包括来自Puerto Rico的数据，而另一个数据集中没有，这种差异明确显示，在尝试匹配之前，你需要确保对数据的真正了解，以及尽可能对数据进行清理和筛选。\u003c/p\u003e\n\u003cp\u003e我们已经看到了一些极端的情况。现在看一看，分数小于0.8的一些匹配，它们可能会更具挑战性：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ematched_results[cols].query(\u0026#34;best_match_score \u0026lt;= .80\u0026#34;).sort_values(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    by=[\u0026#39;best_match_score\u0026#39;], ascending=False).head(5)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/partial_matches_20200312144640.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e上述示例展示了一些匹配如何变得更加模糊，例如，ADVENTIST HEALTH UKIAH VALLEY）是否与UKIAH VALLEY MEDICAL CENTER 相同？根据你的数据集和需求，你需要找到自动和手动匹配检查的正确平衡点。\u003c/p\u003e\n\u003cp\u003e总的来说，fuzzymatcher是一个对中型数据集有用的工具。如果样本量超过10000行时，将需要较长时间进行计算，对此，要有良好的规划。然而，fuzzymatcher的确很好用，特别是与Pandas结合，使它成为一个很好的工具。\u003c/p\u003e\n\u003ch2 id=\"方法2：RecordLinkage工具包\"\u003e\u003ca href=\"#方法2：RecordLinkage工具包\" class=\"headerlink\" title=\"方法2：RecordLinkage工具包\"\u003e\u003c/a\u003e方法2：RecordLinkage工具包\u003c/h2\u003e\u003cp\u003eRecordLinkage工具包提供了另一组强有力的工具，用于连接数据集中的记录和识别数据中的重复记录。\u003c/p\u003e\n\u003cp\u003e其主要功能如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e能够根据列的数据类型，为每个列定义匹配的类型\u003c/li\u003e\n\u003cli\u003e使用“块”限制潜在的匹配项的池\u003c/li\u003e\n\u003cli\u003e使用评分算法提供匹配项的排名\u003c/li\u003e\n\u003cli\u003e衡量字符串相似度的多种算法\u003c/li\u003e\n\u003cli\u003e有监督和无监督的学习方法\u003c/li\u003e\n\u003cli\u003e多种数据清理方法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e权衡之下，如果仅仅是为了进一步验证而管理这些数据结果，这些操作就有点太复杂了。然而，这些步骤都会用标准的Panda指令实现，所以不要害怕。\u003c/p\u003e\n\u003cp\u003e依然可以使用\u003ccode\u003epip\u003c/code\u003e来安装库。我们将使用前面的数据集，但会在读取数据的时候设置某列为索引，这使得后续的数据连接更容易解释。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport recordlinkage\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehospital_accounts = pd.read_csv(\u0026#39;hospital_account_info.csv\u0026#39;, index_col=\u0026#39;Account_Num\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehospital_reimbursement = pd.read_csv(\u0026#39;hospital_reimbursement.csv\u0026#39;, index_col=\u0026#39;Provider_Num\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因为RecordLinkage有更多的配置选项，所以我们需要几个步骤来定义连接规则。第一步是创建\u003ccode\u003eindexer\u003c/code\u003e对象：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eindexer = recordlinkage.Index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eindexer.full()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWARNING:recordlinkage:indexing - performance warning - A full index can result in large number of record pairs.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个警告指出了记录连接库和模糊匹配器之间的区别。通过记录连接，我们可以灵活地影响评估的记录对的数量。调用索引对象的\u003ccode\u003efull\u003c/code\u003e方法，可以计算出所有可能的记录对（我们知道这些记录对的数量超过了14M）。我过一会儿再谈其他的选择，下面继续探讨完整的索引，看看它是如何运行的。\u003c/p\u003e\n\u003cp\u003e下一步是建立所有需要检查的潜在的候选记录：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecandidates = indexer.index(hospital_accounts, hospital_reimbursement)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(len(candidates))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14399283\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个快速检查恰好确认了比较的记录总数。\u003c/p\u003e\n\u003cp\u003e既然我们已经定义了左、右数据集和所有候选数据集，就可以使用\u003ccode\u003eCompare()\u003c/code\u003e进行比较。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecompare = recordlinkage.Compare()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare.exact(\u0026#39;City\u0026#39;, \u0026#39;Provider City\u0026#39;, label=\u0026#39;City\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare.string(\u0026#39;Facility Name\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#39;Provider Name\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            threshold=0.85,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            label=\u0026#39;Hosp_Name\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare.string(\u0026#39;Address\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#39;Provider Street Address\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            method=\u0026#39;jarowinkler\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            threshold=0.85,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            label=\u0026#39;Hosp_Address\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efeatures = compare.compute(candidates, hospital_accounts,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        hospital_reimbursement)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以上选定几个特征，用它们确定一个城市的精确匹配，此外在执行\u003ccode\u003estring\u003c/code\u003e方法中还设置了阈值。除了这些选参数之外，你还可以定义其他一些参数，比如数字、日期和地理坐标。了解更多示例，请参阅文档。\u003c/p\u003e\n\u003cp\u003e最后一步是使用\u003ccode\u003ecompute\u003c/code\u003e方法对所有特征进行比较。在本例中，我们使用完整索引，用时3分钟41秒。\u003c/p\u003e\n\u003cp\u003e下面是一个优化方案，这里有一个重要概念，就是块，使用块可以减少比较的记录数量。例如，如果只想比较处于同一个州的医院，我们可以依据\u003ccode\u003eState\u003c/code\u003e列创建块：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eindexer = recordlinkage.Index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eindexer.block(left_on=\u0026#39;State\u0026#39;, right_on=\u0026#39;Provider State\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecandidates = indexer.index(hospital_accounts, hospital_reimbursement)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(len(candidates))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e475830\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e依据\u003ccode\u003eState\u003c/code\u003e分块，候选项将被筛选为只包含州值相同的那些，筛选后只剩下475,830条记录。如果我们运行相同的比较代码，只需要7秒。一个很好的加速方法!\u003c/p\u003e\n\u003cp\u003e在这个数据集中，\u003ccode\u003eState\u003c/code\u003e的数据是干净的，但是如果有点混乱的话，还可以使用另一种分块算法，比如\u003ccode\u003eSortedNeighborhood\u003c/code\u003e，减少一些小的拼写错误带来的影响。\u003c/p\u003e\n\u003cp\u003e例如，如果州名包含“Tenessee”和“Tennessee”怎么办？前面的分块就无效了，但可以使用\u003ccode\u003esortedneighbourhood\u003c/code\u003e方法处理此问题。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eindexer = recordlinkage.Index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eindexer.sortedneighbourhood(left_on=\u0026#39;State\u0026#39;, right_on=\u0026#39;Provider State\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecandidates = indexer.index(hospital_accounts, hospital_reimbursement)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(len(candidates))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e998860\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上述示例，\u003ccode\u003esortedneighbourhood\u003c/code\u003e处理了998,860个记录，花费了15.9秒，这一操作似乎很合理的。\u003c/p\u003e\n\u003cp\u003e不管你使用哪个方法，结果都入下所示，是一个DataFrame。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/feature_matrix_20200312144741.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个DataFrame显示所有比较的结果，在帐户和报销DataFrames中，每行有一个比较结果。这些项目对应着我们所定义的比较，1代表匹配，0代表不匹配。\u003c/p\u003e\n\u003cp\u003e由于大量记录没有匹配项，难以看出我们可能有多少匹配项，为此可以把单个的得分加起来查看匹配的效果。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efeatures.sum(axis=1).value_counts().sort_index(ascending=False)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3.0      2285\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2.0       451\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1.0      7937\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0.0    988187\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edtype: int6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在我们知道有988187行没有任何匹配值，7937行至少有一个匹配项，451行有2个匹配项，2285行有3个匹配项。\u003c/p\u003e\n\u003cp\u003e为了使剩下的分析更简单，让我们用2或3个匹配项获取所有记录，并添加总分：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epotential_matches = features[features.sum(axis=1) \u0026gt; 1].reset_index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epotential_matches[\u0026#39;Score\u0026#39;] = potential_matches.loc[:, \u0026#39;City\u0026#39;:\u0026#39;Hosp_Address\u0026#39;].sum(axis=1)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/match_scoring_20200312144818.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e下面是对所得结果进行解释：索引为1的行，\u003ccode\u003eAccount_Num\u003c/code\u003e值为26270、\u003ccode\u003eProvider_Num\u003c/code\u003e值为868740，该行显示，在城市、医院名称和医院地址方面相匹配。\u003c/p\u003e\n\u003cp\u003e再详细查看这两个记录的内容：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehospital_accounts.loc[26270,:]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFacility Name         SCOTTSDALE OSBORN MEDICAL CENTER\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAddress                          7400 EAST OSBORN ROAD\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCity                                        SCOTTSDALE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eState                                               AZ\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eZIP Code                                         85251\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounty Name                                   MARICOPA\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePhone Number                            (480) 882-4004\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHospital Type                     Acute Care Hospitals\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHospital Ownership                         Proprietary\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: 26270, dtype: object\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehospital_reimbursement.loc[868740,:]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProvider Name                SCOTTSDALE OSBORN MEDICAL CENTER\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProvider Street Address                 7400 EAST OSBORN ROAD\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProvider City                                      SCOTTSDALE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProvider State                                             AZ\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProvider Zip Code                                       85251\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTotal Discharges                                           62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Covered Charges                               39572.2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Total Payments                                6551.47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAverage Medicare Payments                             5451.89\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: 868740, dtype: object\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e是的。它们看起来很匹配。\u003c/p\u003e\n\u003cp\u003e现在我们知道了匹配项，还需要对数据进行调整，以便更容易地对所有数据进行检查。我将为每一个数据集创建一个用于连接的名称和地址查询。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehospital_accounts[\u0026#39;Acct_Name_Lookup\u0026#39;] = hospital_accounts[[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Facility Name\u0026#39;, \u0026#39;Address\u0026#39;, \u0026#39;City\u0026#39;, \u0026#39;State\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e]].apply(lambda x: \u0026#39;_\u0026#39;.join(x), axis=1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehospital_reimbursement[\u0026#39;Reimbursement_Name_Lookup\u0026#39;] = hospital_reimbursement[[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Provider Name\u0026#39;, \u0026#39;Provider Street Address\u0026#39;, \u0026#39;Provider City\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Provider State\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e]].apply(lambda x: \u0026#39;_\u0026#39;.join(x), axis=1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaccount_lookup = hospital_accounts[[\u0026#39;Acct_Name_Lookup\u0026#39;]].reset_index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereimbursement_lookup = hospital_reimbursement[[\u0026#39;Reimbursement_Name_Lookup\u0026#39;]].reset_index()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在与帐户信息数据合并:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eaccount_merge = potential_matches.merge(account_lookup, how=\u0026#39;left\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/account_merge_20200312144901.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e最后，与报销数据合并：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efinal_merge = account_merge.merge(reimbursement_lookup, how=\u0026#39;left\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看看最终的数据：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecols = [\u0026#39;Account_Num\u0026#39;, \u0026#39;Provider_Num\u0026#39;, \u0026#39;Score\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#39;Acct_Name_Lookup\u0026#39;, \u0026#39;Reimbursement_Name_Lookup\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efinal_merge[cols].sort_values(by=[\u0026#39;Account_Num\u0026#39;, \u0026#39;Score\u0026#39;], ascending=False)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/final_lookup_20200312144938.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e此处演示的方法和fuzzymatcher有所不同，fuzzymatcher往往包含多个匹配结果，例如，帐号32725可以匹配两个对应项：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efinal_merge[final_merge[\u0026#39;Account_Num\u0026#39;]==32725][cols]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/potential_match_20200312145015.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e在这种情况下，需要有人找出哪一个匹配是最好的。幸运的是，很容易将所有数据保存到Excel中并进行进一步分析：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efinal_merge.sort_values(by=[\u0026#39;Account_Num\u0026#39;, \u0026#39;Score\u0026#39;],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    ascending=False).to_excel(\u0026#39;merge_list.xlsx\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                              index=False)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从这个例子中可以看到，RecordLinkage工具包比fuzzymatcher更加灵活，便于自定义。RecordLinkage也并非完美，例如对个人而言，RecordLinkage需要执行更多操作步骤才能完成数据的比较。\u003c/p\u003e\n\u003ch2 id=\"删除重复数据\"\u003e\u003ca href=\"#删除重复数据\" class=\"headerlink\" title=\"删除重复数据\"\u003e\u003c/a\u003e删除重复数据\u003c/h2\u003e\u003cp\u003eRecordLinkage的另一个用途是查找数据集里的重复记录，这个过程与匹配非常相似，只不过是你传递的是一个针对自身的DataFrame。\u003c/p\u003e\n\u003cp\u003e我们来看一个使用类似数据集的例子:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehospital_dupes = pd.read_csv(\u0026#39;hospital_account_dupes.csv\u0026#39;, index_col=\u0026#39;Account_Num\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后创建索引对象，并基于\u003ccode\u003eState\u003c/code\u003e执行\u003ccode\u003esortedneighbourhood\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edupe_indexer = recordlinkage.Index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edupe_indexer.sortedneighbourhood(left_on=\u0026#39;State\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edupe_candidate_links = dupe_indexer.index(hospital_dupes)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e根据城市、名称和地址检查是否有重复记录：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecompare_dupes = recordlinkage.Compare()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare_dupes.string(\u0026#39;City\u0026#39;, \u0026#39;City\u0026#39;, threshold=0.85, label=\u0026#39;City\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare_dupes.string(\u0026#39;Phone Number\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u0026#39;Phone Number\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    threshold=0.85,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    label=\u0026#39;Phone_Num\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare_dupes.string(\u0026#39;Facility Name\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u0026#39;Facility Name\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    threshold=0.80,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    label=\u0026#39;Hosp_Name\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecompare_dupes.string(\u0026#39;Address\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    \u0026#39;Address\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    threshold=0.85,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                    label=\u0026#39;Hosp_Address\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edupe_features = compare_dupes.compute(dupe_candidate_links, hospital_dupes)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e因为只与单个DataFrame进行比较，因此得到的DataFrame带有\u003ccode\u003eAccount_Num_1\u003c/code\u003e和\u003ccode\u003eAccount_Num_2\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/dupe_detect_20200312145114.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e下面是我们的评分方法:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edupe_features.sum(axis=1).value_counts().sort_index(ascending=False)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e3.0         7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2.0       206\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1.0      7859\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0.0    973205\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edtype: int64\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e添加分数列:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epotential_dupes = dupe_features[dupe_features.sum(axis=1) \u0026gt; 1].reset_index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epotential_dupes[\u0026#39;Score\u0026#39;] = potential_dupes.loc[:, \u0026#39;City\u0026#39;:\u0026#39;Hosp_Address\u0026#39;].sum(axis=1)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面是一个例子：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/potential_dupes_20200312145223.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这些记录很有可能是重复的，我们来查看其中一组，看看他们是不是相同的记录:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehospital_dupes.loc[51567, :]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFacility Name                SAINT VINCENT HOSPITAL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAddress                      835 SOUTH VAN BUREN ST\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCity                                      GREEN BAY\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eState                                            WI\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eZIP Code                                      54301\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounty Name                                   BROWN\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePhone Number                         (920) 433-0112\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHospital Type                  Acute Care Hospitals\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHospital Ownership    Voluntary non-profit - Church\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: 51567, dtype: object\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ehospital_dupes.loc[41166, :]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eFacility Name                   ST VINCENT HOSPITAL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAddress                          835 S VAN BUREN ST\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCity                                      GREEN BAY\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eState                                            WI\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eZIP Code                                      54301\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounty Name                                   BROWN\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePhone Number                         (920) 433-0111\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHospital Type                  Acute Care Hospitals\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHospital Ownership    Voluntary non-profit - Church\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: 41166, dtype: object\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e没错，观察结果说明它们有可能是重复记录，姓名和地址相似，电话号码只少了一位数字。\u003c/p\u003e\n\u003cp\u003e如你所见，这种是一个强大且相对容易的工具，用于检查数据和重复的记录。\u003c/p\u003e\n\u003ch2 id=\"高级用法\"\u003e\u003ca href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"\u003e\u003c/a\u003e高级用法\u003c/h2\u003e\u003cp\u003e除了这里展示的匹配方法之外，RecordLinkage还包含了用于匹配记录的几种机器学习方法。我鼓励感兴趣的读者阅读文档中的示例。\u003c/p\u003e\n\u003cp\u003e其中一个非常方便的功能是：有一个基于浏览器的工具，它可以用来为机器学习算法生成记录对。\u003c/p\u003e\n\u003cp\u003e本文所介绍的两个包，都包含一些预处理数据的功能，以便使匹配更加可靠。\u003c/p\u003e\n\u003ch2 id=\"总结\"\u003e\u003ca href=\"#总结\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003e在数据处理上，经常会遇到诸如“名称”和“地址”等文本字段连接不同的记录的问题，这是很有挑战性的。Python生态系统包含两个有用的库，它们可以使用多种算法将多个数据集的记录进行匹配。\u003c/p\u003e\n\u003cp\u003efuzzymatcher对全文搜索，通过概率实现记录连接，将两个DataFrames简单地匹配在一起。如果你有更大的数据集或需要使用更复杂的匹配逻辑，那么RecordLinkage是一组非常强大的工具，用于连接数据和删除重复项。\u003c/p\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://pbpython.com/record-linking.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://pbpython.com/record-linking.html\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e搜索技术问答的公众号：老齐教室\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e为了方便大家阅读、查询本微信公众号的资源，回复：\u003cstrong\u003e老齐\u003c/strong\u003e，即可显示本公众号的服务目录。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#fuzzymatcher recordlinkage 合并数据集\"\u003e\n    \u003cspan class=\"tag-code\"\u003efuzzymatcher recordlinkage 合并数据集\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/03/11/old-code/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          如何跳过古董代码的坑\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/03/15/jupyter-introduce/\"\u003e\n        \n          Jupyter不断演进的三大动力\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-03-13T00:00:00Z",
  "Author": "老齐教室"
}