{
  "Source": "qiwsir.github.io",
  "Title": "Python中5对必知的魔法方法",
  "Link": "https://qiwsir.github.io/2020/09/15/python-magic-method/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003ePython中5对必知的魔法方法\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-09-15\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003ch2 id=\"引言\"\u003e\u003ca href=\"#引言\" class=\"headerlink\" title=\"引言\"\u003e\u003c/a\u003e引言\u003c/h2\u003e\u003cp\u003e在Python中，我们可以使用下划线、字母和数字来命名函数。单词之间的下划线并没有太大的意义——它们只是通过在单词之间创建空格来提高可读性。这就是众所周知的s蛇形命名风格。例如，\u003ccode\u003ecalculate_mean_score\u003c/code\u003e比\u003ccode\u003ecalculatemeanscore\u003c/code\u003e更容易阅读。你可能知道，除了这种使用下划线的常见方式，我们还在函数名之前加上一个或两个下划线(例如：\u003ccode\u003e_func\u003c/code\u003e，\u003ccode\u003e__func\u003c/code\u003e) 来表示类或模块内的私有化函数，那些没有以下划线为前缀的名称被认为是公共 API。\u003c/p\u003e\n\u003cp\u003e下划线在方法命名中的另一用途就是定义“魔法方法”，也称为“特殊方法”。具体地说，我们在方法的名称前和后分别使用了两个下划线——类似于\u003ccode\u003e__func__\u003c/code\u003e。由于使用了两个下划线，一些人将特殊方法称为“dunder方法”或简单地称为“dunders”。在本文中，将介绍五对密切相关的常用魔法方法，每一对方法表示一个Python概念。\u003c/p\u003e\n\u003ch2 id=\"1-实例化：-new-和-init\"\u003e\u003ca href=\"#1-实例化：-new-和-init\" class=\"headerlink\" title=\"1. 实例化：__new__ 和 __init__\"\u003e\u003c/a\u003e1. 实例化：\u003ccode\u003e__new__\u003c/code\u003e 和 \u003ccode\u003e__init__\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e在学习了Python数据结构的基础知识(例如字典、列表)之后，你应该已经看到了一些自定义类的示例，其中肯定有一个神奇的方法：\u003ccode\u003e__init__\u003c/code\u003e。此方法用于对实例对象进行初始化。具体地说，在\u003ccode\u003e__init__\u003c/code\u003e方法中，你需要为创建的实例对象设置初始属性。下面是一个简单的例子:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass Product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self, name, price):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.price = price\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e我们不会直接调用类中的\u003ccode\u003e__init__\u003c/code\u003e方法时，它在类中担负着初始化实例的作用，例如，要创建一个新的\u003ccode\u003eProduct\u003c/code\u003e实例，可以使用以下代码:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eproduct = Product(\u0026#34;Vacuum\u0026#34;, 150.0)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与\u003ccode\u003e__init__\u003c/code\u003e方法密切相关的是\u003ccode\u003e__new__\u003c/code\u003e方法，我们通常不会在自定义类中实现\u003ccode\u003e__new__\u003c/code\u003e方法。实际上，\u003ccode\u003e__new__\u003c/code\u003e才是真正的构造方法，它构造了实例对象，该对象被传给\u003ccode\u003e__init__\u003c/code\u003e方法，以完成初始化过程。\u003c/p\u003e\n\u003cp\u003e换句话说，构造一个新的实例对象(一个叫做实例化的过程)需要依次调用\u003ccode\u003e__new__\u003c/code\u003e和\u003ccode\u003e__init__\u003c/code\u003e方法。\u003c/p\u003e\n\u003cp\u003e下面的代码展示了此连锁反应:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; class Product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __new__(cls, *args):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         new_product = object.__new__(cls)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#34;Product __new__ gets called\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         return new_product\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __init__(self, name, price):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.price = price\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#34;Product __init__ gets called\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product = Product(\u0026#34;Vacuum\u0026#34;, 150.0)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProduct __new__ gets called\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProduct __init__ gets called\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"2-字符串表示法：-repr-和-str\"\u003e\u003ca href=\"#2-字符串表示法：-repr-和-str\" class=\"headerlink\" title=\"2.字符串表示法：__repr__和__str__\"\u003e\u003c/a\u003e2.字符串表示法：\u003ccode\u003e__repr__\u003c/code\u003e和\u003ccode\u003e__str__\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e这两个方法都很重要，因为它们为能在自定义类中指定的字符串表示方法。在解释它们之前，我们先快速看一看下面的实现:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass Product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self, name, price):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.price = price\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __repr__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return f\u0026#34;Product({self.name!r}, {self.price!r})\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __str__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return f\u0026#34;Product: {self.name}, ${self.price:.2f}\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e__repr__\u003c/code\u003e 方法应该返回一个字符串，该字符串的内容是创建实例对象。具体来说，字符串可以被传给\u003ccode\u003eeval()\u003c/code\u003e来创建实例对象。下面的代码片段展示了这样的操作:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product = Product(\u0026#34;Vacuum\u0026#34;, 150.0)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; repr(product)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#34;Product(\u0026#39;Vacuum\u0026#39;, 150.0)\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; evaluated = eval(repr(product))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; type(evaluated)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;__main__.Product\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003e__str__\u003c/code\u003e 方法的返回结果对于实例对象的描述性更强。应该注意的是，\u003ccode\u003eprint()\u003c/code\u003e函数使用\u003ccode\u003e__str__\u003c/code\u003e 方法来显示与实例相关的信息，如下所示。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; print(product)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProduct: Vacuum, $150.00\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e虽然两种方法都应该返回字符串，但是\u003ccode\u003e__repr__\u003c/code\u003e方法通常是面向开发人员的，主要显示实例化信息；而\u003ccode\u003e__str__\u003c/code\u003e方法是面向普通用户的，通常要显示更多的信息内容。\u003c/p\u003e\n\u003ch2 id=\"3-迭代：-iter-和-next\"\u003e\u003ca href=\"#3-迭代：-iter-和-next\" class=\"headerlink\" title=\"3. 迭代： __iter__ 和 __next__\"\u003e\u003c/a\u003e3. 迭代： \u003ccode\u003e__iter__\u003c/code\u003e 和 \u003ccode\u003e__next__\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e用代码自动重复执行的某个作业，称为迭代，对此可以用for循环实现。我们将可以用于for循环的对象称为可迭代对象。for循环的基本形式如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efor item in iterable:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Operations go here\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在后台，可迭代对象被转换为迭代器对象，它为每次循环提供可迭代对象中的项。一般来说，迭代器是Python对象，可用于实现项的迭代。转换过程是通过实现 \u003ccode\u003e__iter__\u003c/code\u003e特殊方法来完成的。此外，检索迭代器的下一项涉及到\u003ccode\u003e__next__\u003c/code\u003e 特殊方法的实现。现在我们继续前面的例子，把\u003ccode\u003eProduct\u003c/code\u003e类用作for循环的迭代器:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; class Product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __init__(self, name, price):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.price = price\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __str__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         return f\u0026#34;Product: {self.name}, ${self.price:.2f}\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __iter__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self._free_samples = [Product(self.name, 0) for _ in range(3)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#34;Iterator of the product is created.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         return self\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __next__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         if self._free_samples:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             return self._free_samples.pop()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         else:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             raise StopIteration(\u0026#34;All free samples have been dispensed.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product = Product(\u0026#34;Perfume\u0026#34;, 5.0)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; for i, sample in enumerate(product, 1):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(f\u0026#34;Dispense the next sample #{i}: {sample}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIterator of the product is created.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDispense the next sample #1: Product: Perfume, $0.00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDispense the next sample #2: Product: Perfume, $0.00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDispense the next sample #3: Product: Perfume, $0.00\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如上所示，我们用\u003ccode\u003e__iter__\u003c/code\u003e方法创建了一些样本数据，并创建了一个迭代器实例。为了实现迭代行为，在循环过程中调用了\u003ccode\u003e__next__\u003c/code\u003e方法，从而将实例中的样本都显示出来。当样本读取完毕时，迭代结束。\u003c/p\u003e\n\u003ch2 id=\"4-上下文管理器：-enter-和-exit\"\u003e\u003ca href=\"#4-上下文管理器：-enter-和-exit\" class=\"headerlink\" title=\"4. 上下文管理器：__enter__ 和 __exit__\"\u003e\u003c/a\u003e4. 上下文管理器：\u003ccode\u003e__enter__\u003c/code\u003e 和 \u003ccode\u003e__exit__\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e在Python中处理文件对象时，最常见的语法可能是这样的：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ewith open(\u0026#39;filename.txt\u0026#39;) as file:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Your file operations go here\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003ewith\u003c/code\u003e语句的使用被称为上下文管理器。具体来说，在上面的文件操作示例中，\u003ccode\u003ewith\u003c/code\u003e语句将为\u003ccode\u003efile\u003c/code\u003e对象创建一个上下文管理器，在文件操作之后，上下文管理器将帮助我们关闭文件对象，以便共享资源（即文件）可以用于其他进程。\u003c/p\u003e\n\u003cp\u003e因此，一般来说，上下文管理器是Python对象，用于管理共享资源，例如\u003ccode\u003eopen\u003c/code\u003e和\u003ccode\u003eclose\u003c/code\u003e。没有上下文管理器，我们必须手动管理这些资源，这很容易出错。\u003c/p\u003e\n\u003cp\u003e为了用一个自定义类实现这样的行为，需要实现\u003ccode\u003e__enter__\u003c/code\u003e和 \u003ccode\u003e__exit__\u003c/code\u003e方法。\u003ccode\u003e__enter__\u003c/code\u003e 方法设置上下文管理器，为我们准备操作所需的资源，而\u003ccode\u003e__exit__\u003c/code\u003e 方法则是清理应释放的任何已用资源，使其可用。我们来思考与前面的\u003ccode\u003eProduct\u003c/code\u003e类有关的一个简单示例：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; class Product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __init__(self, name, price):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.price = price\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __str__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         return f\u0026#34;Product: {self.name}, ${self.price:.2f}\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def _move_to_center(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(f\u0026#34;The product ({self}) occupies the center exhibit spot.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def _move_to_side(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(f\u0026#34;Move {self} back.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __enter__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#34;__enter__ is called\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self._move_to_center()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __exit__(self, exc_type, exc_val, exc_tb):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(\u0026#34;__exit__ is called\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self._move_to_side()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product = Product(\u0026#34;BMW Car\u0026#34;, 50000)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; with product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(\u0026#34;It\u0026#39;s a very good car.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__enter__ is called\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe product (Product: BMW Car, $50000.00) occupies the center exhibit spot.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIt\u0026#39;s a very good car.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__exit__ is called\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMove Product: BMW Car, $50000.00 back.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如你所见，当实例对象嵌入到with语句中时，将调用\u003ccode\u003e__enter__\u003c/code\u003e方法。在with语句中完成操作后，将调用\u003ccode\u003e__exit__\u003c/code\u003e方法。\u003c/p\u003e\n\u003cp\u003e但是，需要注意的是，我们可以用\u003ccode\u003e__enter__\u003c/code\u003e和\u003ccode\u003e__exit__\u003c/code\u003e方法来创建上下文管理器。使用上下文管理器的装饰器函数可以更容易地完成这项工作。\u003c/p\u003e\n\u003ch2 id=\"5-属性访问控制：-getattr-和-setattr\"\u003e\u003ca href=\"#5-属性访问控制：-getattr-和-setattr\" class=\"headerlink\" title=\"5. 属性访问控制：__getattr__ 和 __setattr__\"\u003e\u003c/a\u003e5. 属性访问控制：\u003ccode\u003e__getattr__\u003c/code\u003e 和 \u003ccode\u003e__setattr__\u003c/code\u003e\u003c/h2\u003e\u003cp\u003e如果你有其他语言的编程经验，可能为实例属性设置过显式的\u003ccode\u003egetters\u003c/code\u003e（访问属性）和\u003ccode\u003esetters\u003c/code\u003e（设置属性）。在Python中，我们不需要对每个属性使用这些访问控制技术。但是，我们可以通过实现\u003ccode\u003e__getattr__\u003c/code\u003e 和 \u003ccode\u003e__setattr__\u003c/code\u003e方法来实现某种控制。具体地说，当访问实例对象的属性时，调用\u003ccode\u003e__getattr__\u003c/code\u003e 方法；而在设置实例对象的属性时，调用\u003ccode\u003e__setattr__\u003c/code\u003e 方法。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; class Product:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __init__(self, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         self.name = name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __getattr__(self, item):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         if item == \u0026#34;formatted_name\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             print(f\u0026#34;__getattr__ is called for {item}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             formatted = self.name.capitalize()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             setattr(self, \u0026#34;formatted_name\u0026#34;, formatted)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             return formatted\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         else:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...             raise AttributeError(f\u0026#34;no attribute of {item}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     def __setattr__(self, key, value):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         print(f\u0026#34;__setattr__ is called for {key!r}: {value!r}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...         super().__setattr__(key, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product = Product(\u0026#34;taBLe\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__setattr__ is called for \u0026#39;name\u0026#39;: \u0026#39;taBLe\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product.name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;taBLe\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product.formatted_name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__getattr__ is called for formatted_name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e__setattr__ is called for \u0026#39;formatted_name\u0026#39;: \u0026#39;Table\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Table\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; product.formatted_name\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Table\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e每次尝试设置对象的属性时，都会调用 \u003ccode\u003e__setattr__\u003c/code\u003e方法。要正确使用它，你必须借助\u003ccode\u003esuper()\u003c/code\u003e来使用超类方法。否则，它将陷入无限递归。\u003c/p\u003e\n\u003cp\u003e设置\u003ccode\u003eformatted_name\u003c/code\u003e属性后，该属性将成为 \u003ccode\u003e__dict__\u003c/code\u003e对象的一部分，因此不会调用\u003ccode\u003e__getattr__\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e另外，还有一种与访问控制密切相关的特殊方法叫做\u003ccode\u003e__getattribute__\u003c/code\u003e。它类似于\u003ccode\u003e__getattr__\u003c/code\u003e，但每次访问属性时都会调用它。在这一点上，它类似于\u003ccode\u003e__setattr__\u003c/code\u003e。同样，你应该使用\u003ccode\u003esuper()\u003c/code\u003e来实现\u003ccode\u003e__getattribute__\u003c/code\u003e方法，以避免无限递归的错误。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e在本文中，回顾了五对重要的特殊方法。通过这些方法，我们了解了与之相关的五个Python概念。我希望你能够更好地理解这些概念、更好地理解如何在自己的Python项目中使用特殊方法。\u003c/p\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://medium.com/better-programming/5-pairs-of-magic-methods-in-python-you-should-know-f98f0e5356d6\" target=\"_blank\" rel=\"noopener\"\u003ehttps://medium.com/better-programming/5-pairs-of-magic-methods-in-python-you-should-know-f98f0e5356d6\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/09/11/data-science-enginerring/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          数据科学的软件工程技巧和最佳实践\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/09/17/pandas-readhtml/\"\u003e\n        \n          不写爬虫，也能读取网页的表格数据\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-09-15T00:00:00Z",
  "Author": "老齐教室"
}