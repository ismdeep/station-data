{
  "Source": "qiwsir.github.io",
  "Title": "用Python读写海量图片的方法",
  "Link": "https://qiwsir.github.io/2020/01/22/%E8%AF%BB%E5%86%99%E5%9B%BE%E7%89%87/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e用Python读写海量图片的方法\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-01-22\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e为什么必须要了解更多用Python存储和访问图像的方法？如果你的业务只用到少量图片，比如根据图像的色彩分类，，或者用OpenCV实现人脸识别，这时完全不用担心这个问题了。即使借助Python的PIL，也能轻松处理几百张照片，把图像以\u003ccode\u003e.png\u003c/code\u003e或\u003ccode\u003e.jpg\u003c/code\u003e文件的形式存储在磁盘上，简单方便又恰当。\u003c/p\u003e\n\u003cp\u003e然而，现实的任务不都如此，比如卷积神经网络(CNN)等算法可以处理包含大量图像的数据集，还可以从中学习。如果你对此感兴趣，可以申请加入本文的微信公众号“老齐教室”提供的在线《机器学习案例》，在真实的案例项目中去体验。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注：关注微信公众号：老齐教室，回复“姓名+手机号+’案例’”，申请获得《机器学习案例集》，本文的代码和数据，都已经收集到此案例集。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" alt=\"WechatIMG6\" style=\"zoom:67%;\"/\u003e\n\n\u003cp\u003eImageNet是一个著名的公共图像数据库，可以用于对象分类、识别等任务的模型训练，它包含超过1400万张图像。\u003c/p\u003e\n\u003cp\u003e想一想要花多长时间才能把它们分批地、成百上千次地装入内存中进行训练。如果你用常规方法来读取这些图片，应该在开始读取之后，离开电脑去做点别的事情，回来后还不一定完成。但是，如果你希望去谷歌或英伟达工作，就不能这样玩。\u003c/p\u003e\n\u003cp\u003e在本文中，你将了解：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e将图像作为.png文件存储在磁盘上\u003c/li\u003e\n\u003cli\u003e将图像存储到LMDB（lightning memory-mapped databases，闪电般的内存映射数据库）\u003c/li\u003e\n\u003cli\u003e将图像存储到HDF5格式的文件中\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们还将探索以下内容：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e为什么替代存储方法值得考虑\u003c/li\u003e\n\u003cli\u003e当你读、写单个图像时，这三种方法的性能有什么不同\u003c/li\u003e\n\u003cli\u003e当你读、写多个图像时，这三种方法的性能有什么不同\u003c/li\u003e\n\u003cli\u003e这三种方法在磁盘使用方面的比较\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果没有一种存储方法听起来耳熟，不要担心：对于这篇文章，你所需要的只是一些基本的Python语言知识以及对图像（它们实际上是由多维数组组成的）、内存的基本理解，比如10MB和10GB之间的差异。\u003c/p\u003e\n\u003cp\u003e我们开始吧！\u003c/p\u003e\n\u003ch2 id=\"安装程序\"\u003e\u003ca href=\"#安装程序\" class=\"headerlink\" title=\"安装程序\"\u003e\u003c/a\u003e安装程序\u003c/h2\u003e\u003cp\u003e下面的项目中，需要一个图像数据集，以及一些Python包。本文的微信公众号“老齐教室”对下述所有代码均提供了在线实验平台，请按照前面提示申请使用《机器学习案例集》\u003c/p\u003e\n\u003ch2 id=\"数据集\"\u003e\u003ca href=\"#数据集\" class=\"headerlink\" title=\"数据集\"\u003e\u003c/a\u003e数据集\u003c/h2\u003e\u003cp\u003e案例中的数据集来自众所周知的CIFAR-10，它由60000个32x32像素的彩色图像组成，这些图像属于不同的对象类别，如狗、猫和飞机。相对而言，CIFAR不是一个很大的数据集，但是如果我们使用完整的TinyImages数据集，就需要大约400GB的可用磁盘空间，对于学习而言，这太奢侈了。\u003c/p\u003e\n\u003cp\u003e此数据集已经上传到本文的微信公众号“老齐教室”的《机器学习案例集》，可以按照前述方式申请获得。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://files.realpython.com/media/cifar_10.e77ef0cd86df.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e以下代码将从数据集文件中读取图像数据，并加载到NumPy数组中：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport numpy as np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport pickle\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom pathlib import Path\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Path to the unzipped CIFAR data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata_dir = Path(\u0026#34;data/cifar-10-batches-py/\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Unpickle function provided by the CIFAR hosts\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef unpickle(file):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(file, \u0026#34;rb\u0026#34;) as fo:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        dict = pickle.load(fo, encoding=\u0026#34;bytes\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return dict\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimages, labels = [], []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor batch in data_dir.glob(\u0026#34;data_batch_*\u0026#34;):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    batch_data = unpickle(batch)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i, flat_im in enumerate(batch_data[b\u0026#34;data\u0026#34;]):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        im_channels = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Each image is flattened, with channels in order of R, G, B\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        for j in range(3):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            im_channels.append(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                flat_im[j * 1024 : (j + 1) * 1024].reshape((32, 32))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Reconstruct the original image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images.append(np.dstack((im_channels)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Save the label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels.append(batch_data[b\u0026#34;labels\u0026#34;][i])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u0026#34;Loaded CIFAR-10 training set:\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(f\u0026#34; - np.shape(images)     {np.shape(images)}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(f\u0026#34; - np.shape(labels)     {np.shape(labels)}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e所有的图像用\u003ccode\u003eimages\u003c/code\u003e变量引用，对应的元数据保存在\u003ccode\u003elabels\u003c/code\u003e中。接下来，你可以安装以下的三个Python包。\u003c/p\u003e\n\u003ch3 id=\"在磁盘上存储图像\"\u003e\u003ca href=\"#在磁盘上存储图像\" class=\"headerlink\" title=\"在磁盘上存储图像\"\u003e\u003c/a\u003e在磁盘上存储图像\u003c/h3\u003e\u003cp\u003e你需要为从磁盘上保存和读取这些图像的默认方法设置环境。本文假设你的系统上安装了Python 3.x，并将使用\u003ccode\u003ePillow\u003c/code\u003e进行图像处理：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ pip install Pillow\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e或者，如果你愿意，可以使用Anaconda安装它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ conda install -c conda-forge pillow\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意：\u003ccode\u003ePIL\u003c/code\u003e是Pillow的原始版本，目前它已经不再维护，并且与Python 3.x不兼容。如果你先前安装了\u003ccode\u003ePIL\u003c/code\u003e，请在安装\u003ccode\u003ePillow\u003c/code\u003e之前卸载它，因为它们彼此。\u003c/p\u003e\n\u003cp\u003e现在你可以存储和读取磁盘上的图像了。\u003c/p\u003e\n\u003ch3 id=\"LMDB入门\"\u003e\u003ca href=\"#LMDB入门\" class=\"headerlink\" title=\"LMDB入门\"\u003e\u003c/a\u003eLMDB入门\u003c/h3\u003e\u003cp\u003eLMDB，有时被称为“闪电数据库”，意味着像闪电般那么快的内存映射数据库，由此可见，它速度快，并且使用内存映射文件。它以键值对存储，不是关系数据库。\u003c/p\u003e\n\u003cp\u003e在实现方面，LMDB是一个B+树，这基本上意味着它是存储在内存中的树状图结构，其中每个键值对都是一个节点，节点可以有许多子节点。同一级别的节点相互链接以进行快速遍历。\u003c/p\u003e\n\u003cp\u003e关键在于，B+树的关键组件被设置为与主机操作系统的文件相对应。当访问数据库中的任何键值对时，实现效率最大化。由于LMDB的高性能在很大程度上依赖于这一点，LMDB的效率已经被证明依赖于底层文件系统及其实现。\u003c/p\u003e\n\u003cp\u003eLMDB效率的另一个关键原因是：它是内存映射的。这意味着它返回指向键和值的内存地址的直接指针，而不需要像大多数其他数据库那样复制内存中的任何内容。\u003c/p\u003e\n\u003cp\u003e如果你对B+树不感兴趣，别担心。后面的操作中，我们不需要为了使用LMDB，你不需要了解它们的内部实现。我们将使用Python的LMDB  C，用pip安装：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ pip install lmdb\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e你还可以选择通过Anaconda安装：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ conda install -c conda-forge python-lmdb\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后在Python交互模式中，用\u003ccode\u003eimport lmdb\u003c/code\u003e检查，不报错，就OK了。\u003c/p\u003e\n\u003ch3 id=\"HDF5入门\"\u003e\u003ca href=\"#HDF5入门\" class=\"headerlink\" title=\"HDF5入门\"\u003e\u003c/a\u003eHDF5入门\u003c/h3\u003e\u003cp\u003eHDF5代表分层数据格式，这种文件格式被称为HDF4或HDF5。我们不需要担心HDF4，因为HDF5是当前维护的版本。\u003c/p\u003e\n\u003cp\u003e有趣的是，HDF起源于（美国）国家超级计算应用中心，是一种便携式、紧凑的科学数据格式。如果你想知道它是否被广泛使用，请查看美国宇航局的地球数据项目中关于HDF5的简介。\u003c/p\u003e\n\u003cp\u003eHDF文件由两种类型的对象组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e数据集\u003c/li\u003e\n\u003cli\u003e群组\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e数据集是多维数组，群组由数据集或其他组组成。任何大小和类型的多维数组都可以存储为数据集，但数据集中的维度和类型必须统一。每个数据集必须包含一个同构的N维数组。也就是说，因为组和数据集可能是嵌套的，所以你仍然可以获得可能需要的异构性：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ pip install h5py\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与其他库一样，你可以通过Anaconda安装：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ conda install -c conda-forge h5py\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果你\u003ccode\u003eimport h5py\u003c/code\u003e不报错，那也说明一切都将正确设置。\u003c/p\u003e\n\u003ch2 id=\"存储单个图像\"\u003e\u003ca href=\"#存储单个图像\" class=\"headerlink\" title=\"存储单个图像\"\u003e\u003c/a\u003e存储单个图像\u003c/h2\u003e\u003cp\u003e现在，你已经对这些方法有了一个大致的了解，让我们直接进入主题：读、写文件各需要多长时间，以及将占用多少内存。通过这些示例，也可以了解每种方法的基本工作原理。\u003c/p\u003e\n\u003cp\u003e当我提到文件时，通常指的是很多文件。但是，由于有些方法可能针对不同的操作和文件数量进行了优化，因此进行区分是很重要的。\u003c/p\u003e\n\u003cp\u003e为了便于实验，我们可以比较读取不同数量的文件的性能，把图片的数量按10的倍数从1张增至10万张。由于我们的五批CIFAR-10总共有50000个图像，因此可以每个图像可以用两次，总共获得100000个图像。\u003c/p\u003e\n\u003cp\u003e为了准备实验，你需要为每个方法创建一个文件夹，其中包含所有数据库文件或图像：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom pathlib import Path\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edisk_dir = Path(\u0026#34;data/disk/\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elmdb_dir = Path(\u0026#34;data/lmdb/\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehdf5_dir = Path(\u0026#34;data/hdf5/\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003ePath\u003c/code\u003e不会自动为你创建文件夹，除非你明确地要求它这样做：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edisk_dir.mkdir(parents=True, exist_ok=True)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elmdb_dir.mkdir(parents=True, exist_ok=True)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehdf5_dir.mkdir(parents=True, exist_ok=True)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在接下来的代码中，可以使用Python标准库中\u003ccode\u003etimeit\u003c/code\u003e模块来对程序计时。\u003c/p\u003e\n\u003ch3 id=\"存储到磁盘\"\u003e\u003ca href=\"#存储到磁盘\" class=\"headerlink\" title=\"存储到磁盘\"\u003e\u003c/a\u003e存储到磁盘\u003c/h3\u003e\u003cp\u003e下面的实验中，输入是一个单独的图像\u003ccode\u003eimage\u003c/code\u003e，当前作为NumPy数组存储在内存中。首先要将其作为\u003ccode\u003e.png\u003c/code\u003e图像保存到磁盘上，并使用唯一的图像ID \u003ccode\u003eimage_id\u003c/code\u003e对其命名。这个步骤可以使用之前安装的\u003ccode\u003ePillow\u003c/code\u003e完成：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom PIL import Image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport csv\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef store_single_disk(image, image_id, label):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores a single image as a .png file on disk.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image       image array, (32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image_id    integer unique ID for image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label       image label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Image.fromarray(image).save(disk_dir / f\u0026#34;{image_id}.png\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(disk_dir / f\u0026#34;{image_id}.csv\u0026#34;, \u0026#34;wt\u0026#34;) as csvfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        writer = csv.writer(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            csvfile, delimiter=\u0026#34; \u0026#34;, quotechar=\u0026#34;|\u0026#34;, quoting=csv.QUOTE_MINIMAL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        writer.writerow([label])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这样可以保存图像。在所有实际的应用程序中，你还要关心附加到图像的元数据。在我们的示例数据集中，元数据是图像标签。将图像存储到磁盘时，有几中不同的保存元数据的方式。\u003c/p\u003e\n\u003cp\u003e一种是将标签编码为图像名称。这样做的好处是不需要任何额外的文件。\u003c/p\u003e\n\u003cp\u003e但是，它也有一个很大的缺点，即：无论何时处理标签，都会强迫你处理所有文件。将标签存储在一个单独的文件中可以允许你单独处理标签，而不必加载图像。在上面的代码中，我已经为这个实验将标签存储在一个单独的\u003ccode\u003e.csv\u003c/code\u003e文件中。\u003c/p\u003e\n\u003cp\u003e现在让我们继续使用LMDB执行完全相同的任务。\u003c/p\u003e\n\u003ch3 id=\"存储到LMDB\"\u003e\u003ca href=\"#存储到LMDB\" class=\"headerlink\" title=\"存储到LMDB\"\u003e\u003c/a\u003e存储到LMDB\u003c/h3\u003e\u003cp\u003e首先，LMDB是一个键值存储系统，其中每个条目都保存为一个字节数组。因此在我们的例子中，键将是每个图像的唯一标识符，值将是图像本身。键和值都应该是字符串，此通常的用法是将值序列化为字符串，然后在读取时反序列化。\u003c/p\u003e\n\u003cp\u003e你可以使用\u003ccode\u003epickle\u003c/code\u003e进行序列化。任何Python对象都可以序列化，因此你也可以在数据库中包含图像元数据。这就避免了从磁盘加载数据集时将元数据附加回图像数据的麻烦。\u003c/p\u003e\n\u003cp\u003e你可以为图像及其元数据创建一个基本的Python类：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass CIFAR_Image:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self, image, label):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Dimensions of image for reconstruction - not really necessary \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # for this dataset, but some datasets may include images of \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # varying sizes\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.channels = image.shape[2]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.size = image.shape[:2]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.image = image.tobytes()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.label = label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def get_image(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;\u0026#34;\u0026#34; Returns the image as a numpy array. \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image = np.frombuffer(self.image, dtype=np.uint8)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return image.reshape(*self.size, self.channels)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其次，因为LMDB是内存映射的，所以新的数据库需要知道它们将消耗多少内存。这在我们这里相对简单，但在其他的案例中可能是一个巨大的麻烦。LMDB以\u003ccode\u003emap_size\u003c/code\u003e表示与内存相关的参数。\u003c/p\u003e\n\u003cp\u003e最后，在\u003ccode\u003etransactions\u003c/code\u003e中用LMDB执行读写操作。你可以把它们看作类似于传统数据库，由数据库上的一组操作组成。这看起来可能已经比磁盘版本复杂得多，但是请坚持读下去！\u003c/p\u003e\n\u003cp\u003e考虑到这三点，让我们看看将单个图像保存到LMDB的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport lmdb\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport pickle\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef store_single_lmdb(image, image_id, label):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores a single image to a LMDB.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image       image array, (32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image_id    integer unique ID for image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label       image label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    map_size = image.nbytes * 10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Create a new LMDB environment\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env = lmdb.open(str(lmdb_dir / f\u0026#34;single_lmdb\u0026#34;), map_size=map_size)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Start a new write transaction\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with env.begin(write=True) as txn:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # All key-value pairs need to be strings\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        value = CIFAR_Image(image, label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        key = f\u0026#34;{image_id:08}\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        txn.put(key.encode(\u0026#34;ascii\u0026#34;), pickle.dumps(value))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env.close()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在可以将图像保存到LMDB。最后，让我们看看最后一种方法：HDF5。\u003c/p\u003e\n\u003ch2 id=\"存储到HDF5\"\u003e\u003ca href=\"#存储到HDF5\" class=\"headerlink\" title=\"存储到HDF5\"\u003e\u003c/a\u003e存储到HDF5\u003c/h2\u003e\u003cp\u003e记住，HDF5文件可以包含多个数据集。在这种情况下，你可以创建两个数据集，一个用于图像，一个用于图像的元数据：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport h5py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef store_single_hdf5(image, image_id, label):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores a single image to an HDF5 file.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image       image array, (32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image_id    integer unique ID for image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label       image label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Create a new HDF5 file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file = h5py.File(hdf5_dir / f\u0026#34;{image_id}.h5\u0026#34;, \u0026#34;w\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Create a dataset in the file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dataset = file.create_dataset(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;image\u0026#34;, np.shape(image), h5py.h5t.STD_U8BE, data=image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    meta_set = file.create_dataset(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;meta\u0026#34;, np.shape(label), h5py.h5t.STD_U8BE, data=label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file.close()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eh5py.h5t.STD_U8BE\u003c/code\u003e指定将要存储在数据集中的数据类型，在本例中是无符号8位整数。\u003c/p\u003e\n\u003cp\u003e注意：数据类型的选择将强烈影响HDF5的运行时间和存储要求，因此最好选择最低要求。\u003c/p\u003e\n\u003cp\u003e现在，我们已经回顾了保存单个图像的三种方法。让我们进入下一个步骤。\u003c/p\u003e\n\u003ch3 id=\"存储单个图像的实验\"\u003e\u003ca href=\"#存储单个图像的实验\" class=\"headerlink\" title=\"存储单个图像的实验\"\u003e\u003c/a\u003e存储单个图像的实验\u003c/h3\u003e\u003cp\u003e你可以把用于保存单个图像的所有三个函数放入字典中，该字典可以在稍后的计时代码中使用：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e_store_single_funcs = dict(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    disk=store_single_disk, lmdb=store_single_lmdb, hdf5=store_single_hdf5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e万事俱备只欠东风。让我们尝试保存CIFAR中的第一个图像及其相应的标签，并以三种不同的方式存储它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom timeit import timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estore_single_timings = dict()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor method in (\u0026#34;disk\u0026#34;, \u0026#34;lmdb\u0026#34;, \u0026#34;hdf5\u0026#34;):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    t = timeit(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;_store_single_funcs[method](image, 0, label)\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        setup=\u0026#34;image=images[0]; label=labels[0]\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        number=1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        globals=globals(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    store_single_timings[method] = t\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(f\u0026#34;Method: {method}, Time usage: {t}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意：在使用LMDB时，可能会看到\u003ccode\u003eMapFullError: mdb_txn_commit: MDB_MAP_FULL: Environment mapsize limit reached\u003c/code\u003e错误。LMDB不重写预先存在的值，即使它们具有相同的键。这有助于加快写入时间，但也意味着：如果针对同一个LMDB文件进行写入，则会增加映射数量。如果执行上述函数，请务必先删除任何预先存在的LMDB文件。\u003c/p\u003e\n\u003cp\u003e请记住，我们对运行时间（以毫秒为单位显示）以及内存使用情况感兴趣：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eSave Single Image + Meta\u003c/th\u003e\n\u003cth\u003eMemory\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eDisk\u003c/td\u003e\n\u003ctd\u003e1.915 ms\u003c/td\u003e\n\u003ctd\u003e8 K\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLMDB\u003c/td\u003e\n\u003ctd\u003e1.203 ms\u003c/td\u003e\n\u003ctd\u003e32 K\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eHDF5\u003c/td\u003e\n\u003ctd\u003e8.243 ms\u003c/td\u003e\n\u003ctd\u003e8 K\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e这里有两个要点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e所有的方法都非常快速。\u003c/li\u003e\n\u003cli\u003e在磁盘使用方面，LMDB占用更多。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e显然，尽管LMDB在性能上略有领先，但我们并没有说服任何人为什么不将图像存储在磁盘上。毕竟，这是一种人类可读的格式，你可以从任何文件系统浏览器打开和查看它们！好吧，是时候看看更多的图片了…\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B2_20200114135935.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch2 id=\"存储多个图像\"\u003e\u003ca href=\"#存储多个图像\" class=\"headerlink\" title=\"存储多个图像\"\u003e\u003c/a\u003e存储多个图像\u003c/h2\u003e\u003cp\u003e前面已经演示了使用几种存储单个图像的方法，现在要继续调整代码，以保存多个图像，然后运行计时实验。\u003c/p\u003e\n\u003ch3 id=\"调整代码以用于多个图像\"\u003e\u003ca href=\"#调整代码以用于多个图像\" class=\"headerlink\" title=\"调整代码以用于多个图像\"\u003e\u003c/a\u003e调整代码以用于多个图像\u003c/h3\u003e\u003cp\u003e将多个图像保存为\u003ccode\u003e.png\u003c/code\u003e文件，就像多次调用\u003ccode\u003estore_single_method()\u003c/code\u003e一样简单。但对于LMDB或HDF5，情况并非如此，因为你不希望每个图像都有不同的数据库文件。相反，你希望将所有图像放入一个或多个文件中。\u003c/p\u003e\n\u003cp\u003e你需要稍微修改代码并创建三个接受多个图像的新函数：\u003ccode\u003estore_many_disk()\u003c/code\u003e、\u003ccode\u003estore_many_lmdb()\u003c/code\u003e和\u003ccode\u003estore_many_hdf5\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e def store_many_disk(images, labels):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores an array of images to disk\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images       images array, (N, 32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels       labels array, (N, 1) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    num_images = len(images)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Save all the images one by one\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i, image in enumerate(images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Image.fromarray(image).save(disk_dir / f\u0026#34;{i}.png\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Save all the labels to the csv file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(disk_dir / f\u0026#34;{num_images}.csv\u0026#34;, \u0026#34;w\u0026#34;) as csvfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        writer = csv.writer(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            csvfile, delimiter=\u0026#34; \u0026#34;, quotechar=\u0026#34;|\u0026#34;, quoting=csv.QUOTE_MINIMAL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        for label in labels:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            # This typically would be more than just one value per row\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            writer.writerow([label])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef store_many_lmdb(images, labels):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores an array of images to LMDB.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images       images array, (N, 32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels       labels array, (N, 1) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    num_images = len(images)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    map_size = num_images * images[0].nbytes * 10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Create a new LMDB DB for all the images\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env = lmdb.open(str(lmdb_dir / f\u0026#34;{num_images}_lmdb\u0026#34;), map_size=map_size)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Same as before — but let\u0026#39;s write all the images in a single transaction\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with env.begin(write=True) as txn:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        for i in range(num_images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            # All key-value pairs need to be Strings\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            value = CIFAR_Image(images[i], labels[i])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            key = f\u0026#34;{i:08}\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            txn.put(key.encode(\u0026#34;ascii\u0026#34;), pickle.dumps(value))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env.close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef store_many_hdf5(images, labels):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores an array of images to HDF5.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images       images array, (N, 32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels       labels array, (N, 1) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    num_images = len(images)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Create a new HDF5 file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file = h5py.File(hdf5_dir / f\u0026#34;{num_images}_many.h5\u0026#34;, \u0026#34;w\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Create a dataset in the file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    dataset = file.create_dataset(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;images\u0026#34;, np.shape(images), h5py.h5t.STD_U8BE, data=images\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    meta_set = file.create_dataset(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;meta\u0026#34;, np.shape(labels), h5py.h5t.STD_U8BE, data=labels\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file.close()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e用上面的修改之后的代码，就可以将多个文件存储到磁盘，在这个代码中，可以遍历列表中的每个图像。对于LMDB，还需要通过循环，将每个图像及其元数据加载到一个CIFAR_Image对象中。\u003c/p\u003e\n\u003cp\u003e修改幅度最小是用HDF5方法，其实，几乎没有任何调整！除了外部限制或数据集大小外，HFD5文件对文件大小没有限制，因此所有图像都像以前一样被填充到一个数据集中，最终存储为一个文件。\u003c/p\u003e\n\u003cp\u003e接下来，你需要通过增大数据集来为实验准备数据集。\u003c/p\u003e\n\u003ch3 id=\"准备数据集\"\u003e\u003ca href=\"#准备数据集\" class=\"headerlink\" title=\"准备数据集\"\u003e\u003c/a\u003e准备数据集\u003c/h3\u003e\u003cp\u003e再次运行这些实验之前，让我们首先将数据集大小增加一倍，这样我们就可以使用多达100000个图像进行测试：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecutoffs = [10, 100, 1000, 10000, 100000]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Let\u0026#39;s double our images so that we have 100,000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimages = np.concatenate((images, images), axis=0)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elabels = np.concatenate((labels, labels), axis=0)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Make sure you actually have 100,000 images and labels\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(np.shape(images))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(np.shape(labels))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e既然有了足够的图像，现在是实验的时候了。\u003c/p\u003e\n\u003ch3 id=\"测试存储多个图像的程序\"\u003e\u003ca href=\"#测试存储多个图像的程序\" class=\"headerlink\" title=\"测试存储多个图像的程序\"\u003e\u003c/a\u003e测试存储多个图像的程序\u003c/h3\u003e\u003cp\u003e正如前面那样，可以创建一个字典来处理带有\u003ccode\u003estore_many_\u003c/code\u003e的所有函数并运行实验：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e_store_many_funcs = dict(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    disk=store_many_disk, lmdb=store_many_lmdb, hdf5=store_many_hdf5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom timeit import timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estore_many_timings = {\u0026#34;disk\u0026#34;: [], \u0026#34;lmdb\u0026#34;: [], \u0026#34;hdf5\u0026#34;: []}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor cutoff in cutoffs:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for method in (\u0026#34;disk\u0026#34;, \u0026#34;lmdb\u0026#34;, \u0026#34;hdf5\u0026#34;):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        t = timeit(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;_store_many_funcs[method](images_, labels_)\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            setup=\u0026#34;images_=images[:cutoff]; labels_=labels[:cutoff]\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            number=1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            globals=globals(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        store_many_timings[method].append(t)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Print out the method, cutoff, and elapsed time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(f\u0026#34;Method: {method}, Time usage: {t}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行代码，需要你在悬念中静坐片刻，等待111,110个图像以三种不同的格式分别存储到磁盘上三次，当然，你还需要消耗大约2GB的磁盘空间。\u003c/p\u003e\n\u003cp\u003e现在是见证奇迹的时刻了！所有这些储存需要多长时间？一幅图表胜过千言万语：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/store_many_20200117161242.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/store_many_log_20200117161254.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e第一个图显示程序所得到的存储时间未经变换的比较，从图中可知，存储到“.png”文件和LMDB或HDF5之间的耗时差异较大。\u003c/p\u003e\n\u003cp\u003e第二张图对存储时间进行了对数变换，从图中可知，HDF5的在开始阶段速度比LMDB慢，但是，随着图像数量的增加，它的速度略微领先。\u003c/p\u003e\n\u003cp\u003e准确的测试结果可能会因机器而异，这就是为什么LMDB和HDF5值得考虑的原因。下面是生成上述图形的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport matplotlib.pyplot as plt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef plot_with_legend(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x_range, y_data, legend_labels, x_label, y_label, title, log=False\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Displays a single plot with multiple datasets and matching legends.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        --------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        x_range         list of lists containing x data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        y_data          list of lists containing y values\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        legend_labels   list of string legend labels\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        x_label         x axis label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        y_label         y axis label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.style.use(\u0026#34;seaborn-whitegrid\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.figure(figsize=(10, 7))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if len(y_data) != len(legend_labels):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        raise TypeError(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;Error: number of data sets does not match number of labels.\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    all_plots = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for data, label in zip(y_data, legend_labels):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if log:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            temp, = plt.loglog(x_range, data, label=label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        else:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            temp, = plt.plot(x_range, data, label=label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        all_plots.append(temp)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.title(title)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.xlabel(x_label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.ylabel(y_label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.legend(handles=all_plots)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.show()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Getting the store timings data to display\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edisk_x = store_many_timings[\u0026#34;disk\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elmdb_x = store_many_timings[\u0026#34;lmdb\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehdf5_x = store_many_timings[\u0026#34;hdf5\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eplot_with_legend(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cutoffs,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [disk_x, lmdb_x, hdf5_x],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [\u0026#34;PNG files\u0026#34;, \u0026#34;LMDB\u0026#34;, \u0026#34;HDF5\u0026#34;],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Number of images\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Seconds to store\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Storage time\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    log=False,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eplot_with_legend(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cutoffs,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [disk_x, lmdb_x, hdf5_x],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [\u0026#34;PNG files\u0026#34;, \u0026#34;LMDB\u0026#34;, \u0026#34;HDF5\u0026#34;],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Number of images\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Seconds to store\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Log storage time\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    log=True,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面，再演示读取图片。\u003c/p\u003e\n\u003ch2 id=\"读取单个图像\"\u003e\u003ca href=\"#读取单个图像\" class=\"headerlink\" title=\"读取单个图像\"\u003e\u003c/a\u003e读取单个图像\u003c/h2\u003e\u003cp\u003e首先，让我们考虑读入单个图像的三种方法。\u003c/p\u003e\n\u003ch3 id=\"从磁盘读取\"\u003e\u003ca href=\"#从磁盘读取\" class=\"headerlink\" title=\"从磁盘读取\"\u003e\u003c/a\u003e从磁盘读取\u003c/h3\u003e\u003cp\u003e在这三种方法中，由于序列化的原因，当从内存中读取图像文件时，LMDB需要的工作量最大。让我们浏览一下这些函数，它们分别为三种存储格式读取单个图像。\u003c/p\u003e\n\u003cp\u003e首先，从\u003ccode\u003e.png\u003c/code\u003e和\u003ccode\u003e.csv\u003c/code\u003e文件中读取单个图像及其元数据：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef read_single_disk(image_id):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores a single image to disk.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image_id    integer unique ID for image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Returns:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ----------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image       image array, (32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label       associated meta data, int label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    image = np.array(Image.open(disk_dir / f\u0026#34;{image_id}.png\u0026#34;))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(disk_dir / f\u0026#34;{image_id}.csv\u0026#34;, \u0026#34;r\u0026#34;) as csvfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        reader = csv.reader(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            csvfile, delimiter=\u0026#34; \u0026#34;, quotechar=\u0026#34;|\u0026#34;, quoting=csv.QUOTE_MINIMAL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label = int(next(reader)[0])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return image, label\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"从LMDB读取\"\u003e\u003ca href=\"#从LMDB读取\" class=\"headerlink\" title=\"从LMDB读取\"\u003e\u003c/a\u003e从LMDB读取\u003c/h3\u003e\u003cp\u003e接下来，演示从LMDB读取图像的方法：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef read_single_lmdb(image_id):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores a single image to LMDB.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image_id    integer unique ID for image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Returns:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ----------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image       image array, (32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label       associated meta data, int label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Open the LMDB environment\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env = lmdb.open(str(lmdb_dir / f\u0026#34;single_lmdb\u0026#34;), readonly=True)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Start a new read transaction\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with env.begin() as txn:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Encode the key the same way as we stored it\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        data = txn.get(f\u0026#34;{image_id:08}\u0026#34;.encode(\u0026#34;ascii\u0026#34;))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Remember it\u0026#39;s a CIFAR_Image object that is loaded\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        cifar_image = pickle.loads(data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Retrieve the relevant bits\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image = cifar_image.get_image()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label = cifar_image.label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env.close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return image, label\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意这两行：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eenv = lmdb.open(str(lmdb_dir / f\u0026#34;single_lmdb\u0026#34;), readonly=True)\u003c/code\u003e，其中\u003ccode\u003ereadonly=True\u003c/code\u003e是指在事务完成之前，不允许对LMDB文件进行写操作。在数据库术语中，它相当于获取一个读锁。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eimage = cifar_image.get_image()\u003c/code\u003e中的\u003ccode\u003eget_image()\u003c/code\u003e用处是返回\u003ccode\u003eCIFAR_Image\u003c/code\u003e对象，这也是反序列化的过程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这就结束了从LMDB读取图像的过程。最后，你还需要对HDF5执行相同的操作。\u003c/p\u003e\n\u003ch3 id=\"从HDF5读取\"\u003e\u003ca href=\"#从HDF5读取\" class=\"headerlink\" title=\"从HDF5读取\"\u003e\u003c/a\u003e从HDF5读取\u003c/h3\u003e\u003cp\u003e从HDF5读取图像与写入过程非常相似。下面是打开和读取HDF5文件并解析相同图像和元数据的代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef read_single_hdf5(image_id):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Stores a single image to HDF5.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image_id    integer unique ID for image\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Returns:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ----------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        image       image array, (32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        label       associated meta data, int label\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Open the HDF5 file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file = h5py.File(hdf5_dir / f\u0026#34;{image_id}.h5\u0026#34;, \u0026#34;r+\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    image = np.array(file[\u0026#34;/image\u0026#34;]).astype(\u0026#34;uint8\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    label = int(np.array(file[\u0026#34;/meta\u0026#34;]).astype(\u0026#34;uint8\u0026#34;))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return image, label\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意，在文件目录后用\u003ccode\u003e/\u003c/code\u003e，后面是表示图片文件名的变量，这样可以访问文件中的各种数据集。与以前一样，你可以创建一个包含所有读取函数的字典：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e_read_single_funcs = dict(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    disk=read_single_disk, lmdb=read_single_lmdb, hdf5=read_single_hdf5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e准备好，就可以开始实验了。\u003c/p\u003e\n\u003ch3 id=\"读取单个图像的实验\"\u003e\u003ca href=\"#读取单个图像的实验\" class=\"headerlink\" title=\"读取单个图像的实验\"\u003e\u003c/a\u003e读取单个图像的实验\u003c/h3\u003e\u003cp\u003e你可能会认为：读取单个图像的的时间肯定会很短，下面是实验代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom timeit import timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eread_single_timings = dict()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor method in (\u0026#34;disk\u0026#34;, \u0026#34;lmdb\u0026#34;, \u0026#34;hdf5\u0026#34;):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    t = timeit(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;_read_single_funcs[method](0)\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        setup=\u0026#34;image=images[0]; label=labels[0]\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        number=1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        globals=globals(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    read_single_timings[method] = t\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(f\u0026#34;Method: {method}, Time usage: {t}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面是读取单个图像的实验结果：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eRead Single Image + Meta\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003eDisk\u003c/td\u003e\n\u003ctd\u003e1.61970 ms\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLMDB\u003c/td\u003e\n\u003ctd\u003e4.52063 ms\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eHDF5\u003c/td\u003e\n\u003ctd\u003e1.98036 ms\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e直接从磁盘读取\u003ccode\u003e.png\u003c/code\u003e和\u003ccode\u003e.csv\u003c/code\u003e文件稍微快一点，但这三种方法执行起来都很快。我们接下来要做的实验更有趣。\u003c/p\u003e\n\u003ch2 id=\"读取多个图像\"\u003e\u003ca href=\"#读取多个图像\" class=\"headerlink\" title=\"读取多个图像\"\u003e\u003c/a\u003e读取多个图像\u003c/h2\u003e\u003cp\u003e继续修改代码，实现读取多个图像的功能，当然，性能很重要。\u003c/p\u003e\n\u003ch3 id=\"修改代码以用于读取多个图像\"\u003e\u003ca href=\"#修改代码以用于读取多个图像\" class=\"headerlink\" title=\"修改代码以用于读取多个图像\"\u003e\u003c/a\u003e修改代码以用于读取多个图像\u003c/h3\u003e\u003cp\u003e修改前面的函数（\u003cstrong\u003e注：\u003c/strong\u003e 详见本系列\u003ca href=\"https://mp.weixin.qq.com/s/fDHC60N4rrpGYBlMHEE19g\" target=\"_blank\" rel=\"noopener\"\u003e第二部分\u003c/a\u003e），你可以使用\u003ccode\u003eread_many_\u003c/code\u003e作为前缀命名函数，然后将它们用于随后的实验。与之前一样，在读取不同数量的图像时，比较性能是很有趣的。这些图像在下面的代码中重复，以供参考：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e63\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e65\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e66\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e67\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e68\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e69\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e70\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e71\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e72\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e73\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e74\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e75\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e76\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e77\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e78\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e79\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e81\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef read_many_disk(num_images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Reads image from disk.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        num_images   number of images to read\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Returns:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ----------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images      images array, (N, 32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels      associated meta data, int label (N, 1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    images, labels = [], []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Loop over all IDs and read each image in one by one\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for image_id in range(num_images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images.append(np.array(Image.open(disk_dir / f\u0026#34;{image_id}.png\u0026#34;)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(disk_dir / f\u0026#34;{num_images}.csv\u0026#34;, \u0026#34;r\u0026#34;) as csvfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        reader = csv.reader(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            csvfile, delimiter=\u0026#34; \u0026#34;, quotechar=\u0026#34;|\u0026#34;, quoting=csv.QUOTE_MINIMAL\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        for row in reader:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            labels.append(int(row[0]))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return images, labels\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef read_many_lmdb(num_images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Reads image from LMDB.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        num_images   number of images to read\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Returns:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ----------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images      images array, (N, 32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels      associated meta data, int label (N, 1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    images, labels = [], []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env = lmdb.open(str(lmdb_dir / f\u0026#34;{num_images}_lmdb\u0026#34;), readonly=True)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Start a new read transaction\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with env.begin() as txn:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Read all images in one single transaction, with one lock\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # We could split this up into multiple transactions if needed\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        for image_id in range(num_images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            data = txn.get(f\u0026#34;{image_id:08}\u0026#34;.encode(\u0026#34;ascii\u0026#34;))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            # Remember that it\u0026#39;s a CIFAR_Image object \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            # that is stored as the value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            cifar_image = pickle.loads(data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            # Retrieve the relevant bits\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            images.append(cifar_image.get_image())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            labels.append(cifar_image.label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    env.close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return images, labels\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef read_many_hdf5(num_images):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; Reads image from HDF5.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Parameters:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ---------------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        num_images   number of images to read\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Returns:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ----------\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        images      images array, (N, 32, 32, 3) to be stored\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        labels      associated meta data, int label (N, 1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    images, labels = [], []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Open the HDF5 file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    file = h5py.File(hdf5_dir / f\u0026#34;{num_images}_many.h5\u0026#34;, \u0026#34;r+\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    images = np.array(file[\u0026#34;/images\u0026#34;]).astype(\u0026#34;uint8\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    labels = np.array(file[\u0026#34;/meta\u0026#34;]).astype(\u0026#34;uint8\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return images, labels\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e_read_many_funcs = dict(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    disk=read_many_disk, lmdb=read_many_lmdb, hdf5=read_many_hdf5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e把读函数和写函数一起放在字典中，就可以进行实验了。\u003c/p\u003e\n\u003ch3 id=\"读取多个图像的实验\"\u003e\u003ca href=\"#读取多个图像的实验\" class=\"headerlink\" title=\"读取多个图像的实验\"\u003e\u003c/a\u003e读取多个图像的实验\u003c/h3\u003e\u003cp\u003e现在可以运行程序来读取多个图像：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom timeit import timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eread_many_timings = {\u0026#34;disk\u0026#34;: [], \u0026#34;lmdb\u0026#34;: [], \u0026#34;hdf5\u0026#34;: []}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor cutoff in cutoffs:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for method in (\u0026#34;disk\u0026#34;, \u0026#34;lmdb\u0026#34;, \u0026#34;hdf5\u0026#34;):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        t = timeit(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;_read_many_funcs[method](num_images)\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            setup=\u0026#34;num_images=cutoff\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            number=1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            globals=globals(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        read_many_timings[method].append(t)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        # Print out the method, cutoff, and elapsed time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(f\u0026#34;Method: {method}, No. images: {cutoff}, Time usage: {t}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如前所述，你可以将读取的实验结果绘制成图表：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/read_many_20200119094244.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/read_many_log_20200119094258.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e上面的图表显示了正常的、未经调整的读取时间，由图示可知，从\u003ccode\u003e.png\u003c/code\u003e文件读取图像的时间与从LMDB或HDF5读取之间存在巨大差异。\u003c/p\u003e\n\u003cp\u003e相反，下面的图形是对时间进行对数变换之后的显示，突显了它们之间的相对差异。\u003c/p\u003e\n\u003cp\u003e在实践中，写入时间通常比读取时间更不重要。想象一下，你正在开发一个关于图像的深层神经网络，而整个图像数据集只有一半可以同时放入内存。神经网络训练的每个阶段都需要整个数据集，而模型需要几百个阶段才能收敛。实际上，每个阶段都会将数据集的一半读入内存。\u003c/p\u003e\n\u003cp\u003e此时，人们会使用一些技巧，比如训练pseudo-epochs，使其稍微好一点。\u003c/p\u003e\n\u003cp\u003e现在，再次看一看上面的图，40秒和4秒之间的差距突然就成了6个小时和40分钟的区别！\u003c/p\u003e\n\u003cp\u003e如果我们在同一张图表上查看读写时间，有以下图示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/read_write_20200119095109.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e当你将图像存储为\u003ccode\u003e.png\u003c/code\u003e文件时，写入时间和读取时间有很大的区别。然而，对于LMDB和HDF5，这种差别就不那么明显了。总的来说，即使读取时间比写入时间更重要，使用LMDB或HDF5存储图像也有充分的理由。\u003c/p\u003e\n\u003cp\u003e既然你已经看到了LMDB和HDF5的性能优势，那么让我们来看看另一个重要的指标：磁盘使用率。\u003c/p\u003e\n\u003ch2 id=\"磁盘使用情况\"\u003e\u003ca href=\"#磁盘使用情况\" class=\"headerlink\" title=\"磁盘使用情况\"\u003e\u003c/a\u003e磁盘使用情况\u003c/h2\u003e\u003cp\u003e速度并不是你唯一感兴趣的性能指标。我们已经在处理非常大的数据集，所以磁盘空间也是一个非常有效和相关的问题。\u003c/p\u003e\n\u003cp\u003e假设你有一个3TB的图像数据集。与我们的CIFAR示例不同，你可能已经将它们放在磁盘上的某个位置，因此通过使用另一种存储方法，你实际上是在备份，而这些备份也必须存储。这样做，将在你使用图像时，为你带来巨大的性能优势，但你需要确保有足够的磁盘空间。\u003c/p\u003e\n\u003cp\u003e各种存储方法使用多少磁盘空间？以下是每种方法用于每一数量的图像所占的磁盘空间：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/store_mem_20200119094615.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eHDF5和LMDB都比使用普通的\u003ccode\u003e.png\u003c/code\u003e图像存储占用更多的磁盘空间。需要注意的是，LMDB和HDF5对磁盘的使用和性能在很大程度上取决于各种因素，包括操作系统。更重要的是，存储数据的大小。\u003c/p\u003e\n\u003cp\u003eLMDB通过缓存来提高效率，你不需要了解它的内部工作原理，但请注意：对于较大的图像，LMDB使用的磁盘空间会明显增加，因为图像不适合以LMDB的分支形式存储，会有许多溢出。上面图表中的LMDB柱就要从图表中冒出了。\u003c/p\u003e\n\u003cp\u003e与你可能使用的普通图像相比，32x32x3像素图像相对较小，并且它们允许最佳的LMDB性能。\u003c/p\u003e\n\u003cp\u003e虽然我们不会在这里进行实验性的探索，但根据我自己对256x256x3或512x512x3像素图像的体验，HDF5在磁盘使用方面通常比LMDB稍微高效一些。这是进入最后一节的一个很好的过渡，在最后一节里定性讨论各方法之间的差异。\u003c/p\u003e\n\u003ch2 id=\"讨论\"\u003e\u003ca href=\"#讨论\" class=\"headerlink\" title=\"讨论\"\u003e\u003c/a\u003e讨论\u003c/h2\u003e\u003cp\u003eLMDB和HDF5还有其他值得了解的显著特性，简要讨论对这两种方法的一些评论也是很重要的。\u003c/p\u003e\n\u003ch3 id=\"并行存取\"\u003e\u003ca href=\"#并行存取\" class=\"headerlink\" title=\"并行存取\"\u003e\u003c/a\u003e并行存取\u003c/h3\u003e\u003cp\u003e在上面的实验中，我们没有测试的一个关键比较是并行读和写。通常，对于如此大的数据集，你可能希望通过并行化来加快操作速度。\u003c/p\u003e\n\u003cp\u003e在大多数情况下，你不会对同时读取同一图像的部分内容感兴趣，但你会希望同时读取多个图像。有了这个并行定义，将\u003ccode\u003e.png\u003c/code\u003e文件存储到磁盘实际上允许并发。只要图像名称不同，没有什么可以阻止你从不同的线程一次读取多个图像，或者一次写入多个文件。\u003c/p\u003e\n\u003cp\u003eLMDB怎么样？在一个LMDB环境中可以同时有多个读取器，但是只有一个写入器，并且写入器不会阻塞读取器。你可以在LMDB技术网站上看到更多关于这方面的信息。\u003c/p\u003e\n\u003cp\u003e多个应用程序可以同时访问同一个LMDB数据库，同一进程的多个线程也可以同时访问LMDB进行读取。这使读取过程变得更快：如果将所有CIFAR划分为10个集合，那么可以为一个集合中的每个读取设置10个进程，相当于把加载时间除以10。\u003c/p\u003e\n\u003cp\u003eHDF5还提供并行I/O，允许并行读写。但是，在实现中，除非你有一个并行文件系统，否则会保持写锁，并且访问是按顺序的。\u003c/p\u003e\n\u003cp\u003e如果你正在处理这样一个系统，有两个主要选项。在本文中，关于并行IO的HDF组将更深入地讨论这两个主要选项。它可能变得相当复杂，最简单的选择是智能地将数据集拆分为多个HDF5文件，这样每个进程可以独立处理一个\u003ccode\u003e.h5\u003c/code\u003e文件。\u003c/p\u003e\n\u003ch3 id=\"文档\"\u003e\u003ca href=\"#文档\" class=\"headerlink\" title=\"文档\"\u003e\u003c/a\u003e文档\u003c/h3\u003e\u003cp\u003e如果你用谷歌搜索\u003ccode\u003elmdb\u003c/code\u003e，至少在英国，第三个搜索结果是IMDb（互联网电影数据库）。那不是你要找的！\u003c/p\u003e\n\u003cp\u003e实际上，LMDB的Python包甚至还没有达到0.94以上的版本，但它被广泛使用并被认为是稳定的。\u003c/p\u003e\n\u003cp\u003e至于LMDB技术本身，LMDB技术网站上有更详细的文档。除非你从他们的入门页面开始，否则这种感觉有点像在二年级学习微积分。\u003c/p\u003e\n\u003cp\u003e对于HDF5，在h5py文档站点上有非常清晰的文档，还有Christopher Lovell的一篇有用的博客文章，这篇文章非常全面地介绍了如何使用h5py包。O’Reilly book、Python和HDF5也是一个很好的入门途径。\u003c/p\u003e\n\u003cp\u003e虽然不像初学者所希望的那样有文档记录，但LMDB和HDF5都有很大的用户社区，因此更深入的Google搜索通常会产生有用的结果。\u003c/p\u003e\n\u003ch3 id=\"更具批判性地看待实现\"\u003e\u003ca href=\"#更具批判性地看待实现\" class=\"headerlink\" title=\"更具批判性地看待实现\"\u003e\u003c/a\u003e更具批判性地看待实现\u003c/h3\u003e\u003cp\u003e在存储系统中没有乌托邦，LMDB和HDF5都有各自的陷阱。\u003c/p\u003e\n\u003cp\u003e理解LMDB的一个关键点是：在不覆盖或移动现有数据的情况下写入新数据。这是一个设计决策，它允许你非常快速地读取，就像在我们的实验中所看到的那样，并且还保证数据的完整性和可靠性，而无需保存事务日志。\u003c/p\u003e\n\u003cp\u003e不过，请记住，在写入新数据库之前，需要定义用于内存分配的\u003ccode\u003emap_size\u003c/code\u003e参数。这就是LMDB的麻烦所在。假设你已经创建了一个LMDB数据库，并且一切都很好。你耐心地等待着你的庞大数据集被打包到LMDB中。\u003c/p\u003e\n\u003cp\u003e然后，接下来，你会记住你需要添加新的数据。即使你在\u003ccode\u003emap_size\u003c/code\u003e中指定了缓冲区，也可能很容易看到\u003ccode\u003elmdb.MapFullError\u003c/code\u003e。除非你想用更新后的\u003ccode\u003emap_size\u003c/code\u003e重新编写整个数据库，否则你必须将新数据存储在单独的LMDB文件中。即使一个事务可以跨越多个LMDB文件，但拥有多个文件仍然是一件麻烦的事。\u003c/p\u003e\n\u003cp\u003e此外，有些系统对一次可以占用多少内存有限制。以我自己的经验，在使用HPC系统时，就遇到了令人非常沮丧的事，这让我不得不使用HDF5而不是LMDB。\u003c/p\u003e\n\u003cp\u003e对于LMDB和HDF5，一次只能将请求的项读入内存。使用LMDB，键值对被逐个读入内存，而用HDF5，可以像访问Python数组那样访问\u003ccode\u003edataset\u003c/code\u003e对象，索引为\u003ccode\u003edataset[i]\u003c/code\u003e，切片为\u003ccode\u003edataset[i:j]\u003c/code\u003e和\u003ccode\u003edataset[i:j:interval]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e因为系统是优化的，而且取决于你的操作系统，对于数据的访问顺序可能会影响性能。\u003c/p\u003e\n\u003cp\u003e根据我的经验，通常情况下，对于LMDB，按照键的顺序（键值对按照键的字母数字顺序保存在内存中）访问时可能会获得更好的性能；而对于HDF5，访问大范围将比使用以下方法逐个读取数据集的每个元素执行得更好：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# Slightly slower\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor i in range(len(dataset)):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Read the ith value in the dataset, one at a time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e读取数据集中的第i个值，一次一个\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    do_something_with(dataset[i])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# This is better\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata = dataset[:]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor d in data:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    do_something_with(d)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"与其他库的集成\"\u003e\u003ca href=\"#与其他库的集成\" class=\"headerlink\" title=\"与其他库的集成\"\u003e\u003c/a\u003e与其他库的集成\u003c/h3\u003e\u003cp\u003e如果你处理的是非常大的数据集，你很可能会对它们做一些重要的事情。值得考虑的是深度学习库以及它与LMDB和HDF5的集成类型。\u003c/p\u003e\n\u003cp\u003e首先，只要将图像转换为预期格式的NumPy数组，所有的库都支持从磁盘读取的\u003ccode\u003e.png\u003c/code\u003e文件。这对所有方法都适用，而且我们在上面已经看到，将图像作为数组读取相对简单。\u003c/p\u003e\n\u003cp\u003e以下是几个最受欢迎的深度学习库及其LMDB和HDF5集成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCaffe有一个稳定的、支持良好的LMDB集成，并且它透明地处理读取步骤。LMDB层也可以很容易地替换为HDF5数据库。\u003c/li\u003e\n\u003cli\u003eKeras使用HDF5格式保存和恢复模型。这意味着TensorFlow也可以。\u003c/li\u003e\n\u003cli\u003eTensorFlow有一个内置的类LMDBDataset，它提供了一个接口，用于从LMDB文件中读取输入数据，并且可以批量生成迭代器和张量。TensorFlow没有针对HDF5的内置类，但是可以编写继承Dataset的类。我个人使用了一个自定义的类，它是根据我构造HDF5文件的方式为优化读取访问而设计的。\u003c/li\u003e\n\u003cli\u003eTheano不支持任何特定的文件格式或数据库，但如前所述，只要它作为N维数组被读入，就可以使用任何内容。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e虽然这远远不够全面，但希望通过一些关键的深度学习库，让你对LMDB/HDF5的集成有所了解。\u003c/p\u003e\n\u003ch2 id=\"关于用Python存储图像的一些个人见解\"\u003e\u003ca href=\"#关于用Python存储图像的一些个人见解\" class=\"headerlink\" title=\"关于用Python存储图像的一些个人见解\"\u003e\u003c/a\u003e关于用Python存储图像的一些个人见解\u003c/h2\u003e\u003cp\u003e在我自己的日常工作中，分析万亿字节的医学图像时，我同时使用了LMDB和HDF5，并且了解到，对于任何存储方法，事前筹划都是至关重要的。\u003c/p\u003e\n\u003cp\u003e通常，模型需要使用k-fold交叉验证进行训练，这涉及到将整个数据集拆分为k个集（k通常为10）和正在训练的k个模型，每个模型使用不同的k个集作为测试集。这可以确保模型不会过度拟合数据集，或者，换句话说，无法对未看到的数据进行良好的预测。\u003c/p\u003e\n\u003cp\u003e上述的数据集，要保存到单独的HDF5数据集里，才能以最大限度地提高效率。有时，单个数据集不能一次加载到内存中，因此即使数据集里的数据排序也需要预先考虑。\u003c/p\u003e\n\u003cp\u003e对于LMDB，在创建数据库之前，我同样谨慎地提前计划。在保存图像之前，有几个好问题值得问：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何保存图像，以便让大多数读取都是连续的？\u003c/li\u003e\n\u003cli\u003e什么是好的键？\u003c/li\u003e\n\u003cli\u003e如何计算适合的\u003ccode\u003emap_size\u003c/code\u003e，预测数据集中未来的潜在变化？\u003c/li\u003e\n\u003cli\u003e单个事务可以有多大，应该如何细分事务？\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e不管是哪种存储方法，在处理大型图像数据集时，一个小的规划就能大有帮助。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e你成功了！你现在对一个大问题有了高屋建瓴的了解。\u003c/p\u003e\n\u003cp\u003e在本文中，我们向你介绍了用Python存储和访问大量图像的三种方法，也许你有机会使用其中的一些方法。本文的所有代码都在发布到本文公众号的在线《机器学习案例集》中，欢迎加入这个案例集，里面还有其他有关机器学习的项目。\u003c/p\u003e\n\u003cp\u003e你已经看到了各种存储方法如何显著地影响读写时间的证据，以及本文中考虑的三种方法的一些优缺点。虽然将图像存储为\u003ccode\u003e.png\u003c/code\u003e文件可能是最直观的，但是HDF5或LMDB等方法也有很大的性能优势。\u003c/p\u003e\n\u003cp\u003e（全文完毕）\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关注微信公众号：老齐教室。读深度文章，得精湛技艺，享绚丽人生。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://realpython.com/storing-images-in-python/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://realpython.com/storing-images-in-python/\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#Python 图像 读取 存储\"\u003e\n    \u003cspan class=\"tag-code\"\u003ePython 图像 读取 存储\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/01/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          最适合你学习的深度学习框架\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/01/24/python30%E4%BE%8B/\"\u003e\n        \n          python绝技30例\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-01-22T00:00:00Z",
  "Author": "老齐教室"
}