{
  "Source": "qiwsir.github.io",
  "Title": "用 Python 实现并行计算",
  "Link": "https://qiwsir.github.io/2021/09/15/paralellizingcode/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e用 Python 实现并行计算\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2021-09-15\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e\u003cstrong\u003e注\u003c/strong\u003e：不少学过点编程语言的人，都会抱怨 Python 语言的程序执行速度慢，因此对学习和使用此语言嗤之以鼻。暂且不论程序的执行速度是否是开发者追求的唯一目标（有意对此进行争论的，请参阅人民邮电出版社出版的《编程的原则》一书），单就提升 Python 计算速度而言，并行计算是一个重要的选项。本文即为这方面的入门资料。\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003ePython 非常适合训练机器学习模型、进行数值计算、以及快速开发验证性的模型等。使用 Python ，所需要的辅助工具和也依赖项都很少。在执行这些任务时，你还希望尽可能多地使用底层硬件，以便获得更高的速度。Python 代码的并行化可以实现这一目标。但是，使用标准的 CPython 则无法充分使用底层硬件的计算能力，因为全局解释器锁（GIL）会阻止多个线程同时运行字节码。\u003c/p\u003e\n\u003cp\u003e本文汇总了一些用 Python 代码实现并行计算的常见方法，包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e基于进程的并行计算\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e使用专用库实现并行计算\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIPython 中的并行计算\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e用第三方库 Ray 实现并行计算 \u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e对于每种实现并行计算的技术，本文都列出了一些优点和缺点，并展示了代码示例，以帮助你了解其使用情况。\u003c/p\u003e\n\u003ch2 id=\"并行化-Python-代码\"\u003e\u003ca href=\"#并行化-Python-代码\" class=\"headerlink\" title=\"并行化 Python 代码\"\u003e\u003c/a\u003e并行化 Python 代码\u003c/h2\u003e\u003cp\u003e有几种常见的方法可以让 Python 代码实现并行运行——可以说成“并行化”。 例如启动多个应用程序实例或启动某个脚本来并行执行程序。 若不需要在并行的进程之间交换数据时，这种方法非常有用。 否则，在进程之间共享数据会在聚合数据时显著降低运算性能。  \u003c/p\u003e\n\u003cp\u003e在同一个进程中启动多个线程可以更有效地在作业之间共享数据。在这种情况下，基于线程的并行化可以将一些工作转移到后台。 然而，CPython 实现的全局解释器锁（GIL）阻止了字节码在多个线程中同时运行。  \u003c/p\u003e\n\u003cp\u003e下面示例中的函数模拟了复杂计算（旨在模拟激活函数）。  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e math\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timebudget \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timebudget\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eiterations_count = round(\u003cspan class=\"number\"\u003e1e7\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#34;Complex operation. Input index: {:2d}\u0026#34;\u003c/span\u003e.format(input_index))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [math.exp(i) * math.sinh(i) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e [\u003cspan class=\"number\"\u003e1\u003c/span\u003e] * iterations_count]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了更直观地计算时间，将函数 \u003ccode\u003ecomplex_operation()\u003c/code\u003e 执行多次。将输入的数据划分为几个子集，然后对这些子集并行计算。 \u003c/p\u003e\n\u003cp\u003e下面调用函数 \u003ccode\u003ecomplex_operation()\u003c/code\u003e 的代码中，将其多次执行（ \u003ccode\u003einput\u003c/code\u003e 的区间是 \u003ccode\u003e0~10\u003c/code\u003e ），并使用 \u003ccode\u003etimebudget\u003c/code\u003e 包来度量执行时间（ \u003ccode\u003epip install timebudget\u003c/code\u003e ）  \u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e@timebudget\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef run_complex_operations(operation, input):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i in input:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        operation(i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einput = range(10)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations(complex_operation, input)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行上述程序，输出结果如下：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 34.495sec\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如你所见，在本文中使用的笔记本电脑上执行这段代码大约花了 34.5 秒。这是没有采用任何并行化技术的执行结果，下面就让我们看看如何用并行化方式优化。\u003c/p\u003e\n\u003ch3 id=\"基于进程的并行计算\"\u003e\u003ca href=\"#基于进程的并行计算\" class=\"headerlink\" title=\"基于进程的并行计算\"\u003e\u003c/a\u003e基于进程的并行计算\u003c/h3\u003e\u003cp\u003e第一种方法是基于进程的并行。 使用这种方法，可以同时（即“并发”）启动多个进程，这样，它们就可以并发地执行计算。  \u003c/p\u003e\n\u003cp\u003e从 Python 3开始，标准库中已经有了实现多进程的模块 \u003ca href=\"https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing\" target=\"_blank\" rel=\"noopener\"\u003emultiprocessing\u003c/a\u003e ，用它可以非常便捷地实现多进程进程并发。multiprocessing 模块中的 Pool 类，能自动将输入划分为若干个子集，并将这些子集分配给多个进程。  \u003c/p\u003e\n\u003cp\u003e在前述代码中，使用 Pool 启动 10 个进程，完整代码如下：  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e math\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timebudget \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timebudget\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e multiprocessing \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Pool\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eiterations_count = round(\u003cspan class=\"number\"\u003e1e7\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#34;Complex operation. Input index: {:2d}\u0026#34;\u003c/span\u003e.format(input_index))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [math.exp(i) * math.sinh(i) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e [\u003cspan class=\"number\"\u003e1\u003c/span\u003e] * iterations_count]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@timebudget\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003erun_complex_operations\u003c/span\u003e\u003cspan class=\"params\"\u003e(operation, input, pool)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pool.map(operation, input)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# for i in input:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e#     operation(i)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# input = range(10)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# run_complex_operations(complex_operation, input)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprocesses_count = \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    processes_pool = Pool(processes_count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    run_complex_operations(complex_operation, range(\u003cspan class=\"number\"\u003e10\u003c/span\u003e), processes_pool)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e每个进程同时执行 \u003ccode\u003ecomplex_operations()\u003c/code\u003e 函数，因此，从理论上讲，这些代码可以将总的执行时间减少 10 倍。 然而，试试并非如此。以下是译者的执行结果（在翻译本文的时候，译者将所有代码重新执行，在文中显示的是译者的执行结果）：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 10.645sec\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与之前的运行结果比较，并没有将执行时间缩短 10 倍，其原因有多方面，首先要考察的是本地计算机中 CPU 的数量，它决定了最大进程数。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;Number of CPUs in the system: {}\u0026#39;\u003c/span\u003e.format(os.cpu_count()))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNumber of CPUs \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e the system: \u003cspan class=\"number\"\u003e8\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e用 \u003ccode\u003eos\u003c/code\u003e 模块中的 \u003ccode\u003eos.cpu_count()\u003c/code\u003e 函数能得到本地计算机中 CPU 的数量。\u003c/p\u003e\n\u003cp\u003e另外一个导致上述程序没有如预想那样大幅度降低运算时间的原因，跟程序汇总的计算量较小也有关系。这是因为进程之间必须通过进程间通信机制实现通信，这些计算开销，对于比较小的计算任务而言，并行计算通常比 Python 编写的普通程序所执行的串行计算更慢。\u003c/p\u003e\n\u003cp\u003e总结基于进程的并行计算的优劣：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e优点\u003c/th\u003e\n\u003cth\u003e劣势\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e应用简单\u003c/td\u003e\n\u003ctd\u003e性能不如 Ray （关于 Ray ，见后续）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e摆脱了 GIL 限制\u003c/td\u003e\n\u003ctd\u003e因共享数据而降低性能\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e对结果的聚合需要手动实现\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"利用专用库\"\u003e\u003ca href=\"#利用专用库\" class=\"headerlink\" title=\"利用专用库\"\u003e\u003c/a\u003e利用专用库\u003c/h3\u003e\u003cp\u003eNumPy 等专用于计算的库可以在许多计算上不受 GIL 的限制，于是就能用进程和其他技术实现并行计算。下面就介绍将 NumPy 用于并行计算的方式。\u003c/p\u003e\n\u003cp\u003e为了比较使用 Numpy 与否在计算中的差异，需要编写如下函数。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation_numpy\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      print(\u003cspan class=\"string\"\u003ef\u0026#34;Complex operation (numpy). Input index: \u003cspan class=\"subst\"\u003e{input_index:\u003cspan class=\"number\"\u003e2\u003c/span\u003ed}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      data = np.ones(iterations_count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      np.exp(data) * np.sinh(data)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e函数中使用 NumPy 的 \u003ccode\u003enp.exp()\u003c/code\u003e 和 \u003ccode\u003enp.sinh()\u003c/code\u003e 两个函数对输入数据执行计算。 然后，使用进程池执行 \u003ccode\u003ecomplex_operation()\u003c/code\u003e 和 \u003ccode\u003ecomplex_operation_numpy()\u003c/code\u003e 函数各十次，以比较它们的性能。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprocesses_count = \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einput = range(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e __name__ == \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    processes_pool = Pool(processes_count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(‘Without NumPy’)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    run_complex_operations(complex_operation, input, processes_pool)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(‘NumPy’)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    run_complex_operations(complex_operation_numpy, input, processes_pool)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以下为执行结果：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eWithout Numpy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation. Input index:  9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 11.874sec\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNumpy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eComplex operation (numpy). Input index:  9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 845.87ms\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eNumPy 使性能得到了大幅度提升，846ms vs 12s 。 之所 NumPy 能更快，其原因是其中的大多数处理都是向量化的。 向量化实际上使底层代码可以“并行化”，因为该操作可以一次计算多个数组元素，而不是一次遍历一个数组元素。 \u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eNumPy 的优点\u003c/th\u003e\n\u003cth\u003eNumPy 的劣势\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e简单易用\u003c/td\u003e\n\u003ctd\u003e对结果的聚合需要手动实现\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e多数 NumPy 计算不受 GIL 限制，但不是全部\u003c/td\u003e\n\u003ctd\u003e有限的数值计算\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e支持向量化\u003c/td\u003e\n\u003ctd\u003e自定义算法比较麻烦\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e###使用 IPython 的并行计算包\u003c/p\u003e\n\u003cp\u003eIPython 是数据科学研究者使用的一个工具，能够实现交互式操作，后来被更名为 Jupyter （参阅\u003ca href=\"http://www.itdiffer.com/data.html\" target=\"_blank\" rel=\"noopener\"\u003e《跟老齐学 Python：数据分析》\u003c/a\u003e）。除了这些之外，它还提供了一个用于并行计算的包“IPython Parallel”，安装方法如下：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epip install ipyparallel\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e的官方网站：\u003ca href=\"https://ipyparallel.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://ipyparallel.readthedocs.io/en/latest/\u003c/a\u003e 。\u003c/p\u003e\n\u003cp\u003eIPython Parallel 有很多优点，其中最令人神往的可能是它允许以交互的方式开发、执行和监视并行应用程序。 \u003c/p\u003e\n\u003cp\u003e一种使用 IPython Parallel 的方式是参考官方文档中的样式，在 Jupyter 中直接调用。\u003c/p\u003e\n\u003cp\u003e下面演示的是另外一种方式。首先准备好代码，如下所示（文件名称 \u003ccode\u003eparallelprocess.py\u003c/code\u003e ）\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e math\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timebudget \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timebudget\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e ipyparallel \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e ipp\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eiterations_count = round(\u003cspan class=\"number\"\u003e1e7\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#34;Complex operation. Input index: {:2d}\u0026#34;\u003c/span\u003e.format(input_index))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [math.exp(i) * math.sinh(i) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e [\u003cspan class=\"number\"\u003e1\u003c/span\u003e] * iterations_count]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation_numpy\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#34;Complex operation (numpy). Input index: {:2d}\u0026#34;\u003c/span\u003e.format(input_index))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = np.ones(iterations_count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    np.exp(data) * np.sinh(data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@timebudget\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003erun_complex_operations\u003c/span\u003e\u003cspan class=\"params\"\u003e(operation, input, pool)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pool.map(operation, input)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclient_ids = ipp.Client()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epool = client_ids[:]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einput = range(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;Without NumPy\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations(complex_operation, input, pool)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;NumPy\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations(complex_operation_numpy, input, pool)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后打开一个终端，输入如下 ipcluster 命令（是在命令行状态）：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e%\u003c/span\u003e\u003cspan class=\"bash\"\u003e ipcluster start -n 10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2021-09-17 13:21:24.805 [IPClusterStart] Starting ipcluster with [daemonize=False]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2021-09-17 13:21:25.898 [IPClusterStart] Starting 10 engines with \u0026lt;class \u0026#39;ipyparallel.cluster.launcher.LocalEngineSetLauncher\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2021-09-17 13:21:56.945 [IPClusterStart] Engines appear to have started successfully\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e出现上述 \u003ccode\u003eEngines appear to have started successfully\u003c/code\u003e 提示之后，再打开一个终端，执行前述程序文件，如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e%\u003c/span\u003e\u003cspan class=\"bash\"\u003e python parallelprocess.py\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWithout NumPy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 8.18ms\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNumPy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 6.76ms\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上述结果显示，对于使用和不使用 NumPy 两种情况下下，均用 IPython Parallel 进行并行处理，运算速度远远快于前述两种条件下的执行结果。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIPython 的有点\u003c/th\u003e\n\u003cth\u003eIPython 的劣势\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e支持并行和分布计算\u003c/td\u003e\n\u003ctd\u003e适用于较短的作业内容\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e能用于 Jupyter notebook\u003c/td\u003e\n\u003ctd\u003e如果要执行过程的输出，需要额外的配置\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e配置简单\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"Ray\"\u003e\u003ca href=\"#Ray\" class=\"headerlink\" title=\"Ray\"\u003e\u003c/a\u003eRay\u003c/h3\u003e\u003cp\u003eRay 是一款实现并行和分布计算的第三方库，它具有快速、简单的特点，可以轻松地扩展应用程序，并适用于最先进的机器学习库。 使用 Ray，还是像以往那样运行 Python 代码，只需要做很小的改动。\u003c/p\u003e\n\u003cp\u003e下面会简要介绍 Ray 是如何轻松地并行化普通的 Python 代码的，但需要注意的是，Ray 及其生态系统也可以轻松地并行化其他库，如  scikit-learn，XGBoost, LightGBM, PyTorch, 等等。 \u003c/p\u003e\n\u003cp\u003e首先要安装 Ray ：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003epip install ray\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e然后在前面的  \u003ccode\u003eparallelprocess.py\u003c/code\u003e 文件基础上进行修改，最后的完整代码如下（并命名为 \u003ccode\u003erayprocess.py\u003c/code\u003e 文件）\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e math\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timebudget \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timebudget\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e ray\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eiterations_count = round(\u003cspan class=\"number\"\u003e1e7\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@ray.remote\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Complex operation. Input index: \u003cspan class=\"subst\"\u003e{input_index:\u003cspan class=\"number\"\u003e2\u003c/span\u003ed}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [math.exp(i) * math.sinh(i) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e [\u003cspan class=\"number\"\u003e1\u003c/span\u003e] * iterations_count]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@ray.remote\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecomplex_operation_numpy\u003c/span\u003e\u003cspan class=\"params\"\u003e(input_index)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;Complex operation (numpy). Input index: \u003cspan class=\"subst\"\u003e{input_index:\u003cspan class=\"number\"\u003e2\u003c/span\u003ed}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    data = np.ones(iterations_count)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    np.exp(data) * np.sinh(data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@timebudget\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003erun_complex_operations\u003c/span\u003e\u003cspan class=\"params\"\u003e(operation, input)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ray.get([operation.remote(i) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e input])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eray.init()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003einput = range(\u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;Without NumPy\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations(complex_operation, input)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;NumPy\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations(complex_operation_numpy, input)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e其中 \u003ccode\u003eray.init()\u003c/code\u003e  的作用是启动所有相关的 Ray 进程。 默认情况下，Ray 为每个 CPU 核创建一个进程。 如果希望在集群上运行 Ray ，则需要传入一个类似于\u003ccode\u003eray.init(address=\u0026#39;insertAddressHere\u0026#39;)\u003c/code\u003e 的集群地址。 \u003c/p\u003e\n\u003cp\u003e用装饰器 \u003ccode\u003e@ray.remote\u003c/code\u003e 装饰一个普通的 Python 函数，从而实现创建一个 Ray 任务。这个操作可以在笔记本电脑 CPU 核之间（或 Ray 集群）实现任务调度。\u003c/p\u003e\n\u003cp\u003e在最后一步中，以 \u003ccode\u003e@timebudget\u003c/code\u003e 装饰 \u003ccode\u003erun_complex_operations()\u003c/code\u003e 函数，在 Ray 的调用时间内执行这些函数。  \u003c/p\u003e\n\u003cp\u003e执行此程序后，会得到一个类似于下面的输出:  \u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e%\u003c/span\u003e\u003cspan class=\"bash\"\u003e python rayprocess.py \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/ray/_private/services.py:238: UserWarning: Not all Ray Dashboard dependencies were found. To use the dashboard please install Ray using `pip install ray[default]`. To disable this message, set RAY_DISABLE_IMPORT_WARNING env var to \u0026#39;1\u0026#39;.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  warnings.warn(warning_message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWithout NumPy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9351) Complex operation. Input index:  7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9352) Complex operation. Input index:  5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9353) Complex operation. Input index:  6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9354) Complex operation. Input index:  1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9356) Complex operation. Input index:  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9358) Complex operation. Input index:  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9355) Complex operation. Input index:  3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9357) Complex operation. Input index:  4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9351) Complex operation. Input index:  8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9358) Complex operation. Input index:  9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 12.731sec\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNumPy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9351) Complex operation (numpy). Input index:  1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9352) Complex operation (numpy). Input index:  7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9353) Complex operation (numpy). Input index:  3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9354) Complex operation (numpy). Input index:  5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9356) Complex operation (numpy). Input index:  2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9358) Complex operation (numpy). Input index:  0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9355) Complex operation (numpy). Input index:  4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9357) Complex operation (numpy). Input index:  6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9351) Complex operation (numpy). Input index:  9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(pid=9354) Complex operation (numpy). Input index:  8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erun_complex_operations took 858.52ms\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结果中显示了对于当前 Ray 任务而言的、使用和不使用 NumPy 的运行时间。这里似乎没有体现出 Ray 相对于前述其他并行计算方法的优势，这是因为我们在上面演示的属于小量的计算任务，如果遇到更大的业务，Ray 的优势就会非常显著，如下图所示。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-18/1631960505648-ray.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e在下面的表格中，对 Ray 给予简要总结。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eRay 的优点\u003c/th\u003e\n\u003cth\u003eRay 的劣势\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e支持并行计算和分布计算\u003c/td\u003e\n\u003ctd\u003e针对更大型的业务才会有显著效果\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e可以在 Jupyter 上使用\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e能够应用于现有的常见机器学习和神经网络库\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e整合了多个 Ray 库，如 RLlib（用于强化学习）、Ray Tune（超参数调优）、Ray Serve（可伸缩模式）\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e有多种方法可以让 Python 程序实现并行化执行，并且本文还介绍了它们的一些优缺点。并行化的代码通常会带来一些开销；并行化的好处在较大的业务中更明显，而不是在本文中的简短计算中。\u003c/p\u003e\n\u003cp\u003e特别是在处理典型的基于人工智能的任务时，你必须对你的模型进行重复的微调。 在这种情况下，Ray 提供了最好的支持，因为它拥有丰富的生态系统、自动伸缩、容错和远程服务等能力。  \u003c/p\u003e\n\u003ch2 id=\"参考文献\"\u003e\u003ca href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"\u003e\u003c/a\u003e参考文献\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.anyscale.com/blog/parallelizing-python-code\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.anyscale.com/blog/parallelizing-python-code\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2021/09/10/python-ellipsis/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python 中的省略号\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2021/09/15/compressandarchivefile/\"\u003e\n        \n          用 Python 压缩文件方法汇总\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2021-09-15T00:00:00Z",
  "Author": "老齐教室"
}