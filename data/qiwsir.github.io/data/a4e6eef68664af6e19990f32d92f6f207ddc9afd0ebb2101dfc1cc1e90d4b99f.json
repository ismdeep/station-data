{
  "Source": "qiwsir.github.io",
  "Title": "比较type和isinstance",
  "Link": "https://qiwsir.github.io/2020/10/24/python-type-vs-instance/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e比较type和isinstance\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-10-24\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e与本文相关图书推荐：《Python大学实用教程》\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003ePython是一种动态语言，比如创建一个变量，一开始引用的是字符串，随后就可以再引用整数或者浮点数，解释器对这种变换也接受。这与类似Java那样的语言就完全不同了。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ename = \u0026#34;Sebastian\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 下面演示的就是动态语言特点\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ename = 42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ename = None\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ename = Exception()    # 引用一个实例对象\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在程序中，检查变量所引用的对象是什么类型，对于Python程序也是必要的。一般我们会实用\u003ccode\u003etype()\u003c/code\u003e或者\u003ccode\u003eisinstance()\u003c/code\u003e这两个内置函数。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; variable = \u0026#34;hello\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; type(variable) is str\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTrue\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; isinstance(variable, str)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTrue\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面比较一下这两个函数的性能：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ python -m timeit -s \u0026#34;variable = \u0026#39;hello\u0026#39;\u0026#34; \u0026#34;type(variable) is int\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2000000 loops, best of 5: 102 nsec per loop\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ python -m timeit -s \u0026#34;variable = \u0026#39;hello\u0026#39;\u0026#34; \u0026#34;isinstance(variable, str)\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5000000 loops, best of 5: 72.8 nsec per loop\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003etype\u003c/code\u003e比\u003ccode\u003einstance\u003c/code\u003e慢了 40% (102/72.8 = 1.40).\u003c/p\u003e\n\u003cp\u003e有人也实用 \u003ccode\u003etype(variable) == str\u003c/code\u003e种方式判断某个对象的类型，虽然此方法是可行的，但不提倡，因为：\u003c/p\u003e\n\u003cp\u003e•    == should be used when you want to check the value of a variable. We would use it to see if the value ofvariable is equal to “hello”. But when we want to check if variable is a string, is operator is more appropriate. For a more detailed explanation of when to use one or the other, check this article.\u003cbr/\u003e•    == is slower:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e==\u003c/code\u003e应该用于检查对象是否与另外一个对象相等。我们可以用它来查看变量的值是否等于\u003ccode\u003ehello\u003c/code\u003e，但是想要检查变量是否是一个字符串时，不要用这个符号，而是改用\u003ccode\u003eis\u003c/code\u003e操作符更合适。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e==\u003c/code\u003e的执行速度更慢，可以用下面的代码检验：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ python -m timeit -s \u0026#34;variable = \u0026#39;hello\u0026#39;\u0026#34; \u0026#34;type(variable) == str\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2000000 loops, best of 5: 114 nsec per loop\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eisinstance\u003c/code\u003e和\u003ccode\u003etype\u003c/code\u003e之间除了前面演示的执行速度不同之外，还有别的区别吗？\u003c/p\u003e\n\u003cp\u003e有！而且下面要说的区别，比执行速度还重要。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e的返回值是一个对象的类型（类），可以用它来检查\u003ccode\u003evariable\u003c/code\u003e的类型是否为\u003ccode\u003estr\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eisinstance\u003c/code\u003e要检查第一个参数对象是不是第二个参数所指定的类的实例，例如\u003ccode\u003evariable\u003c/code\u003e是\u003ccode\u003estr\u003c/code\u003e类的一个实例吗？或者，检查是不是第二个参数所指定的类的子类的示例，例如\u003ccode\u003evariable\u003c/code\u003e是\u003ccode\u003estr\u003c/code\u003e子类的一个实例吗?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这在实践很有用。假设自定义一个类，它类似于列表，但方法可以更多一些。所以我们可以把\u003ccode\u003elist\u003c/code\u003e作为这个类的父类，然后在这个类里面写其他的方法，基本样式如下：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass MyAwesomeList(list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Add additional functions here\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e`\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是现在，如果我们将这个新类与一个列表进行比较，\u003ccode\u003etype\u003c/code\u003e 和\u003ccode\u003eisinstance\u003c/code\u003e会返回不同的结果！\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_list = MyAwesomeList()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; type(my_list) is list\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFalse\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; isinstance(my_list, list)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTrue\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出结果不同。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eisinstance\u003c/code\u003e检查\u003ccode\u003emy_list\u003c/code\u003e是否是\u003ccode\u003elist\u003c/code\u003e的一个实例(它不是)、或者是否是\u003ccode\u003elist\u003c/code\u003e的一个子类的实例(它是，因为\u003ccode\u003eMyAwesomeList\u003c/code\u003e是\u003ccode\u003elist\u003c/code\u003e的一个子类)。这个细节，有时候会导致BUG。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eisinstance\u003c/code\u003e通常是判断对象类型的首选方法。它不仅更快，而且还考虑了继承，这通常是我们所需要的。不过，在Python中，我们通常不需要检查某个对象的类型，只需要关注它能不能具备像字符串或列表那样的方法和属性，这就是著名的“鸭子检验”。因此，只需要使用\u003ccode\u003eisinstance\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e另一方面，如果想显式地检查给定对象是否属于某一特定类型(而不是它的子类)，可以使用\u003ccode\u003etype\u003c/code\u003e，但通常用这样的语句\u003ccode\u003etype(var) is some_type\u003c/code\u003e，而不是\u003ccode\u003etype(var) == some_type\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e记住，编写函数的时候，不检查对象类型，是Python的惯例，不要把Java的习惯带过来。\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/10/19/python-filter-function/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          如何使用Python的filter函数\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/12/12/their-learing/\"\u003e\n        \n          他们的学习\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-10-24T00:00:00Z",
  "Author": "老齐教室"
}