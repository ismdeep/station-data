{
  "Source": "qiwsir.github.io",
  "Title": "初学Python语言者必须理解的下划线",
  "Link": "https://qiwsir.github.io/2020/03/25/python-underscore/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e初学Python语言者必须理解的下划线\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-03-25\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：mingrammer\u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e与本文相关的图书推荐：《跟老齐学Python：轻松入门》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8_20200122130623.png\" alt=\"本书各大电商平台有售\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e下划线（\u003ccode\u003e_\u003c/code\u003e）在Python语言中有特殊作用。\u003c/p\u003e\n\u003cp\u003e在大多数编程语言中，下划线是命名变量或者函数名称时的连字符，但是，在Python语言中，不仅如此。如果你是一名Python程序员，对于诸如 \u003ccode\u003e_ in range(10)\u003c/code\u003e , \u003ccode\u003e__init__(self)\u003c/code\u003e 之类的下发肯定熟知。\u003c/p\u003e\n\u003cp\u003e本文将详述下划线（\u003ccode\u003e_\u003c/code\u003e）的使用方法，帮助初学者理解它。\u003c/p\u003e\n\u003cp\u003e在Python语言中，下划线主要应用在如下5个方面：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在交互模式中，保存最近一个表达式的值\u003c/li\u003e\n\u003cli\u003e忽略某个值（“我不重要”）\u003c/li\u003e\n\u003cli\u003e给变量或者函数名称赋予特殊含义\u003c/li\u003e\n\u003cli\u003e作为国际化或本地化的函数命名\u003c/li\u003e\n\u003cli\u003e在数字组成的值中作为分隔符\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下面逐一阐述。\u003c/p\u003e\n\u003ch2 id=\"用在交互模式中\"\u003e\u003ca href=\"#用在交互模式中\" class=\"headerlink\" title=\"用在交互模式中\"\u003e\u003c/a\u003e用在交互模式中\u003c/h2\u003e\u003cp\u003e在Python交互模式总，如果调用\u003ccode\u003e_\u003c/code\u003e，会显示最近的表达式的值。这个功能在标准的交互模式中都有，你也可以在其它Python交互式解析器中使用。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; 10 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; _ \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; _ * 3 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; _ * 20 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e600\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"表示忽略某个值\"\u003e\u003ca href=\"#表示忽略某个值\" class=\"headerlink\" title=\"表示忽略某个值\"\u003e\u003c/a\u003e表示忽略某个值\u003c/h2\u003e\u003cp\u003e下划线也可以用于表示要忽略某个值。如果你不需要某个值或者该值没什么用，可以用下划线作为相应的变量。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# Ignore a value when unpacking\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex, _, y = (1, 2, 3) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# x = 1, y = 3 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Ignore the multiple values. It is called \u0026#34;Extended Unpacking\u0026#34; which is available in only Python 3.x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex, *_, y = (1, 2, 3, 4, 5) \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# x = 1, y = 5  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Ignore the index\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor _ in range(10):     \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    do_something()  \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Ignore a value of specific location\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor _, val in list_of_tuple:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    do_something()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"给变量或者函数名称赋予特殊含义\"\u003e\u003ca href=\"#给变量或者函数名称赋予特殊含义\" class=\"headerlink\" title=\"给变量或者函数名称赋予特殊含义\"\u003e\u003c/a\u003e给变量或者函数名称赋予特殊含义\u003c/h2\u003e\u003cp\u003e下划线，最多的用途还是在命名中，PEP8是Python开发的公约，它约定了4中命名方式。\u003c/p\u003e\n\u003ch3 id=\"单下划线开始\"\u003e\u003ca href=\"#单下划线开始\" class=\"headerlink\" title=\"单下划线开始\"\u003e\u003c/a\u003e单下划线开始\u003c/h3\u003e\u003cp\u003e以单下划线开始的变量、函数、方法、类名称，意在声明该对象私有化，按照此预订，使用\u003ccode\u003efrom module import *\u003c/code\u003e则无法将相应对象导入。\u003c/p\u003e\n\u003cp\u003e然而，Python并不支持真正的私有化，所以我们不能强制某对象私有化，从其他模块中也能直接调用它，有时候，我们会说这种私有化的对象是“内部使用的弱指示器”。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e_internal_name = \u0026#39;one_nodule\u0026#39; # private variable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e_internal_version = \u0026#39;1.0\u0026#39; # private variable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclass _Base: # private class\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    _hidden_factor = 2 # private variable    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self, price):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self._price = price    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def _double_price(self): # private method\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return self._price * self._hidden_factor    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def get_double_price(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return self._double_price()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"单下划线结尾\"\u003e\u003ca href=\"#单下划线结尾\" class=\"headerlink\" title=\"单下划线结尾\"\u003e\u003c/a\u003e单下划线结尾\u003c/h3\u003e\u003cp\u003e为了避免与Python关键词和其他内置对象名称冲突，常常用这种命名方式，你可以不用它。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eTkinter.Toplevel(master, class_=\u0026#39;ClassName\u0026#39;) # Avoid conflict with \u0026#39;class\u0026#39; keyword\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elist_ = List.objects.get(1) # Avoid conflict with \u0026#39;list\u0026#39; built-in type\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"双下划线开始\"\u003e\u003ca href=\"#双下划线开始\" class=\"headerlink\" title=\"双下划线开始\"\u003e\u003c/a\u003e双下划线开始\u003c/h3\u003e\u003cp\u003e这个超越一般约定的语法。当程序运行的时候，Python解析器会对以双下划开始的类中的属性、方法名称重命名，从而避免不同的类中同样名称之间的冲突，基本规则是在双下划线开始的名称前面增加形如“_ClassName”样式的前缀。\u003c/p\u003e\n\u003cp\u003e例如在类中有名为\u003ccode\u003e__method\u003c/code\u003e的方法，这个名字会被更名为\u003ccode\u003e_ClassName__method\u003c/code\u003e形式。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass A:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def _single_method(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pass    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __double_method(self): # for mangling\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        passclass B(A):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __double_method(self): # for mangling\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pass\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如上面所述，以双下划线为开始命名的属性和方法，我们不能用\u003ccode\u003eClassName.__method\u003c/code\u003e方式调用，因此，有人把这作为真正的私有化，但是，这里不推荐这种私有化方式，依据就是Python的命名规则。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e译者注：\u003c/strong\u003e 此处作者的观点，仅供参考。\u003ccode\u003e_namne\u003c/code\u003e这种方式私有化，是约定的私有化，不是真正的私有化；\u003ccode\u003e__name\u003c/code\u003e这种方式真正实现了“私有化”，但在编程中是否采用，有不同的观点。或者说对于“私有化”，在Python中是有不同理解的。\u003c/p\u003e\n\u003ch3 id=\"双下划线开始和结尾\"\u003e\u003ca href=\"#双下划线开始和结尾\" class=\"headerlink\" title=\"双下划线开始和结尾\"\u003e\u003c/a\u003e双下划线开始和结尾\u003c/h3\u003e\u003cp\u003e这种约定用于特殊的变量或者方法——称为“魔法方法”（\u003cstrong\u003e译者想：\u003c/strong\u003e“magic method”，是不是翻译成“魔幻方法”更好呢？这些特殊方法本来就让学习者感到很“魔幻”。），比如\u003ccode\u003e__init__\u003c/code\u003e, \u003ccode\u003e__len__\u003c/code\u003e。这些方法提供了一些特殊的功能，比如\u003ccode\u003e__file__\u003c/code\u003e声明本地的Python文件，\u003ccode\u003e__eq__\u003c/code\u003e实现了表达式\u003ccode\u003ea == b\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e一般的开发者，很少定义这些方法，但是，在定义类的时候\u003ccode\u003e__init__\u003c/code\u003e常常在实例化是被执行。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass A:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self, a): # use special method \u0026#39;__init__\u0026#39; for initializing\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.a = a    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __custom__(self): # custom special method. you might almost do not use it\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pass\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"作为国际化或本地化函数命名\"\u003e\u003ca href=\"#作为国际化或本地化函数命名\" class=\"headerlink\" title=\"作为国际化或本地化函数命名\"\u003e\u003c/a\u003e作为国际化或本地化函数命名\u003c/h2\u003e\u003cp\u003e这仅仅是一个约定，不是函数中的语法。因此，下划线并不意味着国际化（i18n）或本地化（l10n），仅仅是因为这种习惯来自C语言中的习惯。\u003c/p\u003e\n\u003cp\u003e内置标准库的模块gettext，可以用于演示i18n/l10n。Python中的web开发框架Django也支持i18n/l10n，并应用此约定。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# see official docs : https://docs.python.org/3/library/gettext.html\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport gettext\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egettext.bindtextdomain(\u0026#39;myapplication\u0026#39;,\u0026#39;/path/to/my/language/directory\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egettext.textdomain(\u0026#39;myapplication\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e_ = gettext.gettext\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(_(\u0026#39;This is a translatable string.\u0026#39;))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"数字之间的分隔符\"\u003e\u003ca href=\"#数字之间的分隔符\" class=\"headerlink\" title=\"数字之间的分隔符\"\u003e\u003c/a\u003e数字之间的分隔符\u003c/h2\u003e\u003cp\u003e这个功能是在Python3.6中加入的，用下划线作为数字的分隔符。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edec_base = 1_000_000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebin_base = 0b_1111_0000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehex_base = 0x_1234_abcdprint(dec_base) # 1000000\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(bin_base) # 240\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(hex_base) # 305441741\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e本文总结了Python中下换线的使用方法，有的方法或许对你是比较新鲜的，比如i18n/l10n，此前我就不知道。希望本文能对你有启发。\u003c/p\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://medium.com/hackernoon/understanding-the-underscore-of-python-309d1a029edc\" target=\"_blank\" rel=\"noopener\"\u003ehttps://medium.com/hackernoon/understanding-the-underscore-of-python-309d1a029edc\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e搜索技术问答的公众号：老齐教室\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在公众号中回复：\u003cstrong\u003e老齐\u003c/strong\u003e，可查看所有文章、书籍、课程。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#下划线\"\u003e\n    \u003cspan class=\"tag-code\"\u003e下划线\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/03/23/python-asterisk/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python初学者应该了解的星号（*）\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/03/28/python-math-symbole/\"\u003e\n        \n          用Python实现各类数学符号运算\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-03-25T00:00:00Z",
  "Author": "老齐教室"
}