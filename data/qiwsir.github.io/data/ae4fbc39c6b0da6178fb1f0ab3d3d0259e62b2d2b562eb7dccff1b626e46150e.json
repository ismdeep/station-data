{
  "Source": "qiwsir.github.io",
  "Title": "通过内置对象理解 Python（三）",
  "Link": "https://qiwsir.github.io/2021/11/03/python-builtins-third/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e通过内置对象理解 Python（三）\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2021-11-03\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003ch2 id=\"逐一探讨所有的内置函数\"\u003e\u003ca href=\"#逐一探讨所有的内置函数\" class=\"headerlink\" title=\"逐一探讨所有的内置函数\"\u003e\u003c/a\u003e逐一探讨所有的内置函数\u003c/h2\u003e\u003cp\u003e在上一节的基础上，下面从一些最有趣的内容开始，这些内容构建了 Python 作为一种语言的基础，逐一对内置函数进行探讨。 \u003c/p\u003e\n\u003ch3 id=\"compile-exec-和-eval-的工作原理\"\u003e\u003ca href=\"#compile-exec-和-eval-的工作原理\" class=\"headerlink\" title=\"compile, exec 和 eval 的工作原理\"\u003e\u003c/a\u003e\u003ccode\u003ecompile\u003c/code\u003e, \u003ccode\u003eexec\u003c/code\u003e 和 \u003ccode\u003eeval\u003c/code\u003e 的工作原理\u003c/h3\u003e\u003cp\u003e以下面的代码为例:  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ex = [\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(x)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以将此代码保存到一个文件中并运行，或者在 Python 交互模式中键入它。在这两种情况下，得到的输出结果都将是 \u003ccode\u003e[1, 2]\u003c/code\u003e。  \u003c/p\u003e\n\u003cp\u003e第三中情况，可以将程序以字符串形式传给 Python 的内置函数 \u003ccode\u003eexec()\u003c/code\u003e：  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003ex = [1, 2]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(x)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eexec(code)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eexec()\u003c/code\u003e （函数名称是 execute 的缩写）以字符串形式接收一些 Python 代码，并将其作为 Python 代码运行。 默认情况下，\u003ccode\u003eexec()\u003c/code\u003e  将和其余代码在相同的作用域中运行。这意味着，它可以读取和操作变量，就像 Python 文件中的任何其他代码片段一样。  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ex = \u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eexec(\u003cspan class=\"string\"\u003e\u0026#39;print(x)\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eexec()\u003c/code\u003e 允许在执行真正的动态代码。 例如，可以从互联网上下载一个 Python 文件，将其内容传给 \u003ccode\u003eexec()\u003c/code\u003e ，它会运行该文件中的程序（但请千万不要这么做） 。\u003c/p\u003e\n\u003cp\u003e在大多数情况下，编写代码时并不真的需要 \u003ccode\u003eexec()\u003c/code\u003e 。 它用于实现一些真正的动态行为（如在运行时创建动态类，就像 \u003ccode\u003ecollections.namedtuple\u003c/code\u003e 所作的那样，或修改正在从 Python 文件读取的代码（如在 \u003ca href=\"https://github.com/tusharsadhwani/zxpy/blob/3e4eb5e344601cc5a1b4e4f9f72ac3f30111cc93/zx.py#L304\" target=\"_blank\" rel=\"noopener\"\u003ezxpy\u003c/a\u003e中）。不过，这里不重点讨论这个，下面要探讨的是 \u003ccode\u003eexec()\u003c/code\u003e 的执行过程。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eexec()\u003c/code\u003e 不仅可以接收字符串并将其作为代码运行，还可以接收\u003cstrong\u003e代码对象\u003c/strong\u003e，即 Python 程序编译后的“字节码”版本的程序。它们不仅包含从 Python 代码中生成的精确指令，还存储了代码中使用的变量和常量等。 \u003c/p\u003e\n\u003cp\u003e代码对象是从 ASTs（abstract syntax trees，抽象语法树）生成的，ASTs 本身是由运行在代码串上的解析器生成的。  \u003c/p\u003e\n\u003cp\u003e下面，通过例子来了解其内涵。 首先，导入 \u003ccode\u003east\u003c/code\u003e 模块，用于生成一个 AST。  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e ast\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003ex = [1, 2]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(x)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003etree = ast.parse(code)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(ast.dump(tree, indent=\u003cspan class=\"number\"\u003e2\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eModule(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  body=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Assign(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      targets=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        Name(id=\u003cspan class=\"string\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e, ctx=Store())],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      value=List(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        elts=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          Constant(value=\u003cspan class=\"number\"\u003e1\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          Constant(value=\u003cspan class=\"number\"\u003e2\u003c/span\u003e)],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ctx=Load())),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Expr(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      value=Call(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        func=Name(id=\u003cspan class=\"string\"\u003e\u0026#39;print\u0026#39;\u003c/span\u003e, ctx=Load()),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        args=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e          Name(id=\u003cspan class=\"string\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e, ctx=Load())],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        keywords=[]))],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  type_ignores=[])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看着有点难，接下来抽丝剥茧。\u003c/p\u003e\n\u003cp\u003e可以将 \u003ccode\u003eAST\u003c/code\u003e 视为一个 Python 模块。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(ast.dump(tree, indent=\u003cspan class=\"number\"\u003e2\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eModule(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  body=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e该模块的 body 部分含有两个子模块（两个语句）：  \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e第一个是 \u003ccode\u003eAssign\u003c/code\u003e 语句 …\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eAssign(    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e赋值给 \u003ccode\u003ex\u003c/code\u003e …\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etargets=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Name(id=\u003cspan class=\"string\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e, ctx=Store())],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e包含两个常量 \u003ccode\u003e1\u003c/code\u003e 和 \u003ccode\u003e2\u003c/code\u003e 的列表 \u003ccode\u003eList\u003c/code\u003e 的值。 \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e  value=List(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    elts=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      Constant(value=\u003cspan class=\"number\"\u003e1\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      Constant(value=\u003cspan class=\"number\"\u003e2\u003c/span\u003e)],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ctx=Load())),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e),\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e第二个是 \u003ccode\u003eExpr\u003c/code\u003e 语句，在本例中是调用一个函数 …  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eExpr(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  value=Call(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e它的函数名称为 \u003ccode\u003eprint\u003c/code\u003e ，参数值为 \u003ccode\u003ex\u003c/code\u003e 。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efunc=Name(id=\u003cspan class=\"string\"\u003e\u0026#39;print\u0026#39;\u003c/span\u003e, ctx=Load()),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  args=[\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Name(id=\u003cspan class=\"string\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e, ctx=Load())],\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以 \u003ccode\u003eAssign\u003c/code\u003e 部分描述的是 \u003ccode\u003ex = [1, 2]\u003c/code\u003e ，而 \u003ccode\u003eExpr\u003c/code\u003e 描述的是 \u003ccode\u003eprint(x)\u003c/code\u003e 。 现在看起来没那么难，对吧?  \u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003e补充知识：\u003c/strong\u003e Tokenizer\u003c/p\u003e\n\u003cp\u003e实际上，在将代码解析为 AST 之前，还需要执行名为 \u003cstrong\u003eLexing\u003c/strong\u003e 的一个步骤。\u003c/p\u003e\n\u003cp\u003e它指的是根据 Python 语法将源代码转换为 token。从下面的内容中可以看到 Python 如何将源码 token 化。这里使用了 \u003ccode\u003etokenize\u003c/code\u003e 模块：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e$\u003c/span\u003e\u003cspan class=\"bash\"\u003e cat code.py\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex = [1, 2]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e$\u003c/span\u003e\u003cspan class=\"bash\"\u003e py -m tokenize code.py\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0,0-0,0:            ENCODING       \u0026#39;utf-8\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,0-1,1:            NAME           \u0026#39;x\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,2-1,3:            OP             \u0026#39;=\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,4-1,5:            OP             \u0026#39;[\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,5-1,6:            NUMBER         \u0026#39;1\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,6-1,7:            OP             \u0026#39;,\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,8-1,9:            NUMBER         \u0026#39;2\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,9-1,10:           OP             \u0026#39;]\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1,10-1,11:          NEWLINE        \u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2,0-2,5:            NAME           \u0026#39;print\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2,5-2,6:            OP             \u0026#39;(\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2,6-2,7:            NAME           \u0026#39;x\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2,7-2,8:            OP             \u0026#39;)\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2,8-2,9:            NEWLINE        \u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3,0-3,0:            ENDMARKER      \u0026#39;\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e所谓 token 化，就是将源码转换为最基本的标记符（token），比如变量名、括号、字符串和数字。 它还跟踪每个 token 的行号和位置，这有助于指向错误信息的确切位置。  \u003c/p\u003e\n\u003cp\u003e这个“ token 流”就被解析为 AST 的内容。  \u003c/p\u003e\n\u003cp\u003e（补充知识完毕）\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e现在有了一个 AST 对象，接下来使用内置的编译器将它编译成代码对象，并且用 \u003ccode\u003eexec()\u003c/code\u003e 函数执行代码对象，其效果就如同之前的运行结果一样:  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e ast\u0026gt;\u0026gt;\u0026gt; code = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;... x = [1, 2]... print(x)... \u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u0026gt;\u0026gt;\u0026gt; tree = ast.parse(code)\u0026gt;\u0026gt;\u0026gt; code_obj = compile(tree, \u003cspan class=\"string\"\u003e\u0026#39;myfile.py\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;exec\u0026#39;\u003c/span\u003e)\u0026gt;\u0026gt;\u0026gt; exec(code_obj)[\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是现在，可以看看代码对象是什么样子的，先看它的一些属性:  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e ast\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode = \u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003ex = [1, 2]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(x)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003etree = ast.parse(code)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode_obj = compile(tree, \u003cspan class=\"string\"\u003e\u0026#39;myfile.py\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;exec\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eexec(code_obj)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以看到代码中使用的变量 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003eprint\u003c/code\u003e ，以及常数 \u003ccode\u003e1\u003c/code\u003e 和 \u003ccode\u003e2\u003c/code\u003e 。此外，关于源码文件的更多信息都可以在代码对象中找到。 它包含了直接在 Python 虚拟机中运行所需的所有信息，以便生成输出。  \u003c/p\u003e\n\u003cp\u003e如果你想深入了解字节码的含义，下面关于 \u003ccode\u003edis\u003c/code\u003e 模块的补充知识可以参考。\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003e补充知识：\u003c/strong\u003e：\u003ccode\u003edis\u003c/code\u003e 模块\u003c/p\u003e\n\u003cp\u003ePython 中的 \u003ccode\u003edis\u003c/code\u003e 模块可以把字节码以人类能理解的方式可视化地表达出来，以帮助弄清 Python 在幕后做什么。 它接收字节码、常量和变量信息，并产生如下结果：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e dis\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003edis.dis(\u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003ex = [1, 2]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(x)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"number\"\u003e1\u003c/span\u003e           \u003cspan class=\"number\"\u003e0\u003c/span\u003e LOAD_CONST               \u003cspan class=\"number\"\u003e0\u003c/span\u003e (\u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              \u003cspan class=\"number\"\u003e2\u003c/span\u003e LOAD_CONST               \u003cspan class=\"number\"\u003e1\u003c/span\u003e (\u003cspan class=\"number\"\u003e2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              \u003cspan class=\"number\"\u003e4\u003c/span\u003e BUILD_LIST               \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e              \u003cspan class=\"number\"\u003e6\u003c/span\u003e STORE_NAME               \u003cspan class=\"number\"\u003e0\u003c/span\u003e (x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"number\"\u003e2\u003c/span\u003e           \u003cspan class=\"number\"\u003e8\u003c/span\u003e LOAD_NAME                \u003cspan class=\"number\"\u003e1\u003c/span\u003e (\u003cspan class=\"keyword\"\u003eprint\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             \u003cspan class=\"number\"\u003e10\u003c/span\u003e LOAD_NAME                \u003cspan class=\"number\"\u003e0\u003c/span\u003e (x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             \u003cspan class=\"number\"\u003e12\u003c/span\u003e CALL_FUNCTION            \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             \u003cspan class=\"number\"\u003e14\u003c/span\u003e POP_TOP\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             \u003cspan class=\"number\"\u003e16\u003c/span\u003e LOAD_CONST               \u003cspan class=\"number\"\u003e2\u003c/span\u003e (\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             \u003cspan class=\"number\"\u003e18\u003c/span\u003e RETURN_VALUE\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这表明:  \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第1行创建了4个字节码，将两个常数 \u003ccode\u003e1\u003c/code\u003e 和 \u003ccode\u003e2\u003c/code\u003e 加到栈上，并从栈最上面的 \u003ccode\u003e2\u003c/code\u003e 构建一个列表，将其存储到变量 \u003ccode\u003ex\u003c/code\u003e 中。  \u003c/li\u003e\n\u003cli\u003e第2行创建了6个字节码，它将 \u003ccode\u003eprint\u003c/code\u003e 和 \u003ccode\u003ex\u003c/code\u003e 加到栈上，并以栈最上面的 \u003ccode\u003e1\u003c/code\u003e 为参数调用函数（意思是，将参数 \u003ccode\u003ex\u003c/code\u003e  传给 \u003ccode\u003eprint()\u003c/code\u003e 函数并执行此函数）。 然后通过执行 \u003ccode\u003ePOP_TOP\u003c/code\u003e 删除函数的返回值，因为我们没有应用或存储 \u003ccode\u003eprint(x)\u003c/code\u003e 的返回值。最后的两行从文件执行的末尾返回 \u003ccode\u003eNone\u003c/code\u003e ，这不起任何作用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e第1行中的 \u003ccode\u003eLOADC_ONST\u003c/code\u003e 称为一个\u003cstrong\u003e操作码\u003c/strong\u003e（opcode），观察操作码左半边的数字，相邻的两个数字之间差距为2，这是因为把对象存储为操作码时，每个字节码的字长是 2。由此也可知，上述示例中的字符串长度为20个字节常。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode_obj = compile(\u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003ex = [1, 2]\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(x)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;test\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;exec\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode_obj.co_code\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003eb\u0026#39;d\\x00d\\x01g\\x02Z\\x00e\\x01e\\x00\\x83\\x01\\x01\\x00d\\x02S\\x00\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003elen(code_obj.co_code)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e20\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以确认生成的字节码正好是20字节。\u003c/p\u003e\n\u003cp\u003e（补充知识完毕）\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e函数 \u003ccode\u003eeval()\u003c/code\u003e 非常类似于 \u003ccode\u003eexec()\u003c/code\u003e ，只是它只接受表达式作为参数，不能像 \u003ccode\u003eexec()\u003c/code\u003e 那样以一条或者一组语句为参数。而且，与 \u003ccode\u003eexec()\u003c/code\u003e  的另一个不同之处是，它返回参数中表达式的结果。  \u003c/p\u003e\n\u003cp\u003e例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eresult = eval(\u003cspan class=\"string\"\u003e\u0026#39;1 + 1\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eresult\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eYou can also go the long, detailed route with \u003ccode\u003eeval\u003c/code\u003e, you just need to tell \u003ccode\u003east.parse\u003c/code\u003e and \u003ccode\u003ecompile\u003c/code\u003e that you’re expecting to evaluate this code for its value, instead of running it like a Python file.\u003c/p\u003e\n\u003cp\u003e函数对象 \u003ccode\u003eeval\u003c/code\u003e 可以应用于很多地方，比如在 \u003ccode\u003east.parse\u003c/code\u003e 和 \u003ccode\u003ecompile\u003c/code\u003e 中，如果要执行表达式，但不是类似 Python 文件那样，可以用下面的方式：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eexpr = ast.parse(\u003cspan class=\"string\"\u003e\u0026#39;1 + 1\u0026#39;\u003c/span\u003e, mode=\u003cspan class=\"string\"\u003e\u0026#39;eval\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecode_obj = compile(expr, \u003cspan class=\"string\"\u003e\u0026#39;\u0026lt;code\u0026gt;\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;eval\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eeval(code_obj)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"globals-和-locals-：包含所有\"\u003e\u003ca href=\"#globals-和-locals-：包含所有\" class=\"headerlink\" title=\"globals 和 locals ：包含所有\"\u003e\u003c/a\u003e\u003ccode\u003eglobals\u003c/code\u003e 和 \u003ccode\u003elocals\u003c/code\u003e ：包含所有\u003c/h3\u003e\u003cp\u003e虽然生成的代码对象和定义的常量有类似的存储逻辑，但变量的值没有存储，比如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003edouble\u003c/span\u003e\u003cspan class=\"params\"\u003e(number)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个函数将存储常量 \u003ccode\u003e2\u003c/code\u003e 以及变量名 \u003ccode\u003enumber\u003c/code\u003e，但显然它不能包含 \u003ccode\u003enumber\u003c/code\u003e 的实际值，因为只有在函数实际运行时才会给该参数赋值。  \u003c/p\u003e\n\u003cp\u003e那么，这是为什么呢? 答案是 Python 将所有东西都存储在与每个局部作用域关联的字典中。 这意味着每段代码都有自己定义的“局部作用域”，“局部作用域”在代码中使用 \u003ccode\u003elocals()\u003c/code\u003e 访问，它包含对应局部作用域的变量名和值。  \u003c/p\u003e\n\u003cp\u003e让我们来看看实际情况:  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003evalue = \u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003edouble\u003c/span\u003e\u003cspan class=\"params\"\u003e(number)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e number * \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003edouble(value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003elocals()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003cspan class=\"string\"\u003e\u0026#39;__name__\u0026#39;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;__doc__\u0026#39;\u003c/span\u003e: \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;__package__\u0026#39;\u003c/span\u003e: \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#39;__annotations__\u0026#39;\u003c/span\u003e: {}, \u003cspan class=\"string\"\u003e\u0026#39;__builtins__\u0026#39;\u003c/span\u003e: \u0026lt;module \u003cspan class=\"string\"\u003e\u0026#39;builtins\u0026#39;\u003c/span\u003e (built-\u003cspan class=\"keyword\"\u003ein\u003c/span\u003e)\u0026gt;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#39;value\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;double\u0026#39;\u003c/span\u003e: \u0026lt;function double at \u003cspan class=\"number\"\u003e0x7f971d292af0\u003c/span\u003e\u0026gt;}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看最后一行：不仅 \u003ccode\u003evalue\u003c/code\u003e 存储在 \u003ccode\u003elocals()\u003c/code\u003e 返回的字典中，函数 \u003ccode\u003edouble()\u003c/code\u003e 本身也存储在那里！这就是 Python 存储数据的方式。  \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eglobals()\u003c/code\u003e 也与此类似，只不过它是指向全局作用域。所以像这样的代码:  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emagic_number = \u003cspan class=\"number\"\u003e42\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efunction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x = \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    y = \u003cspan class=\"number\"\u003e20\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(locals())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(globals())\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003elocals()\u003c/code\u003e 只包含 \u003ccode\u003ex\u003c/code\u003e 和 \u003ccode\u003ey\u003c/code\u003e ，而 \u003ccode\u003eglobals()\u003c/code\u003e 则包含 \u003ccode\u003emagic_number\u003c/code\u003e 和 \u003ccode\u003efunction\u003c/code\u003e 本身。  \u003c/p\u003e\n\u003ch3 id=\"input-和-print：基本功能\"\u003e\u003ca href=\"#input-和-print：基本功能\" class=\"headerlink\" title=\"input 和 print：基本功能\"\u003e\u003c/a\u003e\u003ccode\u003einput\u003c/code\u003e 和 \u003ccode\u003eprint\u003c/code\u003e：基本功能\u003c/h3\u003e\u003cp\u003e\u003ccode\u003einput\u003c/code\u003e 和 \u003ccode\u003eprint\u003c/code\u003e 可能是 Python 中用得最广泛的两个函数，很多学习者初学之时，经常用它们，看起来很简单，比如 \u003ccode\u003einput\u003c/code\u003e 接收一行文本，\u003ccode\u003eprint\u003c/code\u003e 把文本打印出来，就这么简单。 对吧?  \u003c/p\u003e\n\u003cp\u003e实际上，可能比你知道得更复杂。\u003c/p\u003e\n\u003cp\u003e下面是 \u003ccode\u003eprint()\u003c/code\u003e 函数的完整格式：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprint(*values, sep=\u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e, end=\u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e, file=sys.stdout, flush=\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e参数 \u003ccode\u003e*values\u003c/code\u003e 意味着可以提供任意数量的位置参数，\u003ccode\u003eprint\u003c/code\u003e 都能正确地打印出它们，默认情况所打印的位置参数引用对象之间用空格分隔。  \u003c/p\u003e\n\u003cp\u003e如果想让分隔符有所不同，例如，想把每个项目打印在不同的行上，可以相应地设置 \u003ccode\u003esep\u003c/code\u003e 的值，比如为 \u003ccode\u003e\\n\u003c/code\u003e ：  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"number\"\u003e2\u003c/span\u003e \u003cspan class=\"number\"\u003e3\u003c/span\u003e \u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, sep=\u003cspan class=\"string\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, sep=\u003cspan class=\"string\"\u003e\u0026#39;\\n\\n\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e还有 \u003ccode\u003eend\u003c/code\u003e 参数，通过它可以修改行末的设置，默认是行末端为 \u003ccode\u003e\\n\u003c/code\u003e ，即换行，如果不换行，可以修改为 \u003ccode\u003eend=\u0026#39;\u0026#39;\u003c/code\u003e ：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(\u003cspan class=\"number\"\u003e10\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e6\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e7\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e8\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e9\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(\u003cspan class=\"number\"\u003e10\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(i, end=\u003cspan class=\"string\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0123456789\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e再看 \u003ccode\u003eprint\u003c/code\u003e 另外两个参数：\u003ccode\u003efile\u003c/code\u003e 和 \u003ccode\u003eflush\u003c/code\u003e 。\u003ccode\u003efile\u003c/code\u003e 指将打印的内容输出到指定“文件”，默认值是 \u003ccode\u003esys.stdout\u003c/code\u003e ，即打印到标准输出文件，也就是打印到控制台，  如下，也可以设置为一个具体的文件。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(\u003cspan class=\"string\"\u003e\u0026#39;myfile.txt\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e f:   \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#39;Hello!\u0026#39;\u003c/span\u003e, file=f)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003e补充知识：\u003c/strong\u003e使用上下文管理器\u003c/p\u003e\n\u003cp\u003e在函数 \u003ccode\u003eprint()\u003c/code\u003e 中，默认情况下 \u003ccode\u003efile=sys.stdout\u003c/code\u003e ，则会将所要打印的内容输出到控制台，如果将 \u003ccode\u003esys.stdout\u003c/code\u003e 引用一个文件，则会将打印的内容输出到该文件中。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;a regular print statement\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea regular \u003cspan class=\"keyword\"\u003eprint\u003c/span\u003e statement\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efile = open(\u003cspan class=\"string\"\u003e\u0026#39;myfile.txt\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esys.stdout = file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;this will write to the file\u0026#39;\u003c/span\u003e)  \u003cspan class=\"comment\"\u003e# 写入到 myfile.txt\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efile.close()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是，如果这样做了，就无法再回到控制台，除非关闭当前交互模式，重新进入。如果关闭文件，也会遇到问题。例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;a regular print statement\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea regular \u003cspan class=\"keyword\"\u003eprint\u003c/span\u003e statement\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efile = open(\u003cspan class=\"string\"\u003e\u0026#39;myfile.txt\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esys.stdout = file\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efile.close()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;this will write to the file\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eValueError: I/O operation on closed file.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了避免此问题，可以使用\u003cstrong\u003e上下文管理器\u003c/strong\u003e做装饰器，以确保在完成任务后还原 \u003ccode\u003esys.stdout\u003c/code\u003e 。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e contextlib \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e contextmanager\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e@contextmanager\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eprint_writer\u003c/span\u003e\u003cspan class=\"params\"\u003e(file_path)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    original_stdout = sys.stdout\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(file_path, \u003cspan class=\"string\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e f:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sys.stdout = f\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eyield\u003c/span\u003e  \u003cspan class=\"comment\"\u003e# this is where everything inside the `with` statement happens\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        sys.stdout = original_stdout\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以这样使用它:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e print_writer(\u003cspan class=\"string\"\u003e\u0026#39;myfile.txt\u0026#39;\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#39;Printing straight to the file!\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(\u003cspan class=\"number\"\u003e5\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        print(i)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;and regular print still works!\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e打印到文件或 IO 对象是一个常见的用例，\u003ccode\u003econtextlib\u003c/code\u003e 有一个函数 \u003ccode\u003eredirect_stdout\u003c/code\u003e ：  \u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e contextlib \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e redirect_stdout\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(\u003cspan class=\"string\"\u003e\u0026#39;this.txt\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;w\u0026#39;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e file:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e redirect_stdout(file):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e this\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e open(\u003cspan class=\"string\"\u003e\u0026#39;this.txt\u0026#39;\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e file:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(file.read())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Output:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# The Zen of Python, by Tim Peters\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e（补充知识完毕）\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e参数 \u003ccode\u003eflush=False\u003c/code\u003e 用于标记 \u003ccode\u003eprint()\u003c/code\u003e 的文本内容发送到控制台/文件，而不是将其放入缓存。 这通常没什么区别，但如果在控制台打印一个非常长的字符串，可能要将它设置为 \u003ccode\u003eTrue\u003c/code\u003e ，以避免在向用户显示输出时出现延迟。 \u003c/p\u003e\n\u003cp\u003e而对于 \u003ccode\u003einput()\u003c/code\u003e 函数，就没什么秘密而言了，它只是接受一个字符串作为提示符显示。\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2021/11/03/python-builtins-first/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          通过内置对象理解 Python（一）\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2021/11/03/python-builtins-forth/\"\u003e\n        \n          通过内置对象理解 Python（四）\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2021-11-03T00:00:00Z",
  "Author": "老齐教室"
}