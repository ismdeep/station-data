{
  "Source": "qiwsir.github.io",
  "Title": "通俗易懂的HTTPS",
  "Link": "https://qiwsir.github.io/2020/01/28/https/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e通俗易懂的HTTPS\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-01-28\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e你有没有想过为什么你可以通过互联网发送你的信用卡信息？你可能已经注意到了浏览器地址栏中的https:// ，但它是什么？它如何保证你的信息安全？或者你可能想要创建一个Python HTTPS应用程序，但你并不完全确定这意味着什么。如何确保你的web应用是安全的？\u003c/p\u003e\n\u003cp\u003e你可能会惊讶地发现，不用成为安全专家，也能能回答这些问题！在本文中，你就能得到相关的知识，这些知识组合在一起，可确保网络通信安全。你将看到一些具体示例，这些示例展示了Python HTTPS如何保证信息安全。\u003c/p\u003e\n\u003cp\u003e在本文中，你将学到：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e监视和分析网络流量\u003c/li\u003e\n\u003cli\u003e应用加密技术保证数据安全\u003c/li\u003e\n\u003cli\u003e描述公钥（PKI）的核心概念\u003c/li\u003e\n\u003cli\u003e创建你自己的证书颁发机构\u003c/li\u003e\n\u003cli\u003e构建Python HTTPS应用程序\u003c/li\u003e\n\u003cli\u003e识别常见的Python HTTPS警告和错误\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"什么是HTTP？\"\u003e\u003ca href=\"#什么是HTTP？\" class=\"headerlink\" title=\"什么是HTTP？\"\u003e\u003c/a\u003e什么是HTTP？\u003c/h2\u003e\u003cp\u003e在深入了解HTTPS及其在Python中的使用之前，了解它的上一代HTTP是很重要的。HTTP是HyperText Transfer Protocol（超文本传输协议）的缩写，它支持浏览网站时的通信。更具体地说，HTTP是用户端（如web浏览器）与web服务器（如itdiffer.com）通信的方式。下面是HTTP通信的简化图：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/simple_http_flow_20200124085327.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个图表显示了计算机与服务器通信的流程，下面对每一步给予分解说明：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e告诉浏览器访问\u003ca href=\"http://qiwsir.github.io/。\"\u003ehttp://qiwsir.github.io/。\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e你的设备和服务器建立了TCP连接。\u003c/li\u003e\n\u003cli\u003e浏览器向服务器发送HTTP请求。\u003c/li\u003e\n\u003cli\u003e服务器接收HTTP请求并对其进行解析。\u003c/li\u003e\n\u003cli\u003e服务器借助HTTP响应产生反应。\u003c/li\u003e\n\u003cli\u003e计算机接收、解析并显示响应。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e这个分解说明包含了HTTP的基本知识，向服务器发出请求，服务器返回响应。虽然HTTP不需要TCP，但它确实需要可靠的低级协议。在实践中，几乎总是基于IP实现TCP(尽管谷歌试图创建一个替代品)。\u003c/p\u003e\n\u003cp\u003e就协议而言，HTTP是最简单的协议之一。它的设计目的是通过互联网发送内容，如HTML、视频、图像等，这都是通过HTTP请求和响应完成的。HTTP请求包含以下元素：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e请求方法：描述客户端要执行操作的方法，静态内容的方法通常是GET，此外还有其他可用的方法，如POST、HEAD和DELETE。\u003c/li\u003e\n\u003cli\u003e路径：向服务器指示要请求的网页。例如，此页面的路径是/python-https。\u003c/li\u003e\n\u003cli\u003e版本：HTTP的版本，如1.0、1.1或2.0。最常见的可能是1.1。\u003c/li\u003e\n\u003cli\u003eheaders：描述服务器的其他信息。\u003c/li\u003e\n\u003cli\u003ebody：向服务器提供来自客户端的信息。虽然这个字段不是必需的，但是某些方法要求有提交的内容，比如POST。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些是浏览器用于与服务器通信的内容，服务器借助HTTP响应产生反应，并返回如下信息：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP版本，该版本通常与请求的版本相同。\u003c/li\u003e\n\u003cli\u003e状态代码：指示是否已成功完成了请求。状态代码有很多。\u003c/li\u003e\n\u003cli\u003e状态消息：提供有助于描述状态代码的可读消息。\u003c/li\u003e\n\u003cli\u003eheaders：允许服务器使用关于请求的附加元数据进行响应。\u003c/li\u003e\n\u003cli\u003ebody：承载着内容。从技术上讲，这是可选的，但它通常包含一个有用的资源。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这些是HTTP的组成。\u003c/p\u003e\n\u003ch2 id=\"什么是HTTPS？\"\u003e\u003ca href=\"#什么是HTTPS？\" class=\"headerlink\" title=\"什么是HTTPS？\"\u003e\u003c/a\u003e什么是HTTPS？\u003c/h2\u003e\u003cp\u003e现在你对HTTP有了详细了解，那么，什么是HTTPS？好消息是，你已经知道了！HTTPS，即Hyper Text Transfer Protocol over SecureSocket Layer，超文本传输安全协议。从根本上说，HTTPS与HTTP是相同的协议，但它也意味着通信是安全的。\u003c/p\u003e\n\u003cp\u003eHTTPS不会重写它所构建的任何HTTP基础，相反，HTTPS由通过加密连接发送的常规HTTP组成。通常，这种加密连接由TLS或SSL提供，它们是在信息通过网络发送之前对其进行加密的协议。\u003c/p\u003e\n\u003cp\u003e注意：TLS和SSL是非常相似的协议，尽管SSL正在退出，TLS将取代它。这些协议中的差异不在本文的范围内。只要知道TLS是SSL的更新、更好的版本就足够了。\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8_20200122130623.png\" style=\"zoom:67%;\"/\u003e\n\n\u003cp\u003e那么，为什么要有HTTP和HTTPS两种呢？为什么不把加密引入HTTP协议本身呢？答案是可移植性。保护通信安全是一个重要而困难的问题，但HTTP只是许多需要安全性的协议之一。在网络上，除了网页访问之外，还有其他的许多应用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eE-mail\u003c/li\u003e\n\u003cli\u003e即时通讯\u003c/li\u003e\n\u003cli\u003eVoIP\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e每项应用都有专门的协议，如果每个协议都必须创建自己的安全机制，那么这个世界就会变得更加不安全，也会更加混乱。TLS是上述协议中常用的一种安全通信方法。\u003c/p\u003e\n\u003cp\u003e在下文中，你将学习到的几乎所有内容都不仅仅适用于Python HTTPS应用，此外，还将学习安全通信的基础知识，以及它如何具体应用于HTTPS。\u003c/p\u003e\n\u003ch2 id=\"为什么HTTPS很重要？\"\u003e\u003ca href=\"#为什么HTTPS很重要？\" class=\"headerlink\" title=\"为什么HTTPS很重要？\"\u003e\u003c/a\u003e为什么HTTPS很重要？\u003c/h2\u003e\u003cp\u003e通信安全对于提供安全的在线环境至关重要。随着包括银行和医疗站点在内的越来越多的网络应用，对于开发人员来说，创建Python HTTPS应用变得越来越重要。同样，HTTPS只是TLS或SSL上的HTTP，TLS的设计是为了保护隐私不被窃听，它还可以提供客户端和服务器的身份验证。\u003c/p\u003e\n\u003cp\u003e在本文中，你将通过执行以下操作深入探讨这些概念：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建Python HTTPS服务器\u003c/li\u003e\n\u003cli\u003e与Python HTTPS服务器通信\u003c/li\u003e\n\u003cli\u003e捕获这些通信\u003c/li\u003e\n\u003cli\u003e分析这些消息\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我们开始吧！\u003c/p\u003e\n\u003ch3 id=\"创建示例\"\u003e\u003ca href=\"#创建示例\" class=\"headerlink\" title=\"创建示例\"\u003e\u003c/a\u003e创建示例\u003c/h3\u003e\u003cp\u003e假设你是一个叫做秘密松鼠的酷Python俱乐部的领导，松鼠，作为机密，需要以加密信息的方式发布给会议。作为领导，你要选择发布的加密信息，每次会议都会更改这个信息。不过，有时候，你很难在会前和所有会员见面，告诉他们此信息！你决定设置一个秘密服务器，成员可以在其中只能看到发给他们的加密信息。\u003c/p\u003e\n\u003cp\u003e你已经学习了一些关于真正Python的知识（\u003cstrong\u003e如果还没有学习，推荐《Python大学实用教程》（电子工业出版社）\u003c/strong\u003e），并安装如下模块：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e用于构建web应用程序的Flask\u003c/li\u003e\n\u003cli\u003e作为生产服务器的uWSGI\u003c/li\u003e\n\u003cli\u003e向服务器发起请求的requests\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e要安装所有这些，可以使用\u003ccode\u003epip\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ pip install flask uwsgi requests\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e安装后，就可以开始编写应用程序了。创建名为\u003ccode\u003eserver.py\u003c/code\u003e的文件，并在其中编写Flask应用：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# server.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom flask import Flask\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSECRET_MESSAGE = \u0026#34;fluffy tail\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp = Flask(__name__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e@app.route(\u0026#34;/\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_secret_message():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return SECRET_MESSAGE\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e每当有人访问服务器的\u003ccode\u003e/\u003c/code\u003e路径时，这个Flask应用程序将显示\u003ccode\u003eSECRET_MESSAGE\u003c/code\u003e的内容。这样一来，就可以在秘密服务器上部署应用程序并运行它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ uwsgi --http-socket 127.0.0.1:5683 --mount /=server:app\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此命令旨在启动的服务器上使用上面的Flask应用，所使用的端口有点奇怪（5683），因为你不希望别人能找到它，为自己的“鬼鬼祟祟”感到庆幸！可以通过访问浏览器访问\u003ccode\u003ehttp://localhost:5683\u003c/code\u003e来确认它是否正常工作。\u003c/p\u003e\n\u003cp\u003e因为秘密松鼠俱乐部中的每个人都认识Python，所以你决定帮助他们编写一个名为client.py的脚本，以便让他们获取加密信息：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_secret_message():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    url = os.environ[\u0026#34;SECRET_URL\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = requests.get(url)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(f\u0026#34;The secret message is: {response.text}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    get_secret_message()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-home_20200124092707.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e只要设置了\u003ccode\u003eSECRET_URL\u003c/code\u003e环境变量，此代码就会打印出秘密消息。在本例中，\u003ccode\u003eSECRET_URL\u003c/code\u003e是\u003ccode\u003e127.0.0.1:5683\u003c/code\u003e。所以，你的计划是给每个俱乐部成员一个秘密的网址，告诉他们要保密和安全。\u003c/p\u003e\n\u003cp\u003e虽然这可能看起来不错，但这样做还不够！事实上，即使你在这个网站上输入用户名和密码，它仍然是不安全的。甚至你的团队设法保证了URL的安全，你的秘密消息也还不安全。为了说明为什么你需要了解一些有关监视网络流量的信息，你需要使用一个名为Wireshark的工具。\u003c/p\u003e\n\u003ch3 id=\"设置Wireshark\"\u003e\u003ca href=\"#设置Wireshark\" class=\"headerlink\" title=\"设置Wireshark\"\u003e\u003c/a\u003e设置Wireshark\u003c/h3\u003e\u003cp\u003eWireshark是一个应用广泛的网络和协议分析工具，这它可以帮助你了解网络连接上发生的事情。安装和设置Wireshark对于本文是可选的，但是如果你想继续学习，请安装和使用它。下载页提供了几个安装程序：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emacOS 10.12及更高版本\u003c/li\u003e\n\u003cli\u003e64位Windows安装程序\u003c/li\u003e\n\u003cli\u003e32位Windows安装程序\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果你使用的是Windows或Mac，应该能够下载适当的安装程序并按照提示进行操作。最后，你应该有一个正在运行的Wireshark。\u003c/p\u003e\n\u003cp\u003e如果你是在一个基于Debian的Linux环境中，安装就会有点困难，但仍然是可能的。可以使用以下命令安装Wireshark：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ sudo add-apt-repository ppa:wireshark-dev/stable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ sudo apt-get update\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ sudo apt-get install wireshark\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e$ sudo wireshark\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e启动Wireshark之后，可以看到如下界面：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-home_20200124092838.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e随着Wireshark的运行，是时候分析一些流量了！\u003c/p\u003e\n\u003ch3 id=\"看呀，你的数据多么不安全\"\u003e\u003ca href=\"#看呀，你的数据多么不安全\" class=\"headerlink\" title=\"看呀，你的数据多么不安全\"\u003e\u003c/a\u003e看呀，你的数据多么不安全\u003c/h3\u003e\u003cp\u003e当前客户端和服务器的运行方式是非常不安全的。HTTP发送的所有东西，任何人都可以清楚地看到。这意味着，即使某人没有你的\u003ccode\u003eSECRET_URL\u003c/code\u003e，他仍然可以看到你所做的一切，只要他可以监视你和服务器之间的任何设备上的流量。\u003c/p\u003e\n\u003cp\u003e这对你来说应该比较可怕。毕竟，你不想别人出现在你的秘密松鼠会议上！下面证明这种情况是真实发生的。首先，如果服务器尚未运行，请启动它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ uwsgi --http-socket 127.0.0.1:5683 --mount /=server:app\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这将在端口5683上启动Flask应用。接下来，你将在Wireshark中开始数据包捕获。此数据包捕获将帮助你查看进出服务器的所有流量。首先在Wireshark上选择Loopback:lo接口：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-loopback-click_20200124092931.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e你可以看到Loopback:lo部分突出显示，这指示Wireshark监视此端口的流量。你可以做得更好，并指定要捕获的端口和协议，可以在捕获筛选器中键入\u003ccode\u003eport 5683\u003c/code\u003e，在显示筛选器中键入\u003ccode\u003ehttp\u003c/code\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-port-5683-filter_20200124093109.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e绿色框表示Wireshark对你键入的筛选器感到满意。现在你可以单击左上角的按钮开始捕获：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wirehshark-click_20200124093218.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e单击此按钮将在Wireshark中生成一个新窗口：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-active-capture_20200124093340.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个新窗口相当简单，但底部的消息显示\u003ccode\u003e\u0026lt;live capture in progress\u0026gt;\u003c/code\u003e，这表明它正在工作。别担心什么都没显示出来，这很正常。为了让Wireshark报告任何事情，服务器上必须有一些活动。要获取一些数据，请尝试运行客户端：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ SECRET_URL=\u0026#34;http://127.0.0.1:5683\u0026#34; python client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe secret message is: fluffy tail\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在执行上面的\u003ccode\u003eclient.py\u003c/code\u003e代码之后，你现在应该可以在Wireshark中看到一些条目。如果一切顺利，那么你将看到两个类似于以下内容的条目：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-http-two-entries_20200124093640.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这两个记录表示发生通信的两个部分。第一个是客户机对服务器的请求。当你单击第一个条目时，你将看到大量信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-http-request-1_20200124093501.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e很多信息！在顶部，仍然有HTTP请求和响应。选择其中一个条目后，你将看到中间和底部的行填充了信息。\u003c/p\u003e\n\u003cp\u003e中间一行提供了协议的详细信息，Wireshark能够为所选的请求标识这些信息。这个详细信息允许你探索HTTP请求中实际发生的事情。Wireshark在中间一行从上到下描述了一些信息，下面是这些信息的快速摘要：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e物理层：描述用于发送请求的物理接口。\u003c/li\u003e\n\u003cli\u003e以太网信息：向用户显示的第2层协议，其中包括源和目标MAC地址。\u003c/li\u003e\n\u003cli\u003eIPv4：显示源和目标IP地址（127.0.0.1）。\u003c/li\u003e\n\u003cli\u003eTCP：包括所需的TCP握手，以便创建可靠的数据管道。\u003c/li\u003e\n\u003cli\u003eHTTP：显示关于HTTP请求本身的信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当你展开超文本传输协议层时，可以看到构成HTTP请求的所有信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-http-request-expanded_20200124093829.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e此图显示脚本的HTTP请求：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMethod: GET\u003c/li\u003e\n\u003cli\u003ePath: /\u003c/li\u003e\n\u003cli\u003eVersion: 1.1\u003c/li\u003e\n\u003cli\u003eHeaders: Host: 127.0.0.1:5683, Connection: keep-alive, and others\u003c/li\u003e\n\u003cli\u003eBody: No body\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你看到的最后一行是十六进制的数据转储。在这个十六进制转储中，你可能会注意到：你实际上可以看到HTTP请求的各个部分。那是因为你的HTTP请求是公开发送的。但是回复呢？如果单击HTTP响应，则会看到一个类似的视图：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/wireshark-http-response-expanded2_20200124094025.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e同样，也有那三个部分。如果你仔细看这个十六进制转储文件，会看到明文的秘密消息！这对秘密松鼠来说是个大问题。这意味着，如果有兴趣的话，任何有专门技术知识的人都可以很容易地看到这个数据流。那么，你怎么解决这个问题呢？答案是密码学。\u003c/p\u003e\n\u003ch2 id=\"密码学有什么帮助？\"\u003e\u003ca href=\"#密码学有什么帮助？\" class=\"headerlink\" title=\"密码学有什么帮助？\"\u003e\u003c/a\u003e密码学有什么帮助？\u003c/h2\u003e\u003cp\u003e在本节中，你将学习一种保护数据安全的方法，即创建自己的加密密钥并在服务器和客户机上使用它们。虽然这不是你的最后一步，但它将帮助你为学会构建Python HTTPS应用程序奠定坚实的基础。\u003c/p\u003e\n\u003ch3 id=\"了解密码学基础知识\"\u003e\u003ca href=\"#了解密码学基础知识\" class=\"headerlink\" title=\"了解密码学基础知识\"\u003e\u003c/a\u003e了解密码学基础知识\u003c/h3\u003e\u003cp\u003e密码学是一种保护通信免受窃听或攻击的方法。另一种说法是，你获取正常的信息（称为明文），然后把它转换成加密的文本（称为密文）。\u003c/p\u003e\n\u003cp\u003e密码学一开始可能很吓人，但基本概念是很容易理解的。事实上，你以前可能已经练习过密码学。如果你曾经和你的朋友有过一种秘密语言，并在课堂上用它来传递笔记，那么你就已经练习过密码学。（如果你还没做到，别担心，你即将做到。）\u003c/p\u003e\n\u003cp\u003e不管什么理由，现在你需要把字符串\u003ccode\u003efluffy tail\u003c/code\u003e转换成一些难以理解的东西。一种方法是将某些字符映射到不同的字符上，还有一种有效的方法是将字母向后移动一个位置，这种做法看起来是这样的：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/alpha_20200126212257.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e此图显示如何从原始字母表转换为新字母表并返回。所以，如果你的信息是\u003ccode\u003eABC\u003c/code\u003e，那么实际上发送的信息将会是\u003ccode\u003eZAB\u003c/code\u003e。如果把这个应用到\u003ccode\u003efluffy tail\u003c/code\u003e上，且长度不变，就得到\u003ccode\u003eekteex szhk\u003c/code\u003e，虽然并不完美，但任何人看到都会觉得它是胡言乱语。\u003c/p\u003e\n\u003cp\u003e祝贺你！你已经创建了在密码学中称为密码的东西，它描述了如何将明文转换为密文并返回。在这种情况下，你的密码是用英语描述的。这种特殊类型的密码称为替换密码。基本上，这与Enigma机器（\u003ca href=\"https://en.wikipedia.org/wiki/Enigma_Machine）中使用的密码类型相同，只是简单得多。\" target=\"_blank\" rel=\"noopener\"\u003ehttps://en.wikipedia.org/wiki/Enigma_Machine）中使用的密码类型相同，只是简单得多。\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e现在，如果你想把信息传给秘密松鼠，那么你首先需要告诉它们要移动多少个字母，然后把编码的信息发给它们。在Python中，这可能类似于以下内容：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eCIPHER = {\u0026#34;a\u0026#34;: \u0026#34;z\u0026#34;, \u0026#34;A\u0026#34;: \u0026#34;Z\u0026#34;, \u0026#34;b\u0026#34;: \u0026#34;a\u0026#34;} # And so on\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef encrypt(plaintext: str):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return \u0026#34;\u0026#34;.join(CIPHER.get(letter, letter) for letter in plaintext)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这里，你创建了一个名为\u003ccode\u003eencrypt()\u003c/code\u003e的函数，它将获取明文并将其转换为密文。想象一下，你有一本字典\u003ccode\u003eCIPHER\u003c/code\u003e，它把所有的字符都标出来了。类似地，你可以创建一个\u003ccode\u003edecrypt()\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eDECIPHER = {v: k for k, v in CIPHER.items()}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef decrypt(ciphertext: str):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return \u0026#34;\u0026#34;.join(DECIPHER.get(letter, letter) for letter in ciphertext)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此函数与\u003ccode\u003eencrypt()\u003c/code\u003e相反，它将接受密文并将其转换为明文。在这种形式的密码中，你有一个特殊的密钥，用户需要知道该密钥才能对消息进行加密和解密。对于上面的示例，该密钥是\u003ccode\u003e1\u003c/code\u003e。也就是说，密码指示你应该将每个字母移回一个字符。密钥对于保密非常重要，因为任何拥有密钥的人都可以轻松地解密你的信息。\u003c/p\u003e\n\u003cp\u003e注意：虽然你可以用它来加密，但这仍然不是很安全。这个密码使用频率分析很容易破解，并且对秘密松鼠来说太原始了。\u003c/p\u003e\n\u003cp\u003e在现代社会，密码学要先进得多，它依赖于复杂的数学理论和计算机科学来保证安全。虽然这些密码背后的数学不在本文的讨论范围内，但基本概念是相同的。你有一个密码，它描述了如何获取明文并将其转换为密文。\u003c/p\u003e\n\u003cp\u003e你的替换密码和现代密码的唯一真正区别是：现代密码在数学上被证明是无法被窃听者破解的。现在，让我们看看如何使用你的新密码。\u003c/p\u003e\n\u003ch3 id=\"在Python-HTTPS应用中使用密码学\"\u003e\u003ca href=\"#在Python-HTTPS应用中使用密码学\" class=\"headerlink\" title=\"在Python HTTPS应用中使用密码学\"\u003e\u003c/a\u003e在Python HTTPS应用中使用密码学\u003c/h3\u003e\u003cp\u003e幸运的是，你不必成为数学或计算机科学的专家就可以使用密码学。Python有一个secrets模块，可以帮助你生成密码安全的随机数据。在本文中，你将了解一个名为\u003ccode\u003ecryptography\u003c/code\u003e的Python库，可以用\u003ccode\u003epip\u003c/code\u003e安装它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ pip install cryptography\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e安装了\u003ccode\u003ecryptography\u003c/code\u003e之后，你现在可以使用\u003ccode\u003eFernet\u003c/code\u003e方法以数学上安全的方式加密和解密。\u003c/p\u003e\n\u003cp\u003e记得你密码里的密钥是1。同样，你需要创建一个密钥，以便让\u003ccode\u003eFernet\u003c/code\u003e正常运行：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from cryptography.fernet import Fernet\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; key = Fernet.generate_key()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eb\u0026#39;8jtTR9QcD-k3RO9Pcd5ePgmTu_itJQt9WKQPzqjrcoM=\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这段代码中，导入了\u003ccode\u003eFernet\u003c/code\u003e并生成了一个密钥。密钥只是一个bytes对象，但是保持密钥的机密性和安全性是非常重要的。就像上面的替换示例一样，任何具有此密钥的人都可以轻松地解密你的信息。\u003c/p\u003e\n\u003cp\u003e注意：在现实生活中，你会把这个密钥保管得很安全。在这些例子中，查看密钥是有帮助的。但这是一个糟糕的做法，特别是如果你在公共网站上发布它！换言之，不要使用你在上面看到的确切的密钥来获得你想要的安全性。\u003c/p\u003e\n\u003cp\u003e这个密钥的运行方式与前面的密钥很相似，用它可以将明文转换为密文，并且能够解密返回明文。现在是有趣的部分了！你可以加密如下信息：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_cipher = Fernet(key)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ciphertext = my_cipher.encrypt(b\u0026#34;fluffy tail\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ciphertext\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eb\u0026#39;gAAAAABdlW033LxsrnmA2P0WzaS-wk1UKXA1IdyDpmHcV6yrE7H_ApmSK8KpCW-6jaODFaeTeDRKJMMsa_526koApx1suJ4_dQ==\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这段代码中，创建了一个名为\u003ccode\u003emy_cipher\u003c/code\u003e的Fernet对象，然后可以使用它来加密信息。注意，你的秘密信息\u003ccode\u003efluffy tail\u003c/code\u003e必须是bytes对象才能对其进行加密。加密后，可以看到“密文”是一个长字节流。\u003c/p\u003e\n\u003cp\u003e多亏了Fernet，这个密文没有密钥就不能被操作或阅读！这种加密要求服务器和客户端都有权访问密钥。当双方都需要相同的密钥时，这称为对称加密。在下一节中，你将看到如何使用这种对称加密来保证数据的安全。\u003c/p\u003e\n\u003ch3 id=\"确保数据安全\"\u003e\u003ca href=\"#确保数据安全\" class=\"headerlink\" title=\"确保数据安全\"\u003e\u003c/a\u003e确保数据安全\u003c/h3\u003e\u003cp\u003e现在，你已经了解了Python中密码学的一些基础知识，可以将这些知识应用到你的服务器上。创建名为\u003ccode\u003esymmetric_server.py\u003c/code\u003e的新文件：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# symmetric_server.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom flask import Flask\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.fernet import Fernet\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSECRET_KEY = os.environb[b\u0026#34;SECRET_KEY\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSECRET_MESSAGE = b\u0026#34;fluffy tail\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eapp = Flask(__name__)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_cipher = Fernet(SECRET_KEY)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e@app.route(\u0026#34;/\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_secret_message():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return my_cipher.encrypt(SECRET_MESSAGE)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此代码将原始服务器代码与上一节中使用的\u003ccode\u003eFernet\u003c/code\u003e对象组合在一起。现在使用\u003ccode\u003eos.environb\u003c/code\u003e将密钥作为bytes对象从环境变量中读取。扫清了服务器方面的障碍之后，你现在可以专注于客户端。将以下内容粘贴到\u003ccode\u003esymmetric_client.py\u003c/code\u003e中：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# symmetric_client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.fernet import Fernet\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSECRET_KEY = os.environb[b\u0026#34;SECRET_KEY\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emy_cipher = Fernet(SECRET_KEY)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_secret_message():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = requests.get(\u0026#34;http://127.0.0.1:5683\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    decrypted_message = my_cipher.decrypt(response.content)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(f\u0026#34;The codeword is: {decrypted_message}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    get_secret_message()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是修改后的代码，用于把你的早期客户端与\u003ccode\u003eFernet\u003c/code\u003e加密机制相结合。\u003ccode\u003eget_secret_message()\u003c/code\u003e执行以下操作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e向服务器发出请求。\u003c/li\u003e\n\u003cli\u003e从响应中获取原始字节。\u003c/li\u003e\n\u003cli\u003e尝试解密原始字节。\u003c/li\u003e\n\u003cli\u003e打印解密的信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e如果同时运行服务器和客户端，你将看到正在成功地加密和解密你的秘密信息：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ uwsgi --http-socket 127.0.0.1:5683 \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    --env SECRET_KEY=\u0026#34;8jtTR9QcD-k3RO9Pcd5ePgmTu_itJQt9WKQPzqjrcoM=\u0026#34; \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    --mount /=symmetric_server:app\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在此调试中，你将再次在端口5683上启动服务器。这一次，传入的SECRET_KEY 必须至少是长度为32的base64编码字符串。重新启动服务器后，你现在可以查询它：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ SECRET_KEY=\u0026#34;8jtTR9QcD-k3RO9Pcd5ePgmTu_itJQt9WKQPzqjrcoM=\u0026#34; python symmetric_client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe secret message is: b\u0026#39;fluffy tail\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e哇！你已经实现加密和解密了。如果尝试使用无效的SECRET_KEY运行此操作，则会出现错误：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ SECRET_KEY=\u0026#34;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\u0026#34; python symmetric_client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;.../cryptography/fernet.py\u0026#34;, line 104, in _verify_signature\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    h.verify(data[-32:])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;.../cryptography/hazmat/primitives/hmac.py\u0026#34;, line 66, in verify\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ctx.verify(signature)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;.../cryptography/hazmat/backends/openssl/hmac.py\u0026#34;, line 74, in verify\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    raise InvalidSignature(\u0026#34;Signature did not match digest.\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecryptography.exceptions.InvalidSignature: Signature did not match digest.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eDuring handling of the above exception, another exception occurred:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;symmetric_client.py\u0026#34;, line 16, in \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    get_secret_message()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;symmetric_client.py\u0026#34;, line 11, in get_secret_message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    decrypted_message = my_cipher.decrypt(response.content)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;.../cryptography/fernet.py\u0026#34;, line 75, in decrypt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return self._decrypt_data(data, timestamp, ttl)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;.../cryptography/fernet.py\u0026#34;, line 117, in _decrypt_data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    self._verify_signature(data)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;.../cryptography/fernet.py\u0026#34;, line 106, in _verify_signature\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    raise InvalidToken\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecryptography.fernet.InvalidToken\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e所以，你知道加密和解密是有效的。但它安全吗？是的。为了证明这一点，你可以回到Wireshark，使用与以前相同的过滤器开始新的捕获。完成捕获设置后，再次运行客户端代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ SECRET_KEY=\u0026#34;8jtTR9QcD-k3RO9Pcd5ePgmTu_itJQt9WKQPzqjrcoM=\u0026#34; python symmetric_client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe secret message is: b\u0026#39;fluffy tail\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e你已经成功地发出了另一个HTTP请求和响应，并且再次在Wireshark中看到这些信息。由于加密信息只在响应中传输，你可以单击该信息查看数据：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/response_20200126212741.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e在图片的中间一行，可以看到实际传输的数据：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003egAAAAABdlXSesekh9LYGDpZE4jkxm4Ai6rZQg2iHaxyDXkPWz1O74AB37V_a4vabF13fEr4kwmCe98Wlr8Zo1XNm-WjAVtSgFQ==\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e棒极了！这意味着数据是加密的，窃听者不知道信息内容实际上是什么。不仅如此，这也意味着他们可能会花费大量的时间试图暴力破解这些数据，而且他们几乎永远不会成功。\u003c/p\u003e\n\u003cp\u003e你的数据是安全的！但是等一下——以前使用Python HTTPS应用时，不需要知道任何关于钥匙的事情。这是因为HTTPS不专门使用对称加密。事实证明，分享秘密是个难题。\u003c/p\u003e\n\u003cp\u003e要证明这个概念，请在浏览器中输入\u003ccode\u003ehttp://127.0.0.1:5683\u003c/code\u003e，你将看到加密的响应文本。这是因为你的浏览器对你的密钥一无所知。那么Python HTTPS应用程序到底是如何工作的呢？这就是非对称加密发挥作用的地方。\u003c/p\u003e\n\u003ch3 id=\"如何共享密钥？\"\u003e\u003ca href=\"#如何共享密钥？\" class=\"headerlink\" title=\"如何共享密钥？\"\u003e\u003c/a\u003e如何共享密钥？\u003c/h3\u003e\u003cp\u003e在上一节中，你了解了如何使用对称加密来保证数据在Internet上的安全。尽管对称加密是安全的，但它并不是Python HTTPS应用用来保证数据安全的唯一加密技术。对称加密引入了一些不易解决的基本问题。\u003c/p\u003e\n\u003cp\u003e注意：记住，对称加密要求在客户端和服务器之间有一个共享密钥。不幸的是，安全性的工作强度取决于最弱的链接，而在对称加密中，弱链接尤其具有灾难性。一旦一个人泄露了密钥，那么每个密钥都会泄露。可以肯定的是，任何安全系统在某个时候都会受到损害。\u003c/p\u003e\n\u003cp\u003e那么，你怎么改变密钥？如果你只有一个服务器和一个客户端，这可能是一个快速的任务。然而，随着客户端和服务器的增多，为了有效地更改密钥和保护信息，需要进行越来越多的协调。\u003c/p\u003e\n\u003cp\u003e而且，你每次都要选择一个新的加密方式。在上面的示例中，你看到一个随机生成的密钥，几乎不可能试着让人们记住那个密钥。随着客户端和服务器数量的增长，可能会使用更容易记住和猜测的密钥。\u003c/p\u003e\n\u003cp\u003e如果处理好了更改密钥的问题，那么还有一个问题要解决，如何分享你的初始密钥？在秘密松鼠示例中，你通过对每个成员进行物理访问来解决了这个问题，可以亲自把密钥告诉每个成员，让他们保守秘密，但要记住，有人会是最薄弱的环节。\u003c/p\u003e\n\u003cp\u003e现在，假设你从另一个物理位置向秘密松鼠会添加一个成员，如何与这个会员分享这个秘密？每次更改密钥时，你都让他们搭飞机去找你吗？如果你能把密钥放在你的服务器上并自动共享，那就太好了。不幸的是，这会挫败加密的全部目的，因为任何人都可以得到密钥！\u003c/p\u003e\n\u003cp\u003e当然，你可以给每个人一个初始的主密钥来获取秘密信息，但现在你遇到的问题是以前的两倍。如果你为之头痛，别担心！你不是唯一一个。\u003c/p\u003e\n\u003cp\u003e你需要的是两个从未交流过的人有一个共同的秘密。听起来不可能，对吧？幸运的是，有三个人：拉尔夫·梅克尔、惠特菲尔德·迪菲和马丁·赫尔曼，他们支持你，他们证明了公钥加密（也就是所谓的非对称加密）是可能的。\u003c/p\u003e\n\u003cp\u003e注：虽然惠特菲尔德·迪菲和马丁·赫尔曼被广泛认为是第一个发现这一计划的人，但据1997年的披露，在GCHQ工作的三人：詹姆斯·H·埃利斯、克利福德·考克斯和马尔科姆·J·威廉森早在七年前就展示了这种功能！\u003c/p\u003e\n\u003cp\u003e非对称加密允许两个从未有过通信的用户共享一个共同的秘密。理解基本原理的最简单方法之一是使用颜色类比。假设你有以下场景：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/dh-initial_20200126212941.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e在这个图表中，你试图与一个你从未见过的“秘密松鼠”成员交流，但间谍可以看到你发送的所有信息。你知道对称加密并且想使用它，但是首先需要共享一个密钥。幸运的是，你们俩都有私钥。不幸的是，你不能发送你的私钥，因为间谍会看到它。那你怎么办？\u003c/p\u003e\n\u003cp\u003e你需要做的第一件事就是同意使用你的伙伴的颜色，比如黄色：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/dh-2_20200126213039.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e注意这里间谍可以看到共享的颜色，你和秘密松鼠也可以。共享颜色实际上是公开的。现在，你和秘密松鼠将你的私钥与共享颜色结合起来：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/dh-3_20200126213150.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e你的颜色组合成绿色，而秘密松鼠的颜色组合成橙色。你们两个都使用了共享颜色，现在你们需要彼此共享组合的颜色：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/dh-4_20200126213244.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e你现在有了你的私钥和秘密松鼠的颜色组合。同样地，秘密松鼠有他们的私钥和你的组合颜色。你和秘密松鼠很快就把你们的颜色组合起来了。\u003c/p\u003e\n\u003cp\u003e然而，间谍只有这两种颜色。要想弄清楚你的原色是非常困难的，即使给定了最初的共享颜色。间谍得去商店买很多不同的蓝颜料来试试。即使这样，也很难知道他们在组合后是否看到了具有正确深浅度的绿色！简而言之，你的私钥仍然是私钥。\u003c/p\u003e\n\u003cp\u003e但是你和那个“秘密松鼠”成员呢？你们仍然没有一个共同的秘密！这是你的私钥重新派上用场的地方。如果你把你的私钥和你从秘密松鼠那里得到的颜色组合在一起，那么你俩最终会得到相同的颜色：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/dh-5_20200126213353.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e现在，你和这个“秘密松鼠”成员有着相同的秘密颜色。你现在已经成功地和一个完全陌生的人分享了一个安全的秘密。这对于公钥密码的工作方式来说是惊人的精确。这个事件序列还有另一个通用名称：Diffie-Hellman密钥交换。密钥交换由以下部分组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e私钥是示例中的私用颜色。\u003c/li\u003e\n\u003cli\u003e公钥是你共享的组合颜色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e私钥是你始终保持私有的东西，而公钥可以与任何人共享。这些概念直接映射到Python HTTPS应用程序的现实世界。既然服务器和客户端有了一个共享的秘密，你可以使用你的“老伙计”对称加密来对所有信息进行加密！\u003c/p\u003e\n\u003cp\u003e注意：公钥密码术也依赖于一些数学知识来进行颜色混合。Diffie-Hellman密钥交换的维基百科词条有很好的解释，但是深入的解释不在本文的范围之内。\u003c/p\u003e\n\u003cp\u003e当你通过安全网站（如本网站）进行通信时，你的浏览器和服务器使用这些相同的原则设置安全通信：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e浏览器从服务器请求信息。\u003c/li\u003e\n\u003cli\u003e浏览器和服务器交换公钥。\u003c/li\u003e\n\u003cli\u003e浏览器和服务器生成共享私钥。\u003c/li\u003e\n\u003cli\u003e浏览器和服务器使用此共享密钥通过对称加密对消息进行加密和解密。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e幸运的是，你不需要实现这些细节。有许多内置库和第三方库可以帮助你保持客户端和服务器通信的安全。\u003c/p\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/Django2%E7%AB%8B%E4%BD%93%E5%9B%BE_20200117164816.png\" style=\"zoom:67%;\"/\u003e\n\n\u003ch2 id=\"真实的HTTPS\"\u003e\u003ca href=\"#真实的HTTPS\" class=\"headerlink\" title=\"真实的HTTPS\"\u003e\u003c/a\u003e真实的HTTPS\u003c/h2\u003e\u003cp\u003e考虑到所有这些关于加密的信息，让我们把范围缩小一点，讨论一下Python HTTPS应用在真实的项目中的实际方式，加密只是事情的一半，访问安全网站时，需要两个主要组件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e加密：将明文转换为密文并返回。\u003c/li\u003e\n\u003cli\u003e身份认证：验证某人或事物是否名副其实。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你已经了解了关于加密的工作原理，但是如何身份认证？要了解真实项目中的身份认证，需要了解公钥基础结构（PKI）。PKI在安全生态系统中引入了另一个重要概念：证书。\u003c/p\u003e\n\u003cp\u003e证书就是互联网上的护照，和计算机世界中的大多数东西一样，它们只是含有数据的文件中。一般来说，证书包括以下信息：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e颁发给：标识证书的所有者\u003c/li\u003e\n\u003cli\u003e颁发者：标识颁发证书的人\u003c/li\u003e\n\u003cli\u003e有效期：标识证书有效的时间范围\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e就像护照一样，证书只有在由权威机构生成和认可的情况下才真正有用。你的浏览器不可能知道你在互联网上访问的每个站点的每个证书，相反，PKI依赖于一个称为证书颁发机构（CA）的概念。\u003c/p\u003e\n\u003cp\u003e证书颁发机构负责颁发证书。在PKI中，它们被认为是可信的第三方（TTP）。本质上，这些实体充当证书的有效权限。假设你想去另一个国家，你有一本护照，上面有你所有的信息。在外国的移民官员怎么知道你的护照上包含有效的信息？\u003c/p\u003e\n\u003cp\u003e如果你要自己填写所有信息并签字，那么你想访问的每个国家的每个移民官都需要亲自了解你，并且能够证明那里的信息确实正确。\u003c/p\u003e\n\u003cp\u003e处理此问题的另一种方法是将所有信息发送到可信的第三方（TTP）。TTP会对你提供的资料进行彻底调查，核实你的要求，然后签署你的护照。事实证明，这更为实际，因为移民局官员只需要了解可信的第三方。\u003c/p\u003e\n\u003cp\u003eTTP是如何在实践中处理证书的？过程如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e创建证书签名请求（CSR）：这就像填写签证信息一样。\u003c/li\u003e\n\u003cli\u003e将CSR发送给可信的第三方（TTP）：这就像将你的信息发送到签证申请办公室。\u003c/li\u003e\n\u003cli\u003e验证你的信息：不管怎样，TTP需要验证你提供的信息。作为一个例子，请看Amazon如何验证所有权。\u003c/li\u003e\n\u003cli\u003e生成一个公钥：TTP签署你的CSR。这相当于TTP签署你的签证。\u003c/li\u003e\n\u003cli\u003e签发已验证的公钥：这相当于你在邮件中收到签证。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请注意，CSR以加密方式绑定到你的私钥。因此，信息公钥、私钥和证书颁发机构的所有三个部分都以某种方式相关。这将创建所谓的信任链，因此你现在拥有一个有效的证书，可以用来核实你的身份。\u003c/p\u003e\n\u003cp\u003e大多数情况下，这是网站所有者的责任，网站所有者将遵循所有这些步骤。在这个过程结束时，他们的证书上写着：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e根据Y，从时间A和时间B期间，我是X\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这句话就是证书真正告诉你的。变量的填写方法如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA是有效的开始日期和时间。\u003c/li\u003e\n\u003cli\u003eB是有效的结束日期和时间。\u003c/li\u003e\n\u003cli\u003eX是服务器的名称。\u003c/li\u003e\n\u003cli\u003eY是证书颁发机构的名称。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/my_book4_20200116132005.png\" style=\"zoom:67%;\"/\u003e\n\n\u003cp\u003e基本上，这都是证书描述的。换句话说，有证书并不一定意味着你就是你所说的那个人，只是你让Y同意 你就是你所说的那个人。这就是可信的第三方的“可信”部分。\u003c/p\u003e\n\u003cp\u003eTTP需要在客户端和服务器之间共享，以便每个人都对HTTPS握手感到满意。你的浏览器会自动安装许多证书，要查看它们，请执行以下步骤：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChrome：进入设置\u0026gt;高级\u0026gt;隐私和安全\u0026gt;管理证书\u0026gt;权限。\u003c/li\u003e\n\u003cli\u003eFirefox：进入设置\u0026gt;首选项\u0026gt;隐私和安全\u0026gt;查看证书\u0026gt;权限。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这涵盖了在真实项目中创建Python HTTPS应用所需的基础知识，接下来，把这些概念应用到自己的代码中，调试一个常见的示例，并成为你自己的秘密松鼠证书颁发机构！\u003c/p\u003e\n\u003ch2 id=\"Python-HTTPS应用\"\u003e\u003ca href=\"#Python-HTTPS应用\" class=\"headerlink\" title=\"Python HTTPS应用\"\u003e\u003c/a\u003ePython HTTPS应用\u003c/h2\u003e\u003cp\u003e你已经了解了制作Python HTTPS应用所需的基本知识，现在是将所有知识逐一绑定到你的应用的时候了，这将让服务器和客户端之间的通信更安全。\u003c/p\u003e\n\u003cp\u003e可以在自己的机器上设置整个PKI基础设施，这正是本节中要做的。没有听起来那么难，所以别担心！成为一个真正的证书颁发机构要比采取以下步骤困难得多，但你将要读到的大体上是你运行自己的CA（证书颁发机构）所需的全部内容。\u003c/p\u003e\n\u003ch3 id=\"成为证书颁发机构\"\u003e\u003ca href=\"#成为证书颁发机构\" class=\"headerlink\" title=\"成为证书颁发机构\"\u003e\u003c/a\u003e成为证书颁发机构\u003c/h3\u003e\u003cp\u003e证书颁发机构只不过是一对非常重要的公钥和私钥。要成为CA（证书颁发机构），只需要生成一个公钥和私钥对。\u003c/p\u003e\n\u003cp\u003e注意：成为公众使用的CA是一个非常艰难的过程，尽管有很多公司遵循了这个过程。但是，到本文时，你也不会是这些公司中的一员！\u003c/p\u003e\n\u003cp\u003e你的初始公钥和私钥对将是自签名证书。如果你真的要成为一个CA（证书颁发机构），那么这个私钥的安全是非常重要的。如果有人可以访问CA的公钥和私钥对，他也可以生成一个完全有效的证书，并且除了停止信任你的CA之外，你无法检测该问题。\u003c/p\u003e\n\u003cp\u003e解除警告后，你可以立即生成证书。首先，生成一个私钥。将以下内容粘贴到名为\u003ccode\u003epki_helpers.py\u003c/code\u003e的文件中：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# pki_helpers.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.hazmat.backends import default_backend\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.hazmat.primitives import serialization\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.hazmat.primitives.asymmetric import rsa\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef generate_private_key(filename: str, passphrase: str):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    private_key = rsa.generate_private_key(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        public_exponent=65537, key_size=2048, backend=default_backend()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    utf8_pass = passphrase.encode(\u0026#34;utf-8\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    algorithm = serialization.BestAvailableEncryption(utf8_pass)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(filename, \u0026#34;wb\u0026#34;) as keyfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        keyfile.write(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            private_key.private_bytes(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                encoding=serialization.Encoding.PEM,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                format=serialization.PrivateFormat.TraditionalOpenSSL,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                encryption_algorithm=algorithm,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return private_key\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003egenerate_private_key()\u003c/code\u003e使用RSA生成私钥。下面是代码的分解：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第2行到第4行导入运行该函数所需的库。\u003c/li\u003e\n\u003cli\u003e第7行到第9行使用RSA生成私钥。神奇的数字65537和2048只是两个可能的值。你可以阅读更多关于这些数字有用的原因，或只是简单相信这些数字是有用的。\u003c/li\u003e\n\u003cli\u003e第11到12行设置用于私钥的加密算法。\u003c/li\u003e\n\u003cli\u003e第14至21行按指定的文件名将私钥写入磁盘。此文件使用提供的密码来加密。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e成为你自己的CA的下一步是生成自签名公钥。你可以绕过证书签名请求（CSR）并立即生成公钥。将以下内容粘贴到\u003ccode\u003epki_helpers.py\u003c/code\u003e中：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# pki_helpers.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom datetime import datetime, timedelta\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography import x509\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.x509.oid import NameOID\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom cryptography.hazmat.primitives import hashes\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef generate_public_key(private_key, filename, **kwargs):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    subject = x509.Name(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.COUNTRY_NAME, kwargs[\u0026#34;country\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                NameOID.STATE_OR_PROVINCE_NAME, kwargs[\u0026#34;state\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.LOCALITY_NAME, kwargs[\u0026#34;locality\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.ORGANIZATION_NAME, kwargs[\u0026#34;org\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.COMMON_NAME, kwargs[\u0026#34;hostname\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Because this is self signed, the issuer is always the subject\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    issuer = subject\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # This certificate is valid from now until 30 days\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    valid_from = datetime.utcnow()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    valid_to = valid_from + timedelta(days=30)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Used to build the certificate\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    builder = (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        x509.CertificateBuilder()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .subject_name(subject)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .issuer_name(issuer)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .public_key(private_key.public_key())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .serial_number(x509.random_serial_number())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .not_valid_before(valid_from)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .not_valid_after(valid_to)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Sign the certificate with the private key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    public_key = builder.sign(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        private_key, hashes.SHA256(), default_backend()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(filename, \u0026#34;wb\u0026#34;) as certfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        certfile.write(public_key.public_bytes(serialization.Encoding.PEM))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return public_key\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003etu\u003c/p\u003e\n\u003cp\u003e这里有一个新的函数\u003ccode\u003egenerate_public_key()\u003c/code\u003e，它将生成一个自签名的公钥。下面是这段代码的工作原理：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第2行到第5行是运行该函数所需的导入。\u003c/li\u003e\n\u003cli\u003e第8行到第18行建立了有关证书主题的信息。\u003c/li\u003e\n\u003cli\u003e第21行使用相同的颁发者和使用者，因为这是自签名证书。\u003c/li\u003e\n\u003cli\u003e第24至25行指示此公钥有效的时间范围。在这个示例中，有效期是30天。\u003c/li\u003e\n\u003cli\u003e第28到36行将所有必需的信息添加到公钥生成器对象中，该对象需要进行签名。\u003c/li\u003e\n\u003cli\u003e第38至41行用私钥签署公钥。\u003c/li\u003e\n\u003cli\u003e第43到44行将公钥写入文件名。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e使用这两个函数，你可以在Python中快速生成私钥和公钥对：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from pki_helpers import generate_private_key, generate_public_key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; private_key = generate_private_key(\u0026#34;ca-private-key.pem\u0026#34;, \u0026#34;secret_password\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; private_key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey object at 0x7ffbb292bf90\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; generate_public_key(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   private_key,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   filename=\u0026#34;ca-public-key.pem\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   country=\u0026#34;US\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   state=\u0026#34;Maryland\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   locality=\u0026#34;Baltimore\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   org=\u0026#34;My CA Company\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   hostname=\u0026#34;my-ca.com\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;Certificate(subject=\u0026lt;Name(C=US,ST=Maryland,L=Baltimore,O=My CA Company,CN=logan-ca.com)\u0026gt;, ...)\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从\u003ccode\u003epki_helpers\u003c/code\u003e导入函数后，首先生成私钥并将其保存到文件\u003ccode\u003eca-private-key.pem\u003c/code\u003e。然后将该私钥传递到\u003ccode\u003egenerate_public_key()\u003c/code\u003e以生成公钥。在你的目录中，现在应该有两个文件：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ls ca*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eca-private-key.pem ca-public-key.pem\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e祝贺你！你现在有能力成为证书颁发机构了。\u003c/p\u003e\n\u003ch3 id=\"信任你的服务器\"\u003e\u003ca href=\"#信任你的服务器\" class=\"headerlink\" title=\"信任你的服务器\"\u003e\u003c/a\u003e信任你的服务器\u003c/h3\u003e\u003cp\u003e要使服务器变得可信，第一步是生成证书签名请求（CSR）。在现实世界中，CSR将被发送到实际的证书颁发机构，如Verisign或Let’s Encrypt。在本例中，你将使用刚刚创建的CA。\u003c/p\u003e\n\u003cp\u003e将生成CSR的代码从上面粘贴到\u003ccode\u003epki_helpers.py\u003c/code\u003e文件中:：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# pki_helpers.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef generate_csr(private_key, filename, **kwargs):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    subject = x509.Name(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.COUNTRY_NAME, kwargs[\u0026#34;country\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                NameOID.STATE_OR_PROVINCE_NAME, kwargs[\u0026#34;state\u0026#34;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.LOCALITY_NAME, kwargs[\u0026#34;locality\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.ORGANIZATION_NAME, kwargs[\u0026#34;org\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            x509.NameAttribute(NameOID.COMMON_NAME, kwargs[\u0026#34;hostname\u0026#34;]),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Generate any alternative dns names\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    alt_names = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for name in kwargs.get(\u0026#34;alt_names\u0026#34;, []):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        alt_names.append(x509.DNSName(name))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    san = x509.SubjectAlternativeName(alt_names)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    builder = (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        x509.CertificateSigningRequestBuilder()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .subject_name(subject)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .add_extension(san, critical=False)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    csr = builder.sign(private_key, hashes.SHA256(), default_backend())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(filename, \u0026#34;wb\u0026#34;) as csrfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        csrfile.write(csr.public_bytes(serialization.Encoding.PEM))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return csr\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在大多数情况下，此代码与生成原始公钥的方式相同。主要区别概述如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第16至19行设置备用DNS名称，该名称对你的证书有效。\u003c/li\u003e\n\u003cli\u003e第21行到第25行生成不同的生成器对象，但同样的基本原则与以前一样适用。你正在为CSR构建所有必需的属性。\u003c/li\u003e\n\u003cli\u003e第27行用私钥签署CSR。\u003c/li\u003e\n\u003cli\u003e第29至30行将CSR以PEM格式写入磁盘。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你会注意到，为了创建CSR，首先需要一个私钥。幸运的是，你可以在创建CA的私钥时使用相同的\u003ccode\u003egenerate_private_key()\u003c/code\u003e 。使用上面的函数和前面定义的方法，可以执行以下操作：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from pki_helpers import generate_csr, generate_private_key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; server_private_key = generate_private_key(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   \u0026#34;server-private-key.pem\u0026#34;, \u0026#34;serverpassword\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; server_private_key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey object at 0x7f6adafa3050\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; generate_csr(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   server_private_key,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   filename=\u0026#34;server-csr.pem\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   country=\u0026#34;US\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   state=\u0026#34;Maryland\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   locality=\u0026#34;Baltimore\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   org=\u0026#34;My Company\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   alt_names=[\u0026#34;localhost\u0026#34;],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   hostname=\u0026#34;my-site.com\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;cryptography.hazmat.backends.openssl.x509._CertificateSigningRequest object at 0x7f6ad5372210\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在控制台中运行这些步骤后，你应该得到两个新文件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eserver-private-key.pem：服务器的私钥\u003c/li\u003e\n\u003cli\u003eserver-csr.pem：服务器的CSR\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e你可以从控制台查看新的CSR和私钥：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ls server*.pem\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eserver-csr.pem  server-private-key.pem\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e有了这两个文档，现在可以开始对密钥进行签名。通常，在这一步中会进行大量的验证。在实际项目中，CA会确保你拥有my-site.com，并要求你以各种方式证明它。\u003c/p\u003e\n\u003cp\u003e既然你是本例中的CA，就可以避免这些麻烦的证明，创建你自己的已验证的公钥。为此，你将在\u003ccode\u003epki_helpers.py\u003c/code\u003e文件中添加另一个函数：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# pki_helpers.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef sign_csr(csr, ca_public_key, ca_private_key, new_filename):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    valid_from = datetime.utcnow()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    valid_until = valid_from + timedelta(days=30)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    builder = (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        x509.CertificateBuilder()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .subject_name(csr.subject)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .issuer_name(ca_public_key.subject)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .public_key(csr.public_key())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .serial_number(x509.random_serial_number())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .not_valid_before(valid_from)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        .not_valid_after(valid_until)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for extension in csr.extensions:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        builder = builder.add_extension(extension.value, extension.critical)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    public_key = builder.sign(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        private_key=ca_private_key,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        algorithm=hashes.SHA256(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        backend=default_backend(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with open(new_filename, \u0026#34;wb\u0026#34;) as keyfile:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        keyfile.write(public_key.public_bytes(serialization.Encoding.PEM))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这段代码看起来非常类似于\u003ccode\u003egenerate_ca.py\u003c/code\u003e文件中的\u003ccode\u003egenerate_public_key()\u003c/code\u003e。事实上，它们几乎是一样的。主要区别如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e第8行到第9行将使用者名称基于CSR，而颁发者基于证书颁发机构（CA）。\u003c/li\u003e\n\u003cli\u003e第10行这次从CSR获取公钥。\u003c/li\u003e\n\u003cli\u003e第16至17行复制CSR上设置的所有扩展名。\u003c/li\u003e\n\u003cli\u003e第20行用CA的私钥签署公钥。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B2_20200114135935.png\" style=\"zoom:67%;\"/\u003e\n\n\u003cp\u003e下一步是启动Python交互模式，并使用\u003ccode\u003esign_csr()\u003c/code\u003e，需要加载CSR和CA的私钥和公钥，从加载CSR开始：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from cryptography import x509\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from cryptography.hazmat.backends import default_backend\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; csr_file = open(\u0026#34;server-csr.pem\u0026#34;, \u0026#34;rb\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; csr = x509.load_pem_x509_csr(csr_file.read(), default_backend())\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; csr\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;cryptography.hazmat.backends.openssl.x509._CertificateSigningRequest object at 0x7f68ae289150\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在本节代码中，你将打开server-csr.pem文件，并使用\u003ccode\u003ex509.load_pem_x509_csr()\u003c/code\u003e创建csr对象。接下来，你需要加载CA的公钥：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ca_public_key_file = open(\u0026#34;ca-public-key.pem\u0026#34;, \u0026#34;rb\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ca_public_key = x509.load_pem_x509_certificate(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   ca_public_key_file.read(), default_backend()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ca_public_key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;Certificate(subject=\u0026lt;Name(C=US,ST=Maryland,L=Baltimore,O=My CA Company,CN=logan-ca.com)\u0026gt;, ...)\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e再次，你创建了一个\u003ccode\u003eca_public_key\u003c/code\u003e对象，它可以被\u003ccode\u003esign_csr()\u003c/code\u003e使用。x509模块有一个便利的\u003ccode\u003eload-pem-x509-u certificate()\u003c/code\u003e来帮助你。最后一步是加载CA的私钥：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from getpass import getpass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from cryptography.hazmat.primitives import serialization\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ca_private_key_file = open(\u0026#34;ca-private-key.pem\u0026#34;, \u0026#34;rb\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; ca_private_key = serialization.load_pem_private_key(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   ca_private_key_file.read(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   getpass().encode(\u0026#34;utf-8\u0026#34;),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...   default_backend(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e... )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePassword:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; private_key\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;cryptography.hazmat.backends.openssl.rsa._RSAPrivateKey object at 0x7f68a85ade50\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此代码将加载你的私钥。回想一下，你的私钥是使用你指定的密码加密的。使用这三个组件，你现在可以签署CSR并生成已验证的公钥：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from pki_helpers import sign_csr\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; sign_csr(csr, ca_public_key, ca_private_key, \u0026#34;server-public-key.pem\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e运行此命令后，目录中应该有三个服务器密钥文件：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ls server*.pem\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eserver-csr.pem  server-private-key.pem  server-public-key.pem\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里的工作量相当大。好消息是，既然有了私钥和公钥对，你不必更改任何服务器代码就可以开始使用它了。\u003c/p\u003e\n\u003cp\u003e使用以前的server.py文件，运行以下命令启动全新的Python HTTPS应用：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ uwsgi \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    --master \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    --https localhost:5683,\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            logan-site.com-public-key.pem,\\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            logan-site.com-private-key.pem \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    --mount /=server:app\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e祝贺！你现在有了一个支持Python HTTPS的服务器，它运行着你自己的私钥-公钥对，私钥-公钥对是由你自己的证书颁发机构签署的!\u003c/p\u003e\n\u003cp\u003e现在，剩下要做的就是查询服务器。首先，需要对\u003ccode\u003eclient.py\u003c/code\u003e代码进行一些更改：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport requests\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_secret_message():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = requests.get(\u0026#34;https://localhost:5683\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(f\u0026#34;The secret message is {response.text}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    get_secret_message()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与前面的代码相比，惟一的变化是从http改为https。如果尝试运行此代码，则会遇到错误：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ python client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003erequests.exceptions.SSLError: \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    HTTPSConnectionPool(host=\u0026#39;localhost\u0026#39;, port=5683): \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Max retries exceeded with url: / (Caused by \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    SSLError(SSLCertVerificationError(1, \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;[SSL: CERTIFICATE_VERIFY_FAILED] \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    certificate verify failed: unable to get local issuer \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    certificate (_ssl.c:1076)\u0026#39;)))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这是一个非常糟糕的错误信息！这里的重要部分是信息证书验证失败：无法获取本地颁发者。你现在应该更熟悉这些词了。从本质上讲，它是这样说的：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e`localhost:5683` gave me a certificate. I checked the issuer of the certificate it gave me, and according to all the Certificate Authorities I know about, that issuer is not one of them.\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果尝试使用浏览器打开你的网站，则会收到类似信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/unsafe-chrome_20200127155458.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e如果要避免此信息，你必须返回有关你的证书颁发机构！只需将请求指向你先前生成的\u003ccode\u003eca-public-key.pem\u003c/code\u003e文件：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef get_secret_message():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    response = requests.get(\u0026#34;http://localhost:5683\u0026#34;, verify=\u0026#34;ca-public-key.pem\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(f\u0026#34;The secret message is {response.text}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e完成此操作后，你应该能够成功运行以下代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ python client.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eThe secret message is fluffy tail\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e很好！已经创建了一个功能完善的Python HTTPS服务器并成功实现了查询功能。现在，你和秘密松鼠之间可以愉快和安全地交换信息！\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e在本问中，你学习了当前Internet上安全通信的一些核心基础，现在已经了解了这些构建模块，你将成为一个更好、更安全的开发人员。\u003c/p\u003e\n\u003cp\u003e如果你对这些信息感兴趣，那你就走运了！你仅仅蜻蜓点水式地触及了每一层中所有的细微差别。安全世界不断发展，新的技术和漏洞也不断被发现。\u003c/p\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://realpython.com/python-https/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://realpython.com/python-https/\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关注微信公众号：老齐教室。读深度文章，得精湛技艺，享绚丽人生。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#HTTPS Python Flusk\"\u003e\n    \u003cspan class=\"tag-code\"\u003eHTTPS Python Flusk\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/01/24/python30%E4%BE%8B/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          python绝技30例\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/01/30/%E7%89%B9%E5%BE%81%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E8%A6%81/\"\u003e\n        \n          特征为什么那么重要\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-01-28T00:00:00Z",
  "Author": "老齐教室"
}