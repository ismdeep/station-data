{
  "Source": "qiwsir.github.io",
  "Title": "线程：概念和实现（3）",
  "Link": "https://qiwsir.github.io/2020/02/18/python-thread-three/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e线程：概念和实现（3）\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-02-18\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e译者注：与本文相关图书推荐：《Python大学实用教程》《跟老齐学Python：轻松入门》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8_20200122130623.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/my_book4_20200116132005.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch1 id=\"第三部分\"\u003e\u003ca href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"\u003e\u003c/a\u003e第三部分\u003c/h1\u003e\u003ch2 id=\"生产者-消费者线程\"\u003e\u003ca href=\"#生产者-消费者线程\" class=\"headerlink\" title=\"生产者-消费者线程\"\u003e\u003c/a\u003e生产者-消费者线程\u003c/h2\u003e\u003cp\u003e生产者-消费者问题（Producer-Consumer Problem，以下简称：PCP）是计算机科学中研究线程或进程同步的代表性问题，下面要通过它的一个变体来了解Python中\u003ccode\u003ethreading\u003c/code\u003e模块提供的各种方法。\u003c/p\u003e\n\u003cp\u003e对于本例，你将想象一个程序需要从网络读取信息并将其写入磁盘。程序会确定是否要请求信息。它必须监听并接受信息，这些信息不会以正常的速度传入，而是会以突发的方式传入。程序的这一部分叫做生产者。\u003c/p\u003e\n\u003cp\u003e另一方面，一旦收到信息，你就需要将其写入数据库。数据库访问速度很慢，但这个速度足以跟上信息传输的平均速度。当一大堆信息进来时，访问速度还不够快。这部分是消费者。\u003c/p\u003e\n\u003cp\u003e在生产者和消费者之间，创建一个\u003ccode\u003ePipeline\u003c/code\u003e，它将随着你对不同的同步对象的了解而变化。\u003c/p\u003e\n\u003cp\u003e这是基本的布局。让我们看看使用\u003ccode\u003eLock\u003c/code\u003e的解决方案。它并不完美，但它使用的工具是你已经知道的，所以这是一个很好的开始。\u003c/p\u003e\n\u003ch3 id=\"使用锁的PCP\"\u003e\u003ca href=\"#使用锁的PCP\" class=\"headerlink\" title=\"使用锁的PCP\"\u003e\u003c/a\u003e使用锁的PCP\u003c/h3\u003e\u003cp\u003e因为这是一篇关于Python的\u003ccode\u003ethreading\u003c/code\u003e模块的文章，而且你刚刚阅读了\u003ccode\u003eLock\u003c/code\u003e的使用方法，，所以让我们尝试用一两个使用\u003ccode\u003eLock\u003c/code\u003e的线程来解决这个问题。\u003c/p\u003e\n\u003cp\u003e一般的设计是，有一个\u003ccode\u003eproducer\u003c/code\u003e线程从模拟网络读取消息并将信息放入\u003ccode\u003ePipeline\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport random \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSENTINEL = object()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef producer(pipeline):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;Pretend we\u0026#39;re getting a message from the network.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for index in range(10):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = random.randint(1, 101)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u0026#34;Producer got message: %s\u0026#34;, message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pipeline.set_message(message, \u0026#34;Producer\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # Send a sentinel message to tell consumer we\u0026#39;re done\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pipeline.set_message(SENTINEL, \u0026#34;Producer\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e要生成模拟信息，\u003ccode\u003eproducer\u003c/code\u003e中会生成一个介于1和101（不含101）之间的随机整数，然后调用\u003ccode\u003epipeline\u003c/code\u003e的\u003ccode\u003e.set_message()\u003c/code\u003e，将其发送到\u003ccode\u003econsumer\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eproducer\u003c/code\u003e还使用\u003ccode\u003eSENTINEL\u003c/code\u003e值作为标记，当向\u003ccode\u003econsumer\u003c/code\u003e发送了10个值，就停止发送。这有点尴尬，但不要担心，在完成这个示例之后，你将看到消除这个\u003ccode\u003eSENTINEL\u003c/code\u003e值的方法。\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003epipeline\u003c/code\u003e的另一边是消费者：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef consumer(pipeline):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;Pretend we\u0026#39;re saving a number in the database.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    message = 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    while message is not SENTINEL:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = pipeline.get_message(\u0026#34;Consumer\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if message is not SENTINEL:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            logging.info(\u0026#34;Consumer storing message: %s\u0026#34;, message)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003econsumer\u003c/code\u003e从\u003ccode\u003epipeline\u003c/code\u003e中读取一条信息并将其写入一个虚拟数据库，在本例中，只是将信息打印到显示器上。如果它得到\u003ccode\u003eSENTINEL\u003c/code\u003e值，就结束函数执行过程，该函数将终止线程。\u003c/p\u003e\n\u003cp\u003e在看真正有趣\u003ccode\u003ePipeline\u003c/code\u003e部分之前，这里是\u003ccode\u003e__main__\u003c/code\u003e的代码，它产生了以下线程：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    format = \u0026#34;%(asctime)s: %(message)s\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.basicConfig(format=format, level=logging.INFO,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        datefmt=\u0026#34;%H:%M:%S\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # logging.getLogger().setLevel(logging.DEBUG)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pipeline = Pipeline()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executor.submit(producer, pipeline)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executor.submit(consumer, pipeline)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这看起来应该相当熟悉，因为它接近前面示例中的\u003ccode\u003e__main__\u003c/code\u003e代码。\u003c/p\u003e\n\u003cp\u003e请记住，你可以通过取消注释行打开\u003ccode\u003eDEBUG\u003c/code\u003e日志记录，以查看所有日志记录消息：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e# logging.getLogger().setLevel(logging.DEBUG)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通过\u003ccode\u003eDEBUG\u003c/code\u003e日志信息来查看每个线程获取和释放锁的确切位置是值得的。\u003c/p\u003e\n\u003cp\u003e现在让我们看看将信息从\u003ccode\u003eproducer\u003c/code\u003e传递给消费者的管道：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass Pipeline:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Class to allow a single element pipeline between producer and consumer.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.message = 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.producer_lock = threading.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock = threading.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock.acquire()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def get_message(self, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:about to acquire getlock\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock.acquire()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:have getlock\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = self.message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:about to release setlock\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.producer_lock.release()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:setlock released\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def set_message(self, message, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:about to acquire setlock\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.producer_lock.acquire()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:have setlock\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.message = message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:about to release getlock\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock.release()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:getlock released\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e哇！这么多代码。其中相当大的一部分只是日志语句，以便在运行代码时更容易看到发生了什么。下面是删除所有日志记录语句后的相同代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass Pipeline:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Class to allow a single element pipeline between producer and consumer.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.message = 0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.producer_lock = threading.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock = threading.Lock()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock.acquire()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def get_message(self, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock.acquire()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = self.message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.producer_lock.release()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def set_message(self, message, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.producer_lock.acquire()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.message = message\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.consumer_lock.release()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这似乎更容易处理。此版本代码中的\u003ccode\u003ePipeline\u003c/code\u003e有三个成员：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.message\u003c/code\u003e存储要传递的信息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.producer_lock\u003c/code\u003e是\u003ccode\u003ethreading.Lock\u003c/code\u003e实例对象，在\u003ccode\u003eproducer\u003c/code\u003e线程中，用它控制对信息的访问\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.consumer_lock\u003c/code\u003e也是\u003ccode\u003ethreading.Lock\u003c/code\u003e实例对象，它在\u003ccode\u003econsumer\u003c/code\u003e线程控制对信息的访问。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e__init__()\u003c/code\u003e初始化这三个成员，然后调用\u003ccode\u003e.consumer_lock\u003c/code\u003e上的\u003ccode\u003e.acquire()\u003c/code\u003e。这是你想开始的状态。允许\u003ccode\u003eproducer\u003c/code\u003e添加新信息，但\u003ccode\u003econsumer\u003c/code\u003e需要等待信息出现。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e.get_message()\u003c/code\u003e 和 \u003ccode\u003e.set_messages()\u003c/code\u003e几乎相反。\u003ccode\u003e.get_message()\u003c/code\u003e调用\u003ccode\u003econsumer_lock\u003c/code\u003e上的\u003ccode\u003e.acquire()\u003c/code\u003e，它让\u003ccode\u003econsumer\u003c/code\u003e等待信息准备就绪。\u003c/p\u003e\n\u003cp\u003e一旦\u003ccode\u003econsumer\u003c/code\u003e获得了\u003ccode\u003e.consumer_lock\u003c/code\u003e，它就会复制出\u003ccode\u003e.message\u003c/code\u003e中的值，然后调用\u003ccode\u003e.producer_lock\u003c/code\u003e上的\u003ccode\u003e.release()\u003c/code\u003e，释放锁，允许\u003ccode\u003eproducer\u003c/code\u003e将下一条信息插入到\u003ccode\u003epipeline\u003c/code\u003e中。\u003c/p\u003e\n\u003cp\u003e在运行\u003ccode\u003e.set_message()\u003c/code\u003e之前，要注意\u003ccode\u003e.get_message()\u003c/code\u003e中的一个细节，通常以\u003ccode\u003ereturn self.message\u003c/code\u003e结束方法，但是此处不这样做，看看你能否弄清楚原因。\u003c/p\u003e\n\u003cp\u003e答案在此。一旦\u003ccode\u003econsumer\u003c/code\u003e调用\u003ccode\u003e.producer_lock.release()\u003c/code\u003e，它就会与\u003ccode\u003eproducer\u003c/code\u003e交换位置，\u003ccode\u003eproducer\u003c/code\u003e开始运行，这种情况可能在\u003ccode\u003e.release()\u003c/code\u003e返回之前发生！这意味着，当函数\u003ccode\u003ereturns self.message\u003c/code\u003e时，有比较小的概率会生成下一条信息，因此你将丢失第一条信息。这是另一个竞态的例子。\u003c/p\u003e\n\u003cp\u003e转到\u003ccode\u003e.set_message()\u003c/code\u003e，可以看到事务的另一面，\u003ccode\u003eproducer\u003c/code\u003e会用一条信息来调用它，获取\u003ccode\u003e.producer_lock\u003c/code\u003e，设置\u003ccode\u003e.message\u003c/code\u003e，然后调用\u003ccode\u003econsumer_lock\u003c/code\u003e上的\u003ccode\u003e.release()\u003c/code\u003e。这样就使得用户可以读取该值。\u003c/p\u003e\n\u003cp\u003e将日志设置为\u003ccode\u003eWARNING\u003c/code\u003e并执行代码，看看它是什么样子的：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ./prodcom_lock.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 86\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 86\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 62\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 73\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got data 22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 73\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing data: 22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e一开始，你可能会发现奇怪的是，\u003ccode\u003eproducer\u003c/code\u003e在\u003ccode\u003econsumer\u003c/code\u003e运行之前就收到两条信息。如果回顾一下\u003ccode\u003eproducer\u003c/code\u003e和\u003ccode\u003e.set_message()\u003c/code\u003e，你会注意到，当\u003ccode\u003eproducer\u003c/code\u003e视图将信息发送到\u003ccode\u003epipeline\u003c/code\u003e时，会等待\u003ccode\u003eLock\u003c/code\u003e。这是在\u003ccode\u003eproducer\u003c/code\u003e收到信息和日志之后完成的。\u003c/p\u003e\n\u003cp\u003e当\u003ccode\u003eproducer\u003c/code\u003e尝试发送第二条信息时，它将第二次调用\u003ccode\u003e.set_message()\u003c/code\u003e，并且它将被锁定。\u003c/p\u003e\n\u003cp\u003e操作系统可以在任何时候交换线程，但它通常会让每个线程在交换之前有一个合理的运行时间。这就是为什么\u003ccode\u003eproducer\u003c/code\u003e通常运行到它在第二次调用\u003ccode\u003e.set_message()\u003c/code\u003e时被锁定为止。\u003c/p\u003e\n\u003cp\u003e但是，一旦某个线程被锁定，操作系统就会将其交换出去，并找到另一个要运行的线程，此时的另一个线程就是\u003ccode\u003econsumer\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econsumer\u003c/code\u003e调用\u003ccode\u003e.get_message()\u003c/code\u003e，该函数读取信息并调用\u003ccode\u003e.producer_lock\u003c/code\u003e上的\u003ccode\u003e.release()\u003c/code\u003e，从而允许\u003ccode\u003eproducer\u003c/code\u003e在下次交换线程时再次运行。\u003c/p\u003e\n\u003cp\u003e注意，第一条消息是43，这正是\u003ccode\u003econsumer\u003c/code\u003e读的内容，尽管 \u003ccode\u003eproducer\u003c/code\u003e已经生成了45这条信息。\u003c/p\u003e\n\u003cp\u003e以上是有限的测试，并没有很好地解决PCP，因为它一次只允许管道中的有一个值。当\u003ccode\u003eproducer\u003c/code\u003e收到大量信息时，它将无处安放这些信息。\u003c/p\u003e\n\u003cp\u003e让我们使用\u003ccode\u003eQueue\u003c/code\u003e寻找一个更好的方法来解决这个问题。\u003c/p\u003e\n\u003cp\u003e（\u003cstrong\u003e未完待续\u003c/strong\u003e）\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关注微信公众号：老齐教室。读深度文章，得精湛技艺，享绚丽人生。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/02/18/how-programming-run/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          【公开课】程序是怎么跑起来的\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/02/20/first-python-code/\"\u003e\n        \n          【公开课】写下第一行Python代码\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-02-18T00:00:00Z",
  "Author": "老齐教室"
}