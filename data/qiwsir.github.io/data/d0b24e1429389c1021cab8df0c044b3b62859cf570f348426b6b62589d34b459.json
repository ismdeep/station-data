{
  "Source": "qiwsir.github.io",
  "Title": "线程：概念和实现（4）",
  "Link": "https://qiwsir.github.io/2020/02/24/python-thread-four/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e线程：概念和实现（4）\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-02-24\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e译者注：与本文相关图书推荐：《Python大学实用教程》《跟老齐学Python：轻松入门》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/my_book4_20200116132005.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8_20200122130623.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch1 id=\"第四部分\"\u003e\u003ca href=\"#第四部分\" class=\"headerlink\" title=\"第四部分\"\u003e\u003c/a\u003e第四部分\u003c/h1\u003e\u003ch3 id=\"将队列应用于PCP\"\u003e\u003ca href=\"#将队列应用于PCP\" class=\"headerlink\" title=\"将队列应用于PCP\"\u003e\u003c/a\u003e将队列应用于PCP\u003c/h3\u003e\u003cp\u003e如果你希望一次能够处理管道中的多个值，就需要一种针对管道的数据结构，它相当于\u003ccode\u003eproducer\u003c/code\u003e的备份，能实现数量增加和减少。\u003c/p\u003e\n\u003cp\u003ePython标准库有一个\u003ccode\u003equeue\u003c/code\u003e模块，该模块有一个\u003ccode\u003eQueue\u003c/code\u003e 类，下面将\u003ccode\u003ePipeline\u003c/code\u003e改为\u003ccode\u003eQueue\u003c/code\u003e，就可以不再使用\u003ccode\u003eLock\u003c/code\u003e锁定某些变量，此外，还将使用Python的\u003ccode\u003ethreading\u003c/code\u003e模块中的\u003ccode\u003eEvent\u003c/code\u003e来停止工作线程，这是一种与以往不同的方法。\u003c/p\u003e\n\u003cp\u003e从\u003ccode\u003eEvent\u003c/code\u003e开始。当有很多线程等待\u003ccode\u003ethreading.Event\u003c/code\u003e实例的时候，它能够将一个线程标记为一个事件。这段代码的关键是，等待事件的线程不一定需要停止它们正在做的事情，它们可以每隔一段时间检查一次\u003ccode\u003eEvent\u003c/code\u003e的状态。\u003c/p\u003e\n\u003cp\u003e很多事情都可以触发\u003ccode\u003eevent\u003c/code\u003e。在本例中，主线程将简单地休眠一段时间，然后运行\u003ccode\u003e.set()\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    format = \u0026#34;%(asctime)s: %(message)s\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.basicConfig(format=format, level=logging.INFO,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        datefmt=\u0026#34;%H:%M:%S\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # logging.getLogger().setLevel(logging.DEBUG)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pipeline = Pipeline()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    event = threading.Event()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executor.submit(producer, pipeline, event)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executor.submit(consumer, pipeline, event)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        time.sleep(0.1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u0026#34;Main: about to set event\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        event.set()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里唯一的变化是创建了\u003ccode\u003eevent\u003c/code\u003e对象，然后将\u003ccode\u003eevent\u003c/code\u003e作为参数传给后面的\u003ccode\u003e.submit\u003c/code\u003e方法，在with语句中，有一句要sleep一秒钟，再记录日志信息，最后调用\u003ccode\u003eevent.set()\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eproducer\u003c/code\u003e也不需要改变太多:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef producer(pipeline, event):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;Pretend we\u0026#39;re getting a number from the network.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    while not event.is_set():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = random.randint(1, 101)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u0026#34;Producer got message: %s\u0026#34;, message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pipeline.set_message(message, \u0026#34;Producer\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.info(\u0026#34;Producer received EXIT event. Exiting\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003ewhile\u003c/code\u003e循环中不再为\u003ccode\u003epipeline\u003c/code\u003e设置\u003ccode\u003eSENTINEL\u003c/code\u003e值。\u003ccode\u003econsumer\u003c/code\u003e需要相应做较大改动：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef consumer(pipeline, event):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;Pretend we\u0026#39;re saving a number in the database.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    while not event.is_set() or not pipeline.empty():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = pipeline.get_message(\u0026#34;Consumer\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;Consumer storing message: %s (queue size=%s)\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            message,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            pipeline.qsize(),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.info(\u0026#34;Consumer received EXIT event. Exiting\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e必须删除\u003ccode\u003eSENTINEL\u003c/code\u003e值相关的代码，\u003ccode\u003ewhile\u003c/code\u003e循环的条件也因此更复杂了一些，现在需要考虑\u003ccode\u003enot event.is_set()\u003c/code\u003e和\u003ccode\u003enot pipeline.empty()\u003c/code\u003e两个条件，也就是未设置\u003ccode\u003eevent\u003c/code\u003e，或者\u003ccode\u003epipeline\u003c/code\u003e未清空时。\u003c/p\u003e\n\u003cp\u003e要确保在\u003ccode\u003econsumer\u003c/code\u003e进程结束是队列中已经是空的了，否则就会出现以下两种糟糕的情况。一是丢失了这些最终消息，但更严重的情况是第二种，\u003ccode\u003eproducer\u003c/code\u003e如果视图将信息添加到完整队列中，会被锁住，从而不能返回。这种事件会发生在\u003ccode\u003eproducer\u003c/code\u003e验证\u003ccode\u003e.is_set()\u003c/code\u003e条件之后，调用\u003ccode\u003epipeline.set_message()\u003c/code\u003e之前。\u003c/p\u003e\n\u003cp\u003e这种事件会发生在\u003ccode\u003eproducer\u003c/code\u003e验证\u003ccode\u003e.is_set()\u003c/code\u003e条件之后，调用\u003ccode\u003epipeline.set_message()\u003c/code\u003e之前。\u003c/p\u003e\n\u003cp\u003e如果发生这种情况，\u003ccode\u003eproducer\u003c/code\u003e可能会在队列仍然全满的情况下唤醒并退出。然后，调用\u003ccode\u003e.set_message()\u003c/code\u003e，\u003ccode\u003e.set_message()\u003c/code\u003e将一直等到队列中有新信息的空间。若\u003ccode\u003econsumer\u003c/code\u003e已经退出，这种情况就不会发生，而且\u003ccode\u003eproducer\u003c/code\u003e不会退出。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econsumer\u003c/code\u003e中的其他部分看起来应该很熟悉。\u003c/p\u003e\n\u003cp\u003e然而，\u003ccode\u003ePipeline\u003c/code\u003e还需要重写：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclass Pipeline(queue.Queue):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def __init__(self):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        super().__init__(maxsize=10)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def get_message(self, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:about to get from queue\u0026#34;, name)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        value = self.get()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:got %d from queue\u0026#34;, name, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    def set_message(self, value, name):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:about to add %d to queue\u0026#34;, name, value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        self.put(value)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.debug(\u0026#34;%s:added %d to queue\u0026#34;, name, value)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的\u003ccode\u003ePipeline\u003c/code\u003e是\u003ccode\u003equeue.Queue\u003c/code\u003e的子类。\u003ccode\u003eQueue\u003c/code\u003e 在初始化时指定一个可选参数，以指定队列的最大长度。\u003c/p\u003e\n\u003cp\u003e如果为\u003ccode\u003emaxsize\u003c/code\u003e指定一个正数，则该数字为队列元素个数的极限，如果达到该值，\u003ccode\u003e.put()\u003c/code\u003e方法被锁定，直到元素的数量少于\u003ccode\u003emaxsize\u003c/code\u003e才解锁。如果不指定\u003ccode\u003emaxsize\u003c/code\u003e，则队列将增长到计算机内存的所许可的最值。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e.get_message()\u003c/code\u003e和\u003ccode\u003e.set_message()\u003c/code\u003e两个方法代码更少了，它们基本上把\u003ccode\u003e.get()\u003c/code\u003e和\u003ccode\u003e.put()\u003c/code\u003e封装在\u003ccode\u003eQueue\u003c/code\u003e中。你可能想知道防止线程发生竞态条件的锁都去了哪里。\u003c/p\u003e\n\u003cp\u003e编写标准库的核心开发人员知道，\u003ccode\u003eQueue\u003c/code\u003e经常在多线程环境中使用，于是将锁合并到\u003ccode\u003eQueue\u003c/code\u003e本身中。\u003ccode\u003eQueue\u003c/code\u003e对于线程来说是安全的。\u003c/p\u003e\n\u003cp\u003e此程序的运行如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e$ ./prodcom_queue.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 94\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 32 (queue size=3)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 96\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 51 (queue size=3)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 25 (queue size=3)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[many lines deleted]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 80\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 94 (queue size=6)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 20 (queue size=6)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 31 (queue size=6)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 98 (queue size=6)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eMain: about to set event\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer got message: 13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 59 (queue size=6)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eProducer received EXIT event. Exiting\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 75 (queue size=6)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 97 (queue size=5)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 80 (queue size=4)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 33 (queue size=3)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 48 (queue size=2)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 52 (queue size=1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 13 (queue size=0)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eConsumer received EXIT event. Exiting\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通读上述示例的输出，会发现，有的地方很有意思。在顶部，你可以看到\u003ccode\u003eproducer\u003c/code\u003e必须创建5条信息并将其中4条放在队列中，队列中最前面的一条被操作系统换掉之后，第5条条信息才能加入队列。\u003c/p\u003e\n\u003cp\u003e然后\u003ccode\u003econsumer\u003c/code\u003e运行，把第1条信息拉了出来，它打印出了该信息以及队列在此时的长度：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eConsumer storing message: 32 (queue size=3)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e此时，标明第5条信息还没有进入\u003ccode\u003epipeline\u003c/code\u003e ，删除单个信息后\u003ccode\u003equeue\u003c/code\u003e的减小到3。你也知道\u003ccode\u003equeue\u003c/code\u003e可以保存10条消息，因此\u003ccode\u003equeue\u003c/code\u003e线程不会被\u003ccode\u003equeue\u003c/code\u003e阻塞，它被操作系统置换了。\u003c/p\u003e\n\u003cp\u003e注意：你调试的输出结果会有所不同。你的输出将随着运行次数的不同而改变。这就是用线程工作的乐趣所在！\u003c/p\u003e\n\u003cp\u003e执行代码，你能看到主线程生成event事件，这会导致\u003ccode\u003eproducer\u003c/code\u003e立即退出，\u003ccode\u003econsumer\u003c/code\u003e还有很多工作要做，所以它会一直运行，直到清理完\u003ccode\u003epipeline\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e尝试操作大小不同的队列，并调用\u003ccode\u003eproducer\u003c/code\u003e或\u003ccode\u003econsumer\u003c/code\u003e中的\u003ccode\u003etime.sleep()\u003c/code\u003e，以分别模拟更长的网络或磁盘访问时间。即使对程序的这些内容稍加更改，也会使结果产生很大差异。\u003c/p\u003e\n\u003cp\u003e这是解决发PCP的一个好方法，但是你可以进一步简化它，不需要使用\u003ccode\u003ePipeline\u003c/code\u003e，一旦去掉日志记录，它就会变成一个\u003ccode\u003equeue.Queue\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e下面是直接使用\u003ccode\u003equeue.Queue\u003c/code\u003e的最终代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport concurrent.futures\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport logging\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport queue\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport random\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport threading\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef producer(queue, event):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;Pretend we\u0026#39;re getting a number from the network.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    while not event.is_set():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = random.randint(1, 101)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u0026#34;Producer got message: %s\u0026#34;, message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        queue.put(message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.info(\u0026#34;Producer received event. Exiting\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef consumer(queue, event):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;Pretend we\u0026#39;re saving a number in the database.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    while not event.is_set() or not queue.empty():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        message = queue.get()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;Consumer storing message: %s (size=%d)\u0026#34;, message, queue.qsize()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.info(\u0026#34;Consumer received event. Exiting\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif __name__ == \u0026#34;__main__\u0026#34;:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    format = \u0026#34;%(asctime)s: %(message)s\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logging.basicConfig(format=format, level=logging.INFO,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                        datefmt=\u0026#34;%H:%M:%S\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pipeline = queue.Queue(maxsize=10)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    event = threading.Event()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executor.submit(producer, pipeline, event)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        executor.submit(consumer, pipeline, event)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        time.sleep(0.1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        logging.info(\u0026#34;Main: about to set event\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        event.set()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这更易于阅读，并展示了如何使用Python的内置模块来简化复杂的问题。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eLock\u003c/code\u003e 和 \u003ccode\u003eQueue\u003c/code\u003e是便于解决并发问题的类，但标准库还提供了其他类。在结束本文之前，让我们浏览其中一些类。\u003c/p\u003e\n\u003ch2 id=\"Threading\"\u003e\u003ca href=\"#Threading\" class=\"headerlink\" title=\"Threading\"\u003e\u003c/a\u003eThreading\u003c/h2\u003e\u003cp\u003ePython的\u003ccode\u003ethreading\u003c/code\u003e模块还提供了一些类，虽然上面的示例不需要这些，但是它们在不同的用例中可以派上用场，所以熟悉它们是有好处的。\u003c/p\u003e\n\u003ch3 id=\"Semaphore\"\u003e\u003ca href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"\u003e\u003c/a\u003eSemaphore\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ethreading.Semaphore\u003c/code\u003e有一些特殊属性的计数器对象，这里实现的计数具有原子性，意味着可以保证操作系统不会在递增或递减计数器的过程中交换线程。\u003c/p\u003e\n\u003cp\u003e内部计数器在调用\u003ccode\u003e.release()\u003c/code\u003e时递增，在调用\u003ccode\u003e.acquire()\u003c/code\u003e时递减。\u003c/p\u003e\n\u003cp\u003e另外一个特殊属性，如果一个线程在计数器为零时调用\u003ccode\u003e.acquire()\u003c/code\u003e，则该线程将被锁定，直到另一个线程调用\u003ccode\u003e.release()\u003c/code\u003e，并将计数器增加到1。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eSemaphores\u003c/code\u003e通常用于保护容量有限的资源。例如，如果你有一个连接池，并且希望将该池的大小限制为特定的数目。\u003c/p\u003e\n\u003ch3 id=\"Timer\"\u003e\u003ca href=\"#Timer\" class=\"headerlink\" title=\"Timer\"\u003e\u003c/a\u003eTimer\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ethreading.Timer\u003c/code\u003e用于在经过一定时间后调度要调用的函数，你可以通过传入等待的秒数和调用的函数来创建\u003ccode\u003eTimer\u003c/code\u003e实例：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003et = threading.Timer(30.0, my_function)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e通过调用\u003ccode\u003e.start()\u003c/code\u003e启动\u003ccode\u003eTimer\u003c/code\u003e。在指定时间之后的某个时间点，将在新线程上调用该函数。但请注意，无法保证会在你希望的时间准确调用该函数。\u003c/p\u003e\n\u003cp\u003e如果要停止已经启动的\u003ccode\u003eTimer\u003c/code\u003e，可以调用\u003ccode\u003e.cancel()\u003c/code\u003e。如果在\u003ccode\u003eTimer\u003c/code\u003e触发后调用\u003ccode\u003e.cancel()\u003c/code\u003e，不会执行任何操作，也不会产生异常。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTimer\u003c/code\u003e可用于在特定时间后提示用户执行操作。如果用户在\u003ccode\u003eTimer\u003c/code\u003e过期之前执行操作，则可以调用\u003ccode\u003e.cancel()\u003c/code\u003e。\u003c/p\u003e\n\u003ch3 id=\"Barrier\"\u003e\u003ca href=\"#Barrier\" class=\"headerlink\" title=\"Barrier\"\u003e\u003c/a\u003eBarrier\u003c/h3\u003e\u003cp\u003e\u003ccode\u003ethreading.Barrier\u003c/code\u003e可用于保持固定数量的线程同步。创建\u003ccode\u003eBarrier\u003c/code\u003e时，调用方必须指定将要同步的线程数。每个线程都调用\u003ccode\u003eBarrier\u003c/code\u003e的\u003ccode\u003e.wait()\u003c/code\u003e方法，它们都将保持封锁状态，直到指定数量的线程在等待，然后全部同时释放。\u003c/p\u003e\n\u003cp\u003e请记住：线程是由操作系统调度的，因此，即使所有线程都是同时释放的，它们也将被调度为一次运行一个线程。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBarrier\u003c/code\u003e的一个用途是允许线程池对自身进行初始化。让这些线程初始化后在\u003ccode\u003eBarrier\u003c/code\u003e上等待，将确保在所有线程完成初始化之前，没有一个线程开始运行。\u003c/p\u003e\n\u003ch2 id=\"结论：Python中的线程\"\u003e\u003ca href=\"#结论：Python中的线程\" class=\"headerlink\" title=\"结论：Python中的线程\"\u003e\u003c/a\u003e结论：Python中的线程\u003c/h2\u003e\u003cp\u003e现在你已经了解了Python的\u003ccode\u003ethreading\u003c/code\u003e提供的许多功能，以及一些如何写线程程序和用线程程序解决问题的示例。你还看到了在编写和调试线程程序时出现的一些问题。\u003c/p\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://realpython.com/intro-to-python-threading/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://realpython.com/intro-to-python-threading/\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关注微信公众号：老齐教室。读深度文章，得精湛技艺，享绚丽人生。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#线程 Python\"\u003e\n    \u003cspan class=\"tag-code\"\u003e线程 Python\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/02/22/data-and-feature01-2/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          【公开课】数据准备和特征工程：01-2文件中的数据\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/02/25/make-blog-by-django/\"\u003e\n        \n          【公开课】用Django快速做博客\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-02-24T00:00:00Z",
  "Author": "老齐教室"
}