{
  "Source": "qiwsir.github.io",
  "Title": "Python 中的递归",
  "Link": "https://qiwsir.github.io/2021/06/03/recursion/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003ePython 中的递归\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2021-06-03\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003ch2 id=\"什么是递归\"\u003e\u003ca href=\"#什么是递归\" class=\"headerlink\" title=\"什么是递归\"\u003e\u003c/a\u003e什么是递归\u003c/h2\u003e\u003cp\u003e递归（recursion）这个单词来自拉丁语中的 \u003cem\u003erecurre\u003c/em\u003e，意思是：匆匆而归、返回、还原或重现。以下是网络上对递归的一些定义：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.dictionary.com/browse/recursion\" target=\"_blank\" rel=\"noopener\"\u003eDictionary.com\u003c/a\u003e：表示返回的行为或过程。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://en.wiktionary.org/wiki/recursion\" target=\"_blank\" rel=\"noopener\"\u003eWiktionary\u003c/a\u003e ：在对象内部定义使用该对象（通常是函数）的操作。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.thefreedictionary.com/recursion\" target=\"_blank\" rel=\"noopener\"\u003eThe Free Dictionary\u003c/a\u003e：定义一系列对象的方法，如表达式、函数、集合等，给定一些初始对象，并且根据根据前面的对象来定义后续每个对象。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所谓递归，是指被定义的对象出现在定义本身中。在现实生活中经常会出现自我参照的情况，尽管这种情况没有立即被识别出来。例如，假设定义祖先，可以用这样的表达式：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e祖先 = （父母） + （父母的祖先）\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e请注意上述定义中的\u003cstrong\u003e祖先\u003c/strong\u003e，在它自己的定义中也出现。这是一个递归的定义。\u003c/p\u003e\n\u003cp\u003e在编程中，递归有一个非常精确的含义。它指的是一种编码技术，是函数对自身的调用。\u003c/p\u003e\n\u003ch2 id=\"为什么使用递归？\"\u003e\u003ca href=\"#为什么使用递归？\" class=\"headerlink\" title=\"为什么使用递归？\"\u003e\u003c/a\u003e为什么使用递归？\u003c/h2\u003e\u003cp\u003e大多数编程问题是不需要递归就可以解决的。所以严格说来，递归通常是不必须的。\u003c/p\u003e\n\u003cp\u003e然而，有些情况特别适合用\u003cstrong\u003e自我参照\u003c/strong\u003e进行定义，例如，上面所示的“祖先”的定义，如果你要写一段程序实现这个定义，用递归可能是一种简约的途径。\u003c/p\u003e\n\u003cp\u003e对树状数据结构的遍历也是应用递归的恰当例子。因为这类数据是嵌套结构，很容易用递归定义。遍历嵌套结构的非递归算法可能会有点笨拙，而递归解决方案则相对优雅。\u003c/p\u003e\n\u003cp\u003e另一方面，递归并非对每一种情况都适用。以下是需要考虑的其他因素：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e有些问题虽然可以使用递归方案来解决，但实际上会显得很笨拙，而不是优雅。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e递归实现通常比非递归实现消耗更多的内存。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在某些情况下，使用递归可能会导致执行时间较长。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通常，代码的可读性是编程中应该考虑的第一因素。是否使用递归，要视具体情况而定。下面的示例将帮助你了解何时应该选择递归。\u003c/p\u003e\n\u003ch2 id=\"Python-中的递归\"\u003e\u003ca href=\"#Python-中的递归\" class=\"headerlink\" title=\"Python 中的递归\"\u003e\u003c/a\u003ePython 中的递归\u003c/h2\u003e\u003cp\u003e当你在 Python 中调用一个函数时，解释器会创建一个新的局部命名空间，这样在该函数中定义的名称就不会与其他地方定义的相同名称冲突。一个函数可以调用另一个函数，即使它们都定义了具有相同名称的对象，也能正常工作，因为这些对象存在于单独的命名空间中。\u003c/p\u003e\n\u003cp\u003e这一点同样适用于在同一函数中同时运行多个实例。例如以下定义:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efunction\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x = \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    function()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当 \u003ccode\u003efunction()\u003c/code\u003e 第一次执行时，Python 会创建一个命名空间，并在该命名空间中把 \u003ccode\u003ex\u003c/code\u003e 赋值为 \u003ccode\u003e10\u003c/code\u003e 。然后 \u003ccode\u003efunction()\u003c/code\u003e 调用自身——递归。第二次运行 \u003ccode\u003efunction()\u003c/code\u003e 时，解释器会创建第二个命名空间，并将 \u003ccode\u003e10\u003c/code\u003e 赋值给 \u003ccode\u003ex\u003c/code\u003e 。名称 \u003ccode\u003ex\u003c/code\u003e 的这两个实例彼此不同，可以共存而不发生冲突，因为它们位于不同的命名空间中。\u003c/p\u003e\n\u003cp\u003e不幸的是，如果执行上面的所定义的 \u003ccode\u003efunction()\u003c/code\u003e 函数，会得到不太好的结果，正如下面的\u003ca href=\"https://realpython.com/python-traceback/\" target=\"_blank\" rel=\"noopener\"\u003e回溯\u003c/a\u003e所示：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efunction()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e function\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e function\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u003cspan class=\"string\"\u003e\u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;\u003c/span\u003e, line \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e function\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  [Previous line repeated \u003cspan class=\"number\"\u003e996\u003c/span\u003e more times]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRecursionError: maximum recursion depth exceeded\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如前所述，\u003ccode\u003efunction()\u003c/code\u003e 函数在理论上将永远持续下去，一遍又一遍地调用自己，而没有任何返回值。当然，在实践中，应该没有这样的递归。电脑只有那么多内存，那些内存最终也会耗尽。\u003c/p\u003e\n\u003cp\u003ePython 不允许出现这种情况，解释器限制了函数可以对自身进行递归式调用的最大次数，当达到该极限时，会引发 \u003ccode\u003eRecursionError\u003c/code\u003e 异常，如上所示。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e技术说明：\u003c/strong\u003e可以通过名 sys 模块中的 \u003ccode\u003egetrecursionlimit()\u003c/code\u003e 函数来了解 Python 的递归次数限制：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sys \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e getrecursionlimit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003egetrecursionlimit()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1000\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以上是限制的默认值，也可以通过 \u003ccode\u003esetrecursionlimit()\u003c/code\u003e 函数修改此值。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sys \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e setrecursionlimit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esetrecursionlimit(\u003cspan class=\"number\"\u003e2000\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003egetrecursionlimit()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2000\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e可以把这个限制值设置得非常大，但不能使它无限大。\u003c/p\u003e\n\u003cp\u003e一个函数无休止地递归式调用自己并没有多大用处。这让人想起你有时在洗发水瓶子上看到的说明：“揉至起泡沫，清洗，重复。”如果你真的按照这些说明去做，你会永远在洗头！\u003c/p\u003e\n\u003cp\u003e这种逻辑上的缺陷显然出现在一些洗发水制造商身上，因为有些洗发水瓶子上写着“揉至起泡沫，清洗，必要时重复”。这为说明书提供了终止条件。想必，你最终会觉得你的头发足够干净，不需要额外的重复，洗头的过程就可以结束了。\u003c/p\u003e\n\u003cp\u003e同样的道理，递归式调用自身的函数必须有一个事件使其最终停止调用。递归函数通常遵循以下模式：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e有一个或多个终止条件可以直接得到结果，而不需要进一步递归。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e每次递归调用都会使结果逐渐接近终止条件。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"开始：倒数至零\"\u003e\u003ca href=\"#开始：倒数至零\" class=\"headerlink\" title=\"开始：倒数至零\"\u003e\u003c/a\u003e开始：倒数至零\u003c/h2\u003e\u003cp\u003e第一个示例是一个名为 \u003ccode\u003ecountdown()\u003c/code\u003e 的函数，它以正数作为输入参数，并将指定参数中的数字按倒数的顺序输出至零：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecountdown\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(n)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n == \u003cspan class=\"number\"\u003e0\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e             \u003cspan class=\"comment\"\u003e# Terminate recursion\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        countdown(n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e)   \u003cspan class=\"comment\"\u003e# Recursive call\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecountdown(\u003cspan class=\"number\"\u003e5\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e请注意 \u003ccode\u003ecountdown()\u003c/code\u003e 函数的终止条件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e当 \u003ccode\u003en\u003c/code\u003e 为零时，符合终止条件，此时递归停止。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e在递归调用中，参数为 \u003ccode\u003en-1\u003c/code\u003e （ \u003ccode\u003en\u003c/code\u003e 是当前值），因此每个递归都更接近终止条件。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e注意：\u003c/strong\u003e为简单起见，\u003ccode\u003ecountdown()\u003c/code\u003e 不检查其参数的有效性。如果 \u003ccode\u003en\u003c/code\u003e 是非整数或负数，则会出现 \u003ccode\u003eRecursionError\u003c/code\u003e 异常，因为它完全不不符合终止条件。\u003c/p\u003e\n\u003cp\u003e上面的 \u003ccode\u003ecountdown()\u003c/code\u003e  版本突显了终止条件和递归调用，但有一种更简洁的表达方式：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecountdown\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(n)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        countdown(n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面是一个可能的非递归实现，用于比较:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecountdown\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e n \u0026gt;= \u003cspan class=\"number\"\u003e0\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        print(n)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        n -= \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecountdown(\u003cspan class=\"number\"\u003e5\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这种情况下，非递归解决方案至少与递归解决方案一样清晰直观，而且可能更为简洁。\u003c/p\u003e\n\u003ch2 id=\"计算阶乘\"\u003e\u003ca href=\"#计算阶乘\" class=\"headerlink\" title=\"计算阶乘\"\u003e\u003c/a\u003e计算阶乘\u003c/h2\u003e\u003cp\u003e下一个例子涉及“阶乘”的数学概念。正整数 \u003ccode\u003en\u003c/code\u003e 的阶乘，表示为 $n！$​ ，定义如下：\u003c/p\u003e\n\u003cp\u003e$$n! = 1\\times2\\times\\cdots\\times n$$\u003c/p\u003e\n\u003cp\u003e换句话说，$n！$​​ 是从 $1$​ 到 $n$​ 的所有整数的乘积。\u003c/p\u003e\n\u003cp\u003e因此，阶乘适合于用递归定义，很多编程的数据都会用这个作为示例说明递归。\u003c/p\u003e\n\u003cp\u003e$$n!=\\begin{cases}1 \u0026amp; n=0,1\\n\\times(n-1)! \u0026amp; n\\ge 2\\end{cases}$$​\u003c/p\u003e\n\u003cp\u003e与上面的示例一样，终止条件是不需要递归就可以实现的；更复杂的事件则可简化，也就是将其简化为终止条件之一:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e$n = 0$​​ 或 $n = 1$​​ 时是终止条件，不需要递归就可以得到阶乘的结果。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e如果 $n\\gt1$​​​ ，根据 $(n - 1)!$​​​ 来定义 $n!$​​​ ，这样通过递归逐步接近终止条件。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e例如 $4!$​ 的递归计算过程是这样的：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-6/1630904603247-factorial.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e计算 $4!$​​ 、$3!$​​ 和 $2!$​​  ，直到 $n = 1$ 时的终止条件结束递归。此时，无需进一步递归就可以计算 $1!$ 。后续的延迟计算将运行到最终完成。\u003c/p\u003e\n\u003ch3 id=\"编写阶乘函数\"\u003e\u003ca href=\"#编写阶乘函数\" class=\"headerlink\" title=\"编写阶乘函数\"\u003e\u003c/a\u003e编写阶乘函数\u003c/h3\u003e\u003cp\u003e下面的函数就是按照以上四项编写的计算阶乘的 Python 递归函数。它是多么简洁、而且多么准确地反映了上面的定义:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efactorial\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt;= \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e n * factorial(n - \u003cspan class=\"number\"\u003e1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efactorial(\u003cspan class=\"number\"\u003e4\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e24\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了弄清楚函数的执行过程，可以用 \u003ccode\u003eprint()\u003c/code\u003e 将函数执行过程中的结果打印出来，这样可以对调用和返回序列有一个更清晰的理解:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efactorial\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;factorial() called with n = \u003cspan class=\"subst\"\u003e{n}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    return_value = \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt;= \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e n * factorial(n \u003cspan class=\"number\"\u003e-1\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;-\u0026gt; factorial(\u003cspan class=\"subst\"\u003e{n}\u003c/span\u003e) returns \u003cspan class=\"subst\"\u003e{return_value}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e return_value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efactorial(\u003cspan class=\"number\"\u003e4\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efactorial() called \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e n = \u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efactorial() called \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e n = \u003cspan class=\"number\"\u003e3\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efactorial() called \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e n = \u003cspan class=\"number\"\u003e2\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efactorial() called \u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e n = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; factorial(1) returns 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; factorial(2) returns 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; factorial(3) returns 6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; factorial(4) returns 24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e24\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意递归调用的累积过程。在返回任何一个递归调用的函数结果之前，该函数被 \u003ccode\u003en = 4, 3, 2, 1\u003c/code\u003e 连续调用。最后，当 \u003ccode\u003en = 1\u003c/code\u003e 时，无需再递归即可解决问题。然后每个累积起来的递归调用都会展开，从最外层的调用返回 \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e6\u003c/code\u003e，最后返回 \u003ccode\u003e24\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e如果不用递归，其实也能实现阶乘，下面用 \u003ccode\u003efor\u003c/code\u003e 循环写一个实现阶乘的函数。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efactorial\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    return_value = \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e i \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(\u003cspan class=\"number\"\u003e2\u003c/span\u003e, n + \u003cspan class=\"number\"\u003e1\u003c/span\u003e):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        return_value *= i\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e return_value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efactorial(\u003cspan class=\"number\"\u003e4\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e24\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e还可以使用 Python 的 \u003ccode\u003ereduce()\u003c/code\u003e 函数来实现阶乘，此函数要从 \u003ccode\u003efunctools\u003c/code\u003e 模块导入：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e functools \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e reduce\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003efactorial\u003c/span\u003e\u003cspan class=\"params\"\u003e(n)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e reduce(\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e x, y: x * y, range(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, n + \u003cspan class=\"number\"\u003e1\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eor\u003c/span\u003e [\u003cspan class=\"number\"\u003e1\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003efactorial(\u003cspan class=\"number\"\u003e4\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e24\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这表明如果一个问题可以用递归来解决，那么也可能有几个非递归解决方案。你的选择通常会基于代码的可读性和直观性。\u003c/p\u003e\n\u003cp\u003e另一个需要考虑的因素是执行速度。递归和非递归解决方案之间可能存在显著的性能差异。\u003c/p\u003e\n\u003ch3 id=\"比较不同实现方式的速度\"\u003e\u003ca href=\"#比较不同实现方式的速度\" class=\"headerlink\" title=\"比较不同实现方式的速度\"\u003e\u003c/a\u003e比较不同实现方式的速度\u003c/h3\u003e\u003cp\u003e要计算函数的执行时间，可以使用 \u003ccode\u003etimeit\u003c/code\u003e 模块中的 \u003ccode\u003etimeit()\u003c/code\u003e 的函数，这个函数支持多种不同的调用形式，此处将用下面的方式调用:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etimeit(\u0026lt;command\u0026gt;, setup=\u0026lt;setup_string\u0026gt;, number=\u0026lt;iterations\u0026gt;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e执行 \u003ccode\u003etimeit()\u003c/code\u003e 函数时，首先调用 \u003ccode\u003esetup\u003c/code\u003e 参数的值 \u003ccode\u003e\u0026lt;setup_string\u0026gt;\u003c/code\u003e 中指令，然后按照 \u003ccode\u003enumber\u003c/code\u003e 参数的值执行 \u003ccode\u003e\u0026lt;command\u0026gt;\u003c/code\u003e 操作  \u003ccode\u003e\u0026lt;iterations\u0026gt;\u003c/code\u003e 次，并报告累计的执行时间（以秒为单位）:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timeit \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003etimeit(\u003cspan class=\"string\"\u003e\u0026#34;print(string)\u0026#34;\u003c/span\u003e, setup=\u003cspan class=\"string\"\u003e\u0026#34;string=\u0026#39;foobar\u0026#39;\u0026#34;\u003c/span\u003e, number=\u003cspan class=\"number\"\u003e100\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoobar\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoobar\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoobar\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   . [\u003cspan class=\"number\"\u003e100\u003c/span\u003e repetitions]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   .\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efoobar\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0.03347089999988384\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上述代码中，\u003ccode\u003esetup\u003c/code\u003e 参数实现了对变量 \u003ccode\u003estring\u003c/code\u003e 赋值为 \u003ccode\u003efoobar\u003c/code\u003e 的操作。然后将 \u003ccode\u003eprint(string)\u003c/code\u003e 指令执行 \u003ccode\u003enumber=100\u003c/code\u003e 次。最终显示执行时间是 \u003ccode\u003e0.03347\u003c/code\u003e s （大于 $\\frac{3}{100} s$​​ ）。\u003c/p\u003e\n\u003cp\u003e下面使用 \u003ccode\u003etimeit()\u003c/code\u003e 来比较上面实现阶乘三种方式：递归、for 循环和 \u003ccode\u003ereduce()\u003c/code\u003e 函数。在每种情况下，变量 \u003ccode\u003esetup_string\u003c/code\u003e 是字符串，其中定义了相关的 \u003ccode\u003efactorial()\u003c/code\u003e 函数。然后，\u003ccode\u003etimeit()\u003c/code\u003e 执行 \u003ccode\u003efactorial(4)\u003c/code\u003e 总共1000万次，并报告结果。\u003c/p\u003e\n\u003cp\u003e首先，测试递归版本:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esetup_string = \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(\u0026#34;Recursive:\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003edef factorial(n):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    return 1 if n \u0026lt;= 1 else n * factorial(n - 1)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timeit \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003etimeit(\u003cspan class=\"string\"\u003e\u0026#34;factorial(4)\u0026#34;\u003c/span\u003e, setup=setup_string, number=\u003cspan class=\"number\"\u003e10000000\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRecursive:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4.957105500000125\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e接下来测试 for 循环的实现:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esetup_string = \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(\u0026#34;Iterative:\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003edef factorial(n):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    return_value = 1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    for i in range(2, n + 1):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        return_value *= i\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    return return_value\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timeit \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003etimeit(\u003cspan class=\"string\"\u003e\u0026#34;factorial(4)\u0026#34;\u003c/span\u003e, setup=setup_string, number=\u003cspan class=\"number\"\u003e10000000\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIterative:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3.733752099999947\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最后测试 \u003ccode\u003ereduce()\u003c/code\u003e 版本:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003esetup_string = \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003efrom functools import reduce\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003eprint(\u0026#34;reduce():\u0026#34;)\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003edef factorial(n):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    return reduce(lambda x, y: x * y, range(1, n + 1) or [1])\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e timeit \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003etimeit(\u003cspan class=\"string\"\u003e\u0026#34;factorial(4)\u0026#34;\u003c/span\u003e, setup=setup_string, number=\u003cspan class=\"number\"\u003e10000000\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ereduce():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e8.101526299999932\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e从上述测试可知，用 for 循环的迭代是最快的，尽管递归解决方案也不算太慢，倒是 \u003ccode\u003ereduce()\u003c/code\u003e 的实现是最慢的。如果你在自己的计算机上尝试这些示例，可能会有所不同。与示例相比，你所花费的时间肯定有所不同，甚至你所得出的排名也可能有所不同。\u003c/p\u003e\n\u003cp\u003e这有关系吗? 迭代和使用 \u003ccode\u003ereduce()\u003c/code\u003e 的实现在执行时间上几乎有4秒的差异，但我们需要1000万个调用才能看到这一差异。\u003c/p\u003e\n\u003cp\u003e如果要多次调用一个函数，那么在选择实现时可能需要考虑执行速度。另一方面，如果函数运行的频率相对较低，那么执行时间上的差异或许可以忽略不计。这种情况下，你所选择的实现最好能非常清楚地表达解决问题的方案——即代码的可读性是第一位的。\u003c/p\u003e\n\u003cp\u003e对于阶乘，从上述测试结果来看，递归实现是一个合理的选择。\u003c/p\u003e\n\u003cp\u003e坦白地说，如果你用 Python 编码，你根本不需要实现阶乘函数，因为标准库的 \u003ccode\u003emath\u003c/code\u003e 模块中已经提供了阶乘函数：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from math import factorial\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; factorial(4)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e也许你会有兴趣了解它在计时测试中的表现：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; setup_string = \u0026#34;from math import factorial\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; from timeit import timeit\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; timeit(\u0026#34;factorial(4)\u0026#34;, setup=setup_string, number=10000000)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0.3724050999999946\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e哇! 与上面显示的其他三种实现相比，\u003ccode\u003emath.factorial()\u003c/code\u003e 的运行时间大约缩短了10倍。\u003c/p\u003e\n\u003cp\u003e用 C 语言实现的函数几乎总是比用纯 Python 实现的相应函数运行速度更快。\u003c/p\u003e\n\u003ch2 id=\"遍历嵌套列表\"\u003e\u003ca href=\"#遍历嵌套列表\" class=\"headerlink\" title=\"遍历嵌套列表\"\u003e\u003c/a\u003e遍历嵌套列表\u003c/h2\u003e\u003cp\u003e下一个示例涉及访问嵌套式列表结构中的每个项。思考下面的 Python 列表：\u003c/p\u003e\n\u003cfigure class=\"highlight shell\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003enames = [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Adam\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;Bob\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;Chet\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u0026#34;Cat\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;Barb\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;Bert\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Alex\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;Bea\u0026#34;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026#34;Bill\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;Ann\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如下图所示，\u003ccode\u003enames\u003c/code\u003e 包含两个子列表。第一个子列表本身包含另一个子列表:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-6/1630909715653-jsturtz-nested-list.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e假设你想统计这个列表中叶子元素（即最低级别的字符串对象）的数量，就好像你已经将列表展开一样。叶子元素包括 \u003ccode\u003e\u0026#34;Adam\u0026#34;、\u0026#34;Bob\u0026#34;、\u0026#34;Chet\u0026#34;、\u0026#34;Cat\u0026#34;、\u0026#34;Barb\u0026#34;、\u0026#34;Bert\u0026#34;、\u0026#34;Alex\u0026#34;、\u0026#34;Bea\u0026#34;、\u0026#34;Bill\u0026#34;、\u0026#34;Ann\u0026#34;\u003c/code\u003e ，所以答案应该是“10”。\u003c/p\u003e\n\u003cp\u003e如果用 \u003ccode\u003elen()\u003c/code\u003e 函数并不能得出正确的答案：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003elen(names)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e5\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003elen()\u003c/code\u003e 函数统计 \u003ccode\u003enames\u003c/code\u003e 顶层的对象个数，即三个叶元素 \u003ccode\u003e\u0026#34;Adam\u0026#34;、\u0026#34;Alex\u0026#34;\u003c/code\u003e 和 \u003ccode\u003e\u0026#34;Ann\u0026#34;\u003c/code\u003e ，以及两个子列表 \u003ccode\u003e[\u0026#34;Bob\u0026#34;，[\u0026#34;Chet\u0026#34;，\u0026#34;Cat\u0026#34;]，\u0026#34;Barb\u0026#34;，\u0026#34;Bert\u0026#34;]\u003c/code\u003e 和 \u003ccode\u003e[\u0026#34;Bea\u0026#34;，\u0026#34;Bill\u0026#34;]\u003c/code\u003e ：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e index, item \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e enumerate(names):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    print(index, item)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e Adam\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e1\u003c/span\u003e [\u003cspan class=\"string\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Barb\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bert\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e2\u003c/span\u003e Alex\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e3\u003c/span\u003e [\u003cspan class=\"string\"\u003e\u0026#39;Bea\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bill\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e Ann\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里需要的是一个遍历整个列表结构（包括子列表）的函数。该算法是这样的:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e遍历列表，依次检查每一项。\u003c/li\u003e\n\u003cli\u003e如果找到一个叶元素，则将其添加到累积计数中。\u003c/li\u003e\n\u003cli\u003e如果遇到子列表，执行以下操作:\u003col\u003e\n\u003cli\u003e进入到该子列表，并用类似的方式遍历它。\u003c/li\u003e\n\u003cli\u003e一旦你遍历了子列表，就返回，将子列表中的元素添加到累积计数中，并从结束的地方继续遍历父列表。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e注意这里所描述的自引用性质: 遍历列表。 如果遇到子列表，则用类似的方式遍历此列表，这种情况就需要递归!\u003c/p\u003e\n\u003ch3 id=\"用递归遍历嵌套列表\"\u003e\u003ca href=\"#用递归遍历嵌套列表\" class=\"headerlink\" title=\"用递归遍历嵌套列表\"\u003e\u003c/a\u003e用递归遍历嵌套列表\u003c/h3\u003e\u003cp\u003e递归非常适合解决这个问题。首先要确定给定的列表项是否是叶子。为此，可以使用内置的 Python 函数 \u003ccode\u003eisinstance()\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e在 \u003ccode\u003enames\u003c/code\u003e 列表中，如果一个项是 \u003ccode\u003elist\u003c/code\u003e 类型的实例，那么它就是一个子列表。否则，它就是一个叶子：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enames\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"string\"\u003e\u0026#39;Adam\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Barb\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bert\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Alex\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Bea\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bill\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Ann\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enames[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#39;Adam\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eisinstance(names[\u003cspan class=\"number\"\u003e0\u003c/span\u003e], list)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enames[\u003cspan class=\"number\"\u003e1\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"string\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Barb\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bert\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eisinstance(names[\u003cspan class=\"number\"\u003e1\u003c/span\u003e], list)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enames[\u003cspan class=\"number\"\u003e1\u003c/span\u003e][\u003cspan class=\"number\"\u003e1\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eisinstance(names[\u003cspan class=\"number\"\u003e1\u003c/span\u003e][\u003cspan class=\"number\"\u003e1\u003c/span\u003e], list)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enames[\u003cspan class=\"number\"\u003e1\u003c/span\u003e][\u003cspan class=\"number\"\u003e1\u003c/span\u003e][\u003cspan class=\"number\"\u003e0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eisinstance(names[\u003cspan class=\"number\"\u003e1\u003c/span\u003e][\u003cspan class=\"number\"\u003e1\u003c/span\u003e][\u003cspan class=\"number\"\u003e0\u003c/span\u003e], list)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e接下来，编写实现函数，该函数用于统计列表中的叶子元素，并递归地计算子列表：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecount_leaf_items\u003c/span\u003e\u003cspan class=\"params\"\u003e(item_list)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;Recursively counts and returns the\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e       number of leaf items in a (potentially\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e       nested) list.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    count = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e item \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e item_list:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e isinstance(item, list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            count += count_leaf_items(item)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            count += \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e count\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e下面用几个参数传入 \u003ccode\u003ecount_leaf_items()\u003c/code\u003e ，包括上面定义的 \u003ccode\u003enames\u003c/code\u003e 列表，会得到以下结果:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecount_leaf_items([\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecount_leaf_items([\u003cspan class=\"number\"\u003e1\u003c/span\u003e, [\u003cspan class=\"number\"\u003e2.1\u003c/span\u003e, \u003cspan class=\"number\"\u003e2.2\u003c/span\u003e], \u003cspan class=\"number\"\u003e3\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e4\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecount_leaf_items([])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecount_leaf_items(names)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e与阶乘示例一样，添加一些 \u003ccode\u003eprint()\u003c/code\u003e 语句有助于演示递归调用的顺序和返回值：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecount_leaf_items\u003c/span\u003e\u003cspan class=\"params\"\u003e(item_list)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;Recursively counts and returns the\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e       number of leaf items in a (potentially\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e       nested) list.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;List: \u003cspan class=\"subst\"\u003e{item_list}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    count = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e item \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e item_list:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e isinstance(item, list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            print(\u003cspan class=\"string\"\u003e\u0026#34;Encountered sublist\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            count += count_leaf_items(item)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            print(\u003cspan class=\"string\"\u003ef\u0026#34;Counted leaf item \\\u0026#34;\u003cspan class=\"subst\"\u003e{item}\u003c/span\u003e\\\u0026#34;\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            count += \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003ef\u0026#34;-\u0026gt; Returning count \u003cspan class=\"subst\"\u003e{count}\u003c/span\u003e\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e count\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对上述示例的解释如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e第9行:\u003c/strong\u003e  \u003ccode\u003eisinstance(item, list)\u003c/code\u003e 的值是 \u003ccode\u003eTrue\u003c/code\u003e ，所以 \u003ccode\u003ecount_leaf_items()\u003c/code\u003e 找到了一个子列表。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e*\u003cem\u003e第11行: *\u003c/em\u003e函数通过调用自身实现递归，继续统计子列表中的项，然后将结果添加到累计的总数中。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e*\u003cem\u003e第12行: *\u003c/em\u003e \u003ccode\u003eisinstance(item, list)\u003c/code\u003e 的值是 \u003ccode\u003eFalse\u003c/code\u003e 时，\u003ccode\u003ecount_leaf_items()\u003c/code\u003e 遇到了一个叶子项。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e*\u003cem\u003e第14行: *\u003c/em\u003e将累计总数增加1，以计入叶子项。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e注\u003c/strong\u003e： 为简单起见, 该实现假设传递给 \u003ccode\u003ecount_leaf_items()\u003c/code\u003e 的列表只包含叶子项或子列表, 而不包含任何其他类型的复合对象，如：字典或元组。\u003c/p\u003e\n\u003cp\u003eThe output from \u003ccode\u003ecount_leaf_items()\u003c/code\u003e when it’s executed on the \u003ccode\u003enames\u003c/code\u003e list now looks like this:\u003c/p\u003e\n\u003cp\u003e现在，对 \u003ccode\u003enames\u003c/code\u003e 列表执行 \u003ccode\u003ecount_leaf_items()\u003c/code\u003e 时的输出是这样的:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003ecount_leaf_items(names)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eList: [\u003cspan class=\"string\"\u003e\u0026#39;Adam\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Barb\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bert\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Alex\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Bea\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bill\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Ann\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Adam\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eEncountered sublist\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eList: [\u003cspan class=\"string\"\u003e\u0026#39;Bob\u0026#39;\u003c/span\u003e, [\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e], \u003cspan class=\"string\"\u003e\u0026#39;Barb\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bert\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Bob\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eEncountered sublist\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eList: [\u003cspan class=\"string\"\u003e\u0026#39;Chet\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Cat\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Chet\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Cat\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; Returning count 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Barb\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Bert\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; Returning count 5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Alex\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eEncountered sublist\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eList: [\u003cspan class=\"string\"\u003e\u0026#39;Bea\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;Bill\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Bea\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Bill\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; Returning count 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eCounted leaf item \u003cspan class=\"string\"\u003e\u0026#34;Ann\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e-\u0026gt; Returning count 10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e每次对 \u003ccode\u003ecount_leaf_items()\u003c/code\u003e 的调用终止时，都会返回叶子的计数，这些叶子元素在传给该函数的列表中。顶层调用返回 \u003ccode\u003e10\u003c/code\u003e 。\u003c/p\u003e\n\u003ch3 id=\"非递归遍历嵌套列表\"\u003e\u003ca href=\"#非递归遍历嵌套列表\" class=\"headerlink\" title=\"非递归遍历嵌套列表\"\u003e\u003c/a\u003e非递归遍历嵌套列表\u003c/h3\u003e\u003cp\u003e下面还是要展示一下用非递归方式实现对嵌套列表的遍历，代码如下：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003ecount_leaf_items\u003c/span\u003e\u003cspan class=\"params\"\u003e(item_list)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;Non-recursively counts and returns the\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e       number of leaf items in a (potentially\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e       nested) list.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    count = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    stack = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    current_list = item_list\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e i == len(current_list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e current_list == item_list:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e count\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                current_list, i = stack.pop()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                i += \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e isinstance(current_list[i], list):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            stack.append([current_list, i])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            current_list = current_list[i]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        count += \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        i += \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对相同列表上执行这个非递归版本的 \u003ccode\u003ecount_leaf_items()\u003c/code\u003e 函数，则会得到相同的结果：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; count_leaf_items([1, 2, 3, 4])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; count_leaf_items([1, [2.1, 2.2], 3])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; count_leaf_items([])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; count_leaf_items(names)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; # Success!\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这个函数中用栈来处理嵌套的子列表，当函数循环到一个子列表时，将父列表及子列表在父列表中的索引推送到栈里。一旦对子列表中的叶子元素完成计数，就会从栈中将父列表和索引删除并获得其返回值，这样就可以在停止的地方继续计算。\u003c/p\u003e\n\u003cp\u003e实际上，在递归实现中也会发生同样的事情。当你递归式调用函数时，Python 会将正在执行的实例的状态保存在栈上，以便可以运行递归调用。当递归调用完成时，状态将从栈中弹出，从而让中断的实例可以继续。这是相同的概念，但是在使用递归时，是 Python 自动完成了状态保存工作。\u003c/p\u003e\n\u003cp\u003e请注意，与非递归版本相比，递归代码是多么简洁易读：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-7/1630995953038-comparison.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e比较递归式嵌套列表的遍历与非递归式嵌套列表的遍历\u003c/p\u003e\n\u003cp\u003e在这种情况下，使用递归绝对是一种优势。\u003c/p\u003e\n\u003ch2 id=\"检测回文\"\u003e\u003ca href=\"#检测回文\" class=\"headerlink\" title=\"检测回文\"\u003e\u003c/a\u003e检测回文\u003c/h2\u003e\u003cp\u003e选择是否使用递归来解决问题在很大程度上取决于问题的性质。例如，阶乘自然可用递归实现，但用 for 循环也相当简单。这二者选谁，完全由开发者自己决定。\u003c/p\u003e\n\u003cp\u003e对于前面的遍历列表则是另一回事，对于该问题，显然递归非常优雅，而非递归解决方案则很麻烦。\u003c/p\u003e\n\u003cp\u003e下面再举一个检测回文的示例，如果使用递归解决这个问题，可以说是愚蠢的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e回文\u003c/strong\u003e是一个单词，它从前往后读和从后往前读是一样的，例如：Racecar、Level、Kayak、Reviver、Civic\u003c/p\u003e\n\u003cp\u003e如果让你设计一个算法来判断一个字符串是否是回文的，你可能会想出类似于“反转字符串，看看它是否和原来一样”这样的方案——没有比这更简单的了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eis_palindrome\u003c/span\u003e\u003cspan class=\"params\"\u003e(word)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;Return True if word is a palindrome, False if not.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e word == word[::\u003cspan class=\"number\"\u003e-1\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;racecar\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;troglodyte\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;civic\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这种方式又清楚又简洁。几乎不需要寻找替代方式。但为了好玩，请考虑一下用递归实现回文检测：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e终止条件：空字符串以及单个字符，都可以视为回文。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e递归：\u003c/p\u003e\n\u003cp\u003e长度大于或等于2个字符的字符串，如果同时满足以下两个条件，则为回文：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e第一个字符和最后一个字符相同。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e第一个字符和最后一个字符之间的子字符串是回文。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSlicing is your friend here as well. For a string \u003ccode\u003eword\u003c/code\u003e, indexing and slicing give the following substrings:\u003c/p\u003e\n\u003cp\u003e字符串的切片也是有帮助的。对于字符串 \u003ccode\u003e\u0026#34;word\u0026#34;\u003c/code\u003e ，索引和切片将给出以下子字符串：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e第一个字符是 \u003ccode\u003eword[0]\u003c/code\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e最后一个字符是 \u003ccode\u003eword[-1]\u003c/code\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e第一个和最后一个字符之间的子字符串是 \u003ccode\u003eword[1:-1]\u003c/code\u003e 。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所以可以像下面这样用递归定义函数 \u003ccode\u003eis_palindrome()\u003c/code\u003e 来判断一个字符串是否为回文。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eis_palindrome\u003c/span\u003e\u003cspan class=\"params\"\u003e(word)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;Return True if word is a palindrome, False if not.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e len(word) \u0026lt;= \u003cspan class=\"number\"\u003e1\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e... \u003c/span\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e word[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] == word[\u003cspan class=\"number\"\u003e-1\u003c/span\u003e] \u003cspan class=\"keyword\"\u003eand\u003c/span\u003e is_palindrome(word[\u003cspan class=\"number\"\u003e1\u003c/span\u003e:\u003cspan class=\"number\"\u003e-1\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"comment\"\u003e# Base cases\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"comment\"\u003e# Recursive cases\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;foo\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;racecar\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;troglodyte\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003eis_palindrome(\u003cspan class=\"string\"\u003e\u0026#34;civic\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e思考递归问题是一个有趣的练习，尽管它有时候不是很有必要。\u003c/p\u003e\n\u003ch2 id=\"Quicksort-排序\"\u003e\u003ca href=\"#Quicksort-排序\" class=\"headerlink\" title=\"Quicksort 排序\"\u003e\u003c/a\u003eQuicksort 排序\u003c/h2\u003e\u003cp\u003e最后一个示例就像嵌套列表的遍历一样，是一个很好的问题示例，它也很自然地使用递归方法。Quicksort 算法是英国计算机科学家 Tony Hoare 于1959年开发的一种高效排序算法。\u003c/p\u003e\n\u003cp\u003eQuicksort 是一种\u003ca href=\"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm\" target=\"_blank\" rel=\"noopener\"\u003e分而治之算法\u003c/a\u003e。假设有一个待排序的列表。首先从列表中选出一项，称之为\u003cstrong\u003e基准\u003c/strong\u003e（pivot），它可以是列表中的任意一项。然后，根据基准，将列表\u003cstrong\u003e分区\u003c/strong\u003e（partition），划分为比基准小和比基准大两部分，即得到了两个子列表。再对子列表递归排序。具体算法步骤如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e选择基准。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e根据基准，将列表划分为两个子列表：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e子列表1：小于基准的项组成\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e子列表2：大于基准的项组成\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e以递归方法，对子列表进行实施 Quicksort 排序。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e每次分区都会产生更小的子列表，所以该算法是简化法。基本时间发生在子列表为空或只有一个元素时，因为这些元素本身是有序的。\u003c/p\u003e\n\u003ch3 id=\"选择基准\"\u003e\u003ca href=\"#选择基准\" class=\"headerlink\" title=\"选择基准\"\u003e\u003c/a\u003e选择基准\u003c/h3\u003e\u003cp\u003e无论以列表中的哪一项为基准，Quicksort 算法都能执行，但有些选择比另一些要好。请记住，在分区时，会创建两个子列表：一个子列表中的项小于基准，另一个子列表中的项大于基准。理想情况下，两个子列表的长度大致相等。\u003c/p\u003e\n\u003cp\u003e假设要排序的初始列表包含八项。如果每个分区都会产生长度大致相等的子列表，则可以通过三个步骤达到终止条件（如下图所示）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-7/1630996136433-pivot.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e最优分区示意图\u003c/center\u003e\n\n\u003cp\u003e另一方面，如果选择的基准特别不走运，则每个分区产生的两个子列表中，其中一个子列表包含基准以外的所有原始项，另一个子列表为空。在这种情况下，需要七个步骤才能将列表简化为终止条件：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-7/1630996437182-suboptimal.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e次优分区示意图\u003c/center\u003e\n\n\u003cp\u003e在第一种情况下，Quicksort 算法将更有效。但是，为了从全局着手选择最佳基准项，需要提前了解用于排序的数据的特点。在任何情况下，没有任何一个选择对所有情况都是最好的。因此，如果要编写一个 Quicksort 函数来处理一般情况，那么基准的选择就有点随意了。\u003c/p\u003e\n\u003cp\u003e如果列表中的数据是随机分布的，那么以第一项与最后一项为基准是常见的选择。然而，如果数据已经被排序，或者几乎被排序了，这种方法将导致像上面所示的次优分区。为了避免这种情况，一些 Quicksort 算法选择列表中的中间项作为基准。\u003c/p\u003e\n\u003cp\u003e另一个做法是找到列表中第一项、最后一项和中间项的中位数，并将其用作基准，这是下面的示例代码中所用的策略。\u003c/p\u003e\n\u003ch3 id=\"实现分区\"\u003e\u003ca href=\"#实现分区\" class=\"headerlink\" title=\"实现分区\"\u003e\u003c/a\u003e实现分区\u003c/h3\u003e\u003cp\u003e一旦选择了基准，下一步就是对列表进行分区。同样，目标是创建两个子列表，一个子列表包含小于透视项的项，另一个子列表包含大于透视项的项。\u003c/p\u003e\n\u003cp\u003e你可以直接在原有列表上完成。换言之，通过对列表成员项进行交换，打乱列表中的项的次序，直到基准项位于中间，所有小于它的项位于其左侧，所有大于它的项位于其右侧。然后，运用递归算法对子列表进行 Quicksort 排序，就会将列表的切片传递到基准项的左侧和右侧。\u003c/p\u003e\n\u003cp\u003e或者，你可以使用 Python 的列表的方法来创建新的列表，而不是在原来的列表上进行操作。这是下面代码中采用的方法。算法如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e以第一项、最后一项和中间项的中位数（中值）作为所选定的基准。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e通过基准创建三个子列表：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e子列表1的成员是原始列表中小于基准的项\u003c/li\u003e\n\u003cli\u003e子列表2是由基准项本身构成\u003c/li\u003e\n\u003cli\u003e子列表3的成员是原始列表中大于基准的项\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e对子列表1和子列表3分布进行递归式 Quicksort 。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e将所有三个列表重新连接在一起。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e请注意，这里创建了一个仅含有基准的子列表，这种方法的一个优点是，它可以顺利地处理基准项多次出现在列表中的情况。在这种情况下，子列表2将有多个元素。\u003c/p\u003e\n\u003ch3 id=\"实现-Quicksort\"\u003e\u003ca href=\"#实现-Quicksort\" class=\"headerlink\" title=\"实现 Quicksort\"\u003e\u003c/a\u003e实现 Quicksort\u003c/h3\u003e\u003cp\u003e现在基础工作已经就绪，就可以编写 Quicksort 算法的代码了。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e statistics\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003equicksort\u003c/span\u003e\u003cspan class=\"params\"\u003e(numbers)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e len(numbers) \u0026lt;= \u003cspan class=\"number\"\u003e1\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e numbers\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pivot = statistics.median(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            [\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                numbers[\u003cspan class=\"number\"\u003e0\u003c/span\u003e],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                numbers[len(numbers) // \u003cspan class=\"number\"\u003e2\u003c/span\u003e],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                numbers[\u003cspan class=\"number\"\u003e-1\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        items_less, pivot_items, items_greater = (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            [n \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e n \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e numbers \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026lt; pivot],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            [n \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e n \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e numbers \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n == pivot],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            [n \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e n \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e numbers \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e n \u0026gt; pivot]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            quicksort(items_less) +\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            pivot_items +\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            quicksort(items_greater)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        )\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以下对 \u003ccode\u003equicksort()\u003c/code\u003e 做必要的解释：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e第4行：\u003c/strong\u003e列表为空或只有一个元素的终止条件\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e第7行至第13行：\u003c/strong\u003e用三个数的中位数（中值）计算基准项\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e第14行到第18行：\u003c/strong\u003e创建表示三个分区的列表\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003e第20至24行：\u003c/strong\u003e分区列表的递归排序和重新组合\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e注：\u003c/strong\u003e这个例子的优点是简洁易懂。然而，它并不是最有效的实现。特别是：在第14行到第18行创建分区的部分，需要对列表进行三次独立的循环。从执行时间的角度来看，这不是最佳方案。\u003c/p\u003e\n\u003cp\u003e下面是调用 \u003ccode\u003equicksort()\u003c/code\u003e 函数的示例：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"comment\"\u003e# Base cases\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort([])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort([\u003cspan class=\"number\"\u003e42\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e42\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003e\u003cspan class=\"comment\"\u003e# Recursive cases\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort([\u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e5\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort([\u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"number\"\u003e-3\u003c/span\u003e, \u003cspan class=\"number\"\u003e21\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e, \u003cspan class=\"number\"\u003e-8\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e-8\u003c/span\u003e, \u003cspan class=\"number\"\u003e-3\u003c/span\u003e, \u003cspan class=\"number\"\u003e6\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"number\"\u003e21\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e为了便于测试，你可以定义一个简短的函数来生成一个由 \u003ccode\u003e1\u003c/code\u003e 到 \u003ccode\u003e100\u003c/code\u003e 的随机数字列表:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e random\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eget_random_numbers\u003c/span\u003e\u003cspan class=\"params\"\u003e(length, minimum=\u003cspan class=\"number\"\u003e1\u003c/span\u003e, maximum=\u003cspan class=\"number\"\u003e100\u003c/span\u003e)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    numbers = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e _ \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(length):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        numbers.append(random.randint(minimum, maximum))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e numbers\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在可以使用 \u003ccode\u003eget_random_numbers()\u003c/code\u003e 函数生成的结果测试排序函数 \u003ccode\u003equicksort()\u003c/code\u003e 。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enumbers = get_random_numbers(\u003cspan class=\"number\"\u003e20\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enumbers\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e24\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"number\"\u003e67\u003c/span\u003e, \u003cspan class=\"number\"\u003e71\u003c/span\u003e, \u003cspan class=\"number\"\u003e84\u003c/span\u003e, \u003cspan class=\"number\"\u003e63\u003c/span\u003e, \u003cspan class=\"number\"\u003e100\u003c/span\u003e, \u003cspan class=\"number\"\u003e94\u003c/span\u003e, \u003cspan class=\"number\"\u003e53\u003c/span\u003e, \u003cspan class=\"number\"\u003e64\u003c/span\u003e, \u003cspan class=\"number\"\u003e19\u003c/span\u003e, \u003cspan class=\"number\"\u003e89\u003c/span\u003e, \u003cspan class=\"number\"\u003e48\u003c/span\u003e, \u003cspan class=\"number\"\u003e7\u003c/span\u003e, \u003cspan class=\"number\"\u003e31\u003c/span\u003e, \u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e32\u003c/span\u003e, \u003cspan class=\"number\"\u003e76\u003c/span\u003e, \u003cspan class=\"number\"\u003e91\u003c/span\u003e, \u003cspan class=\"number\"\u003e78\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort(numbers)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e3\u003c/span\u003e, \u003cspan class=\"number\"\u003e4\u003c/span\u003e, \u003cspan class=\"number\"\u003e7\u003c/span\u003e, \u003cspan class=\"number\"\u003e19\u003c/span\u003e, \u003cspan class=\"number\"\u003e24\u003c/span\u003e, \u003cspan class=\"number\"\u003e31\u003c/span\u003e, \u003cspan class=\"number\"\u003e32\u003c/span\u003e, \u003cspan class=\"number\"\u003e48\u003c/span\u003e, \u003cspan class=\"number\"\u003e53\u003c/span\u003e, \u003cspan class=\"number\"\u003e63\u003c/span\u003e, \u003cspan class=\"number\"\u003e64\u003c/span\u003e, \u003cspan class=\"number\"\u003e67\u003c/span\u003e, \u003cspan class=\"number\"\u003e71\u003c/span\u003e, \u003cspan class=\"number\"\u003e76\u003c/span\u003e, \u003cspan class=\"number\"\u003e78\u003c/span\u003e, \u003cspan class=\"number\"\u003e84\u003c/span\u003e, \u003cspan class=\"number\"\u003e89\u003c/span\u003e, \u003cspan class=\"number\"\u003e91\u003c/span\u003e, \u003cspan class=\"number\"\u003e94\u003c/span\u003e, \u003cspan class=\"number\"\u003e100\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enumbers = get_random_numbers(\u003cspan class=\"number\"\u003e15\u003c/span\u003e, \u003cspan class=\"number\"\u003e-50\u003c/span\u003e, \u003cspan class=\"number\"\u003e50\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003enumbers\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e-2\u003c/span\u003e, \u003cspan class=\"number\"\u003e14\u003c/span\u003e, \u003cspan class=\"number\"\u003e48\u003c/span\u003e, \u003cspan class=\"number\"\u003e42\u003c/span\u003e, \u003cspan class=\"number\"\u003e-48\u003c/span\u003e, \u003cspan class=\"number\"\u003e38\u003c/span\u003e, \u003cspan class=\"number\"\u003e44\u003c/span\u003e, \u003cspan class=\"number\"\u003e-25\u003c/span\u003e, \u003cspan class=\"number\"\u003e14\u003c/span\u003e, \u003cspan class=\"number\"\u003e-14\u003c/span\u003e, \u003cspan class=\"number\"\u003e41\u003c/span\u003e, \u003cspan class=\"number\"\u003e-30\u003c/span\u003e, \u003cspan class=\"number\"\u003e-35\u003c/span\u003e, \u003cspan class=\"number\"\u003e36\u003c/span\u003e, \u003cspan class=\"number\"\u003e-5\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort(numbers)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e-48\u003c/span\u003e, \u003cspan class=\"number\"\u003e-35\u003c/span\u003e, \u003cspan class=\"number\"\u003e-30\u003c/span\u003e, \u003cspan class=\"number\"\u003e-25\u003c/span\u003e, \u003cspan class=\"number\"\u003e-14\u003c/span\u003e, \u003cspan class=\"number\"\u003e-5\u003c/span\u003e, \u003cspan class=\"number\"\u003e-2\u003c/span\u003e, \u003cspan class=\"number\"\u003e14\u003c/span\u003e, \u003cspan class=\"number\"\u003e14\u003c/span\u003e, \u003cspan class=\"number\"\u003e36\u003c/span\u003e, \u003cspan class=\"number\"\u003e38\u003c/span\u003e, \u003cspan class=\"number\"\u003e41\u003c/span\u003e, \u003cspan class=\"number\"\u003e42\u003c/span\u003e, \u003cspan class=\"number\"\u003e44\u003c/span\u003e, \u003cspan class=\"number\"\u003e48\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort(get_random_numbers(\u003cspan class=\"number\"\u003e10\u003c/span\u003e, maximum=\u003cspan class=\"number\"\u003e500\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e49\u003c/span\u003e, \u003cspan class=\"number\"\u003e94\u003c/span\u003e, \u003cspan class=\"number\"\u003e99\u003c/span\u003e, \u003cspan class=\"number\"\u003e124\u003c/span\u003e, \u003cspan class=\"number\"\u003e235\u003c/span\u003e, \u003cspan class=\"number\"\u003e287\u003c/span\u003e, \u003cspan class=\"number\"\u003e292\u003c/span\u003e, \u003cspan class=\"number\"\u003e333\u003c/span\u003e, \u003cspan class=\"number\"\u003e455\u003c/span\u003e, \u003cspan class=\"number\"\u003e464\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026gt;\u0026gt;\u0026gt; \u003c/span\u003equicksort(get_random_numbers(\u003cspan class=\"number\"\u003e10\u003c/span\u003e, \u003cspan class=\"number\"\u003e1000\u003c/span\u003e, \u003cspan class=\"number\"\u003e2000\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u003cspan class=\"number\"\u003e1038\u003c/span\u003e, \u003cspan class=\"number\"\u003e1321\u003c/span\u003e, \u003cspan class=\"number\"\u003e1530\u003c/span\u003e, \u003cspan class=\"number\"\u003e1630\u003c/span\u003e, \u003cspan class=\"number\"\u003e1835\u003c/span\u003e, \u003cspan class=\"number\"\u003e1873\u003c/span\u003e, \u003cspan class=\"number\"\u003e1900\u003c/span\u003e, \u003cspan class=\"number\"\u003e1931\u003c/span\u003e, \u003cspan class=\"number\"\u003e1936\u003c/span\u003e, \u003cspan class=\"number\"\u003e1943\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e要进一步理解 \u003ccode\u003equicksort()\u003c/code\u003e 的工作原理，请参见下图。这里显示了对含有 12 个元素的列表进行排序时的递归过程。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-9-7/1631011983139-qsort.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ccenter\u003eQuicksort 算法原理解析\u003c/center\u003e\n\n\u003cp\u003e如上图所示，在原始列表中，第一个成员是 \u003ccode\u003e31\u003c/code\u003e 、中间的是 \u003ccode\u003e92\u003c/code\u003e、最后一个是 \u003ccode\u003e28\u003c/code\u003e , 这三个数值的中位数（中值）是 \u003ccode\u003e31\u003c/code\u003e ，故以它为基准。第一个分区由以下子列表组成:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e子列表\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e[18, 3, 18, 11, 28]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e小于基准的成员\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e[31]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e基准本身\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e[72, 79, 92, 44, 56, 41]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e大于基准的成员\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e每个子列表随后以相同的方式再实施递归，并获得分区，直到所有子列表要么包含单个成员，要么为空。当递归调用返回时，列表将按排序的结果重组。注意，在左边倒数第二步中，基准项 \u003ccode\u003e18\u003c/code\u003e 在列表中出现了两次，因此基准项的子列表有两个成员。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e递归\u003c/strong\u003e之旅到此就要结束了，递归的核心就是：函数对自身的调用。递归并非对所有的任务都适用，有些编程问题迫切需要使用递归，此时递归是一种很好用的技巧。\u003c/p\u003e\n\u003cp\u003e你现在应该能够很好地认识到何时调用递归，并准备好在需要递归时自信地使用它了。 如果你想了解更多关于Python递归的知识，请查看\u003ca href=\"https://realpython.com/python-thinking-recursively/\" target=\"_blank\" rel=\"noopener\"\u003ePython递归思维\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"参考文献\"\u003e\u003ca href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"\u003e\u003c/a\u003e参考文献\u003c/h2\u003e\u003cp\u003e[1]. \u003ca href=\"https://realpython.com/python-recursion/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://realpython.com/python-recursion/\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2021/05/06/what-is-debugging/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          调试及其重要性\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2021/09/06/learn-program-right-way/\"\u003e\n        \n          什么是学习编程的正确方法\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2021-06-03T00:00:00Z",
  "Author": "老齐教室"
}