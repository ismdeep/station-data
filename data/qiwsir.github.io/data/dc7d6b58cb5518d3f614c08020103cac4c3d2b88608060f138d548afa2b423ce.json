{
  "Source": "qiwsir.github.io",
  "Title": "如何提速机器学习模型训练",
  "Link": "https://qiwsir.github.io/2021/02/16/speed-up-sklearn/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e如何提速机器学习模型训练\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2021-02-16\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e\u003cstrong\u003e注：\u003c/strong\u003e 本文中有一些超链接，如果在微信中不能阅读，可以转到我的博客，地址：\u003ca href=\"https://qiwsir.github.io/2021/02/16/speed-up-sklearn/\"\u003ehttps://qiwsir.github.io/2021/02/16/speed-up-sklearn/\u003c/a\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eScikit-Learn是一个非常简单的机器学习库，然而，有时候模型训练的时间会过长。对此，有没有改进的策略？下面列举几种，供参考。\u003c/p\u003e\n\u003ch2 id=\"选择合适的Slover\"\u003e\u003ca href=\"#选择合适的Slover\" class=\"headerlink\" title=\"选择合适的Slover\"\u003e\u003c/a\u003e选择合适的Slover\u003c/h2\u003e\u003cp\u003e更好的算法能够将硬件的性能发挥到极致，从而得到更好的模型。在Scikit-Learn提供的模型中，可以通过参数\u003ccode\u003eslover\u003c/code\u003e实现不同的算法，即不同的\u003cstrong\u003eSlover\u003c/strong\u003e（求解器）。例如，scikit-learn中的\u003ca href=\"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\" target=\"_blank\" rel=\"noopener\"\u003eLogistic回归\u003c/a\u003e，可以为\u003ccode\u003eslover\u003c/code\u003e设置的值为\u003ccode\u003enewton-cg\u003c/code\u003e、\u003ccode\u003elbfgs\u003c/code\u003e、\u003ccode\u003eliblinear\u003c/code\u003e、\u003ccode\u003esag\u003c/code\u003e和\u003ccode\u003esaga\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e要想了解不同求解器的工作方式，推荐观看scikit-learn核心贡献者\u003ca href=\"https://youtu.be/1s8RzWwMdqg?t=671\" target=\"_blank\" rel=\"noopener\"\u003eGaëlVaroquaux\u003c/a\u003e的演讲。他在演讲中提到，梯度下降算法虽然收敛速度快，但是计算成本比较高，因为每次都需要针对所有数据进行计算。如果使用重采样方法，就可以降低每次迭代的计算成本，但收敛速度会变慢。注意，在实践中，并非总强调快速收敛[1]。以前面提到的Logistic回归为例，其中不同的Slover的计算速度有所不同。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e time\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sklearn.datasets \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e make_classification\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e train_test_split\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sklearn.linear_model \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e LogisticRegression\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 创建数据集\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eX, y = make_classification(n_samples=\u003cspan class=\"number\"\u003e100000\u003c/span\u003e, n_features=\u003cspan class=\"number\"\u003e100\u003c/span\u003e, n_classes=\u003cspan class=\"number\"\u003e2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=\u003cspan class=\"number\"\u003e1000\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Slovers\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esolvers = [\u003cspan class=\"string\"\u003e\u0026#39;liblinear\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;saga\u0026#39;\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e sol \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e solvers:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    start = time.time()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logreg = LogisticRegression(solver=sol)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    logreg.fit(X_train, y_train)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    end = time.time()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(sol + \u003cspan class=\"string\"\u003e\u0026#34; Fit time: \u0026#34;\u003c/span\u003e , end-start)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 输出\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eliblinear Fit time:  \u003cspan class=\"number\"\u003e1.4556050300598145\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esaga Fit time:  \u003cspan class=\"number\"\u003e2.8493809700012207\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在具体问题中，要使用哪一个Slover，还需要根据具体情况而定，特别是要熟悉每个Slover的特点，请阅读\u003ca href=\"https://scikit-learn.org/stable/modules/linear_model.html\" target=\"_blank\" rel=\"noopener\"\u003e官方文档\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"超参数调优\"\u003e\u003ca href=\"#超参数调优\" class=\"headerlink\" title=\"超参数调优\"\u003e\u003c/a\u003e超参数调优\u003c/h2\u003e\u003cp\u003e在机器学习中，超参数是在训练开始之前设置的，不能通过训练进行更改。而其他普通参数，则不需要提前设定，是通过数据集，在模型训练过程中得到的，或者说，模型训练的过程就是得到普通参数的过程。\u003c/p\u003e\n\u003cp\u003e下面的表格中列举了常见机器学习模型中超参数和普通参数[2]。\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e模型\u003c/th\u003e\n\u003cth\u003e普通参数举例\u003c/th\u003e\n\u003cth\u003e超参数举例\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e决策树\u003c/td\u003e\n\u003ctd\u003e在每个节点上选择的输入变量；每个节点上选择的阈值\u003c/td\u003e\n\u003ctd\u003e每个叶节点所应包括的最少数据量；训练后的剪枝（pruning）策略\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e随机森林\u003c/td\u003e\n\u003ctd\u003e同上\u003c/td\u003e\n\u003ctd\u003e决策树的数量；输入变量的数量\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e支持向量机\u003c/td\u003e\n\u003ctd\u003e支持向量（support vector）的选择；每个支持向量的拉格朗日乘数\u003c/td\u003e\n\u003ctd\u003e核（kernel）的选择；正则化常量C和核函数的超参数\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eK近邻\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e近邻K的选择；距离函数的选择；初始化选择等\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e朴素贝叶斯\u003c/td\u003e\n\u003ctd\u003e每一类的先验概率\u003c/td\u003e\n\u003ctd\u003e数值属性用核数密度估计量或正态分布；核密度估计量的窗口宽度\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e神经网络\u003c/td\u003e\n\u003ctd\u003e每层的权重\u003c/td\u003e\n\u003ctd\u003e隐藏层的数量；每层的神经元数量；训练的epoch；学习率等\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e由于超参数不能训练，选择合适的超参数，就是成为机器学习中的研究重点，它影响着模型的性能。在Scikit-Learn中提供了一些常见的超参数优化方法，比如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e网格搜索（grid search），又称参数扫描，它能穷尽所有的参数组合，通过\u003ccode\u003esklearn.model_selection.GridSearchCV\u003c/code\u003e类实现。\u003c/li\u003e\n\u003cli\u003e随机搜索（randomized search），从具有一定分布的参数空间抽样给定数量的参数，通过\u003ccode\u003esklearn.model_selection.RandomizedSearchCV\u003c/code\u003e类实现。\u003c/li\u003e\n\u003cli\u003e对以上两个两个的改进： \u003ca href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingGridSearchCV.html#sklearn.model_selection.HalvingGridSearchCV\" target=\"_blank\" rel=\"noopener\"\u003eHalvingGridSearchCV\u003c/a\u003e 和 \u003ca href=\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingRandomSearchCV.html#sklearn.model_selection.HalvingRandomSearchCV\" target=\"_blank\" rel=\"noopener\"\u003eHalvingRandomSearch\u003c/a\u003e)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此外，还有其他一些工具能够实现超参数的优化，比如\u003ca href=\"https://github.com/ray-project/tune-sklearn\" target=\"_blank\" rel=\"noopener\"\u003eTune-sklearn\u003c/a\u003e，提供了更多超参数优化技术，如贝叶斯优化（bayesian optimization）、早停法（early stopping）、分布执行（distributed execution）等，在某种程度上，能够替代网格搜索和随机搜索方法，优化了模型的速度。\u003c/p\u003e\n\u003cp\u003e下面列出Tune-sklearn的几个特点，供参阅：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e兼容 Scikit-learn：从Scikit-learn转向Tune-sklearn，只需要修改几行代码，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003eAn example training a RandomForestClassifier, performing\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003erandomized search using TuneSearchCV.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e tune_sklearn \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e TuneSearchCV\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sklearn.ensemble \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e RandomForestClassifier\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sklearn \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e datasets\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e train_test_split\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e scipy.stats \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e randint\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edigits = datasets.load_digits()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex = digits.data\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ey = digits.target\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ex_train, x_test, y_train, y_test = train_test_split(x, y, test_size=\u003cspan class=\"number\"\u003e.2\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclf = RandomForestClassifier()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eparam_distributions = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;n_estimators\u0026#34;\u003c/span\u003e: randint(\u003cspan class=\"number\"\u003e20\u003c/span\u003e, \u003cspan class=\"number\"\u003e80\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;max_depth\u0026#34;\u003c/span\u003e: randint(\u003cspan class=\"number\"\u003e2\u003c/span\u003e, \u003cspan class=\"number\"\u003e10\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etune_search = TuneSearchCV(clf, param_distributions, n_trials=\u003cspan class=\"number\"\u003e3\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etune_search.fit(x_train, y_train)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epred = tune_search.predict(x_test)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaccuracy = np.count_nonzero(np.array(pred) == np.array(y_test)) / len(pred)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(accuracy)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e具有多种现代超参数优化方法：贝叶斯优化，早停法和分布式执行等，都能很容易地在代码中实现。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e支持多种框架：除了Scikit-learn，还支持\u003ca href=\"https://github.com/ray-project/tune-sklearn/blob/master/examples/torch_nn.py\" target=\"_blank\" rel=\"noopener\"\u003ePytorch\u003c/a\u003e、\u003ca href=\"https://github.com/ray-project/tune-sklearn/blob/master/examples/keras_example.py\" target=\"_blank\" rel=\"noopener\"\u003eKeras\u003c/a\u003e、\u003ca href=\"https://github.com/ray-project/tune-sklearn/blob/master/examples/xgbclassifier.py\" target=\"_blank\" rel=\"noopener\"\u003eXGBoost\u003c/a\u003e等（点击超链接，可以查看相应的代码示例）。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e可扩展性强：Tune-sklearn基于Ray Tune——一种用于分布式超参数优化的库——来高效透明地实现在多核上，甚至在多台机器上进行并行计算，交叉验证。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e下图来自《\u003ca href=\"https://medium.com/distributed-computing-with-ray/gridsearchcv-2-0-new-and-improved-ee56644cbabf\" target=\"_blank\" rel=\"noopener\"\u003eGridSearchCV 2.0 — New and Improved\u003c/a\u003e》，比较了Tune-sklearn和Scikit-learn的训练时间。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-2-16/1613460918571-0*-Nx35rNv2e5ToNc1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"并行计算\"\u003e\u003ca href=\"#并行计算\" class=\"headerlink\" title=\"并行计算\"\u003e\u003c/a\u003e并行计算\u003c/h2\u003e\u003cp\u003e另外一种提升模型训练速度的方法是使用 \u003ca href=\"https://joblib.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\"\u003ejoblib\u003c/a\u003e 和 \u003ca href=\"https://docs.ray.io/en/master/index.html\" target=\"_blank\" rel=\"noopener\"\u003eRay\u003c/a\u003e 实现并行计算，并将训练进行分发。默认情况下，Scikit-learn只用单核完成模型训练，但是，现在很多计算机都已经是多核了，比如我现在用的MacBook Pro具有4核。因此，在个人计算机上，就具备了提升模型训练速度的可能性。特别是当你的模型可以进行高度的并行计算时，比如随机森林模型（如下图所示）。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-2-16/1613461771039-forest.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e应用joblib，能让Scikit-Learn实现单个节点上并行训练，默认情况下joblib使用\u003ccode\u003eloky\u003c/code\u003e并行模式[4]，还可以选择其他模式，如：\u003ccode\u003emultiprocessing\u003c/code\u003e，\u003ccode\u003edask\u003c/code\u003e和\u003ccode\u003eray\u003c/code\u003e等。\u003ccode\u003eloky\u003c/code\u003e模式只能优化单个节点，不能实现分布式计算[5]。如果执行分布式计算，可能需要考虑更多东西，如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e多台机器之间的任务调度\u003c/li\u003e\n\u003cli\u003e数据的高效传输\u003c/li\u003e\n\u003cli\u003e故障恢复\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e幸运的是，如果设置为\u003ccode\u003ejoblib.parallel_backend(\u0026#39;ray\u0026#39;)\u003c/code\u003e，即\u003ccode\u003eray\u003c/code\u003e并行计算模式，能够自动将上面的各项要求都兼顾，让你操作起来更简单。下图分别比较了\u003ccode\u003eray\u003c/code\u003e、\u003ccode\u003emultiprocessing\u003c/code\u003e、\u003ccode\u003edask\u003c/code\u003e和\u003ccode\u003eloky\u003c/code\u003e四种并行计算模式对训练模型速度的影响[6]。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2021-2-16/1613463142266-ray.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e如果你对这种做法有兴趣，不妨查看参考文献[6]的内容。\u003c/p\u003e\n\u003ch2 id=\"结论\"\u003e\u003ca href=\"#结论\" class=\"headerlink\" title=\"结论\"\u003e\u003c/a\u003e结论\u003c/h2\u003e\u003cp\u003e本文介绍了三种提升使用Scikit-learn库训练模型速度的方法，既可以使用scikit-learn中提供的一些方法，也可以用其他库，如Tune-sklearn和Ray。\u003c/p\u003e\n\u003ch2 id=\"参考文献\"\u003e\u003ca href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"\u003e\u003c/a\u003e参考文献\u003c/h2\u003e\u003cp\u003e[1]. \u003ca href=\"https://leon.bottou.org/publications/pdf/nips-2007.pdf\" target=\"_blank\" rel=\"noopener\"\u003ehttps://leon.bottou.org/publications/pdf/nips-2007.pdf\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[2]. \u003ca href=\"https://www.jiqizhixin.com/graph/technologies/5619ca3f-5d4e-48c1-824d-d2a0aea0c7d1\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.jiqizhixin.com/graph/technologies/5619ca3f-5d4e-48c1-824d-d2a0aea0c7d1\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[3]. \u003ca href=\"https://medium.com/distributed-computing-with-ray/how-to-speed-up-scikit-learn-model-training-aaf17e2d1e1\" target=\"_blank\" rel=\"noopener\"\u003ehttps://medium.com/distributed-computing-with-ray/how-to-speed-up-scikit-learn-model-training-aaf17e2d1e1\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[4]. \u003ca href=\"https://joblib.readthedocs.io/en/latest/parallel.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://joblib.readthedocs.io/en/latest/parallel.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[5]. \u003ca href=\"https://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel_backend.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel_backend.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e[6]. \u003ca href=\"https://medium.com/distributed-computing-with-ray/easy-distributed-scikit-learn-training-with-ray-54ff8b643b33\" target=\"_blank\" rel=\"noopener\"\u003ehttps://medium.com/distributed-computing-with-ray/easy-distributed-scikit-learn-training-with-ray-54ff8b643b33\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2021/02/14/python-packages/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python第三方包的那些事\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2021/02/18/name-in-python/\"\u003e\n        \n          Python中`__name__`有什么用\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2021-02-16T00:00:00Z",
  "Author": "老齐教室"
}