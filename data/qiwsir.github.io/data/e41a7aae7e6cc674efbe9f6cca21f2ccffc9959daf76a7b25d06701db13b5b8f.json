{
  "Source": "qiwsir.github.io",
  "Title": "初学者指南：利用SVD创建推荐系统",
  "Link": "https://qiwsir.github.io/2020/08/26/svd-recommond-sys/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e初学者指南：利用SVD创建推荐系统\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-08-26\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：Mayukh Bhattacharyya\u003c/p\u003e\n\u003cp\u003e翻译：老齐\u003c/p\u003e\n\u003cp\u003e推荐图书：《数据准备和特征工程》\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B2_20200114135935.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e在本微信公众号中回复“特征工程”，即可得到本书源码和部分视频课程。\u003c/p\u003e\n\u003ch2 id=\"序言\"\u003e\u003ca href=\"#序言\" class=\"headerlink\" title=\"序言\"\u003e\u003c/a\u003e序言\u003c/h2\u003e\u003cp\u003e你是否有过这样的经历：前一天晚上登录Netflix，观看了《星际穿越》，他们会建议你看《地心引力》。或者你在亚马逊上购买了东西，看到了网站推荐给你可能感兴趣的产品。你是否想知道在线广告代理商是如何根据我们的浏览习惯向我们推送广告的?这一切都归结为一种被称为推荐系统的东西，它根据我们与产品互动的历史，预测我们可能对哪些产品感兴趣。\u003c/p\u003e\n\u003cp\u003e本文中，我们将建立一个很酷的推荐系统。我们将使用SVD（Sigular Vector Decomposition）技术，这比基于内容的基本推荐系统要高级得多。\u003c/p\u003e\n\u003cp\u003eSVD是一种协同过滤算法，它能捕获志趣相投的用户的潜在兴趣模式，并根据相似用户的选择和偏好来推送新产品。\u003c/p\u003e\n\u003ch2 id=\"数据集\"\u003e\u003ca href=\"#数据集\" class=\"headerlink\" title=\"数据集\"\u003e\u003c/a\u003e数据集\u003c/h2\u003e\u003cp\u003e我们肯定需要一个数据集，本文中将使用著名的Movielens数据集，可以在 \u003ca href=\"http://grouplens.org/datasets/movielens/\" target=\"_blank\" rel=\"noopener\"\u003ehttp://grouplens.org/datasets/movielens/\u003c/a\u003e 网页上下载 movielens100k 数据集。\u003c/p\u003e\n\u003cp\u003e这个数据集包含了不同用户对各种电影的大约10万个评价。我们研究一下数据集。创建新\u003ccode\u003eexploration.py\u003c/code\u003e文件并添加以下代码块。注意：这里我们将使用脚本文件，你也可以在 IPython notebook 中运行下面的程序。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport numpy as np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata = pd.read_csv(\u0026#39;movielens100k.csv\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata[\u0026#39;userId\u0026#39;] = data[\u0026#39;userId\u0026#39;].astype(\u0026#39;str\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata[\u0026#39;movieId\u0026#39;] = data[\u0026#39;movieId\u0026#39;].astype(\u0026#39;str\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eusers = data[\u0026#39;userId\u0026#39;].unique()                # list of all users\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emovies = data[\u0026#39;movieId\u0026#39;].unique()          #list of all movies\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u0026#34;Number of users\u0026#34;, len(users))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u0026#34;Number of movies\u0026#34;, len(movies))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(data.head())\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e做得不错！你将看到数据集中有718个用户和8915部电影。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eNumber of users 718\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNumber of movies 8915\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----------+-----------+----------+-------------+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|    |   userId |   movieId |   rating |   timestamp |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|----+----------+-----------+----------+-------------|\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  0 |        1 |         1 |        5 |   847117005 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  1 |        1 |         2 |        3 |   847642142 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  2 |        1 |        10 |        3 |   847641896 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  3 |        1 |        32 |        4 |   847642008 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  4 |        1 |        34 |        4 |   847641956 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----------+-----------+----------+-------------+\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"划分训练集和测试集\"\u003e\u003ca href=\"#划分训练集和测试集\" class=\"headerlink\" title=\"划分训练集和测试集\"\u003e\u003c/a\u003e划分训练集和测试集\u003c/h2\u003e\u003cp\u003e我们本可以按通常的随机方式将数据集划分为训练集和测试集。但是既然数据集中有时间戳（\u003ccode\u003etimestamp\u003c/code\u003e特征），那就让我们做一些更奇特吧。创建一个新脚本\u003ccode\u003eworkspace.py\u003c/code\u003e ，在脚本完成所有的工作。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport numpy as np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport scipy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata = pd.read_csv(\u0026#39;movielens100k.csv\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata[\u0026#39;userId\u0026#39;] = data[\u0026#39;userId\u0026#39;].astype(\u0026#39;str\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edata[\u0026#39;movieId\u0026#39;] = data[\u0026#39;movieId\u0026#39;].astype(\u0026#39;str\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eusers = data[\u0026#39;userId\u0026#39;].unique() #list of all users\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003emovies = data[\u0026#39;movieId\u0026#39;].unique() #list of all moviestest = pd.DataFrame(columns=data.columns)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etrain = pd.DataFrame(columns=data.columns)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etest_ratio = 0.2           #fraction of data to be used as test set.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor u in users:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    temp = data[data[\u0026#39;userId\u0026#39;] == u]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    n = len(temp)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    test_size = int(test_ratio*n)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    temp = temp.sort_values(\u0026#39;timestamp\u0026#39;).reset_index()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etemp.drop(\u0026#39;index\u0026#39;, axis=1, inplace=True)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edummy_test = temp.ix[n-1-test_size :]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edummy_train = temp.ix[: n-2-test_size]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etest = pd.concat([test, dummy_test])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etrain = pd.concat([train, dummy_train])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e这样做的目的是，根据这些评级的时间戳对数据进行排序，以使最近的评级保持在底部，并且从底部开始对每个用户取20%的评级作为测试集。所以，我们用最近的评级作为测试集，而不是随机选择。这样更符合逻辑，因为推荐系统的目标是：以类似产品的历史评级为基础，然后对未遇到过的产品进行评级。\u003c/p\u003e\n\u003ch2 id=\"效用矩阵\"\u003e\u003ca href=\"#效用矩阵\" class=\"headerlink\" title=\"效用矩阵\"\u003e\u003c/a\u003e效用矩阵\u003c/h2\u003e\u003cp\u003e当前形式的数据集对我们毫无用处。为了将数据用于推荐系统，我们需要将数据集转换为一种效用矩阵（Utility Matrix）的形式。下面的脚本中创建了函数\u003ccode\u003ecreate_utility_matrix\u003c/code\u003e，并且把新脚本文件命名为\u003ccode\u003erecsys.py\u003c/code\u003e，使用此脚本中的函数来处理训练和测试集数据。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport numpy as np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom scipy.linalg import sqrtm\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef create_utility_matrix(data, formatizer = {\u0026#39;user\u0026#39;:0, \u0026#39;item\u0026#39;: 1, \u0026#39;value\u0026#39;: 2}):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        :param data:      Array-like, 2D, nx3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        :param formatizer:pass the formatizer\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        :return:          utility matrix (n x m), n=users, m=items\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    itemField = formatizer[\u0026#39;item\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    userField = formatizer[\u0026#39;user\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    valueField = formatizer[\u0026#39;value\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    userList = data.ix[:,userField].tolist()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    itemList = data.ix[:,itemField].tolist()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    valueList = data.ix[:,valueField].tolist()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    users = list(set(data.ix[:,userField]))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    items = list(set(data.ix[:,itemField]))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    users_index = {users[i]: i for i in range(len(users))}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pd_dict = {item: [np.nan for i in range(len(users))] for item in items}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for i in range(0,len(data)):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        item = itemList[i]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        user = userList[i]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        value = valueList[i]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pd_dict[item][users_index[user]] = value\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        X = pd.DataFrame(pd_dict)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    X.index = users\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    itemcols = list(X.columns)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    items_index = {itemcols[i]: i for i in range(len(itemcols))}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # users_index gives us a mapping of user_id to index of user\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # items_index provides the same for items\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return X, users_index, items_index\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e函数中的参数\u003ccode\u003eformatizer = {\u0026#39;user\u0026#39;:0, \u0026#39;item\u0026#39;: 1, \u0026#39;value\u0026#39;: 2}\u003c/code\u003e 与数据集\u003ccode\u003edata\u003c/code\u003e参数之间建立列的对应关系，\u003ccode\u003edata\u003c/code\u003e中的列\u003ccode\u003euserId\u003c/code\u003e或列索引\u003ccode\u003e0\u003c/code\u003e对应的是\u003ccode\u003efromatizer\u003c/code\u003e中的键\u003ccode\u003euser\u003c/code\u003e，列\u003ccode\u003emovieId\u003c/code\u003e或列索引\u003ccode\u003e1\u003c/code\u003e对应的是\u003ccode\u003eformatizer\u003c/code\u003e的键\u003ccode\u003eitem\u003c/code\u003e，列\u003ccode\u003eratings\u003c/code\u003e或列索引\u003ccode\u003e2\u003c/code\u003e对应的是\u003ccode\u003eformatizer\u003c/code\u003e键\u003ccode\u003evalue\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e效用矩阵只是一个二维矩阵，其中一个轴属于用户，另一个轴属于项目（本例中是电影）。所以矩阵的 $(i,j)$ 处的值将是用户 $i$ 对电影 $j$ 的评级。\u003c/p\u003e\n\u003cp\u003e通过一个例子更加透彻地理解这个问题。假设有5个样本的数据集。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e+----+----------+-----------+----------+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|    |   userId |   movieId |   rating |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|----+----------+-----------+----------+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  0 |      mark|     movie1|        5 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  1 |      lucy|     movie2|        2 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  2 |      mark|     movie3|        3 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  3 |     shane|     movie2|        1 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e|  4 |      lisa|     movie3|        4 |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----------+-----------+----------+\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果将此数据集传到 \u003ccode\u003ecreate_utility_matrix\u003c/code\u003e函数，它将返回一个这样的效用矩阵以及辅助字典 \u003ccode\u003euser_index\u003c/code\u003e 和 \u003ccode\u003eitem_index\u003c/code\u003e，如下所示。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e+----+----+----+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e| 5  | nan| 3  |   # user_index = {mark: 0, lucy:1, shane:2, lisa:3}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----+----+   # item_index = {movie1:0, movie2: 1, movie3:2}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e| nan| 2  | nan|\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----+----+\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e| nan| 1  | nan|   # The nan values are for user-item combinations\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----+----+   # where the ratings are unavailable.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e| nan| nan| 4  |\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e+----+----+----+\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"SVD-计算\"\u003e\u003ca href=\"#SVD-计算\" class=\"headerlink\" title=\"SVD 计算\"\u003e\u003c/a\u003eSVD 计算\u003c/h2\u003e\u003cp\u003eSVD是奇异向量分解，它的作用是将一个矩阵分解成特征向量的数组，这个数组对应着各行各列。继续编辑文件\u003ccode\u003erecsys.py\u003c/code\u003e，创建函数\u003ccode\u003esvd\u003c/code\u003e，这个函数将从\u003ccode\u003ecreate_utility_matrix\u003c/code\u003e函数和参数\u003ccode\u003ek\u003c/code\u003e中得到输出结果。参数\u003ccode\u003ek\u003c/code\u003e是每个用户和每部电影将被解析到的特征值。\u003c/p\u003e\n\u003cp\u003eSVD 是由 Brandyn Webb 引入推荐系统领域的，他在Netflix Prize挑战赛中所用的名字 Simon Funk 更加著名。这里我们没有使用 Funk 的迭代版本的SVD或FunkSVD，而是使用numpy中提供的SVD函数实现。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edef svd(train, k):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    utilMat = np.array(train)    # the nan or unavailable entries are masked\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    mask = np.isnan(utilMat)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    masked_arr = np.ma.masked_array(utilMat, mask)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    item_means = np.mean(masked_arr, axis=0)    # nan entries will replaced by the average rating for each item\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    utilMat = masked_arr.filled(item_means)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x = np.tile(item_means, (utilMat.shape[0],1))    # we remove the per item average from all entries.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # the above mentioned nan entries will be essentially zero now\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    utilMat = utilMat - x    # The magic happens here. U and V are user and item features\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    U, s, V=np.linalg.svd(utilMat, full_matrices=False)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    s=np.diag(s)    # we take only the k most significant features\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    s=s[0:k,0:k]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    U=U[:,0:k]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    V=V[0:k,:]    s_root=sqrtm(s)    Usk=np.dot(U,s_root)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    skV=np.dot(s_root,V)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    UsV = np.dot(Usk, skV)    UsV = UsV + x    print(\u0026#34;svd done\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return UsV\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"组合起来\"\u003e\u003ca href=\"#组合起来\" class=\"headerlink\" title=\"组合起来\"\u003e\u003c/a\u003e组合起来\u003c/h2\u003e\u003cp\u003e回到\u003ccode\u003eworkspace.py\u003c/code\u003e文件， 在这个文件中引入上面的函数。我们将使用真实的评级，找出测试集预测评级的均方根误差。除了创建函数，我们还将创建一个列表来保存不同数量的特征，这将有助于后面的分析。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom recsys import svd, create_utility_matrix\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef rmse(true, pred):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    # this will be used towards the end\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    x = true - pred\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return sum([xi*xi for xi in x])/len(x)  # to test the performance over a different number of features\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eno_of_features = [8,10,12,14,17]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eutilMat, users_index, items_index = create_utility_matrix(train)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efor f in no_of_features: \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    svdout = svd(utilMat, k=f)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    pred = []           #to store the predicted ratings\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    for _,row in test.iterrows():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        user = row[\u0026#39;userId\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        item = row[\u0026#39;movieId\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        u_index = users_index[user]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        if item in items_index:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            i_index = items_index[item]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            pred_rating = svdout[u_index, i_index]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        else:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            pred_rating = np.mean(svdout[u_index, :])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pred.append(pred_rating)print(rmse(test[\u0026#39;rating\u0026#39;], pred))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对于 \u003ccode\u003etest_size = 0.2\u003c/code\u003e，RMSE分数约为\u003ccode\u003e0.96\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e这是 Movielens100k 的一个适度的分数。稍加调整，你也许可以超过0.945，但这取决于你。\u003c/p\u003e\n\u003cp\u003e如果你喜欢这篇文章，请告诉我！以下是3个链接供您阅读：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mayukh18/reco（SVD的完整代码以及其他著名RecSys算法的实现）\" target=\"_blank\" rel=\"noopener\"\u003ehttps://github.com/mayukh18/reco（SVD的完整代码以及其他著名RecSys算法的实现）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://paperswithcode.com/sota/collaborative-filtering-on-movielens-100k（Movielens100k的最新结果。这些结果在官方测试集上得到验证）\" target=\"_blank\" rel=\"noopener\"\u003ehttps://paperswithcode.com/sota/collaborative-filtering-on-movielens-100k（Movielens100k的最新结果。这些结果在官方测试集上得到验证）\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sifter.org/~simon/journal/20061211.html（Simon\" target=\"_blank\" rel=\"noopener\"\u003ehttps://sifter.org/~simon/journal/20061211.html（Simon\u003c/a\u003e Funk最著名的博客，详细介绍了他的SVD方法）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e原文链接：\u003ca href=\"https://towardsdatascience.com/beginners-guide-to-creating-an-svd-recommender-system-1fd7326d1f65\" target=\"_blank\" rel=\"noopener\"\u003ehttps://towardsdatascience.com/beginners-guide-to-creating-an-svd-recommender-system-1fd7326d1f65\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/08/20/grad-down/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          零基础学习梯度下降算法\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/09/04/read-and-write-file/\"\u003e\n        \n          用Python读写文件的方法\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-08-26T00:00:00Z",
  "Author": "老齐教室"
}