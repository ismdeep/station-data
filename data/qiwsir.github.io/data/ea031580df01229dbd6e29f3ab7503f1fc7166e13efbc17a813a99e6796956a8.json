{
  "Source": "qiwsir.github.io",
  "Title": "利用飞桨实现数字识别",
  "Link": "https://qiwsir.github.io/2020/01/11/%E5%88%A9%E7%94%A8%E9%A3%9E%E6%A1%A8%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e利用飞桨实现数字识别\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-01-11\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：燕清\u003c/p\u003e\n\u003cp\u003e数字识别，是机器学习和深度学习的经典案例。为此，此时用飞桨深度学习平台，也实现此案例。在本例中所用的数据集来自MNIST。\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg width=\"450px\" src=\"https://githubraw.cdn.bcebos.com/PaddlePaddle/book/develop/02.recognize_digits/image/mnist_example_image.png?raw=true\"/\u003e\u003cbr/\u003e图1.MNIST图片示例\u003c/p\u003e\n本文中，我们从简单的Softmax回归模型开始，带大家了解手写字符识别，并向大家介绍如何改进模型，利用多层感知机（MLP）和卷积神经网络（CNN）优化识别效果。\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e提示：\u003c/strong\u003e 本文代码已经发布到在线实验平台，请关注本文微信公众号（扫描文末二维码），并回复：姓名+手机号+‘案例’，即可获得。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"概述\"\u003e\u003ca href=\"#概述\" class=\"headerlink\" title=\"概述\"\u003e\u003c/a\u003e概述\u003c/h2\u003e\u003cp\u003e首先，理解本文所使用的如下定义：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eX，代表输入：MNIST图片是28×28 的二维图像，为了进行计算，我们将其转化为784维向量，即X=($x_0,x_1,…,x_{783}$)。\u003c/li\u003e\n\u003cli\u003eY，代表分类器预测的输出：分类器的输出是10类数字（0-9），即Y=($y_0,y_1,…,y_9$)，每一维$y_i$代表图片分类为第i类数字的概率。\u003c/li\u003e\n\u003cli\u003eLabe，代表数字图片的真实标签：Label=($l_0,l_1,…,l_9$)，也是10维，但只有一个特征为1，其他都为0，即用稀疏矩阵表示数字。例如某张图片上的数字为2，则它对应的样本为(0,0,1,0,…,0)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Softmax回归-Softmax-Regression\"\u003e\u003ca href=\"#Softmax回归-Softmax-Regression\" class=\"headerlink\" title=\"Softmax回归(Softmax Regression)\"\u003e\u003c/a\u003eSoftmax回归(Softmax Regression)\u003c/h3\u003e\u003cp\u003e最简单的Softmax回归模型是先将输入层经过一个全连接层得到特征，然后直接通过\u003ccode\u003esoftmax\u003c/code\u003e函数计算多个类别的概率并输出。\u003c/p\u003e\n\u003cp\u003eX传到输出层，在激活操作之前，会乘以相应的权重 W ，并加上偏置变量 b ，如下式所示：\u003c/p\u003e\n\u003cp\u003e$$y_i = softmax(\\sum_jW_{i,j}x_j + b_i)$$\u003c/p\u003e\n\u003cp\u003e其中\u003c/p\u003e\n\u003cp\u003e$$softmax(x_i) = \\frac{e^{x_i}}{\\sum_je^{x_j}}$$\u003c/p\u003e\n\u003cp\u003e对于有 N 个类别的多分类问题，指定 N 个输出节点，N 维向量经过softmax将区间化为 N 个[0,1]范围内的实数值，分别表示该样本属于这 N 个类别的概率。此处的 $y_i$ 即对应该图片为数字 i 的预测概率。\u003c/p\u003e\n\u003cp\u003e在分类问题中，我们一般采用交叉熵损失函数（cross entropy loss），公式如下：\u003c/p\u003e\n\u003cp\u003e$$L_{cross-entropy}(label, y) = -\\sum_i label_i log(y_i)$$\u003c/p\u003e\n\u003ch3 id=\"多层感知机-Multilayer-Perceptron-MLP\"\u003e\u003ca href=\"#多层感知机-Multilayer-Perceptron-MLP\" class=\"headerlink\" title=\"多层感知机(Multilayer Perceptron, MLP)\"\u003e\u003c/a\u003e多层感知机(Multilayer Perceptron, MLP)\u003c/h3\u003e\u003cp\u003eSoftmax回归模型采用了最简单的两层神经网络，即只有输入层和输出层，因此其拟合能力有限。为了达到更好的识别效果，我们考虑在输入层和输出层中间加上若干个隐藏层。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e经过第一个隐藏层，可以得到 $H_1=ϕ(W_1X+b_1)$，其中ϕ代表激活函数，常见的有sigmoid、tanh或ReLU等函数。\u003c/li\u003e\n\u003cli\u003e经过第二个隐藏层，可以得到 $H_2=ϕ(W_2H_1+b_2)$。\u003c/li\u003e\n\u003cli\u003e最后，再经过输出层，得到的$Y=softmax(W_3H_2+b_3)$，即为最后的分类结果。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"卷积神经网络-Convolutional-Neural-Network-CNN\"\u003e\u003ca href=\"#卷积神经网络-Convolutional-Neural-Network-CNN\" class=\"headerlink\" title=\"卷积神经网络(Convolutional Neural Network, CNN)\"\u003e\u003c/a\u003e卷积神经网络(Convolutional Neural Network, CNN)\u003c/h3\u003e\u003cp\u003e在多层感知器模型中，将图像展开成一维向量输入到网络中，忽略了图像的位置和结构信息，而卷积神经网络能够更好的利用图像的结构信息。LeNet-5是一个较简单的卷积神经网络，图2显示了其结构：输入的二维图像，先经过两次卷积层到池化层，再经过全连接层，最后使用softmax分类作为输出层。\u003c/p\u003e\n\u003cp align=\"center\"\u003e\u003cimg width=\"850px\" src=\"https://githubraw.cdn.bcebos.com/PaddlePaddle/book/develop/02.recognize_digits/image/cnn.png?raw=true\"/\u003e\u003cbr/\u003e图2. LeNet-5卷积神经网络结构\u003c/p\u003e\n\n\n\u003ch2 id=\"操作过程\"\u003e\u003ca href=\"#操作过程\" class=\"headerlink\" title=\"操作过程\"\u003e\u003c/a\u003e操作过程\u003c/h2\u003e\u003cp\u003ePaddlePaddle在API中提供了自动加载MNIST数据的模块\u003ccode\u003epaddle.dataset.mnist\u003c/code\u003e。加载后的数据位于\u003ccode\u003e/home/username/.cache/paddle/dataset/mnist\u003c/code\u003e下：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e文件名称\u003c/th\u003e\n\u003cth\u003e说明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003etrain-images-idx3-ubyte\u003c/td\u003e\n\u003ctd\u003e训练数据图片，60,000条数据\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003etrain-labels-idx1-ubyte\u003c/td\u003e\n\u003ctd\u003e训练数据标签，60,000条数据\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003et10k-images-idx3-ubyte\u003c/td\u003e\n\u003ctd\u003e测试数据图片，10,000条数据\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003et10k-labels-idx1-ubyte\u003c/td\u003e\n\u003ctd\u003e测试数据标签，10,000条数据\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"Fluid-API-概述\"\u003e\u003ca href=\"#Fluid-API-概述\" class=\"headerlink\" title=\"Fluid API 概述\"\u003e\u003c/a\u003eFluid API 概述\u003c/h3\u003e\u003cp\u003eFluid API是最新的 PaddlePaddle API，它在不牺牲性能的情况下简化了模型配置，建议使用。\u003c/p\u003e\n\u003cp\u003e下面是 Fluid API 中几个重要概念的概述：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003einference_program\u003c/code\u003e：指定如何从数据输入中获得预测的函数， 这是指定网络流的地方。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etrain_program\u003c/code\u003e：指定如何从 \u003ccode\u003einference_program\u003c/code\u003e 和标签值中获取 \u003ccode\u003eloss\u003c/code\u003e 的函数， 这是指定损失计算的地方。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eoptimizer_func\u003c/code\u003e: 指定优化器配置的函数，优化器负责减少损失并驱动训练，Paddle 支持多种不同的优化器。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e加载 PaddlePaddle 的 Fluid API 包。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e os\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e PIL \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Image \u003cspan class=\"comment\"\u003e# 导入图像处理模块\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e plt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e numpy\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e paddle \u003cspan class=\"comment\"\u003e# 导入paddle模块\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e paddle.fluid \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e fluid\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"Program-Functions-配置\"\u003e\u003ca href=\"#Program-Functions-配置\" class=\"headerlink\" title=\"Program Functions 配置\"\u003e\u003c/a\u003e\u003cstrong\u003eProgram Functions 配置\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003e我们需要设置 \u003ccode\u003einference_program\u003c/code\u003e 函数。下面演示三个不同的分类器，每个分类器都定义为 Python 函数。 我们需要将图像数据输入到分类器中。Paddle 为读取数据提供了一个特殊的层 \u003ccode\u003efluid.data\u003c/code\u003e 层。 让我们创建一个数据层来读取图像并将其连接到分类网络。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSoftmax回归：只通过一层简单的以softmax为激活函数的全连接层，就可以得到分类的结果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003esoftmax_regression\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    定义softmax分类器：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        一个以softmax为激活函数的全连接层\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    Return:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        predict_image -- 分类的结果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 输入的原始图像数据，大小为28*28*1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    img = fluid.data(name=\u003cspan class=\"string\"\u003e\u0026#39;img\u0026#39;\u003c/span\u003e, shape=[\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e], dtype=\u003cspan class=\"string\"\u003e\u0026#39;float32\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 以softmax为激活函数的全连接层，输出层的大小必须为数字的个数10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    predict = fluid.layers.fc(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        input=img, size=\u003cspan class=\"number\"\u003e10\u003c/span\u003e, act=\u003cspan class=\"string\"\u003e\u0026#39;softmax\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e predict\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e多层感知器：下面代码实现了一个含有两个隐藏层（即全连接层）的多层感知器。其中两个隐藏层的激活函数均采用ReLU，输出层的激活函数用Softmax。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003emultilayer_perceptron\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    定义多层感知机分类器：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        含有两个隐藏层（全连接层）的多层感知器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        其中前两个隐藏层的激活函数采用 ReLU，输出层的激活函数用 Softmax\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    Return:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        predict_image -- 分类的结果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 输入的原始图像数据，大小为28*28*1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    img = fluid.data(name=\u003cspan class=\"string\"\u003e\u0026#39;img\u0026#39;\u003c/span\u003e, shape=[\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e], dtype=\u003cspan class=\"string\"\u003e\u0026#39;float32\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 第一个全连接层，激活函数为ReLU\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    hidden = fluid.layers.fc(input=img, size=\u003cspan class=\"number\"\u003e200\u003c/span\u003e, act=\u003cspan class=\"string\"\u003e\u0026#39;relu\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 第二个全连接层，激活函数为ReLU\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    hidden = fluid.layers.fc(input=hidden, size=\u003cspan class=\"number\"\u003e200\u003c/span\u003e, act=\u003cspan class=\"string\"\u003e\u0026#39;relu\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 以softmax为激活函数的全连接输出层，输出层的大小必须为数字的个数10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    prediction = fluid.layers.fc(input=hidden, size=\u003cspan class=\"number\"\u003e10\u003c/span\u003e, act=\u003cspan class=\"string\"\u003e\u0026#39;softmax\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e prediction\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cul\u003e\n\u003cli\u003e卷积神经网络LeNet-5: 输入的二维图像，首先经过两次卷积层到池化层，再经过全连接层，最后使用以softmax为激活函数的全连接层作为输出层。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003econvolutional_neural_network\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    定义卷积神经网络分类器：\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        输入的二维图像，经过两个卷积-池化层，使用以softmax为激活函数的全连接层作为输出层\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    Return:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        predict -- 分类的结果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 输入的原始图像数据，大小为28*28*1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    img = fluid.data(name=\u003cspan class=\"string\"\u003e\u0026#39;img\u0026#39;\u003c/span\u003e, shape=[\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e], dtype=\u003cspan class=\"string\"\u003e\u0026#39;float32\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 第一个卷积-池化层\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 使用20个5*5的滤波器，池化大小为2，池化步长为2，激活函数为Relu\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    conv_pool_1 = fluid.nets.simple_img_conv_pool(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        input=img,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        filter_size=\u003cspan class=\"number\"\u003e5\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        num_filters=\u003cspan class=\"number\"\u003e20\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pool_size=\u003cspan class=\"number\"\u003e2\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pool_stride=\u003cspan class=\"number\"\u003e2\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        act=\u003cspan class=\"string\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    conv_pool_1 = fluid.layers.batch_norm(conv_pool_1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 第二个卷积-池化层\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 使用50个5*5的滤波器，池化大小为2，池化步长为2，激活函数为Relu\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    conv_pool_2 = fluid.nets.simple_img_conv_pool(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        input=conv_pool_1,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        filter_size=\u003cspan class=\"number\"\u003e5\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        num_filters=\u003cspan class=\"number\"\u003e50\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pool_size=\u003cspan class=\"number\"\u003e2\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pool_stride=\u003cspan class=\"number\"\u003e2\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        act=\u003cspan class=\"string\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 以softmax为激活函数的全连接输出层，输出层的大小必须为数字的个数10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    prediction = fluid.layers.fc(input=conv_pool_2, size=\u003cspan class=\"number\"\u003e10\u003c/span\u003e, act=\u003cspan class=\"string\"\u003e\u0026#39;softmax\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e prediction\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"Train-Program-配置\"\u003e\u003ca href=\"#Train-Program-配置\" class=\"headerlink\" title=\"Train Program 配置\"\u003e\u003c/a\u003e\u003cstrong\u003eTrain Program 配置\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003e然后我们需要设置训练程序 \u003ccode\u003etrain_program\u003c/code\u003e。它首先从分类器中进行预测。 在训练期间，它将从预测中计算 \u003ccode\u003eavg_cost\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e注意: 训练程序应该返回一个数组，第一个返回参数必须是 \u003ccode\u003eavg_cost\u003c/code\u003e。训练器使用它来计算梯度。\u003c/p\u003e\n\u003cp\u003e请随意修改代码，测试 Softmax 回归 \u003ccode\u003esoftmax_regression\u003c/code\u003e, \u003ccode\u003eMLP\u003c/code\u003e 和 卷积神经网络 \u003ccode\u003econvolutional neural network\u003c/code\u003e 分类器之间的不同结果。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003etrain_program\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    配置train_program\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    Return:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        predict -- 分类的结果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        avg_cost -- 平均损失\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        acc -- 分类的准确率\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 标签层，名称为label,对应输入图片的类别标签\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    label = fluid.data(name=\u003cspan class=\"string\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e, shape=[\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e], dtype=\u003cspan class=\"string\"\u003e\u0026#39;int64\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# predict = softmax_regression() # 取消注释将使用 Softmax回归\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# predict = multilayer_perceptron() # 取消注释将使用 多层感知器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    predict = convolutional_neural_network() \u003cspan class=\"comment\"\u003e# 取消注释将使用 LeNet5卷积神经网络\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 使用类交叉熵函数计算predict和label之间的损失函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cost = fluid.layers.cross_entropy(input=predict, label=label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 计算平均损失\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    avg_cost = fluid.layers.mean(cost)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 计算分类准确率\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    acc = fluid.layers.accuracy(input=predict, label=label)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e predict, [avg_cost, acc]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"Optimizer-Function-配置\"\u003e\u003ca href=\"#Optimizer-Function-配置\" class=\"headerlink\" title=\"Optimizer Function 配置\"\u003e\u003c/a\u003e\u003cstrong\u003eOptimizer Function 配置\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003e在下面的 \u003ccode\u003eAdam optimizer\u003c/code\u003e，\u003ccode\u003elearning_rate\u003c/code\u003e 是学习率，它的大小与网络的训练收敛速度有关系。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eoptimizer_program\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e fluid.optimizer.Adam(learning_rate=\u003cspan class=\"number\"\u003e0.001\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"数据集-Feeders-配置\"\u003e\u003ca href=\"#数据集-Feeders-配置\" class=\"headerlink\" title=\"数据集 Feeders 配置\"\u003e\u003c/a\u003e\u003cstrong\u003e数据集 Feeders 配置\u003c/strong\u003e\u003c/h4\u003e\u003cp\u003e下一步，我们开始训练过程。\u003ccode\u003epaddle.dataset.mnist.train()\u003c/code\u003e和\u003ccode\u003epaddle.dataset.mnist.test()\u003c/code\u003e分别做训练和测试数据集。这两个函数各自返回一个reader——PaddlePaddle中的reader是一个Python函数，每次调用的时候返回一个Python yield generator。\u003c/p\u003e\n\u003cp\u003e下面shuffle是一个reader decorator，它接受一个reader A，返回另一个reader B。reader B 每次读入\u003ccode\u003ebuffer_size\u003c/code\u003e条训练数据到一个buffer里，然后随机打乱其顺序，并且逐条输出。\u003c/p\u003e\n\u003cp\u003ebatch是一个特殊的decorator，它的输入是一个reader，输出是一个batched reader。在PaddlePaddle里，一个reader每次yield一条训练数据，而一个batched reader每次yield一个minibatch。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 一个minibatch中有64个数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eBATCH_SIZE = \u003cspan class=\"number\"\u003e64\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 每次读取训练集中的500个数据并随机打乱，传入batched reader中，batched reader 每次 yield 64个数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etrain_reader = paddle.batch(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        paddle.reader.shuffle(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            paddle.dataset.mnist.train(), buf_size=\u003cspan class=\"number\"\u003e500\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        batch_size=BATCH_SIZE)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 读取测试集的数据，每次 yield 64个数据\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etest_reader = paddle.batch(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            paddle.dataset.mnist.test(), batch_size=BATCH_SIZE)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\u003ch4 id=\"构建训练过程\"\u003e\u003ca href=\"#构建训练过程\" class=\"headerlink\" title=\"构建训练过程\"\u003e\u003c/a\u003e构建训练过程\u003c/h4\u003e\u003cp\u003e现在，我们需要构建一个训练过程。将使用到前面定义的训练程序 train_program, place 和优化器 optimizer,并包含训练迭代、检查训练期间测试误差以及保存所需要用来预测的模型参数。\u003c/p\u003e\n\u003ch5 id=\"Event-Handler-配置\"\u003e\u003ca href=\"#Event-Handler-配置\" class=\"headerlink\" title=\"Event Handler 配置\"\u003e\u003c/a\u003e\u003cstrong\u003eEvent Handler 配置\u003c/strong\u003e\u003c/h5\u003e\u003cp\u003e我们可以在训练期间通过调用一个handler函数来监控训练进度。 我们将在这里演示两个 event_handler 程序。请随意修改 Jupyter Notebook ，看看有什么不同。\u003c/p\u003e\n\u003cp\u003eevent_handler 用来在训练过程中输出训练结果\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eevent_handler\u003c/span\u003e\u003cspan class=\"params\"\u003e(pass_id, batch_id, cost)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 打印训练的中间结果，训练轮次，batch数，损失函数\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#34;Pass %d, Batch %d, Cost %f\u0026#34;\u003c/span\u003e % (pass_id,batch_id, cost))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e paddle.utils.plot \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Ploter\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etrain_prompt = \u003cspan class=\"string\"\u003e\u0026#34;Train cost\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etest_prompt = \u003cspan class=\"string\"\u003e\u0026#34;Test cost\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecost_ploter = Ploter(train_prompt, test_prompt)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 将训练过程绘图表示\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eevent_handler_plot\u003c/span\u003e\u003cspan class=\"params\"\u003e(ploter_title, step, cost)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cost_ploter.append(ploter_title, step, cost)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    cost_ploter.plot()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003ccode\u003eevent_handler_plot\u003c/code\u003e 可以用来在训练过程中画图如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://paddlepaddle.org.cn/documentation/docs/zh/_images/train_and_test.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch5 id=\"开始训练\"\u003e\u003ca href=\"#开始训练\" class=\"headerlink\" title=\"开始训练\"\u003e\u003c/a\u003e\u003cstrong\u003e开始训练\u003c/strong\u003e\u003c/h5\u003e\u003cp\u003e可以加入我们设置的 \u003ccode\u003eevent_handler\u003c/code\u003e 和 \u003ccode\u003edata reader\u003c/code\u003e，然后就可以开始训练模型了。 设置一些运行需要的参数，配置数据描述 \u003ccode\u003efeed_order\u003c/code\u003e 用于将数据目录映射到 \u003ccode\u003etrain_program\u003c/code\u003e 创建一个反馈训练过程中误差的\u003ccode\u003etrain_test\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e定义网络结构：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 该模型运行在单个CPU上\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003euse_cuda = \u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e \u003cspan class=\"comment\"\u003e# 如想使用GPU，请设置为 True\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eplace = fluid.CUDAPlace(\u003cspan class=\"number\"\u003e0\u003c/span\u003e) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e use_cuda \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e fluid.CPUPlace()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 调用train_program 获取预测值，损失值，\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprediction, [avg_loss, acc] = train_program()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 输入的原始图像数据，名称为img，大小为28*28*1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 标签层，名称为label,对应输入图片的类别标签\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 告知网络传入的数据分为两部分，第一部分是img值，第二部分是label值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efeeder = fluid.DataFeeder(feed_list=[\u003cspan class=\"string\"\u003e\u0026#39;img\u0026#39;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e], place=place)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 选择Adam优化器\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eoptimizer = optimizer_program()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eoptimizer.minimize(avg_loss)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e设置训练过程的超参：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ePASS_NUM = \u003cspan class=\"number\"\u003e5\u003c/span\u003e \u003cspan class=\"comment\"\u003e#训练5轮\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eepochs = [epoch_id \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e epoch_id \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e range(PASS_NUM)]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 将模型参数存储在名为 save_dirname 的文件中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esave_dirname = \u003cspan class=\"string\"\u003e\u0026#34;recognize_digits.inference.model\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003etrain_test\u003c/span\u003e\u003cspan class=\"params\"\u003e(train_test_program,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003e                   train_test_feed, train_test_reader)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 将分类准确率存储在acc_set中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    acc_set = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 将平均损失存储在avg_loss_set中\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    avg_loss_set = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 将测试 reader yield 出的每一个数据传入网络中进行训练\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e test_data \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e train_test_reader():\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        acc_np, avg_loss_np = exe.run(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            program=train_test_program,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            feed=train_test_feed.feed(test_data),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            fetch_list=[acc, avg_loss])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        acc_set.append(float(acc_np))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        avg_loss_set.append(float(avg_loss_np))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 获得测试数据上的准确率和损失值\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    acc_val_mean = numpy.array(acc_set).mean()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    avg_loss_val_mean = numpy.array(avg_loss_set).mean()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 返回平均损失值，平均准确率\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e avg_loss_val_mean, acc_val_mean\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e创建执行器：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eexe = fluid.Executor(place)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eexe.run(fluid.default_startup_program())\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e设置 main_program 和 test_program ：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emain_program = fluid.default_main_program()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etest_program = fluid.default_main_program().clone(for_test=\u003cspan class=\"literal\"\u003eTrue\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e开始训练：\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003elists = []\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003estep = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efor\u003c/span\u003e epoch_id \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e epochs:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e step_id, data \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e enumerate(train_reader()):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        metrics = exe.run(main_program,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                          feed=feeder.feed(data),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                          fetch_list=[avg_loss, acc])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e step % \u003cspan class=\"number\"\u003e10\u003c/span\u003e == \u003cspan class=\"number\"\u003e0\u003c/span\u003e: \u003cspan class=\"comment\"\u003e#每训练100次 打印一次log\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            event_handler_plot(train_prompt, step, metrics[\u003cspan class=\"number\"\u003e0\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        step += \u003cspan class=\"number\"\u003e1\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 测试每个epoch的分类效果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    avg_loss_val, acc_val = train_test(train_test_program=test_program,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                      train_test_reader=test_reader,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                      train_test_feed=feeder)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    event_handler_plot(test_prompt, step, metrics[\u003cspan class=\"number\"\u003e0\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    lists.append((epoch_id, avg_loss_val, acc_val))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 保存训练好的模型参数用于预测\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e save_dirname \u003cspan class=\"keyword\"\u003eis\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fluid.io.save_inference_model(save_dirname,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                      [\u003cspan class=\"string\"\u003e\u0026#34;img\u0026#34;\u003c/span\u003e], [prediction], exe,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                      model_filename=\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                                      params_filename=\u003cspan class=\"literal\"\u003eNone\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# 选择效果最好的pass\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebest = sorted(lists, key=\u003cspan class=\"keyword\"\u003elambda\u003c/span\u003e list: float(list[\u003cspan class=\"number\"\u003e1\u003c/span\u003e]))[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;Best pass is %s, testing Avgcost is %s\u0026#39;\u003c/span\u003e % (best[\u003cspan class=\"number\"\u003e0\u003c/span\u003e], best[\u003cspan class=\"number\"\u003e1\u003c/span\u003e]))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(\u003cspan class=\"string\"\u003e\u0026#39;The classification accuracy is %.2f%%\u0026#39;\u003c/span\u003e % (float(best[\u003cspan class=\"number\"\u003e2\u003c/span\u003e]) * \u003cspan class=\"number\"\u003e100\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e训练之后，检查模型的预测准确度。用 MNIST 训练的时候，一般 softmax回归模型的分类准确率约为 92.34%，多层感知器为97.66%，卷积神经网络可以达到 99.20%。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e注：在aistudio中ploter和print存在原生bug，取消print后ploter方可使用\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"应用模型\"\u003e\u003ca href=\"#应用模型\" class=\"headerlink\" title=\"应用模型\"\u003e\u003c/a\u003e应用模型\u003c/h3\u003e\u003cp\u003e可以使用训练好的模型对手写体数字图片进行分类，下面程序展示了如何使用训练好的模型进行推断。\u003c/p\u003e\n\u003ch4 id=\"生成预测输入数据\"\u003e\u003ca href=\"#生成预测输入数据\" class=\"headerlink\" title=\"生成预测输入数据\"\u003e\u003c/a\u003e生成预测输入数据\u003c/h4\u003e\u003cp\u003e\u003ccode\u003einfer_3.png\u003c/code\u003e 是数字 3 的一个示例图像。把它变成一个 numpy 数组以匹配数据feed格式。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eload_image\u003c/span\u003e\u003cspan class=\"params\"\u003e(file)\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 读取图片文件，并将它转成灰度图\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    im = Image.open(file).convert(\u003cspan class=\"string\"\u003e\u0026#39;L\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 将输入图片调整为 28*28 的高质量图\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    im = im.resize((\u003cspan class=\"number\"\u003e28\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e), Image.ANTIALIAS)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 将图片转换为numpy\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    im = numpy.array(im).reshape(\u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e, \u003cspan class=\"number\"\u003e28\u003c/span\u003e).astype(numpy.float32)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 对数据作归一化处理\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    im = im / \u003cspan class=\"number\"\u003e255.0\u003c/span\u003e * \u003cspan class=\"number\"\u003e2.0\u003c/span\u003e - \u003cspan class=\"number\"\u003e1.0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e im\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etensor_img = load_image(\u003cspan class=\"string\"\u003e\u0026#39;work/infer_3.png\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch4 id=\"Inference-创建及预测\"\u003e\u003ca href=\"#Inference-创建及预测\" class=\"headerlink\" title=\"Inference 创建及预测\"\u003e\u003c/a\u003eInference 创建及预测\u003c/h4\u003e\u003cp\u003e通过\u003ccode\u003eload_inference_model\u003c/code\u003e来设置网络和经过训练的参数。我们可以简单地插入在此之前定义的分类器。\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003einference_scope = fluid.core.Scope()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ewith\u003c/span\u003e fluid.scope_guard(inference_scope):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 使用 fluid.io.load_inference_model 获取 inference program desc,\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# feed_target_names 用于指定需要传入网络的变量名\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# fetch_targets 指定希望从网络中fetch出的变量名\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [inference_program, feed_target_names,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     fetch_targets] = fluid.io.load_inference_model(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e     save_dirname, exe, \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e, \u003cspan class=\"literal\"\u003eNone\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 将feed构建成字典 {feed_target_name: feed_target_data}\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 结果将包含一个与fetch_targets对应的数据列表\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    results = exe.run(inference_program,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            feed={feed_target_names[\u003cspan class=\"number\"\u003e0\u003c/span\u003e]: tensor_img},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                            fetch_list=fetch_targets)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    lab = numpy.argsort(results)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# 打印 infer_3.png 这张图片的预测结果\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    img=Image.open(\u003cspan class=\"string\"\u003e\u0026#39;work/infer_3.png\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    plt.imshow(img)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u003cspan class=\"string\"\u003e\u0026#34;Inference result of work/infer_3.png is: %d\u0026#34;\u003c/span\u003e % lab[\u003cspan class=\"number\"\u003e0\u003c/span\u003e][\u003cspan class=\"number\"\u003e0\u003c/span\u003e][\u003cspan class=\"number\"\u003e-1\u003c/span\u003e])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n      \u003cdiv class=\"tags\"\u003e\n        \u003cspan\u003eTags:\u003c/span\u003e\n        \n  \u003ca href=\"/tags#飞桨 深度学习 神经网络\"\u003e\n    \u003cspan class=\"tag-code\"\u003e飞桨 深度学习 神经网络\u003c/span\u003e\n  \u003c/a\u003e\n\n      \u003c/div\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/01/09/Python%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python全栈工程师\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/01/14/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%8F%98%E9%87%8F/\"\u003e\n        \n          数据准备过程中如何创建虚拟变量\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-01-11T00:00:00Z",
  "Author": "老齐教室"
}