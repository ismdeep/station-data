{
  "Source": "qiwsir.github.io",
  "Title": "不写爬虫，也能读取网页的表格数据",
  "Link": "https://qiwsir.github.io/2020/09/17/pandas-readhtml/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e不写爬虫，也能读取网页的表格数据\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-09-17\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003ch2 id=\"引言\"\u003e\u003ca href=\"#引言\" class=\"headerlink\" title=\"引言\"\u003e\u003c/a\u003e引言\u003c/h2\u003e\u003cp\u003epandas中的\u003ccode\u003eread_html()\u003c/code\u003e函数是将HTML的表格转换为DataFrame的一种快速方便的方法，这个函数对于快速合并来自不同网页上的表格非常有用。 在合并时，不需要用爬虫获取站点的HTML。但是，在分析数据之前，数据的清理和格式化可能会遇到一些问题。在本文中，我将讨论如何使用pandas的\u003ccode\u003eread_html()\u003c/code\u003e来读取和清理来自维基百科的多个HTML表格，以便对它们做进一步的数值分析。\u003c/p\u003e\n\u003ch2 id=\"基本方法\"\u003e\u003ca href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"\u003e\u003c/a\u003e基本方法\u003c/h2\u003e\u003cp\u003e在第一个例子中，我们将尝试解析一个表格。这个表格来自维基百科页面中明尼苏达州的政治部分(\u003ca href=\"https://en.wikipedia.org/wiki/Minnesota)。\" target=\"_blank\" rel=\"noopener\"\u003ehttps://en.wikipedia.org/wiki/Minnesota)。\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2020-9-16/1600236785993-r1.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eread_html\u003c/code\u003e的基本用法非常简单，在许多维基百科页面上都能运行良好，因为表格并不复杂。首先，要导入一些库 ，在后面的数据清理中都会用到：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport numpy as np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport matplotlib.pyplot as plt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom unicodedata import normalize\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etable_MN = pd.read_html(\u0026#39;https://en.wikipedia.org/wiki/Minnesota\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e特别注意，上面代码中得到的\u003ccode\u003etable_MN\u003c/code\u003e是页面上所有表格的列表：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprint(f\u0026#39;Total tables: {len(table_MN)}\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTotal tables: 38\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e很难在38张表格中找到你需要的那张，要想容易地找出来，可以设置\u003ccode\u003ematch\u003c/code\u003e参数，如下面的代码所示，用\u003ccode\u003emathch\u003c/code\u003e参数指明要选择标题为“Election results from statewide races”的那张表格。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etable_MN = pd.read_html(\u0026#39;https://en.wikipedia.org/wiki/Minnesota\u0026#39;, match=\u0026#39;Election results from statewide races\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elen(table_MN)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf = table_MN[0]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf.head()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2020-9-16/1600237073054-r2.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e显然，用Pandas能够很容易地读取到了表格，此外，从上面的输出结果可以看出，跨多行的\u003ccode\u003eYear\u003c/code\u003e列也得到了很好地处理，这要比自己写爬虫工具专门收集数据简单多了。\u003c/p\u003e\n\u003cp\u003e总的来说，这样的操作看起来还不错，然而，如果用\u003ccode\u003edf.info()\u003c/code\u003e来查看数据类型:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRangeIndex: 24 entries, 0 to 23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eData columns (total 5 columns):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#   Column  Non-Null Count  Dtype\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e---  ------  --------------  -----\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0   Year    24 non-null     int64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1   Office  24 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2   GOP     24 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3   DFL     24 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4   Others  24 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edtypes: int64(1), object(4)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ememory usage: 1.1+ KB\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果想对这些数据进行分析，需要将\u003ccode\u003eGOP\u003c/code\u003e、\u003ccode\u003eDFL\u003c/code\u003e和其他类型为\u003ccode\u003eobject\u003c/code\u003e的列转换为数值。\u003c/p\u003e\n\u003cp\u003e如果这么操作：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf[\u0026#39;GOP\u0026#39;].astype(\u0026#39;float\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e系统就会报错：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eValueError: could not convert string to float: \u0026#39;42.4%\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e最有可能的罪魁祸首是\u003ccode\u003e%\u003c/code\u003e，下面用pandas的\u003ccode\u003ereplace()\u003c/code\u003e函数删除它。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf[\u0026#39;GOP\u0026#39;].replace({\u0026#39;%\u0026#39;:\u0026#39;\u0026#39;}, regex=True).astype(\u0026#39;float\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e效果看起来不错：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e0     42.4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1     36.2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2     42.4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3     44.9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;...\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21    63.3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22    49.1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23    31.9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: GOP, dtype: float64\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e注意，必须使用参数\u003ccode\u003eregex=True\u003c/code\u003e才能完美地删除，因为\u003ccode\u003e%\u003c/code\u003e是字符串的一部分，而不是完整的字符串值。\u003c/p\u003e\n\u003cp\u003e现在，我们可以用\u003ccode\u003epd.to_numeric()\u003c/code\u003e和\u003ccode\u003eapply()\u003c/code\u003e替换所有的\u003ccode\u003e%\u003c/code\u003e值，并将其转换为数字。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf = df.replace({\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;}, regex=True)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf[[\u0026#39;GOP\u0026#39;, \u0026#39;DFL\u0026#39;, \u0026#39;Others\u0026#39;]] = df[[\u0026#39;GOP\u0026#39;, \u0026#39;DFL\u0026#39;, \u0026#39;Others\u0026#39;]].apply(pd.to_numeric)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf.info()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRangeIndex: 24 entries, 0 to 23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eData columns (total 5 columns):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#   Column  Non-Null Count  Dtype\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e---  ------  --------------  -----\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0   Year    24 non-null     int64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1   Office  24 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2   GOP     24 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3   DFL     24 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4   Others  24 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edtypes: float64(3), int64(1), object(1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ememory usage: 1.1+ KB\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf.head()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e输出：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2020-9-16/1600237869486-r3.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e这个基本过程进展顺利，下面看一个有点难度的。\u003c/p\u003e\n\u003ch2 id=\"高级的数据清理方法\"\u003e\u003ca href=\"#高级的数据清理方法\" class=\"headerlink\" title=\"高级的数据清理方法\"\u003e\u003c/a\u003e高级的数据清理方法\u003c/h2\u003e\u003cp\u003e前面的例子展示了基本概念，数据清理是任何数据科学项目都不可或缺的，下面看一个有点难度的示例。在接下来的示例中继续使用维基百科，但是这些方法同样适用于其他含有表格的HTML页面。\u003c/p\u003e\n\u003cp\u003e例如读取美国GDP的数据表：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2020-9-16/1600237927753-us_gdp.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e现在，就不能用\u003ccode\u003ematch\u003c/code\u003e参数指定要获得的那个表格标题——因为这表格没有标题，但是可以将其值设置为“Nominal GDP”，这样依然能匹配到我们想要的表格。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003etable_GDP = pd.read_html(\u0026#39;https://en.wikipedia.org/wiki/Economy_of_the_United_States\u0026#39;, match=\u0026#39;Nominal GDP\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP = table_GDP[0]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP.info()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRangeIndex: 41 entries, 0 to 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eData columns (total 9 columns):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#   Column                                            Non-Null Count  Dtype\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e---  ------                                            --------------  -----\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0   Year                                              41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1   Nominal GDP(in bil. US-Dollar)                    41 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2   GDP per capita(in US-Dollar)                      41 non-null     int64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3   GDP growth(real)                                  41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4   Inflation rate(in percent)                        41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5   Unemployment (in percent)                         41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6   Budget balance(in % of GDP)[107]                  41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7   Government debt held by public(in % of GDP)[108]  41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8   Current account balance(in % of GDP)              41 non-null     object\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edtypes: float64(1), int64(1), object(7)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ememory usage: 3.0+ KB\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e不出所料，数据清理是避免不了得了。根据前面的经验，先删除\u003ccode\u003e%\u003c/code\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP[\u0026#39;GDP growth(real)\u0026#39;].replace({\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;}, regex=True).astype(\u0026#39;float\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e很遗憾，报错了：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eValueError: could not convert string to float: \u0026#39;−5.9\\xa0\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e问题的根源在于有一个隐藏字符\u003ccode\u003exa0\u003c/code\u003e，它导致了错误，它是一个特殊字符，即“non-breaking Latin1 (ISO 8859-1) space”，对应的实体是 \u003ccode\u003e\u0026amp;nbsp\u003c/code\u003e，即空格。\u003c/p\u003e\n\u003cp\u003e我所使用的一个方法是使用\u003ccode\u003ereplace\u003c/code\u003e直接替换，这种方法奏效了，但我担心它将来是否会与其他字符产生冲突。\u003c/p\u003e\n\u003cp\u003e在深入研究了Unicode这个坑之后，我决定使用\u003ccode\u003enormalize\u003c/code\u003e来清理这个值。\u003c/p\u003e\n\u003cp\u003e我还发现，在其他的一些表格的数据中也有多余的空格。于是编写了一个函数，对所有文本进行清理。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003efrom unicodedata import normalize\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef clean_normalize_whitespace(x):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if isinstance(x, str):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return normalize(\u0026#39;NFKC\u0026#39;, x).strip()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    else:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return x\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e用\u003ccode\u003eapplymap\u003c/code\u003e将这个函数用于整个DataFrame上：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP = df_GDP.applymap(clean_normalize_whitespace)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e需要注意的是：\u003ccode\u003eapplymap\u003c/code\u003e函数非常慢，所以在使用\u003ccode\u003eapplymap\u003c/code\u003e时应该慎重。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eapplymap\u003c/code\u003e函数是一个非常低效的pandas函数，不推荐你经常使用它。但在本例中，DataFrame很小，像这样的清理又很棘手，所以我认为这是一个有用的权衡。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eapplymap\u003c/code\u003e不能处理列名称，例如：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP.columns[7]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Government debt held by public(in\\xa0% of GDP)[108]\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在列的名称中有可怕的\u003ccode\u003exa0%\u003c/code\u003e。解决此问题的方法有多种，在这里还是继续使用\u003ccode\u003eclean_normalize_whitespace()\u003c/code\u003e函数，将列转换为Series对象，并使用\u003ccode\u003eapply\u003c/code\u003e来调用这个函数。有点麻烦了，不知道pandas在以后的版本是否会考虑到这里的问题，让操作简化。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP.columns = df_GDP.columns.to_series().apply(clean_normalize_whitespace)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP.columns[7]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Government debt held by public(in % of GDP)[108]\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在我们清理掉了一些隐藏的字符。下一步会怎样呢？\u003c/p\u003e\n\u003cp\u003e再试一次：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP[\u0026#39;GDP growth(real)\u0026#39;].replace({\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;}, regex=True).astype(\u0026#39;float\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eValueError: could not convert string to float: \u0026#39;−5.9 \u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e真的很棘手。如果你仔细观察，你可能会发现：\u003ccode\u003e−\u003c/code\u003e和\u003ccode\u003e-\u003c/code\u003e看起来有点不同，但真的很难看出，在Unicode中，破折号和减号之间实际上是有区别的。\u003c/p\u003e\n\u003cp\u003e幸运的是，我们也可以使用\u003ccode\u003ereplace\u003c/code\u003e来清理：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP[\u0026#39;GDP growth(real)\u0026#39;].replace({\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;−\u0026#39;: \u0026#39;-\u0026#39;}, regex=True).astype(\u0026#39;float\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0    -5.9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1     2.2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2     3.0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3     2.3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4     1.7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;...\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38   -1.8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39    2.6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40   -0.2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: GDP growth(real), dtype: float64\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在来关注列\u003ccode\u003eYear\u003c/code\u003e，例如表示“2020年”的值是\u003ccode\u003e2020(est)\u003c/code\u003e，需要去掉其中的\u003ccode\u003e(est)\u003c/code\u003e，还要将列转换为整数型。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf[\u0026#39;Year\u0026#39;].replace({\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;−\u0026#39;: \u0026#39;-\u0026#39;, \u0026#39;\\(est\\)\u0026#39;: \u0026#39;\u0026#39;}, regex=True).astype(\u0026#39;int\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0     2020\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1     2019\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2     2018\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3     2017\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4     2016\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;...\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40    1980\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eName: Year, dtype: int64\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在DataFrame中的各列的值，除了整数型之外，其他的是浮点数型，在转化的时候，如果使用\u003ccode\u003epd.numeric()\u003c/code\u003e虽然能够实现，但略显笨拙。我们可以使用\u003ccode\u003eastype()\u003c/code\u003e同时又不需要为每一列手动输入类型信息。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eastype()\u003c/code\u003e函数可以接受含有列名和数据类型的字典。这真的很有用，直到我写了这篇文章我才知道这一点。下面是对列与其数据类型映射字典：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecol_type = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Year\u0026#39;: \u0026#39;int\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Nominal GDP(in bil. US-Dollar)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;GDP per capita(in US-Dollar)\u0026#39;: \u0026#39;int\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;GDP growth(real)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Inflation rate(in percent)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Unemployment (in percent)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Budget balance(in % of GDP)[107]\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Government debt held by public(in % of GDP)[108]\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Current account balance(in % of GDP)\u0026#39;: \u0026#39;float\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e如果你觉得键入上面这个词典很慢，可以用下面的快捷方法。要注意，这样建立的字典，默认值为\u003ccode\u003efloat\u003c/code\u003e，还需要手动将\u003ccode\u003eYear\u003c/code\u003e对应的值修改为\u003ccode\u003eint\u003c/code\u003e：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edict.fromkeys(df_GDP.columns, \u0026#39;float\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u0026#39;Year\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Nominal GDP(in bil. US-Dollar)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;GDP per capita(in US-Dollar)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;GDP growth(real)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Inflation rate(in percent)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Unemployment (in percent)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Budget balance(in % of GDP)[107]\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Government debt held by public(in % of GDP)[108]\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;Current account balance(in % of GDP)\u0026#39;: \u0026#39;float\u0026#39;}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e再创建了一个字典，其中包含要替换的值：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eclean_dict = {\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;−\u0026#39;: \u0026#39;-\u0026#39;, \u0026#39;\\(est\\)\u0026#39;: \u0026#39;\u0026#39;}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e现在我们可以调用这个DataFrame的\u003ccode\u003ereplace\u003c/code\u003e方法，转换为所需的类型，并获得干净的数据：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003edf_GDP = df_GDP.replace(clean_dict, regex=True).replace({\u0026#39;-n/a \u0026#39;: np.nan}).astype(col_type)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP.info()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# 输出\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;pandas.core.frame.DataFrame\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eRangeIndex: 41 entries, 0 to 40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eData columns (total 9 columns):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e#   Column                                            Non-Null Count  Dtype\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e---  ------                                            --------------  -----\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e0   Year                                              41 non-null     int64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1   Nominal GDP(in bil. US-Dollar)                    41 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2   GDP per capita(in US-Dollar)                      41 non-null     int64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3   GDP growth(real)                                  41 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4   Inflation rate(in percent)                        41 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5   Unemployment (in percent)                         41 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6   Budget balance(in % of GDP)[107]                  40 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7   Government debt held by public(in % of GDP)[108]  41 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8   Current account balance(in % of GDP)              40 non-null     float64\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edtypes: float64(7), int64(2)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ememory usage: 3.0 KB\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e结果如下所示：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2020-9-16/1600238907819-r4.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e为了证明上述操作的效果，我们可以把这些数据绘制成图表：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eplt.style.use(\u0026#39;seaborn-whitegrid\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_clean.plot.line(x=\u0026#39;Year\u0026#39;, y=[\u0026#39;Inflation rate(in percent)\u0026#39;, \u0026#39;Unemployment (in percent)\u0026#39;])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cimg src=\"https://gitee.com/qiwsir/images/raw/master/2020-9-16/1600238986033-us_gdp_chart.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e如果你紧跟我的思路，可能已经注意到链式方式调用\u003ccode\u003ereplace\u003c/code\u003e的方法：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e.replace({\u0026#39;-n/a \u0026#39;: np.nan})\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\u003cp\u003e我这样做的原因是我不知道如何使用第一个字典\u003ccode\u003ereplace\u003c/code\u003e来清理\u003ccode\u003en/a\u003c/code\u003e。我认为问题的症结在于：我无法预测这些数据的清理顺序，所以不得不分两个阶段来执行替换。\u003c/p\u003e\n\u003cp\u003e如果读者有更好的方法，请不吝赐教。\u003c/p\u003e\n\u003ch2 id=\"完整的代码\"\u003e\u003ca href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"\u003e\u003c/a\u003e完整的代码\u003c/h2\u003e\u003cp\u003e最后，把上面的过程，集中用下面的代码实现。从HTML网页上的表格获取数据，并把这些数据转化为DataFrame对象。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eimport pandas as pd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eimport numpy as np\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efrom unicodedata import normalize\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edef clean_normalize_whitespace(x):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34; \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Normalize unicode characters and strip trailing spaces\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    if isinstance(x, str):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return normalize(\u0026#39;NFKC\u0026#39;, x).strip()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    else:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        return x\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Read in the Wikipedia page and get the DataFrame\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etable_GDP = pd.read_html(\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;https://en.wikipedia.org/wiki/Economy_of_the_United_States\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    match=\u0026#39;Nominal GDP\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP = table_GDP[0]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Clean up the DataFrame and Columns\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP = df_GDP.applymap(clean_normalize_whitespace)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP.columns = df_GDP.columns.to_series().apply(clean_normalize_whitespace)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Determine numeric types for each column\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecol_type = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Year\u0026#39;: \u0026#39;int\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Nominal GDP(in bil. US-Dollar)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;GDP per capita(in US-Dollar)\u0026#39;: \u0026#39;int\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;GDP growth(real)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Inflation rate(in percent)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Unemployment (in percent)\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Budget balance(in % of GDP)[107]\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Government debt held by public(in % of GDP)[108]\u0026#39;: \u0026#39;float\u0026#39;,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;Current account balance(in % of GDP)\u0026#39;: \u0026#39;float\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Values to replace\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eclean_dict = {\u0026#39;%\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;−\u0026#39;: \u0026#39;-\u0026#39;, \u0026#39;\\(est\\)\u0026#39;: \u0026#39;\u0026#39;}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# Replace values and convert to numeric values\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edf_GDP = df_GDP.replace(clean_dict, regex=True).replace({\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u0026#39;-n/a \u0026#39;: np.nan\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}).astype(col_type)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"总结\"\u003e\u003ca href=\"#总结\" class=\"headerlink\" title=\"总结\"\u003e\u003c/a\u003e总结\u003c/h2\u003e\u003cp\u003epandas的\u003ccode\u003eread_html()\u003c/code\u003e函数对于快速解析页面中的 HTML表格非常有用，尤其是维基百科页面。从HTML页面直接获得的数据，通常不会像你所需要的那样干净，并且清理各种Unicode字符可能会非常耗时。本文展示的几种技术可以用于清理数据、并将其转换为正确的数字格式。如果你需要从维基百科或其他HTML表格中获取数据，这些技巧应该可以为你节省一些时间。\u003c/p\u003e\n\u003cp\u003e参考: \u003ca href=\"https://pbpython.com/pandas-html-table.html\" target=\"_blank\" rel=\"noopener\"\u003ehttps://pbpython.com/pandas-html-table.html\u003c/a\u003e\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/09/15/python-magic-method/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python中5对必知的魔法方法\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/09/22/activative-function/\"\u003e\n        \n          激活函数的“3W”\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-09-17T00:00:00Z",
  "Author": "老齐教室"
}