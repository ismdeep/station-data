{
  "Source": "qiwsir.github.io",
  "Title": "【logistic回归】笔记",
  "Link": "https://qiwsir.github.io/2020/04/28/logistic-notebook/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e【logistic回归】笔记\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-04-28\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e回归，包括线性回归、Logistic回归\u003c/p\u003e\n\u003cp\u003e回归其实就是对已知公式的未知参数进行估计。\u003c/p\u003e\n\u003cp\u003eLogistic Regression 就是一个被logistic方程归一化后的线性回归。所得到的的值，在0~1范围内，但不是数学中定义的概率值，称之为“可能性”，即得1或者得0的相对可能性。\u003c/p\u003e\n\u003cp\u003e逻辑回归不像朴素贝叶斯一样需要满足条件独立假设（因为它没有求后验概率）。但每个feature的贡献是独立计算的，即LR是不会自动帮你combine 不同的features产生新feature的 (时刻不能抱有这种幻想，那是决策树,LSA, pLSA,  LDA或者你自己要干的事情)。举个例子，如果你需要TF\u003cem\u003eIDF这样的feature，就必须明确的给出来，若仅仅分别给出两维 TF 和 IDF  是不够的，那样只会得到类似 a\u003c/em\u003eTF + b\u003cem\u003eIDF 的结果，而不会有 c\u003c/em\u003eTF*IDF 的效果。\u003c/p\u003e\n\u003cp\u003eLogistic函数/Sigmoid函数（有一种观点。Sigmoid函数式形状像S的函数，画出来像S的函数不止一个，比如Logistic函数式，probit函数也是）\u003c/p\u003e\n\u003cp\u003e$$f(x)= \\frac{1}{1+e^{-k(x-x_0)}}$$\u003c/p\u003e\n\u003cp\u003e$x_0$ 表示函数曲线的中心（sigmoid midpoint），k是曲线的坡度。\u003c/p\u003e\n\u003cp\u003e更一般地，写成：\u003c/p\u003e\n\u003cp\u003e$$f(X)=\\frac{1}{1+e^{-\\theta^TX}}$$\u003c/p\u003e\n\u003cp\u003e其中：$\\theta$ 是参数向量，$X$ 是自变量。\u003c/p\u003e\n\u003cp\u003e$$\\theta^TX=\\theta_0x_0 + \\theta_1x_1+\\cdots+\\theta_nx_n=\\sum_{i=0}^{n}\\theta_ix_i$$\u003c/p\u003e\n\u003cp\u003e上述加权求和的结果在$(-\\infty, \\infty)$之间，为了能表示预测的概率，我们希望把输出值限制在(0,1) 之间，而不是 (−∞,+∞) 。所以，这时，logistic函数就出场了。这个函数是由 Pierre François Verhulst（皮埃尔·弗朗索瓦·韦吕勒）在1844～1845年的时候给它起的名字。\u003c/p\u003e\n\u003cp\u003elogistic函数在统计学和机器学习领域应用最为广泛或者最为人熟知的肯定是逻辑斯谛回归模型了。逻辑斯谛回归（Logistic Regression，简称LR）作为一种对数线性模型（log-linear model）被广泛地应用于分类和回归场景中。\u003c/p\u003e\n\u003cp\u003e此外，logistic函数也是神经网络最为常用的激活函数，即sigmoid函数。\u003c/p\u003e\n\u003cp\u003esoftmax函数\u003c/p\u003e\n\u003cp\u003esoftmax is a generalization of logistic function that “squashes”(maps) a K -dimensional vector \u003cem\u003ez\u003c/em\u003e of arbitrary real values to a K -dimensional vector δ(z) of real values in the range (0, 1) that add up to 1.\u003c/p\u003e\n\u003cp\u003e这句话既表明了softmax函数与logistic函数的关系，也同时阐述了softmax函数的本质就是将一个K维的任意实数向量压缩\u003cstrong\u003e（映\u003c/strong\u003e射）成另一个K维的实数向量，其中向量中的每个元素取值都介于（0，1）之间。\u003c/p\u003e\n\u003cp\u003e$$\\delta(z)\u003cem\u003ej=\\frac{e^{z_j}}{\\sum\u003c/em\u003e{k=1}^{K}e^{z_k}}, j=1,2,\\cdots, K$$\u003c/p\u003e\n\u003cp\u003esoftmax函数经常用在神经网络的最后一层，作为输出层，进行多分类.\u003c/p\u003e\n\u003cp\u003esoftmax在增强学习领域内，softmax经常被用作将某个值转化为激活概率，这类情况下，softmax的公式如下\u003c/p\u003e\n\u003cp\u003e$$P_t(a)=\\frac{e^{\\frac{q_t(a)}{T}}}{\\sum_{i=1}^{n}e^{\\frac{q_t(i)}{T}}}$$\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eT\u003c/em\u003e被称为是温度参数（temperature parameter）。\u003c/p\u003e\n\u003cp\u003e当T很大时，即趋于正无穷时，所有的激活值对应的激活概率趋近于相同（激活概率差异性较小）；而当T很低时，即趋于0时，不同的激活值对应的激活概率差异也就越大。\u003c/p\u003e\n\u003cp\u003elogistic具体针对的是二分类问题，而softmax解决的是多分类问题，因此从这个角度也可以理解logistic函数是softmax函数的一个特例。\u003c/p\u003e\n\u003cp\u003e从概率角度来看logistic和softmax函数的区别。\u003c/p\u003e\n\u003cp\u003esoftmax建模使用的分布是\u003cstrong\u003e多项式分布\u003c/strong\u003e，而logistic则基于\u003cstrong\u003e伯努利分布\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003esoftmax回归进行的多分类，类与类之间是互斥的，即一个输入只能被归为一类；\u003c/p\u003e\n\u003cp\u003e多个logistic回归进行多分类，输出的类别并不是互斥的，即”苹果”这个词语既属于”水果”类也属于”3C”类别。\u003c/p\u003e\n\u003cp\u003e推导过程：\u003c/p\u003e\n\u003cp\u003e设自变量与因变量的关系是：\u003c/p\u003e\n\u003cp\u003e$$Y = \\alpha + \\beta_1X_1 + \\cdots + \\beta_nX_n + \\epsilon$$\u003c/p\u003e\n\u003cp\u003e如果 $X$ 是任意实数，但 $Y$ 是二分类数据，那么，就不能通过线性函数的方式拟合出结果。即，上式左侧是二分类数据，右侧是$(-\\infty, \\infty)$ 的值。\u003c/p\u003e\n\u003cp\u003e一种方法：可以使用分段函数（用 $z$ 表示上式左侧的计算结果）\u003c/p\u003e\n\u003cp\u003e$$Y = \\begin{cases}0, z \\lt 0\\0.5, z=0\\1,z \\gt 0\\end{cases}$$\u003c/p\u003e\n\u003cp\u003e但这个函数不是连续函数，不连续可微。\u003c/p\u003e\n\u003cp\u003e为此，要寻找连续函数，并且能够将$(-\\infty, \\infty)$ 范围的值映射到$(0,1)$之间，sigmoid函数式一个选择。\u003c/p\u003e\n\u003cp\u003e$$Y = \\frac {e^z}{1+e^z}=\\frac {e^{\\alpha + \\beta_1X_1 + \\cdots + \\beta_nX_n + \\epsilon}}{1+e^{\\alpha + \\beta_1X_1 + \\cdots + \\beta_nX_n + \\epsilon}}$$\u003c/p\u003e\n\u003cp\u003e则：\u003c/p\u003e\n\u003cp\u003e$$\\frac{Y}{1-Y}=e^{\\alpha + \\beta_1X_1 + \\cdots + \\beta_nX_n + \\epsilon}$$\u003c/p\u003e\n\u003cp\u003e两边取自然对数\u003c/p\u003e\n\u003cp\u003e$$ln(\\frac{Y}{1-Y})=\\alpha + \\beta_1X_1 + \\cdots + \\beta_nX_n + \\epsilon$$\u003c/p\u003e\n\u003cp\u003e上式右边，就是普通的回归表达式。\u003c/p\u003e\n\u003cp\u003e左边：$\\frac{Y}{1-Y}$ 代表结果的两种状态的比率（odds），取自然对数后，叫做对数比率。所以，logistic回归，称为对数比率回归。\u003c/p\u003e\n\u003cp\u003e下面，通过“最大似然法”（maximum likehuood）确定上式右侧系数。\u003c/p\u003e\n\u003cp\u003e当初引进这个词汇时翻译的过于玄乎，导致很多人看不懂。其实，似然，就是“可能”的意思，最大似然，也就是最大可能。\u003c/p\u003e\n\u003cp\u003e要找到的最优β，它们必须满足一个条件，\u003cstrong\u003e就是使我们当前获得的数据出现的可能性最大\u003c/strong\u003e！举个例子，假如小明认为β=1，在他给出的β下，当前数据出现的可能性只有0.3，小花给出的β为2，在她给出的β下，当前数据出现的可能性为0.6。也就是说，在当前的数据已经出现的情况下，小花的β更加合理！\u003c/p\u003e\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/04/28/web-stack-second/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          剖析Web技术栈（二）\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/04/29/web-stack-third/\"\u003e\n        \n          剖析Web技术栈（三）\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-04-28T00:00:00Z",
  "Author": "老齐教室"
}