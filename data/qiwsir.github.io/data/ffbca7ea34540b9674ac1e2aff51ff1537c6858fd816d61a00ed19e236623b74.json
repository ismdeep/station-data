{
  "Source": "qiwsir.github.io",
  "Title": "初学者专题：变量和赋值",
  "Link": "https://qiwsir.github.io/2020/05/22/Variables-and-Assignment/",
  "Content": "\u003carticle class=\"post-article\"\u003e\n    \u003ch2\u003e初学者专题：变量和赋值\u003c/h2\u003e\n    \u003cp class=\"post-date\"\u003e2020-05-22\u003c/p\u003e\n    \u003csection class=\"markdown-content\"\u003e\u003cp\u003e作者：老齐\u003c/p\u003e\n\u003cp\u003e对于初学Python者，除了看书（《跟老齐学Python：轻松入门》或者《Python大学实用教程》，均为电子工业出版社出版）、或者看视频（网易云课堂、CSDN上均有老齐的视频课程），还要进行专题性总结。比如本文，就是要帮助学习者，对\u003cstrong\u003e变量\u003c/strong\u003e和\u003cstrong\u003e赋值\u003c/strong\u003e这两个非常基本、几乎无处不在的内容作为一个专题进行总结。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/%E8%BD%BB%E6%9D%BE%E5%85%A5%E9%97%A8_20200122130623.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"对象\"\u003e\u003ca href=\"#对象\" class=\"headerlink\" title=\"对象\"\u003e\u003c/a\u003e对象\u003c/h2\u003e\u003cp\u003ePython语言既能够实现面向过程，也能够实现面向对象编程。而面向对象，是当前软件开发的主流编程思想。在我的两本书中，我都强调了面向对象——不要认为这种编程思想不适用于初学者，更不要认为它有多难。\u003c/p\u003e\n\u003cp\u003e并且，Python语言中已经有这样一个明确的概念：\u003cstrong\u003e万物皆对象\u003c/strong\u003e，不论是数字、整数、函数、类，等等，都是对象。\u003c/p\u003e\n\u003cp\u003ePython语言中的对象，可以理解为语言中的“实际物体”，它一经创建，存储器中就开辟出一个空间保存它，因而也就有了一个内存地址。\u003c/p\u003e\n\u003cp\u003e比如：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(3.14)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4312572400\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这里返回的十进制数字，就代表了存储器为浮点数对象\u003ccode\u003e3.14\u003c/code\u003e分配的内存地址。\u003c/p\u003e\n\u003cp\u003e另外，Python中的任何对象都有类型。在Python中，类型就是类。在Python创立之初，这两个没有统一，后来将“类”和“类型”统一了起来，这样我们就可以把每一个具体的数据，看成是某个“类”的实例，而那个“类”就是这个实例的“类型”。\u003c/p\u003e\n\u003cp\u003e比如：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; type(3.14)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;float\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e返回值显示，\u003ccode\u003e3.14\u003c/code\u003e是\u003ccode\u003efloat\u003c/code\u003e类的实例，也就是\u003ccode\u003efloat\u003c/code\u003e类型。\u003c/p\u003e\n\u003cp\u003e下面自定义一个类，然后创建实例，再看看那个实例的类型：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; class Book:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     book = \u0026#34;跟老齐学Python：轻松入门\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_book = Book()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; type(my_book)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026lt;class \u0026#39;__main__.Book\u0026#39;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e除了返回的类的具体内容不同之外，\u003ccode\u003eBook()\u003c/code\u003e（注意，这是对象，\u003ccode\u003emy_book\u003c/code\u003e引用了这个对象，所以，也可以说是\u003ccode\u003emy_book\u003c/code\u003e，对此的详细说明请阅读本文后续内容）和\u003ccode\u003e3.14\u003c/code\u003e都是所对应类的实例——返回值格式相同，因此它们也都是所对应类的那种“类型”。\u003c/p\u003e\n\u003ch2 id=\"变量\"\u003e\u003ca href=\"#变量\" class=\"headerlink\" title=\"变量\"\u003e\u003c/a\u003e变量\u003c/h2\u003e\u003cp\u003e在Python中使用变量，非常方便，可以用“召之即来挥之即去”形容，也就是不需要“创建”变量，用的时候信手拈来。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; int a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    int a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ^\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSyntaxError: invalid syntax\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在有些语言里面，比如Java，要使用某个变量，必须先创建它。但是，如果把这个习惯搬到Python中，就如同上面操作那样，会报错。另外，还要注意，Python中的变量不是对象，它不能单独存在。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNameError: name \u0026#39;a\u0026#39; is not defined\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面的演示，就是想用一个变量\u003ccode\u003ea\u003c/code\u003e，但是，只是把它单独放在那里，就如同在数学上，“假设变量a”，这样做是不行的。在Python中，变量必须和某个对象关联起来。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; a = 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(a)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4308314816\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(2)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4308314816\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在上面的示例中，\u003ccode\u003ea=2\u003c/code\u003e就是将变量\u003ccode\u003ea\u003c/code\u003e与对象\u003ccode\u003e2\u003c/code\u003e关联了起来。注意，这里的变量\u003ccode\u003ea\u003c/code\u003e不是像容器那样，将对象\u003ccode\u003e2\u003c/code\u003e放入其中，而是如同标签那样，贴到了对象\u003ccode\u003e2\u003c/code\u003e上，于是乎通过这个标签就可以找到那个对象。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eid(a)\u003c/code\u003e并不是返回变量\u003ccode\u003ea\u003c/code\u003e的内存地址——它不是对象，而是返回了它所引用的对象\u003ccode\u003e2\u003c/code\u003e的内存地址。再参考后面的\u003ccode\u003eid(2)\u003c/code\u003e，可以看到两者内存地址一样，也就是说证明了\u003ccode\u003ea\u003c/code\u003e这个变量引用的对象就是\u003ccode\u003e2\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e但是，如果在交互模式中，做下面的操作，就令人匪夷所思了。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; a = 1.23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(1.23)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4312572400\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(a)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4311689008\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e按照前面的说法，这个怎么解释？！\u003c/p\u003e\n\u003cp\u003e再解释这个之前，先来看下面的操作。\u003c/p\u003e\n\u003cp\u003e创建一个文件，比如命名为\u003ccode\u003eidvalue.py\u003c/code\u003e，然后在文件中写入如下代码：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e#coding:utf-8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ea = 1.23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eid_value1 = id(a)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eid_value2 = id(1.23)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(f\u0026#34;id(a): {id_value1}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprint(f\u0026#34;id(1.23): {id_value2}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eif id_value1 == id_value2:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(\u0026#34;id() 返回值相同\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这段程序，跟前面交互模式里面的一样。但是，请注意接下来的事情。保存文件之后，执行它。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e% python3 idvalue.py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eid(a): 4327795888\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eid(1.23): 4327795888\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eid() 返回值相同\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e看执行结果。这里得到的\u003ccode\u003ea\u003c/code\u003e和\u003ccode\u003e1.23\u003c/code\u003e的内存地址居然是一样的。\u003c/p\u003e\n\u003cp\u003etu\u003c/p\u003e\n\u003cp\u003e神奇吗？\u003c/p\u003e\n\u003cp\u003e要解释这种神奇，话就有点长了，要从交互模式的特点开始说起。交互模式，是我们学习和做简单练习的好地方，但是，它有一个缺点，“记忆力太差”，每一行执行完毕，就会将该行“忘记”，下一行又从头开始。当执行了\u003ccode\u003ea = 1.23\u003c/code\u003e之后，本来内存中已经创建了\u003ccode\u003e1.23\u003c/code\u003e这个对象，但是，当再次执行\u003ccode\u003eid(1.23)\u003c/code\u003e时，因为两个不完全一样，交互模式的解析器忘记了前面的\u003ccode\u003e1.23\u003c/code\u003e，于是乎又在存储器中重新创建了\u003ccode\u003eid(1.23)\u003c/code\u003e中的\u003ccode\u003e1.23\u003c/code\u003e对象。\u003c/p\u003e\n\u003cp\u003e可为什么\u003ccode\u003ea = 2\u003c/code\u003e不如此呢？因为Python还有一个习惯，把-256~256这些整数，在内存中有“常住户口”。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; b = 256\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(b)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4308322944\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(256)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4308322944\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; c = 257\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(c)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4312572688\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; id(257)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4312572624\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e但是，如果在一个程序文件里，Python解析器的“记忆力”就正常了，不会重复创建同样的对象——当然，如拷贝等有意为之的除外。\u003c/p\u003e\n\u003cp\u003e至此，我们已经明确，Python中的变量和对象之间是\u003cstrong\u003e引用\u003c/strong\u003e关系，正式因为这种引用关系，让Python中实现某些操作就非常容易了。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; first = 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; second = 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; first, second = second, first\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; first\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; second\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在这个示例中，变量\u003ccode\u003efirst\u003c/code\u003e引用了\u003ccode\u003e1\u003c/code\u003e，\u003ccode\u003esecond\u003c/code\u003e引用了\u003ccode\u003e2\u003c/code\u003e，如果想把这两个变量引用的对象对调一下，在Python里面使用\u003ccode\u003efirst, second = second, first\u003c/code\u003e。这是多么简单、优雅、直接呀。如果在Java里面，就麻烦了——学过C/C++/Java等语言的同学，试一试吧。\u003c/p\u003e\n\u003cp\u003e由此，我们可以放胆说：\u003cstrong\u003ePython简单、优雅\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e还是因为“引用”，一个对象可以被多个变量引用，就相当于一个物体上可以贴多个标签那样。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; a = b = 3.14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; a\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3.14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3.14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e“变量引用对象”这个思想，还可以扩展到函数的参数。有的人习惯把函数的参数弄很多名称，比如形参、实参等，并且进行区分。在Python语言中，它们本质上都是变量，只不过是在函数作用于里面使用的变量。当定义函数的时候，虽然那个变量也没有引用对象，但因为是定义函数，这个函数并没有执行，所以，一个没有引用对象的变量是许可存在的。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; book = [\u0026#39;python\u0026#39;,]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; def my_book(b):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     b.append(\u0026#34;feature engineering\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     return b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; my_book(book)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u0026#39;python\u0026#39;, \u0026#39;feature engineering\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; book\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u0026#39;python\u0026#39;, \u0026#39;feature engineering\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e上面代码中，第1行创建了一个列表。第2行开始，创建了一个函数，参数是\u003ccode\u003eb\u003c/code\u003e——这时候称为“形参”，即形式上的参数。其实，因为这个函数并没有调用，所以，那个变量\u003ccode\u003eb\u003c/code\u003e可以认为是占位符，可以单独存在，不需要引用任何对象。\u003c/p\u003e\n\u003cp\u003e后面，调用这个函数\u003ccode\u003emy_book(book)\u003c/code\u003e。这里我们通常形象而简要地说：“将\u003ccode\u003eboo\u003c/code\u003e传给函数”。这句话其实不是很严谨，但它因为形象简短，所以被广为使用。如果严谨地说——未免啰嗦了，调用这个函数后，发生的是：\u003ccode\u003eb\u003c/code\u003e引用了变量\u003ccode\u003ebook\u003c/code\u003e所引用的对象\u003ccode\u003e[\u0026#39;python\u0026#39;,]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e从后面的执行结果中可以看出，因为函数内和函数外，不同变量引用的对象都是同一个，所以，会发生同样的变化。\u003c/p\u003e\n\u003cp\u003e对于变量，最后要强调的就是命名习惯：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e非数字开头\u003c/li\u003e\n\u003cli\u003e字母都小写\u003c/li\u003e\n\u003cli\u003e用有意的单词或者单词组合，多个单词之间用\u003ccode\u003e_\u003c/code\u003e连接\u003c/li\u003e\n\u003cli\u003e避免使用与下列项目冲突的单词：内置类型、内置函数、关键词\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下是列出Python关键词的方法：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; import keyword\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; keyword.kwlist\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e[\u0026#39;False\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;and\u0026#39;, \u0026#39;as\u0026#39;, \u0026#39;assert\u0026#39;, \u0026#39;async\u0026#39;, \u0026#39;await\u0026#39;, \u0026#39;break\u0026#39;, \u0026#39;class\u0026#39;, \u0026#39;continue\u0026#39;, \u0026#39;def\u0026#39;, \u0026#39;del\u0026#39;, \u0026#39;elif\u0026#39;, \u0026#39;else\u0026#39;, \u0026#39;except\u0026#39;, \u0026#39;finally\u0026#39;, \u0026#39;for\u0026#39;, \u0026#39;from\u0026#39;, \u0026#39;global\u0026#39;, \u0026#39;if\u0026#39;, \u0026#39;import\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;lambda\u0026#39;, \u0026#39;nonlocal\u0026#39;, \u0026#39;not\u0026#39;, \u0026#39;or\u0026#39;, \u0026#39;pass\u0026#39;, \u0026#39;raise\u0026#39;, \u0026#39;return\u0026#39;, \u0026#39;try\u0026#39;, \u0026#39;while\u0026#39;, \u0026#39;with\u0026#39;, \u0026#39;yield\u0026#39;]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e或者：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; help(\u0026#34;keywords\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHere is a list of the Python keywords.  Enter any keyword to get more help.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eFalse               class               from                or\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eNone                continue            global              pass\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTrue                def                 if                  raise\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eand                 del                 import              return\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eas                  elif                in                  try\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eassert              else                is                  while\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003easync               except              lambda              with\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eawait               finally             nonlocal            yield\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebreak               for                 not\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e有一种常见情况，如下所示：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; list = [1,2,3]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; list(\u0026#34;laoqi\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTraceback (most recent call last):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eTypeError: \u0026#39;list\u0026#39; object is not callable\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这就是因为本来的内置对象类型\u003ccode\u003elist\u003c/code\u003e，或者内置函数的名称，已经被\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; list = [1,2,3]\u003c/code\u003e占用了，后面再使用\u003ccode\u003elist\u003c/code\u003e，指的就是这个列表。所以，第二行的操作中会报错。\u003c/p\u003e\n\u003cp\u003etu\u003c/p\u003e\n\u003ch2 id=\"赋值\"\u003e\u003ca href=\"#赋值\" class=\"headerlink\" title=\"赋值\"\u003e\u003c/a\u003e赋值\u003c/h2\u003e\u003cp\u003e在理解变量和对象关系的基础上，理解“赋值”或“赋值语句”就简单多了，从本质上讲，赋值就是变量与某对象建立引用关系，只不过，这里不是如前面所说的某个直接的对象，这里的对象可能是经过计算之后得到的，所以，先要知道“表达式”。\u003c/p\u003e\n\u003cp\u003e所谓表达式，就是对象间用操作符连接，组成一个有意义的式子。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; 1 + 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; \u0026#34;python\u0026#34; + \u0026#34;lang\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;pythonlang\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e以上演示的都是表达式，一般而言，表达式要返回一个对象。如果将这个对象再被变量引用，就成为了“赋值”。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; py = \u0026#34;python\u0026#34; + \u0026#34;lang\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; py\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026#39;pythonlang\u0026#39;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e当然，前面出现的诸如\u003ccode\u003ea = 2\u003c/code\u003e也都是赋值语句。\u003c/p\u003e\n\u003cp\u003e在赋值语句中，\u003ccode\u003e=\u003c/code\u003e的作用于数学中的等号有很大区别，它表示将变量与对象之间建立引用关系。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; n = 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; n = n + 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; n\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e对于表达式\u003ccode\u003en = n + 1\u003c/code\u003e，这里的\u003ccode\u003e=\u003c/code\u003e如果是数学中的意义，那么就会出现\u003ccode\u003e0=1\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e对于\u003ccode\u003en = n + 1\u003c/code\u003e这种操作，还可以写成：\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; n += 1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; n\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e这种写法称为自增，同样，减、乘、除也都有类似的操作。\u003c/p\u003e\n\u003cp\u003e对于赋值，必须要说明的是Python3.8中新增的功能：\u003cstrong\u003e海象运算符\u003c/strong\u003e。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; n = len(\u0026#39;python\u0026#39;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; if n \u0026lt; 10:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(f\u0026#34;the word length is: {n}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethe word length is: 6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e在第二行开始的条件语句中，要使用\u003ccode\u003en\u003c/code\u003e，必须要要在前面通过赋值语句获得。Python3.8的海象赋值运算符，把上面的赋值那一行和第二行融合起来，让代码更简洁。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; if (i := len(\u0026#39;python\u0026#39;)) \u0026lt; 10:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...     print(f\u0026#34;the word length is: {n}\u0026#34;)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ethe word length is: 6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e关于海象运算符，本微信公众号有专门文章阐述，请参阅：《Python3.8新语法：海象运算符》\u003c/p\u003e\n\u003cp\u003e最后，要强调的是，Python中函数、类也都是对象，它们同样能够用于赋值语句。\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; lam = lambda x: x+3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; lam(4)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; q = lam\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt;\u0026gt;\u0026gt; q(4)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003e第一行创建了一个lambda函数，这个函数对象用变量\u003ccode\u003elam\u003c/code\u003e引用，也是赋值。注意第三行，只有名称才引用对象，如果是\u003ccode\u003elam()\u003c/code\u003e，是试图要执行\u003ccode\u003elam\u003c/code\u003e引用的对象，所以，\u003ccode\u003eq = lam\u003c/code\u003e才是赋值，或者说变量\u003ccode\u003eq\u003c/code\u003e也引用了这个lambda函数。\u003c/p\u003e\n\u003cp\u003e本文对变量和赋值做了专题总结，供初学者复习，以便加深对相关知识的理解。\u003c/p\u003e\n\u003chr/\u003e\n\u003cp style=\"text-align:center\"\u003e专注于\u003cstrong\u003e软件和AI\u003c/strong\u003e的公众号\u003c/p\u003e\n\u003cp style=\"text-align:center\"\u003e\u003cstrong\u003e老齐教室\u003c/strong\u003e\u003c/p\u003e\n\n\u003c/section\u003e\n    \u003c!-- Tags START --\u003e\n    \n    \u003c!-- Tags END --\u003e\n    \u003c!-- NAV START --\u003e\n    \n  \u003cdiv class=\"nav-container\"\u003e\n    \u003c!-- reverse left and right to put prev and next in a more logic postition --\u003e\n    \n      \u003ca class=\"nav-left\" href=\"/2020/05/21/regular-expression-fifth/\"\u003e\n        \u003cspan class=\"nav-arrow\"\u003e← \u003c/span\u003e\n        \n          Python中的正则表达式（五）\n        \n      \u003c/a\u003e\n    \n    \n      \u003ca class=\"nav-right\" href=\"/2020/05/25/child-python-one/\"\u003e\n        \n          青少年编程：用Python探究数学（1）\n        \n        \u003cspan class=\"nav-arrow\"\u003e →\u003c/span\u003e\n      \u003c/a\u003e\n    \n  \u003c/div\u003e\n\n    \u003c!-- NAV END --\u003e\n    \u003c!-- 打赏 START --\u003e\n    \n      \u003cdiv class=\"money-like\"\u003e\n        \u003cdiv class=\"reward-btn\"\u003e\n          赏\n          \u003cspan class=\"money-code\"\u003e\n            \u003cspan class=\"alipay-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用支付宝打赏\u003c/b\u003e\n            \u003c/span\u003e\n            \u003cspan class=\"wechat-code\"\u003e\n              \u003cdiv class=\"code-image\"\u003e\u003c/div\u003e\n              \u003cb\u003e使用微信打赏\u003c/b\u003e\n            \u003c/span\u003e\n          \u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp class=\"notice\"\u003e若你觉得我的文章对你有帮助，欢迎点击上方按钮对我打赏\u003c/p\u003e\n      \u003c/div\u003e\n    \n    \u003c!-- 打赏 END --\u003e\n    \u003c!-- 二维码 START --\u003e\n    \u003c!--% if (theme.qrcode) { %--\u003e\n      \u003cdiv class=\"qrcode\"\u003e\n        \u003c!--canvas id=\"share-qrcode\"\u003e\u003c/!--canvas--\u003e\n        \u003cimg src=\"https://public-tuchuang.oss-cn-hangzhou.aliyuncs.com/WechatIMG6_20200109154827.jpeg\" width=\"400\"/\u003e\n        \u003cp class=\"notice\"\u003e关注微信公众号，读文章、听课程，提升技能\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c!--% } %--\u003e\n    \u003c!-- 二维码 END --\u003e\n    \n      \u003c!-- No Comment --\u003e\n    \n  \u003c/article\u003e",
  "Date": "2020-05-22T00:00:00Z",
  "Author": "老齐教室"
}