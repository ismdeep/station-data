{
  "Source": "raphlinus.github.io",
  "Title": "More small updates",
  "Link": "https://raphlinus.github.io/personal/2019/02/20/more-small-updates.html",
  "Content": "\u003cdiv class=\"post-content e-content\" itemprop=\"articleBody\"\u003e\n    \u003cp\u003eThis post is actually a collection of updates about pretty big things, but the writeup is small. Several will be expanded into larger blog posts - if there are any that you are especially eager to see, please tweet at me and I’ll give the topic priority.\u003c/p\u003e\n\n\u003ch2 id=\"gui-in-rust\"\u003eGUI in Rust\u003c/h2\u003e\n\n\u003cp\u003eMost of my work in recent weeks has been towards building a native-Rust GUI stack. In particular, \u003ca href=\"https://github.com/xi-editor/druid\"\u003edruid\u003c/a\u003e has been migrating from being Windows-only to being cross-platform, and at the heart of that work is \u003ca href=\"https://github.com/linebender/piet\"\u003epiet\u003c/a\u003e, a 2D graphics abstraction. I believe piet is now at a “minimum viable” stage. Right now, we’re mostly using Cairo for non-Windows platforms, but I consider that a placeholder. One of the things I’d really like to see from the community is a piet back-end based on \u003ca href=\"https://github.com/servo/webrender\"\u003eWebRender\u003c/a\u003e and \u003ca href=\"https://github.com/pcwalton/pathfinder\"\u003ePathFinder\u003c/a\u003e. However, I don’t consider that blocking the rest of the work.\u003c/p\u003e\n\n\u003cp\u003eI’ll do a talk jointly with Ryan Levick at \u003ca href=\"https://libregraphicsmeeting.org/2019/\"\u003eLibre Graphics Meeting 2019\u003c/a\u003e on the graphics part of the stack.\u003c/p\u003e\n\n\u003ch3 id=\"text-layout\"\u003eText layout\u003c/h3\u003e\n\n\u003cp\u003eOne of the missing pieces in the Rust ecosystem is text layout. This is a critically important problem for native GUI, but is also needed in other places. I’m starting a project, supported by Mozilla Research under the Servo banner, to do the low-level parts of text rendering. This work will be done in the open, and I expect to be writing \u003cem\u003elots\u003c/em\u003e about it in coming weeks. For now, there is a \u003ca href=\"https://drive.google.com/open?id=1aw41q_izail-p99mN8dHrJeh9tMQ-Pldi54W6m7MHU8\"\u003eroadmap document\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAnother thing on the radar: the folks at YesLogic are working on pure-Rust code for OpenType shaping. I’m in touch with them and am hoping to be an early customer.\u003c/p\u003e\n\n\u003ch3 id=\"druid-on-mac\"\u003eDruid on Mac\u003c/h3\u003e\n\n\u003cp\u003eA major milestone will be getting the druid examples running on macOS. We’re not quite there yet, but the druid-shell example does run. I’m hoping soon. A lot of the progress here has been through open source collaboration, and I expect that to continue.\u003c/p\u003e\n\n\u003ch3 id=\"why-not-winit\"\u003eWhy not winit?\u003c/h3\u003e\n\n\u003cp\u003eOne of the deeper topics I’ve been engaging is whether to use \u003ca href=\"https://github.com/tomaka/winit\"\u003ewinit\u003c/a\u003e for cross-platform window creation. It’s a popular crate, and lots of work has gone into it.\u003c/p\u003e\n\n\u003cp\u003eI have decided to do window creation myself. I believe winit is fundamentally based on an architectural decision which is ok for 3D games but not for general GUI work: a separate Rust event loop thread that coordinates asynchronously with the host’s UI loop. However, some UI events require synchronous handling. This comes up visibly in smooth resize, but there are other instances. I filed an \u003ca href=\"https://github.com/tomaka/winit/issues/786\"\u003eissue against winit\u003c/a\u003e about smooth resizing specifically.\u003c/p\u003e\n\n\u003cp\u003eAnother reason not to use winit is the VST use case. The \u003ca href=\"https://github.com/rust-dsp\"\u003eRust DSP\u003c/a\u003e community has also decided not to use winit, because they need finer grained access to the window creation process. A VST is given a handle to the host UI, and needs to instantiate a view within that, as opposed to creating a window and view from scratch; winit has architectural decisions that basically assume the latter case. I’m in touch with that community and am hoping the druid work will meet their needs.\u003c/p\u003e\n\n\u003cp\u003eThere’s a bit more info in the \u003ca href=\"https://github.com/xi-editor/druid/issues/16\"\u003edruid-shell roadmap\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"spline\"\u003eSpline\u003c/h2\u003e\n\n\u003cp\u003eThe spline work has been on the back burner, but it has been accepted to \u003ca href=\"https://libregraphicsmeeting.org/2019/\"\u003eLibre Graphics Meeting 2019\u003c/a\u003e and I expect to polish it up considerably between now and then. Among other things, Jacob Rus has been tweaking the 2-parameter curve family to make it smoother and closer to curvature-monotonic.\u003c/p\u003e\n\n\u003cp\u003eI \u003cem\u003emight\u003c/em\u003e have more news about open source spline work soon, watch this space.\u003c/p\u003e\n\n\u003ch2 id=\"markdown-parsing\"\u003eMarkdown parsing\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://github.com/raphlinus/pulldown-cmark\"\u003epulldown-cmark\u003c/a\u003e project has been in a fairly stuck state for a while, largely because I realized the existing codebase had fundamental problems, so decided to start a new branch (\u003ca href=\"https://github.com/raphlinus/pulldown-cmark/tree/new_algo\"\u003enew_algo\u003c/a\u003e), with the hope of recruiting open source contribution to get to 100% spec compatibility. Recently, \u003ca href=\"https://marcusklaas.nl/\"\u003eMarcus Klaas de Vries\u003c/a\u003e has taken this up, and gotten it quite close. I’m hopeful we can merge to master and do a release soonish. Here’s a \u003ca href=\"https://github.com/raphlinus/pulldown-cmark/issues/154\"\u003eroadmap\u003c/a\u003e for the work.\u003c/p\u003e\n\n\u003ch2 id=\"follow-the-work\"\u003eFollow the work\u003c/h2\u003e\n\n\u003cp\u003eI’ve been doing more coding than writing about my projects lately. I’m going to be picking up the pace on this blog, as these projects increasingly run on open source collaboration. For earlier, more fine grained info, join the Zulip chat at \u003ca href=\"https://xi.zulipchat.com\"\u003exi.zulipchat.com\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAgain, if you want me to dig into any of these topics, let me know. Combining that with a \u003ca href=\"https://www.patreon.com/raphlinus\"\u003ePatreon\u003c/a\u003e donation is an even better way to get my attention.\u003c/p\u003e\n\n\n  \u003c/div\u003e",
  "Date": "2019-02-20T17:02:42Z",
  "Author": "raphlinus"
}