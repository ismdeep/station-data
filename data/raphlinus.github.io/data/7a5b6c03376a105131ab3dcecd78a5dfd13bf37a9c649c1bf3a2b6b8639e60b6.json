{
  "Source": "raphlinus.github.io",
  "Title": "What I’m working on at Recurse Center",
  "Link": "https://raphlinus.github.io/personal/2017/10/12/what-im-working-on.html",
  "Content": "\u003cdiv class=\"post-content e-content\" itemprop=\"articleBody\"\u003e\n    \u003cp\u003eI’m almost 3/4 of the way through my batch at \u003ca href=\"https://recurse.com/\"\u003eRecurse Center\u003c/a\u003e.\nI’ve been working on a bunch of things, and thought it might be useful to go over\nthem in some detail.\u003c/p\u003e\n\n\u003ch2 id=\"ghilbert\"\u003eGhilbert\u003c/h2\u003e\n\n\u003cp\u003eI came here with the goal of re-launching \u003ca href=\"http://ghilbert.org\"\u003eGhilbert\u003c/a\u003e. This is\na very ambitious project, basically a new language for representing formal proofs.\nI got quite a bit done on it, but my motivation has not been consistently strong.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://raphlinus.github.io/assets/ghilbert_screenshot.png\" alt=\"Ghilbert screenshot\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eOne of the challenges (which I’m realizing is a bad sign), is that I haven’t been\nable to articulate the goals of the project very well, especially who it’s for.\nI made an attempt at an \u003ca href=\"http://ghilbert.org/why.html\"\u003eessay\u003c/a\u003e, but am not very\nsatisfied by it. If this is going to be a viable replacement for a first course\nin formal logic, then it’s also going to need the equivalent of a textbook,\nwritten specifically to be accessible to a broader audience. That’s a huge time\ninvestment, and being able to leverage theorems translated from\n\u003ca href=\"http://us.metamath.org/\"\u003eMetamath\u003c/a\u003e only helps with a small part.\u003c/p\u003e\n\n\u003cp\u003eUltimately, I have decided to put this project on the back burner. I still think\nthe ideas are good, but it feels like to really accomplish the goals will take a\nyear or more of full-time work. Some of what I want to do, in particular redesigning\nthe module system so that theorems can be written independent of foundational\naxioms, requires work at the cutting edge of language design (I think dependent\npair types are promising, but the details are tricky at best).\u003c/p\u003e\n\n\u003ch2 id=\"xi-syntax-highlighting-performance\"\u003eXi syntax highlighting performance\u003c/h2\u003e\n\n\u003cp\u003eWhile I haven’t made a goal of focusing on \u003ca href=\"http://github.com/google/xi-editor/\"\u003exi\u003c/a\u003e\nduring my batch, I did start trying to use it as my day-to-day editor. I quickly\nfound that performance was totally unacceptable because of the batch highlighting.\nThat’s more than a little ironic, because performance is a stated goal of the\nproject.\u003c/p\u003e\n\n\u003cp\u003eImplementing \u003ca href=\"https://github.com/google/xi-editor/blob/master/doc/rope_science/rope_science_11.md\"\u003erope science\n11\u003c/a\u003e\nwas a juicy and fun project, and it improved performance tremendously, back into\nusable territory. There’s lots more to be done, but just this was an encouraging\nstep.\u003c/p\u003e\n\n\u003ch3 id=\"cache-visualization\"\u003eCache visualization\u003c/h3\u003e\n\n\u003cp\u003eThe core of the algorithm is a cache eviction strategy designed to balanced\nlocal access patterns with keeping “gaps” reasonably small (all this is to\nkeep the data structures small and nimble when highlighting large documents).\nI gave a little\n\u003ca href=\"https://docs.google.com/presentation/d/1enR5VYtZoQtxJCjq2h8oeUwGYmyheBDLhi6gaiOr8Lg/edit?usp=sharing\"\u003etalk\u003c/a\u003e\nand, preparing for that, realized that \u003cem\u003eshowing\u003c/em\u003e the cache policy interactively was\nthe best way to communicate that. The visualization currently lives as a\n\u003ca href=\"https://github.com/google/xi-editor/pull/403\"\u003epull request\u003c/a\u003e for the xi\ndocumentation directory.\u003c/p\u003e\n\n\u003cp\u003eI hope to polish up the talk and the visualization, and publish to a wider\naudience, as I think it’s a great showcase for xi.\u003c/p\u003e\n\n\u003ch2 id=\"snowflake\"\u003eSnowflake\u003c/h2\u003e\n\n\u003cp\u003eA long time ago I was motivated to create a “visual hash” that would both be\nvisually appealing, and also useful to distinguish two different hashes (so that\nit would be hard for an attacker to create a visual collision). I dusted that\noff, reimplemented in Javascript with SVG rendering, and posted it as as a\n\u003ca href=\"http://levien.com/snowflake.html\"\u003esmall interactive webpage\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://levien.com/snowflake.html\"\u003e\u003cimg src=\"https://raphlinus.github.io/assets/snowflake.png\" alt=\"Rainbow snowflake\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eI also made some progress in doing a more detailed\n\u003ca href=\"http://levien.com/snowflake-explain.html\"\u003eexplanation\u003c/a\u003e, intending it to\nhave an interactive visualization showing the construction step-by-step, but\ndidn’t follow through. I can imagine coming back to this, though.\u003c/p\u003e\n\n\u003cp\u003eI think getting rid of the pseudo-randomness, and just doing fill breadth-first,\nwould be an improvement (discussions with \u003ca href=\"https://marcusklaas.nl/\"\u003eMarcus Klass de Vries\u003c/a\u003e\nhelped illuminate this question).\u003c/p\u003e\n\n\u003ch2 id=\"apple-2-bitmap-text-rendering\"\u003eApple 2 bitmap text rendering\u003c/h2\u003e\n\n\u003cp\u003eThe Recurse Center has an Apple //e in the space, and the second I laid eyes on\nit I thought there would be a pretty good chance I’d code something for it. The\n\u003ca href=\"https://en.wikipedia.org/wiki/KIM-1\"\u003eKIM-1\u003c/a\u003e, a primitive 6502-based computer,\nwas the very first computer I ever programmed, so I was drawn to coding something\nin 6502 assembler.\u003c/p\u003e\n\n\u003cp\u003eGuided by the thought of maybe putting an emulator on my webpage, I wrote some\nfairly simple code to render a proportionally spaced bitmap font. It worked:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://raphlinus.github.io/assets/apple2_text.jpg\" alt=\"Apple 2 text screenshot\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe code is not yet published.\u003c/p\u003e\n\n\u003cp\u003eAlong the way I made some improvements to\n\u003ca href=\"https://github.com/nicholasbs/appletoo\"\u003eappletoo\u003c/a\u003e, which was written at Recurse\na few years ago. This is a good emulator to put on a homepage because it’s pretty\nsimple and can be readily adapted as needed.\u003c/p\u003e\n\n\u003ch2 id=\"apple-2-cassette-loading\"\u003eApple 2 cassette loading\u003c/h2\u003e\n\n\u003cp\u003eGetting code moved over to the Apple hardware is a challenge. The best supported\n(but slow) technique is to use the cassette interface, which rips along at\naround 1300 bits per second. There is an open source project called\n\u003ca href=\"https://github.com/datajerk/c2t\"\u003ec2t\u003c/a\u003e which increases this to around 8k with\na “hi-fi” mode. I looked at the details of the encoding and analog path and came\nto the conclusion that much higher data rates are possible. My original goal\nwas 40kbps.\u003c/p\u003e\n\n\u003cp\u003eI used the “retro and physical computing” weekend to finish the project (aided\ngreatly by an oscilloscope purchased for the weekend), and ultimately achieved\n23k. I haven’t published this code yet either, but a bit of a writeup exists as\nan \u003ca href=\"https://github.com/datajerk/c2t/issues/4\"\u003eissue\u003c/a\u003e on c2t.\u003c/p\u003e\n\n\u003ch2 id=\"crosswords\"\u003eCrosswords\u003c/h2\u003e\n\n\u003cp\u003eKeiran King has been working on \u003ca href=\"https://github.com/keiranking/Phil\"\u003ePhil\u003c/a\u003e, a tool\nto help construct crosswords, as the main project of his batch. One goal is to\nautomatically fill the remaining grid with partial words. As it turns out, there\nis some \u003ca href=\"http://abotea.rsise.anu.edu.au/data/cp08.pdf\"\u003eliterature\u003c/a\u003e on this, and\nan extremely promising approach is to use a SAT solver.\u003c/p\u003e\n\n\u003cp\u003eI’ll be writing lots more about this, but this is now my main project, and I’m\nvery excited about it. We’ll run the solver in the browser (using wasm and\nemscripten), and are collaborating on refining the user experience. I’ve also\nfigured out ways to prune the search space so the solver can run much faster.\u003c/p\u003e\n\n\u003cp\u003eModern SAT solvers (such as \u003ca href=\"http://www.labri.fr/perso/lsimon/glucose/\"\u003eglucose\u003c/a\u003e)\nare almost magical in their ability to find solutions even in large problems\n(a typical crossword translates to hundreds of thousands of variables and millions\nof clauses).\u003c/p\u003e\n\n\u003cp\u003eThere’s also a lot of interesting work in refining the wordlist, as this is\nkey to quality results. We’re starting from Saul Pwanson’s \u003ca href=\"http://xd.saul.pw/\"\u003exd\u003c/a\u003e\ncorpus, and thinking of a bunch of ways to filter out low-scoring words as well as\naugment it with fresh new ones. A promising approach to the latter is\n\u003ca href=\"http://matpalm.com/blog/2011/10/22/collocations_1/\"\u003ecollocations\u003c/a\u003e, and as we speak\nI’m replicating those results (pairing with \u003ca href=\"http://rubinovitz.com/\"\u003eJB Rubinovitz\u003c/a\u003e\non the analysis code).\u003c/p\u003e\n\n\u003ch2 id=\"smaller-things\"\u003eSmaller things\u003c/h2\u003e\n\n\u003cp\u003eI pushed my experiment running the \u003ca href=\"https://github.com/google/music-synthesizer-for-android/tree/webaudio\"\u003eFM synthesizer in a\nbrowser\u003c/a\u003e\n(using emscripten).\nI mentored some work towards the rewrite of pulldown-cmark to a\n\u003ca href=\"https://github.com/google/pulldown-cmark/issues/41\"\u003ebetter algorithm\u003c/a\u003e. I’ve\nalso been doing minor maintenance on xi and\n\u003ca href=\"https://github.com/google/fancy-regex\"\u003efancy-regex\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"thanks\"\u003eThanks\u003c/h2\u003e\n\n\u003cp\u003eThanks to the Recurse Center for providing the space, and for the many talented and\nkind Recursers who have shared stimulating conversation, encouragement, and pairing.\u003c/p\u003e\n\n  \u003c/div\u003e",
  "Date": "2017-10-12T15:59:03Z",
  "Author": "raphlinus"
}