{
  "Source": "raphlinus.github.io",
  "Title": "GPU resources",
  "Link": "https://raphlinus.github.io/gpu/2020/02/12/gpu-resources.html",
  "Content": "\u003cdiv class=\"post-content e-content\" itemprop=\"articleBody\"\u003e\n    \u003cp\u003eThis post is basically a dump of resources I’ve encountered while doing a deep dive into GPU programming. I welcome pull requests against the \u003ca href=\"https://github.com/raphlinus/raphlinus.github.io\"\u003erepo\u003c/a\u003e for other useful resources. Also feel free to ask questions in issues, particularly if the answer might be in the form of a patch to this post.\u003c/p\u003e\n\n\u003ch2 id=\"understanding-the-hardware\"\u003eUnderstanding the hardware\u003c/h2\u003e\n\n\u003ch3 id=\"intel\"\u003eIntel\u003c/h3\u003e\n\n\u003cp\u003eIntel is one of the best GPU hardware platforms to understand because it’s documented and a lot of the work is open source.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://en.wikichip.org/wiki/intel/microarchitectures/gen9\"\u003eWikichip gen 9\u003c/a\u003e, \u003ca href=\"https://en.wikichip.org/wiki/intel/microarchitectures/gen9.5\"\u003egen 9.5\u003c/a\u003e, \u003ca href=\"https://en.wikichip.org/wiki/intel/microarchitectures/gen11\"\u003egen 11\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://software.intel.com/sites/default/files/managed/c5/9a/The-Compute-Architecture-of-Intel-Processor-Graphics-Gen9-v1d0.pdf\"\u003eIntel white paper on Gen9 compute\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-kbl-vol07-3d_media_gpgpu.pdf\"\u003eProgrammer’s Reference Manual\u003c/a\u003e for Kaby Lake (Gen 9.5)\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere’s also some academic literature:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"http://comparch.gatech.edu/hparch/papers/gera_ispass18.pdf\"\u003ePerformance Characterisation and Simulation of Intel’s Integrated GPU Architecture\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOne of the funky things about Intel is the varying subgroup width; it can be SIMD8, SIMD16, or SIMD32, mostly determined by \u003ca href=\"https://software.intel.com/en-us/forums/opencl/topic/564990\"\u003ecompiler heuristic\u003c/a\u003e, but there is a new \u003ca href=\"https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/chap44.html#VK_EXT_subgroup_size_control\"\u003eVK_EXT_subgroup_size_control\u003c/a\u003e extension.\u003c/p\u003e\n\n\u003ch3 id=\"nvidia\"\u003eNVidia\u003c/h3\u003e\n\n\u003cp\u003eThere’s a lot of interest and activity around NVidia, but much of it is reverse engineering.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://arxiv.org/pdf/1804.06826.pdf\"\u003eDissecting the NVIDIA Volta GPU Architecture via Microbenchmarking\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://arxiv.org/pdf/1903.07486.pdf\"\u003eDissecting the NVidia Turing T4 GPU via Microbenchmarking\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"amd\"\u003eAMD\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://developer.amd.com/wp-content/resources/Vega_Shader_ISA_28July2017.pdf\"\u003e“Vega” Instruction Set Architecture Reference Guide\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://gpuopen.com/optimizing-gpu-occupancy-resource-usage-large-thread-groups/\"\u003eOptimizing GPU occupancy and resource usage with large thread groups\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"understanding-api-capabilities\"\u003eUnderstanding API capabilities\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://vulkan.gpuinfo.org/\"\u003evulkan.gpuinfo.org\u003c/a\u003e - a detailed database of what extensions are available on what hardware/driver/platform combinations.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf\"\u003eMetal Feature Set Tables\u003c/a\u003e has similar info for Metal.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"subgroups\"\u003eSubgroups\u003c/h2\u003e\n\n\u003cp\u003eSubgroup/warp/SIMD/shuffle operations are very fast, but less compatible (nonuniform shuffle is missing from HLSL/SM6), and you (mostly) don’t get to control the subgroup size, so portability is a lot harder.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://www.khronos.org/blog/vulkan-subgroup-tutorial\"\u003eVulkan Subgroup Tutorial\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://www.khronos.org/assets/uploads/developers/library/2018-vulkan-devday/06-subgroups.pdf\"\u003eVulkan Subgroup Explained\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://developer.nvidia.com/reading-between-threads-shader-intrinsics\"\u003eReading Between The Threads: Shader Intrinsics\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"languages\"\u003eLanguages\u003c/h2\u003e\n\n\u003ch3 id=\"glsl\"\u003eGLSL\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/KhronosGroup/glslang\"\u003ehttps://github.com/KhronosGroup/glslang\u003c/a\u003e - reference implementation of GLSL, compilation to SPIR-V\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/google/shaderc\"\u003eshaderc\u003c/a\u003e - Google-maintained tools\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"hlsl\"\u003eHLSL\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/microsoft/DirectXShaderCompiler\"\u003eDirectX Shader Compiler\u003c/a\u003e (DXC) - produces both SPIR-V and DXIL.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-pguide\"\u003eProgramming guide for HLSL\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/hlsl-shader-model-6-0-features-for-direct3d-12\"\u003eShader Model 6\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"metal-shading-language\"\u003eMetal Shading Language\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf\"\u003eMetal Shading Language Specification\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"opencl\"\u003eOpenCL\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/google/clspv\"\u003eclspv\u003c/a\u003e - compile OpenCL C (subset) to run on Vulkan compute shaders.\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eTo me, this is evidence that Vulkan will simply eat OpenCL’s lunch. This is still \u003ca href=\"https://github.com/KhronosGroup/Vulkan-Ecosystem/issues/42\"\u003econtroversial\u003c/a\u003e, but Khronos people are insisting there’s an “OpenCL Next” roadmap.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://www.khronos.org/news/press/khronos-group-releases-opencl-3.0\"\u003eOpenCL 3.0\u003c/a\u003e is recently announced, and their plans do include clspv and related tools to run on a Vulkan.\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"tensorflow\"\u003eTensorFlow\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://blog.tensorflow.org/2019/04/mlir-new-intermediate-representation.html\"\u003eMLIR\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"exotic-languages\"\u003eExotic languages\u003c/h3\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://halide-lang.org/\"\u003eHalide\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://futhark-lang.org/\"\u003eFuthark\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/Co-dfns/Co-dfns\"\u003eCo-dfns\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://juliacomputing.com/industries/gpus.html\"\u003eJulia on GPU\u003c/a\u003e - layered on CUDA\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"spir-v\"\u003eSPIR-V\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/KhronosGroup/SPIRV-Cross\"\u003eSPIRV-Cross\u003c/a\u003e - transpile SPIR-V into GLSL, HLSL, and Metal Shading Language\u003c/p\u003e\n\n    \u003cul\u003e\n      \u003cli\u003eThis is an integral part of portability layers including \u003ca href=\"https://github.com/KhronosGroup/MoltenVK\"\u003eMoltenVK\u003c/a\u003e and \u003ca href=\"https://github.com/gfx-rs/gfx\"\u003egfx-rs\u003c/a\u003e.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"webgpu\"\u003eWebGPU\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://fosdem.org/2020/schedule/event/rust_webgpu/\"\u003eBuilding WebGPU with Rust\u003c/a\u003e - FOSDEM talk\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://github.com/gfx-rs/wgpu\"\u003ewgpu\u003c/a\u003e - Rust WebGPU implementation\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://dawn.googlesource.com/dawn\"\u003edawn\u003c/a\u003e - Google’s WebGPU implementation in C++\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eWork-in-progress \u003ca href=\"https://gpuweb.github.io/gpuweb/\"\u003especification\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://developers.google.com/web/updates/2019/08/get-started-with-gpu-compute-on-the-web\"\u003eGet started with GPU Compute on the Web\u003c/a\u003e - Google (Chromium/Dawn)\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"webgpu-shader-language\"\u003eWebGPU shader language\u003c/h3\u003e\n\n\u003cp\u003eThe discussion of shader language had been very \u003ca href=\"https://news.ycombinator.com/item?id=22020511\"\u003econtentious\u003c/a\u003e. As of very recently there is a proposal for a textual language that is semantically equivalent to SPIR-V, and there seems to be agreement that this is the path forward.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://docs.google.com/presentation/d/1qHhFq0GJtY_59rNjpiHU--JW4bW4Ji3zWei-gM6cabs/edit\"\u003eTint - WebGPU F2F - Feb 12, 2020\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003ca href=\"https://docs.google.com/document/d/1vQPA1JSOvfCHjBrkAEDLA1qCqQXe72vGen_1quoHZV8/edit#\"\u003eMinutes for GPU Web meeting 2020-02-12 Redmond F2F\u003c/a\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe previous proposals were some profile of SPIR-V, a binary format, and Apple’s \u003ca href=\"https://webkit.org/blog/8482/web-high-level-shading-language/\"\u003eWeb High Level Shading Language\u003c/a\u003e proposal, which evolved into \u003ca href=\"https://github.com/gpuweb/WSL\"\u003eWeb Shading Language\u003c/a\u003e. Both of these had disadvantages that made them unacceptable to various people. It’s not possible to use SPIR-V directly, largely because it has undefined behavior and other unsafe stuff. The Google and Mozilla implementations addressed this by doing a rewrite pass. Conversely, Apple’s proposal met with considerable resistance because it didn’t deal with the diversity of GPU hardware in the field. There’s a lot of ecosystem work centered around Vulkan and SPIR-V, and leveraging that will help WebGPU considerably.\u003c/p\u003e\n\n  \u003c/div\u003e",
  "Date": "2020-02-12T18:20:42Z",
  "Author": "raphlinus"
}