{
  "Source": "raphlinus.github.io",
  "Title": "A Few of My Favorite Sigmoids",
  "Link": "https://raphlinus.github.io/audio/2018/09/05/sigmoid.html",
  "Content": "\u003cdiv class=\"post-content e-content\" itemprop=\"articleBody\"\u003e\n    \u003cscript type=\"text/x-mathjax-config\"\u003e\n\tMathJax.Hub.Config({\n\t\ttex2jax: {\n\t\t\tinlineMath: [['$', '$']]\n\t\t}\n\t});\n\u003c/script\u003e\n\n\u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type=\"text/javascript\"\u003e\u003c/script\u003e\n\n\u003cp\u003eHere I’ll be looking at the subject of \u003ca href=\"https://en.wikipedia.org/wiki/Sigmoid_function\"\u003esigmoid functions\u003c/a\u003e from a somewhat unusual perspective: their suitability as a component in a digital musical instrument. I’ll consider how they \u003cem\u003esound,\u003c/em\u003e as well as efficiency of computing them.\u003c/p\u003e\n\n\u003ch2 id=\"a-gallery-of-sigmoids\"\u003eA gallery of sigmoids\u003c/h2\u003e\n\n\u003cp\u003eBelow we’ll look at tanh, erf, an algebraic function, and hard clipping. For each we’ll show an audio clip and a spectrogram of a decaying sine wave run through the function.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/sigmoids.png\" alt=\"sigmoid curves\"/\u003e\u003c/p\u003e\n\n\u003ch3 id=\"hyperbolic-tangent\"\u003eHyperbolic tangent\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/sigmoid_tanh.png\" alt=\"spectrogram of tanh\"/\u003e\u003c/p\u003e\n\n\u003caudio controls=\"\" src=\"/assets/sigmoid_tanh.ogg\"\u003e\nYour browser does not support the \u0026lt;audio\u0026gt; element. Upgrade to Internet Explorer 11 or better.\n\u003c/audio\u003e\n\n\u003cp\u003eThe \u003ca href=\"http://mathworld.wolfram.com/HyperbolicTangent.html\"\u003ehyperbolic tangent\u003c/a\u003e (or tanh) is arguably the most musical sigmoid function, so much so that the \u003ca href=\"http://www.instruo.media/tanh3\"\u003etanh3\u003c/a\u003e Eurorack module provides the function implemented in analog electronics. As additional musical pedigree, it’s a good model of the response of differential transistor pairs as used in the \u003ca href=\"http://sdiy.org/destrukto/notes/moog_ladder_tf.pdf\"\u003eMoog ladder filter\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe tanh can also be understood as a variant of the \u003ca href=\"https://en.wikipedia.org/wiki/Logistic_function\"\u003elogistic function\u003c/a\u003e, with interpretation relating probability to Bayesian evidence. As such, it is often used as a nonlinear element in artificial neural networks (though \u003ca href=\"https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\"\u003eReLU\u003c/a\u003e) is gaining popularity).\u003c/p\u003e\n\n\u003ch3 id=\"error-function\"\u003eError function\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/sigmoid_erf.png\" alt=\"spectrogram of erf\"/\u003e\u003c/p\u003e\n\n\u003caudio controls=\"\" src=\"/assets/sigmoid_erf.ogg\"\u003e\nYour browser does not support the \u0026lt;audio\u0026gt; element. Upgrade to Internet Explorer 11 or better.\n\u003c/audio\u003e\n\n\u003cp\u003eAnother classic sigmoid is the “\u003ca href=\"http://mathworld.wolfram.com/Erf.html\"\u003eerror function\u003c/a\u003e” (or erf). It’s sharper than tanh and approaches the asymptotes much more closely for large inputs.\u003c/p\u003e\n\n\u003cp\u003eOne application of erf is efficient computation of the convolution of the Gaussian filter with a box, the 1D analog of a Gaussian blur applied to a rectangle. This can be used for accurate simulation of an \u003ca href=\"http://m1el.github.io/woscope-how/index.html\"\u003eoscilloscope\u003c/a\u003e, an important compotent in a serious electronic musician’s toolkit.\u003c/p\u003e\n\n\u003ch3 id=\"reciprocal-square-root-sigmoid\"\u003eReciprocal square root sigmoid\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/sigmoid_rsqrt.png\" alt=\"spectrogram of reciprocal square root\"/\u003e\u003c/p\u003e\n\n\u003caudio controls=\"\" src=\"/assets/sigmoid_rsqrt.ogg\"\u003e\nYour browser does not support the \u0026lt;audio\u0026gt; element. Upgrade to Internet Explorer 11 or better.\n\u003c/audio\u003e\n\n\u003cp\u003eAnother good sigmoid function is defined by this function:\u003c/p\u003e\n\n\\[\\frac{x}{\\sqrt{1 + x^2}}\\]\n\n\u003cp\u003eIt’s fairly similar to tanh, but not quite as sharp, thus producing slightly more distortion at low-to-moderate input levels. One of the main reasons it’s interesting is that the central operation, an \u003ca href=\"https://en.wikipedia.org/wiki/Fast_inverse_square_root\"\u003eapproximate reciprocal square root\u003c/a\u003e can be computed very efficiently. Fast reciprocal square root is the subject of an infamous snippet of code from John Carmack, and today the same basic technique powers very efficient SIMD implementations.\u003c/p\u003e\n\n\u003ch3 id=\"hard-clipping\"\u003eHard clipping\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"/assets/sigmoid_hard_clip.png\" alt=\"spectrogram of hard_clip\"/\u003e\u003c/p\u003e\n\n\u003caudio controls=\"\" src=\"/assets/sigmoid_hard_clip.ogg\"\u003e\nYour browser does not support the \u0026lt;audio\u0026gt; element. Upgrade to Internet Explorer 11 or better.\n\u003c/audio\u003e\n\n\u003cp\u003eHard clipping may not technically be a sigmoid function because of lack of smoothness, but is certainly important in audio contexts, so should be included, at least for comparison. It is the theoretical model of the distortion unit in pedals such as the \u003ca href=\"https://en.wikipedia.org/wiki/Pro_Co_RAT\"\u003eRAT\u003c/a\u003e, but of course an analog pedal isn’t subject to aliasing, and it’s likely that the imperfections from producing a pure hard-clip transfer function actually smooth the sound.\u003c/p\u003e\n\n\u003ch2 id=\"aesthetic-comparison\"\u003eAesthetic comparison\u003c/h2\u003e\n\n\u003cp\u003eTo my ears, tanh sounds the best. It has more interesting harmonics at high drive amplitudes (and just sounds louder), and smoother at low. This is of course incredibly subjective, and I’m probably biased.\u003c/p\u003e\n\n\u003cp\u003eLooking at the spectra, there are other reasons to prefer tanh. For digital audio, you want distortion that produces harmonics up to some point and then falls off quickly, because any harmonics above the Nyquist frequency turn into aliasing. Of course, it’s also possible to mitigate aliasing by running the chain at a higher frequency, but that increases computational load. For reasons that are still somewhat mysterious to me, the spectra of tanh seems to fall off more rapidly, even though it’s a sharper knee than the recip-sqrt one.\u003c/p\u003e\n\n\u003cp\u003eThe spectrum of erf has odd nulls in it that are not present in either tanh or\u003c/p\u003e\n\n\u003cp\u003eHard clipping doesn’t sound good at all. The distortion sounds harsh, and the higher harmonics produce aliasing.\u003c/p\u003e\n\n\u003ch2 id=\"fast-implementations\"\u003eFast implementations\u003c/h2\u003e\n\n\u003cp\u003eRust language benchmarks for the implementations are \u003ca href=\"https://github.com/raphlinus/synthesizer-io/blob/master/synthesizer-io-core/benches/sigmoid.rs\"\u003ehere\u003c/a\u003e; timings are based on runs of that code on a i7-7700HQ @2.8GHz.\u003c/p\u003e\n\n\u003cp\u003eLooking at the straightforward implementations of the tanh and recip-sqrt sigmoids, we see a huge difference: 5.9 vs .453 nanoseconds, respectively, a 13x difference. What’s going on? There are basically two things. First, for a simple algebraic formula (including sqrt), Rust is able to optimize the scalar function into vector code, while the tanh is a function call that must be evaluated sequentially. Second, the recip-sqrt is just a lot fewer operations, all of which are implemented efficiently.\u003c/p\u003e\n\n\u003cp\u003eOn the hardware I’m testing on, writing explicit SIMD code is only a small speedup (to 0.4ns). I think this is because the sqrt instruction is already implemented very efficiently. On ARM, it would likely be a different story, as ARM has an instructions for approximate reciprocal square root (vrsqrte and vrsqrts) but not a full, accurate square root.\u003c/p\u003e\n\n\u003ch3 id=\"morphing-with-polynomials\"\u003eMorphing with polynomials\u003c/h3\u003e\n\n\u003cp\u003eMy favorite way to reasonably accurately approximate other sigmoids (including tanh and erf) is to pre-process the input through a low-order, odd polynomial. This technique is both faster and more accurate than published approximations. In addition, its errors are smooth (unlike piecewise approximations), so they \u003cem\u003esound\u003c/em\u003e almost identical to the precise functions; the spectrum is basically the same, only tiny differences in the amplitudes of the spectral peaks of the harmonics.\u003c/p\u003e\n\n\u003cp\u003eFor tanh, this polynomial should approximate sinh, based on the identity:\u003c/p\u003e\n\n\\[\\tanh x = \\frac{\\sinh x}{\\sqrt{1 + (\\sinh x)^2}}\\]\n\n\u003cp\u003eThe polynomial doesn’t have to be very accurate though, especially at larger values, as they get squished out by the subsequent sigmoid. A good compromise is a fifth-order odd polynomial, yielding an accuracy of 2e-4 at 0.55ns per sample.\u003c/p\u003e\n\n\u003cp\u003eFor comparison are two other approximations from the literature. For tanh, the \u003ca href=\"https://arxiv.org/pdf/1702.07825.pdf\"\u003eDeep Voice\u003c/a\u003e neural net paper includes a rational polynomial based on an approximation to $e^x$. In my testing, it has an accuracy of around 1.5e-3 at 0.7ns.\u003c/p\u003e\n\n\u003cp\u003eFor erf, one of the most common approximations is due to \u003ca href=\"https://en.wikipedia.org/wiki/Abramowitz_and_Stegun\"\u003eAbramowitz and Stegun\u003c/a\u003e (it’s the source for the oscilloscope code). It has an accuracy of 5e-4, and take 0.86ns per sample, which is quite good, as it’s a rational polynomial at heart. But morphing beats it. Using a 7th order polynomial to surpass the accuracy (2.2e-4) is still faster: 0.63ns.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eI’ve presented an argument that tanh is the best sigmoid function for digital music applications, though others are usable, and a function based on reciprocal square root behaves similarly and is faster. I’ve also presented implementations of tanh and erf sigmoid functions which are reasonably accurate numerically, high quality for audio applications, and faster than other commonly used implementations.\u003c/p\u003e\n\n\n  \u003c/div\u003e",
  "Date": "2018-09-05T15:58:03Z",
  "Author": "raphlinus"
}