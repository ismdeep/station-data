{
  "Source": "solidot",
  "Title": "PaX RAP优化项目总结",
  "Link": "https://www.solidot.org/story?sid=62200",
  "Content": "\u003cdiv class=\"p_mainnew\"\u003e\n\t\t\t\t\t\u003ca href=\"http://https://github.com/hardenedlinux\"\u003eHardenedLinux\u003c/a\u003e 写道\u003ci\u003e \u0026#34;由于一些对于高级防御需求的在野节点生产环境的需求，HardenedLinux一直都在尝试打造基于自由软件/固件/硬件的基础架构整体防御方案\u003ca href=\"https://github.com/hardenedlinux/hardenedlinux_profiles/raw/master/slide/hardening_the_core.pdf\" target=\"_blank\"\u003eHardening the COREs\u003c/a\u003e，而其中\u003ca href=\"https://hardenedlinux.github.io/system-security/2016/05/01/FAQ_about_RAP.html\" target=\"_blank\"\u003ePaX RAP\u003c/a\u003e作为唯一大规模用于生产环境的CFI（代码执行完整性保护），不论在内核还是\u003ca href=\"https://twitter.com/hardenedlinux/status/1172321981527494656\" target=\"_blank\"\u003e固件层面\u003c/a\u003e都是重要的房角石，所以在其安全性分析以外我们也尝试从\u003ca href=\"https://github.com/hardenedlinux/RAP-optimizations\" target=\"_blank\"\u003e性能优化的角度做一些尝试\u003c/a\u003e，在去掉一些老版本PaX RAP中重用的instrumentation场景下（不适用于服务器）\u003ca href=\"https://github.com/hardenedlinux/RAP-optimizations/raw/dev/doc/PAX-rap-optimizations-paper/paper.pdf\" target=\"_blank\"\u003eForward-edged CFI性能得到了一定程度的提升\u003c/a\u003e，Backward-edged CFI能做的性能优化空间不大，需要借助于未来Intel CET，ARMv8.3的PA和ARMv8.5的MTE的辅助来提速。在针对PaX RAP的整体分析和评估中我们对指针分析和基于type hash在plugins使用的GCC内置API的流程上出现了误判，\u003ca href=\"https://github.com/hardenedlinux/RAP-optimizations/issues/2\" target=\"_blank\"\u003e项目终章总结\u003c/a\u003e有详细描述。本轮针对PaX RAP和其他还无法应用生产环境的CFI方案的评估断断续续了几年，很可惜，即使在PaX/GRsecurity公开RAP的第一个版本4年后的今天依然是唯一的可大规模部署的服务器Linux内核CFI方案，在后Meltdown/Spectre时代，2019版本的RAP具备更强悍的安全性但由于官方并未公开文档所以这里不作描述，希望HardenedLinux社区的这次试验性项目可以为更多的自由软件项目在CFI评估方面提供参考。最后再次感谢PaX team的review，反馈和相关建议。\u0026#34;\u003c/i\u003e\t\t\t\t\t                \u003c/div\u003e",
  "Date": "2019-10-10T08:28:21Z",
  "Author": "wenfeixiang"
}