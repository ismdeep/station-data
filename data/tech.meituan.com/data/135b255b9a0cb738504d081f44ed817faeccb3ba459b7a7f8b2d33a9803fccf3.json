{
  "Source": "tech.meituan.com",
  "Title": "从0到1：构建强大且易用的规则引擎",
  "Link": "https://tech.meituan.com/2017/06/09/maze-framework.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"引言\"\u003e引言\u003c/h2\u003e\u003cp\u003e2016年07月恰逢美团点评的业务进入“下半场”，需要我们在各个环节优化体验、提升效率、降低成本。技术团队需要怎么做来适应这个变化？这个问题直接影响着之后的工作思路。\u003c/p\u003e\u003cp\u003e美团外卖的CRM业务步入成熟期，规则类需求几乎撑起了这个业务所有需求的半边天。一方面规则唯一不变的是“多变”，另一方面开发团队对“规则开发”的感受是乏味、疲惫和缺乏技术含量。如何解决规则开发的效率问题，最大化解放开发团队成为目前的一个KPI。\u003c/p\u003e\u003cp\u003e规则引擎作为常见的维护策略规则的框架很快进入我的思路。它能将业务决策逻辑从系统逻辑中抽离出来，使两种逻辑可以独立于彼此而变化，这样可以明显降低两种逻辑的维护成本。\u003c/p\u003e\u003cp\u003e分析规则引擎如何设计正是本文的主题，过程中也简单介绍了实现方案。\u003c/p\u003e\u003ch2 id=\"案例\"\u003e案例\u003c/h2\u003e\u003cp\u003e首先回顾几个美团点评的业务场景。通过这些场景大家能更好地理解什么是规则，规则的边界是什么。在每个场景后面都介绍了业务系统现在使用的解决方案以及主要的优缺点。\u003c/p\u003e\u003ch3 id=\"门店信息校验\"\u003e门店信息校验\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e场景\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e美团点评合并前的美团平台事业部中，门店信息入口作为门店信息的第一道关卡，有一个很重要的职责，就是质量控制，其中第一步就是针对一些字段的校验规则。\u003c/p\u003e\u003cp\u003e下面从流程的角度看下门店信息入口业务里校验门店信息的规则模型（已简化），如下图。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/f47891080e36c3c46b8fde120b256c6c80384.png\" alt=\"门店信息校验规则\"/\u003e\u003c/p\u003e\u003cp\u003e规则主体包括3部分：\u003c/p\u003e\u003cul\u003e\u003cli\u003e分支条件。分支内逻辑条件为“==”和“\u0026lt;”。\u003c/li\u003e\u003cli\u003e简单计算规则。如：字符串长度。\u003c/li\u003e\u003cli\u003e业务定制计算规则。如：逆地址解析、经纬度反算等。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e方案——硬编码\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e由于历史原因，门店信息校验采用了硬编码的方式，伪代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eif (StringUtil.isBlank(fieldA)\n    || StringUtil.isBlank(fieldB)\n    || StringUtil.isBlank(fieldC)\n    || StringUtil.isBlank(fieldD)) {\n    return ResultDOFactory.createResultDO(Code.PARAM_ERROR, \u0026#34;门店参数缺少必填项\u0026#34;);\n}\nif (fieldA.length() \u0026lt; 10) {\n    return ResultDOFactory.createResultDO(Code.PARAM_ERROR, \u0026#34;门店名称长度不能少于10个字符\u0026#34;);\n}\nif (!isConsistent(fieldB, fieldC, fieldD)) {\n    return ResultDOFactory.createResultDO(Code.PARAM_ERROR, \u0026#34;门店xxx地址、行政区和经纬度不一致\u0026#34;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e当规则较少、变动不频繁时，开发效率最高。\u003c/li\u003e\u003cli\u003e稳定性较佳：语法级别错误不会出现，由编译系统保证。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e缺点\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e规则迭代成本高：对规则的少量改动就需要走全流程（开发、测试、部署）。\u003c/li\u003e\u003cli\u003e当存量规则较多时，可维护性差。\u003c/li\u003e\u003cli\u003e规则开发和维护门槛高：规则对业务分析人员不可见。业务分析人员有规则变更需求后无法自助完成开发，需要由开发人员介入开发。\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"门店审核流程\"\u003e门店审核流程\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e场景\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e流程控制中心（负责在运行时根据输入参数选择不同的流程节点从而构建一个流程实例）会根据输入门店信息中的渠道来源和品牌等特征确定本次审核（不）走哪些节点，其中选择策略的模型如下图。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/adb12baecd30935759643b568908e954121022.png\" alt=\"门店审核流程\"/\u003e\u003c/p\u003e\u003cp\u003e规则主体是分支条件：\u003c/p\u003e\u003cul\u003e\u003cli\u003e分支条件主体是“==”，参与计算的参数是固定值和用户输入实体的属性（比如：渠道来源和品牌类型）。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e方案——开源Drools从入门到放弃\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e经过一系列调研团队选择基于开源规则引擎Drools来配置流程中审核节点的选择策略。使用Drools后的规则配置流程如下图。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/d3c7fd9501028545fd2a6a7f52b58a02117959.png\" alt=\"规则配置流程\"/\u003e\u003c/p\u003e\u003cp\u003e上图中DSL即是规则主体，规则内容如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003erule \u0026#34;1.1\u0026#34;\n\t    when\n\t        poi : POI( source == 1 \u0026amp;\u0026amp; brandType == 1 )\n\t    then\n\t\t        System.out.println( \u0026#34;1.1 matched\u0026#34; );\n\t\t        poi.setPassedNodes(1);\n\t       \nend\n\t\nrule \u0026#34;1.2\u0026#34;\n\t    when\n\t        poi : POI( source == 1 \u0026amp;\u0026amp; brandType == 2 )\n\t    then\n\t\t        System.out.println( \u0026#34;1.2 matched\u0026#34; );\n\t       \nend\n\t\nrule \u0026#34;2.1\u0026#34;\n\t    when\n\t        poi : POI( source == 2 \u0026amp;\u0026amp; brandType == 1 )\n\t    then\n\t\t        System.out.println( \u0026#34;2.1 matched\u0026#34; );\n\t\t        poi.setPassedNodes(2);\n\t       \nend\n\t\nrule \u0026#34;2.2\u0026#34;\n\t    when\n\t        poi : POI( source == 2 \u0026amp;\u0026amp; brandType == 2 )\n\t    then\n\t\t        System.out.println( \u0026#34;2.2 matched\u0026#34; );\n\t\t        poi.setPassedNodes(3);\n\t       \nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在实践中，我们发现Drools方案有以下几个优缺点：\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e策略规则和执行逻辑解耦方便维护。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e缺点\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e业务分析师无法独立完成规则配置：由于规则主体DSL是编程语言（支持Java, Groovy, Python），因此仍然需要开发工程师维护。\u003c/li\u003e\u003cli\u003e规则规模变大以后也会变得不好维护，相对硬编码的优势便不复存在。\u003c/li\u003e\u003cli\u003e规则的语法仅适合扁平的规则，对于嵌套条件语义（then里嵌套when…then子句）的规则只能将条件进行笛卡尔积组合以后进行配置，不利于维护。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e由于Drools的问题较多，最后这个方案还是放弃了。\u003c/p\u003e\u003ch3 id=\"绩效指标计算\"\u003e绩效指标计算\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e场景\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e美团外卖业务发展非常迅速，绩效指标规则需要快速迭代才能紧跟业务发展步伐。绩效考核频率是一个月一次，因此绩效规则的迭代频率也是每月一次。因为绩效规则系统是硬编码实现，因此开发团队需要投入大量的人力满足规则更新需求。\u003c/p\u003e\u003cp\u003e2016年10月底我受绩效团队委托成立一个项目组，开发部署了一套绩效指标配置系统，系统上线直接减少了产品经理和技术团队70%的工作量。\u003c/p\u003e\u003cp\u003e下面我们首先分析下绩效指标计算的规则模型，如下图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/091382bd84aa71fc17c44b4ba275d5af75174.png\" alt=\"绩效指标计算规则\"/\u003e\u003c/p\u003e\u003cp\u003e规则主体是结构化数据处理逻辑：\u003c/p\u003e\u003cul\u003e\u003cli\u003e规则逻辑是从若干数据源获取数据，然后进行一系列聚合处理（可以采用结构化查询SQL语句+少量代码实现），最后输出到目标数据源。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e方案——业务定制规则引擎\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e绩效规则主体是数据处理，但我们认为数据处理同样属于规则的范畴，因此我们将其放在本文进行分析。\u003c/p\u003e\u003cp\u003e下图是绩效指标配置系统。触发器负责定时驱动引擎进行计算；视图负责给商业分析师提供规则配置界面，规则表达能力取决于视图；引擎负责将配置的规则解析成Spark原语进行计算。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/08c636fba906cb7f703780a055d35948277090.png\" alt=\"指标配置系统\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e规则配置门槛低：视图和引擎内部数据模型完全贴合绩效业务模型，因此业务分析师很容易上手。\u003c/li\u003e\u003cli\u003e系统支持规则热部署。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e缺点\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e适用范围有限：因为视图和引擎的设计完全基于绩效业务模型，因此很难低成本修改后推广到别的业务。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"探索全新设计\"\u003e探索全新设计\u003c/h2\u003e\u003cp\u003e“案例”一节中三种落地方案的问题总结如下：\u003c/p\u003e\u003cul\u003e\u003cli\u003e硬编码迭代成本高。\u003c/li\u003e\u003cli\u003eDrools维护门槛高。视图对非技术人员不友好，即使对于技术人员来说维护成本也不比硬编码低。\u003c/li\u003e\u003cli\u003e绩效定制引擎表达能力有限且扩展性差，无法推广到别的业务。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e由于“高效配置规则”是业务里长期存在的刚需，且行业内又缺乏符合需求的解决方案，2017年02月我在团队内部设立了一个虚拟小组专门负责规则引擎的设计研发。引擎设计指标是要覆盖工作中基础的规则迭代需求（包括但不限于“案例”一节中的多个场景），同时针对“案例”一节中已有解决方案扬长避短。下面分3节来重现这个项目的设计过程。首先“需求模型”一节会基于“案例”一节的场景尝试抽象出规则模型，同时提炼出系统设计大纲。然后“Maze框架”一节会基于需求模型设计一个规则引擎。最后“Maze框架能力模型”一节会介绍Maze框架的特点。\u003c/p\u003e\u003ch3 id=\"需求模型\"\u003e需求模型\u003c/h3\u003e\u003cp\u003e对规则引擎来说，世界皆规则。通过“案例”一节的分析，我们对规则以及规则引擎该如何构建的思路正逐渐变得清晰，下面两节分别定义规则数据模型和规则引擎的系统模型，目标是对“Maze框架”一节中的规则引擎产品进行框架性指导。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e规则数据模型\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e规则本质是一个函数，由n个输入、1个输出和函数计算逻辑3部分组成。\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003ey = f（x1, x2, …, xn）\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e具体结合“案例”一节中的场景我们梳理出的规则模型如下图所示。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/60dc1f885e2b2054ab28a5895802c9b484857.png\" alt=\"规则模型\"/\u003e\u003c/p\u003e\u003cp\u003e主要由三部分构成：\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eFACT对象：用户输入的事实对象，作为决策因子使用。\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e规则：LHS（Left Hand Side）部分即条件分支逻辑。RHS（Right Hand Side）部分即执行逻辑。LHS和RHS部分是由一个或多个模式构成的。模式是规则内最小单位。模式的输入参数可以是另一个模式或FACT对象（比如逻辑与运算\u003ccode\u003e[参数1] \u0026amp;\u0026amp; [参数2]\u003c/code\u003e中参数1可以是另一个表达式）。模式需要支持以下3种类别：\u003c/p\u003e\u003cul\u003e\u003cli\u003e客户定义方法：FACT对象的实例方法、静态方法。\u003c/li\u003e\u003cli\u003e常规表达式：逻辑运算、算数运算、关系运算、对象属性处理等。\u003c/li\u003e\u003cli\u003e结构化查询。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e结果对象：规则处理完毕后的结果。需要支持自定义类型或者简单类型（Integer、Long、Float、Double、Short、String、Boolean等）。\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e系统模型\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e我们需要设计一个系统能配置、加载、解释执行上节中的数据模型，另外设计时还需要规避“案例”一节3个方案的缺点。最终我们定义了如下图所示的系统模型。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/ac5a0896b779e86b56cf84bb0c9e51d188512.png\" alt=\"系统模型\"/\u003e\u003c/p\u003e\u003cp\u003e主要由3个模块构成：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/2721ba3ebb1b5cbf0c3880b93e846fdb291478.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/5234c8fd7131bf557158206b54a773cd45807.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e规则引擎：负责执行规则。\u003cul\u003e\u003cli\u003e调度器：根据规则的依赖关系以及硬件资源驱动模式执行器执行模式，目标是达到最大吞吐或最低延迟。\u003c/li\u003e\u003cli\u003e模式执行器：负责直接执行模式。执行器可以根据业务的表达能力需求选择基于Drools、Aviator等第三方引擎，甚至可以基于ANTLR定制。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"maze框架\"\u003eMaze框架\u003c/h3\u003e\u003cp\u003e基于”需求模型”一节的定义，我们开发了Maze框架（Maze是迷宫的意思，寓意：迷宫一样复杂的规则）。\u003c/p\u003e\u003cp\u003eMaze框架分两个引擎：MazeGO（策略引擎）和MazeQL（结构化数据处理引擎）。其中MazeGO内解析到结构化数据处理模式会调用SQLC驱动MazeQL完成计算（比如：从数据库里查询某个BD的月交易额，如果交易额超过30万则执行A逻辑否则执行B逻辑，这个语义的规则即需要执行结构化查询），MazeQL内解析到策略计算模式会调用VectorC驱动MazeGO进行计算（比如：有一张订单表，其中第一列是商品ID，第二列是商品购买数量，第三列是此商品的单价，我们需要计算每类商品的总价则需要对结构化查询到的结果的每一行执行\u003ccode\u003e第二列\u003c/code\u003e * \u003ccode\u003e第三列\u003c/code\u003e这样的策略模式计算）。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/1c49510b028189dcbeb1c144f7966bb383111.png\" alt=\"Maze框架\"/\u003e\u003c/p\u003e\u003cp\u003e名词解释：\u003c/p\u003e\u003cul\u003e\u003cli\u003eVectorC指向量计算，针对矩阵的行列进行计算。有三种计算方式：\u003col\u003e\u003cli\u003e针对一行的多列进行策略计算。\u003c/li\u003e\u003cli\u003e针对一列进行计算。\u003c/li\u003e\u003cli\u003e针对分组聚合（GroupBy）后的每一组内的列进行运算。\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\u003cli\u003eSQLC指结构化查询。拥有执行SQL的能力。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003eMazeGO\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eMazeGO核心主要由3部分构成：资源管理器、知识库和MazeGO引擎。另外两个辅助模块是流量控制器和规则效果分析模块。基本构成如下图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/fb5686e83f2822ac4c6bf22c3ea1e412421106.png\" alt=\"MazeGO\"/\u003e\u003c/p\u003e\u003cp\u003e3个核心模块（引擎、知识库和资源管理器）的职责见“需求模型”一节中“系统模型”一节。下面只介绍下和“系统模型”不同的部分。\u003c/p\u003e\u003col\u003e\u003cli\u003eMazeGO引擎：\u003cul\u003e\u003cli\u003e规则管理模块。职责如下：\u003cul\u003e\u003cli\u003e预加载规则实例。首先为了避免访问规则时需要实时执行远程调用而造成较大的时延，另外规则并不是时刻发生变更没有必要每次访问时拉取一次最新版本，基于以上两个原因规则管理模块会在引擎初始化阶段将有效版本的规则实例缓存在本地并且监听规则变更事件（监听可以基于ZooKeeper实现）。\u003c/li\u003e\u003cli\u003e预编译规则实例。因为规则每次编译执行会导致性能问题，因此会在引擎初始化和规则有变更这两个时机将增量版本的规则预编译成可执行代码。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e流量控制器：负责不同版本规则的调度。方便业务方修改规则后，灰度部分流量到新规则。\u003c/li\u003e\u003cli\u003e规则效果分析：规则新增或修改后，业务方需要分析效果。本模块会提供：规则内部执行路径、运行时参数和结果的镜像数据，数据可以存储在hbase上。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cstrong\u003eMazeQL\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eMazeQL核心主要由3部分构成：配置中心、MazeQL引擎和平台。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/7119b70635731c94f45871ad788a3289400155.png\" alt=\"MazeQL\"/\u003e\u003c/p\u003e\u003col\u003e\u003cli\u003eMazeQL引擎：\u003cul\u003e\u003cli\u003e规则管理模块。职责如下：\u003cul\u003e\u003cli\u003e预加载规则实例。首先为了避免访问规则时需要实时执行远程调用而造成较大的时延，另外规则并不是时刻发生变更没有必要每次访问时拉取一次最新版本，基于以上两个原因规则管理模块会在引擎初始化阶段将有效版本的规则实例缓存在本地并且监听规则变更事件（监听可以基于ZooKeeper实现）。\u003c/li\u003e\u003cli\u003e预解析规则实例。因为规则每次解析执行会导致性能（大对象）问题，因此会在引擎初始化阶段解析为运行时可用的调度栈帧。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e运行时模块。分为调度器和QL驱动器。\u003cul\u003e\u003cli\u003e调度器。SQLC和VectorC类规则大多由多个规则组合而成（对于SQLC而言可以将依赖的规则简单的理解为子查询），因此也需要和“系统模型”一节一样的调度管理，实现层面完全一致。\u003c/li\u003e\u003cli\u003eQL驱动器。驱动平台进行规则计算。因为任务的实际执行平台有多种（会在下一个“平台”部分介绍），因此QL驱动器也有多种实现。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e平台：负责实际执行规则逻辑。分两种运行模式：一种是以嵌入式方式运行在客户端进程内部，好处是实时性更好，时延更低，适合小批量数据处理；另一种是以远程方式运行在Spark平台，适合离线大规模数据处理。\u003cul\u003e\u003cli\u003eQL执行器。负责执行结构化查询逻辑。两种不同的运行模式下QL执行器在执行SQL模式时会选择两种不同的QL执行器实现，两种实现分别是：\u003cul\u003e\u003cli\u003e嵌入式模式下是基于Mysql和Derby等实时性较好的数据库实现的。\u003c/li\u003e\u003cli\u003e在Spark平台上是基于Spark SQL实现的。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e配置中心：提供规则配置视图。\u003cul\u003e\u003cli\u003e版本管理。同“系统模型”一节。\u003c/li\u003e\u003cli\u003e数据源绑定。即是定义参与计算的SQL逻辑中使用到的数据源，便于系统进行管理。\u003c/li\u003e\u003cli\u003e结构查询定义。即是定义SQL规则，这是主体规则内容。\u003c/li\u003e\u003cli\u003e向量计算定义。定义VectorC类计算（VectorC见“Maze框架”章节开头的介绍）。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"maze框架能力模型\"\u003eMaze框架能力模型\u003c/h3\u003e\u003cp\u003eMaze框架是一个适用于非技术背景人员，支持复杂规则的配置和计算引擎。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/0cd2ccfa111c8bbbd0f7cc030f71788b430204.png\" alt=\"Maze框架能力模型\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e规则迭代安全性\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e规则支持热部署：系统通过版本控制，可以灰度一部分流量，增加上线信心。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e规则表达能力\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e框架的表达能力覆盖绝大部分代码表达能力。下面用伪代码的形式展示下Maze框架的规则部分具有的能力。\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// 输入N个FACT对象\nfunction(Fact[] facts) {   \n\t // 从FACT对象里提取模式     \n\t String xx= facts[0].xx;  \n\t // 从某个数据源获取特征数据，SQLC数据处理能力远超sql语言本身能力，SQLC具有编程+SQL的混合能力\n\tList\u0026lt;Fact\u0026gt; moreFacts = connection.executeQuery(\u0026#34;select * from xxx where xx like \u0026#39;%\u0026#34; + xx + \u0026#34;%\u0026#39;);  \n\t// 对特征数据和FACT对象应用用户自定义计算模式\n\tUserDefinedClass userDefinedObj = userDefinedFuntion(facts, moreFacts);  \n\t// 使用系统内置表达式模式处理特征                      \n\tint compareResult = userDefinedObj.getFieldXX().compare(XX); \n\t // 声明用户自定义对象         \n\t UserDefinedResultClass userDefinedResultObj = new UserDefinedResultClass();  \n\t// 使用系统内置条件语句模式处理特征                              \n\tif (compareResult  == 0) {     \n\t        userDefinedResultObj.setCompareResult(Boolean.FALSE);\n\t    } else if (compareResult \u0026gt; 0) {\n\t        userDefinedResultObj.setCompareResult(Boolean.FALSE);\n\t    } else {\n\t        userDefinedResultObj.setCompareResult(Boolean.TRUE);\n\t    }\n\t // 将结果返回给客户\n\treturn userDefinedResultObj;        \n\t}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e规则执行效率\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e执行效率分三方面：\u003c/p\u003e\u003col\u003e\u003cli\u003e引擎的调度模块会确保吞吐优先，并且调度并发度等系统配置可以根据资源情况调整。\u003c/li\u003e\u003cli\u003e引擎运行过程中没有远程通信开销。\u003c/li\u003e\u003cli\u003e引擎执行代码实现编译或解析后执行，运行效率较高。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cstrong\u003e规则接入成本\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e开发人员接入\u003c/strong\u003e\u003c/p\u003e\u003col\u003e\u003cli\u003e首先，开发人员在项目工程里导入一个MazeGO jar包。\u003c/li\u003e\u003cli\u003e\u003cp\u003e然后，开发人员在项目工程里需要调用计算规则的地方引入MazeGO client（如下代码片段）。\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e// 初始化MazeGO client，建议在本应用程序的初始化阶段执行\nMazeGOReactor reactor = new MazeGOReactor();\nreactor.setMazeIds(Arrays.asList(\u0026lt;mazeId\u0026gt;));\nreactor.init();\n\n// 调用MazeGO client执行规则\nreactor.go(\u0026lt;mazeId\u0026gt;, \u0026lt;fact\u0026gt;);\n\n// 销毁MazeGO client，建议在本应用程序的销毁阶段执行\nreactor.destroy();\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cstrong\u003e规则配置\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e规则配置基本实现由业务分析师、产品经理或运营人员自助完成。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/b648dab4d847848593cac4fa18c1cbf9212164.png\" alt=\"规则配置\"/\u003e\u003c/p\u003e\u003cp\u003e业务分析师在MazeGO上配置规则的视图如下图所示。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/ece455f01817ae2bcfb12f4fed4becf4364942.png\" alt=\"视图\"/\u003e\u003c/p\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\u003cp\u003e本文开头介绍了几个工作中的规则使用场景，顺带引出了多个不同的解决方案，最后介绍了Maze框架的设计，基本上展现了我们对这个框架思考和设计的整个过程。\u003c/p\u003e\u003ch2 id=\"作者简介\"\u003e作者简介\u003c/h2\u003e\u003cp\u003e张宁，美团点评技术专家。2015年加入美团，先后在美团数据中心、外卖CRM等业务线工作，目前在外卖技术部，负责代理商和CRM效能相关业务，致力于通过技术手段提升商务拓展团队的工作效率、降低客户关系维护成本。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e【思考题】\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e世界皆规则，业务开发工程师的日常工作又都是实现业务逻辑。那当通用规则引擎表达能力能够覆盖大部分业务逻辑，且配置成本低于开发工程师直接开发时，业务逻辑这一亩三分地里通用规则引擎和代码的边界是什么？我们是否还需要严格恪守规则引擎只是用来“隔离变化”、“解耦决策逻辑”等原则？\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2017-06-09T00:00:00Z",
  "Author": "soulteary@gmail.com"
}