{
  "Source": "tech.meituan.com",
  "Title": "Leaf：美团分布式ID生成服务开源",
  "Link": "https://tech.meituan.com/2019/03/07/open-source-project-leaf.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003eLeaf是美团基础研发平台推出的一个分布式ID生成服务，名字取自德国哲学家、数学家莱布尼茨的一句话：“There are no two identical leaves in the world.”Leaf具备高可靠、低延迟、全局唯一等特点。目前已经广泛应用于美团金融、美团外卖、美团酒旅等多个部门。具体的技术细节，可参考此前美团技术博客的一篇文章：\u003ca href=\"https://tech.meituan.com/MT_Leaf.html\"\u003e《Leaf美团分布式ID生成服务》\u003c/a\u003e。近日，Leaf项目已经在Github上开源：\u003ca href=\"https://github.com/Meituan-Dianping/Leaf\"\u003ehttps://github.com/Meituan-Dianping/Leaf\u003c/a\u003e，希望能和更多的技术同行一起交流、共建。\u003c/p\u003e\u003ch2 id=\"leaf特性\"\u003eLeaf特性\u003c/h2\u003e\u003cp\u003eLeaf在设计之初就秉承着几点要求：\u003c/p\u003e\u003col\u003e\u003cli\u003e全局唯一，绝对不会出现重复的ID，且ID整体趋势递增。\u003c/li\u003e\u003cli\u003e高可用，服务完全基于分布式架构，即使MySQL宕机，也能容忍一段时间的数据库不可用。\u003c/li\u003e\u003cli\u003e高并发低延时，在CentOS 4C8G的虚拟机上，远程调用QPS可达5W+，TP99在1ms内。\u003c/li\u003e\u003cli\u003e接入简单，直接通过公司RPC服务或者HTTP调用即可接入。\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"leaf诞生\"\u003eLeaf诞生\u003c/h2\u003e\u003cp\u003eLeaf第一个版本采用了预分发的方式生成ID，即可以在DB之上挂N个Server，每个Server启动时，都会去DB拿固定长度的ID List。这样就做到了完全基于分布式的架构，同时因为ID是由内存分发，所以也可以做到很高效。接下来是数据持久化问题，Leaf每次去DB拿固定长度的ID List，然后把最大的ID持久化下来，也就是并非每个ID都做持久化，仅仅持久化一批ID中最大的那一个。这个方式有点像游戏里的定期存档功能，只不过存档的是未来某个时间下发给用户的ID，这样极大地减轻了DB持久化的压力。\u003c/p\u003e\u003cp\u003e整个服务的具体处理过程如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/210ca1564c70b228ed46f3b33c9bb9b161120.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003eLeaf Server 1：从DB加载号段[1，1000]。\u003c/li\u003e\u003cli\u003eLeaf Server 2：从DB加载号段[1001，2000]。\u003c/li\u003e\u003cli\u003eLeaf Server 3：从DB加载号段[2001，3000]。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e用户通过Round-robin的方式调用Leaf Server的各个服务，所以某一个Client获取到的ID序列可能是：1，1001，2001，2，1002，2002……也可能是：1，2，1001，2001，2002，2003，3，4……当某个Leaf Server号段用完之后，下一次请求就会从DB中加载新的号段，这样保证了每次加载的号段是递增的。\u003c/p\u003e\u003cp\u003eLeaf数据库中的号段表格式如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sql\"\u003e+-------------+--------------+------+-----+-------------------+-----------------------------+\n| Field       | Type         | Null | Key | Default           | Extra                       |\n+-------------+--------------+------+-----+-------------------+-----------------------------+\n| biz_tag     | varchar(128) | NO   | PRI |                   |                             |\n| max_id      | bigint(20)   | NO   |     | 1                 |                             |\n| step        | int(11)      | NO   |     | NULL              |                             |\n| desc        | varchar(256) | YES  |     | NULL              |                             |\n| update_time | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |\n+-------------+--------------+------+-----+-------------------+-----------------------------+\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLeaf Server加载号段的SQL语句如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-sql\"\u003eBegin\nUPDATE table SET max_id=max_id+step WHERE biz_tag=xxx\nSELECT tag, max_id, step FROM table WHERE biz_tag=xxx\nCommit\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e整体上，V1版本实现比较简单，主要是为了尽快解决业务层DB压力的问题，而快速迭代出的一个版本。因而在生产环境中，也发现了些问题。比如：\u003c/p\u003e\u003col\u003e\u003cli\u003e在更新DB的时候会出现耗时尖刺，系统最大耗时取决于更新DB号段的时间。\u003c/li\u003e\u003cli\u003e当更新DB号段的时候，如果DB宕机或者发生主从切换，会导致一段时间的服务不可用。\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"leaf双buffer优化\"\u003eLeaf双Buffer优化\u003c/h2\u003e\u003cp\u003e为了解决这两个问题，Leaf采用了异步更新的策略，同时通过双Buffer的方式，保证无论何时DB出现问题，都能有一个Buffer的号段可以正常对外提供服务，只要DB在一个Buffer的下发的周期内恢复，就不会影响整个Leaf的可用性。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/64a44ac6db45e4b7b88b10c85a76614a52159.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e这个版本代码在线上稳定运行了半年左右，Leaf又遇到了新的问题：\u003c/p\u003e\u003col\u003e\u003cli\u003e号段长度始终是固定的，假如Leaf本来能在DB不可用的情况下，维持10分钟正常工作，那么如果流量增加10倍就只能维持1分钟正常工作了。\u003c/li\u003e\u003cli\u003e号段长度设置的过长，导致缓存中的号段迟迟消耗不完，进而导致更新DB的新号段与前一次下发的号段ID跨度过大。\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"leaf动态调整step\"\u003eLeaf动态调整Step\u003c/h2\u003e\u003cp\u003e假设\u003cstrong\u003e服务QPS为Q，号段长度为L，号段更新周期为T\u003c/strong\u003e，那么\u003cstrong\u003eQ * T = L\u003c/strong\u003e。最开始L长度是固定的，导致随着Q的增长，T会越来越小。但是Leaf本质的需求是\u003cstrong\u003e希望T是固定的\u003c/strong\u003e。那么如果L可以和Q正相关的话，T就可以趋近一个定值了。所以Leaf每次更新号段的时候，根据上一次更新号段的周期T和号段长度step，来决定下一次的号段长度nextStep：\u003c/p\u003e\u003cul\u003e\u003cli\u003eT \u0026lt; 15min，nextStep = step * 2\u003c/li\u003e\u003cli\u003e15min \u0026lt; T \u0026lt; 30min，nextStep = step\u003c/li\u003e\u003cli\u003eT \u0026gt; 30min，nextStep = step / 2\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e至此，满足了号段消耗稳定趋于某个时间区间的需求。当然，面对瞬时流量几十、几百倍的暴增，该种方案仍不能满足可以容忍数据库在一段时间不可用、系统仍能稳定运行的需求。因为本质上来讲，Leaf虽然在DB层做了些容错方案，但是号段方式的ID下发，最终还是需要强依赖DB。\u003c/p\u003e\u003ch2 id=\"mysql高可用\"\u003eMySQL高可用\u003c/h2\u003e\u003cp\u003e在MySQL这一层，Leaf目前采取了半同步的方式同步数据，通过公司DB中间件Zebra加MHA做的主从切换。未来追求完全的强一致，会考虑切换到\u003ca href=\"https://dev.mysql.com/doc/refman/5.7/en/group-replication.html\"\u003eMySQL Group Replication\u003c/a\u003e。\u003c/p\u003e\u003cp\u003e现阶段由于公司数据库强一致的特性还在演进中，Leaf采用了一个临时方案来保证机房断网场景下的数据一致性：\u003c/p\u003e\u003cul\u003e\u003cli\u003e多机房部署数据库，每个机房一个实例，保证都是跨机房同步数据。\u003c/li\u003e\u003cli\u003e半同步超时时间设置到无限大，防止半同步方式退化为异步复制。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"leaf监控\"\u003eLeaf监控\u003c/h2\u003e\u003cp\u003e针对服务自身的监控，Leaf提供了Web层的内存数据映射界面，可以实时看到所有号段的下发状态。比如每个号段双buffer的使用情况，当前ID下发到了哪个位置等信息都可以在Web界面上查看。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/e7cc6df5b167ba9d972e0eb9c66b4446318301.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003ch2 id=\"leaf-snowflake\"\u003eLeaf Snowflake\u003c/h2\u003e\u003cp\u003eSnowflake，Twitter开源的一种分布式ID生成算法。基于64位数实现，下图为Snowflake算法的ID构成图。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/96034f8fa0f2cb14c21844a4fa12f50441574.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e第1位置为0。\u003c/li\u003e\u003cli\u003e第2-42位是相对时间戳，通过当前时间戳减去一个固定的历史时间戳生成。\u003c/li\u003e\u003cli\u003e第43-52位是机器号workerID，每个Server的机器ID不同。\u003c/li\u003e\u003cli\u003e第53-64位是自增ID。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e这样通过时间+机器号+自增ID的组合来实现了完全分布式的ID下发。\u003c/p\u003e\u003cp\u003e在这里，Leaf提供了Java版本的实现，同时对Zookeeper生成机器号做了弱依赖处理，即使Zookeeper有问题，也不会影响服务。Leaf在第一次从Zookeeper拿取workerID后，会在本机文件系统上缓存一个workerID文件。即使ZooKeeper出现问题，同时恰好机器也在重启，也能保证服务的正常运行。这样做到了对第三方组件的弱依赖，一定程度上提高了SLA。\u003c/p\u003e\u003ch2 id=\"未来规划\"\u003e未来规划\u003c/h2\u003e\u003cul\u003e\u003cli\u003e号段加载优化：Leaf目前重启后的第一次请求还是会同步加载MySQL，之所以这么做而非服务初始化加载号段的原因，主要是MySQL中的Leaf Key并非一定都被这个Leaf服务节点所加载，如果每个Leaf节点都在初始化加载所有的Leaf Key会导致号段的大量浪费。因此，未来会在Leaf服务Shutdown时，备份这个服务节点近一天使用过的Leaf Key列表，这样重启后会预先从MySQL加载Key List中的号段。\u003c/li\u003e\u003cli\u003e单调递增：简易的方式，是只要保证同一时间、同一个Leaf Key都从一个Leaf服务节点获取ID，即可保证递增。需要注意的问题是Leaf服务节点切换时，旧Leaf 服务用过的号段需要废弃。路由逻辑，可采用主备的模型或者每个Leaf Key 配置路由表的方式来实现。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"关于开源\"\u003e关于开源\u003c/h2\u003e\u003cp\u003e分布式ID生成的方案有很多种，Leaf开源版本提供了两种ID的生成方式：\u003c/p\u003e\u003cul\u003e\u003cli\u003e号段模式：低位趋势增长，较少的ID号段浪费，能够容忍MySQL的短时间不可用。\u003c/li\u003e\u003cli\u003eSnowflake模式：完全分布式，ID有语义。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e读者可以按需选择适合自身业务场景的ID下发方式。希望美团的方案能给予大家一些帮助，同时也希望各位能够一起交流、共建。\u003c/p\u003e\u003cp\u003eLeaf项目Github地址：\u003ca href=\"https://github.com/Meituan-Dianping/Leaf\"\u003ehttps://github.com/Meituan-Dianping/Leaf\u003c/a\u003e 。\u003c/p\u003e\u003cp\u003e如有任何疑问和问题，欢迎提交至\u003ca href=\"https://github.com/Meituan-Dianping/Leaf/issues\"\u003eGithub issues\u003c/a\u003e。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2019-03-07T00:00:00Z",
  "Author": "soulteary@gmail.com"
}