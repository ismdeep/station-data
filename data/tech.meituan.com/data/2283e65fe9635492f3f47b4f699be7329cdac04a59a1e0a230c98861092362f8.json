{
  "Source": "tech.meituan.com",
  "Title": "“小众”之美——Ruby在QA自动化中的应用",
  "Link": "https://tech.meituan.com/2018/04/27/ruby-autotest.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\u003cp\u003e关于测试领域的自动化，已有很多的文章做过介绍，“黑科技”也比比皆是，如通过Java字节码技术实现接口的录制，Fiddler录制内容转Python脚本，App中的插桩调试等，可见角度不同，对最佳实践的理解也不一样。这里想要阐述的是，外卖（上海）QA团队应用相对“小众”的Ruby，在资源有限的条件下实现自动化测试的一些实践与经验分享。\u003c/p\u003e\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\u003cp\u003e加入外卖上海团队时，共2名QA同学，分别负责App与M站的功能测试，自动化测试停留在学习北京侧接口测试框架的阶段，实效上近乎为0，能力结构上在代码这部分是明显薄弱的。而摆在面前的问题是，回归测试的工作量较大，特别是M站渠道众多（4个渠道），移动端API的接口测试需区分多个版本，自动化测试的开展势在必行。在这样的条件下，如何快速且有效地搭建并推广自动化测试体系？在过去对自动化测试的多种尝试及实践的总结后，选择了Ruby。\u003c/p\u003e\u003ch2 id=\"why-ruby\"\u003eWhy Ruby？\u003c/h2\u003e\u003cp\u003e简单点说就是：并不聪明的大脑加上“好逸恶劳”的思想，促使我在这些年的自动化测试实践中，不断寻找更合适的解决方案。所谓技术，其本质都是站在别人的肩膀上，肩膀的高度也决定了实现目标的快慢，而Ruby正符合所需的一些特征：\u003c/p\u003e\u003col\u003e\u003cli\u003e效率。自身应该算是“纯粹”的测试人员，在“测试开发”这重职业并不普及的年代，一直希望有种语言可以让测试的开发效率超过研发，Ruby做到了；\u003c/li\u003e\u003cli\u003e人性化的语法，各种糖。类似1.day.ago，简单的表达不需要解释；\u003c/li\u003e\u003cli\u003e强大的元编程能力。基于此，DHH放弃了PHP而使用Ruby开发出了Rails，DSL也因此成为Ruby开发的框架中非常普通的特性，而这对于很多主流语言都是种奢望；\u003c/li\u003e\u003cli\u003e对于测试来说足够充足的社区资源。不涉及科学计算，不涉及服务开发，在没有这些需求的情况下，Python和Java不再是必需。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e脱离了开发语言的平台，但在不关注白盒测试的情况下并无太多不妥。当Ruby用于测试开发，基本“屏蔽”了性能上的劣势，充分展现了敏捷、易用的特点，也是选择这一技术路线的主要因素。\u003c/p\u003e\u003ch2 id=\"接口自动化框架coral-api\"\u003e接口自动化框架Coral-API\u003c/h2\u003e\u003ch3 id=\"框架思路\"\u003e框架思路\u003c/h3\u003e\u003cp\u003e接口自动化测试方案众多，个人认为它们都有自己的适用的范围和优缺点。UI类工具虽轻松实现无码Case，但在处理接口变动和全链路接口流程上多少会显得有些繁琐（尤其在支持数据驱动需求下），过多的规则、变量设置和编码也相差无几；录制类型的方案，更多还是适合回归，对于较全面的接口测试也需要一定的开发量。基于这些权衡考虑，采用一种编码尽可能少、应用面更广的接口自动化框架实现方式，把它命名为Coral-API，主要有以下特点：\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cp\u003e测试数据处理独立\u003c/p\u003e\u003cul\u003e\u003cli\u003e预先生成测试所需的最终数据，区分单接口测试数据（单接口数据驱动测试）与链路测试数据\u003c/li\u003e\u003cli\u003e通过命令行形式的语句解决了参数的多层嵌套及动态数据生成的问题\u003c/li\u003e\u003cli\u003eExcel中维护测试数据，最终转化为YML或存入DB，折中解决了JSON形式的数据难维护问题\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e学习成本低\u003c/p\u003e\u003cul\u003e\u003cli\u003e框架提供生成通用结构代码的功能，使测试人员更关注于业务逻辑处理\u003c/li\u003e\u003cli\u003eDSL的书写风格，即便没有Ruby的语言基础，也可以较快掌握基本的接口测试用例编写\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e扩展性\u003c/p\u003e\u003cul\u003e\u003cli\u003e支持Java平台的扩展\u003c/li\u003e\u003cli\u003e支持HTTP/RPC接口，可根据开发框架扩展\u003c/li\u003e\u003cli\u003e框架基于Rspec，支持多种验证方式（Build-In Matcher），及支持自定义Matcher，目前实现了JSON去噪的Diff，各种复合的条件比较\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e以单个接口测试编写为例，下图描述了具体流程：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/97a55ff2.png\" alt=\"coral-api框架\"/\u003e\u003c/p\u003e\u003cp\u003e从图中可以看到，安装了Coral-API的gem后，可通过命令行 “coral g {apiname}” ，通过模板来生成测试数据XLS及对应的数据处理文件（例如ApiOne.rb文件），修改并执行ApiOne.rb文件，则可以生成最终的测试数据（YML文件）及测试类和Case文件。如果开发框架支持（有途径可解析出参数），则可以通过脚本直接生成整个服务下所有接口的测试代码，实现自动化Case的同步开发。这种处理过程主要是一并解决了以下几个问题：\u003c/p\u003e\u003col\u003e\u003cli\u003e复杂结构的测试数据构造\u003c/li\u003e\u003cli\u003e动态参数的赋值\u003c/li\u003e\u003cli\u003e测试数据的维护\u003c/li\u003e\u003cli\u003e测试数据的加载\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e假设有以下这样一个接口请求格式，包含一个orderInfo的子节点，及payInfo的list，还需要解决一些变化值的问题，如各种id和time（暂且称为动态字段）。一般框架中会以JSON格式来作为测试用例的请求格式，在代码中按变量处理动态字段值。JSON作为请求数据的保存形式，存在一个很大的问题，就是后期维护，尤其是Case数量较多的时候。因此，考虑仍以Excel为数据维护的初始形式（使用上更直观），通过Sheet的嵌套来处理复杂结构，也便于后期接口参数变动后的Case维护。\u003c/p\u003e\u003cpre\u003e\u003ccode\u003euserId: E000001\nrequestId: \u0026#39;1938670097\u0026#39;\norderInfo:\n orderId: \u0026#39;6778043386\u0026#39;\n count: \u0026#39;2\u0026#39;\n name: testgoods\npayInfo:\n- transactionId: \u0026#39;510455433082284\u0026#39;\n payTime: \u0026#39;2017-04-04 13:03:34\u0026#39;\n payType: BOC\n- transactionId: \u0026#39;167338836018587\u0026#39;\n payTime: \u0026#39;2017-04-04 13:03:34\u0026#39;\n payType: Wallet\ncreateTime: \u0026#39;2017-04-04 13:03:34\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e测试数据的Excel做如下设计，Main中为第一层参数结构，预期响应另分一个Sheet，子节点和list节点的内容写在对应的Sheet中，动态值均置为空，在接口数据类中处理，orderInfo节点和payInfo节点均另写在新的Sheet中，用于单接口数据驱动的Case与链路回归用Case分开，当然这会增加一些Case维护的成本，可以选择是否区分。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/16d2599f.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e示例的数据结构，通过以下语句即可实现，如果需要为后续接口测试提供前置步骤的数据，也可以同步实现，下例中为后续接口生成了5条请求数据。针对接口参数变动的情况，可以修改Excel和数据处理类文件，执行一遍即可，也提供了批量重新生成所有接口数据的脚本。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003eclass Demo \u0026lt; ApiCaseBase\n\t\n  update self.request,:requestId=\u0026gt;\u0026#39;gen_randcode(10)\u0026#39;,:createTime=\u0026gt;\u0026#39;get_datetime\u0026#39;\n  add_node self.request,\u0026#34;orderInfo\u0026#34;,:orderId=\u0026gt;\u0026#39;gen_randcode(10)\u0026#39;\n  add_list self.request,\u0026#34;payInfo\u0026#34;,:transactionId=\u0026gt;\u0026#39;gen_randcode(15)\u0026#39;,:payTime=\u0026gt;\u0026#39;get_datetime\u0026#39;\n  \n  sheetData={\u0026#39;ForApiOther\u0026#39;=\u0026gt;5}\n  \n  generate_data self,sheetData do\n    update_force @data,:orderId=\u0026gt;\u0026#39;gen_randcode(10)\u0026#39;,:createTime=\u0026gt;\u0026#39;get_datetime\u0026#39;\n    add_node_force @data,\u0026#34;orderInfo\u0026#34;,:orderId=\u0026gt;\u0026#39;gen_randcode(10)\u0026#39;\n    add_list_force @data,\u0026#34;payInfo\u0026#34;,:transactionId=\u0026gt;\u0026#39;gen_randcode(15)\u0026#39;,:payTime=\u0026gt;\u0026#39;get_datetime\u0026#39;\n  end\nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eExcel作为Case的维护形式，缺点是Case较多情况下频繁读取比较影响时间。在这种情况下，考虑到把数据序列化到YML中，启动执行时接口测试类自动与测试数据进行绑定。在Case中可以直接使用形如 DemoTest.request[1]的请求数据，提高了速度，结构上也清晰了不少。\u003c/p\u003e\u003cp\u003e接口测试类文件（HTTP接口调用为例）生成的模板如下，修改对应的接口信息即可，支持DB验证（代码块p这部分是目前唯一需要写Ruby代码的地方，当然这是非必需项）。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003erequire \u0026#39;apicasebase\u0026#39;\n \nclass PreviewTest\n \n  include ApiTestBase\n \n  set_cookie\n \n  set_domain \u0026#34;Domain_takeaway\u0026#34;\n \n  set_port 80\n \n  set_path \u0026#34;/waimai/ajax/wxwallet/Preview\u0026#34;\n \n  set_method \u0026#34;get\u0026#34;\n \n  set_sql \u0026#34;select * from table\u0026#34;\n \n  p = proc do |dbres|\n    ## do something\n    ## return a hash\n  end\n \n  set_p p\n\nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTestCase文件如下，原则上无需修改，只需要在测试数据的Excel中编写匹配规则及预期输出，基本上实现了单个接口无编码的数据驱动测试。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003erequire \u0026#39;Preview_validate\u0026#39;\n \nRSpec.shared_examples \u0026#34;Preview Example\u0026#34; do |key,requestData,expData|\n \n    it \u0026#39;CaseNo\u0026#39;+ key.to_s + \u0026#39;: \u0026#39;+expData[\u0026#39;memo\u0026#39;] do\n \n      response = PreviewTest.response_of(key)\n      \n      expect(response).to eval(\u0026#34;#{expData[\u0026#39;matcher\u0026#39;]} \u0026#39;#{expData[\u0026#39;expection\u0026#39;]}\u0026#39;\u0026#34;)\n \n    end\nend\n \nRSpec.describe \u0026#34;Preview接口测试\u0026#34;,:project=\u0026gt;\u0026#39;api_m_auto\u0026#39;,:author=\u0026gt;\u0026#39;Neil\u0026#39; do\n  PreviewTest.request.each{|key,parameter|include_examples \u0026#34;Preview Example\u0026#34;,key,PreviewTest.request[key],PreviewTest.expect[key]}\nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接口流程Case编写就是各独立接口的业务逻辑串联，重点是Case的组织，把一些公用的Steps独立出shared_examples，在主流程的Case中include这些shared_examples即可，关联的上下游参数\n通过全局变量来传递。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003eRSpec.describe \u0026#34;业务流程测试\u0026#34; ,:project=\u0026gt;\u0026#39;api_m_auto\u0026#39;,:author =\u0026gt;\u0026#39;Neil\u0026#39; do\n  let(:wm_b_client) { WmBClient.new(\u0026#39;自配\u0026#39;) }\n  \n  before(:context) do\n    init_step\n  end\n  \n  context \u0026#34;在线支付-\u0026gt;商家接单-\u0026gt;确认收货-\u0026gt;评价\u0026#34; do\n    include_examples \u0026#34;OrderAndPay Example\u0026#34;,1\n    include_examples \u0026#34;AcceptOrder Example\u0026#34;\n    include_examples \u0026#34;CommentStep Example\u0026#34;\n  end  \nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过上面的介绍，可以看到，Case的编写大部分可以通过代码生成实现（熟悉以后部分接口也可以根据需要进行操作步骤的取舍，如直接编写YML）。实践下来的情况是，从各方面一无所有，17个人日左右的时间，完成了M站API层接口自动化（业务流程9个，单个接口10个）及点评外卖移动端API的接口自动化（业务流程9个，单个接口20个），实现了外卖业务全链路接口回归，平均每个业务流Case步骤9个左右。期间也培养了一名之前未接触过Ruby的同学，在完成了第一版开发后，两名初级阶段的同学逐步承担起了框架的改进工作，实现了更多有效的验证Matcher，并支持了移动端API多版本的测试。之后的回归测试不仅时间上缩减了50%以上，也通过接口自动化3次发现了问题，其中一次API不同版本导致的Bug充分体现了自动化测试的效率。通过ci_reporter，可以方便地将Rspec的报告格式转为JUnit的XML格式，在Jenkins中做对应的展示。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/309c62eb.png\" alt=\"测试报告jenkins展示\"/\u003e\u003c/p\u003e\u003ch3 id=\"解决接口多版本测试的例子\"\u003e解决接口多版本测试的例子\u003c/h3\u003e\u003cp\u003e移动端API自动化中存在的问题就是，一个接口会存在多个版本并存的情况，有header中内容不同的，或formdata内容不同的情况，在接口回归中必须都要照顾到，在Coral-API中我们采用以下方式进行处理。\u003c/p\u003e\u003cp\u003e在config.yml中定义各版本的header。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003eDomain_takeaway_header:\n\tv926: \u0026#39;{\u0026#34;connection\u0026#34;:\u0026#34;upgrade\u0026#34;,\u0026#34;x-forwarded-for\u0026#34;:\u0026#34;172.24.121.32, 203.76.219.234\u0026#34;,\u0026#34;mkunionid\u0026#34;:\u0026#34;-113876624192351423\u0026#34;,\u0026#34;pragma-apptype\u0026#34;:\u0026#34;com.dianping.ba.dpscope\u0026#34;,\u0026#34;mktunneltype\u0026#34;:\u0026#34;tcp\u0026#34;,\u0026#34;pragma-dpid\u0026#34;:\u0026#34;-113876624192351423\u0026#34;,\u0026#34;pragma-token\u0026#34;:\u0026#34;e7c10bf505535bfddeba94f5c050550adbd9855686816f58f0b5ca08eed6acc6\u0026#34;,\u0026#34;user-agent\u0026#34;:\u0026#34;MApi 1.1 (dpscope 9.4.0 appstore; iPhone 10.0.1 iPhone9,1; a0d0)\u0026#34;,\u0026#34;pragma-device\u0026#34;:\u0026#34;598f7d44120d0bf9eb7cf1d9774d3ac43faed266\u0026#34;,\u0026#34;pragma-os\u0026#34;:\u0026#34;MApi 1.1 (dpscope 9.2.6 appstore; iPhone 10.0.1 iPhone9,1; a0d0)\u0026#34;,\u0026#34;mkscheme\u0026#34;:\u0026#34;https\u0026#34;,\u0026#34;x-forwarded-for-port\u0026#34;:\u0026#34;60779\u0026#34;,\u0026#34;X-CAT-TRACE-MODE\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;network-type\u0026#34;:\u0026#34;wifi\u0026#34;,\u0026#34;x-real-ip\u0026#34;:\u0026#34;203.76.219.234\u0026#34;,\u0026#34;pragma-newtoken\u0026#34;:\u0026#34;e7c10bf505535bfddeba94f5c050550adbd9855686816f58f0b5ca08eed6acc6\u0026#34;,\u0026#34;pragma-appid\u0026#34;:\u0026#34;351091731\u0026#34;,\u0026#34;mkoriginhost\u0026#34;:\u0026#34;mobile.dianping.com\u0026#34;,\u0026#34;pragma-unionid\u0026#34;:\u0026#34;91d9c0e21aca4170bf97ab897e5151ae0000000000040786871\u0026#34;}\u0026#39; \n    v930: \u0026#39;{\u0026#34;connection\u0026#34;:\u0026#34;upgrade\u0026#34;,\u0026#34;x-forwarded-for\u0026#34;:\u0026#34;172.24.121.32, 203.76.219.234\u0026#34;,\u0026#34;mkunionid\u0026#34;:\u0026#34;-113876624192351423\u0026#34;,\u0026#34;pragma-apptype\u0026#34;:\u0026#34;com.dianping.ba.dpscope\u0026#34;,\u0026#34;mktunneltype\u0026#34;:\u0026#34;tcp\u0026#34;,\u0026#34;pragma-dpid\u0026#34;:\u0026#34;-113876624192351423\u0026#34;,\u0026#34;pragma-token\u0026#34;:\u0026#34;e7c10bf505535bfddeba94f5c050550adbd9855686816f58f0b5ca08eed6acc6\u0026#34;,\u0026#34;user-agent\u0026#34;:\u0026#34;MApi 1.1 (dpscope 9.4.0 appstore; iPhone 10.0.1 iPhone9,1; a0d0)\u0026#34;,\u0026#34;pragma-device\u0026#34;:\u0026#34;598f7d44120d0bf9eb7cf1d9774d3ac43faed266\u0026#34;,\u0026#34;pragma-os\u0026#34;:\u0026#34;MApi 1.1 (dpscope 9.3.0 appstore; iPhone 10.0.1 iPhone9,1; a0d0)\u0026#34;,\u0026#34;mkscheme\u0026#34;:\u0026#34;https\u0026#34;,\u0026#34;x-forwarded-for-port\u0026#34;:\u0026#34;60779\u0026#34;,\u0026#34;X-CAT-TRACE-MODE\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;network-type\u0026#34;:\u0026#34;wifi\u0026#34;,\u0026#34;x-real-ip\u0026#34;:\u0026#34;203.76.219.234\u0026#34;,\u0026#34;pragma-newtoken\u0026#34;:\u0026#34;e7c10bf505535bfddeba94f5c050550adbd9855686816f58f0b5ca08eed6acc6\u0026#34;,\u0026#34;pragma-appid\u0026#34;:\u0026#34;351091731\u0026#34;,\u0026#34;mkoriginhost\u0026#34;:\u0026#34;mobile.dianping.com\u0026#34;,\u0026#34;pragma-unionid\u0026#34;:\u0026#34;91d9c0e21aca4170bf97ab897e5151ae0000000000040786871\u0026#34;}\u0026#39;\n    ......\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在接口测试类被加载时会进行全局变量赋值，同时替换header里对应节点的token，测试数据YML文件中则做这样的描述，每条数据的header则较方便地被替换。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003e---\nMain:\n  1: \u0026amp;DEFAULT\n    headers: \u0026#39;\u0026lt;%= $v926 %\u0026gt;\u0026#39;\n    host: mobile.51ping.com\n    port: \u0026#39;80\u0026#39;\n    path: \u0026#34;/deliveryaddresslist.ta\u0026#34;\n    search: \u0026#34;?geotype=2\u0026amp;actuallat=31.217329\u0026amp;actuallng=121.415603\u0026amp;initiallat=31.22167778439444\u0026amp;initiallng=121.42671951083571\u0026#34;\n    method: GET\n    query: \u0026#39;{\u0026#34;geotype\u0026#34;:\u0026#34;2\u0026#34;,\u0026#34;actuallat\u0026#34;:\u0026#34;31.217329\u0026#34;,\u0026#34;actuallng\u0026#34;:\u0026#34;121.415603\u0026#34;,\u0026#34;initiallat\u0026#34;:\u0026#34;31.22167778439444\u0026#34;,\u0026#34;initiallng\u0026#34;:\u0026#34;121.42671951083571\u0026#34;}\u0026#39;\n    formData: \u0026#34;{}\u0026#34;\n    scheme: \u0026#39;http:\u0026#39;\n  2:\n    \u0026lt;\u0026lt;: *DEFAULT\n    headers: \u0026#39;\u0026lt;%= $v930 %\u0026gt;\u0026#39;\n  3:\n    \u0026lt;\u0026lt;: *DEFAULT\n    headers: \u0026#39;\u0026lt;%= $v940 %\u0026gt;\u0026#39;\n  4:\n    \u0026lt;\u0026lt;: *DEFAULT\n    headers: \u0026#39;\u0026lt;%= $v950 %\u0026gt;\u0026#39;\n  5:\n    \u0026lt;\u0026lt;: *DEFAULT\n    headers: \u0026#39;\u0026lt;%= $v990 %\u0026gt;\u0026#39;\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"解决rpc接口测试\"\u003e解决RPC接口测试\u003c/h3\u003e\u003cp\u003eHTTP接口的测试框架选择面还是比较多的，RPC调用的框架如何测试呢？答案就是JRuby + Java的反射调用，在Pigeon接口中我们已经试点了这种方式，证明是可行的，针对不同的RPC框架实现不同的Adapter（Jar文件），Coral-API传参（JSON格式）给Adapter，Adapter通过解析参数进行反射调用，这样对于框架来说无需改动，只需对部分文件模板稍作调整，也无需在Ruby中混写Java代码，实现了最少的代码量—2行。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/70d10d3e.png\" alt=\"rpc调用\"/\u003e\u003c/p\u003e\u003ch2 id=\"ui自动化框架coral-app\"\u003eUI自动化框架Coral-APP\u003c/h2\u003e\u003ch3 id=\"框架思想\"\u003e框架思想\u003c/h3\u003e\u003cp\u003eApp的UI自动化，Ruby的简便性更明显，尤其Appium提供了对Ruby良好的支持，各种UI框架的优劣就不在此赘述了。综合比较了Appium与Calabash后，选择了前者，测试框架选用了更适合业务流描述的Cucumber，沿用了以前在Web自动化中使用的对象库概念，将页面元素存储在CSV中，包括了Android与iOS的页面对象描述，满足不同系统平台的测试需要。在针对微信M站的UI自动化方案中，还需解决微信WebView的切换，及多窗口的切换问题，appium_lib都提供了较好的支持，下面介绍下结合了Appium及Cucumber的自动化框架Coral-APP。\u003c/p\u003e\u003cp\u003e框架结构如下图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/2bfa4216.png\" alt=\"coral-app\"/\u003e\u003c/p\u003e\u003cp\u003estep_definitions目录下为步骤实现，public_step.rb定义了一些公共步骤，比如微信测试需要用到的上下文切换，Webview里的页面切换功能，也可以通过support目录下的global_method.rb里新增的Kernel中的方法来实现。\u003c/p\u003e\u003cp\u003esupport/native目录下为app测试的配置文件，support/web目录下为h5测试的配置文件。\u003c/p\u003e\u003cp\u003esupport/env.rb 为启动文件，主要步骤如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003e$caps = Appium.load_appium_txt file: File.expand_path(\u0026#39;../app/appium.txt\u0026#39;, __FILE__), verbose: true\n \n$caps[:caps].store(\u0026#34;chromeOptions\u0026#34;,{\u0026#34;androidProcess\u0026#34;:\u0026#34;com.tencent.mm:tools\u0026#34;})\n \n$driver = Appium::Driver.new($caps,true)\n \nElements.generate_all_objects\n \nBefore{$driver.start_driver}\n\nAfter{$driver.quit_driver}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003esupport/elements下为对象库CSV文件，内容如下图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/06392013.png\" alt=\"对象库文件\"/\u003e\u003c/p\u003e\u003cp\u003esupport/elements.rb为对象库实现，将CSV中的描述转换为Elements模块中对象的功能，这样在Page中就可以直接使用类似“Elements.微信我” 这样的对象描述了。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003e......\n  \ndef self.define_ui_object(element)\n  case $caps[:caps][:platformName].downcase\n    when \u0026#34;android\u0026#34;\n      idempotently_define_singleton_method(element[\u0026#34;OBJNAME\u0026#34;]){$driver.find_element(:\u0026#34;#{element[\u0026#34;ATTRIBUTE\u0026#34;]}\u0026#34;,\u0026#34;#{element[\u0026#34;ANDROID_IDENTITY\u0026#34;]}\u0026#34;)}\n    else\n      idempotently_define_singleton_method(element[\u0026#34;OBJNAME\u0026#34;]){$driver.find_element(:\u0026#34;#{element[\u0026#34;ATTRIBUTE\u0026#34;]}\u0026#34;,\u0026#34;#{element[\u0026#34;IOS_IDENTITY\u0026#34;]}\u0026#34;)}\n  end\nend\n \n......\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003esupport/pages为Page层，实现了每个页面下的操作，目前把它实现为Kernel中的方法，采用中文命名，便于阅读使用。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003emodule Kernel\n  def 点击我\n    Elements.微信我.click\n  end\n \n  def 点击收藏按钮\n    Elements.微信收藏.click\n  end\n \n  def 点击收藏项\n    Elements.微信收藏链接.click\n  end\n \n  def 点击收藏中的美团外卖链接\n    Elements.微信收藏链接URL.click\n  end\nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003estep里的步骤我们可以这样写，封装好足够的公共步骤或方法，Case的编写就是这么简单。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003eWhen /^进入美团外卖M站首页$/ do\n \n  点击我\n \n  点击收藏按钮\n \n  点击收藏项\n \n  点击收藏中的美团外卖链接\n \n  等待 5\n \n  step \u0026#34;切换到微信Webview\u0026#34;\n \n  等待 15\n \n  step \u0026#34;切换到美团外卖window\u0026#34;\n \nend\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e最终Feature内容如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\"\u003eFeature: 回归下单主流程\n  打开微信-\u0026gt;进入首页-\u0026gt;定位-\u0026gt;进入自动化商户-\u0026gt;下单-\u0026gt;支付-\u0026gt;订单详情\n  Scenario:\n    When 进入美团外卖M站首页\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e相对于其他的UI测试框架，使用接近自然语言的描述，提高了Case可读性，编写上也没有其他框架那么复杂。当然UI自动化中还是有一些小难点的，尤其是Hybrid应用，Appium目前还存在些对使用影响不大的Bug，在框架试用完成的情况下，将在微信入口体验优化项目结束后的进一步使用中去总结与完善。\u003c/p\u003e\u003ch2 id=\"质量工作的自动化\"\u003e质量工作的自动化\u003c/h2\u003e\u003cp\u003e都知道在美团点评，QA还担负着质量控制的工作，当功能+自动化+性能+其他测试工作于一身，而且是1:8的测试开发比下，如何去关注质量的改进？答案只有：工具化、自动化。开发这样一个小系统，技术方案选择上考虑主要是效率和学习成本，符合敏捷开发的特点，基于这些因素，应用了被称为“Web开发的最佳实践”的Rails框架。\u003c/p\u003e\u003cp\u003eRails的设计有些颠覆传统的编程理念，CRUD的实现上不用说了，一行命令即可，数据库层的操作，通过migration搞定，在Mail，Job等功能的实现上也非常方便，框架都有对应的模块，并且提供了大量的组件，Session、Cookie、安全密码、邮件地址校验都有对应的gem，感觉不像是在写代码，更像是在配置项目，不知不觉，一个系统雏形就完成了，整理了下项目中使用到的gem，主要有以下这些。\u003c/p\u003e\u003cp\u003e前端相关：\u003c/p\u003e\u003col\u003e\u003cli\u003ebootstrap-sass Bootstrap框架\u003c/li\u003e\u003cli\u003ejquery-rails jQuery框架\u003c/li\u003e\u003cli\u003esimple_form 优化的form组件\u003c/li\u003e\u003cli\u003echartkick 堪称一行代码即可的图表组件\u003c/li\u003e\u003cli\u003ehightchart 图表组件\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e后端相关:\u003c/p\u003e\u003col\u003e\u003cli\u003evalidates_email_format_of 邮件地址校验\u003c/li\u003e\u003cli\u003ehas_secure_password 安全密码组件\u003c/li\u003e\u003cli\u003emysql2 MySQL连接组件\u003c/li\u003e\u003cli\u003ecancancan 权限管理组件\u003c/li\u003e\u003cli\u003esidekiq 队列中间件\u003c/li\u003e\u003cli\u003esidekiq-cron 定时Job组件\u003c/li\u003e\u003cli\u003erest-client Http And Rest Client For Ruby\u003c/li\u003e\u003cli\u003ewill_paginate 分页组件\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e从搭建开发环境、写Demo，自己做产品、开发、测试、搭建生产环境、部署，边参阅文档边实现，总共18个人日左右，实现了平台基础功能、线上故障问题的管理及通知、测试报告的管理及通知、Sonar数据的抽取（Job及邮件）、Bug数据的抽取（Job）、自动化测试项目的接入、质量数据的Dashboard各类数据图表展示等功能，以下为系统功能的两个示例:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e后台管理界面\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/2772396b.png\" alt=\"shwmqp manager\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e线下缺陷周趋势\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/8a95fb3a.png\" alt=\"shwmqp manager\"/\u003e\u003c/p\u003e\u003cp\u003e应用Rails，团队较快进入了可以通过数据进行质量分析的初级阶段，当然还有很长的路要走，在从0到1的这个过程中，还是较多地体会到了敏捷开发的特性，也充分感受到了DRY理念。\u003c/p\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\u003cp\u003e以上为半年左右时间内，外卖上海QA团队在自动化工作上的一些实践，总的来说，达到一定预期效果，整理这篇文章分享一些心得。所谓的主流与小众并非绝对，主要从几个方面衡量：\u003c/p\u003e\u003col\u003e\u003cli\u003e应用领域。Ruby因为性能问题，始终不太主流，但并不意味着它一无是处，用在测试领域，开发效率、DSL的友好性、语言的粘合性、使用者的学习低成本，都能发挥很大的优势。\u003c/li\u003e\u003cli\u003e使用群体。不同的使用群体对于技能掌握的要求也是不同的，能达到同样效果甚至超过预期则就可以选择哪怕“小众”的方案。\u003c/li\u003e\u003cli\u003e环境背景。其实有很多初创公司选择Ruby作为初期的技术栈有一定的道理，而这与我们当初的情景有相似之处，实际效果也体现了语言的特性。\u003cbr/\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e当然应用“小众”技术，必然要面对不少挑战：如何迅速培养能掌握相关技术的同学，与其他语言平台的衔接问题，面对团队的质疑等。尤其Ruby属于易学难精的那种，从脚本语言应用层次上升到动态语言设计层次还是需要一定的学习曲线的，也就是说对于使用者来说是简单的，对于设计者的能力要求较高，就像流传的Ruby程序员的进阶过程就是魔法师的养成史。\u003c/p\u003e\u003cp\u003e正因为有特色的技术，才值得去研究和学习，就像它的设计者所说，目的就是为了让开发人员觉得编程是件快乐的事情。做了这么些年的测试，还能够不停止写代码的脚步，也是因为几年前开始接触Ruby。不论将来是否成为主流，它仍然是测试领域工具语言的不错选择，不管以后会出现什么样的技术，选型的标准也不会改变。技术的世界没有主流与小众，只有理解正确与否，应用得当与否。\u003c/p\u003e\u003ch2 id=\"招聘信息\"\u003e招聘信息\u003c/h2\u003e\u003cp\u003e最后插播一条广告，美团外卖上海研发中心长期招聘前端、客户端、后端、QA及数据、算法相关的工程师，欢迎有兴趣的同学发送简历到huangzhuolin02@meituan.com。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2018-04-27T00:00:00Z",
  "Author": "soulteary@gmail.com"
}