{
  "Source": "tech.meituan.com",
  "Title": "大众点评App的短视频耗电量优化实战",
  "Link": "https://tech.meituan.com/2018/03/11/dianping-shortvideo-battery-testcase.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\u003cp\u003e美团测试团队负责App的质量保证工作，日常除了App的功能测试以外，还会重点关注App的性能测试。现在大家对手机越来越依赖，而上面各App的耗电量，直接影响了手机的待机时间，是用户非常关心的一点。本文主要通过一个典型案例，介绍App性能测试中的电量测试，并总结了我们由此引发的一些思考。\u003c/p\u003e\u003ch2 id=\"一-案例分析\"\u003e一、案例分析\u003c/h2\u003e\u003cp\u003e短视频作为已被市场验证的新内容传播载体，能有效增加用户停留时长。大众点评App从9.3版本开始推出短视频相关内容，在各页面新增了短视频模块。在短视频功能测试中，我们发现如果在视频列表页中播放视频，手机很快就会发烫。针对这种现象，我们马上拉取数据进行了分析，测试数据表明，视频列表页耗电量竟然是详情页的\u003cstrong\u003e11倍\u003c/strong\u003e。这是怎么回事儿呢？\u003c/p\u003e\u003cp\u003e目前行业内有很多电量测试的方法，我们采用的是\u003ca href=\"https://github.com/google/battery-historian\"\u003eBattery Historian\u003c/a\u003e，这是Google推出的一款Android系统电量分析工具，支持5.0(API 21)及以上系统手机的电量分析。\u003c/p\u003e\u003ch3 id=\"1-测试对象\"\u003e1. 测试对象\u003c/h3\u003e\u003cp\u003e短视频主要包括三个核心页面：视频列表页、视频详情页、作者页，本次的测试对象就是这三个页面。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/9fbbe9679486ee45aae46504837f880467417.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003ch3 id=\"2-测试过程\"\u003e2. 测试过程\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e测试机型\u003c/strong\u003e：华为Mate 9 Android 7.0\n\u003cstrong\u003e电池容量\u003c/strong\u003e：4000mAh\u003cbr/\u003e\u003cstrong\u003e播放的视频时长\u003c/strong\u003e：1min15s\n\u003cstrong\u003e测试场景设计\u003c/strong\u003e：WiFi环境下，打开App，播放视频，通过点击“重新播放”，连续播放10次\n\u003cstrong\u003e对比场景\u003c/strong\u003e：停在App首页20min，手机不灭屏\n\u003cstrong\u003e注意\u003c/strong\u003e：测试过程不充电，每次测试环境一致\u003c/p\u003e\u003ch3 id=\"3-测试结果\"\u003e3. 测试结果\u003c/h3\u003e\u003cp\u003e如下是Battery Historian测试结果部分截图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/68ae286e.png\" alt=\"视频列表页\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/cf681242.png\" alt=\"视频详情页\"/\u003e\u003c/p\u003e\u003cp\u003e对测试结果数据进行汇总整理：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/4f504ddc.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e消耗电量：系统总电量的占比\u003c/p\u003e\u003cp\u003e从测试结果可以看到，短视频列表页耗电量特别高，是视频详情页的\u003cstrong\u003e11倍\u003c/strong\u003e。\u003c/p\u003e\u003ch3 id=\"4-问题定位\"\u003e4. 问题定位\u003c/h3\u003e\u003cp\u003e视频列表页消耗电量过高，从测试数据可以很明显的看出来，视频列表页CPU占用时间高很多。从播放器布局来看，列表页和作者页比视频详情页只是多出了动画音符。如下图，红框中圈出的视频左下角的音符。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/087fd7e2.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e电量消耗差异这么大，是否跟动画音符有关呢。为了排除这个问题，重新编译了一个去掉动画音符的APK进行测试。测试结果：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f4ab80c9.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e从测试结果来看，CPU和耗电量很明显都下降了很多，因此确定是动画音符引起的。打开GPU视图更新的开关，查看三个页面的绘制情况。打开视频列表页，可以看到，动画音符每波动一次，会导致整个页面都在不停的绘制。如下是视频列表页绘制的情况：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/9dadbaa0f6007be100df6b814699af143567496.gif\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e从动图可以很明显看出该页面绘制十分异常，动画音符每波动一次，会导致整个页面都重新绘制一遍。\u003c/p\u003e\u003cp\u003e所以，到这里就明白了问题的原因，\u003cstrong\u003e因为页面上动画音符的实现方式有问题，动画音符波动时，导致整个页面会跟着一起不停的重新绘制。而页面的重复绘制，会使App CPU占用比正常情况下高出很多，进而导致耗电量高。\u003c/strong\u003e\u003c/p\u003e\u003ch3 id=\"5-修复后验证\"\u003e5. 修复后验证\u003c/h3\u003e\u003cp\u003e定位到原因之后，开发针对性的进行了修复。动画音符柱状图的实现，之前设计由多个可变化的单柱形View组成，单个柱形View重写了onMeasure \u0026amp; OnDraw方法，从外部柱状图View中初始化单个柱子的高度，然后自动根据一个函数式来变化高度。\u003cstrong\u003e因为每次都需要层层调用Measure和对应的Layout，所以造成外层控件的多次layout，进而造成CPU占用率增大\u003c/strong\u003e。修复之后，使用另一种方式实现，只重写了View的OnDraw方法，每次使用Canvas画出所有柱状图，使用ValueAnimator来计算变化柱状图高度，\u003cstrong\u003e也不再影响父控件的Layout\u003c/strong\u003e。如下是修复前后的核心代码：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/4e3f9f32.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/a302ea26.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e修复之后动画音符波动时的绘制区域：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/816376660586641a18854c6efe5eb3ba3327156.gif\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e修复之后，重新使用Battery Historian进行验证，测试结果：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/1224587f.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e从上面的测试结果，可以看到，视频列表页和作者页，\u003cstrong\u003e耗电情况得到明显的优化\u003c/strong\u003e。\u003c/p\u003e\u003cp\u003e总结一下，短视频耗电量的问题，\u003cstrong\u003e是由于错误的绘制方法，导致CPU占用过高，进而导致耗电量高\u003c/strong\u003e。那么因为动画音符导致耗电量异常的问题到这里就完美的解决了。CPU负载高，会导致耗电量高是显而易见的。但是还想深入探索一下，在手机系统各App耗电量排行榜中，耗电量是怎么计算的？还有哪些因素会影响耗电量呢？带着这些疑问，我们来看看系统计算耗电量的原理。\u003c/p\u003e\u003ch2 id=\"二-耗电量计算原理\"\u003e二、耗电量计算原理\u003c/h2\u003e\u003cp\u003e根据物理学中的知识，功=电压*电流*时间，但是一部手机中，电压值U正常来说是不会变的，所以可以忽略，只通过电流和时间就可以表示电量。\u003cstrong\u003e模块电量(mAh)=模块电流(mA)*模块耗时(h)\u003c/strong\u003e。模块耗时比较容易理解，但是模块电流怎样获取呢，不同厂商的手机，硬件不同，是否会影响模块的电流呢。看一下系统提供的接口：./frameworks/base/core/java/com/Android/internal/os/PowerProfile.java\u003c/p\u003e\u003cp\u003e该类提供了public double getAveragePower(String type)接口，type可取PowerProfile中定义的常量值，包括POWER_CPU_IDLE（CPU空闲时），POWER_CPU_ACTIVE（CPU处于活动时），POWER_WIFI_ON（WiFi开启时）等各种状态。并且从接口可以看出来，每个模块的电流值，是从power_profile.xml文件取的值。PowerProfile.java只是用于读取power_profile.xml的接口而已，后者才是存储系统耗电信息的核心文件。power_profile.xml文件的存放路径是/system/framework/framework-res.apk。\u003c/p\u003e\u003cp\u003e以Nexus 6P为例，在该路径获取到framework-res.apk文件。使用apktool，对framework-res.apk进行反解析，获取到手机里面的power_profile.xml文件，内容如下所示：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-xml\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\n\u0026lt;device name=\u0026#34;Android\u0026#34;\u0026gt;\n    \u0026lt;item name=\u0026#34;none\u0026#34;\u0026gt;0\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;screen.on\u0026#34;\u0026gt;169.4278765\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;screen.full\u0026#34;\u0026gt;79.09344216\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;bluetooth.active\u0026#34;\u0026gt;25.2\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;bluetooth.on\u0026#34;\u0026gt;1.7\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;wifi.on\u0026#34;\u0026gt;21.21733311\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;wifi.active\u0026#34;\u0026gt;98.04989804\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;wifi.scan\u0026#34;\u0026gt;129.8951166\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;dsp.audio\u0026#34;\u0026gt;26.5\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;dsp.video\u0026#34;\u0026gt;242.0\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;gps.on\u0026#34;\u0026gt;5.661105191\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;radio.active\u0026#34;\u0026gt;64.8918361\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;radio.scanning\u0026#34;\u0026gt;19.13559783\u0026lt;/item\u0026gt;\n    \u0026lt;array name=\u0026#34;radio.on\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;17.52231575\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;5.902211798\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;6.454893079\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;6.771166916\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;6.725541238\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;array name=\u0026#34;cpu.speeds.cluster0\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;384000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;460800\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;600000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;672000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;768000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;864000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;960000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1248000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1344000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1478400\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1555200\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;array name=\u0026#34;cpu.speeds.cluster1\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;384000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;480000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;633600\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;768000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;864000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;960000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1248000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1344000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1440000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1536000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1632000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1728000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1824000\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1958400\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;item name=\u0026#34;cpu.idle\u0026#34;\u0026gt;0.144925583\u0026lt;/item\u0026gt;\n    \u0026lt;item name=\u0026#34;cpu.awake\u0026#34;\u0026gt;9.488210416\u0026lt;/item\u0026gt;\n    \u0026lt;array name=\u0026#34;cpu.active.cluster0\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;202.17\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;211.34\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;224.22\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;238.72\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;251.89\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;263.07\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;276.33\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;314.40\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;328.12\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;369.63\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;391.05\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;array name=\u0026#34;cpu.active.cluster1\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;354.95\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;387.15\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;442.86\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;510.20\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;582.65\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;631.99\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;812.02\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;858.84\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;943.23\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;992.45\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1086.32\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1151.96\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1253.80\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;1397.67\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;array name=\u0026#34;cpu.clusters.cores\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;4\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;4\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;item name=\u0026#34;battery.capacity\u0026#34;\u0026gt;3450\u0026lt;/item\u0026gt;\n    \u0026lt;array name=\u0026#34;wifi.batchedscan\u0026#34;\u0026gt;\n        \u0026lt;value\u0026gt;.0003\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;.003\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;.03\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;.3\u0026lt;/value\u0026gt;\n        \u0026lt;value\u0026gt;3\u0026lt;/value\u0026gt;\n    \u0026lt;/array\u0026gt;\n\u0026lt;/device\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e从文件内容中可以看到，power_profile.xml文件中，定义了消耗电量的各模块。如下图所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/e49562cf.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e文件中定义了该手机各耗电模块在不同状态下的电流值。刚刚提到，电量只跟电流值和时间相关，所以通过这个文件，再加上模块的耗时，就可以计算出App消耗的电量，\u003cstrong\u003eApp电量=∑App模块电量\u003c/strong\u003e。划重点，手机系统里面的电量排行，也是根据这个原理计算的。\u003c/p\u003e\u003cp\u003e了解原理对于平常在App耗电量的测试有很大的帮助。因为获取到手机power_profile.xml文件，就可以清楚的知道这个手机上，哪些模块会耗电，以及哪些模块在什么状态下耗电量最高。那么测试的时候，应该重点关注调用了这些模块的地方。比如App在哪些地方使用WiFi、蓝牙、GPS等等。\u003c/p\u003e\u003cp\u003e例如最近对比测试其他App发现，在一些特定的场景下，该App置于前台20min内，扫描了WiFi 50次，这种异常会导致App耗电量大大增加。并且反过来，当有case报App耗电量异常时，也可以从这些点去考虑，帮助定位问题。\u003c/p\u003e\u003ch2 id=\"三-电量测试方法总结\"\u003e三、电量测试方法总结\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/7d66def3.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e如上，列出的一些常用的电量测试方法。综合各方法的优缺点，在定制个性化电量测试工具之前，目前采用的方法是Battery Historian。目前行业内，App耗电测试有很多种方案，如果仅仅测试出一个整体的电量值，对于定位问题是远远不够的。\u003cstrong\u003e借助Battery Historian，可以查看自设备上次充满电以来各种汇总统计信息，并且可以选择一个App查看详细信息\u003c/strong\u003e。所以QA的测试结果反馈从“这个版本App耗电量”高，变成“这个版本CPU占用高”“这个版本WiFi扫描异常”，可以帮助更快的定位到问题原因及解决问题。\u003c/p\u003e\u003cp\u003e当然，除了测试方法和测试工具，测试场景设计也非常重要。如果是在App内毫无规律的浏览，即使发现页面有问题，有很难定位到是哪个模块的问题。所以要针对性的设计场景，并且进行一些场景的对比，找出差异的地方。\u003c/p\u003e\u003ch2 id=\"四-总结\"\u003e四、总结\u003c/h2\u003e\u003cp\u003e本文主要通过一个案例，介绍关于App电量测试中使用的一些基本方法和思路。电量测试采用的Battery Historian方法，虽然能初步解决问题，但是在实际的应用场景中还存在很多不足。目前美团云测平台，已经集成了电量测试方法，通过自动化操作，获取电量测试文件并进行解析，极大的提高了测试效率。目前每个版本发布之前，我们都会进行专门的电量测试，保障用户的使用体验。在电量测试方面，美团测试团队还在持续的实践和优化中。\u003c/p\u003e\u003ch3 id=\"作者简介\"\u003e作者简介\u003c/h3\u003e\u003cul\u003e\u003cli\u003e倩云，美团客户端测试开发工程师，2015年加入美团，主要负责大众点评App基础功能及Android专项测试工作。\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"招聘信息\"\u003e招聘信息\u003c/h3\u003e\u003cp\u003e点评平台技术部－平台质量中心，Base上海，主要负责大众点评平台入口和基础功能的质量保障。平台包括大众点评App、大众点评微信小程序、PC站：www.dianping.com、M站：m.dianping.com；主要业务涵盖：账号、POI、评价、视频、文章、会员社区、问答、运营活动、搜索推荐、通信链路、运营活动等基础业务。热忱期待各位QA、开发、算法人才加入点评平台技术部。联系邮箱：wanxia.wang#dianping.com。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2018-03-11T00:00:00Z",
  "Author": "soulteary@gmail.com"
}