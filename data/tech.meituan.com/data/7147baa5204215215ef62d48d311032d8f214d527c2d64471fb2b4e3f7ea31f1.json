{
  "Source": "tech.meituan.com",
  "Title": "Java 8系列之重新认识HashMap",
  "Link": "https://tech.meituan.com/2016/06/24/java-hashmap.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"摘要\"\u003e摘要\u003c/h2\u003e\u003cp\u003eHashMap是Java程序员使用频率最高的用于映射(键值对)处理的数据类型。随着JDK（Java Developmet Kit）版本的更新，JDK1.8对HashMap底层的实现进行了优化，例如引入红黑树的数据结构和扩容的优化等。本文结合JDK1.7和JDK1.8的区别，深入探讨HashMap的结构实现和功能原理。\u003c/p\u003e\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\u003cp\u003eJava为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、Hashtable、LinkedHashMap和TreeMap，类继承关系如下图所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/f7fe16a2.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e下面针对各个实现类的特点做一些说明：\u003c/p\u003e\u003cp\u003e(1) \u003cstrong\u003eHashMap\u003c/strong\u003e：它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。\u003c/p\u003e\u003cp\u003e(2) \u003cstrong\u003eHashtable\u003c/strong\u003e：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。\u003c/p\u003e\u003cp\u003e(3) \u003cstrong\u003eLinkedHashMap\u003c/strong\u003e：LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。\u003c/p\u003e\u003cp\u003e(4) \u003cstrong\u003eTreeMap\u003c/strong\u003e：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。\u003c/p\u003e\u003cp\u003e对于上述四种Map类型的类，要求映射中的key是不可变对象。不可变对象是该对象在创建后它的哈希值不会被改变。如果对象的哈希值发生变化，Map对象很可能就定位不到映射的位置了。\u003c/p\u003e\u003cp\u003e通过上面的比较，我们知道了HashMap是Java的Map家族中一个普通成员，鉴于它可以满足大多数场景的使用条件，所以是使用频度最高的一个。下文我们主要结合源码，从存储结构、常用方法分析、扩容以及安全性等方面深入讲解HashMap的工作原理。\u003c/p\u003e\u003ch2 id=\"内部实现\"\u003e内部实现\u003c/h2\u003e\u003cp\u003e搞清楚HashMap，首先需要知道HashMap是什么，即它的存储结构-字段；其次弄明白它能干什么，即它的功能实现-方法。下面我们针对这两个方面详细展开讲解。\u003c/p\u003e\u003ch3 id=\"存储结构-字段\"\u003e存储结构-字段\u003c/h3\u003e\u003cp\u003e从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/e4a19398.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e这里需要讲明白两个问题：数据底层具体存储的是什么？\b这样的存储方式有什么\b优点呢？\u003c/p\u003e\u003cp\u003e(1) 从源码可知，HashMap类中有一个非常重要的字段，就是 Node\u003ck,v\u003e[] table，即哈希桶数组，明显它是一个Node的数组。我们来看Node[JDK1.8]是何物。\u003c/k,v\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003estatic class Node\u0026lt;K,V\u0026gt; implements Map.Entry\u0026lt;K,V\u0026gt; {\n        final int hash;    //用来定位数组索引位置\n        final K key;\n        V value;\n        Node\u0026lt;K,V\u0026gt; next;   //链表的下一个node\n\n        Node(int hash, K key, V value, Node\u0026lt;K,V\u0026gt; next) { ... }\n        public final K getKey(){ ... }\n        public final V getValue() { ... }\n        public final String toString() { ... }\n        public final int hashCode() { ... }\n        public final V setValue(V newValue) { ... }\n        public final boolean equals(Object o) { ... }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNode是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。\u003c/p\u003e\u003cp\u003e(2) HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如程序执行下面代码：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e    map.put(\u0026#34;美团\u0026#34;,\u0026#34;小美\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e系统将调用”美团”这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（高位运算和取模运算，下文有介绍）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。\u003c/p\u003e\u003cp\u003e如果哈希桶数组很大，即使较差的Hash算法也会比较分散，如果哈希桶数组数组很小，即使好的Hash算法也会出现较多碰撞，所以就需要在空间成本和时间成本之间权衡，其实就是在根据实际情况确定哈希桶数组的大小，并在此基础上设计好的hash算法减少Hash碰撞。那么通过什么方式来控制map使得Hash碰撞的概率又小，哈希桶数组（Node\u003ck,v\u003e[] table）占用空间又少呢？答案就是好的Hash算法和扩容机制。\u003c/k,v\u003e\u003c/p\u003e\u003cp\u003e在理解Hash和扩容流程之前，我们得先了解下HashMap的几个字段。从HashMap的默认构造函数源码可知，构造函数就是对下面几个字段进行初始化，源码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e     int threshold;             // 所能容纳的key-value对极限 \n     final float loadFactor;    // 负载因子\n     int modCount;  \n     int size;  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e首先，Node\u003ck,v\u003e[] table的初始化长度length(默认值是16)，Load factor为负载因子(默认值是0.75)，threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold = length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。\u003c/k,v\u003e\u003c/p\u003e\u003cp\u003e结合负载因子的定义公式可知，threshold就是在此Load factor和length(数组长度)对应下允许的最大元素数目，超过这个数目就重新resize(扩容)，扩容后的HashMap容量是之前容量的两倍。默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。\u003c/p\u003e\u003cp\u003esize这个字段其实很好理解，就是HashMap中实际存在的键值对数量。注意和table的长度length、容纳最大键值对数量threshold的区别。而modCount字段主要用来记录HashMap内部结构发生变化的次数，主要用于迭代的快速失败。强调一点，内部结构发生变化指的是结构发生变化，例如put新键值对，但是某个key对应的value值被覆盖不属于结构变化。\u003c/p\u003e\u003cp\u003e在HashMap中，哈希桶数组table的长度length大小必须为2的n次方(一定是合数)，这是一种非常规的设计，常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数，具体证明可以参考\u003ca href=\"http://blog.csdn.net/liuqiyao_01/article/details/14475159\"\u003e这篇文章\u003c/a\u003e，Hashtable初始化桶大小为11，就是桶大小设计为素数的应用（Hashtable扩容后不能保证还是素数）。HashMap采用这种非常规设计，主要是为了在取模和扩容时做优化，同时为了减少冲突，HashMap定位哈希桶索引位置时，也加入了高位参与运算的过程。\u003c/p\u003e\u003cp\u003e这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响HashMap的性能。于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。本文不再对红黑树展开讨论，想了解更多红黑树数据结构的工作原理可以参考\u003ca href=\"http://blog.csdn.net/v_july_v/article/details/6105630\"\u003e这篇文章\u003c/a\u003e。\u003c/p\u003e\u003ch3 id=\"功能实现-方法\"\u003e功能实现-方法\u003c/h3\u003e\u003cp\u003eHashMap的内部功能实现很多，本文主要从根据key获取哈希桶数组索引位置、put方法的详细执行、扩容过程三个具有代表性的点深入展开讲解。\u003c/p\u003e\u003ch4 id=\"1-确定哈希桶数组索引位置\"\u003e1. 确定哈希桶数组索引位置\u003c/h4\u003e\u003cp\u003e不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e方法一：\nstatic final int hash(Object key) {   //jdk1.8 \u0026amp; jdk1.7\n     int h;\n     // h = key.hashCode() 为第一步 取hashCode值\n     // h ^ (h \u0026gt;\u0026gt;\u0026gt; 16)  为第二步 高位参与运算\n     return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16);\n}\n方法二：\nstatic int indexFor(int h, int length) {  //jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的\n     return h \u0026amp; (length-1);  //第三步 取模运算\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里的Hash算法本质上就是三步：\u003cstrong\u003e取key的hashCode值、高位运算、取模运算\u003c/strong\u003e。\u003c/p\u003e\u003cp\u003e对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。\u003c/p\u003e\u003cp\u003e这个方法非常巧妙，它通过h \u0026amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h\u0026amp; (length-1)运算等价于对length取模，也就是h%length，但是\u0026amp;比%具有更高的效率。\u003c/p\u003e\u003cp\u003e在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在\b数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。\u003c/p\u003e\u003cp\u003e下面举例说明下，n为table的长度。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/45205ec2.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch4 id=\"2-分析hashmap的put方法\"\u003e2. 分析HashMap的put方法\u003c/h4\u003e\u003cp\u003eHashMap的put方法执行过程可以通过下图来理解，自己有兴趣\b可以去对比源码更清楚地研究学习。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/d669d29c.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；\n②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，\b转向③；\n③.判断\btable[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；\n④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；\n⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；\b遍历过程中若发现key已经存在直接覆盖value即可；\n⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。\u003c/p\u003e\u003cp\u003eJDK1.8HashMap的put方法源码如下:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e 1 public V put(K key, V value) {\n 2     // 对key的hashCode()做hash\n 3     return putVal(hash(key), key, value, false, true);\n 4 }\n 5 \n 6 final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n 7                boolean evict) {\n 8     Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; int n, i;\n 9     // 步骤①：tab为空则创建\n10     if ((tab = table) == null || (n = tab.length) == 0)\n11         n = (tab = resize()).length;\n12     // 步骤②：计算index，并对null做处理 \n13     if ((p = tab[i = (n - 1) \u0026amp; hash]) == null) \n14         tab[i] = newNode(hash, key, value, null);\n15     else {\n16         Node\u0026lt;K,V\u0026gt; e; K k;\n17         // 步骤③：节点key存在，直接覆盖value\n18         if (p.hash == hash \u0026amp;\u0026amp;\n19             ((k = p.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k))))\n20             e = p;\n21         // 步骤④：判断该链为红黑树\n22         else if (p instanceof TreeNode)\n23             e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(this, tab, hash, key, value);\n24         // 步骤⑤：该链为链表\n25         else {\n26             for (int binCount = 0; ; ++binCount) {\n27                 if ((e = p.next) == null) {\n28                     p.next = newNode(hash, key,value,null);\n                        //链表长度大于8转换为红黑树进行处理\n29                     if (binCount \u0026gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st  \n30                         treeifyBin(tab, hash);\n31                     break;\n32                 }\n                    // key已经存在直接覆盖value\n33                 if (e.hash == hash \u0026amp;\u0026amp;\n34                     ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) \n35\t\t\t\t\t\t\tbreak;\n36                 p = e;\n37             }\n38         }\n39         \n40         if (e != null) { // existing mapping for key\n41             V oldValue = e.value;\n42             if (!onlyIfAbsent || oldValue == null)\n43                 e.value = value;\n44             afterNodeAccess(e);\n45             return oldValue;\n46         }\n47     }\n\n48     ++modCount;\n49     // 步骤⑥：超过最大容量 就扩容\n50     if (++size \u0026gt; threshold)\n51         resize();\n52     afterNodeInsertion(evict);\n53     return null;\n54 }\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"3-扩容机制\"\u003e3. 扩容机制\u003c/h4\u003e\u003cp\u003e扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。\u003c/p\u003e\u003cp\u003e我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e 1 void resize(int newCapacity) {   //传入新的容量\n 2     Entry[] oldTable = table;    //引用扩容前的Entry数组\n 3     int oldCapacity = oldTable.length;         \n 4     if (oldCapacity == MAXIMUM_CAPACITY) {  //扩容前的数组大小如果已经达到最大(2^30)了\n 5         threshold = Integer.MAX_VALUE; //修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了\n 6         return;\n 7     }\n 8  \n 9     Entry[] newTable = new Entry[newCapacity];  //初始化一个新的Entry数组\n10     transfer(newTable);                         //！！将数据转移到新的Entry数组里\n11     table = newTable;                           //HashMap的table属性引用新的Entry数组\n12     threshold = (int)(newCapacity * loadFactor);//修改阈值\n13 }\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e 1 void transfer(Entry[] newTable) {\n 2     Entry[] src = table;                   //src引用了旧的Entry数组\n 3     int newCapacity = newTable.length;\n 4     for (int j = 0; j \u0026lt; src.length; j++) { //遍历旧的Entry数组\n 5         Entry\u0026lt;K,V\u0026gt; e = src[j];             //取得旧Entry数组的每个元素\n 6         if (e != null) {\n 7             src[j] = null;//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）\n 8             do {\n 9                 Entry\u0026lt;K,V\u0026gt; next = e.next;\n10                 int i = indexFor(e.hash, newCapacity); //！！重新计算每个元素在数组中的位置\n11                 e.next = newTable[i]; //标记[1]\n12                 newTable[i] = e;      //将元素放在数组上\n13                 e = next;             //访问下一个Entry链上的元素\n14             } while (e != null);\n15         }\n16     }\n17 } \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003enewTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。\u003c/p\u003e\u003cp\u003e下面举个例子说明下扩容过程。假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。其中的\b哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/b2330062.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/4d8022db.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/d773f86e.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/3cc9813a.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。有兴趣的同学可以研究下JDK1.8的resize源码，写的很赞，如下:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e 1 final Node\u0026lt;K,V\u0026gt;[] resize() {\n 2     Node\u0026lt;K,V\u0026gt;[] oldTab = table;\n 3     int oldCap = (oldTab == null) ? 0 : oldTab.length;\n 4     int oldThr = threshold;\n 5     int newCap, newThr = 0;\n 6     if (oldCap \u0026gt; 0) {\n 7         // 超过最大值就不再扩充了，就只好随你碰撞去吧\n 8         if (oldCap \u0026gt;= MAXIMUM_CAPACITY) {\n 9             threshold = Integer.MAX_VALUE;\n10             return oldTab;\n11         }\n12         // 没超过最大值，就扩充为原来的2倍\n13         else if ((newCap = oldCap \u0026lt;\u0026lt; 1) \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp;\n14                  oldCap \u0026gt;= DEFAULT_INITIAL_CAPACITY)\n15             newThr = oldThr \u0026lt;\u0026lt; 1; // double threshold\n16     }\n17     else if (oldThr \u0026gt; 0) // initial capacity was placed in threshold\n18         newCap = oldThr;\n19     else {               // zero initial threshold signifies using defaults\n20         newCap = DEFAULT_INITIAL_CAPACITY;\n21         newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n22     }\n23     // 计算新的resize上限\n24     if (newThr == 0) {\n25 \n26         float ft = (float)newCap * loadFactor;\n27         newThr = (newCap \u0026lt; MAXIMUM_CAPACITY \u0026amp;\u0026amp; ft \u0026lt; (float)MAXIMUM_CAPACITY ?\n28                   (int)ft : Integer.MAX_VALUE);\n29     }\n30     threshold = newThr;\n31     @SuppressWarnings({\u0026#34;rawtypes\u0026#34;，\u0026#34;unchecked\u0026#34;})\n32         Node\u0026lt;K,V\u0026gt;[] newTab = (Node\u0026lt;K,V\u0026gt;[])new Node[newCap];\n33     table = newTab;\n34     if (oldTab != null) {\n35         // 把每个bucket都移动到新的buckets中\n36         for (int j = 0; j \u0026lt; oldCap; ++j) {\n37             Node\u0026lt;K,V\u0026gt; e;\n38             if ((e = oldTab[j]) != null) {\n39                 oldTab[j] = null;\n40                 if (e.next == null)\n41                     newTab[e.hash \u0026amp; (newCap - 1)] = e;\n42                 else if (e instanceof TreeNode)\n43                     ((TreeNode\u0026lt;K,V\u0026gt;)e).split(this, newTab, j, oldCap);\n44                 else { // 链表优化重hash的代码块\n45                     Node\u0026lt;K,V\u0026gt; loHead = null, loTail = null;\n46                     Node\u0026lt;K,V\u0026gt; hiHead = null, hiTail = null;\n47                     Node\u0026lt;K,V\u0026gt; next;\n48                     do {\n49                         next = e.next;\n50                         // 原索引\n51                         if ((e.hash \u0026amp; oldCap) == 0) {\n52                             if (loTail == null)\n53                                 loHead = e;\n54                             else\n55                                 loTail.next = e;\n56                             loTail = e;\n57                         }\n58                         // 原索引+oldCap\n59                         else {\n60                             if (hiTail == null)\n61                                 hiHead = e;\n62                             else\n63                                 hiTail.next = e;\n64                             hiTail = e;\n65                         }\n66                     } while ((e = next) != null);\n67                     // 原索引放到bucket里\n68                     if (loTail != null) {\n69                         loTail.next = null;\n70                         newTab[j] = loHead;\n71                     }\n72                     // 原索引+oldCap放到bucket里\n73                     if (hiTail != null) {\n74                         hiTail.next = null;\n75                         newTab[j + oldCap] = hiHead;\n76                     }\n77                 }\n78             }\n79         }\n80     }\n81     return newTab;\n82 }\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"线程安全性\"\u003e线程安全性\u003c/h2\u003e\u003cp\u003e在多线程使用场景中，应该尽量避免使用线程不安全的HashMap，而使用线程安全的ConcurrentHashMap。那么为什么说HashMap是线程不安全的，下面举例子说明在并发的多线程使用场景中使用HashMap可能造成死循环。代码例子如下(便于理解，仍然使用JDK1.7的环境)：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epublic class HashMapInfiniteLoop {  \n\n    private static HashMap\u0026lt;Integer,String\u0026gt; map = new HashMap\u0026lt;Integer,String\u0026gt;(2，0.75f);  \n    public static void main(String[] args) {  \n        map.put(5， \u0026#34;C\u0026#34;);  \n\n        new Thread(\u0026#34;Thread1\u0026#34;) {  \n            public void run() {  \n                map.put(7, \u0026#34;B\u0026#34;);  \n                System.out.println(map);  \n            };  \n        }.start();  \n        new Thread(\u0026#34;Thread2\u0026#34;) {  \n            public void run() {  \n                map.put(3, \u0026#34;A);  \n                System.out.println(map);  \n            };  \n        }.start();        \n    }  \n} \n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中，map初始化为一个长度为2的数组，loadFactor=0.75，threshold=2*0.75=1，也就是说当put第二个key的时候，map就需要进行resize。\u003c/p\u003e\u003cp\u003e通过设置断点让线程1和线程2同时debug到transfer方法(3.3小节代码块)的首行。注意此时两个线程已经成功添加数据。放开thread1的断点至transfer方法的“Entry\u003ck，v\u003e next = e.next;” 这一行；然后放开线程2的的断点，让线程2进行resize。结果如下图。\u003c/k，v\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/7df99266.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e注意，Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，指向了线程二重组后的链表。\u003c/p\u003e\u003cp\u003e线程一被调度回来执行，先是执行 newTalbe[i] = e， 然后是e = next，导致了e指向了key(7)，而下一次循环的next = e.next导致了next指向了key(3)。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/4c3c28fb.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/6c8d086a.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003ee.next = newTable[i] 导致 key(3).next 指向了 key(7)。注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/6eed9aaf.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e于是，当我们用线程一调用map.get(11)时，悲剧就出现了——Infinite Loop。\u003c/p\u003e\u003ch2 id=\"jdk1-8与jdk1-7的性能对比\"\u003eJDK1.8与JDK1.7的性能对比\u003c/h2\u003e\u003cp\u003eHashMap中，如果key经过hash算法得出的数组索引位置全部不相同，即Hash算法非常好，那样的话，getKey方法的时间复杂度就是O(1)，如果Hash算法技术的结果碰撞非常多，假如Hash算极其差，所有的Hash算法结果得出的索引位置一样，那样所有的键值对都集中到一个桶中，或者在一个链表中，或者在一个红黑树中，时间复杂度分别为O(n)和O(lgn)。 鉴于JDK1.8做了多方面的优化，总体性能优于JDK1.7，下面我们从两个方面用例子证明这一点。\u003c/p\u003e\u003ch3 id=\"hash较均匀的情况\"\u003eHash较均匀的情况\u003c/h3\u003e\u003cp\u003e为了便于测试，我们先写一个类Key，如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eclass Key implements Comparable\u0026lt;Key\u0026gt; {\n\n    private final int value;\n\n    Key(int value) {\n        this.value = value;\n    }\n\n    @Override\n    public int compareTo(Key o) {\n        return Integer.compare(this.value, o.value);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass())\n            return false;\n        Key key = (Key) o;\n        return value == key.value;\n    }\n\n    @Override\n    public int hashCode() {\n        return value;\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个类复写了equals方法，并且提供了相当好的hashCode函数，任何一个值的hashCode都不会相同，因为直接使用value当做hashcode。为了避免频繁的GC，我将不变的Key实例缓存了起来，而不是一遍一遍的创建它们。代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epublic class Keys {\n\n    public static final int MAX_KEY = 10_000_000;\n    private static final Key[] KEYS_CACHE = new Key[MAX_KEY];\n\n    static {\n        for (int i = 0; i \u0026lt; MAX_KEY; ++i) {\n            KEYS_CACHE[i] = new Key(i);\n        }\n    }\n\n    public static Key of(int value) {\n        return KEYS_CACHE[value];\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e现在开始我们的试验，测试需要做的仅仅是，创建不同size的HashMap（1、10、100、……10000000），屏蔽了扩容的情况，代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e   static void test(int mapSize) {\n\n        HashMap\u0026lt;Key, Integer\u0026gt; map = new HashMap\u0026lt;Key,Integer\u0026gt;(mapSize);\n        for (int i = 0; i \u0026lt; mapSize; ++i) {\n            map.put(Keys.of(i), i);\n        }\n\n        long beginTime = System.nanoTime(); //获取纳秒\n        for (int i = 0; i \u0026lt; mapSize; i++) {\n            map.get(Keys.of(i));\n        }\n        long endTime = System.nanoTime();\n        System.out.println(endTime - beginTime);\n    }\n\n    public static void main(String[] args) {\n        for(int i=10;i\u0026lt;= 1000 0000;i*= 10){\n            test(i);\n        }\n    }\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在测试中会查找不同的值，然后度量花费的时间，为了计算getKey的平均时间，我们遍历所有的get方法，计算总的时间，除以key的数量，计算一个平均值，主要用来比较，绝对值可能会受很多环境因素的影响。结果如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/377effbf.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e通过观测测试结果可知，JDK1.8的性能要高于JDK1.7 15%以上，在某些size的区域上，甚至高于100%。由于Hash算法较均匀，JDK1.8引入的红黑树效果不明显，下面我们看看Hash不均匀的的情况。\u003c/p\u003e\u003ch3 id=\"hash极不均匀的情况\"\u003eHash极不均匀的情况\u003c/h3\u003e\u003cp\u003e假设我们又一个非常差的Key，它们所有的实例都返回相同的hashCode值。这是使用HashMap最坏的情况。代码修改如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eclass Key implements Comparable\u0026lt;Key\u0026gt; {\n\n    //...\n\n    @Override\n    public int hashCode() {\n        return 1;\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e仍然执行main方法，得出的结果如下表所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/bd20c215.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e从表中结果中可知，随着size的变大，JDK1.7的花费时间是增长的趋势，而JDK1.8是明显的降低趋势，并且呈现对数增长稳定。当一个\b链表太长的时候，HashMap会动态的将它替换成一个红黑树，这话\b的话会将时间复杂度从O(n)降为O(logn)。hash算法均匀和不均匀所花费的时间明显也不相同，这两种情况的相对比较，可以说明一个好的hash算法的重要性。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e测试环境\u003c/strong\u003e：处理器为2.2 GHz Intel Core i7，内存为16 GB 1600 MHz DDR3，SSD硬盘，使用默认的JVM参数，运行在64位的OS X 10.10.1上。\u003c/p\u003e\u003ch2 id=\"小结\"\u003e小结\u003c/h2\u003e\u003col\u003e\u003cli\u003e扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。\u003c/li\u003e\u003cli\u003e负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。\u003c/li\u003e\u003cli\u003eHashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。\u003c/li\u003e\u003cli\u003eJDK1.8引入红黑树大程度优化了HashMap的性能。\u003c/li\u003e\u003cli\u003e还没升级JDK1.8的，现在开始升级吧。HashMap的性能提升仅仅是JDK1.8的冰山一角。\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"参考文献\"\u003e参考文献\u003c/h2\u003e\u003col\u003e\u003cli\u003eJDK1.7\u0026amp;JDK1.8 源码。\u003c/li\u003e\u003cli\u003eCSDN博客频道，\u003ca href=\"http://blog.csdn.net/xuefeng0707/article/details/40797085\"\u003eHashMap多线程死循环问题\u003c/a\u003e，2014。\u003c/li\u003e\u003cli\u003e红黑联盟，\u003ca href=\"http://www.2cto.com/kf/201505/401433.html\"\u003eJava类集框架之HashMap(JDK1.8)源码剖析\u003c/a\u003e，2015。\u003c/li\u003e\u003cli\u003eCSDN博客频道，\u003ca href=\"http://blog.csdn.net/v_july_v/article/details/6105630\"\u003e 教你初步了解红黑树\u003c/a\u003e，2010。\u003c/li\u003e\u003cli\u003eJava Code Geeks，\u003ca href=\"http://www.javacodegeeks.com/2014/04/hashmap-performance-improvements-in-java-8.html\"\u003eHashMap performance improvements in Java 8\u003c/a\u003e，2014。\u003c/li\u003e\u003cli\u003eImportnew，\u003ca href=\"http://www.importnew.com/13384.html\"\u003e危险！在HashMap中将可变对象用作Key\u003c/a\u003e，2014。\u003c/li\u003e\u003cli\u003eCSDN博客频道，\u003ca href=\"http://blog.csdn.net/liuqiyao_01/article/details/14475159\"\u003e为什么一般hashtable的桶数会取一个素数\u003c/a\u003e，2013。\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2016-06-24T00:00:00Z",
  "Author": "soulteary@gmail.com"
}