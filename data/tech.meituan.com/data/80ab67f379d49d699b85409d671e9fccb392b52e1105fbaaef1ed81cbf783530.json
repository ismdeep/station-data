{
  "Source": "tech.meituan.com",
  "Title": "Vuex框架原理与源码分析",
  "Link": "https://tech.meituan.com/2017/04/27/vuex-code-analysis.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003eVuex是一个专为Vue服务，用于管理页面数据状态、提供统一数据操作的生态系统。它集中于MVC模式中的Model层，规定所有的数据操作必须通过 \u003ccode\u003eaction - mutation - state change\u003c/code\u003e 的流程来进行，再结合Vue的数据视图双向绑定特性来实现页面的展示更新。统一的页面状态管理以及操作处理，可以让复杂的组件交互变得简单清晰，同时可在调试模式下进行时光机般的倒退前进操作，查看数据改变过程，使code debug更加方便。\u003c/p\u003e\u003cp\u003e最近在开发的项目中用到了Vuex来管理整体页面状态，遇到了很多问题。决定研究下源码，在答疑解惑之外，能深入学习其实现原理。\u003c/p\u003e\u003cp\u003e先将问题抛出来，使学习和研究更有针对性：\u003cbr/\u003e1. 使用Vuex只需执行 \u003ccode\u003eVue.use(Vuex)\u003c/code\u003e，并在Vue的配置中传入一个store对象的示例，store是如何实现注入的？\u003cbr/\u003e2. state内部是如何实现支持模块配置和模块嵌套的？\u003cbr/\u003e3. 在执行dispatch触发action（commit同理）的时候，只需传入（type, payload），action执行函数中第一个参数store从哪里获取的？\u003cbr/\u003e4. 如何区分state是外部直接修改，还是通过mutation方法修改的？\u003cbr/\u003e5. 调试时的“时空穿梭”功能是如何实现的？\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e注：本文对有Vuex有实际使用经验的同学帮助更大，能更清晰理解Vuex的工作流程和原理，使用起来更得心应手。初次接触的同学，可以先参考Vuex\u003ca href=\"http://vuex.vuejs.org/\"\u003e官方文档\u003c/a\u003e进行基础概念的学习。\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"一-框架核心流程\"\u003e一、框架核心流程\u003c/h2\u003e\u003cp\u003e进行源码分析之前，先了解一下官方文档中提供的核心思想图，它也代表着整个Vuex框架的运行流程。\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/52630863.png\" alt=\"vuex-core\"/\u003e\u003c/p\u003e\u003cp\u003e如图示，Vuex为Vue Components建立起了一个完整的生态圈，包括开发中的API调用一环。围绕这个生态圈，简要介绍一下各模块在核心流程中的主要功能：\u003c/p\u003e\u003cul\u003e\u003cli\u003eVue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。\u003c/li\u003e\u003cli\u003edispatch：操作行为触发方法，是唯一能执行action的方法。\u003c/li\u003e\u003cli\u003eactions：操作行为处理模块。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。\u003c/li\u003e\u003cli\u003ecommit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。\u003c/li\u003e\u003cli\u003emutations：状态改变操作方法。是Vuex修改state的唯一推荐方法，其他修改方式在严格模式下将会报错。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。\u003c/li\u003e\u003cli\u003estate：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。\u003c/li\u003e\u003cli\u003egetters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp\u003eVue组件接收交互行为，调用dispatch方法触发action相关处理，若页面状态需要改变，则调用commit方法提交mutation修改state，通过getters获取到state新值，重新渲染Vue Components，界面随之更新。\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"二-目录结构介绍\"\u003e二、目录结构介绍\u003c/h2\u003e\u003cp\u003e打开Vuex项目，看下源码目录结构。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/e235bbc5.jpg\" alt=\"dir_structure\"/\u003e\u003c/p\u003e\u003cp\u003eVuex提供了非常强大的状态管理功能，源码代码量却不多，目录结构划分也很清晰。先大体介绍下各个目录文件的功能：\n* module：提供module对象与module对象树的创建功能；\n* plugins：提供开发辅助插件，如“时光穿梭”功能，state修改的日志记录功能等；\n* helpers.js：提供action、mutations以及getters的查找API；\n* index.js：是源码主入口文件，提供store的各module构建安装；\n* mixin.js：提供了store在Vue实例上的装载注入；\n* util.js：提供了工具方法如find、deepCopy、forEachValue以及assert等方法。\u003c/p\u003e\u003ch2 id=\"三-初始化装载与注入\"\u003e三、初始化装载与注入\u003c/h2\u003e\u003cp\u003e了解大概的目录及对应功能后，下面开始进行源码分析。\u003ca href=\"https://github.com/vuejs/vuex/blob/dev/src/index.js\"\u003eindex.js\u003c/a\u003e中包含了所有的核心代码，从该文件入手进行分析。\u003c/p\u003e\u003ch3 id=\"3-1-装载实例\"\u003e3.1 装载实例\u003c/h3\u003e\u003cp\u003e先看个简单的例子：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e/**\n *  store.js文件\n *  创建store对象，配置state、action、mutation以及getter\n *   \n **/\n\nimport Vue from \u0026#39;vue\u0026#39;\nimport Vuex from \u0026#39;vuex\u0026#39;\n\n// install Vuex框架\nVue.use(Vuex)\n\n// 创建并导出store对象。为了方便，不配置任何参数\nexport default new Vuex.Store()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003estore.js文件中，加载Vuex框架，创建并导出一个空配置的store对象实例。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e/**\n *  vue-index.js文件\n *  \n *\n **/\n\nimport Vue from \u0026#39;vue\u0026#39;\nimport App from \u0026#39;./../pages/app.vue\u0026#39;\nimport store from \u0026#39;./store.js\u0026#39;\n\nnew Vue({\n  el: \u0026#39;#root\u0026#39;,\n  router,\n  store, \n  render: h =\u0026gt; h(App)\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后在index.js中，正常初始化一个页面根级别的Vue组件，传入这个自定义的store对象。\u003c/p\u003e\u003cp\u003e如\u003cstrong\u003e问题1\u003c/strong\u003e所述，以上实例除了Vue的初始化代码，只是多了一个store对象的传入。一起看下源码中的实现方式。\u003c/p\u003e\u003ch3 id=\"3-2-装载分析\"\u003e3.2 装载分析\u003c/h3\u003e\u003cp\u003eindex.js文件代码执行开头，定义局部 Vue 变量，用于判断是否已经装载和减少全局作用域查找。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003elet Vue\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后判断若处于浏览器环境下且加载过Vue，则执行install方法。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// auto install in dist mode  \nif (typeof window !== \u0026#39;undefined\u0026#39; \u0026amp;\u0026amp; window.Vue) {\n  install(window.Vue)  \n}  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003einstall方法将Vuex装载到Vue对象上，\u003ccode\u003eVue.use(Vuex)\u003c/code\u003e 也是通过它执行，先看下Vue.use方法实现：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction (plugin: Function | Object) {\n  /* istanbul ignore if */\n  if (plugin.installed) {\n    return\n  }\n  // additional parameters\n  const args = toArray(arguments, 1)\n  args.unshift(this)\n  if (typeof plugin.install === \u0026#39;function\u0026#39;) {\n    // 实际执行插件的install方法\n    plugin.install.apply(plugin, args)\n  } else {\n    plugin.apply(null, args)\n  }\n  plugin.installed = true\n  return this\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e若是首次加载，将局部Vue变量赋值为全局的Vue对象，并执行applyMixin方法，install实现如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction install (_Vue) {\n  if (Vue) {\n    console.error(\n      \u0026#39;[vuex] already installed. Vue.use(Vuex) should be called only once.\u0026#39;\n    )\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e来看下applyMixin方法内部代码。如果是2.x.x以上版本，可以使用 hook 的形式进行注入，或使用封装并替换Vue对象原型的_init方法，实现注入。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eexport default function (Vue) {\n  const version = Number(Vue.version.split(\u0026#39;.\u0026#39;)[0])\n\n  if (version \u0026gt;= 2) {\n    const usesInit = Vue.config._lifecycleHooks.indexOf(\u0026#39;init\u0026#39;) \u0026gt; -1\n    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit })\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    const _init = Vue.prototype._init\n    Vue.prototype._init = function (options = {}) {\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit\n      _init.call(this, options)\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e具体实现：将初始化Vue根组件时传入的store设置到this对象的$store属性上，子组件从其父组件引用$store属性，层层嵌套进行设置。在任意组件中执行 \u003ccode\u003ethis.$store\u003c/code\u003e 都能找到装载的那个store对象，vuexInit方法实现如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction vuexInit () {\n  const options = this.$options\n  // store injection\n  if (options.store) {\n    this.$store = options.store\n  } else if (options.parent \u0026amp;\u0026amp; options.parent.$store) {\n    this.$store = options.parent.$store\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e看个图例理解下store的传递。\u003c/p\u003e\u003cp\u003e页面Vue结构图：\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/ebd4a7ed.jpg\" alt=\"cart_vue_structure\"/\u003e\u003c/p\u003e\u003cp\u003e对应store流向：\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/2b53bbc5.jpg\" alt=\"cart_vue_structure\"/\u003e\u003c/p\u003e\u003ch2 id=\"四-store对象构造\"\u003e四、store对象构造\u003c/h2\u003e\u003cp\u003e上面对Vuex框架的装载以及注入自定义store对象进行分析，解决了\u003cstrong\u003e问题1\u003c/strong\u003e。接下来详细分析store对象的内部功能和具体实现，来解答 \u003cstrong\u003e为什么actions、getters、mutations中能从arguments[0]中拿到store的相关数据?\u003c/strong\u003e 等问题。\u003c/p\u003e\u003cp\u003estore对象实现逻辑比较复杂，先看下构造方法的整体逻辑流程来帮助后面的理解：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/280a9260.jpg\" alt=\"cart_vue_structure\"/\u003e\u003c/p\u003e\u003ch3 id=\"4-1-环境判断\"\u003e4.1 环境判断\u003c/h3\u003e\u003cp\u003e开始分析store的构造函数，分小节逐函数逐行的分析其功能。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003econstructor (options = {}) {\n  assert(Vue, `must call Vue.use(Vuex) before creating a store instance.`)\n  assert(typeof Promise !== \u0026#39;undefined\u0026#39;, `vuex requires a Promise polyfill in this browser.`)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在store构造函数中执行环境判断，以下都是Vuex工作的必要条件：\u003cbr/\u003e1. 已经执行安装函数进行装载；\u003cbr/\u003e2. 支持Promise语法。\u003c/p\u003e\u003cp\u003eassert函数是一个简单的断言函数的实现，一行代码即可实现。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction assert (condition, msg) {\n  if (!condition) throw new Error(`[vuex] ${msg}`)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"4-2-数据初始化-module树构造\"\u003e4.2 数据初始化、module树构造\u003c/h3\u003e\u003cp\u003e环境判断后，根据new构造传入的options或默认值，初始化内部数据。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003econst {\n    state = {},\n    plugins = [],\n    strict = false\n} = options\n\n// store internal state\nthis._committing = false // 是否在进行提交状态标识\nthis._actions = Object.create(null) // acitons操作对象\nthis._mutations = Object.create(null) // mutations操作对象\nthis._wrappedGetters = Object.create(null) // 封装后的getters集合对象\nthis._modules = new ModuleCollection(options) // Vuex支持store分模块传入，存储分析后的modules\nthis._modulesNamespaceMap = Object.create(null) // 模块命名空间map\nthis._subscribers = [] // 订阅函数集合，Vuex提供了subscribe功能\nthis._watcherVM = new Vue() // Vue组件用于watch监视变化\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e调用 \u003ccode\u003enew Vuex.store(options)\u003c/code\u003e 时传入的options对象，用于构造ModuleCollection类，下面看看其功能。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003econstructor (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.root = new Module(rawRootModule, false)\n    \n  // register all nested modules\n  if (rawRootModule.modules) {\n    forEachValue(rawRootModule.modules, (rawModule, key) =\u0026gt; {\n      this.register([key], rawModule, false)\n    })\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eModuleCollection主要将传入的options对象整个构造为一个module对象，并循环调用 \u003ccode\u003ethis.register([key], rawModule, false)\u003c/code\u003e 为其中的modules属性进行模块注册，使其都成为module对象，最后options对象被构造成一个完整的组件树。ModuleCollection类还提供了modules的更替功能，详细实现可以查看源文件\u003ca href=\"https://github.com/vuejs/vuex/blob/dev/src/module/module-collection.js\"\u003emodule-collection.js\u003c/a\u003e。\u003c/p\u003e\u003ch3 id=\"4-3-dispatch与commit设置\"\u003e4.3 dispatch与commit设置\u003c/h3\u003e\u003cp\u003e继续回到store的构造函数代码。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// bind commit and dispatch to self\nconst store = this\nconst { dispatch, commit } = this\n\nthis.dispatch = function boundDispatch (type, payload) {\n  return dispatch.call(store, type, payload)\n}\n\nthis.commit = function boundCommit (type, payload, options) {\n  return commit.call(store, type, payload, options)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e封装替换原型中的dispatch和commit方法，将this指向当前store对象。dispatch和commit方法具体实现如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003edispatch (_type, _payload) {\n  // check object-style dispatch\n  const {\n      type,\n      payload\n  } = unifyObjectStyle(_type, _payload) // 配置参数处理\n\n  // 当前type下所有action处理函数集合\n  const entry = this._actions[type]\n  if (!entry) {\n    console.error(`[vuex] unknown action type: ${type}`)\n    return\n  }\n  return entry.length \u0026gt; 1\n      ? Promise.all(entry.map(handler =\u0026gt; handler(payload)))\n      : entry[0](payload)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e前面提到，dispatch的功能是触发并传递一些参数（payload）给对应type的action。因为其支持2种调用方法，所以在dispatch中，先进行参数的适配处理，然后判断action type是否存在，若存在就逐个执行（注：上面代码中的\u003ccode\u003ethis._actions[type]\u003c/code\u003e 以及 下面的 \u003ccode\u003ethis._mutations[type]\u003c/code\u003e 均是处理过的函数集合，具体内容留到后面进行分析）。\u003c/p\u003e\u003cp\u003ecommit方法和dispatch相比虽然都是触发type，但是对应的处理却相对复杂，代码如下。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003ecommit (_type, _payload, _options) {\n  // check object-style commit\n  const {\n      type,\n      payload,\n      options\n  } = unifyObjectStyle(_type, _payload, _options)\n\n  const mutation = { type, payload }\n  const entry = this._mutations[type]\n  if (!entry) {\n    console.error(`[vuex] unknown mutation type: ${type}`)\n    return\n  }\n  // 专用修改state方法，其他修改state方法均是非法修改\n  this._withCommit(() =\u0026gt; {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload)\n    })\n  })\n  \n  // 订阅者函数遍历执行，传入当前的mutation对象和当前的state\n  this._subscribers.forEach(sub =\u0026gt; sub(mutation, this.state))\n\n  if (options \u0026amp;\u0026amp; options.silent) {\n    console.warn(\n        `[vuex] mutation type: ${type}. Silent option has been removed. ` +\n        \u0026#39;Use the filter functionality in the vue-devtools\u0026#39;\n    )\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e该方法同样支持2种调用方法。先进行参数适配，判断触发mutation type，利用_withCommit方法执行本次批量触发mutation处理函数，并传入payload参数。执行完成后，通知所有_subscribers（订阅函数）本次操作的mutation对象以及当前的state状态，如果传入了已经移除的silent选项则进行提示警告。\u003c/p\u003e\u003ch3 id=\"4-4-state修改方法\"\u003e4.4 state修改方法\u003c/h3\u003e\u003cp\u003e_withCommit是一个代理方法，所有触发mutation的进行state修改的操作都经过它，由此来统一管理监控state状态的修改。实现代码如下。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\n_withCommit (fn) {\n  // 保存之前的提交状态\n  const committing = this._committing\n    \n  // 进行本次提交，若不设置为true，直接修改state，strict模式下，Vuex将会产生非法修改state的警告\n  this._committing = true\n    \n  // 执行state的修改操作\n  fn()\n    \n  // 修改完成，还原本次修改之前的状态\n  this._committing = committing\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e缓存执行时的committing状态将当前状态设置为true后进行本次提交操作，待操作完毕后，将committing状态还原为之前的状态。\u003c/p\u003e\u003ch3 id=\"4-5-module安装\"\u003e4.5 module安装\u003c/h3\u003e\u003cp\u003e绑定dispatch和commit方法之后，进行严格模式的设置，以及模块的安装（installModule）。由于占用资源较多影响页面性能，严格模式建议只在开发模式开启，上线后需要关闭。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// strict mode\nthis.strict = strict\n\n// init root module.\n// this also recursively registers all sub-modules\n// and collects all module getters inside this._wrappedGetters\ninstallModule(this, state, [], this._modules.root)\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"4-5-1-初始化rootstate\"\u003e4.5.1 初始化rootState\u003c/h4\u003e\u003cp\u003e上述代码的备注中，提到installModule方法初始化组件树根组件、注册所有子组件，并将其中所有的getters存储到this._wrappedGetters属性中，让我们看看其中的代码实现。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction installModule (store, rootState, path, module, hot) {\n  const isRoot = !path.length\n  const namespace = store._modules.getNamespace(path)\n\n  // register in namespace map\n  if (namespace) {\n    store._modulesNamespaceMap[namespace] = module\n  }\n\n  // 非根组件设置 state 方法\n  if (!isRoot \u0026amp;\u0026amp; !hot) {\n    const parentState = getNestedState(rootState, path.slice(0, -1))\n    const moduleName = path[path.length - 1]\n    store._withCommit(() =\u0026gt; {\n      Vue.set(parentState, moduleName, module.state)\n    })\n  }\n  \n  ······\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e判断是否是根目录，以及是否设置了命名空间，若存在则在namespace中进行module的存储，在不是根组件且不是 hot 条件的情况下，通过getNestedState方法拿到该module父级的state，拿到其所在的 moduleName ，调用 \u003ccode\u003eVue.set(parentState, moduleName, module.state)\u003c/code\u003e 方法将其state设置到父级state对象的moduleName属性中，由此实现该模块的state注册（首次执行这里，因为是根目录注册，所以并不会执行该条件中的方法）。getNestedState方法代码很简单，分析path拿到state，如下。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce((state, key) =\u0026gt; state[key], state)\n    : state\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"4-5-2-module上下文环境设置\"\u003e4.5.2 module上下文环境设置\u003c/h4\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003econst local = module.context = makeLocalContext(store, namespace, path)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e命名空间和根目录条件判断完毕后，接下来定义local变量和module.context的值，执行makeLocalContext方法，为该module设置局部的 dispatch、commit方法以及getters和state（由于namespace的存在需要做兼容处理）。\u003c/p\u003e\u003ch4 id=\"4-5-3-mutations-actions以及getters注册\"\u003e4.5.3 mutations、actions以及getters注册\u003c/h4\u003e\u003cp\u003e定义local环境后，循环注册我们在options中配置的action以及mutation等。逐个分析各注册函数之前，先看下模块间的逻辑关系流程图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/883f74aa.jpg\" alt=\"complete_flow\"/\u003e\u003c/p\u003e\u003cp\u003e下面分析代码逻辑：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// 注册对应模块的mutation，供state修改使用\nmodule.forEachMutation((mutation, key) =\u0026gt; {\n  const namespacedType = namespace + key\n  registerMutation(store, namespacedType, mutation, local)\n})\n\n// 注册对应模块的action，供数据操作、提交mutation等异步操作使用\nmodule.forEachAction((action, key) =\u0026gt; {\n  const namespacedType = namespace + key\n  registerAction(store, namespacedType, action, local)\n})\n\n// 注册对应模块的getters，供state读取使用\nmodule.forEachGetter((getter, key) =\u0026gt; {\n  const namespacedType = namespace + key\n  registerGetter(store, namespacedType, getter, local)\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eregisterMutation方法中，获取store中的对应mutation type的处理函数集合，将新的处理函数push进去。这里将我们设置在mutations type上对应的 handler 进行了封装，给原函数传入了state。在执行 \u003ccode\u003ecommit(\u0026#39;xxx\u0026#39;, payload)\u003c/code\u003e 的时候，type为 xxx 的mutation的所有handler都会接收到state以及payload，这就是在handler里面拿到state的原因。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction registerMutation (store, type, handler, local) {\n  // 取出对应type的mutations-handler集合\n  const entry = store._mutations[type] || (store._mutations[type] = [])\n  // commit实际调用的不是我们传入的handler，而是经过封装的\n  entry.push(function wrappedMutationHandler (payload) {\n    // 调用handler并将state传入\n    handler(local.state, payload)\n  })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eaction和getter的注册也是同理的，看一下代码（注：前面提到的 \u003ccode\u003ethis.actions\u003c/code\u003e 以及 \u003ccode\u003ethis.mutations\u003c/code\u003e在此处进行设置）。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction registerAction (store, type, handler, local) {\n  // 取出对应type的actions-handler集合\n  const entry = store._actions[type] || (store._actions[type] = [])\n  // 存储新的封装过的action-handler\n  entry.push(function wrappedActionHandler (payload, cb) {\n    // 传入 state 等对象供我们原action-handler使用\n    let res = handler({\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb)\n    // action需要支持promise进行链式调用，这里进行兼容处理\n    if (!isPromise(res)) {\n      res = Promise.resolve(res)\n    }\n    if (store._devtoolHook) {\n      return res.catch(err =\u0026gt; {\n        store._devtoolHook.emit(\u0026#39;vuex:error\u0026#39;, err)\n        throw err\n      })\n    } else {\n      return res\n    }\n  })\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  // getters只允许存在一个处理函数，若重复需要报错\n  if (store._wrappedGetters[type]) {\n    console.error(`[vuex] duplicate getter key: ${type}`)\n    return\n  }\n  \n  // 存储封装过的getters处理函数\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    // 为原getters传入对应状态\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eaction handler比mutation handler以及getter wrapper多拿到dispatch和commit操作方法，因此action可以进行dispatch action和commit mutation操作。\u003c/p\u003e\u003ch4 id=\"4-5-4-子module安装\"\u003e4.5.4 子module安装\u003c/h4\u003e\u003cp\u003e注册完了根组件的actions、mutations以及getters后，递归调用自身，为子组件注册其state，actions、mutations以及getters等。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003emodule.forEachChild((child, key) =\u0026gt; {\n  installModule(store, rootState, path.concat(key), child, hot)\n})\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"4-5-5-实例结合\"\u003e4.5.5 实例结合\u003c/h4\u003e\u003cp\u003e前面介绍了dispatch和commit方法以及actions等的实现，下面结合一个官方的\u003ca href=\"https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart\"\u003e购物车\u003c/a\u003e实例中的部分代码来加深理解。\u003c/p\u003e\u003cp\u003eVuex配置代码：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e/\n *  store-index.js store配置文件\n *\n /\n\nimport Vue from \u0026#39;vue\u0026#39;\nimport Vuex from \u0026#39;vuex\u0026#39;\nimport * as actions from \u0026#39;./actions\u0026#39;\nimport * as getters from \u0026#39;./getters\u0026#39;\nimport cart from \u0026#39;./modules/cart\u0026#39;\nimport products from \u0026#39;./modules/products\u0026#39;\nimport createLogger from \u0026#39;../../../src/plugins/logger\u0026#39;\n\nVue.use(Vuex)\n\nconst debug = process.env.NODE_ENV !== \u0026#39;production\u0026#39;\n\nexport default new Vuex.Store({\n  actions,\n  getters,\n  modules: {\n    cart,\n    products\n  },\n  strict: debug,\n  plugins: debug ? [createLogger()] : []\n})\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVuex组件module中各模块state配置代码部分：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e/**\n *  cart.js\n *\n **/\n \nconst state = {\n  added: [],\n  checkoutStatus: null\n}\n\n/**\n *  products.js\n *\n **/\n \nconst state = {\n  all: []\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e加载上述配置后，页面state结构如下图：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/ada33557.jpg\" alt=\"cart_state\"/\u003e\u003c/p\u003e\u003cp\u003estate中的属性配置都是按照option配置中module path的规则来进行的，下面看action的操作实例。\u003c/p\u003e\u003cp\u003eVuecart组件代码部分：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e/**\n *  Cart.vue 省略template代码，只看script部分\n *\n **/\n \nexport default {\n  methods: {\n    // 购物车中的购买按钮，点击后会触发结算。源码中会调用 dispatch方法\n    checkout (products) {\n      this.$store.dispatch(\u0026#39;checkout\u0026#39;, products)\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVuexcart.js组件action配置代码部分：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003econst actions = {\n  checkout ({ commit, state }, products) {\n    const savedCartItems = [...state.added] // 存储添加到购物车的商品\n    commit(types.CHECKOUT_REQUEST) // 设置提交结算状态\n    shop.buyProducts( // 提交api请求，并传入成功与失败的cb-func\n      products,\n      () =\u0026gt; commit(types.CHECKOUT_SUCCESS), // 请求返回成功则设置提交成功状态\n      () =\u0026gt; commit(types.CHECKOUT_FAILURE, { savedCartItems }) // 请求返回失败则设置提交失败状态\n    )\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVue组件中点击购买执行当前module的dispatch方法，传入type值为 ‘checkout’，payload值为 ‘products’，在源码中dispatch方法在所有注册过的actions中查找’checkout’的对应执行数组，取出循环执行。执行的是被封装过的被命名为wrappedActionHandler的方法，真正传入的checkout的执行函数在wrappedActionHandler这个方法中被执行，源码如下（注：前面贴过，这里再看一次）：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction wrappedActionHandler (payload, cb) {\n    let res = handler({\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb)\n    if (!isPromise(res)) {\n      res = Promise.resolve(res)\n    }\n    if (store._devtoolHook) {\n      return res.catch(err =\u0026gt; {\n        store._devtoolHook.emit(\u0026#39;vuex:error\u0026#39;, err)\n        throw err\n      })\n    } else {\n      return res\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ehandler在这里就是传入的checkout函数，其执行需要的commit以及state就是在这里被传入，payload也传入了，在实例中对应接收的参数名为products。commit的执行也是同理的，实例中checkout还进行了一次commit操作，提交一次type值为types.CHECKOUT_REQUEST的修改，因为mutation名字是唯一的，这里进行了常量形式的调用，防止命名重复，执行跟源码分析中一致，调用 \u003ccode\u003efunction wrappedMutationHandler (payload) {\nhandler(local.state, payload)\n}\u003c/code\u003e 封装函数来实际调用配置的mutation方法。\u003c/p\u003e\u003cp\u003e看到完源码分析和上面的小实例，应该能理解dispatch action和commit mutation的工作原理了。接着看源码，看看getters是如何实现state实时访问的。\u003c/p\u003e\u003ch3 id=\"4-6-store-vm组件设置\"\u003e4.6 store._vm组件设置\u003c/h3\u003e\u003cp\u003e执行完各module的install后，执行resetStoreVM方法，进行store组件的初始化。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// initialize the store vm, which is responsible for the reactivity\n// (also registers _wrappedGetters as computed properties)\nresetStoreVM(this, state)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e综合前面的分析可以了解到，Vuex其实构建的就是一个名为store的vm组件，所有配置的state、actions、mutations以及getters都是其组件的属性，所有的操作都是对这个vm组件进行的。\u003c/p\u003e\u003cp\u003e一起看下resetStoreVM方法的内部实现。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction resetStoreVM (store, state) {\n  const oldVm = store._vm // 缓存前vm组件\n\n  // bind store public getters\n  store.getters = {}\n  const wrappedGetters = store._wrappedGetters\n  const computed = {}\n  \n  // 循环所有处理过的getters，并新建computed对象进行存储，通过Object.defineProperty方法为getters对象建立属性，使得我们通过this.$store.getters.xxxgetter能够访问到该getters\n  forEachValue(wrappedGetters, (fn, key) =\u0026gt; {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = () =\u0026gt; fn(store)\n    Object.defineProperty(store.getters, key, {\n      get: () =\u0026gt; store._vm[key],\n      enumerable: true // for local getters\n    })\n  })\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  const silent = Vue.config.silent\n  \n  // 暂时将Vue设为静默模式，避免报出用户加载的某些插件触发的警告\n  Vue.config.silent = true   \n  // 设置新的storeVm，将当前初始化的state以及getters作为computed属性（刚刚遍历生成的）\n  store._vm = new Vue({\n    data: { state },\n    computed\n  })\n  \n  // 恢复Vue的模式\n  Vue.config.silent = silent\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    // 该方法对state执行$watch以禁止从mutation外部修改state\n    enableStrictMode(store)\n  }\n  \n  // 若不是初始化过程执行的该方法，将旧的组件state设置为null，强制更新所有监听者(watchers)，待更新生效，DOM更新完成后，执行vm组件的destroy方法进行销毁，减少内存的占用\n  if (oldVm) {\n    // dispatch changes in all subscribed watchers\n    // to force getter re-evaluation.\n    store._withCommit(() =\u0026gt; {\n      oldVm.state = null\n    })\n    Vue.nextTick(() =\u0026gt; oldVm.$destroy())\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eresetStoreVm方法创建了当前store实例的_vm组件，至此store就创建完毕了。上面代码涉及到了严格模式的判断，看一下严格模式如何实现的。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003efunction enableStrictMode (store) {\n  store._vm.$watch(\u0026#39;state\u0026#39;, () =\u0026gt; {\n    assert(store._committing, `Do not mutate vuex store state outside mutation handlers.`)\n  }, { deep: true, sync: true })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e很简单的应用，监视state的变化，如果没有通过 \u003ccode\u003ethis._withCommit()\u003c/code\u003e 方法进行state修改，则报错。\u003c/p\u003e\u003ch3 id=\"4-7-plugin注入\"\u003e4.7 plugin注入\u003c/h3\u003e\u003cp\u003e最后执行plugin的植入。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eplugins.concat(devtoolPlugin).forEach(plugin =\u0026gt; plugin(this))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003edevtoolPlugin提供的功能有3个：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// 1. 触发Vuex组件初始化的hook\ndevtoolHook.emit(\u0026#39;vuex:init\u0026#39;, store)\n\n// 2. 提供“时空穿梭”功能，即state操作的前进和倒退\ndevtoolHook.on(\u0026#39;vuex:travel-to-state\u0026#39;, targetState =\u0026gt; {\n  store.replaceState(targetState)\n})\n\n// 3. mutation被执行时，触发hook，并提供被触发的mutation函数和当前的state状态\nstore.subscribe((mutation, state) =\u0026gt; {\n  devtoolHook.emit(\u0026#39;vuex:mutation\u0026#39;, mutation, state)\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e源码分析到这里，Vuex框架的实现原理基本都已经分析完毕。\u003c/p\u003e\u003ch2 id=\"五-总结\"\u003e五、总结\u003c/h2\u003e\u003cp\u003e最后我们回过来看文章开始提出的5个问题。\u003c/p\u003e\u003cp\u003e1.  \u003cstrong\u003e问\u003c/strong\u003e：\u003cem\u003e使用Vuex只需执行 \u003ccode\u003eVue.use(Vuex)\u003c/code\u003e，并在Vue的配置中传入一个store对象的示例，store是如何实现注入的？\u003c/em\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e答\u003c/strong\u003e：\u003ccode\u003eVue.use(Vuex)\u003c/code\u003e 方法执行的是install方法，它实现了Vue实例对象的init方法封装和注入，使传入的store对象被设置到Vue上下文环境的$store中。因此在Vue Component任意地方都能够通过\u003ccode\u003ethis.$store\u003c/code\u003e访问到该store。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e2.  \u003cstrong\u003e问\u003c/strong\u003e：\u003cem\u003estate内部支持模块配置和模块嵌套，如何实现的？\u003c/em\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e答\u003c/strong\u003e：在store构造方法中有makeLocalContext方法，所有module都会有一个local context，根据配置时的path进行匹配。所以执行如\u003ccode\u003edispatch(\u0026#39;submitOrder\u0026#39;, payload)\u003c/code\u003e这类action时，默认的拿到都是module的local state，如果要访问最外层或者是其他module的state，只能从rootState按照path路径逐步进行访问。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e3.  \u003cstrong\u003e问\u003c/strong\u003e：\u003cem\u003e在执行dispatch触发action(commit同理)的时候，只需传入(type, payload)，action执行函数中第一个参数store从哪里获取的？\u003c/em\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e答\u003c/strong\u003e：store初始化时，所有配置的action和mutation以及getters均被封装过。在执行如\u003ccode\u003edispatch(\u0026#39;submitOrder\u0026#39;, payload)\u003c/code\u003e的时候，actions中type为submitOrder的所有处理方法都是被封装后的，其第一个参数为当前的store对象，所以能够获取到 \u003ccode\u003e{ dispatch, commit, state, rootState }\u003c/code\u003e 等数据。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e4.  \u003cstrong\u003e问\u003c/strong\u003e：\u003cem\u003eVuex如何区分state是外部直接修改，还是通过mutation方法修改的？\u003c/em\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e答\u003c/strong\u003e：Vuex中修改state的唯一渠道就是执行 \u003ccode\u003ecommit(\u0026#39;xx\u0026#39;, payload)\u003c/code\u003e 方法，其底层通过执行 \u003ccode\u003ethis._withCommit(fn)\u003c/code\u003e 设置_committing标志变量为true，然后才能修改state，修改完毕还需要还原_committing变量。外部修改虽然能够直接修改state，但是并没有修改_committing标志位，所以只要watch一下state，state change时判断是否_committing值为true，即可判断修改的合法性。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e5.  \u003cstrong\u003e问\u003c/strong\u003e：\u003cem\u003e调试时的”时空穿梭”功能是如何实现的？\u003c/em\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e\u003cstrong\u003e答\u003c/strong\u003e：devtoolPlugin中提供了此功能。因为dev模式下所有的state change都会被记录下来，’时空穿梭’ 功能其实就是将当前的state替换为记录中某个时刻的state状态，利用 \u003ccode\u003estore.replaceState(targetState)\u003c/code\u003e 方法将执行\u003ccode\u003ethis._vm.state = state\u003c/code\u003e 实现。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e源码中还有一些工具函数类似registerModule、unregisterModule、hotUpdate、watch以及subscribe等，如有兴趣可以打开源码看看，这里不再细述。\u003c/p\u003e\u003ch2 id=\"六-作者简介\"\u003e六、作者简介\u003c/h2\u003e\u003cp\u003e明裔，美团外卖高级前端研发工程师，2014年加入美团外卖，负责Web主站开发。先后参与了外卖B端、C端、配送等全业务线系统开发后，目前主要负责商家券活动系统。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e最后，附上一条硬广，美团外卖长期诚聘高级前端工程师/前端技术专家，欢迎发送简历至：mabingbing02#meituan.com。\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2017-04-27T00:00:00Z",
  "Author": "soulteary@gmail.com"
}