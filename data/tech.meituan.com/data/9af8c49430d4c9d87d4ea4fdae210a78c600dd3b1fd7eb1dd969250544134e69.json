{
  "Source": "tech.meituan.com",
  "Title": "美团集群调度系统HULK技术演进",
  "Link": "https://tech.meituan.com/2019/09/12/hulk-technology-evolution.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003e本文根据美团基础架构部/弹性策略团队负责人涂扬在2019 QCon（全球软件开发大会）上的演讲内容整理而成。本文涉及Kubernetes集群管理技术，美团相关的技术实践可参考此前发布的\u003ca href=\"https://tech.meituan.com/2019/08/22/kubernetes-cluster-management-practice.html\"\u003e《美团点评Kubernetes集群管理实践》\u003c/a\u003e。\u003c/p\u003e\u003ch2 id=\"一-背景\"\u003e一、背景\u003c/h2\u003e\u003cp\u003eHULK是美团的容器集群管理平台。在HULK之前，美团的在线服务大部分部署都是在VM上，在此期间，我们遇到了很大的挑战，主要包括以下两点：\u003c/p\u003e\u003cul\u003e\u003cli\u003e环境配置信息不一致：部分业务线下验证正常，但线上验证却不正常。\u003c/li\u003e\u003cli\u003e业务扩容流程长：从申请机器、资源审核到服务部署，需要5分钟才能完成。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e因为美团很多业务都具有明显的高低峰特性，大家一般会根据最高峰的流量情况来部署机器资源，然而在业务低峰期的时候，往往用不了那么多的资源。在这种背景下，我们希望打造一个容器集群管理平台来解决上述的痛点问题，于是HULK项目就应运而生了。\u003c/p\u003e\u003cp\u003eHULK平台包含容器以及弹性调度系统，容器可以统一运行环境、提升交付效率，而弹性调度可以提升业务的资源利用率。在漫威里有个叫HULK的英雄，在情绪激动的时候会变成“绿巨人”，情绪平稳后则恢复人身，这一点跟我们容器的”弹性伸缩“特性比较相像，所以我们的系统就取名为”HULK“。\u003c/p\u003e\u003cp\u003e总的来讲，美团HULK的演进可以分为1.0和2.0两个阶段，如下图所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/639c244bd8fa0d4b9113e5d59452ef21102029.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e在早期，HULK 1.0是基于OpenStack演进的一个集群调度系统版本。这个阶段工作的重点是将容器和美团的基础设施进行融合，比如打通CMDB系统、公司内部的服务治理平台、发布平台以及监控平台等等，并验证容器在生产环境的可行性。2018年，基础架构部将底层的OpenStack升级为容器编排标准Kubernetes，然后我们把这个版本称之为HULK 2.0，新版本还针对在1.0运营过程中遇到的一些问题，对系统专门进行了优化和打磨，主要包括以下几个方面：\u003c/p\u003e\u003cul\u003e\u003cli\u003e进一步打磨了弹性策略和调度系统。\u003c/li\u003e\u003cli\u003e构建了一站式容器运营平台。\u003c/li\u003e\u003cli\u003e对基础系统软件进行加强，自研内核，提升安全隔离能力。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e截止发稿时，美团生产环境超过1万个应用在使用容器，容器数过10万。\u003c/p\u003e\u003ch2 id=\"二-hulk2-0集群调度系统总体架构图\"\u003e二、HULK2.0集群调度系统总体架构图\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/4c0790187d848bb1375b9ba69396639773233.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e上图中，最上层是集群调度系统对接的各个平台，包括服务治理、发布平台、测试部署平台、CMDB系统、监控平台等，我们将这些系统打通，业务就可以无感知地从VM迁移到容器中。其中：\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e容器弹性\u003c/strong\u003e：可以让接入的业务按需使用容器实例。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e服务画像\u003c/strong\u003e：负责应用运行情况的搜集和统计，如CPU/IO使用、服务高峰期、上下游等信息，为弹性伸缩、调度系统提供支持。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e容器编排和镜像管理\u003c/strong\u003e：负责对实例进行调度与应用实例构建。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e最底层的HULK Agent是我们在每个Node上的代理程序。此前，在美团技术团队官方博客上，我们也分享过底层的镜像管理和容器运行时相关内容，参见\u003ca href=\"https://tech.meituan.com/2018/11/15/docker-architecture-and-evolution-practice.html\"\u003e《美团容器技术研发实践》\u003c/a\u003e一文。而本文将重点阐述容器编排（调度系统）和容器弹性（弹性伸缩平台），以及团队遇到的一些问题以及对应的解决方案，希望对大家能有所启发。\u003c/p\u003e\u003ch2 id=\"三-调度系统痛点-解法\"\u003e三、调度系统痛点、解法\u003c/h2\u003e\u003ch3 id=\"3-1-业务扩缩容异常\"\u003e3.1 业务扩缩容异常\u003c/h3\u003e\u003cp\u003e痛点：集群运维人员排查成本较高。\u003c/p\u003e\u003cp\u003e为了解决这个问题，我们可以先看一下调度系统的简化版架构，如下图所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/6f3247ae9d5c57bbbe2450c550c3b0ab50988.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e可以看到，一次扩缩容请求基本上会经历以下这些流程：\u003c/p\u003e\u003cp\u003ea. 用户或者上层系统发起扩缩容请求。\nb. 扩缩容组件从策略配置中心获取对应服务的配置信息。\nc. 将对应的配置信息提交到美团自研的一个API服务（扩展的K8s组件），然后K8s各Master组件就按照原生的工作流程开始Work。\nd. 当某个实例调度到具体的Node上的时候，开始通过IP分配服务获取对应的Hostname和IP。\ne. Container-init是一号进程，在容器内部拉起各个Agent，然后启动应用程序。针对已经标准化接入的应用，会自动进行服务注册，从而承载流量。\u003c/p\u003e\u003cp\u003e而这些模块是由美团内部的不同同学分别进行维护，每次遇到问题时，就需要多个同学分别核对日志信息。可想而知，这种排查问题的方式的成本会有多高。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：类似于分布式调用链中的traceId，每次扩缩容会生成一个TaskId，我们在关键链路上进行打点的同时带上TaskId，并按照约定的格式统一接入到美团点评日志中心，然后在可视化平台HULK Portal进行展示。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e落地效果\u003c/strong\u003e：\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e问题排查提效\u003c/strong\u003e：之前排查类似问题，多人累计耗时平均需要半个小时。目前，1个管理员通过可视化的界面即可达到分钟级定位到问题。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e系统瓶颈可视化\u003c/strong\u003e：全链路上每个时段的平均耗时信息一览无遗。\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"3-2-业务定制化需求\"\u003e3.2 业务定制化需求\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e痛点\u003c/strong\u003e：每次业务的特殊配置都可能变更核心链路代码，导致整体系统的灵活性不够。\u003c/p\u003e\u003cp\u003e具体业务场景如下：\u003c/p\u003e\u003cul\u003e\u003cli\u003e业务希望能够去设置一些系统参数，比如开启swap，设置memlock、ulimit等。\u003c/li\u003e\u003cli\u003e环境变量配置，比如应用名、ZooKeeper地址等。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：建设一体化的调度策略配置中心，通过调度策略配置中心，可定制化调度规则。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/11fa3a6ccc40b41076a6654be0816ef568230.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e实例基本配置，比如业务想给机器加Set化、泳道标识。\u003c/li\u003e\u003cli\u003e实例的扩展配置：如部分业务，比如某些服务想将实例部署在包含特定硬件的宿主机，会对核心业务有N+1的容灾需求，并且还需要将实例部署在不同的IDC上。\u003c/li\u003e\u003cli\u003e相同配置的应用可以创建一个组，将应用和组进行关联。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e在策略配置中心，我们会将这些策略进行Manifest组装，然后转换成Kubernetes可识别的YAML文件。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e落地效果\u003c/strong\u003e：实现了平台自动化配置，运维人员得到解放。\u003c/p\u003e\u003ch3 id=\"3-3-调度策略优化\"\u003e3.3 调度策略优化\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/27a43b3588088b83e8c3af783dfc15eb95816.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e接下来，介绍一下Kubernetes调度器Scheduler的默认行为：它启动之后，会一直监听ApiServer，通过ApiServer去查看未Bind的Pod列表，然后根据特定的算法和策略选出一个合适的Node，并进行Bind操作。具体的调度策略分为两个阶段：Predicates预选阶段和Priorities打分阶段。\u003c/p\u003e\u003cp\u003ePredicates 预选阶段（一堆的预选条件）：PodFitsResources检查是否有足够的资源（比如CPU、内存）来满足一个Pod的运行需求，如果不满足，就直接过滤掉这个Node。\u003c/p\u003e\u003cp\u003ePriorities 打分阶段（一堆的优先级函数）：\u003c/p\u003e\u003cul\u003e\u003cli\u003eLeastRequested：CPU和内存具有相同的权重，资源空闲比越高的节点得分越高。\u003c/li\u003e\u003cli\u003eBalancedResourcesAllocation：CPU和内存使用率越接近的节点得分越高。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e将以上优先级函数算出来的值加权平均算出来一个得分（0-10），分数越高，节点越优。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e痛点一\u003c/strong\u003e：当集群达到3000台规模的时候，一次Pod调度耗时5s左右（K8s 1.6版本）。如果在预选阶段，当前Node不符合过滤条件，依然会判断后续的过滤条件是否符合。假设有上万台Node节点，这种判断逻辑便会浪费较多时间，造成调度器的性能下降。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：当前Node中，如果遇到一个预选条件不满足（比较像是短路径原则），就将这个Node过滤掉，大大减少了计算量，调度性能也得到大幅提升。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/66402687571195d808580ebbd61178df48710.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e成效\u003c/strong\u003e：生产环境验证，提升了40%的性能。这个方案目前已经成为社区1.10版本默认的调度策略，技术细节可以参考\u003ca href=\"https://github.com/kubernetes/kubernetes/pull/56926\"\u003eGitHub上的PR\u003c/a\u003e。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e痛点二\u003c/strong\u003e：资源利用率最大化和服务SLA保障之间的权衡。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：我们基于服务的行为数据构建了服务画像系统，下图是我们针对某个应用进行服务画像后的树图展现。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/c85898ff4dd57184697706c27a632c49418481.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e调度前\u003c/strong\u003e：可以将有调用关系的Pod设置亲和性，竞争相同资源的Pod设置反亲和性，相同宿主机上最多包含N个核心应用。\n\u003cstrong\u003e调度后\u003c/strong\u003e：经过上述规则调度后，在宿主机上如果依然出现了资源竞争，优先保障高优先级应用的SLA。\u003c/p\u003e\u003ch3 id=\"3-4-重编排问题\"\u003e3.4 重编排问题\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e痛点\u003c/strong\u003e：\u003c/p\u003e\u003cp\u003e（1）容器重启/迁移场景：\u003c/p\u003e\u003cul\u003e\u003cli\u003e容器和系统盘的信息丢失。\u003c/li\u003e\u003cli\u003e容器的IP变更。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e（2）驱逐场景：Kubelet会自动杀死一些违例容器，但有可能是非常核心的业务。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：\u003c/p\u003e\u003cp\u003e（1）容器重启/迁移场景：\u003c/p\u003e\u003cul\u003e\u003cli\u003e新增Reuse策略，保留原生重启策略（Rebuild）。\u003c/li\u003e\u003cli\u003e定制化CNI插件，基于Pod标识申请和复用IP。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e（2）关闭原生的驱逐策略，通过外部组件来做决策。\u003c/p\u003e\u003ch2 id=\"四-弹性伸缩平台痛点-解法\"\u003e四、弹性伸缩平台痛点、解法\u003c/h2\u003e\u003cp\u003e弹性伸缩平台整体架构图如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/29ddd220486f98e4c80d3f4d75b9312b82964.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e注：Raptor是美团点评内部的大监控平台，整合了\u003ca href=\"https://tech.meituan.com/2018/11/01/cat-pr.html\"\u003eCAT\u003c/a\u003e、\u003ca href=\"https://tech.meituan.com/2017/02/24/mt-falcon-monitoring-system.html\"\u003eFalcon\u003c/a\u003e等监控产品。\u003c/p\u003e\u003cp\u003e在弹性伸缩平台演进的过程中，我们主要遇到了以下5个问题。\u003c/p\u003e\u003ch3 id=\"4-1-多策略决策不一致\"\u003e4.1 多策略决策不一致\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/d032414ce65d48cc18d98a66f393bc3973876.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e如上图所示，一个业务配置了2条监控策略和1条周期策略：\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e监控策略\u003c/strong\u003e：当某个指标（比如QPS、CPU）超过阈值上限后开始扩容，低于阈值下限后开始缩容。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e周期策略\u003c/strong\u003e：在某个固定的时间开始扩容，另外一个固定的时间开始缩容。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e早期的设计是各条策略独自决策，扩容顺序有可能是：缩5台、缩2台、扩10台，也有可能是：扩10台、缩5台、缩2台，就可能造成一些无效的扩缩行为。\u003c/p\u003e\u003cp\u003e解法：增加了一个聚合层（或者把它称之为策略协商层），提供一些聚合策略：默认策略（多扩少缩）和权重策略（权重高的来决策扩缩行为），减少了大量的无效扩缩现象。\u003c/p\u003e\u003ch3 id=\"4-2-扩缩不幂等\"\u003e4.2 扩缩不幂等\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/bd2f97b3a98139267a470577e8ef973158670.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e如上图所示，聚合层发起具体扩缩容的时候，因之前采用的是增量扩容方式，在一些场景下会出现频繁扩缩现象。比如，原先12台，这个时候弹性伸缩平台告诉调度系统要扩容8台，在返回TaskId的过程中超时或保存TaskId失败了，这个时候弹性伸缩平台会继续发起扩容8台的操作，最后导致服务下有28台实例（不幂等）。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：采用按目标扩容方式，直接告诉对端，希望能扩容到20台，避免了短时间内的频繁扩缩容现象。\u003c/p\u003e\u003ch3 id=\"4-3-线上代码多版本\"\u003e4.3 线上代码多版本\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/59ae9a384465648610072159c76f5cca71682.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e如上图所示，一个业务线上有30台机器，存在3个版本（A、B、C）。之前我们弹性扩容的做法是采用业务构建的最新镜像进行扩容，但在实际生产环境运行过程中却遇到问题。比如一些业务构建的最新镜像是用来做小流量测试的，本身的稳定性没有保障，高峰期扩容的时候会提升这个版本在线上机器中的比例，低峰期的时候又把之前稳定版本给缩容了，经过一段时间的频繁扩缩之后，最后线上遗留的实例可能都存在问题。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：基于约定优于配置原则，我们采用业务的稳定镜像（采用灰度发布流程将线上所有实例均覆盖过一遍的镜像，会自动标记为稳定镜像）进行扩容，这样就比较好地解决了这个问题。\u003c/p\u003e\u003ch3 id=\"4-4-资源保障问题\"\u003e4.4 资源保障问题\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/217511d6cdc25c554ef4170a814afc94105048.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e如上图所示，存量中有2个服务，一个需要扩容20台，一个需要扩容15台，这个时候如果新接入一个服务，同一时间需要扩容30台，但是资源池只剩余50台实例了。这个时候就意味着，谁先扩容谁就可以获得资源保障，后发起的请求就无法获得资源保障。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：\u003c/p\u003e\u003cp\u003e（1）\u003cstrong\u003e存量资源水位检测\u003c/strong\u003e：当存量资源的使用水位超过阈值的时候，比如达到80%的时候会有报警，告诉我们需要做资源补充操作。\n（2）\u003cstrong\u003e增量服务弹性资源预估\u003c/strong\u003e：如果这个服务通过预判算法评估，接入之后可能会导致存量服务的扩容得不到保障，则拒绝或者补充资源后，再让这个业务接入。\u003c/p\u003e\u003ch3 id=\"4-5-端到端时效问题\"\u003e4.5 端到端时效问题\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/82defde58d769b5c42f649d3ca78b8b761486.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e如图所示，我们的分钟级监控时延（比如1:00:00~1:01:00的监控数据，大概需要到1:01:10后可将采集到的所有数据聚合完成）是70s+，调度链路时延是30s+，整体需要上100s+，在生产环境的业务往往会比较关注扩容时延。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解法\u003c/strong\u003e：监控系统这块已经建设秒级监控功能。基于这些做法都属于后验性扩容，存在一定的延迟性，目前我们也在探索基于历史行为数据进行服务预测，在监控指标达到扩容阈值前的1~2分钟进行提前扩容。\u003c/p\u003e\u003ch2 id=\"五-经验总结\"\u003e五、经验总结\u003c/h2\u003e\u003cp\u003e\u003cstrong\u003e技术侧\u003c/strong\u003e：\u003c/p\u003e\u003cul\u003e\u003cli\u003e开源产品“本土化”： 原生的Kubernetes需要和内部已有的基础设施，如服务树、发布系统、服务治理平台、监控系统等做融合，才能更容易在公司内进行落地。\u003c/li\u003e\u003cli\u003e调度决策：增量的调度均使用新策略来进行规范化，存量的可采用重调度器进行治理。\u003c/li\u003e\u003cli\u003e弹性伸缩：公有云在弹性伸缩这块是没有SLA保障的，但是做内部私有云，就需要做好扩容成功率、端到端时延这两块的SLA保障。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e业务侧\u003c/strong\u003e：\u003c/p\u003e\u003cul\u003e\u003cli\u003e业务迁移：建设了全自动化迁移平台，帮助业务从VM自动迁移到容器，极大地降低了因迁移而带来的人力投入。\u003c/li\u003e\u003cli\u003e业务成本：使用HULK可较好地提升业务运维效率（HULK具备资源利用率更高、弹性扩容、一键扩容等特点），降低了业务成本。\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"作者简介\"\u003e作者简介\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003e涂扬\u003c/strong\u003e，美团点评技术专家，现任基础架构部弹性策略团队负责人。\u003c/p\u003e\u003ch3 id=\"招聘信息\"\u003e招聘信息\u003c/h3\u003e\u003cp\u003e美团点评基础架构团队诚招高级、资深技术专家，Base北京、上海。我们致力于建设美团点评全公司统一的高并发高性能分布式基础架构平台，涵盖数据库、分布式监控、服务治理、高性能通信、消息中间件、基础存储、容器化、集群调度等基础架构主要的技术领域。欢迎有兴趣的同学投送简历到 tech@meituan.com（邮件标题注明：基础架构部弹性策略团队）\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2019-09-12T00:00:00Z",
  "Author": "soulteary@gmail.com"
}