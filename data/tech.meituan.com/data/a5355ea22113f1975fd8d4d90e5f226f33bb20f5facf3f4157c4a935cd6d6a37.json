{
  "Source": "tech.meituan.com",
  "Title": "Redis 高负载下的中断优化",
  "Link": "https://tech.meituan.com/2018/03/16/redis-high-concurrency-optimization.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\u003cp\u003e2017年年初以来，随着Redis产品的用户量越来越大，接入服务越来越多，再加上美团点评Memcache和Redis两套缓存融合，Redis服务端的总体请求量从年初最开始日访问量百亿次级别上涨到高峰时段的万亿次级别，给运维和架构团队都带来了极大的挑战。\u003c/p\u003e\u003cp\u003e原本稳定的环境也因为请求量的上涨带来了很多不稳定的因素，其中一直困扰我们的就是网卡丢包问题。起初线上存在部分Redis节点还在使用千兆网卡的老旧服务器，而缓存服务往往需要承载极高的查询量，并要求毫秒级的响应速度，如此一来千兆网卡很快就出现了瓶颈。经过整治，我们将千兆网卡服务器替换为了万兆网卡服务器，本以为可以高枕无忧，但是没想到，在业务高峰时段，机器也竟然出现了丢包问题，而此时网卡带宽使用还远远没有达到瓶颈。\u003c/p\u003e\u003ch2 id=\"定位网络丢包的原因\"\u003e定位网络丢包的原因\u003c/h2\u003e\u003ch3 id=\"从异常指标入手\"\u003e从异常指标入手\u003c/h3\u003e\u003cp\u003e首先，我们在系统监控的\u003ccode\u003enet.if.in.dropped\u003c/code\u003e指标中，看到有大量数据丢包异常，那么第一步就是要了解这个指标代表什么。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/7e65efa8.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e这个指标的数据源，是读取\u003ccode\u003e/proc/net/dev\u003c/code\u003e中的数据，监控Agent做简单的处理之后上报。以下为\u003ccode\u003e/proc/net/dev\u003c/code\u003e的一个示例，可以看到第一行Receive代表in，Transmit代表out，第二行即各个表头字段，再往后每一行代表一个网卡设备具体的值。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/fe48d0f1.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e其中各个字段意义如下：\u003c/strong\u003e\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth align=\"left\"\u003e字段\u003c/th\u003e\u003cth align=\"left\"\u003e解释\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003ebytes\u003c/td\u003e\u003ctd align=\"left\"\u003eThe total number of bytes of data transmitted or received by the interface.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003epackets\u003c/td\u003e\u003ctd align=\"left\"\u003eThe total number of packets of data transmitted or received by the interface.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003eerrs\u003c/td\u003e\u003ctd align=\"left\"\u003eThe total number of transmit or receive errors detected by the device driver.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003edrop\u003c/td\u003e\u003ctd align=\"left\"\u003eThe total number of packets dropped by the device driver.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003efifo\u003c/td\u003e\u003ctd align=\"left\"\u003eThe number of FIFO buffer errors.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003eframe\u003c/td\u003e\u003ctd align=\"left\"\u003eThe number of packet framing errors.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003ecolls\u003c/td\u003e\u003ctd align=\"left\"\u003eThe number of collisions detected on the interface.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003ecompressed\u003c/td\u003e\u003ctd align=\"left\"\u003eThe number of compressed packets transmitted or received by the device driver. (This appears to be unused in the 2.2.15 kernel.)\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003ecarrier\u003c/td\u003e\u003ctd align=\"left\"\u003eThe number of carrier losses detected by the device driver.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003emulticast\u003c/td\u003e\u003ctd align=\"left\"\u003eThe number of multicast frames transmitted or received by the device driver.\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e通过上述字段解释，我们可以了解丢包发生在网卡设备驱动层面；但是想要了解真正的原因，需要继续深入源码。\u003c/p\u003e\u003cp\u003e\u003ccode\u003e/proc/net/dev\u003c/code\u003e的数据来源，根据源码文件\u003ccode\u003enet/core/net-procfs.c\u003c/code\u003e，可以知道上述指标是通过其中的\u003ccode\u003edev_seq_show()\u003c/code\u003e函数和\u003ccode\u003edev_seq_printf_stats()\u003c/code\u003e函数输出的：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003estatic int dev_seq_show(struct seq_file *seq, void *v)\n{\n    if (v == SEQ_START_TOKEN)\n        /* 输出/proc/net/dev表头部分   */\n        seq_puts(seq, \u0026#34;Inter-|   Receive                            \u0026#34;\n                  \u0026#34;                    |  Transmit\\n\u0026#34;\n                  \u0026#34; face |bytes    packets errs drop fifo frame \u0026#34;\n                  \u0026#34;compressed multicast|bytes    packets errs \u0026#34;\n                  \u0026#34;drop fifo colls carrier compressed\\n\u0026#34;);\n    else\n        /* 输出/proc/net/dev数据部分   */\n        dev_seq_printf_stats(seq, v);\n    return 0;\n}\n  \nstatic void dev_seq_printf_stats(struct seq_file *seq, struct net_device *dev)\n{\n    struct rtnl_link_stats64 temp;\n  \n    /* 数据源从下面的函数中取得   */\n    const struct rtnl_link_stats64 *stats = dev_get_stats(dev, \u0026amp;temp);\n \n    /* /proc/net/dev 各个字段的数据算法   */\n    seq_printf(seq, \u0026#34;%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu \u0026#34;\n           \u0026#34;%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\\n\u0026#34;,\n           dev-\u0026gt;name, stats-\u0026gt;rx_bytes, stats-\u0026gt;rx_packets,\n           stats-\u0026gt;rx_errors,\n           stats-\u0026gt;rx_dropped + stats-\u0026gt;rx_missed_errors,\n           stats-\u0026gt;rx_fifo_errors,\n           stats-\u0026gt;rx_length_errors + stats-\u0026gt;rx_over_errors +\n            stats-\u0026gt;rx_crc_errors + stats-\u0026gt;rx_frame_errors,\n           stats-\u0026gt;rx_compressed, stats-\u0026gt;multicast,\n           stats-\u0026gt;tx_bytes, stats-\u0026gt;tx_packets,\n           stats-\u0026gt;tx_errors, stats-\u0026gt;tx_dropped,\n           stats-\u0026gt;tx_fifo_errors, stats-\u0026gt;collisions,\n           stats-\u0026gt;tx_carrier_errors +\n            stats-\u0026gt;tx_aborted_errors +\n            stats-\u0026gt;tx_window_errors +\n            stats-\u0026gt;tx_heartbeat_errors,\n           stats-\u0026gt;tx_compressed);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003edev_seq_printf_stats()\u003c/code\u003e函数里，对应drop输出的部分，能看到由两块组成：\u003ccode\u003estats-\u003c/code\u003e\u0026gt;\u003ccode\u003erx_dropped+stats\u003c/code\u003e-\u0026gt;\u003ccode\u003erx_missed_errors\u003c/code\u003e。\u003c/p\u003e\u003cp\u003e继续查找\u003ccode\u003edev_get_stats\u003c/code\u003e函数可知，\u003ccode\u003erx_dropped\u003c/code\u003e和\u003ccode\u003erx_missed_errors\u003c/code\u003e都是从设备获取的，并且需要设备驱动实现。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/**\n *  dev_get_stats   - get network device statistics\n *  @dev: device to get statistics from\n *  @storage: place to store stats\n *\n *  Get network statistics from device. Return @storage.\n *  The device driver may provide its own method by setting\n *  dev-\u0026gt;netdev_ops-\u0026gt;get_stats64 or dev-\u0026gt;netdev_ops-\u0026gt;get_stats;\n *  otherwise the internal statistics structure is used.\n */\nstruct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,\n                    struct rtnl_link_stats64 *storage)\n{\n    const struct net_device_ops *ops = dev-\u0026gt;netdev_ops;\n    if (ops-\u0026gt;ndo_get_stats64) {\n        memset(storage, 0, sizeof(*storage));\n        ops-\u0026gt;ndo_get_stats64(dev, storage);\n    } else if (ops-\u0026gt;ndo_get_stats) {\n        netdev_stats_to_stats64(storage, ops-\u0026gt;ndo_get_stats(dev));\n    } else {\n        netdev_stats_to_stats64(storage, \u0026amp;dev-\u0026gt;stats);\n    }   \n    storage-\u0026gt;rx_dropped += (unsigned long)atomic_long_read(\u0026amp;dev-\u0026gt;rx_dropped);\n    storage-\u0026gt;tx_dropped += (unsigned long)atomic_long_read(\u0026amp;dev-\u0026gt;tx_dropped);\n    storage-\u0026gt;rx_nohandler += (unsigned long)atomic_long_read(\u0026amp;dev-\u0026gt;rx_nohandler);\n    return storage;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e结构体 \u003ccode\u003ertnl_link_stats64\u003c/code\u003e 的定义在 \u003ccode\u003e/usr/include/linux/if_link.h\u003c/code\u003e 中：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/* The main device statistics structure */\nstruct rtnl_link_stats64 {\n    __u64   rx_packets;     /* total packets received   */\n    __u64   tx_packets;     /* total packets transmitted    */\n    __u64   rx_bytes;       /* total bytes received     */\n    __u64   tx_bytes;       /* total bytes transmitted  */\n    __u64   rx_errors;      /* bad packets received     */\n    __u64   tx_errors;      /* packet transmit problems */\n    __u64   rx_dropped;     /* no space in linux buffers    */\n    __u64   tx_dropped;     /* no space available in linux  */\n    __u64   multicast;      /* multicast packets received   */\n    __u64   collisions;\n \n    /* detailed rx_errors: */\n    __u64   rx_length_errors;\n    __u64   rx_over_errors;     /* receiver ring buff overflow  */\n    __u64   rx_crc_errors;      /* recved pkt with crc error    */\n    __u64   rx_frame_errors;    /* recv\u0026#39;d frame alignment error */\n    __u64   rx_fifo_errors;     /* recv\u0026#39;r fifo overrun      */\n    __u64   rx_missed_errors;   /* receiver missed packet   */\n \n    /* detailed tx_errors */\n    __u64   tx_aborted_errors;\n    __u64   tx_carrier_errors;\n    __u64   tx_fifo_errors;\n    __u64   tx_heartbeat_errors;\n    __u64   tx_window_errors;\n \n    /* for cslip etc */\n    __u64   rx_compressed;\n    __u64   tx_compressed;\n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e至此，我们知道\u003ccode\u003erx_dropped\u003c/code\u003e是Linux中的缓冲区空间不足导致的丢包，而\u003ccode\u003erx_missed_errors\u003c/code\u003e则在注释中写的比较笼统。有资料指出，\u003ccode\u003erx_missed_errors\u003c/code\u003e是fifo队列（即\u003ccode\u003erx ring buffer\u003c/code\u003e）满而丢弃的数量，但这样的话也就和\u003ccode\u003erx_fifo_errors\u003c/code\u003e等同了。后来公司内网络内核研发大牛王伟给了我们点拨：不同网卡自己实现不一样，比如Intel的igb网卡\u003ccode\u003erx_fifo_errors\u003c/code\u003e在\u003ccode\u003emissed\u003c/code\u003e的基础上，还加上了\u003ccode\u003eRQDPC\u003c/code\u003e计数，而\u003ccode\u003eixgbe\u003c/code\u003e就没这个统计。RQDPC计数是描述符不够的计数，\u003ccode\u003emissed\u003c/code\u003e是\u003ccode\u003efifo\u003c/code\u003e满的计数。所以对于\u003ccode\u003eixgbe\u003c/code\u003e来说，\u003ccode\u003erx_fifo_errors\u003c/code\u003e和\u003ccode\u003erx_missed_errors\u003c/code\u003e确实是等同的。\u003c/p\u003e\u003cp\u003e通过命令\u003ccode\u003eethtool -S eth0\u003c/code\u003e可以查看网卡一些统计信息，其中就包含了上文提到的几个重要指标\u003ccode\u003erx_dropped\u003c/code\u003e、\u003ccode\u003erx_missed_errors\u003c/code\u003e、\u003ccode\u003erx_fifo_errors\u003c/code\u003e等。但实际测试后，我发现不同网卡型号给出的指标略有不同，比如\u003ccode\u003eIntel ixgbe\u003c/code\u003e就能取到，而\u003ccode\u003eBroadcom bnx2/tg3\u003c/code\u003e则只能取到\u003ccode\u003erx_discards\u003c/code\u003e（对应\u003ccode\u003erx_fifo_errors\u003c/code\u003e）、\u003ccode\u003erx_fw_discards\u003c/code\u003e（对应\u003ccode\u003erx_dropped\u003c/code\u003e）。这表明，各家网卡厂商设备内部对这些丢包的计数器、指标的定义略有不同，但通过驱动向内核提供的统计数据都封装成了\u003ccode\u003estruct rtnl_link_stats64\u003c/code\u003e定义的格式。\u003c/p\u003e\u003cp\u003e在对丢包服务器进行检查后，发现\u003ccode\u003erx_missed_errors\u003c/code\u003e为0，丢包全部来自\u003ccode\u003erx_dropped\u003c/code\u003e。说明丢包发生在Linux内核的缓冲区中。接下来，我们要继续探索到底是什么缓冲区引起了丢包问题，这就需要完整地了解服务器接收数据包的过程。\u003c/p\u003e\u003ch3 id=\"了解接收数据包的流程\"\u003e了解接收数据包的流程\u003c/h3\u003e\u003cp\u003e接收数据包是一个复杂的过程，涉及很多底层的技术细节，但大致需要以下几个步骤：\u003c/p\u003e\u003col\u003e\u003cli\u003e网卡收到数据包。\u003c/li\u003e\u003cli\u003e将数据包从网卡硬件缓存转移到服务器内存中。\u003c/li\u003e\u003cli\u003e通知内核处理。\u003c/li\u003e\u003cli\u003e经过TCP/IP协议逐层处理。\u003c/li\u003e\u003cli\u003e应用程序通过\u003ccode\u003eread()\u003c/code\u003e从\u003ccode\u003esocket buffer\u003c/code\u003e读取数据。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/f12d804f.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch4 id=\"将网卡收到的数据包转移到主机内存-nic与驱动交互\"\u003e将网卡收到的数据包转移到主机内存（NIC与驱动交互）\u003c/h4\u003e\u003cp\u003eNIC在接收到数据包之后，首先需要将数据同步到内核中，这中间的桥梁是\u003ccode\u003erx ring buffer\u003c/code\u003e。它是由NIC和驱动程序共享的一片区域，事实上，\u003ccode\u003erx ring buffer\u003c/code\u003e存储的并不是实际的packet数据，而是一个描述符，这个描述符指向了它真正的存储地址，具体流程如下：\u003c/p\u003e\u003col\u003e\u003cli\u003e驱动在内存中分配一片缓冲区用来接收数据包，叫做\u003ccode\u003esk_buffer\u003c/code\u003e；\u003c/li\u003e\u003cli\u003e将上述缓冲区的地址和大小（即接收描述符），加入到\u003ccode\u003erx ring buffer\u003c/code\u003e。描述符中的缓冲区地址是DMA使用的物理地址；\u003c/li\u003e\u003cli\u003e驱动通知网卡有一个新的描述符；\u003c/li\u003e\u003cli\u003e网卡从\u003ccode\u003erx ring buffer\u003c/code\u003e中取出描述符，从而获知缓冲区的地址和大小；\u003c/li\u003e\u003cli\u003e网卡收到新的数据包；\u003c/li\u003e\u003cli\u003e网卡将新数据包通过DMA直接写到\u003ccode\u003esk_buffer\u003c/code\u003e中。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/79657e98.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e当驱动处理速度跟不上网卡收包速度时，驱动来不及分配缓冲区，NIC接收到的数据包无法及时写到\u003ccode\u003esk_buffer\u003c/code\u003e，就会产生堆积，当NIC内部缓冲区写满后，就会丢弃部分数据，引起丢包。这部分丢包为\u003ccode\u003erx_fifo_errors\u003c/code\u003e，在\u003ccode\u003e/proc/net/dev\u003c/code\u003e中体现为fifo字段增长，在ifconfig中体现为overruns指标增长。\u003c/p\u003e\u003ch4 id=\"通知系统内核处理-驱动与linux内核交互\"\u003e通知系统内核处理（驱动与Linux内核交互）\u003c/h4\u003e\u003cp\u003e这个时候，数据包已经被转移到了\u003ccode\u003esk_buffer\u003c/code\u003e中。前文提到，这是驱动程序在内存中分配的一片缓冲区，并且是通过DMA写入的，这种方式不依赖CPU直接将数据写到了内存中，意味着对内核来说，其实并不知道已经有新数据到了内存中。那么如何让内核知道有新数据进来了呢？答案就是中断，通过中断告诉内核有新数据进来了，并需要进行后续处理。\u003c/p\u003e\u003cp\u003e提到中断，就涉及到硬中断和软中断，首先需要简单了解一下它们的区别：\u003c/p\u003e\u003cul\u003e\u003cli\u003e硬中断： 由硬件自己生成，具有随机性，硬中断被CPU接收后，触发执行中断处理程序。中断处理程序只会处理关键性的、短时间内可以处理完的工作，剩余耗时较长工作，会放到中断之后，由软中断来完成。硬中断也被称为上半部分。\u003c/li\u003e\u003cli\u003e软中断： 由硬中断对应的中断处理程序生成，往往是预先在代码里实现好的，不具有随机性。（除此之外，也有应用程序触发的软中断，与本文讨论的网卡收包无关。）也被称为下半部分。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cstrong\u003e当NIC把数据包通过DMA复制到内核缓冲区\u003ccode\u003esk_buffer\u003c/code\u003e后，NIC立即发起一个硬件中断。CPU接收后，首先进入上半部分，网卡中断对应的中断处理程序是网卡驱动程序的一部分，之后由它发起软中断，进入下半部分，开始消费\u003ccode\u003esk_buffer\u003c/code\u003e中的数据，交给内核协议栈处理。\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/19e05bc4.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e通过中断，能够快速及时地响应网卡数据请求，但如果数据量大，那么会产生大量中断请求，CPU大部分时间都忙于处理中断，效率很低。为了解决这个问题，现在的内核及驱动都采用一种叫NAPI（new API）的方式进行数据处理，其原理可以简单理解为 中断+轮询，在数据量大时，一次中断后通过轮询接收一定数量包再返回，避免产生多次中断。\u003c/p\u003e\u003cp\u003e整个中断过程的源码部分比较复杂，并且不同驱动的厂商及版本也会存在一定的区别。 以下调用关系基于Linux-3.10.108及内核自带驱动\u003ccode\u003edrivers/net/ethernet/intel/ixgbe\u003c/code\u003e：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/39808c8a.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e注意到，\u003ccode\u003eenqueue_to_backlog\u003c/code\u003e函数中，会对CPU的\u003ccode\u003esoftnet_data\u003c/code\u003e实例中的接收队列（\u003ccode\u003einput_pkt_queue\u003c/code\u003e）进行判断，如果队列中的数据长度超过\u003ccode\u003enetdev_max_backlog\u003c/code\u003e ，那么数据包将直接丢弃，这就产生了丢包。\u003ccode\u003enetdev_max_backlog\u003c/code\u003e是由系统参数\u003ccode\u003enet.core.netdev_max_backlog\u003c/code\u003e指定的，默认大小是 1000。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e /*\n * enqueue_to_backlog is called to queue an skb to a per CPU backlog\n * queue (may be a remote CPU queue).\n */\nstatic int enqueue_to_backlog(struct sk_buff *skb, int cpu,\n                  unsigned int *qtail)\n{\n    struct softnet_data *sd;\n    unsigned long flags;\n \n    sd = \u0026amp;per_cpu(softnet_data, cpu);\n \n    local_irq_save(flags);\n \n    rps_lock(sd);\n  \n    /* 判断接收队列是否满，队列长度为 netdev_max_backlog  */ \n    if (skb_queue_len(\u0026amp;sd-\u0026gt;input_pkt_queue) \u0026lt;= netdev_max_backlog) {\n  \n         \n        if (skb_queue_len(\u0026amp;sd-\u0026gt;input_pkt_queue)) {\nenqueue:\n            /*  队列如果不会空，将数据包添加到队列尾  */\n            __skb_queue_tail(\u0026amp;sd-\u0026gt;input_pkt_queue, skb);\n            input_queue_tail_incr_save(sd, qtail);\n            rps_unlock(sd);\n            local_irq_restore(flags);\n            return NET_RX_SUCCESS;\n        }   \n \n        /* Schedule NAPI for backlog device\n         * We can use non atomic operation since we own the queue lock\n         */\n        /*  队列如果为空，回到 ____napi_schedule加入poll_list轮询部分，并重新发起软中断  */ \n        if (!__test_and_set_bit(NAPI_STATE_SCHED, \u0026amp;sd-\u0026gt;backlog.state)) {\n            if (!rps_ipi_queued(sd))\n                ____napi_schedule(sd, \u0026amp;sd-\u0026gt;backlog);\n        }   \n        goto enqueue;\n    }\n \n    /* 队列满则直接丢弃，对应计数器 +1 */ \n    sd-\u0026gt;dropped++;\n    rps_unlock(sd);\n \n    local_irq_restore(flags);\n \n    atomic_long_inc(\u0026amp;skb-\u0026gt;dev-\u0026gt;rx_dropped);\n    kfree_skb(skb);\n    return NET_RX_DROP;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e内核会为每个\u003ccode\u003eCPU Core\u003c/code\u003e都实例化一个\u003ccode\u003esoftnet_data\u003c/code\u003e对象，这个对象中的\u003ccode\u003einput_pkt_queue\u003c/code\u003e用于管理接收的数据包。假如所有的中断都由一个\u003ccode\u003eCPU Core\u003c/code\u003e来处理的话，那么所有数据包只能经由这个CPU的\u003ccode\u003einput_pkt_queue\u003c/code\u003e，如果接收的数据包数量非常大，超过中断处理速度，那么\u003ccode\u003einput_pkt_queue\u003c/code\u003e中的数据包就会堆积，直至超过\u003ccode\u003enetdev_max_backlog\u003c/code\u003e，引起丢包。这部分丢包可以在\u003ccode\u003ecat /proc/net/softnet_stat\u003c/code\u003e的输出结果中进行确认：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/0d9faca6.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e其中每行代表一个CPU，第一列是中断处理程序接收的帧数，第二列是由于超过 \u003ccode\u003enetdev_max_backlog\u003c/code\u003e而丢弃的帧数。 第三列则是在\u003ccode\u003enet_rx_action\u003c/code\u003e函数中处理数据包超过\u003ccode\u003enetdev_budge\u003c/code\u003e指定数量或运行时间超过2个时间片的次数。在检查线上服务器之后，发现第一行CPU。硬中断的中断号及统计数据可以在\u003ccode\u003e/proc/interrupts\u003c/code\u003e中看到，对于多队列网卡，当系统启动并加载NIC设备驱动程序模块时，每个RXTX队列会被初始化分配一个唯一的中断向量号，它通知中断处理程序该中断来自哪个NIC队列。在默认情况下，所有队列的硬中断都由CPU 0处理，因此对应的软中断逻辑也会在CPU 0上处理，在服务器 TOP 的输出中，也可以观察到 %si 软中断部分，CPU 0的占比比其他core高出一截。\u003c/p\u003e\u003cp\u003e到这里其实有存在一个疑惑，我们线上服务器的内核版本及网卡都支持NAPI，而NAPI的处理逻辑是不会走到\u003ccode\u003eenqueue_to_backlog\u003c/code\u003e中的，\u003ccode\u003eenqueue_to_backlog\u003c/code\u003e主要是非NAPI的处理流程中使用的。对此，我们觉得可能和当前使用的Docker架构有关，事实上，我们通过\u003ccode\u003enet.if.dropped\u003c/code\u003e指标获取到的丢包，都发生在Docker虚拟网卡上，而非宿主机物理网卡上，因此很可能是Docker虚拟网桥转发数据包之后，虚拟网卡层面产生的丢包，这里由于涉及虚拟化部分，就不进一步分析了。\u003c/p\u003e\u003cp\u003e驱动及内核处理过程中的几个重要函数：\u003c/p\u003e\u003cp\u003e(1)注册中断号及中断处理程序，根据网卡是否支持\u003ccode\u003eMSI/MSIX\u003c/code\u003e，结果为：\u003ccode\u003eMSIX\u003c/code\u003e → \u003ccode\u003eixgbe_msix_clean_rings\u003c/code\u003e，\u003ccode\u003eMSI\u003c/code\u003e → \u003ccode\u003eixgbe_intr\u003c/code\u003e，都不支持 → \u003ccode\u003eixgbe_intr\u003c/code\u003e。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/**\n * 文件：ixgbe_main.c\n * ixgbe_request_irq - initialize interrupts\n * @adapter: board private structure\n *\n * Attempts to configure interrupts using the best available\n * capabilities of the hardware and kernel.\n **/\nstatic int ixgbe_request_irq(struct ixgbe_adapter *adapter)\n{\n    struct net_device *netdev = adapter-\u0026gt;netdev;\n    int err;\n \n    /* 支持MSIX，调用 ixgbe_request_msix_irqs 设置中断处理程序*/\n    if (adapter-\u0026gt;flags \u0026amp; IXGBE_FLAG_MSIX_ENABLED)\n        err = ixgbe_request_msix_irqs(adapter);\n    /* 支持MSI，直接设置 ixgbe_intr 为中断处理程序 */\n    else if (adapter-\u0026gt;flags \u0026amp; IXGBE_FLAG_MSI_ENABLED)\n        err = request_irq(adapter-\u0026gt;pdev-\u0026gt;irq, \u0026amp;ixgbe_intr, 0,\n                  netdev-\u0026gt;name, adapter);\n    /* 都不支持的情况，直接设置 ixgbe_intr 为中断处理程序 */\n    else \n        err = request_irq(adapter-\u0026gt;pdev-\u0026gt;irq, \u0026amp;ixgbe_intr, IRQF_SHARED,\n                  netdev-\u0026gt;name, adapter);\n \n    if (err)\n        e_err(probe, \u0026#34;request_irq failed, Error %d\\n\u0026#34;, err);\n \n    return err;\n}\n  \n/**\n * 文件：ixgbe_main.c\n * ixgbe_request_msix_irqs - Initialize MSI-X interrupts\n * @adapter: board private structure\n *\n * ixgbe_request_msix_irqs allocates MSI-X vectors and requests\n * interrupts from the kernel.\n **/\nstatic int (struct ixgbe_adapter *adapter)\n{\n    …\n    for (vector = 0; vector \u0026lt; adapter-\u0026gt;num_q_vectors; vector++) {\n        struct ixgbe_q_vector *q_vector = adapter-\u0026gt;q_vector[vector];\n        struct msix_entry *entry = \u0026amp;adapter-\u0026gt;msix_entries[vector];\n \n        /* 设置中断处理入口函数为 ixgbe_msix_clean_rings */\n        err = request_irq(entry-\u0026gt;vector, \u0026amp;ixgbe_msix_clean_rings, 0,\n                  q_vector-\u0026gt;name, q_vector);\n        if (err) {\n            e_err(probe, \u0026#34;request_irq failed for MSIX interrupt \u0026#39;%s\u0026#39; \u0026#34;\n                  \u0026#34;Error: %d\\n\u0026#34;, q_vector-\u0026gt;name, err);\n            goto free_queue_irqs;\n        }\n    …\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(2)线上的多队列网卡均支持MSIX，中断处理程序入口为\u003ccode\u003eixgbe_msix_clean_rings\u003c/code\u003e，里面调用了函数\u003ccode\u003enapi_schedule(\u0026amp;q_vector-\u0026gt;napi)\u003c/code\u003e。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/**\n * 文件：ixgbe_main.c\n **/\nstatic irqreturn_t ixgbe_msix_clean_rings(int irq, void *data)\n{\n    struct ixgbe_q_vector *q_vector = data;\n \n    /* EIAM disabled interrupts (on this vector) for us */\n \n    if (q_vector-\u0026gt;rx.ring || q_vector-\u0026gt;tx.ring)\n        napi_schedule(\u0026amp;q_vector-\u0026gt;napi);\n \n    return IRQ_HANDLED;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(3)之后经过一些列调用，直到发起名为\u003ccode\u003eNET_RX_SOFTIRQ\u003c/code\u003e的软中断。到这里完成了硬中断部分，进入软中断部分，同时也上升到了内核层面。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/**\n * 文件：include/linux/netdevice.h\n *  napi_schedule - schedule NAPI poll\n *  @n: NAPI context\n *\n * Schedule NAPI poll routine to be called if it is not already\n * running.\n */\nstatic inline void napi_schedule(struct napi_struct *n)\n{\n    if (napi_schedule_prep(n))\n    /*  注意下面调用的这个函数名字前是两个下划线 */\n        __napi_schedule(n);\n}\n \n/**\n * 文件：net/core/dev.c\n * __napi_schedule - schedule for receive\n * @n: entry to schedule\n *\n * The entry\u0026#39;s receive function will be scheduled to run.\n * Consider using __napi_schedule_irqoff() if hard irqs are masked.\n */\nvoid __napi_schedule(struct napi_struct *n)\n{\n    unsigned long flags;\n \n    /*  local_irq_save用来保存中断状态，并禁止中断 */\n    local_irq_save(flags);\n    /*  注意下面调用的这个函数名字前是四个下划线，传入的 softnet_data 是当前CPU */\n    ____napi_schedule(this_cpu_ptr(\u0026amp;softnet_data), n);\n    local_irq_restore(flags);\n}\n  \n/* Called with irq disabled */\nstatic inline void ____napi_schedule(struct softnet_data *sd,\n                     struct napi_struct *napi)\n{\n    /* 将 napi_struct 加入 softnet_data 的 poll_list */\n    list_add_tail(\u0026amp;napi-\u0026gt;poll_list, \u0026amp;sd-\u0026gt;poll_list);\n  \n    /* 发起软中断 NET_RX_SOFTIRQ */\n    __raise_softirq_irqoff(NET_RX_SOFTIRQ);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(4)\u003ccode\u003eNET_RX_SOFTIRQ\u003c/code\u003e对应的软中断处理程序接口是\u003ccode\u003enet_rx_action()\u003c/code\u003e。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/*\n *  文件：net/core/dev.c\n *  Initialize the DEV module. At boot time this walks the device list and\n *  unhooks any devices that fail to initialise (normally hardware not\n *  present) and leaves us with a valid list of present and active devices.\n *\n */\n \n/*\n *       This is called single threaded during boot, so no need\n *       to take the rtnl semaphore.\n */\nstatic int __init net_dev_init(void)\n{\n    …\n    /*  分别注册TX和RX软中断的处理程序 */\n    open_softirq(NET_TX_SOFTIRQ, net_tx_action);\n    open_softirq(NET_RX_SOFTIRQ, net_rx_action);\n    …\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(5)net_rx_action功能就是轮询调用poll方法，这里就是ixgbe_poll。一次轮询的数据包数量不能超过内核参数net.core.netdev_budget指定的数量（默认值300），并且轮询时间不能超过2个时间片。这个机制保证了单次软中断处理不会耗时太久影响被中断的程序。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/* 文件：net/core/dev.c  */\nstatic void net_rx_action(struct softirq_action *h)\n{\n    struct softnet_data *sd = \u0026amp;__get_cpu_var(softnet_data);\n    unsigned long time_limit = jiffies + 2;\n    int budget = netdev_budget;\n    void *have;\n \n    local_irq_disable();\n \n    while (!list_empty(\u0026amp;sd-\u0026gt;poll_list)) {\n        struct napi_struct *n;\n        int work, weight;\n \n        /* If softirq window is exhuasted then punt.\n         * Allow this to run for 2 jiffies since which will allow\n         * an average latency of 1.5/HZ.\n         */\n  \n        /* 判断处理包数是否超过 netdev_budget 及时间是否超过2个时间片 */\n        if (unlikely(budget \u0026lt;= 0 || time_after_eq(jiffies, time_limit)))\n            goto softnet_break;\n \n        local_irq_enable();\n \n        /* Even though interrupts have been re-enabled, this\n         * access is safe because interrupts can only add new\n         * entries to the tail of this list, and only -\u0026gt;poll()\n         * calls can remove this head entry from the list.\n         */\n        n = list_first_entry(\u0026amp;sd-\u0026gt;poll_list, struct napi_struct, poll_list);\n \n        have = netpoll_poll_lock(n);\n \n        weight = n-\u0026gt;weight;\n \n        /* This NAPI_STATE_SCHED test is for avoiding a race\n         * with netpoll\u0026#39;s poll_napi().  Only the entity which\n         * obtains the lock and sees NAPI_STATE_SCHED set will\n         * actually make the -\u0026gt;poll() call.  Therefore we avoid\n         * accidentally calling -\u0026gt;poll() when NAPI is not scheduled.\n         */\n        work = 0;\n        if (test_bit(NAPI_STATE_SCHED, \u0026amp;n-\u0026gt;state)) {\n            work = n-\u0026gt;poll(n, weight);\n            trace_napi_poll(n);\n        }\n \n        ……\n    } \n \n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e(6)\u003ccode\u003eixgbe_poll\u003c/code\u003e之后的一系列调用就不一一详述了，有兴趣的同学可以自行研究，软中断部分有几个地方会有类似\u003ccode\u003eif (static_key_false(\u0026amp;rps_needed))\u003c/code\u003e这样的判断，会进入前文所述有丢包风险的\u003ccode\u003eenqueue_to_backlog\u003c/code\u003e函数。 这里的逻辑为判断是否启用了RPS机制，RPS是早期单队列网卡上将软中断负载均衡到多个\u003ccode\u003eCPU Core\u003c/code\u003e的技术，它对数据流进行hash并分配到对应的\u003ccode\u003eCPU Core\u003c/code\u003e上，发挥多核的性能。不过现在基本都是多队列网卡，不会开启这个机制，因此走不到这里，\u003ccode\u003estatic_key_false\u003c/code\u003e是针对默认为\u003ccode\u003efalse\u003c/code\u003e的\u003ccode\u003estatic key\u003c/code\u003e的优化判断方式。这段调用的最后，\u003ccode\u003edeliver_skb\u003c/code\u003e会将接收的数据传入一个IP层的数据结构中，至此完成二层的全部处理。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e/**\n *  netif_receive_skb - process receive buffer from network\n *  @skb: buffer to process\n *\n *  netif_receive_skb() is the main receive data processing function.\n *  It always succeeds. The buffer may be dropped during processing\n *  for congestion control or by the protocol layers.\n *\n *  This function may only be called from softirq context and interrupts\n *  should be enabled.\n *\n *  Return values (usually ignored):\n *  NET_RX_SUCCESS: no congestion\n *  NET_RX_DROP: packet was dropped\n */\nint netif_receive_skb(struct sk_buff *skb)\n{\n    int ret;\n \n    net_timestamp_check(netdev_tstamp_prequeue, skb);\n \n    if (skb_defer_rx_timestamp(skb))\n        return NET_RX_SUCCESS;\n \n    rcu_read_lock();\n \n#ifdef CONFIG_RPS\n    /* 判断是否启用RPS机制 */\n    if (static_key_false(\u0026amp;rps_needed)) {\n        struct rps_dev_flow voidflow, *rflow = \u0026amp;voidflow;\n        /* 获取对应的CPU Core */\n        int cpu = get_rps_cpu(skb-\u0026gt;dev, skb, \u0026amp;rflow);\n \n        if (cpu \u0026gt;= 0) {\n            ret = enqueue_to_backlog(skb, cpu, \u0026amp;rflow-\u0026gt;last_qtail);\n            rcu_read_unlock();\n            return ret;\n        }\n    }\n#endif\n    ret = __netif_receive_skb(skb);\n    rcu_read_unlock();\n    return ret;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"tcp-ip协议栈逐层处理-最终交给用户空间读取\"\u003eTCP/IP协议栈逐层处理，最终交给用户空间读取\u003c/h4\u003e\u003cp\u003e数据包进到IP层之后，经过IP层、TCP层处理（校验、解析上层协议，发送给上层协议），放入\u003ccode\u003esocket buffer\u003c/code\u003e，在应用程序执行read() 系统调用时，就能从socket buffer中将新数据从内核区拷贝到用户区，完成读取。\u003c/p\u003e\u003cp\u003e这里的\u003ccode\u003esocket buffer\u003c/code\u003e大小即TCP接收窗口，TCP由于具备流量控制功能，能动态调整接收窗口大小，因此数据传输阶段不会出现由于\u003ccode\u003esocket buffer\u003c/code\u003e接收队列空间不足而丢包的情况（但UDP及TCP握手阶段仍会有）。涉及TCP/IP协议的部分不是此次丢包问题的研究重点，因此这里不再赘述。\u003c/p\u003e\u003ch4 id=\"网卡队列\"\u003e网卡队列\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e查看网卡型号\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e  # lspci -vvv | grep Eth\n01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 03)\n        Subsystem: Dell Ethernet 10G 4P X540/I350 rNDC\n01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 03)\n        Subsystem: Dell Ethernet 10G 4P X540/I350 rNDC\n\n  \n# lspci -vvv\n07:00.0 Ethernet controller: Intel Corporation I350 Gigabit Network Connection (rev 01)\n        Subsystem: Dell Gigabit 4P X540/I350 rNDC\n        Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx+\n        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast \u0026gt;TAbort- \u0026lt;TAbort- \u0026lt;MAbort- \u0026gt;SERR- \u0026lt;PERR- INTx-\n        Latency: 0, Cache Line Size: 128 bytes\n        Interrupt: pin D routed to IRQ 19\n        Region 0: Memory at 92380000 (32-bit, non-prefetchable) [size=512K]\n        Region 3: Memory at 92404000 (32-bit, non-prefetchable) [size=16K]\n        Expansion ROM at 92a00000 [disabled] [size=512K]\n        Capabilities: [40] Power Management version 3\n                Flags: PMEClk- DSI+ D1- D2- AuxCurrent=0mA PME(D0+,D1-,D2-,D3hot+,D3cold+)\n                Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=1 PME-\n        Capabilities: [50] MSI: Enable- Count=1/1 Maskable+ 64bit+\n                Address: 0000000000000000  Data: 0000\n                Masking: 00000000  Pending: 00000000\n        Capabilities: [70] MSI-X: Enable+ Count=10 Masked-\n                Vector table: BAR=3 offset=00000000\n                PBA: BAR=3 offset=00002000\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看出，网卡的中断机制是MSI-X，即网卡的每个队列都可以分配中断（MSI-X支持2048个中断）。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e网卡队列\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e ...\n #define IXGBE_MAX_MSIX_VECTORS_82599    0x40\n...\n \n  \n  u16 ixgbe_get_pcie_msix_count_generic(struct ixgbe_hw *hw)\n {\n     u16 msix_count;\n     u16 max_msix_count;\n     u16 pcie_offset;\n  \n     switch (hw-\u0026gt;mac.type) {\n     case ixgbe_mac_82598EB:\n         pcie_offset = IXGBE_PCIE_MSIX_82598_CAPS;\n         max_msix_count = IXGBE_MAX_MSIX_VECTORS_82598;\n         break;\n     case ixgbe_mac_82599EB:\n     case ixgbe_mac_X540:\n     case ixgbe_mac_X550:\n     case ixgbe_mac_X550EM_x:\n     case ixgbe_mac_x550em_a:\n         pcie_offset = IXGBE_PCIE_MSIX_82599_CAPS;\n         max_msix_count = IXGBE_MAX_MSIX_VECTORS_82599;\n         break;\n     default:\n         return 1;\n     }\n ...\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e根据网卡型号确定驱动中定义的网卡队列，可以看到X540网卡驱动中定义最大支持的IRQ Vector为0x40(数值:64)。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e static int ixgbe_acquire_msix_vectors(struct ixgbe_adapter *adapter)\n {\n     struct ixgbe_hw *hw = \u0026amp;adapter-\u0026gt;hw;\n     int i, vectors, vector_threshold;\n  \n     /* We start by asking for one vector per queue pair with XDP queues\n      * being stacked with TX queues.\n      */\n     vectors = max(adapter-\u0026gt;num_rx_queues, adapter-\u0026gt;num_tx_queues);\n     vectors = max(vectors, adapter-\u0026gt;num_xdp_queues);\n  \n     /* It is easy to be greedy for MSI-X vectors. However, it really\n      * doesn\u0026#39;t do much good if we have a lot more vectors than CPUs. We\u0026#39;ll\n      * be somewhat conservative and only ask for (roughly) the same number\n      * of vectors as there are CPUs.\n      */\n     vectors = min_t(int, vectors, num_online_cpus());\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过加载网卡驱动，获取网卡型号和网卡硬件的队列数；但是在初始化misx vector的时候，还会结合系统在线CPU的数量，通过Sum = Min(网卡队列，CPU Core) 来激活相应的网卡队列数量，并申请Sum个中断号。\u003c/p\u003e\u003cp\u003e如果CPU数量小于64，会生成CPU数量的队列，也就是每个CPU会产生一个external IRQ。\u003c/p\u003e\u003cp\u003e我们线上的CPU一般是48个逻辑core，就会生成48个中断号，由于我们是两块网卡做了bond，也就会生成96个中断号。\u003c/p\u003e\u003ch2 id=\"验证与复现网络丢包\"\u003e验证与复现网络丢包\u003c/h2\u003e\u003cp\u003e通过霸爷的\u003ca href=\"http://blog.yufeng.info/archives/2037\"\u003e一篇文章\u003c/a\u003e，我们在测试环境做了测试，发现测试环境的中断确实有集中在\u003ccode\u003eCPU 0\u003c/code\u003e的情况，下面使用\u003ccode\u003esystemtap\u003c/code\u003e诊断测试环境软中断分布的方法:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003eglobal hard, soft, wq\n  \nprobe irq_handler.entry {\nhard[irq, dev_name]++;\n}\n  \nprobe timer.s(1) {\nprintln(\u0026#34;==irq number:dev_name\u0026#34;)\nforeach( [irq, dev_name] in hard- limit 5) {\nprintf(\u0026#34;%d,%s-\u0026gt;%d\\n\u0026#34;, irq, kernel_string(dev_name), hard[irq, dev_name]);      \n}\n \nprintln(\u0026#34;==softirq cpu:h:vec:action\u0026#34;)\nforeach( [c,h,vec,action] in soft- limit 5) {\nprintf(\u0026#34;%d:%x:%x:%s-\u0026gt;%d\\n\u0026#34;, c, h, vec, symdata(action), soft[c,h,vec,action]);      \n}\n \n  \nprintln(\u0026#34;==workqueue wq_thread:work_func\u0026#34;)\nforeach( [wq_thread,work_func] in wq- limit 5) {\nprintf(\u0026#34;%x:%x-\u0026gt;%d\\n\u0026#34;, wq_thread, work_func, wq[wq_thread, work_func]); \n}\n  \nprintln(\u0026#34;\\n\u0026#34;)\ndelete hard\ndelete soft\ndelete wq\n}\n  \nprobe softirq.entry {\nsoft[cpu(), h,vec,action]++;\n}\n  \nprobe workqueue.execute {\nwq[wq_thread, work_func]++\n}\n  \n  \nprobe begin {\nprintln(\u0026#34;~\u0026#34;)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e下面执行\u003ccode\u003ei.stap\u003c/code\u003e的结果:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e==irq number:dev_name\n87,eth0-0-\u0026gt;1693\n90,eth0-3-\u0026gt;1263\n95,eth1-3-\u0026gt;746\n92,eth1-0-\u0026gt;703\n89,eth0-2-\u0026gt;654\n==softirq cpu:h:vec:action\n0:ffffffff81a83098:ffffffff81a83080:0xffffffff81461a00-\u0026gt;8928\n0:ffffffff81a83088:ffffffff81a83080:0xffffffff81084940-\u0026gt;626\n0:ffffffff81a830c8:ffffffff81a83080:0xffffffff810ecd70-\u0026gt;614\n16:ffffffff81a83088:ffffffff81a83080:0xffffffff81084940-\u0026gt;225\n16:ffffffff81a830c8:ffffffff81a83080:0xffffffff810ecd70-\u0026gt;224\n==workqueue wq_thread:work_func\nffff88083062aae0:ffffffffa01c53d0-\u0026gt;10\nffff88083062aae0:ffffffffa01ca8f0-\u0026gt;10\nffff88083420a080:ffffffff81142160-\u0026gt;2\nffff8808343fe040:ffffffff8127c9d0-\u0026gt;2\nffff880834282ae0:ffffffff8133bd20-\u0026gt;1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e下面是\u003ccode\u003eaction\u003c/code\u003e对应的符号信息：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eaddr2line -e /usr/lib/debug/lib/modules/2.6.32-431.20.3.el6.mt20161028.x86_64/vmlinux ffffffff81461a00\n/usr/src/debug/kernel-2.6.32-431.20.3.el6/linux-2.6.32-431.20.3.el6.mt20161028.x86_64/net/core/dev.c:4013\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e打开这个文件，我们发现它是在执行\u003ccode\u003estatic void net_rx_action(struct softirq_action *h)\u003c/code\u003e这个函数，而这个函数正是前文提到的，\u003ccode\u003eNET_RX_SOFTIRQ\u003c/code\u003e对应的软中断处理程序。因此可以确认网卡的软中断在机器上分布非常不均，而且主要集中在\u003ccode\u003eCPU 0\u003c/code\u003e上。通过\u003ccode\u003e/proc/interrupts\u003c/code\u003e能确认硬中断集中在\u003ccode\u003eCPU 0\u003c/code\u003e上，因此软中断也都由\u003ccode\u003eCPU 0\u003c/code\u003e处理，如何优化网卡的中断成为了我们关注的重点。\u003c/p\u003e\u003ch2 id=\"优化策略\"\u003e优化策略\u003c/h2\u003e\u003ch3 id=\"cpu亲缘性\"\u003eCPU亲缘性\u003c/h3\u003e\u003cp\u003e前文提到，丢包是因为队列中的数据包超过了\u003ccode\u003enetdev_max_backlog\u003c/code\u003e造成了丢弃，因此首先想到是临时调大\u003ccode\u003enetdev_max_backlog\u003c/code\u003e能否解决燃眉之急，事实证明，对于轻微丢包调大参数可以缓解丢包，但对于大量丢包则几乎不怎么管用，内核处理速度跟不上收包速度的问题还是客观存在，本质还是因为单核处理中断有瓶颈，即使不丢包，服务响应速度也会变慢。因此如果能同时使用多个\u003ccode\u003eCPU Core\u003c/code\u003e来处理中断，就能显著提高中断处理的效率，并且每个CPU都会实例化一个\u003ccode\u003esoftnet_data\u003c/code\u003e对象，队列数也增加了。\u003c/p\u003e\u003ch4 id=\"中断亲缘性设置\"\u003e中断亲缘性设置\u003c/h4\u003e\u003cp\u003e通过设置中断亲缘性，可以让指定的中断向量号更倾向于发送给指定的\u003ccode\u003eCPU Core\u003c/code\u003e来处理，俗称“绑核”。命令\u003ccode\u003egrep eth /proc/interrupts\u003c/code\u003e的第一列可以获取网卡的中断号，如果是多队列网卡，那么就会有多行输出：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/3e8f96aa.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e中断的亲缘性设置可以在\u003ccode\u003ecat /proc/irq/${中断号}/smp_affinity 或 cat /proc/irq/${中断号}/smp_affinity_list\u003c/code\u003e中确认，前者是16进制掩码形式，后者是以\u003ccode\u003eCPU Core\u003c/code\u003e序号形式。例如下图中，将16进制的400转换成2进制后，为 10000000000，“1”在第10位上，表示亲缘性是第10个\u003ccode\u003eCPU Core\u003c/code\u003e。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/fc525c5a.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e那为什么中断号只设置一个\u003ccode\u003eCPU Core\u003c/code\u003e呢？而不是为每一个中断号设置多个\u003ccode\u003eCPU Core\u003c/code\u003e平行处理。我们经过测试，发现当给中断设置了多个\u003ccode\u003eCPU Core\u003c/code\u003e后，它也仅能由设置的第一个\u003ccode\u003eCPU Core\u003c/code\u003e来处理，其他的\u003ccode\u003eCPU Core\u003c/code\u003e并不会参与中断处理，原因猜想是当CPU可以平行收包时，不同的核收取了同一个queue的数据包，但处理速度不一致，导致提交到IP层后的顺序也不一致，这就会产生乱序的问题，由同一个核来处理可以避免了乱序问题。\u003c/p\u003e\u003cp\u003e但是，当我们配置了多个Core处理中断后，发现Redis的慢查询数量有明显上升，甚至部分业务也受到了影响，慢查询增多直接导致可用性降低，因此方案仍需进一步优化。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/18dfefa9.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch4 id=\"redis进程亲缘性设置\"\u003eRedis进程亲缘性设置\u003c/h4\u003e\u003cp\u003e如果某个\u003ccode\u003eCPU Core\u003c/code\u003e正在处理Redis的调用，执行到一半时产生了中断，那么CPU不得不停止当前的工作转而处理中断请求，中断期间Redis也无法转交给其他core继续运行，必须等处理完中断后才能继续运行。Redis本身定位就是高速缓存，线上的平均端到端响应时间小于1ms，如果频繁被中断，那么响应时间必然受到极大影响。容易想到，由最初的\u003ccode\u003eCPU 0\u003c/code\u003e单核处理中断，改进到多核处理中断，Redis进程被中断影响的几率增大了，因此我们需要对Redis进程也设置CPU亲缘性，使其与处理中断的Core互相错开，避免受到影响。\u003c/p\u003e\u003cp\u003e使用命令\u003ccode\u003etaskset\u003c/code\u003e可以为进程设置CPU亲缘性，操作十分简单，一句\u003ccode\u003etaskset -cp cpu-list pid\u003c/code\u003e即可完成绑定。经过一番压测，我们发现使用8个core处理中断时，流量直至打满双万兆网卡也不会出现丢包，因此决定将中断的亲缘性设置为物理机上前8个core，Redis进程的亲缘性设置为剩下的所有core。调整后，确实有明显的效果，慢查询数量大幅优化，但对比初始情况，仍然还是高了一些些，还有没有优化空间呢？\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/42ace900.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e通过观察，我们发现一个有趣的现象，当只有CPU 0处理中断时，Redis进程更倾向于运行在CPU 0，以及CPU 0同一物理CPU下的其他核上。于是有了以下推测：我们设置的中断亲缘性，是直接选取了前8个核心，但这8个core却可能是来自两块物理CPU的，在\u003ccode\u003e/proc/cpuinfo\u003c/code\u003e中，通过字段\u003ccode\u003eprocessor\u003c/code\u003e和\u003ccode\u003ephysical id\u003c/code\u003e 能确认这一点，那么响应慢是否和物理CPU有关呢？物理CPU又和NUMA架构关联，每个物理CPU对应一个\u003ccode\u003eNUMA node\u003c/code\u003e，那么接下来就要从NUMA角度进行分析。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/87fa1656.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch3 id=\"numa\"\u003eNUMA\u003c/h3\u003e\u003ch4 id=\"smp-架构\"\u003eSMP 架构\u003c/h4\u003e\u003cp\u003e随着单核CPU的频率在制造工艺上的瓶颈，CPU制造商的发展方向也由纵向变为横向：从CPU频率转为每瓦性能。CPU也就从单核频率时代过渡到多核性能协调。\u003c/p\u003e\u003cp\u003eSMP(对称多处理结构)：即CPU共享所有资源，例如总线、内存、IO等。\u003c/p\u003e\u003cp\u003eSMP 结构：一个物理CPU可以有多个物理Core，每个Core又可以有多个硬件线程。即：每个HT有一个独立的L1 cache，同一个Core下的HT共享L2 cache，同一个物理CPU下的多个core共享L3 cache。\u003c/p\u003e\u003cp\u003e下图(摘自\u003ca href=\"https://mp.weixin.qq.com/s/y1NSE5xdh8Nt5hlmK0E8Og\"\u003e内核月谈\u003c/a\u003e)中，一个x86 CPU有4个物理Core，每个Core有两个HT(Hyper Thread)。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/70f99657.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch4 id=\"numa-架构\"\u003eNUMA 架构\u003c/h4\u003e\u003cp\u003e在前面的FSB(前端系统总线)结构中，当CPU不断增长的情况下，共享的系统总线就会因为资源竞争(多核争抢总线资源以访问北桥上的内存)而出现扩展和性能问题。\u003c/p\u003e\u003cp\u003e在这样的背景下，基于SMP架构上的优化，设计出了NUMA(Non-Uniform Memory Access)非均匀内存访问。\u003c/p\u003e\u003cp\u003e内存控制器芯片被集成到处理器内部，多个处理器通过QPI链路相连，DRAM也就有了远近之分。(如下图所示：摘自\u003ca href=\"http://mechanical-sympathy.blogspot.com/2013/02/cpu-cache-flushing-fallacy.html\"\u003eCPU Cache\u003c/a\u003e)\u003c/p\u003e\u003cp\u003eCPU 多层Cache的性能差异是很巨大的，比如：L1的访问时长1ns，L2的时长3ns…跨node的访问会有几十甚至上百倍的性能损耗。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/b3d776f1.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch4 id=\"numa-架构下的中断优化\"\u003eNUMA 架构下的中断优化\u003c/h4\u003e\u003cp\u003e这时我们再回归到中断的问题上，当两个NUMA节点处理中断时，CPU实例化的\u003ccode\u003esoftnet_data\u003c/code\u003e以及驱动分配的\u003ccode\u003esk_buffer\u003c/code\u003e都可能是跨Node的，数据接收后对上层应用Redis来说，跨Node访问的几率也大大提高，并且无法充分利用L2、L3 cache，增加了延时。\u003c/p\u003e\u003cp\u003e同时，由于\u003ccode\u003eLinux wake affinity\u003c/code\u003e特性，如果两个进程频繁互动，调度系统会觉得它们很有可能共享同样的数据，把它们放到同一CPU核心或\u003ccode\u003eNUMA Node\u003c/code\u003e有助于提高缓存和内存的访问性能，所以当一个进程唤醒另一个的时候，被唤醒的进程可能会被放到相同的\u003ccode\u003eCPU core\u003c/code\u003e或者相同的NUMA节点上。此特性对中断唤醒进程时也起作用，在上一节所述的现象中，所有的网络中断都分配给\u003ccode\u003eCPU 0\u003c/code\u003e去处理，当中断处理完成时，由于\u003ccode\u003ewakeup affinity\u003c/code\u003e特性的作用，所唤醒的用户进程也被安排给\u003ccode\u003eCPU 0\u003c/code\u003e或其所在的numa节点上其他core。而当两个\u003ccode\u003eNUMA node\u003c/code\u003e处理中断时，这种调度特性有可能导致Redis进程在\u003ccode\u003eCPU core\u003c/code\u003e之间频繁迁移，造成性能损失。\u003c/p\u003e\u003cp\u003e综合上述，将中断都分配在同一\u003ccode\u003eNUMA Node\u003c/code\u003e中，中断处理函数和应用程序充分利用同NUMA下的L2、L3缓存、以及同Node下的内存，结合调度系统的\u003ccode\u003ewake affinity\u003c/code\u003e特性，能够更进一步降低延迟。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018a/ad145391.png\" alt=\"\"/\u003e\u003c/p\u003e\u003ch2 id=\"参考文档\"\u003e参考文档\u003c/h2\u003e\u003col\u003e\u003cli\u003e\u003ca href=\"https://communities.intel.com/community/tech/wired/blog/2009/11/04/how-the-kitchen-sink-and-statistics-explain-and-treat-dropped-packets\"\u003eIntel 官方文档\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf\"\u003eRedhat 官方文档\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"作者简介\"\u003e作者简介\u003c/h2\u003e\u003cul\u003e\u003cli\u003e骁雄，14年加入美团点评，主要从事MySQL、Redis数据库运维，高可用和相关运维平台建设。\u003c/li\u003e\u003cli\u003e春林，17年加入美团点评，毕业后一直深耕在运维线，从网络工程师到Oracle DBA再到MySQL DBA 多种岗位转变，现在美大主要职责Redis运维开发和优化工作。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"招聘信息\"\u003e招聘信息\u003c/h2\u003e\u003cp\u003e美团点评DBA团队招聘各类DBA人才，Base北京上海均可。我们致力于为公司提供稳定、可靠、高效的在线存储服务，打造业界领先的数据库团队。这里有基于Redis Cluster构建的大规模分布式缓存系统Squirrel，也有基于Tair进行大刀阔斧改进的分布式KV存储系统Cellar，还有数千各类架构的MySQL实例，每天提供万亿级的OLTP访问请求。真正的海量、分布式、高并发环境。欢迎各位朋友推荐或自荐至jinlong.cai#dianping.com。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2018-03-16T00:00:00Z",
  "Author": "soulteary@gmail.com"
}