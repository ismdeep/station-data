{
  "Source": "tech.meituan.com",
  "Title": "美团外卖前端可视化界面组装平台 —— 乐高",
  "Link": "https://tech.meituan.com/2017/03/09/waimai-lego.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003e乐高，是美团点评一个快速搭建后台系统页面的平台。名称来源于大家熟悉的丹麦知名玩具品牌，他们的玩具都是通过组合易拆卸、装配的零件，形成最终的作品。经过长期的发展，乐高品牌渐渐有了“快乐、想象、创意的未来”的寓意。\u003c/p\u003e\u003cp\u003e随着外卖业务的高速发展，大量的业务开发需求接踵而来。像人手紧缺、重复开发、沟通效率低下等问题，暴露得愈发明显。于是，我们有了这么一个想法：能否基于现有大量业务系统的结构固定、需求紧急、交互样式要求不高等特点，搭建一个平台，它把已经成型的组件像乐高玩具的零件一样，使用拖拽的方式组装成最终的页面，同时能够让各个业务快速的接入。\u003c/p\u003e\u003cp\u003e在美团点评一次黑客马拉松中，我们将这一想法付诸实践。在参赛的四十多支团队中，获得了第二名。这给了我们坚持下去的信心，也明确了后续努力的方向。经过一段时间的迭代，目前乐高形成了较完善的开发和生产流程：\n* 基于平台提供的标准，开发出独立的组件。\n* 组件经过不同形式的排列组合，形成最终的产品界面。\u003c/p\u003e\u003cp\u003e乐高平台的应用可分为三大部分：面向用户的\u003cstrong\u003e组装工厂\u003c/strong\u003e、面向开发者的\u003cstrong\u003e开发视图\u003c/strong\u003e以及面向后端服务化的\u003cstrong\u003e暴露接口\u003c/strong\u003e。\u003c/p\u003e\u003ch2 id=\"2-1-组装工厂\"\u003e2.1 组装工厂\u003c/h2\u003e\u003ch3 id=\"2-1-1-视图布局\"\u003e2.1.1 视图布局\u003c/h3\u003e\u003cp\u003e页面组装如图一所示，主要包含五部分：\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e组件树\u003c/strong\u003e\n组件树是页面的骨架（①所示区域）部分，由内置的各个组件组装而成。乐高为组件树提供了丰富的操作（②右键弹框）选项。除了添加、拷贝粘贴、预览、删除等功能，还可以通过拖动组件在组件树中的位置（③区域），即时的在预览区域展示出效果。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e预览页面\u003c/strong\u003e\n预览区块（④所示区域）占据了页面的右半边部分。在组件树中，每个组件都可以单独预览。组件的预览，显示的是这个组件及其子组件共同作用的效果。预览根组件，能看到完整的页面。也可以通过 “页面预览” 按钮进行完整页面的预览。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e右侧模块属性\u003c/strong\u003e\n每个组件，都有可配置的属性（3.2.1节提到的模块示例代码中的Model字段），打开⑤区域的面板可以对左侧选中的组件进行配置。如，配置按钮组件的颜色、大小等，都取决于组件开发者对该组件的预留项。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e顶部页面操作\u003c/strong\u003e\n⑥区域部分，包含对当前视图的操作。视图可以理解为一个独立的页面，包含了打开、发布、重命名等等功能。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e左侧导航\u003c/strong\u003e\n⑦区域部分，包含了三个可选标签。\u003cul\u003e\u003cli\u003e第一个是下图所选的组装工厂。\u003c/li\u003e\u003cli\u003e第二个是组件的开发工厂。\u003c/li\u003e\u003cli\u003e第三个为整个系统的健康、QPS等等运营数据的实时监控。\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/68936306.png\" alt=\"布局视图\"/\u003e\u003c/p\u003e\u003cp\u003e（图一）\u003c/p\u003e\u003ch3 id=\"2-1-2-视图脚本\"\u003e2.1.2 视图脚本\u003c/h3\u003e\u003cp\u003e一个最终完成的页面中的脚本，按照来源分为了三块。\n* 图二所示的脚本编辑区域。\n* 当前页面所使用的UI库（下文中会提到）中，乐高平台默认使用的是外卖自己封装的\u003ca href=\"http://kangarooui.waimai.meituan.com/\" title=\"袋鼠UI\"\u003e袋鼠UI\u003c/a\u003e。\n* 另外一部分来自每个组件中自己编程接口的实现（即3.2.1节模块示例代码中的Script字段）。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/8f559fee.png\" alt=\"脚本视图方式\"/\u003e\u003c/p\u003e\u003cp\u003e（图二）\u003c/p\u003e\u003ch3 id=\"2-1-3-同步数据\"\u003e2.1.3 同步数据\u003c/h3\u003e\u003cp\u003e乐高系统中提供了数据源的概念。用于模拟、校验模板页面中的数据。有时，后端需要乐高输出FreeMarker或者EJS模板，而非HTML页面。为了保障页面在乐高中的正常开发和预览，我们需要Mock一部分同步（可理解为后台写入ModelView的）数据。\u003c/p\u003e\u003cp\u003e将JSON格式的数据写入数据源，即可实现Mock数据。此外，在后端调用乐高接口时，数据源还会校验传入数据的合法性。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/ba5b6ae5.png\" alt=\"mock的视图\"/\u003e\u003c/p\u003e\u003cp\u003e（图三）\u003c/p\u003e\u003ch2 id=\"2-2-开发视图\"\u003e2.2 开发视图\u003c/h2\u003e\u003cp\u003e乐高是一个平台。开发者可以在乐高中按照自己的喜好、想法、思路开发自己的模块。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/bdbafeeb.png\" alt=\"开发者视图\"/\u003e\u003c/p\u003e\u003cp\u003e（图四）\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003e组件的编辑\u003c/strong\u003e\n①区域为组件提供了编辑的功能。当前编辑的组件的开发者、修改时间、创建时间等信息，会显示在④区域部分。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e组件分类管理\u003c/strong\u003e\n在平台中存在了大量的组件的时候。我们需要对组件进行分类管理（③所示区域）。\u003c/li\u003e\u003cli\u003e\u003cstrong\u003e组件版本管理\u003c/strong\u003e\n每个组件都有自己的版本号管理（②区域所示）。开发者点击“组件保存”后，会在版本列表中增加0.username的临时版本，用于保存当前修改的信息。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"2-3-系统接入\"\u003e2.3 系统接入\u003c/h2\u003e\u003cp\u003e乐高目前提供了Java和Node.js两种SDK的接入方式。\u003c/p\u003e\u003ch3 id=\"2-3-1-java\"\u003e2.3.1 Java\u003c/h3\u003e\u003cp\u003e在工程中引入JAR包。可通过调用SDK接口，从乐高系统获取页面或者模板。\u003c/p\u003e\u003cp\u003e获取的类型有两种：渲染完成的HTML代码和模板代码（目前支持FreeMarker模板）。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e/**\n * 无数据页面获取\n * @param pageId 页面id或者vurl,取决于pageIdType传入值\n * @param pageIdType，枚举类型，LegoService.PageIdType.ID，LegoService.PageIdType.NAME 前者传入页面id时使用，后者传入页面vurl时使用\n * @return 枚举类型，OK(200,\u0026#34;成功\u0026#34;), FAILED(500,\u0026#34;失败\u0026#34;);\n *\n */\npublic static final LegoStatus getPageWithoutData(HttpServletResponse servletResponse, String pageId, PageIdType pageIdType)\n \n/**\n * 带有页面数据的页面获取\n * @param model传入的数据\n *\n */\npublic static final LegoStatus getPage(HttpServletResponse servletResponse, String pageId, PageIdType pageIdType, ModelMap model)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"2-3-2-node-js\"\u003e2.3.2 Node.js\u003c/h3\u003e\u003cp\u003e安装完乐高依赖的模块后，可参照下述示例调用：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\u0026#39;use strict\u0026#39;;\n \nvar lego = require(\u0026#39;lego\u0026#39;);\n \n/**\n * 请求页面id获取页面,\n * @param data,页面渲染用数据，json格式\n * @param rootId 只获取部分页面时使用，默认为空\n * @param callback, 回调使用callback(err, body), 正常传入err为空，body为页面html内容。错误时err为错误信息。\n *\n */\nlego.renderById(vid, data, rootId, callback)\n \n/**\n * 请求页面短连接获取页面\n *\n */\nlego.renderByUrl(vurl, data, rootId, callback)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"3-1-理念\"\u003e3.1 理念\u003c/h2\u003e\u003cp\u003e在AMD、CMD、CommonJS等模块化标准开始流行后，模块化的思维方式，给社区的前端开发者们造成了比较深刻的影响。\u003c/p\u003e\u003cp\u003e前端开发有了比较强烈的意识，对原本混沌的JavaScript代码按照标准模式进行组织和分类。据此来构建出的Web App，不仅提高了系统的可维护性，并且便于和其他开发者进行沟通，从而形成一个巨大的开发链条。借助其他开发者提供的一批模块，使我们能够专注于业务逻辑，同时降低代码冗余、开发成本和潜在风险。\u003c/p\u003e\u003cp\u003e基于模块化开发的大体思路。我们在对一堆看似杂乱无章的DOM结构进行归纳、总结、提炼，使之成为一个个独立的组件。数个组件的协同工作，呈现出一个完整的页面。乐高系统设计理念，正是源于如下所示的一个等式：\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/4527cc38.png\" alt=\"理念\"/\u003e\u003c/p\u003e\u003cp\u003e这里的 \u003cstrong\u003e节点描述\u003c/strong\u003e、\u003cstrong\u003e数据\u003c/strong\u003e、\u003cstrong\u003e功能逻辑\u003c/strong\u003e 就是下文中要提出的模块部分。\u003c/p\u003e\u003cp\u003e更为直观的表述，如下图所示的一个基本结构，可以组成一个简单的页面。组件粒度的划分，有比较充裕的灵活性，可以由组件设计者自己定制。\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/59a3772a.png\" alt=\"直观理念图\"/\u003e\u003c/p\u003e\u003ch2 id=\"3-2-组件\"\u003e3.2 组件\u003c/h2\u003e\u003cp\u003e组件是组成任何一个视图的最基础元素，是整个平台的基石。组件之间的耦合度、通信、可扩展性、易用性是否足够强大，很大一部分程度上决定了整个系统的质量。\u003c/p\u003e\u003ch3 id=\"3-2-1-形态\"\u003e3.2.1 形态\u003c/h3\u003e\u003cp\u003e乐高的组件是对其背后庞大的样式/交互资源库的抽取（默认为\u003ca href=\"http://kangarooui.waimai.meituan.com/\" title=\"袋鼠UI\"\u003e袋鼠UI\u003c/a\u003e系列，也可以是其他的前端资源库），倚重于对组件HTML结构，交互调用的描述。每个组件负责拼装自己的HTML结构，和使用组件库中预存的交互。因此，推荐的组件的开发方式中，不包含对CSS的描述，但是也允许通过Hack的方式增加每个组件的CSS。\u003c/p\u003e\u003cp\u003e每个独立组件提供了8个需要实现的接口：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e\n/**\n * 组件基本展示及功能规则的描述，目前对外暴露了8个接口（name, pyname, desc, leaf, uilib, model, script, render）\n */\n\n\u0026#39;use strict\u0026#39;;\n\n/**\n * 组件名称，用来标识该组件在系统中的引用名称。\n * 取值可以为汉字，大小写英文字母，数字和下划线的组合\n * [建议取名为英文，每个组件name唯一，主要供程序和RD使用]\n */\nexports.name = \u0026#39;Sample\u0026#39;;\n\n/**\n * 组件别名，只能为汉字或者字母\n * [建议取名中文，每个组件pyname唯一，主要供PM等对hmtl及组件专有英文名称不太熟悉的人使用]\n */\nexports.pyname = \u0026#39;中文名称\u0026#39;;\n\n/**\n * 组件描述\n */\nexports.desc = \u0026#39;\u0026#39;;\n\n/**\n * 该组件可以添加的叶子节点\n * 1.如果可包含子节点，请在数组中添加组件id，如: exports.leaf = [12,23,34]\n * 2.如果不可包含任何子节点，请将leaf置为null，即: exports.leaf = null\n * 3.如果可包含任何子节点，请将leaf置为空数组，即: exports.leaf = []\n */\nexports.leaf = [];\n\n/**\n * 当前组件需要适配的组件库\n */\nexports.uilib = \u0026#39;kui\u0026#39;;\n\n/**\n * 该接口用来描述组件配置的相关属性，其子组件可以在编程/渲染接口中读取到父组件的配置信息\n *\n * type:数据类型，目前含盖的数据类型:\n *  text: 文本输入框类型\n *     textEx: {\n *       name: \u0026#39;测试属性1\u0026#39;,\n *       type: \u0026#39;text\u0026#39;,\n *       def : \u0026#39;默认值\u0026#39;,\n *       desc: \u0026#39;属性描述\u0026#39;\n *   }\n *  select: 下拉选择框类型\n *     selectEx: {\n *       name: \u0026#39;测试属性1\u0026#39;, //最长不超9个字，否则内容尽量放到注释里\n *       type: \u0026#39;select\u0026#39;,\n *       options:{\n *          value1: \u0026#39;这是值1\u0026#39;,\n *          value2: \u0026#39;这是值2\u0026#39;,\n *       },\n *       def   : \u0026#39;defValue\u0026#39;,\n *       desc: \u0026#39;属性描述\u0026#39;\n *   }\n *  textarea: 多行输入框类型(配置同text)\n *  radio: 单选选择框类型(配置同select)\n *  checkbox: 复选类型(配置同select，最终值为 value1,value2 逗号分隔)\n */\nexports.model = {\n\n}\n\n/**\n * 组件脚本。会插入到页面html中执行，组件内部逻辑或与外部交互可放到该函数中执行\n * @param mvId 组件用到的mvId，组件唯一标识\n * @param evtMgr 页面全局事件中心，可以通过 bind(evt, handler) unbind(evt, handler) 和 trigger(evt, data, context)三个方法控制事件流的绑定和触发\n * @param modelData 组件属性数据，默认传参encode字符串，首先需要decodeURI，然后换成json对象\n */\nexports.script = function (mvid, evtMgr, modelData) {\n  modelData = JSON.parse(decodeURI(modelData));\n}\n\n/**\n * 该组件在用户界面的展示\n * @param {Object} node node中包括{_children:[], _parent:\u0026#39;\u0026#39;, _innerHtml:\u0026#39;\u0026#39;, _modelData:{}, _mid:\u0026#39;\u0026#39;, _mvid:\u0026#39;\u0026#39;, _mname:\u0026#39;\u0026#39;},还有其他字段暂不建议使用\n */\nexports.render = function (node) {\n  var _modelData = node._modelData;\n  var _children = node._children;\n  var content = \u0026#39;\u0026#39;;\n  _children.map(function (child) {\n    content += child._innerHtml;\n  });\n\n  return ``;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"3-2-2-功能\"\u003e3.2.2 功能\u003c/h3\u003e\u003cp\u003e乐高的组件作为一个界面系统的元素部分，在设计之初需要考虑到以下的五个方面。通过这几部分，逐渐的形成了一套比较完善的模块化方案：\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/c15319ad.png\" alt=\"布局视图\"/\u003e\u003c/p\u003e\u003ch4 id=\"组件的通信\"\u003e组件的通信\u003c/h4\u003e\u003cp\u003e业务组件之间的数据传递，是一个比较常见的的场景。\u003c/p\u003e\u003cp\u003e我们给每个组件实现的编程（Script）接口中传递了三个参数mvid、evtMgr、modalData。其中，evtMgr就是乐高系统中的事件中心。通过绑定或者触发相应的事件，在实现模块间通信的同时，较好的解耦了模块。示例代码：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e  // 事件的触发\n  evtMgr.trigger(\u0026#39;tata\u0026#39;, {a: 1});\n    \n  // 事件的绑定\n  evtMgr.bind(\u0026#39;tata\u0026#39;, (params) =\u0026gt; {\n    \n    // TODO Here.\n    console.log(params)   // {a: 1}\n  })\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"数据给组件的交付\"\u003e数据给组件的交付\u003c/h4\u003e\u003cp\u003e部分业务组件会有自己的数据。数据从来源划分，可以分为系统数据、配置数据。系统数据又可以被划分为同步数据和异步数据：\u003c/p\u003e\u003cul\u003e\u003cli\u003e配置数据来自使用乐高配置的人员，在开发模块的预留接口中配置信息。\u003c/li\u003e\u003cli\u003e系统数据中的异步数据可以通过AJAX的方式从后端拉取。\u003c/li\u003e\u003cli\u003e同步的数据，装配时可以配置在数据源中，方便预览效果。使用时可以直接在模块的Render接口中调用。\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e  exports.render = function (node) {\n    var _modelData = node._modelData;\n    var _children = node._children;\n    var content = \u0026#39;\u0026#39;;\n    _children.map(function (child) {\n      content += child._innerHtml;\n    });\n\n    return `${data_from_datasource}`;   // 数据源数据字段读取\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"组件编程接口的暴露\"\u003e组件编程接口的暴露\u003c/h4\u003e\u003cp\u003e在“3.2.1 形态”章节中所示的8个编程接口，对模块的开发者开放。\u003c/p\u003e\u003ch4 id=\"组件的版本控制\"\u003e组件的版本控制\u003c/h4\u003e\u003cp\u003e为了在修改、发布组件时，不对线上页面造成影响，也为了满足多人协同开发的需求，我们实现了简单的版本控制功能。\u003c/p\u003e\u003cp\u003e每个组件预留了开发者版本。开发完毕后，需要单独的发布该组件。在视图中进行组装时，可以选择所需要的版本，如果新版本有问题，能够及时做到单独模块的线上回滚。\u003c/p\u003e\u003ch4 id=\"组件的渲染\"\u003e组件的渲染\u003c/h4\u003e\u003cp\u003e乐高中比较核心的功能。是实现了一个页面的解析引擎。输入为在工厂中形成的页面描述的数据结构，逐步添加外部资源（数据源、界面资源库、模块）进行组合，进而生成最终的HTML或者模板。\u003c/p\u003e\u003cp\u003e外卖的系统，大多使用freemarker.jar作为页面渲染引擎。因此，乐高中也包含了一个freemarker.jar的模板引擎。整体工作流程如下图所示：\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/bd9904f0.png\" alt=\"布局视图\"/\u003e\u003c/p\u003e\u003cp\u003e来自于视图组装工厂产出的页面信息的数据结构，经过解析引擎调用了其他资源（数据源、框架、模块描述）渲染后。形成了最终的HTML或者模板，返回给后台的服务中转给最终的用户。\u003c/p\u003e\u003ch2 id=\"3-3-流程\"\u003e3.3 流程\u003c/h2\u003e\u003cp\u003e乐高使用了Node.js Express框架搭建，作为前端服务化的方式存在。\u003c/p\u003e\u003cp\u003e同时这个服务也提供了内部用户（页面组装者）访问的界面。整体工作流程如下所示：\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/0312f8b6.png\" alt=\"布局视图\"/\u003e\u003c/p\u003e\u003ch2 id=\"3-4-视图结构\"\u003e3.4 视图结构\u003c/h2\u003e\u003cp\u003e上文介绍了组装工厂。我们知道在页面组建完毕之后，系统中最终形成的是一个扁平的页面数据结构，用于对页面的描述。\u003c/p\u003e\u003cp\u003e这个数据结构中，除了对每个节点的描述之外，使用了_children、_parent等来描述该节点在当前视图的树状结构中所处的位置和层级。具体的结构如下所示：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e{\n   1_0: {\n      _children: [101_1],       // children in current page\n      _mvid: \u0026#39;1_0\u0026#39;,             // unique id in current page\n      _parent: \u0026#39;#\u0026#39;,             // parent in current page\n      _mid: \u0026#39;1\u0026#39;,                // id\n      _version: \u0026#39;1.0.0\u0026#39;         // version\n      _mname: \u0026#39;Page\u0026#39;,           // name\n      _xxx: \u0026#39;\u0026#39;                  // other properties\n    },\n    101_1: {\n      _children: [5_2],\n      _mvid: \u0026#39;101_1\u0026#39;,\n      _parent: \u0026#39;1_0,\n      _mid: \u0026#39;101\u0026#39;,\n      _version: \u0026#39;1.0.0\u0026#39;\n      _mname: \u0026#39;Body\u0026#39;,\n      _xxx: \u0026#39;\u0026#39;\n    },\n    5_2: {\n      _xxx: \u0026#39;\u0026#39;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e随着页面的创建和发布，页面的存储结构，会被持久化到乐高数据库的字段中，以便后续的调用修改。\u003c/p\u003e\u003ch2 id=\"4-1-现状\"\u003e4.1 现状\u003c/h2\u003e\u003cp\u003e至截稿前，乐高拥有了55个框架组件和77个业务组件，共132个。覆盖了外卖事业部的6个项目，包含了108个可访问的线上页面（视图）。数目还在不断的迅速增加中。\u003c/p\u003e\u003cp\u003e举个例子，一个比较典型的场景，业务系统中常用的列表查询页面和编辑表单页面，之前开发页面需要半天时间，而乐高半小时内即可组装一个页面。开发效率上的提升效果比较明显。\u003c/p\u003e\u003ch2 id=\"4-2-生态\"\u003e4.2 生态\u003c/h2\u003e\u003cp\u003e在外卖的前端开发实践中，乐高系统已经成为大量业务系统开发的轴心一环。在对\u003ca href=\"http://kangarooui.waimai.meituan.com/\" title=\"袋鼠UI\"\u003e袋鼠UI\u003c/a\u003e资源库中的组件进行提取，形成最终的用户可见页面过程中，不仅推动了外卖整体视觉和交互规范的逐渐完善，也使其在前端技术中得到落实——\u003ca href=\"http://kangarooui.waimai.meituan.com/\" title=\"袋鼠UI\"\u003e袋鼠UI\u003c/a\u003e资源库。\u003c/p\u003e\u003cp\u003e视觉规范、\u003ca href=\"http://kangarooui.waimai.meituan.com/\" title=\"袋鼠UI\"\u003e袋鼠UI\u003c/a\u003e和乐高形成了一个完整和不断循环的开发生态。\n\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/c27e26c6.png\" alt=\"布局视图\"/\u003e\u003c/p\u003e\u003ch2 id=\"4-3-优势\"\u003e4.3 优势\u003c/h2\u003e\u003cul\u003e\u003cli\u003e平台化的规范了交互方式、页面及组件样式。非常适合交互样式比较固定的业务系统。\u003c/li\u003e\u003cli\u003e简易高效的界面搭建，节省了大量的开发时间和精力。\u003c/li\u003e\u003cli\u003e使用了可视化的编辑模式，所见即所得。极大的降低了前端开发的学习成本和门槛。团队中其他角色的成员，也能够轻松简易的上手。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e当前市面上存在着比较多的前端组件化框架，大多门槛较高。乐高提供更低廉、简洁的使用方式组装大量重复存在而交互样式较为单一的业务系统，实现了自己的模块管理机制。\u003c/p\u003e\u003cp\u003e作为一种新开发模式的尝试，乐高在不断地完善。使用乐高平台，在前端自动化埋点、性能优化等等方向，会有很多有趣的创新和突破。我们将会持续给大家分享。\u003c/p\u003e\u003cp\u003e乐高也在积极的筹划开源，我们会尽最大的努力，希望早日能够与大家见面。最后，附上一条硬广，美团外卖长期诚聘\u003cstrong\u003e高级前端工程师/前端技术专家\u003c/strong\u003e，欢迎发送简历至：xukai#meituan.com。\u003c/p\u003e\u003cp\u003e本文作者均来自美团点评外卖事业部。\u003c/p\u003e\u003cp\u003e徐楷，外卖事业部Web前端组负责人。2013年作为第一名前端工程师加入美团外卖。见证了美团外卖从每天10多单到900多万单极速成长的过程。负责了早期美团外卖前端团队的组建、梯队的建设和人员的培养。搭建了外卖整体前端基础设施，目前负责to B、to C以及运营相关的前端项目。\u003c/p\u003e\u003cp\u003e冰冰，资深前端研发工程师，外卖事业部前端业务增长组负责人。2010年北理硕士毕业后，曾就职MTK、IBM，后作为联合创始人创建微秘科技。2016年加入美团点评，作为技术负责人主导了多个活动及商家券红包等项目的上线。\u003c/p\u003e\u003cp\u003e东亮，美团外卖高级前端研发工程师。2012年大连理工毕业，曾就职多米音乐，人人网，先后从事游戏开发及Web前端开发，2015年加入美团点评，目前致力于外卖面向用户以及运营等方向的前端研发工作。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2017-03-09T00:00:00Z",
  "Author": "soulteary@gmail.com"
}