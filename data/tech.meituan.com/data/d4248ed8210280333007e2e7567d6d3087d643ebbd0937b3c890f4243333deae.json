{
  "Source": "tech.meituan.com",
  "Title": "大众点评订单系统分库分表实践",
  "Link": "https://tech.meituan.com/2016/11/18/dianping-order-db-sharding.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003e原大众点评的订单单表早就已经突破两百G，由于查询维度较多，即使加了两个从库，优化索引，仍然存在很多查询不理想的情况。去年大量抢购活动的开展，使数据库达到瓶颈，应用只能通过限速、异步队列等对其进行保护；业务需求层出不穷，原有的订单模型很难满足业务需求，但是基于原订单表的DDL又非常吃力，无法达到业务要求。随着这些问题越来越突出，订单数据库的切分就愈发急迫了。\u003c/p\u003e\u003cp\u003e这次切分，我们的目标是未来十年内不需要担心订单容量的问题。\u003c/p\u003e\u003cp\u003e先对订单库进行垂直切分，将原有的订单库分为基础订单库、订单流程库等，本文就不展开讲了。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/1b24c0df.png\" alt=\"垂直切分\"/\u003e\u003c/p\u003e\u003cp\u003e垂直切分缓解了原来单集群的压力，但是在抢购时依然捉襟见肘。原有的订单模型已经无法满足业务需求，于是我们设计了一套新的统一订单模型，为同时满足C端用户、B端商户、客服、运营等的需求，我们分别通过用户ID和商户ID进行切分，并通过PUMA（我们内部开发的MySQL binlog实时解析服务）同步到一个运营库。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/8aff3f22.png\" alt=\"水平切分\"/\u003e\u003c/p\u003e\u003ch2 id=\"切分策略\"\u003e切分策略\u003c/h2\u003e\u003ch3 id=\"1-查询切分\"\u003e1. 查询切分\u003c/h3\u003e\u003cp\u003e将ID和库的Mapping关系记录在一个单独的库中。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/ddb1ceb8.png\" alt=\"查询切分\"/\u003e\u003c/p\u003e\u003cp\u003e优点：ID和库的Mapping算法可以随意更改。\u003cbr/\u003e缺点：引入额外的单点。\u003c/p\u003e\u003ch3 id=\"2-范围切分\"\u003e2. 范围切分\u003c/h3\u003e\u003cp\u003e比如按照时间区间或ID区间来切分。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/f80cafa2.png\" alt=\"范围切分\"/\u003e\u003c/p\u003e\u003cp\u003e优点：单表大小可控，天然水平扩展。\u003cbr/\u003e缺点：无法解决集中写入瓶颈的问题。\u003c/p\u003e\u003ch3 id=\"3-hash切分\"\u003e3. Hash切分\u003c/h3\u003e\u003cp\u003e一般采用Mod来切分，下面着重讲一下Mod的策略。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/52610d6d.png\" alt=\"hash切分\"/\u003e\u003c/p\u003e\u003cp\u003e数据水平切分后我们希望是一劳永逸或者是易于水平扩展的，所以推荐采用mod 2^n这种一致性Hash。\u003c/p\u003e\u003cp\u003e以统一订单库为例，我们分库分表的方案是32*32的，即通过UserId后四位mod 32分到32个库中，同时再将UserId后四位Div 32 Mod 32将每个库分为32个表，共计分为1024张表。线上部署情况为8个集群(主从)，每个集群4个库。\u003c/p\u003e\u003cp\u003e为什么说这种方式是易于水平扩展的呢？我们分析如下两个场景。\u003c/p\u003e\u003ch4 id=\"场景一-数据库性能达到瓶颈\"\u003e场景一：数据库性能达到瓶颈\u003c/h4\u003e\u003ch4 id=\"方法一\"\u003e方法一\u003c/h4\u003e\u003cp\u003e按照现有规则不变，可以直接扩展到32个数据库集群。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/b301cb95.png\" alt=\"扩展方法\"/\u003e\u003c/p\u003e\u003ch4 id=\"方法二\"\u003e方法二\u003c/h4\u003e\u003cp\u003e如果32个集群也无法满足需求，那么将分库分表规则调整为(32*2^n)*(\u003csup\u003e32\u003c/sup\u003e⁄\u003csub\u003e2\u003c/sub\u003e^n)，可以达到最多1024个集群。\u003cbr/\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/c573941e.png\" alt=\"扩展方法\"/\u003e\u003c/p\u003e\u003ch4 id=\"场景二-单表容量达到瓶颈-或者1024已经无法满足你\"\u003e场景二：单表容量达到瓶颈（或者1024已经无法满足你）\u003c/h4\u003e\u003ch4 id=\"方法\"\u003e方法：\u003c/h4\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/494ebd9e.png\" alt=\"扩展方法\"/\u003e\u003c/p\u003e\u003cp\u003e假如单表都已突破200G，200*1024=200T（按照现有的订单模型算了算，大概一万千亿订单，相信这一天，嗯，指日可待！），没关系，32*(32*2^n)，这时分库规则不变，单库里的表再进行裂变，当然，在目前订单这种规则下（用userId后四位 mod）还是有极限的，因为只有四位，所以最多拆8192个表，至于为什么只取后四位，后面会有篇幅讲到。\u003c/p\u003e\u003cp\u003e另外一个维度是通过ShopID进行切分，规则8*8和UserID比较类似，就不再赘述，需要注意的是Shop库我们仅存储了订单主表，用来满足Shop维度的查询。\u003c/p\u003e\u003ch2 id=\"唯一id方案\"\u003e唯一ID方案\u003c/h2\u003e\u003cp\u003e这个方案也很多，主流的有那么几种:\u003c/p\u003e\u003ch3 id=\"1-利用数据库自增id\"\u003e1. 利用数据库自增ID\u003c/h3\u003e\u003cp\u003e优点：最简单。\n缺点：单点风险、单机性能瓶颈。\u003c/p\u003e\u003ch3 id=\"2-利用数据库集群并设置相应的步长-flickr方案\"\u003e2. 利用数据库集群并设置相应的步长（Flickr方案）\u003c/h3\u003e\u003cp\u003e优点：高可用、ID较简洁。\n缺点：需要单独的数据库集群。\u003c/p\u003e\u003ch3 id=\"3-twitter-snowflake\"\u003e3. Twitter Snowflake\u003c/h3\u003e\u003cp\u003e优点：高性能高可用、易拓展。\n缺点：需要独立的集群以及ZK。\u003c/p\u003e\u003ch3 id=\"4-一大波guid-random算法\"\u003e4. 一大波GUID、Random算法\u003c/h3\u003e\u003cp\u003e优点：简单。\n缺点：生成ID较长，有重复几率。\u003c/p\u003e\u003ch3 id=\"我们的方案\"\u003e我们的方案\u003c/h3\u003e\u003cp\u003e为了减少运营成本并减少额外的风险我们排除了所有需要独立集群的方案，采用了带有业务属性的方案：\n\u0026gt; 时间戳+用户标识码+随机数\u003c/p\u003e\u003cp\u003e有下面几个好处：\u003c/p\u003e\u003cul\u003e\u003cli\u003e方便、成本低。\u003c/li\u003e\u003cli\u003e基本无重复的可能。\u003c/li\u003e\u003cli\u003e自带分库规则，这里的用户标识码即为用户ID的后四位，在查询的场景下，只需要订单号就可以匹配到相应的库表而无需用户ID，只取四位是希望订单号尽可能的短一些，并且评估下来四位已经足够。\u003c/li\u003e\u003cli\u003e可排序，因为时间戳在最前面。\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e当然也有一些缺点，比如长度稍长，性能要比int/bigint的稍差等。\u003c/p\u003e\u003ch2 id=\"其他问题\"\u003e其他问题\u003c/h2\u003e\u003cul\u003e\u003cli\u003e事务支持：我们是将整个订单领域聚合体切分，维度一致，所以对聚合体的事务是支持的。\u003c/li\u003e\u003cli\u003e复杂查询：垂直切分后，就跟join说拜拜了；水平切分后，查询的条件一定要在切分的维度内，比如查询具体某个用户下的各位订单等；禁止不带切分的维度的查询，即使中间件可以支持这种查询，可以在内存中组装，但是这种需求往往不应该在在线库查询，或者可以通过其他方法转换到切分的维度来实现。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"数据迁移\"\u003e数据迁移\u003c/h2\u003e\u003cp\u003e数据库拆分一般是业务发展到一定规模后的优化和重构，为了支持业务快速上线，很难一开始就分库分表，垂直拆分还好办，改改数据源就搞定了，一旦开始水平拆分，数据清洗就是个大问题，为此，我们经历了以下几个阶段。\u003c/p\u003e\u003ch3 id=\"第一阶段\"\u003e第一阶段\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/2ae1ba98.png\" alt=\"数据迁移\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e数据库双写（事务成功以老模型为准），查询走老模型。\u003c/li\u003e\u003cli\u003e每日job数据对账（通过DW），并将差异补平。\u003c/li\u003e\u003cli\u003e通过job导历史数据。\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"第二阶段\"\u003e第二阶段\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/0a93304e.png\" alt=\"数据迁移\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e历史数据导入完毕并且数据对账无误。\u003c/li\u003e\u003cli\u003e依然是数据库双写，但是事务成功与否以新模型为准，在线查询切新模型。\u003c/li\u003e\u003cli\u003e每日job数据对账，将差异补平。\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"第三阶段\"\u003e第三阶段\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/a8d54b30.png\" alt=\"数据迁移\"/\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e老模型不再同步写入，仅当订单有终态时才会异步补上。\u003c/li\u003e\u003cli\u003e此阶段只有离线数据依然依赖老的模型，并且下游的依赖非常多，待DW改造完就可以完全废除老模型了。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\u003cp\u003e并非所有表都需要水平拆分，要看增长的类型和速度，水平拆分是大招，拆分后会增加开发的复杂度，不到万不得已不使用。\u003c/p\u003e\u003cp\u003e在大规模并发的业务上，尽量做到在线查询和离线查询隔离，交易查询和运营/客服查询隔离。\u003c/p\u003e\u003cp\u003e拆分维度的选择很重要，要尽可能在解决拆分前问题的基础上，便于开发。\u003c/p\u003e\u003cp\u003e数据库没你想象的那么坚强，需要保护，尽量使用简单的、良好索引的查询，这样数据库整体可控，也易于长期容量规划以及水平扩展。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e最后感谢一下棒棒的DBA团队和数据库中间件团队对项目的大力协助！\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2016-11-18T00:00:00Z",
  "Author": "soulteary@gmail.com"
}