{
  "Source": "tech.meituan.com",
  "Title": "前端工程化开发方案app-proto",
  "Link": "https://tech.meituan.com/2017/01/05/tech-salon-13-app-proto.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003e什么是前端工程化？根据具体的业务特点，将前端的开发流程、技术、工具、经验等规范化、标准化就是前端工程化。它的目的是让前端开发能够“自成体系”，最大程度地提高前端工程师的开发效率，降低技术选型、前后端联调等带来的协调沟通成本。\u003c/p\u003e\u003cp\u003e美团点评厦门智能住宿前端研发团队通过多个前端项目开发的探索和实践，基于“约定优于配置”（\u003ca href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\"\u003eConvention Over Configuration\u003c/a\u003e）的原则制定了一套前端工程化开发方案app-proto。本文将简要介绍其中的一些设计细节和约定。\u003c/p\u003e\u003ch2 id=\"面临的业务特点\"\u003e面临的业务特点\u003c/h2\u003e\u003cp\u003e智能住宿前端团队承担的前端业务主要面向B端项目，用户主要是商家、销售、运营、产品经理以及研发人员。\u003c/p\u003e\u003cp\u003e诸如工单管理、信息管理、门锁运营、PMS（\u003ca href=\"https://en.wikipedia.org/wiki/Property_management_system\"\u003eProperty management system\u003c/a\u003e）、CRM（\u003ca href=\"https://en.wikipedia.org/wiki/Customer_relationship_management\"\u003eCustomer relationship management\u003c/a\u003e）及AMS（\u003ca href=\"https://en.wikipedia.org/wiki/Asset_management\"\u003eAsset management system\u003c/a\u003e）等项目都是单页面工具类应用，特点是功能交互繁多、复杂表单，非展示类、无SEO（\u003ca href=\"https://en.wikipedia.org/wiki/Search_engine_optimization\"\u003eSearch engine optimization\u003c/a\u003e）需求。\u003c/p\u003e\u003cp\u003e如果这些项目脱离浏览器这个“外壳”，与传统的原生桌面GUI软件无异。换言之，这些项目就是一种运行于浏览器的工具软件。\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e实际上，部分项目我们也确实利用CEF（\u003ca href=\"https://bitbucket.org/chromiumembedded/cef\"\u003eChromium Embedded Framework\u003c/a\u003e）等技术给其套个“外壳”，当作传统的桌面GUI应用提供给用户使用。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e同时，部分服务需要从智能门锁、控制盒Wifi等硬件设备收录状态数据，限于硬件环境测试的不稳定性，后端的开发测试周期远比前端开发周期长。大部分场景下，前后端需并行开发，后端工程师并不能在第一时间兼顾到前端所需的API接口等服务，给前端开发造成没有必要的“等待期”，影响开发进度。\u003c/p\u003e\u003cp\u003e此外，项目多、敏捷需求多、开发周期短以及面向多后端服务（多个后端团队）等也是我们前端研发团队面临的挑战。\u003c/p\u003e\u003ch2 id=\"一些前端经验总结\"\u003e一些前端经验总结\u003c/h2\u003e\u003cp\u003e针对多个项目的开发实践和探索，我们在对前端工程化设计中得到如下一些经验总结：\u003c/p\u003e\u003cul\u003e\u003cli\u003e前端开发应该“自成体系”（包括构建、部署及前端运维），不应该和后端项目耦合在一起。\u003c/li\u003e\u003cli\u003e避免“大而全”的重量级框架，一个框架真的满足不了所有的业务场景。项目多了，我们又不想为每个新项目重新造一遍技术“轮子”。\u003c/li\u003e\u003cli\u003e新的前端技术（\u003ca href=\"https://facebook.github.io/react/\"\u003eReact\u003c/a\u003e、\u003ca href=\"https://vuejs.org/\"\u003eVue\u003c/a\u003e、\u003ca href=\"https://angular.io/\"\u003eAngular2\u003c/a\u003e等）和工具（\u003ca href=\"http://gruntjs.com\"\u003eGrunt\u003c/a\u003e/\u003ca href=\"http://gulpjs.com\"\u003egulp\u003c/a\u003e、\u003ca href=\"https://webpack.github.io\"\u003ewebpack\u003c/a\u003e、\u003ca href=\"https://babeljs.io\"\u003eBabel\u003c/a\u003e等）不断涌现、迭代，新技术选型应避免“改头换面”式重构。\u003c/li\u003e\u003cli\u003e工程化设计要合理分层且相互独立，随时应对新需求和技术的变化，任何一层能够低成本被替换、淘汰。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"设计概览\"\u003e设计概览\u003c/h2\u003e\u003cp\u003e目前，app-proto将前端工程化项目拆分成三大模块：Node服务（负责数据代理、url路由和服务端渲染）、Web应用开发（专注Web交互体验）以及前端运维（构建、测试、部署及监控等）。整体的结构设计如图1所示。\u003c/p\u003e\u003cfigure\u003e![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/8de86cb9.svg)\u003cfigcaption\u003eapp-proto 结构设计图\u003c/figcaption\u003e\u003c/figure\u003e\u003cul\u003e\u003cli\u003eNode服务：用于实现前后端分离，核心功能是实现数据代理中转，附带url路由分发和服务端渲染功能。\u003c/li\u003e\u003cli\u003eWeb应用开发：纯粹的前端模块，给予前端工程师极大的自由度进行技术选型，专注于Web交互体验的开发。\u003c/li\u003e\u003cli\u003e前端运维：主要指前端项目构建和部署、工程质量（源码质量检查和测试等）及监控服务（日志、性能等）等工作。\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"前后端分离\"\u003e前后端分离\u003c/h2\u003e\u003cp\u003e正如前文所强调的，前端模块开发应该“自成体系”，而不是后端项目的一部分（Controller或View层）。比如说，前端工程师要在本地跑通完整的项目，就必须配置好后端所需开发环境和各种服务，如果后端涉及的服务多、变化频繁，配置开发联调环境工作往往是耗时耗力的。为了实现彻底的前后端分离，我们在前端开发体系中引入了Node服务层。\u003c/p\u003e\u003cp\u003e在最初的开发中，为了降低Node端的开发和运营成本，我们极力避免在Node服务中“掺合”过多的业务逻辑。经过几个项目的实践，最后“约定”在Node服务中我们仅仅做三件事：数据代理、路由分发和服务端渲染。\u003c/p\u003e\u003ch3 id=\"数据代理\"\u003e数据代理\u003c/h3\u003e\u003cp\u003e首先，前端数据从何而来？通过Ajax的形式直接从后端服务中获取数据是传统的方式，但是在应对多后端服务时，还是面临着诸如请求认证、CORS(\u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCross-origin resource sharing\u003c/a\u003e)等困扰。常见的解决方案是通过\u003ca href=\"https://github.com/nodejitsu/node-http-proxy\"\u003ehttp-proxy\u003c/a\u003e，即在Node端通过HTTP请求得到数据后，Web端再通过Ajax的方式从Node端间接获取后端数据，Node服务起到“桥梁”的作用。\u003c/p\u003e\u003cp\u003e方案\u003ccode\u003ehttp-proxy\u003c/code\u003e对已经成熟的后端服务是具备实用价值的，但是在后端服务并没有完成开发（或前后端并行开发）的场景下时，开发阶段前端的数据来源依旧是个问题。同时，前端还面临诸多请求合并、缓存等需求，解决这些困扰，前端工程师需要和后端技术人员做大量的沟通、约定。\u003c/p\u003e\u003cp\u003e在这里，我们基于原有的\u003ccode\u003ehttp-proxy\u003c/code\u003e基础上在Node服务中添加\u003ccode\u003edatasources\u003c/code\u003e模块，尝试在数据的处理上给予前端工程师很大的自由度，并实现“按照约定写代码”。\u003c/p\u003e\u003cp\u003e举例说明，开发某一前端业务时涉及到\u003ccode\u003epms\u003c/code\u003e和\u003ccode\u003eupm\u003c/code\u003e两个后端服务，且提供的API内容如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e# pms API\npms/api/v2.01/login\npms/api/v2.01/inn/create\npms/api/v2.01/inn/get\n\n# upm API\nupm/api/v3.15/menu\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e面对这些接口，理想情况下前端直接通过\u003ccode\u003eajax.post(\u0026#39;pms/api/v2.01/login\u0026#39;, params)\u003c/code\u003e方式获取即可。但是，\u003ccode\u003epms\u003c/code\u003e接口服务尚处在开发阶段，面临跨域或不可用问题。\u003ccode\u003eupm\u003c/code\u003e接口服务虽稳定，但是该服务由第三方团队维护，请求需要权限认证。传统的Ajax方式在这类场景下并不适用。而\u003ccode\u003edatasources\u003c/code\u003e模块是通过怎样的设计来优化这些问题的呢？首先，我们将前端需要的API映射到前端源码仓库，映射的目录结构如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e# server/datasources/{后端系统}/{接口目录}\n── datasources\n    ├── pms\n    │   ├── login.js\n    │   ├── login.json\n    │   └── inn\n    │       ├── create.js\n    │       └── get.js\n    └── upm\n        ├── menu.js\n        └── menu.json\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中，每个\u003ccode\u003e**.js\u003c/code\u003e后缀的文件的内容是将原本Web端Ajax操作转移到Node端的HTTP请求，以\u003ccode\u003epms/login.js\u003c/code\u003e为例：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e/* async 函数 */\nexport default async function (params) {\n  const http = this.http\n  const pms = this.config.api.pms\n  try {\n    const apiUri = `${pms.prefix}/login`\n    // http 请求：http.post() 方法封装了权限认证\n    const result = await http.post(apiUri, params)\n\n    // 简单的数据格式校验\n    if (Number(result.status) === 0 \u0026amp;\u0026amp;\n      (\u0026#39;data\u0026#39; in result) \u0026amp;\u0026amp;\n      (\u0026#39;bid\u0026#39; in result.data)) {\n      // 将bid值记录至session\n      this.session.bid = result.data.bid\n    }\n    return result\n  } catch (e) {\n    // 后端API出现异常 (实时通知 or 记录日志)\n  }\n  return null\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e当然，对于那些已经成熟稳定的API服务直接通过\u003ccode\u003ehttp-proxy\u003c/code\u003e方式实现数据中转即可。但由于需求变更频繁，后端API服务始终处在不断迭代中，前端在进行数据处理过程中总会面临如下的几种情况：\u003c/p\u003e\u003cul\u003e\u003cli\u003e接口校验或数据二次加工：面临多后端服务，API的格式可能不一致；或者对数据列表排序加工等。\u003c/li\u003e\u003cli\u003e合并请求：可以发多个http请求，避免Web端同时发送多个Ajax请求。\u003c/li\u003e\u003cli\u003e前端运维的数据：比如城市字典、阴阳历转换表等固定数据。\u003c/li\u003e\u003cli\u003e缓存数据：如请求的用户信息，短期内不会有大变动，可以采用\u003ca href=\"https://github.com/th507/node-hl-cache\"\u003eHalf-life cache\u003c/a\u003e等算法实现简单缓存。\u003c/li\u003e\u003cli\u003e需权限认证的接口：\u003ca href=\"https://tools.ietf.org/html/rfc2617\"\u003eHTTP Authentication\u003c/a\u003e。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e这些场景下都建议使用\u003ccode\u003edatasources\u003c/code\u003e模块进行数据中转，将原本需由前后端沟通协调才能实现的功能全部交给前端自行处理，给予前端工程师处理数据提供自由度的同时也降低了后端API的开发维度。\u003c/p\u003e\u003cp\u003e那该如何快捷地调用\u003ccode\u003edatasources\u003c/code\u003e目录下的\u003ccode\u003easync\u003c/code\u003e函数呢？这里我们做了简单封装，将该目录下的所有\u003ccode\u003e**.js\u003c/code\u003e文件解析到Koa的上下文环境中以\u003ccode\u003ethis.ds\u003c/code\u003e对象进行存储，并按照目录结构进行驼峰式（\u003ca href=\"https://en.wikipedia.org/wiki/Camel_case\"\u003eCamel-Case\u003c/a\u003e）命名，转换过程见图2。\u003c/p\u003e\u003cfigure\u003e![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/996ad014.svg)\u003cfigcaption\u003edatasources 目录解析转换过程\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e在Koa中间件中通过\u003ccode\u003ethis.ds\u003c/code\u003e对象调用，比如\u003ccode\u003esrc/datasources/pms/login.js\u003c/code\u003e函数映射至\u003ccode\u003ethis.ds.PmsLogin()\u003c/code\u003e：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e// Koa Middlewares\napp.use(async (ctx, next) =\u0026gt; {\n  // ..`.\n  // 最后一个参数为是否使用mock\n  const loginData = await this.ds.PmsLogin(params, false)\n  // ...\n})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在Web端可以统一封装\u003ccode\u003eds()\u003c/code\u003e方法，无需关注Ajax请求\u003ccode\u003eHeaders\u003c/code\u003e、是否跨域等问题：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e// Web (Browser)\nds(\u0026#39;PmsLogin\u0026#39;, { username, password }, true)\n  .then(success)\n  .catch(error)\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"mock支持\"\u003eMock支持\u003c/h4\u003e\u003cp\u003e正如前文所提到的，后端研发进度一般滞后于前端，在后端API服务可用之前，前端仅有一份API文档供参考。在规范中，\u003ccode\u003e**.json\u003c/code\u003e后缀的文件就起到Mock作用，同样以\u003ccode\u003epms/login.json\u003c/code\u003e举例：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;status\u0026#34;: 0,\n  \u0026#34;message\u0026#34;: \u0026#34;成功\u0026#34;,\n  \u0026#34;data\u0026#34;: { \u0026#34;bid\u0026#34;: \u0026#34;@string(32)\u0026#34;, \u0026#34;innCount\u0026#34;: 1 }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003e具体的\u003ccode\u003ejson\u003c/code\u003e格式写法请参考\u003ca href=\"http://mockjs.com/\"\u003emockjs\u003c/a\u003e、\u003ca href=\"https://github.com/nuysoft/Mock/wiki/Syntax-Specification\"\u003eSyntax Specification\u003c/a\u003e。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e简言之，当API服务可用时则执行\u003ccode\u003e**.js\u003c/code\u003e后缀文件中的\u003ccode\u003easync\u003c/code\u003e函数来获取数据，不可用时则解析\u003ccode\u003e**.json\u003c/code\u003e后缀Mock文件，并不需要单独开启一个Mock服务。\u003c/p\u003e\u003ch3 id=\"路由分发\"\u003e路由分发\u003c/h3\u003e\u003cp\u003e对url路由的处理和数据代理的做法类似，按照目录结构来管理。url路由配置在\u003ccode\u003eserver/pages\u003c/code\u003e目录下，目录下的文件会自动映射成为路由。\u003c/p\u003e\u003cp\u003e比如url为\u003ccode\u003ehttp://example.com/pms\u003c/code\u003e页面，映射到\u003ccode\u003eserver/pages/pms.js\u003c/code\u003e文件的写法如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003eexport default {\n  urls: [\u0026#39;/pms\u0026#39;, \u0026#39;/pms/error\u0026#39;],       // 多种正则如：[\u0026#39;/pms\u0026#39;, [\u0026#39;/pms/v1\u0026#39;], [\u0026#39;/pms/v**\u0026#39;]]\n  methods: [\u0026#39;GET\u0026#39;],                   // 多种method：[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]\n  js: [\u0026#39;http://code.jquery.com/jquery-1.12.0.min.js\u0026#39;],\n  css: [\u0026#39;http://yui.yahooapis.com/pure/0.6.0/pure-min.css\u0026#39;],\n  template: \u0026#39;default\u0026#39;,                // 服务端渲染模板\n  middlewares: [],                    // 针对本页面的中间件\n  controller: async function(next) {  // Koa中间件最后一环\n    // 可以从this.ds对象中拿数据\n    const loginData = await this.ds.PmsLogin(params)\n    return {foo: \u0026#39;来自服务端数据\u0026#39;, loginData}\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由于\u003ccode\u003eurls\u003c/code\u003e支持多种正则，原则上每个根url映射\u003ccode\u003eserver/pages/\u003c/code\u003e目录下一个\u003ccode\u003e**.js\u003c/code\u003e文件，映射关系如图3所示。\u003c/p\u003e\u003cfigure\u003e![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/dac0ddbf.svg)\u003cfigcaption\u003epages目录文件与url映射关系\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003e如果对\u003ccode\u003ejs\u003c/code\u003e、\u003ccode\u003ecss\u003c/code\u003e、\u003ccode\u003etemplate\u003c/code\u003e没有特殊设置（采用默认设置）的情况下，可精简如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003eexport default {\n  urls: [\u0026#39;/pms\u0026#39;, \u0026#39;/pms/error\u0026#39;],\n  controller: async function (next) {\n    const loginData = await this.ds.PmsLogin(params)\n    return {foo: \u0026#39;来自服务端数据\u0026#39;, loginData}\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e需要注意的是，\u003ccode\u003econtroller\u003c/code\u003e项是Koa中间件的最后一环，要求其返回值是可序列化的对象用于模板渲染的服务端参数，在此处也可以进行权限校验、从\u003ccode\u003ethis.ds\u003c/code\u003e对象中拿数据等操作。\u003c/p\u003e\u003ch3 id=\"服务端渲染\"\u003e服务端渲染\u003c/h3\u003e\u003cp\u003eNode服务端最后一个核心功能是渲染：输出 HTML Shell和 JSON。输出JSON字符串的用途是为了浏览器端能以Ajax形式动态获取数据，而输出的HTML内容则是我们Web应用的所需的HTML“壳子”。\u003c/p\u003e\u003cp\u003e正如前文提到我们的业务特点是“一种运行于浏览器的工具软件”，重操作交互、无SEO需求。因此，同构（\u003ca href=\"http://isomorphic.net/\"\u003eIsomorphic JavaScript\u003c/a\u003e）不是强需求，不是每次都要依赖服务器来重复处理逻辑和数据。服务端只需要渲染简单完善的HTML结构即可，具体的页面内容则由客户端JavaScript实现。简言之，不鼓励将前端JavaScript脚本再在Node服务端重复执行一遍。\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003e如果了解过Google推崇的 \u003ca href=\"https://developers.google.com/web/progressive-web-apps/\"\u003eProgressive Web App\u003c/a\u003e，你可以参考《\u003ca href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\"\u003eThe App Shell Model\u003c/a\u003e》一文来理解HTML“壳子”更多的用途。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e渲染最简单的HTML“壳子”如下:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\n\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\n  \u0026lt;head\u0026gt;\n    \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;/\u0026gt;\n    \u0026lt;title\u0026gt;app-proto\u0026lt;/title\u0026gt;\n    \u0026lt;script\u0026gt;window.serveData={foo: \u0026#39;来自服务端数据\u0026#39;}\u0026lt;/script\u0026gt;\n  \u0026lt;/head\u0026gt;\n  \u0026lt;body\u0026gt;\n    \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n    \u0026lt;script src=\u0026#34;//cdn/file-5917b08e4c7569d461b1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n  \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e提供简单的服务端数据\u003ccode\u003ewindow.serveData\u003c/code\u003e供客户端使用，更多渲染则由\u003ccode\u003e//cdn/file-5917b08e4c7569d461b1.js\u003c/code\u003e进行增量控制。\u003c/p\u003e\u003ch4 id=\"静态资源与node端衔接\"\u003e静态资源与Node端衔接\u003c/h4\u003e\u003cp\u003e那Web端构建的静态资源是如何Node服务端做衔接的呢？前端静态资源构建工作与Node服务相互分离，Node服务在开启的过程中会读取前端构建生成的静态资源映射表。前端的构建过程如图4所示，在构建工作完成之后会生成\u003ccode\u003eassets.json\u003c/code\u003e静态资源映射表。\u003c/p\u003e\u003cfigure\u003e![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/fbd374fe.svg)\u003cfigcaption\u003e静态资源映射文件assets.json构建\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp\u003e前端构建工具基本都提供静态资源映射表生成插件，比如构建工具Webpack就存在插件\u003ca href=\"https://github.com/kossnocorp/assets-webpack-plugin\"\u003eassets-webpack-plugin\u003c/a\u003e来实现该功能。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e生成的\u003ccode\u003eassets.json\u003c/code\u003e映射表内容参考如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e{\n  \u0026#34;index\u0026#34;:        // 对应的页面（url: example.com/index）\n    { \u0026#34;js\u0026#34;:\u0026#34;//s0.example.net/pms/index-2abb99.js\u0026#34; },  // 涉及到的静态资源列表（带版本号）\n  \u0026#34;login\u0026#34;:\n    { \u0026#34;js\u0026#34;:\u0026#34;//s0.example.net/pms/login-5917b0.js\u0026#34; }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e比如在渲染页面\u003ccode\u003eexample.com/index\u003c/code\u003e时，Node服务会以\u003ccode\u003eindex\u003c/code\u003e作为键值，读取\u003ccode\u003eassets.json\u003c/code\u003e中带版本号的静态资源CDN地址列表，用于在“壳子”中与前端资源的衔接工作。\u003c/p\u003e\u003ch2 id=\"web端的一些-约定\"\u003eWeb端的一些“约定”\u003c/h2\u003e\u003cp\u003eWeb端的技术选项是没有强制性限制的，无论你采用何种构建工具、前端库，只要生成符合约定供Node端使用的\u003ccode\u003eassets.json\u003c/code\u003e文件即可。\u003c/p\u003e\u003cp\u003e前端工程师可以根据具体的业务特点、团队技术喜好来选取合理的开发方案，无论是React、Vue还是Angular2并不做强限制。尽管给予Web前端开发很大的自由度，但是鼓励遵循下面几条“约定”：\u003c/p\u003e\u003cul\u003e\u003cli\u003eAjax请求从Node端代理，而非具体后端服务。\u003c/li\u003e\u003cli\u003e鼓励将JavaScript、CSS、HTML视为前端领域的“汇编”。\u003c/li\u003e\u003cli\u003e重视前端页面状态管理，推荐的方案有\u003ca href=\"https://github.com/reactjs/redux\"\u003eRedux\u003c/a\u003e、\u003ca href=\"https://github.com/vuejs/vuex\"\u003evuex\u003c/a\u003e及\u003ca href=\"https://github.com/mobxjs/mobx\"\u003eMobX\u003c/a\u003e等。\u003c/li\u003e\u003cli\u003e强调组件化，面向组件集开发。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e这里重点强调下面向组件集的前端开发。在项目初期我们一般不会马上投入到业务开发，而是针对设计师和产品经理提供的设计稿、产品原型图实现一套组件集或选择合适的开源组件集，积累好基础组件集后再投入到具体业务开发。\u003c/p\u003e\u003cp\u003e在进行前端技术调研时，该技术是否有配套的开源组件集往往是我们考虑的重点。比如基于React实现的开源组件集\u003ca href=\"http://ant.design/\"\u003eant.design\u003c/a\u003e、\u003ca href=\"http://www.material-ui.com/\"\u003eMaterial-UI\u003c/a\u003e等，我们部分前端项目都直接或间接的使用到了，极大地减少了研发成本。\u003c/p\u003e\u003cp\u003e当然，美团点评内部也提供一个组件中心平台（可参考\u003ca href=\"https://slides.com/solome/mt-components-hub/live#/\"\u003e美团点评前端组件中心介绍Slide\u003c/a\u003e），鼓励大家将各自项目中的有价值组件分享出来，实现组件跨项目复用。\u003c/p\u003e\u003ch2 id=\"工程化支持\"\u003e工程化支持\u003c/h2\u003e\u003ch3 id=\"项目脚手架\"\u003e项目脚手架\u003c/h3\u003e\u003cp\u003e项目脚手架的作用是在启动一个新项目时，通过几个简单命令就能快速搭建好项目的开发环境。我们基于\u003ca href=\"http://yeoman.io/\"\u003eYeoman\u003c/a\u003e构建了一个完整的项目脚手架。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e# 安装脚手架\n$ npm install -g yo\n$ npm install -g @ia/generator-app-proto@latest\n# 初始化新项目（进行简单选择）\n$ yo @ia/app-proto\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"工程质量保障\"\u003e工程质量保障\u003c/h3\u003e\u003cp\u003e我们重视项目的每次\u003ccode\u003ecommit\u003c/code\u003e，同个项目要求遵循同一套编码规范，并采用\u003ca href=\"http://eslint.org/\"\u003eESLint\u003c/a\u003e等工具进行约束，对于一些复用性高的核心组件也强制要求写测试。\n为保障项目质量，每个项目都要求接入美团点评基于[Stash](\u003ca href=\"https://en.wikipedia.org/wiki/Stash_(software)实现的Castle\"\u003ehttps://en.wikipedia.org/wiki/Stash_(software)实现的Castle\u003c/a\u003e CI系统，每次的源码提交都会自动执行一遍ESLint、测试和构建，并生成构建日志通过公司内部沟通工具大象进行实时消息推送。\u003c/p\u003e\u003ch3 id=\"标准化测试环境管理\"\u003e标准化测试环境管理\u003c/h3\u003e\u003cp\u003e美团点评内部提供了基于Docker实现的测试环境管理服务Cargo，用于提升测试和联调测试效率，促进DevOps开发模式。将项目接入到Cargo服务后，只需在仓库中提供简单的配置文件\u003ccode\u003ecargo.yml\u003c/code\u003e（配置参考如下），就会自动生成一套测试环境。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e# 依赖的镜像\nimage: registry.cargo.example.com/node:v4.2.1\n# 容器占用的端口\nports:\n  - \u0026#39;8998\u0026#39;\n# 环境变量\nenv:\n  -  COMMON_VARIABLE = \u0026#39;true\u0026#39;\n  -  NODE_ENV = \u0026#39;cargo\u0026#39;\n  -  DEBUG = \u0026#39;app-proto,datasource.*\u0026#39;\n# 收集的日志文件\nlogs:\n  -  error = /var/path/logs/app-proto/error.log\n  -  out = /var/path/logs/app-proto/out.log\n# 构建脚本\nbuild_script: bin/pre-deploy-staging\n# 运行脚本\nrun_script: bin/cargo-start\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\u003cp\u003e前端工程化体系的引入，让前端开发能和原生App应用项目开发一样“自成体系”，脱离了对后端项目的依赖。基于“约定优于配置”、“按照约定写代码”的原则对Node层功能的设定能够降低沟通协调成本，构建、部署等工作的规范化，使前端技术人员的开发重点回归到Web应用的交互体验本身，回归到“纯粹”的前端研发。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2017-01-05T00:00:00Z",
  "Author": "soulteary@gmail.com"
}