{
  "Source": "tech.meituan.com",
  "Title": "根因分析初探：一种报警聚类算法在业务系统的落地实施",
  "Link": "https://tech.meituan.com/2019/02/28/root-clause-analysis.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\u003cp\u003e众所周知，日志是记录应用程序运行状态的一种重要工具，在业务服务中，日志更是十分重要。通常情况下，日志主要是记录关键执行点、程序执行错误时的现场信息等。系统出现故障时，运维人员一般先查看错误日志，定位故障原因。当业务流量小、逻辑复杂度低时，应用出现故障时错误日志一般较少，运维人员一般能够根据错误日志迅速定位到问题。但是，随着业务逻辑的迭代，系统接入的依赖服务不断增多，引入的组件不断增多，当系统出现故障时（如Bug被触发、依赖服务超时等等），错误日志的量级会急剧增加。极端情况下甚至出现“疯狂报错”的现象，这时候错误日志的内容会存在相互掩埋、相互影响的问题，运维人员面对报错一时难以理清逻辑，有时甚至顾此失彼，没能第一时间解决最核心的问题。\u003c/p\u003e\u003cp\u003e错误日志是系统报警的一种，实际生产中，运维人员能够收到的报警信息多种多样。如果在报警流出现的时候，通过处理程序，将报警进行聚类，整理出一段时间内的报警摘要，那么运维人员就可以在摘要信息的帮助下，先对当前的故障有一个大致的轮廓，再结合技术知识与业务知识定位故障的根本原因。\u003c/p\u003e\u003cp\u003e围绕上面描述的问题，以及对于报警聚类处理的分析假设，本文主要做了以下事情：\u003c/p\u003e\u003col\u003e\u003cli\u003e选定聚类算法，简单描述了算法的基本原理，并给出了针对报警日志聚类的一种具体的实现方案。\u003c/li\u003e\u003cli\u003e在分布式业务服务的系统下构造了三种不同实验场景，验证了算法的效果，并且对算法的不足进行分析阐述。\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"目标\"\u003e目标\u003c/h2\u003e\u003cp\u003e对一段时间内的报警进行聚类处理，将具有相同根因的报警归纳为能够涵盖报警内容的泛化报警（Generalized Alarms），最终形成仅有几条泛化报警的报警摘要。如下图1所示意。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/0405c8ee9e4e3ea813eedf46c803101122272.png\" alt=\"图1\"/\u003e\u003c/p\u003e\u003cp\u003e我们希望这些泛化报警既要具有很强的概括性，同时尽可能地保留细节。这样运维人员在收到报警时，便能快速定位到故障的大致方向，从而提高故障排查的效率。\u003c/p\u003e\u003ch2 id=\"设计\"\u003e设计\u003c/h2\u003e\u003cp\u003e如图2所示，异常报警根因分析的设计大致分为四个部分：收集报警信息、提取报警信息的关键特征、聚类处理、展示报警摘要。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/4f35cf0a3c1b6a69d40639f7cec2dd0a35988.png\" alt=\"图2\"/\u003e\u003c/p\u003e\u003ch3 id=\"算法选择\"\u003e算法选择\u003c/h3\u003e\u003cp\u003e聚类算法采用论文“Clustering Intrusion Detection Alarms to Support Root Cause Analysis [KLAUS JULISCH, 2002]”中描述的根因分析算法。该算法基于一个假设：将报警日志集群经过泛化，得到的泛化报警能够表示报警集群的主要特征。以下面的例子来说明，有如下的几条报警日志：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003eserver_room_a-biz_tag-online02 Thrift get deal ProductType deal error.\nserver_room_b-biz_tag-offline01 Pigeon query deal info error.\nserver_room_a-biz_tag-offline01 Http query deal info error.\nserver_room_a-biz_tag-online01 Thrift query deal info error.\nserver_room_b-biz_tag-offline02 Thrift get deal ProductType deal error.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们可以将这几条报警抽象为：“全部服务器 网络调用 故障”，该泛化报警包含的范围较广；也可以抽象为：“server_room_a服务器 网络调用 产品信息获取失败”和“server_room_b服务器 RPC 获取产品类型信息失败”，此时包含的范围较小。当然也可以用其他层次的抽象来表达这个报警集群。\u003c/p\u003e\u003cp\u003e我们可以观察到，抽象层次越高，细节越少，但是它能包含的范围就越大；反之，抽象层次越低，则可能无用信息越多，包含的范围就越小。\u003c/p\u003e\u003cp\u003e这种抽象的层次关系可以用一些有向无环图（DAG）来表达，如图3所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/498863264a2d68efbe4e39ba055a06d261831.png\" alt=\"图3 泛化层次结构示例\"/\u003e\u003c/p\u003e\u003cp\u003e为了确定报警聚类泛化的程度，我们需要先了解一些定义：\u003c/p\u003e\u003cul\u003e\u003cli\u003e属性（Attribute）：构成报警日志的某一类信息，如机器、环境、时间等，文中用Ai表示。\u003c/li\u003e\u003cli\u003e值域（Domain）：属性Ai的域（即取值范围），文中用Dom(Ai)表示。\u003c/li\u003e\u003cli\u003e泛化层次结构（Generalization Hierarchy）：对于每个Ai都有一个对应的泛化层次结构，文中用Gi表示。\u003c/li\u003e\u003cli\u003e不相似度（Dissimilarity）：定义为d(a1, a2)。它接受两个报警a1、a2作为输入，并返回一个数值量，表示这两个报警不相似的程度。与相似度相反，当d(a1, a2)较小时，表示报警a1和报警a2相似。为了计算不相似度，需要用户定义泛化层次结构。\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e为了计算d(a1, a2)，我们先定义两个属性的不相似度。令x1、x2为某个属性Ai的两个不同的值，那么x1、x2的不相似度为：在泛化层次结构Gi中，通过一个公共点父节点p连接x1、x2的最短路径长度。即d(x1, x2) := min{d(x1, p) + d(x2, p) | p ∈ Gi, x1 ⊴ p, x2 ⊴ p}。例如在图3的泛化层次结构中，d(“Thrift”, “Pigeon”) = d(“RPC”, “Thrift”) + d(“RPC”, “Pigeon”) = 1 + 1 = 2。\u003c/p\u003e\u003cp\u003e对于两个报警a1、a2，其计算方式为：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/a14786f687bb0dd1950c9654545be78d42398.png\" alt=\"公式1\"/\u003e\u003c/p\u003e\u003cp\u003e例如：a1 = (“server_room_b-biz_tag-offline02”, “Thrift”), a2 = (“server_room_a-biz_tag-online01”, “Pigeon”), 则d(a1, a2) = d(“server_room_b-biz_tag-offline02”, “server_room_a-biz_tag-online01”) + d((“Thrift”, “Pigeon”) = d(“server_room_b-biz_tag-offline02”, “服务器”) + d(“server_room_a-biz_tag-online01”, “服务器”) + d(“RPC”, “Thrift”) + d(“RPC”, “Pigeon”) = 2 + 2 + 1 + 1 = 6。\u003c/p\u003e\u003cp\u003e我们用C表示报警集合，g是C的一个泛化表示，即满足∀ a ∈ C, a ⊴ g。以报警集合{“dx-trip-package-api02 Thrift get deal list error.”, “dx-trip-package-api01 Thrift get deal list error.”}为例，“dx服务器 thrift调用 获取产品信息失败”是一个泛化表示，“服务器 网络调用 获取产品信息失败”也是一个泛化表示。对于某个报警聚类来说，我们希望获得既能够涵盖它的集合又有最具象化的表达的泛化表示。为了解决这个问题，定义以下两个指标：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/ee6fa61ac27d4282e6588fffaf29ef3334378.png\" alt=\"公式2\"/\u003e\u003c/p\u003e\u003cp\u003eH©值最小时对应的g，就是我们要找的最适合的泛化表示，我们称g为C的“覆盖”(Cover)。\u003c/p\u003e\u003cp\u003e基于以上的概念，将报警日志聚类问题定义为：定义L为一个日志集合，min_size为一个预设的常量，Gi(i = 1, 2, 3……n) 为属性Ai的泛化层次结构，目标是找到一个L的子集C，满足 |C| \u0026gt;= min_size，且H©值最小。min_size是用来控制抽象程度的，极端情况下如果min_size与L集合的大小一样，那么我们只能使用终极抽象了，而如果min_size = 1，则每个报警日志是它自己的抽象。找到一个聚类之后，我们可以去除这些元素，然后在L剩下的集合里找其他的聚类。\u003c/p\u003e\u003cp\u003e不幸的是，这是个NP完全问题，因此论文提出了一种启发式算法，该算法满足|C| \u0026gt;= min_size，使H©值尽量小。\u003c/p\u003e\u003ch3 id=\"算法描述\"\u003e算法描述\u003c/h3\u003e\u003col\u003e\u003cli\u003e算法假设所有的泛化层次结构Gi都是树，这样每个报警集群都有一个唯一的、最顶层的泛化结果。\u003c/li\u003e\u003cli\u003e将L定义为一个原始的报警日志集合，算法选择一个属性Ai，将L中所有报警的Ai值替换为Gi中Ai的父值，通过这一操作不断对报警进行泛化。\u003c/li\u003e\u003cli\u003e持续步骤2的操作，直到找到一个覆盖报警数量大于min_size的泛化报警为止。\u003c/li\u003e\u003cli\u003e输出步骤3中找到的报警。\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e算法伪代码如下所示：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-pseudocode\"\u003e输入：报警日志集合L，min_size，每个属性的泛化层次结构G1,......,Gn\n输出：所有符合条件的泛化报警\nT := L;              // 将报警日志集合保存至表T\nfor all alarms a in T do\n    a[count] := 1;   // \u0026#34;count\u0026#34;属性用于记录a当前覆盖的报警数量\nwhile ∀a ∈ T : a[count] \u0026lt; min_size do {\n    使用启发算法选择一个属性Ai;\n    for all alarms a in T do\n        a[Ai] := parent of a[Ai] in Gi;\n        while identical alarms a, a\u0026#39; exist do\n            Set a[count] := a[count] + a\u0026#39;[count];\n            delete a\u0026#39; from T;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中第7行的启发算法为:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-pseudocode\"\u003e首先计算Ai对应的Fi\nfi(v) := SELECT sum(count) FROM T WHERE Ai = v   // 统计在Ai属性上值为v的报警的数量\nFi := max{fi(v) | v ∈ Dom(Ai)}\n选择Fi值最小的属性Ai\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里的逻辑是：如果有一个报警a满足 a[count]\u0026gt;= min_size，那么对于所有属性Ai , 均能满足Fi \u0026gt;= fi(a[Ai]) \u0026gt;= min_size。反过来说，如果有一个属性Ai的Fi值小于min_size，那么a[count]就不可能大于min_size。所以选择Fi值最小的属性Ai进行泛化，有助于尽快达到聚类的条件。\u003c/p\u003e\u003cp\u003e此外，关于min_size的选择，如果选择了一个过大的min_size，那么会迫使算法合并具有不同根源的报警。另一方面，如果过小，那么聚类可能会提前结束，具有相同根源的报警可能会出现在不同的聚类中。\u003c/p\u003e\u003cp\u003e因此，设置一个初始值，可以记作ms0。定义一个较小的值 ℇ(0 \u0026lt; ℇ \u0026lt; 1)，当min_size取值为ms0、ms0 * (1 - ℇ)、ms0 * (1 + ℇ)时的聚类结果相同时，我们就说此时聚类是ℇ-鲁棒的。如果不相同，则使ms1 = ms0 * (1 - ℇ)，重复这个测试，直到找到一个鲁棒的最小值。\u003c/p\u003e\u003cp\u003e需要注意的是，ℇ-鲁棒性与特定的报警日志相关。因此，给定的最小值，可能相对于一个报警日志来说是鲁棒的，而对于另一个报警日志来说是不鲁棒的。\u003c/p\u003e\u003ch2 id=\"实现\"\u003e实现\u003c/h2\u003e\u003ch3 id=\"1-提取报警特征\"\u003e1. 提取报警特征\u003c/h3\u003e\u003cp\u003e根据线上问题排查的经验，运维人员通常关注的指标包括时间、机器（机房、环境）、异常来源、报警日志文本提示、故障所在位置（代码行数、接口、类）、Case相关的特殊ID（订单号、产品编号、用户ID等等）等。\u003c/p\u003e\u003cp\u003e但是，我们的实际应用场景都是线上准实时场景，时间间隔比较短，因此我们不需要关注时间。同时，Case相关的特殊ID不符合我们希望获得一个抽象描述的要求，因此也无需关注此项指标。\u003c/p\u003e\u003cp\u003e综上，我们选择的特征包括：机房、环境、异常来源、报警日志文本关键内容、故障所在位置（接口、类）共5个。\u003c/p\u003e\u003ch3 id=\"2-算法实现\"\u003e2. 算法实现\u003c/h3\u003e\u003ch4 id=\"1-提取关键特征\"\u003e(1) 提取关键特征\u003c/h4\u003e\u003cp\u003e我们的数据来源是日志中心已经格式化过的报警日志信息，这些信息主要包含：报警日志产生的时间、服务标记、在代码中的位置、日志内容等。\u003c/p\u003e\u003cul\u003e\u003cli\u003e故障所在位置\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e优先查找是否有异常堆栈，如存在则查找第一个本地代码的位置；如果不存在，则取日志打印位置。\u003c/p\u003e\u003cul\u003e\u003cli\u003e异常来源\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e获得故障所在位置后，优先使用此信息确定异常报警的来源（需要预先定义词典支持）；如不能获取，则在日志内容中根据关键字匹配（需要预先定义词典支持）。\u003c/p\u003e\u003cul\u003e\u003cli\u003e报警日志文本关键内容\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e优先查找是否有异常堆栈，如存在，则查找最后一个异常（通常为真正的故障原因）；如不能获取，则在日志中查找是否存在“code=……,message=……” 这样形式的错误提示；如不能获取，则取日志内容的第一行内容（以换行符为界），并去除其中可能存在的Case相关的提示信息\u003c/p\u003e\u003cul\u003e\u003cli\u003e提取“机房和环境”这两个指标比较简单，在此不做赘述。\u003c/li\u003e\u003c/ul\u003e\u003ch4 id=\"2-聚类算法\"\u003e(2) 聚类算法\u003c/h4\u003e\u003cp\u003e算法的执行，我们以图4来表示。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/42a0e8e7d6ea32e1adddfc7a5a2d1831149869.png\" alt=\"图4 报警日志聚类流程图\"/\u003e\u003c/p\u003e\u003ch4 id=\"3-min-size-选择\"\u003e(3) min_size 选择\u003c/h4\u003e\u003cp\u003e考虑到日志数据中可能包含种类极多，且根据小规模数据实验表明，min_size = \u003csup\u003e1\u003c/sup\u003e⁄\u003csub\u003e5\u003c/sub\u003e * 报警日志数量时，算法已经有较好的表现，再高会增加过度聚合的风险，因此我们取min_size = \u003csup\u003e1\u003c/sup\u003e⁄\u003csub\u003e5\u003c/sub\u003e * 报警日志数量，ℇ参考论文中的实验，取0.05。\u003c/p\u003e\u003ch4 id=\"4-聚类停止条件\"\u003e(4) 聚类停止条件\u003c/h4\u003e\u003cp\u003e考虑到部分场景下，报警日志可能较少，因此min_size的值也较少，此时聚类已无太大意义，因此设定聚类停止条件为：聚类结果的报警摘要数量小于等于20或已经存在某个类别的count值达到min_size的阈值，即停止聚类。\u003c/p\u003e\u003ch3 id=\"3-泛化层次结构\"\u003e3. 泛化层次结构\u003c/h3\u003e\u003cp\u003e泛化层次结构，用于记录属性的泛化关系，是泛化时向上抽象的依据，需要预先定义。\u003c/p\u003e\u003cp\u003e根据实验所用项目的实际使用环境，我们定义的泛化层次结构如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/68d6d7761130ee07e2203413db397cc931392.png\" alt=\"图5 机房泛化层次结构\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/3430242676928adf971d9e65e0213f2635586.png\" alt=\"图6 环境泛化层次结构\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/48c6e5c04b8ab2673d1ce8dc02c66493120473.png\" alt=\"图7 错误来源泛化层次结构\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/ff9b4db00dec445e9e46922459d21a8d36457.png\" alt=\"图8 日志文本摘要泛化层次结构\"/\u003e\u003c/p\u003e\u003cp\u003e“故障所在位置”此属性无需泛化层次结构，每次泛化时直接按照包路径向上层截断，直到系统包名。\u003c/p\u003e\u003ch2 id=\"实验\"\u003e实验\u003c/h2\u003e\u003cp\u003e以下三个实验均使用C端API系统。\u003c/p\u003e\u003ch3 id=\"1-单依赖故障\"\u003e1. 单依赖故障\u003c/h3\u003e\u003cp\u003e实验材料来自于线上某业务系统真实故障时所产生的大量报警日志。\u003c/p\u003e\u003cul\u003e\u003cli\u003e环境：线上\u003c/li\u003e\u003cli\u003e故障原因：产品中心线上单机故障\u003c/li\u003e\u003cli\u003e报警日志数量：939条\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e部分原始报警日志如图9所示，初次观察时，很难理出头绪。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/e2615c33f819e45412e1b1d336befc5b2002459.png\" alt=\"图9 单依赖故障报警日志节选\"/\u003e\u003c/p\u003e\u003cp\u003e经过聚类后的报警摘要如表1所示：\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth align=\"left\"\u003eID\u003c/th\u003e\u003cth align=\"left\"\u003eServer Room\u003c/th\u003e\u003cth align=\"left\"\u003eError Source\u003c/th\u003e\u003cth align=\"left\"\u003eEnvironment\u003c/th\u003e\u003cth align=\"left\"\u003ePosition （为保证数据安全，类路径已做处理）\u003c/th\u003e\u003cth align=\"left\"\u003eSummary （为保证数据安全，部分类路径已做处理）\u003c/th\u003e\u003cth align=\"left\"\u003eCount\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.CommonProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: commonQueryClient.getProductType execution timeout after waiting for 150ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e249\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e2\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e业务插件\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.PluginRegistry.lambda\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ejava.lang.IllegalArgumentException: 未找到业务插件:所有产品类型\u003c/td\u003e\u003ctd align=\"left\"\u003e240\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e3\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.TrProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: TrQueryClient.listTrByDids2C execution timeout after waiting for 1000ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e145\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e4\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e对外接口(猜喜/货架/目的地)\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.RemoteDealServiceImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: ScenicDealList.listDealsByScenic execution timeout after waiting for 300ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e89\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e5\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.CommonProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: commonQueryClient.listTrByDids2C execution timeout after waiting for 1000ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e29\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e6\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.ActivityQueryClientImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: commonQueryClient.getBusinessLicense execution timeout after waiting for 100ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e21\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e7\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eprod\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.CommonProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: commonQueryClient.getBusinessLicense execution timeout after waiting for 100ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e21\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e8\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e对外接口(猜喜/货架/目的地)\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.RemoteDealServiceImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: HotelDealList.hotelShelf execution timeout after waiting for 500ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e17\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e9\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.TrProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eCaused by: java.lang.InterruptedException\u003c/td\u003e\u003ctd align=\"left\"\u003e16\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e10\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eProd\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.TrProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eCaused by: java.lang.InterruptedException\u003c/td\u003e\u003ctd align=\"left\"\u003e13\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e我们可以看到前三条报警摘要的Count远超其他报警摘要，并且它们指明了故障主要发生在产品中心的接口。\u003c/p\u003e\u003ch3 id=\"2-无相关的多依赖同时故障\"\u003e2. 无相关的多依赖同时故障\u003c/h3\u003e\u003cp\u003e实验材料为利用故障注入工具，在Staging环境模拟运营置顶服务和A/B测试服务同时产生故障的场景。\u003c/p\u003e\u003cul\u003e\u003cli\u003e环境：Staging（使用线上录制流量和压测平台模拟线上正常流量环境）\u003c/li\u003e\u003cli\u003e模拟故障原因：置顶与A/B测试接口大量超时\u003c/li\u003e\u003cli\u003e报警日志数量：527条\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e部分原始报警日志如图10所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/41b255f1d20d9b2ae23662f21a05070a1748251.png\" alt=\"图10 无相关的多依赖同时故障报警日志节选\"/\u003e\u003c/p\u003e\u003cp\u003e经过聚类后的报警摘要如表2所示：\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth align=\"left\"\u003eID\u003c/th\u003e\u003cth align=\"left\"\u003eServer Room\u003c/th\u003e\u003cth align=\"left\"\u003eError Source\u003c/th\u003e\u003cth align=\"left\"\u003eEnvironment\u003c/th\u003e\u003cth align=\"left\"\u003ePosition （为保证数据安全，类路径已做处理）\u003c/th\u003e\u003cth align=\"left\"\u003eSummary （为保证数据安全，部分类路径已做处理）\u003c/th\u003e\u003cth align=\"left\"\u003eCount\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e运营活动\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.ActivityQueryClientImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e[hystrix]置顶失败, circuit short is open\u003c/td\u003e\u003ctd align=\"left\"\u003e291\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e2\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003eA/B测试\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.AbExperimentClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e[hystrix] tripExperiment error, circuit short is open\u003c/td\u003e\u003ctd align=\"left\"\u003e105\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e3\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e缓存\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.CacheClientFacade\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: c-cache-rpc.common_deal_base.rpc execution timeout after waiting for 1000ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e15\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e4\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品信息\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.queryDealModel\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eCaused by: com.meituan.service.mobile.mtthrift.netty.exception.RequestTimeoutException: request timeout\u003c/td\u003e\u003ctd align=\"left\"\u003e14\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e5\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.CommonProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: commonQueryClient.getBusinessLicense execution timeout after waiting for 100ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e9\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e6\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.getOrderForm\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ejava.lang.IllegalArgumentException: 产品无库存\u003c/td\u003e\u003ctd align=\"left\"\u003e7\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e7\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e弹性工程\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.PreSaleChatClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ecom.netflix.hystrix.exception.HystrixTimeoutException: CustomerService.PreSaleChat execution timeout after waiting for 50ms.\u003c/td\u003e\u003ctd align=\"left\"\u003e7\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e8\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e缓存\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.SpringCacheManager\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eCaused by: java.net.SocketTimeoutException: Read timed out\u003c/td\u003e\u003ctd align=\"left\"\u003e7\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e9\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品信息\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.queryDetailUrlVO\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ejava.lang.IllegalArgumentException: 未知的产品类型\u003c/td\u003e\u003ctd align=\"left\"\u003e2\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e10\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品信息\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.queryDetailUrlVO\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003ejava.lang.IllegalArgumentException: 无法获取链接地址\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e从上表可以看到，前两条报警摘要符合本次试验的预期，定位到了故障发生的原因。说明在多故障的情况下，算法也有较好的效果。\u003c/p\u003e\u003ch3 id=\"3-中间件与相关依赖同时故障\"\u003e3. 中间件与相关依赖同时故障\u003c/h3\u003e\u003cp\u003e实验材料为利用故障注入工具，在Staging环境模拟产品中心服务和缓存服务同时产生超时故障的场景。\u003c/p\u003e\u003cul\u003e\u003cli\u003e环境：Staging（使用线上录制流量和压测平台模拟线上正常流量环境）\u003c/li\u003e\u003cli\u003e模拟故障原因：产品中心所有接口超时，所有缓存服务超时\u003c/li\u003e\u003cli\u003e报警日志数量：2165\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e部分原始报警日志如图11所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/463289b6597c90caf018f17bcf2b12491867556.png\" alt=\"图11 中间件与相关依赖同时故障报警日志节选\"/\u003e\u003c/p\u003e\u003cp\u003e经过聚类后的报警摘要如表3所示：\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth align=\"left\"\u003eID\u003c/th\u003e\u003cth align=\"left\"\u003eServer Room\u003c/th\u003e\u003cth align=\"left\"\u003eError Source\u003c/th\u003e\u003cth align=\"left\"\u003eEnvironment\u003c/th\u003e\u003cth align=\"left\"\u003ePosition （为保证数据安全，类路径已做处理）\u003c/th\u003e\u003cth align=\"left\"\u003eSummary （为保证数据安全，部分类路径已做处理）\u003c/th\u003e\u003cth align=\"left\"\u003eCount\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003eSquirrel\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.cache\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eTimeout\u003c/td\u003e\u003ctd align=\"left\"\u003e491\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e2\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003eCellar\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.cache\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eTimeout\u003c/td\u003e\u003ctd align=\"left\"\u003e285\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e3\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003eSquirrel\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.TdcServiceImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eOther Exception\u003c/td\u003e\u003ctd align=\"left\"\u003e149\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e4\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e评论\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.cache\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eTimeout\u003c/td\u003e\u003ctd align=\"left\"\u003e147\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e5\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003eCellar\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.TdcServiceImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eOther Exception\u003c/td\u003e\u003ctd align=\"left\"\u003e143\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e6\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003eSquirrel\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.PoiManagerImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e熔断\u003c/td\u003e\u003ctd align=\"left\"\u003e112\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e7\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.CommonProductQueryClient\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eOther Exception\u003c/td\u003e\u003ctd align=\"left\"\u003e89\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e8\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e评论\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.TrDealProcessor\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eOther Exception\u003c/td\u003e\u003ctd align=\"left\"\u003e83\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e9\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e评论\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.poi.PoiInfoImpl\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eOther Exception\u003c/td\u003e\u003ctd align=\"left\"\u003e82\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e10\u003c/td\u003e\u003ctd align=\"left\"\u003e所有机房\u003c/td\u003e\u003ctd align=\"left\"\u003e产品中心\u003c/td\u003e\u003ctd align=\"left\"\u003eStaging\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ecom.*.*.*.client\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003eTimeout\u003c/td\u003e\u003ctd align=\"left\"\u003e74\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e从上表可以看到，缓存（Squirrel和Cellar双缓存）超时最多，产品中心的超时相对较少，这是因为我们系统针对产品中心的部分接口做了兜底处理，当超时发生时后先查缓存，如果缓存查不到会穿透调用一个离线信息缓存系统，因此产品中心超时总体较少。\u003c/p\u003e\u003cp\u003e综合上述三个实验得出结果，算法对于报警日志的泛化是具有一定效果。在所进行实验的三个场景中，均能够定位到关键问题。但是依然存在一些不足，报警摘要中，有的经过泛化的信息过于笼统（比如Other Exception）。\u003c/p\u003e\u003cp\u003e经过分析，我们发现主要的原因有：其一，对于错误信息中关键字段的提取，在一定程度上决定了向上泛化的准确度。其二，系统本身日志设计存在一定的局限性。\u003c/p\u003e\u003cp\u003e同时，在利用这个泛化后的报警摘要进行分析时，需要使用者具备相应领域的知识。\u003c/p\u003e\u003ch2 id=\"未来规划\"\u003e未来规划\u003c/h2\u003e\u003cp\u003e本文所关注的工作，主要在于验证聚类算法效果，还有一些方向可以继续完善和优化：\u003c/p\u003e\u003col\u003e\u003cli\u003e日志内容的深度分析。本文仅对报警日志做了简单的关键字提取和人工标记，未涉及太多文本分析的内容。我们可以通过使用文本分类、文本特征向量相似度等，提高日志内容分析的准确度，提升泛化效果。\u003c/li\u003e\u003cli\u003e多种聚类算法综合使用。本文仅探讨了处理系统错误日志时表现较好的聚类算法，针对系统中多种不同类型的报警，未来也可以配合其他聚类算法（如K-Means）共同对报警进行处理，优化聚合效果。\u003c/li\u003e\u003cli\u003e自适应报警阈值。除了对报警聚类，我们还可以通过对监控指标的时序分析，动态管理报警阈值，提高告警的质量和及时性，减少误报和漏告数量。\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"参考资料\"\u003e参考资料\u003c/h2\u003e\u003col\u003e\u003cli\u003eJulisch, Klaus. “Clustering intrusion detection alarms to support root cause analysis.” ACM transactions on information and system security (TISSEC) 6.4 (2003): 443-471.\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Cluster_analysis\"\u003ehttps://en.wikipedia.org/wiki/Cluster_analysis\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"作者简介\"\u003e作者简介\u003c/h2\u003e\u003cul\u003e\u003cli\u003e刘玚，美团点评后端工程师。2017 年加入美团点评，负责美团点评境内度假的业务开发。\u003c/li\u003e\u003cli\u003e千钊，美团点评后端工程师。2017 年加入美团点评，负责美团点评境内度假的业务开发。\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2019-02-28T00:00:00Z",
  "Author": "soulteary@gmail.com"
}