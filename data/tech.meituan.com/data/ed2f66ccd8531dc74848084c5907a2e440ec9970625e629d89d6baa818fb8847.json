{
  "Source": "tech.meituan.com",
  "Title": "如何优雅地记录操作日志？",
  "Link": "https://tech.meituan.com/2021/09/16/operational-logbook.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003cp\u003e操作日志几乎存在于每个系统中，而这些系统都有记录操作日志的一套 API。操作日志和系统日志不一样，操作日志必须要做到简单易懂。所以如何让操作日志不和业务逻辑耦合，如何让操作日志的内容易于理解，让操作日志的接入更加简单？上面这些都是本文要回答的问题，主要围绕着如何“优雅”地记录操作日志展开描述。\u003c/p\u003e\u003ch2 id=\"1-操作日志的使用场景\"\u003e1. 操作日志的使用场景\u003c/h2\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/ae35fb1babaab193c1dd0b1bbbe9f07d96643.png\" alt=\"例子\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e系统日志和操作日志的区别\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e系统日志\u003c/strong\u003e：系统日志主要是为开发排查问题提供依据，一般打印在日志文件中；系统日志的可读性要求没那么高，日志中会包含代码的信息，比如在某个类的某一行打印了一个日志。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e操作日志\u003c/strong\u003e：主要是对某个对象进行新增操作或者修改操作后记录下这个新增或者修改，操作日志要求可读性比较强，因为它主要是给用户看的，比如订单的物流信息，用户需要知道在什么时间发生了什么事情。再比如，客服对工单的处理记录信息。\u003c/p\u003e\u003cp\u003e操作日志的记录格式大概分为下面几种：\n* 单纯的文字记录，比如：2021-09-16 10:00 订单创建。\n* 简单的动态的文本记录，比如：2021-09-16 10:00 订单创建，订单号：NO.11089999，其中涉及变量订单号“NO.11089999”。\n* 修改类型的文本，包含修改前和修改后的值，比如：2021-09-16 10:00 用户小明修改了订单的配送地址：从“金灿灿小区”修改到“银盏盏小区” ，其中涉及变量配送的原地址“金灿灿小区”和新地址“银盏盏小区”。\n* 修改表单，一次会修改多个字段。\u003c/p\u003e\u003ch2 id=\"2-实现方式\"\u003e2. 实现方式\u003c/h2\u003e\u003ch3 id=\"2-1-使用-canal-监听数据库记录操作日志\"\u003e2.1 使用 Canal 监听数据库记录操作日志\u003c/h3\u003e\u003cp\u003eCanal 是一款基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费的开源组件，通过采用监听数据库 Binlog 的方式，这样可以从底层知道是哪些数据做了修改，然后根据更改的数据记录操作日志。\u003c/p\u003e\u003cp\u003e这种方式的优点是和业务逻辑完全分离。缺点也很明显，局限性太高，只能针对数据库的更改做操作日志记录，如果修改涉及到其他团队的 RPC 的调用，就没办法监听数据库了，举个例子：给用户发送通知，通知服务一般都是公司内部的公共组件，这时候只能在调用 RPC 的时候手工记录发送通知的操作日志了。\u003c/p\u003e\u003ch3 id=\"2-2-通过日志文件的方式记录\"\u003e2.2 通过日志文件的方式记录\u003c/h3\u003e\u003cpre\u003e\u003ccode\u003elog.info(\u0026#34;订单创建\u0026#34;)\nlog.info(\u0026#34;订单已经创建，订单编号:{}\u0026#34;, orderNo)\nlog.info(\u0026#34;修改了订单的配送地址：从“{}”修改到“{}”， \u0026#34;金灿灿小区\u0026#34;, \u0026#34;银盏盏小区\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这种方式的操作记录需要解决三个问题。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e问题一：操作人如何记录\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e借助 SLF4J 中的 MDC 工具类，把操作人放在日志中，然后在日志中统一打印出来。首先在用户的拦截器中把用户的标识 Put 到 MDC 中。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@Component\npublic class UserInterceptor extends HandlerInterceptorAdapter {\n  @Override\n  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n    //获取到用户标识\n    String userNo = getUserNo(request);\n    //把用户 ID 放到 MDC 上下文中\n    MDC.put(\u0026#34;userId\u0026#34;, userNo);\n    return super.preHandle(request, response, handler);\n  }\n\n  private String getUserNo(HttpServletRequest request) {\n    // 通过 SSO 或者Cookie 或者 Auth信息获取到 当前登陆的用户信息\n    return null;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其次，把 userId 格式化到日志中，使用 %X{userId} 可以取到 MDC 中用户标识。\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;pattern\u0026gt;\u0026#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %X{userId} %logger{30}.%method:%L - %msg%n\u0026#34;\u0026lt;/pattern\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e问题二：操作日志如何和系统日志区分开\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e通过配置 Log 的配置文件，把有关操作日志的 Log 单独放到一日志文件中。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-xml\"\u003e//不同业务日志记录到不同的文件\n\u0026lt;appender name=\u0026#34;businessLogAppender\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt;\n    \u0026lt;File\u0026gt;logs/business.log\u0026lt;/File\u0026gt;\n    \u0026lt;append\u0026gt;true\u0026lt;/append\u0026gt;\n    \u0026lt;filter class=\u0026#34;ch.qos.logback.classic.filter.LevelFilter\u0026#34;\u0026gt;\n        \u0026lt;level\u0026gt;INFO\u0026lt;/level\u0026gt;\n        \u0026lt;onMatch\u0026gt;ACCEPT\u0026lt;/onMatch\u0026gt;\n        \u0026lt;onMismatch\u0026gt;DENY\u0026lt;/onMismatch\u0026gt;\n    \u0026lt;/filter\u0026gt;\n    \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt;\n        \u0026lt;fileNamePattern\u0026gt;logs/业务A.%d.%i.log\u0026lt;/fileNamePattern\u0026gt;\n        \u0026lt;maxHistory\u0026gt;90\u0026lt;/maxHistory\u0026gt;\n        \u0026lt;timeBasedFileNamingAndTriggeringPolicy class=\u0026#34;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\u0026#34;\u0026gt;\n            \u0026lt;maxFileSize\u0026gt;10MB\u0026lt;/maxFileSize\u0026gt;\n        \u0026lt;/timeBasedFileNamingAndTriggeringPolicy\u0026gt;\n    \u0026lt;/rollingPolicy\u0026gt;\n    \u0026lt;encoder\u0026gt;\n        \u0026lt;pattern\u0026gt;\u0026#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %t %-5level %X{userId} %logger{30}.%method:%L - %msg%n\u0026#34;\u0026lt;/pattern\u0026gt;\n        \u0026lt;charset\u0026gt;UTF-8\u0026lt;/charset\u0026gt;\n    \u0026lt;/encoder\u0026gt;\n\u0026lt;/appender\u0026gt;\n        \n\u0026lt;logger name=\u0026#34;businessLog\u0026#34; additivity=\u0026#34;false\u0026#34; level=\u0026#34;INFO\u0026#34;\u0026gt;\n    \u0026lt;appender-ref ref=\u0026#34;businessLogAppender\u0026#34;/\u0026gt;\n\u0026lt;/logger\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后在 Java 代码中单独的记录业务日志。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e//记录特定日志的声明\nprivate final Logger businessLog = LoggerFactory.getLogger(\u0026#34;businessLog\u0026#34;);\n \n//日志存储\nbusinessLog.info(\u0026#34;修改了配送地址\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e问题三：如何生成可读懂的日志文案\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e可以采用 LogUtil 的方式，也可以采用切面的方式生成日志模板，后续内容将会进行介绍。这样就可以把日志单独保存在一个文件中，然后通过日志收集可以把日志保存在 Elasticsearch 或者数据库中，接下来看下如何生成可读的操作日志。\u003c/p\u003e\u003ch3 id=\"2-3-通过-logutil-的方式记录日志\"\u003e2.3 通过 LogUtil 的方式记录日志\u003c/h3\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e  LogUtil.log(orderNo, \u0026#34;订单创建\u0026#34;, \u0026#34;小明\u0026#34;)模板\n  LogUtil.log(orderNo, \u0026#34;订单创建，订单号\u0026#34;+\u0026#34;NO.11089999\u0026#34;,  \u0026#34;小明\u0026#34;)\n  String template = \u0026#34;用户%s修改了订单的配送地址：从“%s”修改到“%s”\u0026#34;\n  LogUtil.log(orderNo, String.format(tempalte, \u0026#34;小明\u0026#34;, \u0026#34;金灿灿小区\u0026#34;, \u0026#34;银盏盏小区\u0026#34;),  \u0026#34;小明\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp\u003e这里解释下为什么记录操作日志的时候都绑定了一个 OrderNo，因为操作日志记录的是：某一个“时间”“谁”对“什么”做了什么“事情”。当查询业务的操作日志的时候，会查询针对这个订单的的所有操作，所以代码中加上了 OrderNo，记录操作日志的时候需要记录下操作人，所以传了操作人“小明”进来。\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e上面看起来问题并不大，在修改地址的业务逻辑方法中使用一行代码记录了操作日志，接下来再看一个更复杂的例子：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003eprivate OnesIssueDO updateAddress(updateDeliveryRequest request) {\n    DeliveryOrder deliveryOrder = deliveryQueryService.queryOldAddress(request.getDeliveryOrderNo());\n    // 更新派送信息，电话，收件人，地址\n    doUpdate(request);\n    String logContent = getLogContent(request, deliveryOrder);\n    LogUtils.logRecord(request.getOrderNo(), logContent, request.getOperator);\n    return onesIssueDO;\n}\n\nprivate String getLogContent(updateDeliveryRequest request, DeliveryOrder deliveryOrder) {\n    String template = \u0026#34;用户%s修改了订单的配送地址：从“%s”修改到“%s”\u0026#34;;\n    return String.format(tempalte, request.getUserName(), deliveryOrder.getAddress(), request.getAddress);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可以看到上面的例子使用了两个方法代码，外加一个 getLogContent 的函数实现了操作日志的记录。当业务变得复杂后，记录操作日志放在业务代码中会导致业务的逻辑比较繁杂，最后导致 LogUtils.logRecord() 方法的调用存在于很多业务的代码中，而且类似 getLogContent() 这样的方法也散落在各个业务类中，对于代码的可读性和可维护性来说是一个灾难。下面介绍下如何避免这个灾难。\u003c/p\u003e\u003ch3 id=\"2-4-方法注解实现操作日志\"\u003e2.4 方法注解实现操作日志\u003c/h3\u003e\u003cp\u003e为了解决上面问题，一般采用 AOP 的方式记录日志，让操作日志和业务逻辑解耦，接下来看一个简单的 AOP 日志的例子。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content=\u0026#34;修改了配送地址\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们可以在注解的操作日志上记录固定文案，这样业务逻辑和业务代码可以做到解耦，让我们的业务代码变得纯净起来。可能有同学注意到，上面的方式虽然解耦了操作日志的代码，但是记录的文案并不符合我们的预期，文案是静态的，没有包含动态的文案，因为我们需要记录的操作日志是： 用户%s修改了订单的配送地址，从“%s”修改到“%s”。接下来，我们介绍一下如何优雅地使用 AOP 生成动态的操作日志。\u003c/p\u003e\u003ch2 id=\"3-优雅地支持-aop-生成动态的操作日志\"\u003e3. 优雅地支持 AOP 生成动态的操作日志\u003c/h2\u003e\u003ch3 id=\"3-1-动态模板\"\u003e3.1 动态模板\u003c/h3\u003e\u003cp\u003e一提到动态模板，就会涉及到让变量通过占位符的方式解析模板，从而达到通过注解记录操作日志的目的。模板解析的方式有很多种，这里使用了 SpEL（Spring Expression Language，Spring表达式语言）来实现。我们可以先写下期望的记录日志的方式，然后再看下能否实现这样的功能。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request, String oldAddress){\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过 SpEL 表达式引用方法上的参数，可以让变量填充到模板中达到动态的操作日志文本内容。\n但是现在还有几个问题需要解决：\n* 操作日志需要知道是哪个操作人修改的订单配送地址。\n* 修改订单配送地址的操作日志需要绑定在配送的订单上，从而可以根据配送订单号查询出对这个配送订单的所有操作。\n* 为了在注解上记录之前的配送地址是什么，在方法签名上添加了一个和业务无关的 oldAddress 的变量，这样就不优雅了。\u003c/p\u003e\u003cp\u003e为了解决前两个问题，我们需要把期望的操作日志使用形式改成下面的方式：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(\n     content = \u0026#34;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”\u0026#34;,\n     operator = \u0026#34;#request.userName\u0026#34;, bizNo=\u0026#34;#request.deliveryOrderNo\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request, String oldAddress){\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改后的代码在注解上添加两个参数，一个是操作人，一个是操作日志需要绑定的对象。但是，在普通的 Web 应用中用户信息都是保存在一个线程上下文的静态方法中，所以 operator 一般是这样的写法（假定获取当前登陆用户的方式是 UserContext.getCurrentUser()）。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003eoperator = \u0026#34;#{T(com.meituan.user.UserContext).getCurrentUser()}\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样的话，每个 @LogRecord 的注解上的操作人都是这么长一串。为了避免过多的重复代码，我们可以把注解上的 operator 参数设置为非必填，这样用户可以填写操作人。但是，如果用户不填写我们就取 UserContext 的 user（下文会介绍如何取 user ）。最后，最简单的日志变成了下面的形式：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”\u0026#34;, \n           bizNo=\u0026#34;#request.deliveryOrderNo\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request, String oldAddress){\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e接下来，我们需要解决第三个问题：为了记录业务操作记录添加了一个 oldAddress 变量，不管怎么样这都不是一个好的实现方式，所以接下来，我们需要把 oldAddress 变量从修改地址的方法签名上去掉。但是操作日志确实需要 oldAddress 变量，怎么办呢？\u003c/p\u003e\u003cp\u003e要么和产品经理 PK 一下，让产品经理把文案从“修改了订单的配送地址：从 xx 修改到 yy” 改为 “修改了订单的配送地址为：yy”。但是从用户体验上来看，第一种文案更人性化一些，显然我们不会 PK 成功的。那么我们就必须要把这个 oldAddress 查询出来然后供操作日志使用了。还有一种解决办法是：把这个参数放到操作日志的线程上下文中，供注解上的模板使用。我们按照这个思路再改下操作日志的实现代码。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送地址：从“#oldAddress”, 修改到“#request.address”\u0026#34;,\n        bizNo=\u0026#34;#request.deliveryOrderNo\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 查询出原来的地址是什么\n    LogRecordContext.putVariable(\u0026#34;oldAddress\u0026#34;, DeliveryService.queryOldAddress(request.getDeliveryOrderNo()));\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这时候可以看到，LogRecordContext 解决了操作日志模板上使用方法参数以外变量的问题，同时避免了为了记录操作日志修改方法签名的设计。虽然已经比之前的代码好了些，但是依然需要在业务代码里面加了一行业务逻辑无关的代码，如果有“强迫症”的同学还可以继续往下看，接下来我们会讲解自定义函数的解决方案。下面再看另一个例子：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送员：从“#oldDeliveryUserId”, 修改到“#request.userId”\u0026#34;,\n        bizNo=\u0026#34;#request.deliveryOrderNo\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 查询出原来的地址是什么\n    LogRecordContext.putVariable(\u0026#34;oldDeliveryUserId\u0026#34;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个操作日志的模板最后记录的内容是这样的格式：修改了订单的配送员：从 “10090”，修改到 “10099”，显然用户看到这样的操作日志是不明白的。用户对于用户 ID 是 10090 还是 10099 并不了解，用户期望看到的是：修改了订单的配送员：从“张三（18910008888）”，修改到“小明（13910006666）”。用户关心的是配送员的姓名和电话。但是我们方法中传递的参数只有配送员的 ID，没有配送员的姓名可电话。我们可以通过上面的方法，把用户的姓名和电话查询出来，然后通过 LogRecordContext 实现。\u003c/p\u003e\u003cp\u003e但是，“强迫症”是不期望操作日志的代码嵌入在业务逻辑中的。接下来，我们考虑另一种实现方式：自定义函数。如果我们可以通过自定义函数把用户 ID 转换为用户姓名和电话，那么就能解决这一问题，按照这个思路，我们把模板修改为下面的形式：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送员：从“{deliveryUser{#oldDeliveryUserId}}”, 修改到“{deveryUser{#request.userId}}”\u0026#34;,\n        bizNo=\u0026#34;#request.deliveryOrderNo\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 查询出原来的地址是什么\n    LogRecordContext.putVariable(\u0026#34;oldDeliveryUserId\u0026#34;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中 deliveryUser 是自定义函数，使用大括号把 Spring 的 SpEL 表达式包裹起来，这样做的好处：一是把 SpEL（Spring Expression Language，Spring表达式语言）和自定义函数区分开便于解析；二是如果模板中不需要 SpEL 表达式解析可以容易的识别出来，减少 SpEL 的解析提高性能。这时候我们发现上面代码还可以优化成下面的形式：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送员：从“{queryOldUser{#request.deliveryOrderNo()}}”, 修改到“{deveryUser{#request.userId}}”\u0026#34;,\n        bizNo=\u0026#34;#request.deliveryOrderNo\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样就不需要在 modifyAddress 方法中通过 LogRecordContext.putVariable() 设置老的快递员了，通过直接新加一个自定义函数 queryOldUser() 参数把派送订单传递进去，就能查到之前的配送人了，只需要让方法的解析在 modifyAddress() 方法执行之前运行。这样的话，我们让业务代码又变得纯净了起来，同时也让“强迫症”不再感到难受了。\u003c/p\u003e\u003ch2 id=\"4-代码实现解析\"\u003e4. 代码实现解析\u003c/h2\u003e\u003ch3 id=\"4-1-代码结构\"\u003e4.1 代码结构\u003c/h3\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/bde9c178c76e131cefae3e7d7fcf428993663.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e上面的操作日志主要是通过一个 AOP 拦截器实现的，整体主要分为 AOP 模块、日志解析模块、日志保存模块、Starter 模块；组件提供了4个扩展点，分别是：自定义函数、默认处理人、业务保存和查询；业务可以根据自己的业务特性定制符合自己业务的逻辑。\u003c/p\u003e\u003ch3 id=\"4-2-模块介绍\"\u003e4.2 模块介绍\u003c/h3\u003e\u003cp\u003e有了上面的分析，已经得出一种我们期望的操作日志记录的方式，那么接下来看看如何实现上面的逻辑。实现主要分为下面几个步骤：\n* AOP 拦截逻辑\n* 解析逻辑\n* 模板解析\n* LogContext 逻辑\n* 默认的 operator 逻辑\n* 自定义函数逻辑\n* 默认的日志持久化逻辑\n* Starter 封装逻辑\u003c/p\u003e\u003ch4 id=\"4-2-1-aop-拦截逻辑\"\u003e4.2.1 AOP 拦截逻辑\u003c/h4\u003e\u003cp\u003e这块逻辑主要是一个拦截器，针对 @LogRecord 注解分析出需要记录的操作日志，然后把操作日志持久化，这里把注解命名为 @LogRecordAnnotation。接下来，我们看下注解的定义：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Documented\npublic @interface LogRecordAnnotation {\n    String success();\n\n    String fail() default \u0026#34;\u0026#34;;\n\n    String operator() default \u0026#34;\u0026#34;;\n\n    String bizNo();\n\n    String category() default \u0026#34;\u0026#34;;\n\n    String detail() default \u0026#34;\u0026#34;;\n\n    String condition() default \u0026#34;\u0026#34;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e注解中除了上面提到参数外，还增加了 fail、category、detail、condition 等参数，这几个参数是为了满足特定的场景，后面还会给出具体的例子。\u003c/p\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth align=\"center\"\u003e参数名\u003c/th\u003e\u003cth\u003e描述\u003c/th\u003e\u003cth align=\"center\"\u003e是否必填\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003esuccess\u003c/td\u003e\u003ctd\u003e操作日志的文本模板\u003c/td\u003e\u003ctd align=\"center\"\u003e是\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003efail\u003c/td\u003e\u003ctd\u003e操作日志失败的文本版本\u003c/td\u003e\u003ctd align=\"center\"\u003e否\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003eoperator\u003c/td\u003e\u003ctd\u003e操作日志的执行人\u003c/td\u003e\u003ctd align=\"center\"\u003e否\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003ebizNo\u003c/td\u003e\u003ctd\u003e操作日志绑定的业务对象标识\u003c/td\u003e\u003ctd align=\"center\"\u003e是\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003ecategory\u003c/td\u003e\u003ctd\u003e操作日志的种类\u003c/td\u003e\u003ctd align=\"center\"\u003e否\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003edetail\u003c/td\u003e\u003ctd\u003e扩展参数，记录操作日志的修改详情\u003c/td\u003e\u003ctd align=\"center\"\u003e否\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"center\"\u003econdition\u003c/td\u003e\u003ctd\u003e记录日志的条件\u003c/td\u003e\u003ctd align=\"center\"\u003e否\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003cp\u003e为了保持简单，组件的必填参数就两个。业务中的 AOP 逻辑大部分是使用 @Aspect 注解实现的，但是基于注解的 AOP 在 Spring boot 1.5 中兼容性是有问题的，组件为了兼容 Spring boot1.5 的版本我们手工实现 Spring 的 AOP 逻辑。\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/73d57fecf2ae9ae16e0b0879e58d005e30455.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e切面选择 \u003ccode\u003eAbstractBeanFactoryPointcutAdvisor\u003c/code\u003e 实现，切点是通过 \u003ccode\u003eStaticMethodMatcherPointcut\u003c/code\u003e 匹配包含 \u003ccode\u003eLogRecordAnnotation\u003c/code\u003e 注解的方法。通过实现 \u003ccode\u003eMethodInterceptor\u003c/code\u003e 接口实现操作日志的增强逻辑。\u003c/p\u003e\u003cp\u003e下面是拦截器的切点逻辑：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class LogRecordPointcut extends StaticMethodMatcherPointcut implements Serializable {\n    // LogRecord的解析类\n    private LogRecordOperationSource logRecordOperationSource;\n    \n    @Override\n    public boolean matches(@NonNull Method method, @NonNull Class\u0026lt;?\u0026gt; targetClass) {\n          // 解析 这个 method 上有没有 @LogRecordAnnotation 注解，有的话会解析出来注解上的各个参数\n        return !CollectionUtils.isEmpty(logRecordOperationSource.computeLogRecordOperations(method, targetClass));\n    }\n\n    void setLogRecordOperationSource(LogRecordOperationSource logRecordOperationSource) {\n        this.logRecordOperationSource = logRecordOperationSource;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e切面的增强逻辑主要代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@Override\npublic Object invoke(MethodInvocation invocation) throws Throwable {\n    Method method = invocation.getMethod();\n    // 记录日志\n    return execute(invocation, invocation.getThis(), method, invocation.getArguments());\n}\n\nprivate Object execute(MethodInvocation invoker, Object target, Method method, Object[] args) throws Throwable {\n    Class\u0026lt;?\u0026gt; targetClass = getTargetClass(target);\n    Object ret = null;\n    MethodExecuteResult methodExecuteResult = new MethodExecuteResult(true, null, \u0026#34;\u0026#34;);\n    LogRecordContext.putEmptySpan();\n    Collection\u0026lt;LogRecordOps\u0026gt; operations = new ArrayList\u0026lt;\u0026gt;();\n    Map\u0026lt;String, String\u0026gt; functionNameAndReturnMap = new HashMap\u0026lt;\u0026gt;();\n    try {\n        operations = logRecordOperationSource.computeLogRecordOperations(method, targetClass);\n        List\u0026lt;String\u0026gt; spElTemplates = getBeforeExecuteFunctionTemplate(operations);\n        //业务逻辑执行前的自定义函数解析\n        functionNameAndReturnMap = processBeforeExecuteFunctionTemplate(spElTemplates, targetClass, method, args);\n    } catch (Exception e) {\n        log.error(\u0026#34;log record parse before function exception\u0026#34;, e);\n    }\n    try {\n        ret = invoker.proceed();\n    } catch (Exception e) {\n        methodExecuteResult = new MethodExecuteResult(false, e, e.getMessage());\n    }\n    try {\n        if (!CollectionUtils.isEmpty(operations)) {\n            recordExecute(ret, method, args, operations, targetClass,\n                    methodExecuteResult.isSuccess(), methodExecuteResult.getErrorMsg(), functionNameAndReturnMap);\n        }\n    } catch (Exception t) {\n        //记录日志错误不要影响业务\n        log.error(\u0026#34;log record parse exception\u0026#34;, t);\n    } finally {\n        LogRecordContext.clear();\n    }\n    if (methodExecuteResult.throwable != null) {\n        throw methodExecuteResult.throwable;\n    }\n    return ret;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e拦截逻辑的流程：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/697eba86de7419230bdccdfb986b6cd550305.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e可以看到，操作日志的记录持久化是在方法执行完之后执行的，当方法抛出异常之后会先捕获异常，等操作日志持久化完成后再抛出异常。在业务的方法执行之前，会对提前解析的自定义函数求值，解决了前面提到的需要查询修改之前的内容。\u003c/p\u003e\u003ch4 id=\"4-2-2-解析逻辑\"\u003e4.2.2 解析逻辑\u003c/h4\u003e\u003cp\u003e\u003cstrong\u003e模板解析\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eSpring 3 提供了一个非常强大的功能：Spring EL，SpEL 在 Spring 产品中是作为表达式求值的核心基础模块，它本身是可以脱离 Spring 独立使用的。举个例子：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic static void main(String[] args) {\n        SpelExpressionParser parser = new SpelExpressionParser();\n        Expression expression = parser.parseExpression(\u0026#34;#root.purchaseName\u0026#34;);\n        Order order = new Order();\n        order.setPurchaseName(\u0026#34;张三\u0026#34;);\n        System.out.println(expression.getValue(order));\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个方法将打印 “张三”。LogRecord 解析的类图如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/49f3049c4d965d23ab14c80840c3356753525.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e解析核心类\u003c/strong\u003e：\u003ccode\u003eLogRecordValueParser\u003c/code\u003e 里面封装了自定义函数和 SpEL 解析类 \u003ccode\u003eLogRecordExpressionEvaluator\u003c/code\u003e。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class LogRecordExpressionEvaluator extends CachedExpressionEvaluator {\n\n    private Map\u0026lt;ExpressionKey, Expression\u0026gt; expressionCache = new ConcurrentHashMap\u0026lt;\u0026gt;(64);\n\n    private final Map\u0026lt;AnnotatedElementKey, Method\u0026gt; targetMethodCache = new ConcurrentHashMap\u0026lt;\u0026gt;(64);\n\n    public String parseExpression(String conditionExpression, AnnotatedElementKey methodKey, EvaluationContext evalContext) {\n        return getExpression(this.expressionCache, methodKey, conditionExpression).getValue(evalContext, String.class);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eLogRecordExpressionEvaluator\u003c/code\u003e 继承自 \u003ccode\u003eCachedExpressionEvaluator\u003c/code\u003e 类，这个类里面有两个 Map，一个是 expressionCache 一个是 targetMethodCache。在上面的例子中可以看到，SpEL 会解析成一个 Expression 表达式，然后根据传入的 Object 获取到对应的值，所以 expressionCache 是为了缓存方法、表达式和 SpEL 的 Expression 的对应关系，让方法注解上添加的 SpEL 表达式只解析一次。 下面的 targetMethodCache 是为了缓存传入到 Expression 表达式的 Object。核心的解析逻辑是上面最后一行代码。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003egetExpression(this.expressionCache, methodKey, conditionExpression).getValue(evalContext, String.class);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003egetExpression\u003c/code\u003e 方法会从 expressionCache 中获取到 @LogRecordAnnotation 注解上的表达式的解析 Expression 的实例，然后调用 \u003ccode\u003egetValue\u003c/code\u003e 方法，\u003ccode\u003egetValue\u003c/code\u003e 传入一个 evalContext 就是类似上面例子中的 order 对象。其中 Context 的实现将会在下文介绍。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e日志上下文实现\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e下面的例子把变量放到了 LogRecordContext 中，然后 SpEL 表达式就可以顺利的解析方法上不存在的参数了，通过上面的 SpEL 的例子可以看出，要把方法的参数和 LogRecordContext 中的变量都放到 SpEL 的 \u003ccode\u003egetValue\u003c/code\u003e 方法的 Object 中才可以顺利的解析表达式的值。下面看下如何实现：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送员：从“{deveryUser{#oldDeliveryUserId}}”, 修改到“{deveryUser{#request.getUserId()}}”\u0026#34;,\n            bizNo=\u0026#34;#request.getDeliveryOrderNo()\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 查询出原来的地址是什么\n    LogRecordContext.putVariable(\u0026#34;oldDeliveryUserId\u0026#34;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在 LogRecordValueParser 中创建了一个 EvaluationContext，用来给 SpEL 解析方法参数和 Context 中的变量。相关代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e\nEvaluationContext evaluationContext = expressionEvaluator.createEvaluationContext(method, args, targetClass, ret, errorMsg, beanFactory);\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在解析的时候调用 \u003ccode\u003egetValue\u003c/code\u003e 方法传入的参数 evalContext，就是上面这个 EvaluationContext 对象。下面是 LogRecordEvaluationContext 对象的继承体系：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/611f884a134745a0c9eaadcb84e9bbc873694.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003eLogRecordEvaluationContext 做了三个事情：\n* 把方法的参数都放到 SpEL 解析的 RootObject 中。\n* 把 LogRecordContext 中的变量都放到 RootObject 中。\n* 把方法的返回值和 ErrorMsg 都放到 RootObject 中。\u003c/p\u003e\u003cp\u003eLogRecordEvaluationContext 的代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class LogRecordEvaluationContext extends MethodBasedEvaluationContext {\n\n    public LogRecordEvaluationContext(Object rootObject, Method method, Object[] arguments,\n                                      ParameterNameDiscoverer parameterNameDiscoverer, Object ret, String errorMsg) {\n       //把方法的参数都放到 SpEL 解析的 RootObject 中\n       super(rootObject, method, arguments, parameterNameDiscoverer);\n       //把 LogRecordContext 中的变量都放到 RootObject 中\n        Map\u0026lt;String, Object\u0026gt; variables = LogRecordContext.getVariables();\n        if (variables != null \u0026amp;\u0026amp; variables.size() \u0026gt; 0) {\n            for (Map.Entry\u0026lt;String, Object\u0026gt; entry : variables.entrySet()) {\n                setVariable(entry.getKey(), entry.getValue());\n            }\n        }\n        //把方法的返回值和 ErrorMsg 都放到 RootObject 中\n        setVariable(\u0026#34;_ret\u0026#34;, ret);\n        setVariable(\u0026#34;_errorMsg\u0026#34;, errorMsg);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e下面是 LogRecordContext 的实现，这个类里面通过一个 ThreadLocal 变量保持了一个栈，栈里面是个 Map，Map 对应了变量的名称和变量的值。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class LogRecordContext {\n\n    private static final InheritableThreadLocal\u0026lt;Stack\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt;\u0026gt; variableMapStack = new InheritableThreadLocal\u0026lt;\u0026gt;();\n   //其他省略....\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面使用了 InheritableThreadLocal，所以在线程池的场景下使用 LogRecordContext 会出现问题，如果支持线程池可以使用阿里巴巴开源的 TTL 框架。那这里为什么不直接设置一个 ThreadLocal\u003cmap\u003cstring, object=\"\"\u003e\u0026gt; 对象，而是要设置一个 Stack 结构呢？我们看一下这么做的原因是什么。\u003c/map\u003cstring,\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@LogRecord(content = \u0026#34;修改了订单的配送员：从“{deveryUser{#oldDeliveryUserId}}”, 修改到“{deveryUser{#request.getUserId()}}”\u0026#34;,\n        bizNo=\u0026#34;#request.getDeliveryOrderNo()\u0026#34;)\npublic void modifyAddress(updateDeliveryRequest request){\n    // 查询出原来的地址是什么\n    LogRecordContext.putVariable(\u0026#34;oldDeliveryUserId\u0026#34;, DeliveryService.queryOldDeliveryUserId(request.getDeliveryOrderNo()));\n    // 更新派送信息 电话，收件人、地址\n    doUpdate(request);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上面代码的执行流程如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p1.meituan.net/travelcube/45b7cacd228bc3cf835a8a2a83eb50fa90211.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e看起来没有什么问题，但是使用 LogRecordAnnotation 的方法里面嵌套了另一个使用 LogRecordAnnotation 方法的时候，流程就变成下面的形式：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/9c91465d4674a4d233840ce82d9390f7143948.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e可以看到，当方法二执行了释放变量后，继续执行方法一的 logRecord 逻辑，此时解析的时候 ThreadLocal\u003cmap\u003cstring, object=\"\"\u003e\u0026gt;的 Map 已经被释放掉，所以方法一就获取不到对应的变量了。方法一和方法二共用一个变量 Map 还有个问题是：如果方法二设置了和方法一相同的变量两个方法的变量就会被相互覆盖。所以最终 LogRecordContext 的变量的生命周期需要是下面的形式：\u003c/map\u003cstring,\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/6e115c8a747b371915ec9760948346a231049.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003eLogRecordContext 每执行一个方法都会压栈一个 Map，方法执行完之后会 Pop 掉这个 Map，从而避免变量共享和覆盖问题。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e默认操作人逻辑\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e在 LogRecordInterceptor 中 IOperatorGetService 接口，这个接口可以获取到当前的用户。下面是接口的定义：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic interface IOperatorGetService {\n\n    /**\n     * 可以在里面外部的获取当前登陆的用户，比如 UserContext.getCurrentUser()\n     *\n     * @return 转换成Operator返回\n     */\n    Operator getUser();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e下面给出了从用户上下文中获取用户的例子：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class DefaultOperatorGetServiceImpl implements IOperatorGetService {\n\n    @Override\n    public Operator getUser() {\n    //UserUtils 是获取用户上下文的方法\n         return Optional.ofNullable(UserUtils.getUser())\n                        .map(a -\u0026gt; new Operator(a.getName(), a.getLogin()))\n                        .orElseThrow(()-\u0026gt;new IllegalArgumentException(\u0026#34;user is null\u0026#34;));\n        \n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e组件在解析 operator 的时候，就判断注解上的 operator 是否是空，如果注解上没有指定，我们就从 IOperatorGetService 的 getUser 方法获取了。如果都获取不到，就会报错。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003eString realOperatorId = \u0026#34;\u0026#34;;\nif (StringUtils.isEmpty(operatorId)) {\n    if (operatorGetService.getUser() == null || StringUtils.isEmpty(operatorGetService.getUser().getOperatorId())) {\n        throw new IllegalArgumentException(\u0026#34;user is null\u0026#34;);\n    }\n    realOperatorId = operatorGetService.getUser().getOperatorId();\n} else {\n    spElTemplates = Lists.newArrayList(bizKey, bizNo, action, operatorId, detail);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e自定义函数逻辑\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e自定义函数的类图如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://p0.meituan.net/travelcube/14f29b09174a43fe0fff3e67226de25766597.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e下面是 IParseFunction 的接口定义：\u003ccode\u003eexecuteBefore\u003c/code\u003e 函数代表了自定义函数是否在业务代码执行之前解析，上面提到的查询修改之前的内容。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic interface IParseFunction {\n\n  default boolean executeBefore(){\n    return false;\n  }\n\n  String functionName();\n\n  String apply(String value);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eParseFunctionFactory 的代码比较简单，它的功能是把所有的 IParseFunction 注入到函数工厂中。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class ParseFunctionFactory {\n  private Map\u0026lt;String, IParseFunction\u0026gt; allFunctionMap;\n\n  public ParseFunctionFactory(List\u0026lt;IParseFunction\u0026gt; parseFunctions) {\n    if (CollectionUtils.isEmpty(parseFunctions)) {\n      return;\n    }\n    allFunctionMap = new HashMap\u0026lt;\u0026gt;();\n    for (IParseFunction parseFunction : parseFunctions) {\n      if (StringUtils.isEmpty(parseFunction.functionName())) {\n        continue;\n      }\n      allFunctionMap.put(parseFunction.functionName(), parseFunction);\n    }\n  }\n\n  public IParseFunction getFunction(String functionName) {\n    return allFunctionMap.get(functionName);\n  }\n\n  public boolean isBeforeFunction(String functionName) {\n    return allFunctionMap.get(functionName) != null \u0026amp;\u0026amp; allFunctionMap.get(functionName).executeBefore();\n  }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eDefaultFunctionServiceImpl 的逻辑就是根据传入的函数名称 functionName 找到对应的 IParseFunction，然后把参数传入到 IParseFunction 的 \u003ccode\u003eapply\u003c/code\u003e 方法上最后返回函数的值。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic class DefaultFunctionServiceImpl implements IFunctionService {\n\n  private final ParseFunctionFactory parseFunctionFactory;\n\n  public DefaultFunctionServiceImpl(ParseFunctionFactory parseFunctionFactory) {\n    this.parseFunctionFactory = parseFunctionFactory;\n  }\n\n  @Override\n  public String apply(String functionName, String value) {\n    IParseFunction function = parseFunctionFactory.getFunction(functionName);\n    if (function == null) {\n      return value;\n    }\n    return function.apply(value);\n  }\n\n  @Override\n  public boolean beforeFunction(String functionName) {\n    return parseFunctionFactory.isBeforeFunction(functionName);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"4-2-3-日志持久化逻辑\"\u003e4.2.3 日志持久化逻辑\u003c/h4\u003e\u003cp\u003e同样在 LogRecordInterceptor 的代码中引用了 ILogRecordService，这个 Service 主要包含了日志记录的接口。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003epublic interface ILogRecordService {\n    /**\n     * 保存 log\n     *\n     * @param logRecord 日志实体\n     */\n    void record(LogRecord logRecord);\n\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e业务可以实现这个保存接口，然后把日志保存在任何存储介质上。这里给了一个 2.2 节介绍的通过 log.info 保存在日志文件中的例子，业务可以把保存设置成异步或者同步，可以和业务放在一个事务中保证操作日志和业务的一致性，也可以新开辟一个事务，保证日志的错误不影响业务的事务。业务可以保存在 Elasticsearch、数据库或者文件中，用户可以根据日志结构和日志的存储实现相应的查询逻辑。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@Slf4j\npublic class DefaultLogRecordServiceImpl implements ILogRecordService {\n\n    @Override\n//    @Transactional(propagation = Propagation.REQUIRES_NEW)\n    public void record(LogRecord logRecord) {\n        log.info(\u0026#34;【logRecord】log={}\u0026#34;, logRecord);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"4-2-4-starter-逻辑封装\"\u003e4.2.4 Starter 逻辑封装\u003c/h4\u003e\u003cp\u003e上面逻辑代码已经介绍完毕，那么接下来需要把这些组件组装起来，然后让用户去使用。在使用这个组件的时候只需要在 Springboot 的入口上添加一个注解 @EnableLogRecord(tenant = “com.mzt.test”)。其中 tenant 代表租户，是为了多租户使用的。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\n@EnableTransactionManagement\n@EnableLogRecord(tenant = \u0026#34;com.mzt.test\u0026#34;)\npublic class Main {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Main.class, args);\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e再看下 EnableLogRecord 的代码，代码中 Import 了 \u003ccode\u003eLogRecordConfigureSelector.class\u003c/code\u003e，在 \u003ccode\u003eLogRecordConfigureSelector\u003c/code\u003e 类中暴露了 \u003ccode\u003eLogRecordProxyAutoConfiguration\u003c/code\u003e 类。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(LogRecordConfigureSelector.class)\npublic @interface EnableLogRecord {\n\n    String tenant();\n    \n    AdviceMode mode() default AdviceMode.PROXY;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eLogRecordProxyAutoConfiguration\u003c/code\u003e 就是装配上面组件的核心类了，代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-java\"\u003e@Configuration\n@Slf4j\npublic class LogRecordProxyAutoConfiguration implements ImportAware {\n\n  private AnnotationAttributes enableLogRecord;\n\n\n  @Bean\n  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n  public LogRecordOperationSource logRecordOperationSource() {\n    return new LogRecordOperationSource();\n  }\n\n  @Bean\n  @ConditionalOnMissingBean(IFunctionService.class)\n  public IFunctionService functionService(ParseFunctionFactory parseFunctionFactory) {\n    return new DefaultFunctionServiceImpl(parseFunctionFactory);\n  }\n\n  @Bean\n  public ParseFunctionFactory parseFunctionFactory(@Autowired List\u0026lt;IParseFunction\u0026gt; parseFunctions) {\n    return new ParseFunctionFactory(parseFunctions);\n  }\n\n  @Bean\n  @ConditionalOnMissingBean(IParseFunction.class)\n  public DefaultParseFunction parseFunction() {\n    return new DefaultParseFunction();\n  }\n\n\n  @Bean\n  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n  public BeanFactoryLogRecordAdvisor logRecordAdvisor(IFunctionService functionService) {\n    BeanFactoryLogRecordAdvisor advisor =\n            new BeanFactoryLogRecordAdvisor();\n    advisor.setLogRecordOperationSource(logRecordOperationSource());\n    advisor.setAdvice(logRecordInterceptor(functionService));\n    return advisor;\n  }\n\n  @Bean\n  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n  public LogRecordInterceptor logRecordInterceptor(IFunctionService functionService) {\n    LogRecordInterceptor interceptor = new LogRecordInterceptor();\n    interceptor.setLogRecordOperationSource(logRecordOperationSource());\n    interceptor.setTenant(enableLogRecord.getString(\u0026#34;tenant\u0026#34;));\n    interceptor.setFunctionService(functionService);\n    return interceptor;\n  }\n\n  @Bean\n  @ConditionalOnMissingBean(IOperatorGetService.class)\n  @Role(BeanDefinition.ROLE_APPLICATION)\n  public IOperatorGetService operatorGetService() {\n    return new DefaultOperatorGetServiceImpl();\n  }\n\n  @Bean\n  @ConditionalOnMissingBean(ILogRecordService.class)\n  @Role(BeanDefinition.ROLE_APPLICATION)\n  public ILogRecordService recordService() {\n    return new DefaultLogRecordServiceImpl();\n  }\n\n  @Override\n  public void setImportMetadata(AnnotationMetadata importMetadata) {\n    this.enableLogRecord = AnnotationAttributes.fromMap(\n            importMetadata.getAnnotationAttributes(EnableLogRecord.class.getName(), false));\n    if (this.enableLogRecord == null) {\n      log.info(\u0026#34;@EnableCaching is not present on importing class\u0026#34;);\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这个类继承 ImportAware 是为了拿到 EnableLogRecord 上的租户属性，这个类使用变量 logRecordAdvisor 和 logRecordInterceptor 装配了 AOP，同时把自定义函数注入到了 logRecordAdvisor 中。\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e对外扩展类\u003c/strong\u003e：分别是\u003ccode\u003eIOperatorGetService\u003c/code\u003e、\u003ccode\u003eILogRecordService\u003c/code\u003e、\u003ccode\u003eIParseFunction\u003c/code\u003e。业务可以自己实现相应的接口，因为配置了 @ConditionalOnMissingBean，所以用户的实现类会覆盖组件内的默认实现。\u003c/p\u003e\u003ch2 id=\"5-总结\"\u003e5. 总结\u003c/h2\u003e\u003cp\u003e这篇文章介绍了操作日志的常见写法，以及如何让操作日志的实现更加简单、易懂；通过组件的四个模块，介绍了组件的具体实现。对于上面的组件介绍，大家如果有疑问，也欢迎在文末留言，我们会进行答疑。\u003c/p\u003e\u003ch2 id=\"6-作者简介\"\u003e6. 作者简介\u003c/h2\u003e\u003cp\u003e站通，2020年加入美团，基础研发平台/研发质量及效率部工程师。\u003c/p\u003e\u003ch2 id=\"7-参考资料\"\u003e7. 参考资料\u003c/h2\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://github.com/alibaba/canal\"\u003eCanal\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://spring.io/projects/spring-framework\"\u003espring-framework\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html\"\u003eSpring Expression Language (SpEL)\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://blog.csdn.net/weixin_43954303/article/details/113837928?spm=1001.2014.3001.5501\"\u003eThreadLocal、InheritableThreadLocal、TransmittableThreadLocal三者之间区别\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"8-招聘信息\"\u003e8. 招聘信息\u003c/h2\u003e\u003cp\u003e美团研发质量及效率部 ，致力于建设业界一流的持续交付平台，现招聘基础组件方向相关的工程师，坐标北京/上海。欢迎感兴趣的同学加入。可投递简历至：chao.yu@meituan.com（邮件主题请注明：美团研发质量及效率部）。\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2021-09-16T00:00:00Z",
  "Author": "soulteary@gmail.com"
}