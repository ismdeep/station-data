{
  "Source": "tech.meituan.com",
  "Title": "用微前端的方式搭建类单页应用",
  "Link": "https://tech.meituan.com/2018/09/06/fe-tiny-spa.html",
  "Content": "\u003cdiv class=\"post-content\"\u003e\u003cdiv class=\"content\"\u003e\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\"\u003e微前端\u003c/a\u003e由ThoughtWorks 2016年提出，将后端微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。\u003c/p\u003e\u003cp\u003e美团已经是一家拥有几万人规模的大型互联网公司，提升整体效率至关重要，这需要很多内部和外部的管理系统来支撑。由于这些系统之间存在大量的连通和交互诉求，因此我们希望能够按照用户和使用场景将这些系统汇总成一个或者几个综合的系统。\u003c/p\u003e\u003cp\u003e我们把这种由多个微前端聚合出来的单页应用叫做“类单页应用”，美团HR系统就是基于这种设计实现的。美团HR系统是由30多个微前端应用聚合而成，包含1000多个页面，300多个导航菜单项。对用户来说，HR系统是一个单页应用，整个交互过程非常顺畅；对开发者同学来说，各个应用均可独立开发、独立测试、独立发布，大大提高了开发效率。\u003c/p\u003e\u003cp\u003e接下来，本文将为大家介绍“微前端构建类单页应用”在美团HR系统中的一些实践。同时也分享一些我们的思考和经验，希望能够对大家有所启发。\u003c/p\u003e\u003ch2 id=\"hr系统的微前端设计\"\u003eHR系统的微前端设计\u003c/h2\u003e\u003cp\u003e因为美团的HR系统所涉及项目比较多，目前由三个团队来负责。其中：OA团队负责考勤、合同、流程等功能，HR团队负责入职、转正、调岗、离职等功能，上海团队负责绩效、招聘等功能。这种团队和功能的划分模式，使得每个系统都是相对独立的，拥有独立的域名、独立的UI设计、独立的技术栈。但是，这样会带来开发团队之间职责划分不清、用户体验效果差等问题，所以就迫切需要把HR系统转变成只有一个域名和一套展示风格的系统。\u003c/p\u003e\u003cp\u003e为了满足公司业务发展的要求，我们做了一个HR的门户页面，把各个子系统的入口做了链接归拢。然而我们发现HR门户的意义非常小，用户跳转两次之后，又完全不知道跳到哪里去了。因此我们通过将HR系统整合为一个应用的方式，来解决以上问题。\u003c/p\u003e\u003cp\u003e一般而言，“类单页应用”的实现方式主要有两种：\u003c/p\u003e\u003col\u003e\u003cli\u003eiframe嵌入\u003c/li\u003e\u003cli\u003e微前端合并类单页应用\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e其中，iframe嵌入方式是比较容易实现的，但在实践的过程中带来了如下问题：\u003c/p\u003e\u003cul\u003e\u003cli\u003e子项目需要改造，需要提供一组不带导航的功能\u003c/li\u003e\u003cli\u003eiframe嵌入的显示区大小不容易控制，存在一定局限性\u003c/li\u003e\u003cli\u003eURL的记录完全无效，页面刷新不能够被记忆，刷新会返回首页\u003c/li\u003e\u003cli\u003eiframe功能之间的跳转是无效的\u003c/li\u003e\u003cli\u003eiframe的样式显示、兼容性等都具有局限性\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e考虑到这些问题，iframe嵌入并不能满足我们的业务诉求，所以我们开始用微前端的方式来搭建HR系统。\u003c/p\u003e\u003cp\u003e在这个微前端的方案里，有几个我们必须要解决的问题：\u003c/p\u003e\u003col\u003e\u003cli\u003e一个前端需要对应多个后端\u003c/li\u003e\u003cli\u003e提供一套应用注册机制，完成应用的无缝整合\u003c/li\u003e\u003cli\u003e构建时集成应用和应用独立发布部署\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e只有解决了以上问题，我们的集成才是有效且真正可落地的，接下来详细讲解一下这几个问题的实现思路。\u003c/p\u003e\u003ch3 id=\"一个前端对应多个后端\"\u003e一个前端对应多个后端\u003c/h3\u003e\u003cp\u003eHR系统最终线上运行的是一个单页应用，而项目开发中要求应用独立，因此我们新建了一个入口项目，用于整合各个应用。在我们的实践中，把这个项目叫做“Portal项目”或“主项目”，业务应用叫做“子项目”，整个项目结构图如下所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/282bc35c.png\" alt=\"项目结构图\"/\u003e\u003c/p\u003e\u003cp\u003e“Portal项目”是比较特殊的，在开发阶段是一个容器，不包含任何业务，除了提供“子项目”注册、合并功能外，还可以提供一些系统级公共支持，例如：\n* 用户登录机制\n* 菜单权限获取\n* 全局异常处理\n* 全局数据打点\u003c/p\u003e\u003cp\u003e“子项目”对外输出不需要入口HTML页面，只需要输出的资源文件即可，资源文件包括js、css、fonts和imgs等。\u003c/p\u003e\u003cp\u003eHR系统在线上运行了一个前端服务（Node Server），这个Server用于响应用户登录、鉴权、资源的请求。HR系统的数据请求并没有经过前端服务做透传，而是被Nginx转发到后端Server上，具体交互如下图所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/718c7e76.png\" alt=\"前后端分离图\"/\u003e\u003c/p\u003e\u003cp\u003e转发规则上限制数据请求格式必须是 \u003ccode\u003e系统名+Api做前缀\u003c/code\u003e 这样保障了各个系统之间的请求可以完全隔离。其中，Nginx的配置示例如下：\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eserver {\n    listen          80;\n    server_name     xxx.xx.com;\n\n    location  /project/api/ {\n        set $upstream_name \u0026#34;server.project\u0026#34;;\n        proxy_pass  http://$upstream_name;\n    }\n    ...\n\n    location  / {\n        set $upstream_name \u0026#34;web.portal\u0026#34;;\n        proxy_pass  http://$upstream_name;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们将用户的统一登录和认证问题交给了SSO，所有的项目的后端Server都要接入SSO校验登录状态，从而保障业务系统间用户安全认证的一致性。\u003c/p\u003e\u003cp\u003e在项目结构确定以后，应用如何进行合并呢？因此，我们开始制定了一套应用注册机制。\u003c/p\u003e\u003ch3 id=\"应用注册机制\"\u003e应用注册机制\u003c/h3\u003e\u003cp\u003e“Portal项目”提供注册的接口，“子项目”进行注册，最终聚合成一个单页应用。在整套机制中，比较核心的部分是路由注册机制，“子项目”的路由应该由自己控制，而整个系统的导航是“Portal项目”提供的。\u003c/p\u003e\u003ch3 id=\"路由注册\"\u003e路由注册\u003c/h3\u003e\u003cp\u003e路由的控制由三部分组成：权限菜单树、导航和路由树，“Portal项目”中封装一个组件App，根据菜单树和路由树生成整个页面。路由挂载到DOM树上的代码如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003elet Router = \u0026lt;Router\n            fetchMenu = {fetchMenuHandle}\n            routes = {routes}\n            app = {App}\n            history = {history}\n            \u0026gt;\nReactDOM.render(Router,document.querySelector(\u0026#34;#app\u0026#34;));\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRouter是在react-router的基础上做了一层封装，通过menu和routes最后生成一个如下所示的路由树：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e  \u0026lt;Router\u0026gt;\n    \u0026lt;Route path=\u0026#34;/\u0026#34; component={App}\u0026gt;\n      \u0026lt;Route path=\u0026#34;/namespace/xx\u0026#34; component={About} /\u0026gt;\n      \u0026lt;Route path=\u0026#34;inbox\u0026#34; component={Inbox}\u0026gt;\n        \u0026lt;Route path=\u0026#34;messages/:id\u0026#34; component={Message} /\u0026gt;\n      \u0026lt;/Route\u0026gt;\n    \u0026lt;/Route\u0026gt;\n  \u0026lt;/Router\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e具体注册使用了全局的\u003ccode\u003ewindow.app.routes\u003c/code\u003e，“Portal项目”从\u003ccode\u003ewindow.app.routes\u003c/code\u003e获取路由，“子项目”把自己需要注册的路由添加到\u003ccode\u003ewindow.app.routes\u003c/code\u003e中，子项目的注册如下:\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003elet app = window.app = window.app || {}; \napp.routes = (app.routes || []).concat([\n{\n  code:\u0026#39;attendance-record\u0026#39;,\t\n  path: \u0026#39;/attendance-record\u0026#39;,\n  component: wrapper(() =\u0026gt; async(require(\u0026#39;./nodes/attendance-record\u0026#39;), \u0026#39;kaoqin\u0026#39;)),\n}]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e路由合并的同时也把具体的功能做了引用关联，再到构建时就可以把所有的功能与路由管理起来。项目的作用域要怎么控制呢？我们要求“子项目”间是彼此隔离，要避免样式污染，要做独立的数据流管理，我们用项目作用域的方式来解决这些问题。\u003c/p\u003e\u003ch4 id=\"项目作用域控制\"\u003e项目作用域控制\u003c/h4\u003e\u003cp\u003e在路由控制的时候我们提到了 \u003ccode\u003ewindow.app\u003c/code\u003e，我们也是通过这个全局App来做项目作用域的控制。\u003ccode\u003ewindow.app\u003c/code\u003e包含了如下几部分：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003elet app = window.app || {};\napp = {\n    require:function(request){...},\n    define:function(name,context,index){...},\n    routes:[...],\n    init:function(namespace,reducers){...}       \n};\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewindow.app主要功能：\u003c/p\u003e\u003cul\u003e\u003cli\u003edefine 定义项目的公共库，主要用来解决JS公共库的管理问题\u003c/li\u003e\u003cli\u003erequire 引用自己的定义的基础库，配合define来使用\u003c/li\u003e\u003cli\u003eroutes 用于存放全局的路由，子项目路由添加到window.app.routes，用于完成路由的注册\u003c/li\u003e\u003cli\u003einit 注册入口，为子项目添加上namesapce标识，注册上子项目管理数据流的reducers\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e子项目完整的注册，如下所示：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003eimport reducers from \u0026#39;./redux/kaoqin-reducer\u0026#39;;\nlet app = window.app = window.app || {}; \napp.routes = (app.routes || []).concat([\n{\n  code:\u0026#39;attendance-record\u0026#39;,\t\n  path: \u0026#39;/attendance-record\u0026#39;,\n  component: wrapper(() =\u0026gt; async(require(\u0026#39;./nodes/attendance-record\u0026#39;), \u0026#39;kaoqin\u0026#39;)),\n  // ... 其他路由\n}]);\n \nfunction wrapper(loadComponent) {\n  let React = null;\n  let Component = null;\n  let Wrapped = props =\u0026gt; (\n    \u0026lt;div className=\u0026#34;namespace-kaoqin\u0026#34;\u0026gt;\n      \u0026lt;Component {...props} /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n  return async () =\u0026gt; {\n    await window.app.init(\u0026#39;namespace-kaoqin\u0026#39;,reducers);\n    React = require(\u0026#39;react\u0026#39;);\n    Component = await loadComponent();\n    return Wrapped;\n  };\n}\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e其中做了这几件事情：\u003c/p\u003e\u003col\u003e\u003cli\u003e把路由添加到window.app中\u003c/li\u003e\u003cli\u003e业务第一次功能被调用的时候执行 \u003ccode\u003ewindow.app.init(namespace,reducers)\u003c/code\u003e，注册项目作用域和数据流的reducers\u003c/li\u003e\u003cli\u003e对业务功能的挂载节点包装一个根节点：\u003ccode\u003eComponent\u003c/code\u003e挂载在\u003ccode\u003eclassName\u003c/code\u003e为\u003ccode\u003enamespace-kaoqin\u003c/code\u003e的\u003ccode\u003ediv\u003c/code\u003e下面\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e这样就完成了“子项目”的注册，“子项目”的对外输出是一个入口文件和一系列的资源文件，这些文件由webpack构建生成。\u003c/p\u003e\u003cp\u003eCSS作用域方面，使用webpack在构建阶段为业务的所有CSS都加上自己的作用域，构建配置如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e//webpack打包部分，在postcss插件中 添加namespace的控制\nconfig.postcss.push(postcss.plugin(\u0026#39;namespace\u0026#39;, () =\u0026gt; css =\u0026gt;\n  css.walkRules(rule =\u0026gt; {\n    if (rule.parent \u0026amp;\u0026amp; rule.parent.type === \u0026#39;atrule\u0026#39; \u0026amp;\u0026amp; rule.parent.name !== \u0026#39;media\u0026#39;) return;\n    rule.selectors = rule.selectors.map(s =\u0026gt; `.namespace-kaoqin ${s === \u0026#39;body\u0026#39; ? \u0026#39;\u0026#39; : s}`);\n  })\n));\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCSS处理用到postcss-loader，postcss-loader用到postcss，我们添加postcss的处理插件，为每一个CSS选择器都添加名为\u003ccode\u003e.namespace-kaoqin\u003c/code\u003e的根选择器，最后打包出来的CSS，如下所示：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-css\"\u003e.namespace-kaoqin .attendance-record {\n    height: 100%;\n    position: relative\n}\n\n.namespace-kaoqin .attendance-record .attendance-record-content {\n    font-size: 14px;\n    height: 100%;\n    overflow: auto;\n    padding: 0 20px\n}\n... \n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eCSS样式问题解决之后，接下来看一下，Portal提供的init做了哪些工作。\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003elet inited = false;\nlet ModalContainer = null;\napp.init = async function (namespace,reducers) {\n  if (!inited) {\n    inited = true;\n    let block = await new Promise(resolve =\u0026gt; {\n      require.ensure([], function (require) {\n        app.define(\u0026#39;block\u0026#39;, require.context(\u0026#39;block\u0026#39;, true, /^\\.\\/(?!dev)([^\\/]|\\/(?!demo))+\\.jsx?$/));\n        resolve(require(\u0026#39;block\u0026#39;));\n      }, \u0026#39;common\u0026#39;);\n    });\n    ModalContainer = document.createElement(\u0026#39;div\u0026#39;);\n    document.body.appendChild(mtfv3ModalContainer);\n    let { Modal} = block;\n    Modal.getContainer = () =\u0026gt; ModalContainer;\n  }\n  ModalContainer.setAttribute(\u0026#39;class\u0026#39;, `${namespace}`);\n  mountReducers(namepace,reducers)\n};\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003einit方法主要做了两件事情：\u003c/p\u003e\u003col\u003e\u003cli\u003e挂载“子项目”的reducers，把“子项目”的数据流挂载了redux上\u003c/li\u003e\u003cli\u003e“子项目”的弹出窗全部挂载在一个全局的div上，并为这个div添加对应的项目作用域，配合“子项目”构建的CSS，确保弹出框样式正确\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e上述代码中还看到了\u003ccode\u003eapp.define\u003c/code\u003e的用法，它主要是用来处理JS公共库的控制，例如我们用到的组件库Block，期望每个“子项目”的版本都是统一的。因此我们需要解决JS公共库版本统一的问题。\u003c/p\u003e\u003ch4 id=\"js公共库版本统一\"\u003eJS公共库版本统一\u003c/h4\u003e\u003cp\u003e为了不侵入“子项目”，我们采用构建过程中替换的方式来做，“Portal项目”把公共库引入进来，重新定义，然后通过\u003ccode\u003ewindow.app.require\u003c/code\u003e的方式引用，在编译“子项目”的时候，把引用公共库的代码从\u003ccode\u003erequire(\u0026#39;react\u0026#39;)\u003c/code\u003e全部替换为\u003ccode\u003ewindow.app.require(\u0026#39;react\u0026#39;)\u003c/code\u003e，这样就可以将JS公共库的版本都交给“Portal项目”来控制了。\u003c/p\u003e\u003cp\u003edefine 的代码和示例如下：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e/**\n* 重新定义包\n* @param name  引用的包名，例如 react\n* @param context 资源引用器 实际上是 webpackContext（是一个方法，来引用资源文件）\n* @param index 定义的包的入口文件\n*/\napp.define = function (name, context, index) {\n  let keys = context.keys();\n  for (let key of keys) {\n    let parts = (name + key.slice(1)).split(\u0026#39;/\u0026#39;);\n    let dir = this.modules;\n    for (let i = 0; i \u0026lt; parts.length - 1; i++) {\n      let part = parts[i];\n      if (!dir.hasOwnProperty(part)) {\n        dir[part] = {};\n      }\n      dir = dir[part];\n    }\n    dir[parts[parts.length - 1]] = context.bind(context, key);\n  }\n  if (index != null) {\n    this.modules[name][\u0026#39;index.js\u0026#39;] = this.modules[name][index];\n  }\n};\n//定义app的react \n//定义一个react资源库：把原来react根目录和lib目录下的.js全部获取到，绑定到新定义的react中，并指定react.js作为入口文件\napp.define(\u0026#39;react\u0026#39;, require.context(\u0026#39;react\u0026#39;, true, /^.\\/(lib\\/)?[^\\/]+\\.js$/), \u0026#39;react.js\u0026#39;);\napp.define(\u0026#39;react-dom\u0026#39;, require.context(\u0026#39;react-dom\u0026#39;, true, /^.\\/index\\.js$/));\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e“子项目”的构建，使用webpack的externals（外部扩展）来对引用进行替换：\u003c/p\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e/**\n * 对一些公共包的引用做处理 通过webpack的externals（外部扩展）来解决\n */\nconst libs = [\u0026#39;react\u0026#39;, \u0026#39;react-dom\u0026#39;, \u0026#34;block\u0026#34;];\n\nmodule.exports = function (context, request, callback) {\n    if (libs.indexOf(request.split(\u0026#39;/\u0026#39;, 1)[0]) !== -1) {\n        //如果文件的require路径中包含libs中的 替换为 window.app.require(\u0026#39;${request}\u0026#39;); \n        //var在这儿是声明的意思 \n        callback(null, `var window.app.require(\u0026#39;${request}\u0026#39;)`);\n    } else {\n        callback();\n    }\n};\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样项目的注册就完成了，还有一些需要“子项目”自己改造的地方，例如本地启动需要把“Portal项目”的导航加载进来，需要做mock数据等等。\u003c/p\u003e\u003cp\u003e项目的注册完成了，我们如何发布部署呢？\u003c/p\u003e\u003ch3 id=\"构建后集成和独立部署\"\u003e构建后集成和独立部署\u003c/h3\u003e\u003cp\u003e在HR系统的整合过程中，开发阶段对“子项目”是“零侵入”，而在发布阶段，我们也希望如此。\u003c/p\u003e\u003cp\u003e我们的部署过程，大概如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/d25a43b1.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e第一步：在发布机上，获取代码、安装依赖、执行构建；\n第二步：把构建的结果上传到服务器；\n第三步：在服务器执行 \u003ccode\u003enode index.js\u003c/code\u003e 把服务启动起来。\u003c/p\u003e\u003cp\u003e“Portal项目”构建之后的文件结构如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/6ea75191.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e“子项目”构建后的文件结构如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/da4b8cb3.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e线上运行的文件结构如下：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/ca42beb3.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e把“子项目”的构建文件上传到服务器对应的“子项目”文件目录下，然后对“子项目”的资源文件进行集成合并，生成.dist目录中的文件，提供给用户线上访问使用。\u003c/p\u003e\u003cp\u003e每次发布，我们主要做以下三件事情：\u003c/p\u003e\u003col\u003e\u003cli\u003e发布最新的静态资源文件\u003c/li\u003e\u003cli\u003e重新生成entry-xx.js和index.html（更新入口引用）\u003c/li\u003e\u003cli\u003e重启前端服务\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e如果是纯静态服务，完全可以做到热部署，动态更新一下引用关系即可，不需要重启服务。因为我们在Node服务层做了一些公共服务，所以选择了重启服务，我们使用了公司的基础服务和PM2来实现热启动。\u003c/p\u003e\u003cp\u003e对于历史文件，我们需要做版本控制，以保障之前的访问能够正常运行。此外，为了保证服务的高可用性，我们上线了4台机器，分别在两个机房进行部署，最终来提高HR系统的容错性。\u003c/p\u003e\u003ch2 id=\"总结\"\u003e总结\u003c/h2\u003e\u003cp\u003e以上就是我们使用React技术栈和微前端方式搭建的“类单页应用”HR业务系统，回顾一下这个技术方案，整个框架流程如下图所示：\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/50997ffb.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e在产品层面上，“微前端类单页应用”打破了独立项目的概念，我们可以根据用户的需求自由组装我们的页面应用，例如：我们可以在HR门户上把考勤、请假、OA审批、财务报销等高频功能放在一起。甚至可以让用户自己定制功能，让用户真的感受到我们是一个系统。\u003c/p\u003e\u003cp\u003e“微前端构建类单页应用”方案是基于React技术栈开发，如果把路由管理机制和注册机制抽离出来作为一个公共的库，就可以在webpack的基础上封装成一个业务无关性的通用方案，而且使用起来非常的友好。\u003c/p\u003e\u003cp\u003e截止目前，HR系统已经稳定运行了1年多的时间，我们总结了以下三个优点：\u003c/p\u003e\u003col\u003e\u003cli\u003e单页应用的体验比较好，按需加载，交互流畅\u003c/li\u003e\u003cli\u003e项目微前端化，业务解耦，稳定性有保障，项目的粒度易控制\u003c/li\u003e\u003cli\u003e项目的健壮性比较好，项目注册仅仅增加了入口文件的大小，30多个项目目前只有12K\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"作者简介\"\u003e作者简介\u003c/h2\u003e\u003cul\u003e\u003cli\u003e贾召，2014年加入美团，先后主导了OA、HR、财务等企业项目的前端搭建，自主研发React组件库Block，在Block的基础上统一了整个企业平台的前端技术栈，致力于提高研发团队的工作效率。\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "Date": "2018-09-06T00:00:00Z",
  "Author": "soulteary@gmail.com"
}