{
  "Source": "www.evilsocket.net",
  "Title": "Nike+ FuelBand SE BLE Protocol Reversed",
  "Link": "https://www.evilsocket.net/2015/01/29/Nike-FuelBand-SE-BLE-Protocol-Reversed/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eDuring the last two weeks I had fun playing with the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Bluetooth_low_energy\"\u003eBLE\u003c/a\u003e protocol of the \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.nike.com/us/en_us/c/nikeplus-fuelband\"\u003eNike+ FuelBand SE\u003c/a\u003e, a device to track daily steps, calories, time, etc.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/Jan/nikeband.jpg\" alt=\"nikeband\"/\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003cp\u003eI’ve completely reversed its protocol and found out the following key points:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThe authentication system is vulnerable\u003c/strong\u003e, anyone could connect to your device.\u003c/li\u003e\n\u003cli\u003eThe protocol supports \u003cstrong\u003edirect reading and writing of the device memory\u003c/strong\u003e, up to 65K of contents.\u003c/li\u003e\n\u003cli\u003eThe protocol supports commands that are not supposed to be implemented in a production release ( \u003cstrong\u003ebootloader mode\u003c/strong\u003e, device self test, etc ).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI’ve published a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/nikeplus-fuelband-se-reversed\"\u003eproof of concept Android application on github\u003c/a\u003e, don’t expect it to be production ready code of course, but it works :)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/Jan/Schermata-2015-01-29-alle-20-53-25.png\" alt=\"poc logcat\"/\u003e\u003c/p\u003e\n\u003ch1 id=\"Why\"\u003e\u003ca href=\"#Why\" class=\"headerlink\" title=\"Why?\"\u003e\u003c/a\u003eWhy?\u003c/h1\u003e\u003cp\u003eBecause! I had fun reversing it, I hate closed source hardware protocols, and as long as I know I’m the first one to actually manage to do it, despite \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://hacknikefuelband.com/\"\u003emany are trying\u003c/a\u003e since the first version with no luck. \u003c/p\u003e\n\u003cp\u003eKudos to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/tompohl\"\u003eTom Pohl\u003c/a\u003e for being the first one to \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://tompohl.com/2012/05/16/hacking-the-nike-fuelband/\"\u003ereverse and somehow hack\u003c/a\u003e the HTTP API of the FuelBand and to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/qDot\"\u003eKyle Machulis\u003c/a\u003e for his reversing of the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/qdot/libfuelband\"\u003eFB USB protocol\u003c/a\u003e. You rock guys!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThe question is never why, the question is always **how**.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/Jan/gatto_guerra.jpg\" alt=\"fucku\"/\u003e\u003c/p\u003e\n\u003ch1 id=\"BLE\"\u003e\u003ca href=\"#BLE\" class=\"headerlink\" title=\"BLE\"\u003e\u003c/a\u003eBLE\u003c/h1\u003e\u003cpre\u003e\u003ccode\u003eThe **B**luetooth **L**ow **E**nergy is a wireless personal area network technology\ndesigned and marketed by the Bluetooth Special Interest Group aimed at novel applications\nin the healthcare, fitness, beacons, **security** ( LOL, more on this later ), and home\nentertainment industries. Compared to Classic Bluetooth, Bluetooth Smart is intended to\nprovide considerably reduced power consumption and cost while maintaining a similar\ncommunication range.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBasically it’s something that works on the bluetooth frequencies, but has very little in common to the classic bluetooth, mostly because the device protocol must be implemented by each vendor since there isn’t really a standard (yet?). \u003c/p\u003e\n\u003cp\u003eEach device has its \u003cstrong\u003echaracteristics\u003c/strong\u003e which basically are read/write channels (thing about them as sockets), while the writing method is only one, there are two modes of reading data, either you perform an active reading or you wait for the \u003ccode\u003eonCharacteristicChanged\u003c/code\u003e event and get the available data from the read channel.\u003c/p\u003e\n\u003cp\u003eThe annoying part of this technology is \u003cstrong\u003esynchronization\u003c/strong\u003e, since read and write operations can not be performed simultaneously, instead each one needs the previous operation to be completed before being scheduled … \u003cstrong\u003eevent programming\u003c/strong\u003e dudes!\u003c/p\u003e\n\u003cp\u003eThat’s why you will find an event queue and a lot of sinchronization code in my PoC, not my fault :P\u003c/p\u003e\n\u003ch1 id=\"How\"\u003e\u003ca href=\"#How\" class=\"headerlink\" title=\"How\"\u003e\u003c/a\u003eHow\u003c/h1\u003e\u003cp\u003eFortunately there’s a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://play.google.com/store/apps/details?id=com.nike.fb\"\u003eNike official Android application\u003c/a\u003e that I managed to reverse, since I don’t (actually \u003cstrong\u003edidn’t\u003c/strong\u003e, more on this later ) know smali, I used the lame method of converting the APK to a JAR package using the great \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://code.google.com/p/dex2jar/\"\u003edex2jar\u003c/a\u003e tool and then \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://jd.benow.ca/\"\u003eJD-Gui\u003c/a\u003e to easily read the Java source code.\u003c/p\u003e\n\u003cp\u003eFirst thing first, the device is detected and recognized by its \u003cstrong\u003eCOMPANYCODE\u003c/strong\u003e in the advertisment data ( \u003ccode\u003ebyte[] NIKE_COMPANY_CODE = { 0, 120 }\u003c/code\u003e ), then a \u003cstrong\u003eGATT\u003c/strong\u003e service discovery is launched.\u003c/p\u003e\n\u003cp\u003eThe main command service UUID is \u003ccode\u003e83cdc410-31dd-11e2-81c1-0800200c9a66\u003c/code\u003e and it has two characteristics:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCommand Channel (where you write commands) : \u003ccode\u003ec7d25540-31dd-11e2-81c1-0800200c9a66\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eResponse Channel (where you wait for responses) : \u003ccode\u003ed36f33f0-31dd-11e2-81c1-0800200c9a66\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce the client device attaches to these two channels, it enables notifications on the response one and the authentication procedure starts.\u003c/p\u003e\n\u003ch1 id=\"How-the-Authentication-Procedure-Theoretically-Works\"\u003e\u003ca href=\"#How-the-Authentication-Procedure-Theoretically-Works\" class=\"headerlink\" title=\"How the Authentication Procedure Theoretically Works\"\u003e\u003c/a\u003eHow the Authentication Procedure Theoretically Works\u003c/h1\u003e\u003cp\u003eI’m saying \u003cstrong\u003etheoretically\u003c/strong\u003e because that’s what some parts of the application suggest it \u003cstrong\u003eshould\u003c/strong\u003e work, but actually I’ve found out that most of the authentication code is bypassed and some pretty funny constants are used :)\u003c/p\u003e\n\u003cp\u003eEverything starts with a \u003cstrong\u003ePIN\u003c/strong\u003e, a string that “someone” will send you (probably the Nike web api) during the first login/setup with the device, this string is stored inside the XML file \u003ccode\u003e/data/data/com.nike.fb/shared_prefs/profilePreferences.xml\u003c/code\u003e, in my case its node is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n\u0026lt;string name=\u0026#34;pin\u0026#34;\u0026gt;69AB8DA2-F7D6-497C-869D-493CCF8FE8BC\u0026lt;/string\u0026gt;\n...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe pin is then hashed with the \u003cstrong\u003eMD5\u003c/strong\u003e function and the first 6 bytes of the resulting hash are converted to hexadecimal, those 6 bytes will become the \u003cstrong\u003ediscovery_token\u003c/strong\u003e stored in the same file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n\u0026lt;string name=\u0026#34;discovery_token\u0026#34;\u0026gt;5E5E6F7A7FE2\u0026lt;/string\u0026gt;\n...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery time the app finds the device and wants to connect with it, it sends the following \u003cstrong\u003eSTART AUTHENTICATION\u003c/strong\u003e command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e0x90 0x0101 0x00 0x00 0x00 ....\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e0x90\u003c/strong\u003e indicates that’s a \u003cstrong\u003eSESSION\u003c/strong\u003e command and its bits contains the sequence number, number of total packets in the transaction and packet index ( \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/nikeplus-fuelband-se-reversed/blob/master/src/com/evilsocket/blehacks/Packet.java\"\u003ethis\u003c/a\u003e is the encoder ).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e0x0101\u003c/strong\u003e are the bytes indicating the \u003cstrong\u003eSTART AUTH\u003c/strong\u003e command and all the \u003cstrong\u003e0x00\u003c/strong\u003e are zero bytes padding up to 19 bytes.\u003c/p\u003e\n\u003cp\u003eOnce the app sends this packet, the device replies with a \u003cstrong\u003echallenge response\u003c/strong\u003e containing a 16 bytes long \u003cstrong\u003enonce\u003c/strong\u003e buffer.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e0xC0 0x11 0x41 0xF495C98693075322225EB8B8A4D79B39\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e0xC0\u003c/strong\u003e Reply opcode ( SESSION protocol, 0 following packets, packet index 0, sequence number 4 ).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x11\u003c/strong\u003e Following data size ( 16 of the nonce + 1 of 0x41 ).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x41\u003c/strong\u003e Auth opcode \u003cstrong\u003eOPCODE_AUTH_CHALLENGE\u003c/strong\u003e ( namely: “Hey dude, I’m sending you the \u003cstrong\u003enonce\u003c/strong\u003e! )\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0xF495C98693075322225EB8B8A4D79B39\u003c/strong\u003e : The \u003cstrong\u003enonce\u003c/strong\u003e itself.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo succesfully authenticate to the device, you need to take this \u003cstrong\u003enonce\u003c/strong\u003e, the previously discussed \u003cstrong\u003ediscovery_token\u003c/strong\u003e, get a \u003cstrong\u003eCRC32\u003c/strong\u003e of them, truncate it to two bytes and send it back to the device, so the resulting packet would be something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e0xB0 0x0302 XX XX 0x00 0x00 ........\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e0xB0\u003c/strong\u003e : SESSION protocol, 0 following packets, packet index 0, sequence number 5.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x0302\u003c/strong\u003e : Authentication request opcode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eXX XX\u003c/strong\u003e : The two bytes of the truncated CRC32.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x00 …\u003c/strong\u003e : Zero padding up to 19 bytes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSounds quite simple yet robust doesn’t it? Since you need both the \u003cstrong\u003epin\u003c/strong\u003e ( which is probably linked to the user account ) and the \u003cstrong\u003enonce\u003c/strong\u003e sent by the device, there’s no way you can remotely connect to a FuelBand unless you have physical access to the owner device or you have hacked his account and used it on your device to force the web api to send you back his pin.\u003c/p\u003e\n\u003cp\u003eRight? ….. \u003cstrong\u003eWRONG\u003c/strong\u003e ! :D\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Besides what I’m about to write, the device is broadcasting the user discovery_token within its \u003cstrong\u003eadvertisment data\u003c/strong\u003e ( the \u003cstrong\u003eMANUDATA\u003c/strong\u003e field ), so you could sniff it anyway … LOL!\u003c/p\u003e\n\u003cp\u003eI’ve been stucked a couple of days on this … I implemented everything in the right way, I was using my own \u003cstrong\u003ediscovery_token\u003c/strong\u003e, succesfully initiated the connection to the device and got the \u003cstrong\u003enonce\u003c/strong\u003e, CRC32’ed them together … and then I got an \u003cstrong\u003eInvalidParameterException\u003c/strong\u003e from the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/nikeplus-fuelband-se-reversed/blob/master/src/com/evilsocket/blehacks/CopperheadCRC32.java#L42\"\u003eclass which was computing the CRC32 checksum\u003c/a\u003e ( that I copied from the JD-GUI decompilation ) with the message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eLength of data must be a multiple of 4\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eWTF DUDE?!\u003c/strong\u003e How could the discovery_token, which is only 6 bytes long, have a size which is divisible by 4?!\u003cbr/\u003eSo I tried to truncate it to 4 bytes, pad it, hash it … you say it!\u003cbr/\u003eNothing was working.\u003c/p\u003e\n\u003cp\u003eSo I decided that it was the time for me to learn to read and write in \u003cstrong\u003eSmali\u003c/strong\u003e ( took me a couple of hours, quite simple actually ).\u003c/p\u003e\n\u003cp\u003eI decompiled the APK again, this time using \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://code.google.com/p/android-apktool/\"\u003eapktool\u003c/a\u003e to get the smali code, injected some code of mine to make the application log the actual token it was using, recompiled it with apktool, signed it with \u003cstrong\u003esignapk\u003c/strong\u003e and reinstalled to my device.\u003c/p\u003e\n\u003cp\u003eI’ve modified the class \u003ccode\u003ecom.nike.nikerf.protocol.impl.CopperheadAuthenticationHandler\u003c/code\u003e, adding the \u003cstrong\u003eSmali\u003c/strong\u003e code to log the token to its method \u003ccode\u003ecalculateChallengeResponse\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOriginal\u003c/strong\u003e ( Java version )\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e[] mAuthToken;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eshort\u003c/span\u003e \u003cspan class=\"title\"\u003ecalculateChallengeResponse\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e[] nonce)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    CopperheadCRC32 crc32 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e CopperheadCRC32();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    crc32.update(nonce);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    crc32.update(\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.mAuthToken);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"keyword\"\u003eshort\u003c/span\u003e)(\u003cspan class=\"number\"\u003e0xFFFF\u003c/span\u003e \u0026amp; crc32.getValue() ^ \u003cspan class=\"number\"\u003e0xFFFF\u003c/span\u003e \u0026amp; crc32.getValue() \u0026gt;\u0026gt;\u0026gt; \u003cspan class=\"number\"\u003e16\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003cstrong\u003ePatched\u003c/strong\u003e ( Java version )\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e[] mAuthToken;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eshort\u003c/span\u003e \u003cspan class=\"title\"\u003ecalculateChallengeResponse\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e[] nonce)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    CopperheadCRC32 crc32 = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e CopperheadCRC32();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    crc32.update(nonce);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    crc32.update(\u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.mAuthToken);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e( \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.mAuthToken.length; ++i ){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        android.util.Log.w( \u003cspan class=\"string\"\u003e\u0026#34;HACK\u0026#34;\u003c/span\u003e, \u003cspan class=\"string\"\u003e\u0026#34;AUTH_TOKEN[\u0026#34;\u003c/span\u003e + i + \u003cspan class=\"string\"\u003e\u0026#34;] = \u0026#34;\u003c/span\u003e + String.format(\u003cspan class=\"string\"\u003e\u0026#34;%02X \u0026#34;\u003c/span\u003e, \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e.mAuthToken[i] ) );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"keyword\"\u003eshort\u003c/span\u003e)(\u003cspan class=\"number\"\u003e0xFFFF\u003c/span\u003e \u0026amp; crc32.getValue() ^ \u003cspan class=\"number\"\u003e0xFFFF\u003c/span\u003e \u0026amp; crc32.getValue() \u0026gt;\u0026gt;\u0026gt; \u003cspan class=\"number\"\u003e16\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eGuess what?\u003c/p\u003e\n\u003ch1 id=\"How-the-Authentication-Procedure-Really-Works\"\u003e\u003ca href=\"#How-the-Authentication-Procedure-Really-Works\" class=\"headerlink\" title=\"How the Authentication Procedure Really Works\"\u003e\u003c/a\u003eHow the Authentication Procedure Really Works\u003c/h1\u003e\u003cpre\u003e\u003ccode\u003eFuck it, who fucking cares about that token anyway? Let\u0026#39;s just use **0xff 0xff 0xff 0xff 0xff 0xff ....** !\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/Jan/major-facepalm.jpg\" alt=\"facepalm\"/\u003e\u003c/p\u003e\n\u003cp\u003eYeah … although the code is there and all the mechanism described in the previous section could be robust … they are just using a hard coded token of 0xff 0xff 0xff 0xff 0xff 0xff …. meaning that, anyonce who’s able to get the \u003cstrong\u003enonce\u003c/strong\u003e from the device ( so anyone with a BLE capable Android smarphone since the device itself it’s sending it ) will be able to authenticate against your device and send any command … let me facepalm again ….\u003c/p\u003e\n\u003cp\u003eSo basically here the code to create an authentication packet:\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eCopperheadCRC32 crc = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e CopperheadCRC32();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e[] auth_token = Utils.hexToBytes(\u003cspan class=\"string\"\u003e\u0026#34;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * Create the response packet: 0xb0 0x03 0x02 [2 BYTES OF CRC] 0x00 ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ePacket resp_packet = \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e Packet(\u003cspan class=\"number\"\u003e19\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresp_packet.setProtocolLayer( CommandResponseOperation.ProtocolLayer.SESSION );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresp_packet.setPacketCount(\u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresp_packet.setPacketIndex(\u003cspan class=\"number\"\u003e0\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresp_packet.setSequenceNumber( challenge_packet.getSequenceNumber() + \u003cspan class=\"number\"\u003e1\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eByteBuffer response = ByteBuffer.allocate(\u003cspan class=\"number\"\u003e18\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresponse.put( (\u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e)\u003cspan class=\"number\"\u003e0x03\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresponse.put( (\u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e)\u003cspan class=\"number\"\u003e0x02\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecrc.update(nonce);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecrc.update(auth_token);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eshort\u003c/span\u003e sum = (\u003cspan class=\"keyword\"\u003eshort\u003c/span\u003e)((\u003cspan class=\"number\"\u003e0xFFFF\u003c/span\u003e \u0026amp; crc.getValue()) ^ (\u003cspan class=\"number\"\u003e0xFFFF\u003c/span\u003e \u0026amp; crc.getValue() \u0026gt;\u0026gt;\u0026gt; \u003cspan class=\"number\"\u003e16\u003c/span\u003e));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresponse.putShort(sum);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eresp_packet.setPayload( response.array() );\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAnd finally the device will reply with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e0xE0 0x01 0x42 0x00000000000000000000000000000000\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e0xE0\u003c/strong\u003e: SESSION layer reply, bla bla bla.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x01\u003c/strong\u003e: 1 byte of reply.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x42\u003c/strong\u003e: Succesfully authenticated ( FUCK YEAH! )\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0x00..\u003c/strong\u003e: Padding.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"Sending-Commands\"\u003e\u003ca href=\"#Sending-Commands\" class=\"headerlink\" title=\"Sending Commands\"\u003e\u003c/a\u003eSending Commands\u003c/h1\u003e\u003cp\u003eOnce you’re succesfully authenticated, you can start sending command, each command has its own encoding standard, but the first three bytes are always:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eprotocol byte\u003c/strong\u003e: SESSION or COMMAND constants + some bit hacking to set sequence number etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003elength byte\u003c/strong\u003e: Size of the following data.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eopcode\u003c/strong\u003e : Code of the command:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEach command ( and its encode ) is implemented inside the class \u003ccode\u003ecom.nike.nikerf.protocol.impl.NikeProtocolCoder_Copperhead\u003c/code\u003e, for instance here’s the redacted implementation of \u003cstrong\u003eCmd_GenericMemoryBlock\u003c/strong\u003e ( yeah -.- ):\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003eabstract\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eCmd_GenericMemoryBlock\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e MAX_ADDRESS = \u003cspan class=\"number\"\u003e65536\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR1 = \u003cspan class=\"string\"\u003e\u0026#34;Request packet does not contain all required fields\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR2 = \u003cspan class=\"string\"\u003e\u0026#34;Request fields contain invalid values\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR3 = \u003cspan class=\"string\"\u003e\u0026#34;Transaction already in progress\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR4 = \u003cspan class=\"string\"\u003e\u0026#34;Request does not belong to a transaction\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR5 = \u003cspan class=\"string\"\u003e\u0026#34;Failed to open a transaction\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR6 = \u003cspan class=\"string\"\u003e\u0026#34;Failed to close a transaction\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e String MSG_ERR7 = \u003cspan class=\"string\"\u003e\u0026#34;I/O failed\u0026#34;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e SUBCMD_END_TRANSACTION = \u003cspan class=\"number\"\u003e3\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e SUBCMD_READ_CHUNK = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e SUBCMD_START_READ = \u003cspan class=\"number\"\u003e4\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e SUBCMD_START_WRITE = \u003cspan class=\"number\"\u003e2\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e SUBCMD_WRITE_CHUNK = \u003cspan class=\"number\"\u003e1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e NikeMessage \u003cspan class=\"title\"\u003edecode\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e NikeTransaction nikeTransaction)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ProtocolCoderException \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ... decode a response ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eencode\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e NikeTransaction nikeTransaction)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e ProtocolCoderException \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ... encode \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e command ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003ebyte\u003c/span\u003e \u003cspan class=\"title\"\u003egetOpCode\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eIn my proof of concept application you will find the code to create and send \u003cstrong\u003eCmd_Settings_Get\u003c/strong\u003e commands, retrieving some sample data such as \u003cstrong\u003eBAND_COLOR\u003c/strong\u003e, \u003cstrong\u003eFUEL\u003c/strong\u003e level, owner \u003cstrong\u003eFIRST_NAME\u003c/strong\u003e and device \u003cstrong\u003eSERIAL_NUMBER\u003c/strong\u003e.\u003c/p\u003e\n\u003ch1 id=\"Commands-Lists\"\u003e\u003ca href=\"#Commands-Lists\" class=\"headerlink\" title=\"Commands Lists\"\u003e\u003c/a\u003eCommands Lists\u003c/h1\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_BatteryState\u003c/strong\u003e: Retrieve battery state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Bootloader\u003c/strong\u003e: Set the device to bootloader mode ( basically it locks down the device, the official app won’t work either … only resetting it with the usb cable will unlock it ).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_DesktopData\u003c/strong\u003e: ???\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_EventLog\u003c/strong\u003e: Get device event log.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_GenericMemoryBlock\u003c/strong\u003e: Read or Write a memory address from 0 to 0xFFFF.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_MetricNotificationIntervalUpdate\u003c/strong\u003e: Set interval time to receive metrics update notifications.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Notification_Subscribe\u003c/strong\u003e: Subscribe to the notification of a specific metric.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_ProtocolVersion\u003c/strong\u003e: Get device protocol version.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_RTC\u003c/strong\u003e: Configure the device real time clock.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Reset\u003c/strong\u003e: Reset the device.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_ResetStatus\u003c/strong\u003e: Reset the user data.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_SampleStore\u003c/strong\u003e: Use the device memory to store a custom object (!!!).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_SampleStoreAsync\u003c/strong\u003e: Same, but async.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_SelfTest\u003c/strong\u003e: Perform a hardware self test and get the results.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Session_Ctrl\u003c/strong\u003e: Login/Logout/Ping\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Get\u003c/strong\u003e: Get a setting value by its code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Get_Activity_Stats\u003c/strong\u003e: Get user activity statistics.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Get_Boolean\u003c/strong\u003e: Get a boolean setting.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Get_Int\u003c/strong\u003e: Get an integer setting.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Get_MoveReminder\u003c/strong\u003e: Get a “move reminder” type setting.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Set\u003c/strong\u003e: Set the value of a setting by its code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Settings_Set_MoveReminder\u003c/strong\u003e: Set a “movie reminder” setting.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_UploadGraphic\u003c/strong\u003e: Upload a bitmap to show on the device led screen ( a subclass of Cmd_GenericMemoryBlock ).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_UploadGraphicsPack\u003c/strong\u003e: ???\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCmd_Version\u003c/strong\u003e: Get device firmware version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"Conclusions\"\u003e\u003ca href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"\u003e\u003c/a\u003eConclusions\u003c/h1\u003e\u003cp\u003eAltough the device does not contain sensitive data about the user, this is a good proof of concept on how a badly implemented BLE custom protocol could lead an attacker to compromise a device ( such as the \u003cstrong\u003eBLE proximity sensor of an alarm\u003c/strong\u003e :) ) without any kind of authentication or expensive hardware.\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2015-01-29T21:52:31Z",
  "Author": "Simone Margaritelli"
}