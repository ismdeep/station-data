{
  "Source": "www.evilsocket.net",
  "Title": "How to Create a Malware Detection System With Machine Learning",
  "Link": "https://www.evilsocket.net/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eIn this post we’ll talk about two topics I love and that have been central elements of my (private) research for the last ~7 years: machine learning and malware detection.\u003c/p\u003e\n\u003cp\u003eHaving a rather empirical and definitely non-academic education, I know the struggle of a passionate developer who wants to approach machine learning and is trying to make sense of formal definitions, linear algebra and whatnot. Therefore, I’ll try to keep this as practical as possible in order to allow even the less \u003cem\u003eformally-educated\u003c/em\u003e reader to understand and possibly start having fun with neural networks. \u003c/p\u003e\n\u003cp\u003eMoreover, most of the resources out there focus on very known problems such as handwritten digit recognition on the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/MNIST_database\"\u003eMNIST dataset\u003c/a\u003e (the “hello world” of machine learning), while leaving to the reader’s imagination how more complex features engineering systems are supposed to work and generally what to do with inputs that are not images.\u003c/p\u003e\n\u003cp\u003eTL;DR: \u003cem\u003eI’m bad at math, MNIST is boring and detecting malware is more fun :D\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI’ll also use this as an example use-case for some new features of \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/ergo\"\u003eergo\u003c/a\u003e, a project me and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/chiconara\"\u003echiconara\u003c/a\u003e started some time ago to automate machine learning models creation, data encoding, training on GPU, benchmarking and deployment at scale.\u003c/p\u003e\n\u003cp\u003eThe source code related to this post is available \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/ergo-pe-av\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant note: this project alone does NOT constitute a valid replacement for your commercial antivirus.\u003c/strong\u003e\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/cBCBdlH.png\"/\u003e\n\u003c/center\u003e\n\u003ch3 id=\"Problem-Definition-and-Dataset\"\u003e\u003ca href=\"#Problem-Definition-and-Dataset\" class=\"headerlink\" title=\"Problem Definition and Dataset\"\u003e\u003c/a\u003eProblem Definition and Dataset\u003c/h3\u003e\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/2JphgOS.jpg\"/\u003e\n\u003c/center\u003e\n\u003cp\u003eTraditional malware detection engines rely on the use of signatures - unique values that have been manually selected by a malware researcher to identify the presence of malicious code while making sure there are no collisions in the non-malicious samples group (that’d be called a \u003cem\u003e“false positive”\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003eThe problems with this approach are several, among others it’s usually easy to bypass (depending on the type of signature, the change of a single bit or just a few bytes in the malicious code could make the malware undetectable) and it doesn’t scale very well when the number of researchers is orders of magnitude smaller than the number of unique malware families they need to manually reverse engineer, identify and write signatures for.\u003c/p\u003e\n\u003cp\u003eOur goal is teaching a computer, more specifically an artificial neural network, to detect Windows malware without relying on any explicit signatures database that we’d need to create, but by simply ingesting the dataset of malicious files we want to be able to detect and learning from it to distinguish between malicious code or not, both inside the dataset itself but, most importantly, while processing new, unseen samples. Our only knowledge is which of those files are malicious and which are not, but not what specifically makes them so, we’ll let the ANN do the rest.\u003c/p\u003e\n\u003cp\u003eIn order to do this, I’ve collected approximately 200,000 \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Portable_Executable\"\u003eWindows PE\u003c/a\u003e samples, divided evenly in malicious (\u003cem\u003ewith 10+ detections on VirusTotal\u003c/em\u003e) and clean (\u003cem\u003eknown and with 0 detections on VirusTotal\u003c/em\u003e). Since training and testing the model on the very same dataset wouldn’t make much sense (as it could perform extremely well on the training set, but not being able to generalize at all on new samples), this dataset will be automatically divided by ergo into 3 sub sets:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cem\u003etraining set\u003c/em\u003e, with 70% of the samples, used for training.\u003c/li\u003e\n\u003cli\u003eA \u003cem\u003evalidation set\u003c/em\u003e, with 15% of the samples, used to benchmark the model at each training epoch.\u003c/li\u003e\n\u003cli\u003eA \u003cem\u003etest set\u003c/em\u003e, with 15% of the samples, used to benchmark the model after training.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNeedless to say, the amount of (correctly labeled) samples in your dataset is key for the model accuracy, its ability to correcly separate the two classes and generalize to unseen samples - the more you’ll use in your training process, the better. Besides, ideally the dataset should be periodically updated with newer samples and the model retrained in order to keep its accuracy high over time even when new unique samples appear in the wild (namely: wget + crontab + ergo).\u003c/p\u003e\n\u003cp\u003eDue to the size of the specific dataset I’ve used for this post, I can’t share it without killing my bandwidth:\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/kEsLLOP.jpg\"/\u003e\n\u003c/center\u003e\n\u003cp\u003eHowever, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://drive.google.com/file/d/1HIJShr0GvQCUp_0R_kQe_WLG5PippurN/view?usp=sharing\"\u003eI uploaded the dataset.csv file on Google Drive\u003c/a\u003e, it’s ~340MB extracted and you can use it to reproduce the results of this post.\u003c/p\u003e\n\u003ch3 id=\"The-Portable-Executable-format\"\u003e\u003ca href=\"#The-Portable-Executable-format\" class=\"headerlink\" title=\"The Portable Executable format\"\u003e\u003c/a\u003eThe Portable Executable format\u003c/h3\u003e\u003cp\u003eThe Windows PE format is \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format\"\u003eabundantly documented\u003c/a\u003e and many good resources to understand the internals, such as \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/angealbertini\"\u003eAnge Albertini\u003c/a\u003e‘s \u003cem\u003e“\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.slideshare.net/ange4771/44con2013-workshop-exploring-the-portable-executable-format\"\u003eExploring the Portable Executable format\u003c/a\u003e“\u003c/em\u003e 44CON 2013 presentation (from where I took the following picture) are available online for free, therefore I won’t spend too much time going into details.\u003c/p\u003e\n\u003cp\u003eThe key facts we must keep in mind are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA PE has several headers describing its properties and various addressing details, such as the base address the PE is going to be loaded in memory and where the entry point is.\u003c/li\u003e\n\u003cli\u003eA PE has several sections, each one containing data (constants, global variables, etc), code (in which case the section is marked as executable) or sometimes both.\u003c/li\u003e\n\u003cli\u003eA PE contains a declaration of what API are imported and from what system libraries. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/olmDveV.png\" width=\"100%\"/\u003e\n\u003csmall\u003e\u003ca href=\"https://www.slideshare.net/ange4771/44con2013-workshop-exploring-the-portable-executable-format\" target=\"blank\"\u003eCredits to Ange Albertini\u003c/a\u003e\u003c/small\u003e\n\u003c/center\u003e\n\u003cp\u003eFor instance, this is how the Firefox PE sections look like:\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/Ht745tL.png\" width=\"100%\"/\u003e\n\u003csmall\u003e\u003ca href=\"https://bsodtutorials.wordpress.com/2014/11/14/upx-packing-and-anti-packing-techniques/\" target=\"blank\"\u003eCredits to the \u0026#34;Machines Can Think\u0026#34; blog\u003c/a\u003e\u003c/small\u003e\n\u003c/center\u003e\n\u003cp\u003eWhile in some cases, if the PE has been processed with a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://upx.github.io/\"\u003epacker such as UPX\u003c/a\u003e, its sections might look a bit different, as the main code and data sections are compressed and a code stub to decompress at runtime it’s added:\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/JDAdMux.png\" width=\"100%\"/\u003e\n\u003csmall\u003e\u003ca href=\"https://bsodtutorials.wordpress.com/2014/11/14/upx-packing-and-anti-packing-techniques/\" target=\"blank\"\u003eCredits to the \u0026#34;Machines Can Think\u0026#34; blog\u003c/a\u003e\u003c/small\u003e\n\u003c/center\u003e\n\u003cp\u003eWhat we’re going to do now is looking at how we can encode these values that are very heterogeneous in nature (they’re numbers of all types of intervals and strings of variable length) into a vector of scalar numbers, each normalized in the interval [0.0,1.0], and of constant length. This is the type of input that our machine learning model is able to understand. \u003c/p\u003e\n\u003cp\u003eThe process of determining which features of the PE to consider is possibly the most important part of designing any machine learning system and it’s called \u003cem\u003efeatures engineering\u003c/em\u003e, while the act of reading these values and encoding them is called \u003cem\u003efeatures extraction\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"Features-Engineering\"\u003e\u003ca href=\"#Features-Engineering\" class=\"headerlink\" title=\"Features Engineering\"\u003e\u003c/a\u003eFeatures Engineering\u003c/h3\u003e\u003cp\u003eAfter creating the project with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eergo create ergo-pe-av\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI started implementing the features extraction algorithm, inside the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/ergo-pe-av/blob/master/encoder.py#L122\"\u003eencode.py file\u003c/a\u003e, as a very simple (150 lines including comments and multi line strings) starting point that yet provides us enough information to reach interesting accuracy levels and that could easily be extended in the future with additional features.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd ergo-pe-av\nvim encode.py\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first 11 scalars of our vector encode a set of boolean properties that \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://lief.quarkslab.com/\"\u003eLIEF\u003c/a\u003e, the amazing library from QuarksLab I’m using, parses from the PE - each property is encoded to a \u003ccode\u003e1.0\u003c/code\u003e if true, or to a \u003ccode\u003e0.0\u003c/code\u003e if false:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eProperty\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_configuration\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE has a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#the-load-configuration-structure-image-only\"\u003eLoad Configuration\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_debug\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE has a Debug section.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_exceptions\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE is using exceptions.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_exports\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE has any exported symbol.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_imports\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE is importing any symbol.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_nx\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE has the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/NX_bit\"\u003eNX bit\u003c/a\u003e set.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_relocations\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE has relocation entries.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_resources\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE has any resource.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_rich_header\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if a rich header is present.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_signature\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE is digitally signed.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epe.has_tls\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTrue if the PE is using \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#the-tls-section\"\u003eTLS\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003eThen 64 elements follow, representing the first 64 bytes of the PE entry point function, each normalized to \u003ccode\u003e[0.0,1.0]\u003c/code\u003e by dividing each of them by \u003ccode\u003e255\u003c/code\u003e - this will help the model detecting those executables that have very distinctive entrypoints that only vary slightly among different samples of the same family (you can think about this as a very basic signature):\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eep_bytes  =  [\u003cspan class=\"number\"\u003e0\u003c/span\u003e]  *  \u003cspan class=\"number\"\u003e64\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etry\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tep_offset = pe.entrypoint - pe.optional_header.imagebase\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tep_bytes = [\u003cspan class=\"built_in\"\u003eint\u003c/span\u003e(b) \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e b \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e raw[ep_offset:ep_offset+\u003cspan class=\"number\"\u003e64\u003c/span\u003e]]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eexcept\u003c/span\u003e Exception \u003cspan class=\"keyword\"\u003eas\u003c/span\u003e e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tlog.warning(\u003cspan class=\"string\"\u003e\u0026#34;can\u0026#39;t get entrypoint bytes from %s: %s\u0026#34;\u003c/span\u003e, filepath, e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eencode_entrypoint\u003c/span\u003e(\u003cspan class=\"params\"\u003eep\u003c/span\u003e):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(ep) \u0026lt; \u003cspan class=\"number\"\u003e64\u003c/span\u003e: \u003cspan class=\"comment\"\u003e# pad\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\tep += [\u003cspan class=\"number\"\u003e0.0\u003c/span\u003e]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e np.array(ep) / \u003cspan class=\"number\"\u003e255.0\u003c/span\u003e \u003cspan class=\"comment\"\u003e# normalize\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThen an histogram of the repetitions of each byte of the ASCII table (therefore size 256) in the binary file follows - this data point will encode basic statistical information about the raw contents of the file:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# the \u0026#39;raw\u0026#39; argument holds the entire contents of the file\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eencode_histogram\u003c/span\u003e(\u003cspan class=\"params\"\u003eraw\u003c/span\u003e):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\thisto = np.bincount(np.frombuffer(raw, dtype=np.uint8), minlength=\u003cspan class=\"number\"\u003e256\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\thisto = histo / histo.\u003cspan class=\"built_in\"\u003esum\u003c/span\u003e() \u003cspan class=\"comment\"\u003e# normalize\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e  histo\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThe next thing I decided to encode in the features vector is the import table, as the API being used by the PE is quite a relevant information :D In order to do this \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/ergo-pe-av/blob/master/encoder.py#L22\"\u003eI manually selected the 150 most common libraries\u003c/a\u003e in my dataset and for each API being used by the PE I increment by one the column of the relative library, creating another histogram of 150 values then normalized by the total amount of API being imported:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# the \u0026#39;pe\u0026#39; argument holds the PE object parsed by LIEF\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eencode_libraries\u003c/span\u003e(\u003cspan class=\"params\"\u003epe\u003c/span\u003e):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eglobal\u003c/span\u003e libraries\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    imports = {dll.name.lower():[api.name \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e api.is_ordinal \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e api.iat_address \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                           \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e api \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e dll.entries] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e dll \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e pe.imports}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    libs = np.array([\u003cspan class=\"number\"\u003e0.0\u003c/span\u003e] * \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(libraries))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e idx, lib \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e \u003cspan class=\"built_in\"\u003eenumerate\u003c/span\u003e(libraries):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        calls = \u003cspan class=\"number\"\u003e0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        dll   = \u003cspan class=\"string\"\u003e\u0026#34;%s.dll\u0026#34;\u003c/span\u003e % lib\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e lib \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e imports:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            calls = \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(imports[lib])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelif\u003c/span\u003e dll \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e imports:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            calls = \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(imports[dll])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        libs[idx] += calls\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    tot = libs.\u003cspan class=\"built_in\"\u003esum\u003c/span\u003e()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ( libs / tot ) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e tot \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e libs \u003cspan class=\"comment\"\u003e# normalize\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWe proceed to encode the ratio of the PE size on disk vs the size it’ll have in memory (its \u003cem\u003evirtual size\u003c/em\u003e):\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003emin\u003c/span\u003e(sz, pe.virtual_size) / \u003cspan class=\"built_in\"\u003emax\u003c/span\u003e(sz, pe.virtual_size)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eNext, we want to encode some information about the PE sections, such the amount of them containing code vs the ones containing data, the sections marked as executable, the average \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Entropy_(information_theory)\"\u003eShannon entropy\u003c/a\u003e of each one and the average ratio of their size vs their virtual size - these datapoints will tell the model if and how the PE is packed/compressed/obfuscated:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eencode_sections\u003c/span\u003e(\u003cspan class=\"params\"\u003epe\u003c/span\u003e):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    sections = [{ \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e\u0026#39;characteristics\u0026#39;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e.join(\u003cspan class=\"built_in\"\u003emap\u003c/span\u003e(\u003cspan class=\"built_in\"\u003estr\u003c/span\u003e, s.characteristics_lists)),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e\u0026#39;entropy\u0026#39;\u003c/span\u003e: s.entropy,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e\u0026#39;name\u0026#39;\u003c/span\u003e: s.name,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e\u0026#39;size\u0026#39;\u003c/span\u003e: s.size,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e\u0026#39;vsize\u0026#39;\u003c/span\u003e: s.virtual_size } \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e pe.sections]\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    num_sections = \u003cspan class=\"built_in\"\u003elen\u003c/span\u003e(sections)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    max_entropy  = \u003cspan class=\"built_in\"\u003emax\u003c/span\u003e([s[\u003cspan class=\"string\"\u003e\u0026#39;entropy\u0026#39;\u003c/span\u003e] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections]) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e num_sections \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    max_size     = \u003cspan class=\"built_in\"\u003emax\u003c/span\u003e([s[\u003cspan class=\"string\"\u003e\u0026#39;size\u0026#39;\u003c/span\u003e] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections]) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e num_sections \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    min_vsize    = \u003cspan class=\"built_in\"\u003emin\u003c/span\u003e([s[\u003cspan class=\"string\"\u003e\u0026#39;vsize\u0026#39;\u003c/span\u003e] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections]) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e num_sections \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    norm_size    = (max_size / min_vsize) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e min_vsize \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e [ \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# code_sections_ratio\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e([s \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;SECTION_CHARACTERISTICS.CNT_CODE\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e s[\u003cspan class=\"string\"\u003e\u0026#39;characteristics\u0026#39;\u003c/span\u003e]]) / num_sections) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e num_sections \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# pec_sections_ratio\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        (\u003cspan class=\"built_in\"\u003elen\u003c/span\u003e([s \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#39;SECTION_CHARACTERISTICS.MEM_EXECUTE\u0026#39;\u003c/span\u003e \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e s[\u003cspan class=\"string\"\u003e\u0026#39;characteristics\u0026#39;\u003c/span\u003e]]) / num_sections) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e num_sections \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# sections_avg_entropy\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ((\u003cspan class=\"built_in\"\u003esum\u003c/span\u003e([s[\u003cspan class=\"string\"\u003e\u0026#39;entropy\u0026#39;\u003c/span\u003e] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections]) / num_sections) / max_entropy) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e max_entropy \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e# sections_vsize_avg_ratio\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ((\u003cspan class=\"built_in\"\u003esum\u003c/span\u003e([s[\u003cspan class=\"string\"\u003e\u0026#39;size\u0026#39;\u003c/span\u003e] / s[\u003cspan class=\"string\"\u003e\u0026#39;vsize\u0026#39;\u003c/span\u003e] \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e s \u003cspan class=\"keyword\"\u003ein\u003c/span\u003e sections]) / num_sections) / norm_size) \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e norm_size \u0026gt; \u003cspan class=\"number\"\u003e0\u003c/span\u003e \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"number\"\u003e0.0\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ]\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eLast, we glue all the pieces into one single vector of size \u003ccode\u003e486\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ev = np.concatenate([ \\\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tencode_properties(pe),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tencode_entrypoint(ep_bytes),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tencode_histogram(raw),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tencode_libraries(pe),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t[ \u003cspan class=\"built_in\"\u003emin\u003c/span\u003e(sz, pe.virtual_size) / \u003cspan class=\"built_in\"\u003emax\u003c/span\u003e(sz, pe.virtual_size)],\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tencode_sections(pe)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t])\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e v\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThe only thing left to do, is telling our model how to encode the input samples by customizing the \u003ccode\u003eprepare_input\u003c/code\u003e function in the \u003ccode\u003eprepare.py\u003c/code\u003e file previously created by ergo - the following implementation supports the encoding of a file given its path, given its contents (sent as a file upload to the ergo API), or just the evaluation on a raw vector of scalar features:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# used by `ergo encode \u0026lt;path\u0026gt; \u0026lt;folder\u0026gt;` to encode a PE in a vector of scalar features\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# used by `ergo serve \u0026lt;path\u0026gt;` to parse the input query before running the inference\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eprepare_input\u003c/span\u003e(\u003cspan class=\"params\"\u003ex, is_encoding = \u003cspan class=\"literal\"\u003eFalse\u003c/span\u003e\u003c/span\u003e):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# file upload\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e \u003cspan class=\"built_in\"\u003eisinstance\u003c/span\u003e(x, werkzeug.datastructures.FileStorage):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e encoder.encode_pe(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# file path\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelif\u003c/span\u003e os.path.isfile(x) :\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e encoder.encode_pe(x)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# raw vector\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e x.split(\u003cspan class=\"string\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eNow we have everything we need to transform something \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.virustotal.com/gui/file/0830ea172eb905973e52c44f8a5ce44eccba53402ac81ddb4f4d612e8d069a25/detection\"\u003elike this\u003c/a\u003e, to something like this:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,0.333333333333,0.545098039216,0.925490196078,0.41568627451,1.0,0.407843137255,0.596078431373,0.192156862745,0.250980392157,0.0,0.407843137255,0.188235294118,0.149019607843,0.250980392157,0.0,0.392156862745,0.63137254902,0.0,0.0,0.0,0.0,0.313725490196,0.392156862745,0.537254901961,0.145098039216,0.0,0.0,0.0,0.0,0.513725490196,0.925490196078,0.407843137255,0.325490196078,0.337254901961,0.341176470588,0.537254901961,0.396078431373,0.909803921569,0.2,0.858823529412,0.537254901961,0.364705882353,0.988235294118,0.41568627451,0.0078431372549,1.0,0.0823529411765,0.972549019608,0.188235294118,0.250980392157,0.0,0.349019607843,0.513725490196,0.0509803921569,0.0941176470588,0.270588235294,0.250980392157,0.0,1.0,0.513725490196,0.0509803921569,0.109803921569,0.270588235294,0.250980392157,0.870149739583,0.00198567708333,0.00146484375,0.000944010416667,0.000830078125,0.00048828125,0.000162760416667,0.000325520833333,0.000569661458333,0.000130208333333,0.000130208333333,8.13802083333e-05,0.000553385416667,0.000390625,0.000162760416667,0.00048828125,0.000895182291667,8.13802083333e-05,0.000179036458333,8.13802083333e-05,0.00048828125,0.001611328125,0.000162760416667,9.765625e-05,0.000472005208333,0.000146484375,3.25520833333e-05,8.13802083333e-05,0.000341796875,0.000130208333333,3.25520833333e-05,1.62760416667e-05,0.001171875,4.8828125e-05,0.000130208333333,1.62760416667e-05,0.00372721354167,0.000699869791667,6.51041666667e-05,8.13802083333e-05,0.000569661458333,0.0,0.000113932291667,0.000455729166667,0.000146484375,0.000211588541667,0.000358072916667,1.62760416667e-05,0.00208333333333,0.00087890625,0.000504557291667,0.000846354166667,0.000537109375,0.000439453125,0.000358072916667,0.000276692708333,0.000504557291667,0.000423177083333,0.000276692708333,3.25520833333e-05,0.000211588541667,0.000146484375,0.000130208333333,0.0001953125,0.00577799479167,0.00109049479167,0.000227864583333,0.000927734375,0.002294921875,0.000732421875,0.000341796875,0.000244140625,0.000276692708333,0.000211588541667,3.25520833333e-05,0.000146484375,0.00135091145833,0.000341796875,8.13802083333e-05,0.000358072916667,0.00193684895833,0.0009765625,0.0009765625,0.00123697916667,0.000699869791667,0.000260416666667,0.00078125,0.00048828125,0.000504557291667,0.000211588541667,0.000113932291667,0.000260416666667,0.000472005208333,0.00029296875,0.000472005208333,0.000927734375,0.000211588541667,0.00113932291667,0.0001953125,0.000732421875,0.00144856770833,0.00348307291667,0.000358072916667,0.000260416666667,0.00206705729167,0.001171875,0.001513671875,6.51041666667e-05,0.00157877604167,0.000504557291667,0.000927734375,0.00126953125,0.000667317708333,1.62760416667e-05,0.00198567708333,0.00109049479167,0.00255533854167,0.00126953125,0.00109049479167,0.000325520833333,0.000406901041667,0.000325520833333,8.13802083333e-05,3.25520833333e-05,0.000244140625,8.13802083333e-05,4.8828125e-05,0.0,0.000406901041667,0.000602213541667,3.25520833333e-05,0.00174153645833,0.000634765625,0.00068359375,0.000130208333333,0.000130208333333,0.000309244791667,0.00105794270833,0.000244140625,0.003662109375,0.000244140625,0.00245768229167,0.0,1.62760416667e-05,0.002490234375,3.25520833333e-05,1.62760416667e-05,9.765625e-05,0.000504557291667,0.000211588541667,1.62760416667e-05,4.8828125e-05,0.000179036458333,0.0,3.25520833333e-05,3.25520833333e-05,0.000211588541667,0.000162760416667,8.13802083333e-05,0.0,0.000260416666667,0.000260416666667,0.0,4.8828125e-05,0.000602213541667,0.000374348958333,3.25520833333e-05,0.0,9.765625e-05,0.0,0.000113932291667,0.000211588541667,0.000146484375,6.51041666667e-05,0.000667317708333,4.8828125e-05,0.000276692708333,4.8828125e-05,8.13802083333e-05,1.62760416667e-05,0.000227864583333,0.000276692708333,0.000146484375,3.25520833333e-05,0.000276692708333,0.000244140625,8.13802083333e-05,0.0001953125,0.000146484375,9.765625e-05,6.51041666667e-05,0.000358072916667,0.00113932291667,0.000504557291667,0.000504557291667,0.0005859375,0.000813802083333,4.8828125e-05,0.000162760416667,0.000764973958333,0.000244140625,0.000651041666667,0.000309244791667,0.0001953125,0.000667317708333,0.000162760416667,4.8828125e-05,0.0,0.000162760416667,0.000553385416667,1.62760416667e-05,0.000130208333333,0.000146484375,0.000179036458333,0.000276692708333,9.765625e-05,0.000406901041667,0.000162760416667,3.25520833333e-05,0.000211588541667,8.13802083333e-05,1.62760416667e-05,0.000130208333333,8.13802083333e-05,0.000276692708333,0.000504557291667,9.765625e-05,1.62760416667e-05,9.765625e-05,3.25520833333e-05,1.62760416667e-05,0.0,0.00138346354167,0.000732421875,6.51041666667e-05,0.000146484375,0.000341796875,3.25520833333e-05,4.8828125e-05,4.8828125e-05,0.000260416666667,3.25520833333e-05,0.00068359375,0.000960286458333,0.000227864583333,9.765625e-05,0.000244140625,0.000813802083333,0.000179036458333,0.000439453125,0.000341796875,0.000146484375,0.000504557291667,0.000504557291667,9.765625e-05,0.00760091145833,0.0,0.370786516854,0.0112359550562,0.168539325843,0.0,0.0,0.0337078651685,0.0,0.0,0.0,0.303370786517,0.0112359550562,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0561797752809,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0449438202247,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.25,0.25,0.588637653212,0.055703845605\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAssuming you have a folder containing malicious samples in the \u003ccode\u003epe-malicious\u003c/code\u003e subfolder and clean ones in \u003ccode\u003epe-legit\u003c/code\u003e (feel free to give them any name, but the folder names will become the labels associated to each of the samples), you can start the encoding process to a \u003ccode\u003edataset.csv\u003c/code\u003e file that our model can use for training with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eergo encode /path/to/ergo-pe-av /path/to/dataset --output /path/to/dataset.csv\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a coffee and relax, depending on the size of your dataset and how fast the disk where it’s stored is, this process might take quite some time :)\u003c/p\u003e\n\u003ch3 id=\"An-useful-property-of-the-vectors\"\u003e\u003ca href=\"#An-useful-property-of-the-vectors\" class=\"headerlink\" title=\"An useful property of the vectors\"\u003e\u003c/a\u003eAn useful property of the vectors\u003c/h3\u003e\u003cp\u003eWhile ergo is encoding our dataset, let’s take a break to discuss an interesting property of these vectors and how to use it. \u003c/p\u003e\n\u003cp\u003eIt’ll be clear to the reader by now that structurally and/or behaviourally similar executables will have similar vectors, where the distance/difference from one vector and another can be measured, for instance, by using the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Cosine_similarity\"\u003eCosine similarity\u003c/a\u003e, defined as:\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/1d94e5903f7936d3c131e040ef2c51b473dd071d\"/\u003e\n\u003c/center\u003e\n\u003cp\u003eThis metric can be used, among other things, to extract from the dataset (that, let me remind, is a huge set of files you don’t really know much about other if they’re malicious or not) all the samples of a given family given a known “pivot” sample. Say, for instance, that you have a Mirai sample for MIPS, and you want to extract every Mirai variant for any architecture from a dataset of thousands of different unlabeled samples.\u003c/p\u003e\n\u003cp\u003eThe algorithm, that I implemented inside the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/sum\"\u003esum database\u003c/a\u003e as the \u003ccode\u003efindSimilar\u003c/code\u003e \u003cem\u003e“oracle”\u003c/em\u003e (a fancy name for \u003cem\u003estored procedure\u003c/em\u003e), is quite simple:\u003c/p\u003e\n\u003cfigure class=\"highlight javascript\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Given the vector with id=\u0026#34;id\u0026#34;, return a list of\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// other vectors which cosine similarity to the reference\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// one is greater or equal than the threshold.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Results are given as a dictionary of :\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//      \u0026#34;vector_id =\u0026gt; similarity\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e \u003cspan class=\"title\"\u003efindSimilar\u003c/span\u003e(\u003cspan class=\"params\"\u003eid, threshold\u003c/span\u003e) \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e v = records.Find(id);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( v.IsNull() == \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e ) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e ctx.Error(\u003cspan class=\"string\"\u003e\u0026#34;Vector \u0026#34;\u003c/span\u003e + id + \u003cspan class=\"string\"\u003e\u0026#34; not found.\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e results = {};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    records.AllBut(v).forEach(\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunction\u003c/span\u003e(\u003cspan class=\"params\"\u003erecord\u003c/span\u003e)\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003evar\u003c/span\u003e similarity = v.Cosine(record);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( similarity \u0026gt;= threshold ) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e           results[record.ID] = similarity\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e results;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eYet quite effective:\u003c/p\u003e\n\u003cimg src=\"https://raw.githubusercontent.com/evilsocket/sum/master/malware_elf.png\"/\u003e\n\u003ch3 id=\"ANN-as-a-black-box-and-Training\"\u003e\u003ca href=\"#ANN-as-a-black-box-and-Training\" class=\"headerlink\" title=\"ANN as a black box and Training\"\u003e\u003c/a\u003eANN as a black box and Training\u003c/h3\u003e\u003cp\u003eMeanwhile, our encoder should have finished doing its job and the resulting \u003ccode\u003edataset.csv\u003c/code\u003e file containing all the labeled vectors extracted from each of the samples should be ready to be used for training our model … but what \u003cem\u003e“training our model”\u003c/em\u003e actually means? And what’s this \u003cem\u003e“model”\u003c/em\u003e in the first place?\u003c/p\u003e\n\u003cp\u003eThe model we’re using is a computational structure called \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\"\u003eArtificial neural network\u003c/a\u003e that we’re training using the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://arxiv.org/abs/1412.6980v8\"\u003eAdam optimization algorithm\u003c/a\u003e . Online you’ll find very detailed and formal definitions of both, but the bottomline is:\u003c/p\u003e\n\u003cp\u003eAn ANN is a “box” containing hundreds of numerical parameters (the \u003cem\u003e“weights”\u003c/em\u003e of the “neurons”, organized in layers) that are multiplied with the inputs (our vectors) and combined to produce an output \u003cem\u003eprediction\u003c/em\u003e. The training process consists in feeding the system with the dataset, checking the predictions against the known labels, changing those parameters by a small amount, observing if and how those changes affected the model accuracy and repeating this process for a given number of times (\u003cem\u003eepochs\u003c/em\u003e) until the overall performance has reached what we defined as the required minimum.\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/cOwvfAF.png\" width=\"100%\"/\u003e\n\u003csmall\u003e\u003ca href=\"[https://www.nature.com/articles/s41467-018-06322-x](https://www.nature.com/articles/s41467-018-06322-x)\" target=\"blank\"\u003eCredits to nature.com\u003c/a\u003e\u003c/small\u003e\n\u003c/center\u003e\n\u003cp\u003eThe main assumption is that \u003cem\u003ethere is\u003c/em\u003e a numerical correlation among the datapoints in our dataset that we don’t know about but that if known would allow us to divide that dataset into the output classes. What we do is asking this blackbox to ingest the dataset and approximate such function by iteratively tweaking its internal parameters.\u003c/p\u003e\n\u003cp\u003eInside the \u003ccode\u003emodel.py\u003c/code\u003e file you’ll find the definition of our ANN, a fully connected network with two hidden layers of 70 neurons each, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://keras.io/activations/\"\u003eReLU\u003c/a\u003e as the activation function and a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://machinelearningmastery.com/dropout-regularization-deep-learning-models-keras/\"\u003edropout\u003c/a\u003e of 30% during training:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003en_inputs = \u003cspan class=\"number\"\u003e486\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e Sequential([\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Dense(\u003cspan class=\"number\"\u003e70\u003c/span\u003e, input_shape=(n_inputs,), activation=\u003cspan class=\"string\"\u003e\u0026#39;relu\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Dropout(\u003cspan class=\"number\"\u003e0.3\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Dense(\u003cspan class=\"number\"\u003e70\u003c/span\u003e, activation=\u003cspan class=\"string\"\u003e\u0026#39;relu\u0026#39;\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Dropout(\u003cspan class=\"number\"\u003e0.3\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    Dense(\u003cspan class=\"number\"\u003e2\u003c/span\u003e, activation=\u003cspan class=\"string\"\u003e\u0026#39;softmax\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e])\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWe can now start the training process with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eergo train /path/to/ergo-pe-av --dataset /path/to/dataset.csv\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDepending on the total amount of vectors in the CSV file, this process might take from a few minutes, to hours, to days. In case you have GPUs on your machine, ergo will automatically use them instead of the CPU cores in order to significantly speed the training up (check \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.datascience.com/blog/cpu-gpu-machine-learning\"\u003ethis article\u003c/a\u003e if you’re curious why).\u003c/p\u003e\n\u003cp\u003eOnce done, you can inspect the model performance statistics with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eergo view /path/to/ergo-pe-av\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will show the training history, where we can verify that the model accuracy indeed increased over time (in our case, it got to a 97% accuracy around epoch 30), and the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://towardsdatascience.com/understanding-auc-roc-curve-68b2303cc9c5\"\u003eROC curve\u003c/a\u003e, which tells us how effectively the model can distinguish between malicious or not (an AUC, or area under the curve, of 0.994, means that the model is pretty good):\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eTraining\u003c/th\u003e\n\u003cth\u003eROC/AUC\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003cimg src=\"https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/history.png\"/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg src=\"https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/roc.png\"/\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMoreover, a confusion matrix for each of the training, validation and test sets will also be shown. The diagonal values from the top left (dark red) represent the number of correct predictions, while the other values (pink) are the wrong ones (our model has a 1.4% false positives rate on a test set of ~30000 samples):\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eTraining\u003c/th\u003e\n\u003cth\u003eValidation\u003c/th\u003e\n\u003cth\u003eTesting\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003ctd\u003e\u003cimg src=\"https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/training_cm.png\"/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg src=\"https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/validation_cm.png\"/\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cimg src=\"https://raw.githubusercontent.com/evilsocket/ergo-pe-av/master/test_cm.png\"/\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e97% accuracy on such a big dataset is a very interesting result considering how simple our features extraction algorithm is. Many of the misdetections are caused by packers such as UPX (or even just self extracting zip/msi archives) that affect some of the datapoints we’re encoding - adding an unpacking strategy (such as emulating the unpacking stub until the real PE is in memory) and more features (bigger entrypoint vector, dynamic analysis to trace the API being called, imagination is the limit!) is the key to get it to 99% :)\u003c/p\u003e\n\u003ch3 id=\"Conclusions\"\u003e\u003ca href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"\u003e\u003c/a\u003eConclusions\u003c/h3\u003e\u003cp\u003eWe can now remove the temporary files:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eergo clean /path/to/ergo-pe-av\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLoad the model and use it as an API:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eergo serve /path/to/ergo-pe-av --classes \u0026#34;clean, malicious\u0026#34;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd request its classification from a client:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl -F \u0026#34;x=@/path/to/file.exe\u0026#34; \u0026#34;http://localhost:8080/\u0026#34;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou’ll get a response like the following (\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.virustotal.com/gui/file/af66d5db635537de043facf1580f9655fe441f03f82a7503272e32e3d8473af5/detection\"\u003ehere the file being scanned\u003c/a\u003e):\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://i.imgur.com/KaWLY2g.png\" width=\"100%\"/\u003e\n\u003csmall\u003eThe model detecting a sample as malicious with over 99% confidence.\u003c/small\u003e\n\u003c/center\u003e\n\u003cp\u003eNow you can use the model to scan whatever you want, enjoy! :)\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://imgs.xkcd.com/comics/machine_learning.png\"/\u003e\n\u003c/center\u003e\n\u003c/div\u003e",
  "Date": "2019-05-22T21:59:13Z",
  "Author": "Simone Margaritelli"
}