{
  "Source": "www.evilsocket.net",
  "Title": "Past, Present and Future of Bettercap",
  "Link": "https://www.evilsocket.net/2015/12/01/Past-present-and-future-of-Bettercap/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eFour months passed since \u003ca href=\"https://www.evilsocket.net/2015/07/25/bettercap-a-complete-modular-portable-and-easily-extensible-mitm-framework/\"\u003emy first blog post\u003c/a\u003e about \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.bettercap.org/\"\u003ebettercap\u003c/a\u003e, a lot of fixes have been released and a lot of new features have been implemented.\u003cbr/\u003eIn this post I’d like to talk about some of these new features and describe them a little bit, this is basically a big changelog since the very first version, for a complete list of code changes you can read the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/bettercap/releases\"\u003ereleases\u003c/a\u003e github page.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch3 id=\"Major-Changes\"\u003e\u003ca href=\"#Major-Changes\" class=\"headerlink\" title=\"Major Changes\"\u003e\u003c/a\u003eMajor Changes\u003c/h3\u003e\u003cp\u003e\u003cstrong\u003eAdded \u003ccode\u003e--no-discovery\u003c/code\u003e argument to skip active host discovery.\u003c/strong\u003e ( since v.1.1.0 )\u003c/p\u003e\n\u003cp\u003eSometimes you already have the hosts you want to target in the arp cache of your computer, maybe because you already used bettercap against them or just because you already established some communication with them, you can now use the \u003ccode\u003e--no-discovery\u003c/code\u003e argument to use the static ARP cache instead of spawning the discovery agents and make the whole process faster.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDynamic discovery, new hosts are added to the targets list while running.\u003c/strong\u003e ( since v1.1.0 )\u003c/p\u003e\n\u003cp\u003eOnce bettercap is started, it will keep searching for new hosts and add them to the targets list even if an attack is already running. You can basically just launch bettercap once and it will take care of new computers connecting to your internal network.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImplemented HTTP transparent proxy with modules support.\u003c/strong\u003e ( since v1.1.0 )\u003c/p\u003e\n\u003cp\u003eNo need for explanations here, you can find the complete documentation of the transparent proxy and its modules \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.bettercap.org/features/#modulartransparentproxy\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdded builtin HTTP server.\u003c/strong\u003e ( since v1.1.1 )\u003c/p\u003e\n\u003cp\u003eThere’s now a simple builtin HTTP server available, you can use it to serve static assets such as images or js files that you might need in your custom proxy module.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNew feature to save all packets to a pcap file ( \u003ccode\u003e--sniffer-pcap\u003c/code\u003e option ).\u003c/strong\u003e ( since v1.1.2 )\u003c/p\u003e\n\u003cp\u003eYou don’t have time to manually inspect everything you’re sniffing from the network? No problems! You can use the \u003ccode\u003e--sniffer-pcap\u003c/code\u003e argument to save every sniffed packet to a PCAP file and inspect it later.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNew \u003ccode\u003e--sniffer-filter\u003c/code\u003e argument to pass custom BPF filters to the sniffer.\u003c/strong\u003e ( since v1.1.2 )\u003c/p\u003e\n\u003cp\u003eOf course, you can use a custom BPF filter in order to save only the packets you’re really interested into :)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdded \u003ccode\u003e--no-spoofing\u003c/code\u003e argument ( alias for \u003ccode\u003e--spoofer NONE\u003c/code\u003e ).\u003c/strong\u003e ( since v1.1.2 )\u003c/p\u003e\n\u003cp\u003eIf you want to use bettercap as a local proxy/sniffer to debug or reverse engineer some application, you can easily disable the spoofing using the \u003ccode\u003e--no-spoofing\u003c/code\u003e argument.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNew \u003ccode\u003e--check-updates\u003c/code\u003e option will check if a new version of bettercap is available.\u003c/strong\u003e ( since v1.1.3 )\u003c/p\u003e\n\u003cp\u003eYou can now check if a new version is available directly from bettercap.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFirst prototype of HTTPS transparent proxy with realtime crafted certificate and/or custom .pem file.\u003c/strong\u003e ( since v1.1.4 )\u003c/p\u003e\n\u003cp\u003eYep, since v1.1.4 bettercap is also able to intercept and proxy HTTPS traffic using \u003cstrong\u003ecertificate pinning\u003c/strong\u003e, both using a realtime built certificate or a custom PEM file.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdded dynamic ARP agent/sniffer that will reply to ARP who-has requests when needed.\u003c/strong\u003e ( since v1.1.4 )\u003c/p\u003e\n\u003cp\u003eAs new \u003cstrong\u003elegit\u003c/strong\u003e ARP requests are intercepted on the network, the program will take care of generating a proper ( spoofed of course :P ) response.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImplemented half-duplex mode for weird routers that whenever receive an \u003ccode\u003eARP_OPREPLY\u003c/code\u003e suddenly sends an \u003ccode\u003eARP_OPREQUEST\u003c/code\u003e to the real ip, screwing up MITM\u003c/strong\u003e ( since v1.1.4 )\u003c/p\u003e\n\u003cp\u003eThis was a new feature I implemented in order to fix a weird behaviour me and some users experienced with particular routers, a full description of this new mode can be found \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.bettercap.org/about-the-new-half-duplex-option/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNow the user can target more than one address at once\u003c/strong\u003e ( since v1.1.4, tnx to \u003cstrong\u003e@mvrilo\u003c/strong\u003e )\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--target\u003c/code\u003e argument now supports a comma separated list of targets.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNow the user can load more than one spoofer at once\u003c/strong\u003e ( since v1.1.4, tnx to \u003cstrong\u003e@minotaur-0\u003c/strong\u003e )\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e--spoofer\u003c/code\u003e argument now supports a comma separated list of spoofing modules.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNew argument to manually specify the gateway address\u003c/strong\u003e ( since v1.1.5, tnx to \u003cstrong\u003e@misterade\u003c/strong\u003e )\u003c/p\u003e\n\u003cp\u003eThe gateway address can now be manually specified on the command line, this is an optional argument which is needed only when you already know the gw address and don’t want bettercap to search for it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNew \u003ccode\u003e--sniffer-source\u003c/code\u003e argument to read a pcap file instead of sniffing from the network interface.\u003c/strong\u003e ( since v1.1.5 )\u003c/p\u003e\n\u003cp\u003eIf you’re running bettercap as a simple sniffer/cretendials harvester, you can “replay” an already captured pcap file and feed it to the program instead of capturing real time traffic.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdated hw-prefixes file with latest version from nmap repository.\u003c/strong\u003e ( since v1.1.6 )\u003c/p\u003e\n\u003cp\u003eThis made the “mac-address to vendor” lookup more accurate.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImplemented custom upstream proxy options ( \u003ccode\u003e--custom-proxy\u003c/code\u003e, \u003ccode\u003e--custom-https-proxy\u003c/code\u003e ) both for HTTP and HTTPS.\u003c/strong\u003e ( since v1.1.6 )\u003c/p\u003e\n\u003cp\u003eA new set of arguments is available in order to specify a custom HTTP/HTTPS upstream proxy address.\u003c/p\u003e\n\u003ch3 id=\"The-Future\"\u003e\u003ca href=\"#The-Future\" class=\"headerlink\" title=\"The Future\"\u003e\u003c/a\u003eThe Future\u003c/h3\u003e\u003cp\u003eIf you’re interested in upcoming features, there’s a “TODO” list available \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/bettercap/blob/master/TODO.md\"\u003ehere\u003c/a\u003e, some of these items are done and the code has already been pushed to the dev branch, others are still to be done and I’m still not sure about some, these are the major upcoming features.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImplement \u003ccode\u003e--ignore ADDR,ADDR,ADDR\u003c/code\u003e option to filter out specific addresses from the targets list.\u003c/strong\u003e ( READY in the developer branch )\u003c/p\u003e\n\u003cp\u003eIf there’re one or multiple ip addresses that are causing a lot of traffic and that you’re not interested to, you can use this argument to completely ignore them.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRewrite proxy class using em-proxy library.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI’m currently working on a complete rewriting of the \u003cstrong\u003eProxy\u003c/strong\u003e class that will dramatically increase its performances thanks to the great \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/igrigorik/em-proxy\"\u003eem-proxy\u003c/a\u003e gem by \u003cstrong\u003eIlya Grigorik\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eActive packet filtering/injection/etc\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis still needs to be started, but in the future there will be a modular packet injector/filter ( pretty much like the modular HTTP(S) transparent proxy but for raw packets ^_^ ), probably powered by the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/gdelugre/ruby-nfqueue\"\u003enfqueue\u003c/a\u003e Ruby gem by \u003cstrong\u003eGuillaume Delugré\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBSD Support.\u003c/strong\u003e ( !!!Help wanted here!!! )\u003c/p\u003e\n\u003cp\u003eBettercap is already compatible with Mac OS X and basically every distribution of GNU/Linux, I’d like some BSD guru to help me to make it compatible with *BSD systems as well.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP/2 Support.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSelf explanatory, still in TODO.\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2015-12-01T16:30:23Z",
  "Author": "Simone Margaritelli"
}