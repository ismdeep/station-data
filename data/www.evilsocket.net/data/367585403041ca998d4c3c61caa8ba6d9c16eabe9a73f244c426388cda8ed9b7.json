{
  "Source": "www.evilsocket.net",
  "Title": "How I Defeated an Obfuscated and Anti-Tamper APK With Some Python and a Home-Made Smali Emulator.",
  "Link": "https://www.evilsocket.net/2016/04/18/How-I-defeated-an-obfuscated-and-anti-tamper-APK-with-some-Python-and-a-home-made-Smali-emulator/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eDuring this Saturday afternoon I was chatting with a friend of mine ( \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/fvrmatteo\"\u003eMatteo\u003c/a\u003e ) and he asked for some help to fix a Python script he was working on.\u003c/p\u003e\n\u003cp\u003eHe was trying to deobfuscate an APK in order to understand its obfuscation and anti tampering (more on this later) protections so I started working on it as well.\u003c/p\u003e\n\u003cp\u003eThis was definitely way more challenging ( and fun! ) than my usual APK reversing session ( dex2jar -\u0026gt; jd-gui -\u0026gt; \u003cstrong\u003edone\u003c/strong\u003e ), moreover this required me to write a new tool which I find kinda cool and unique ( IMHO of course ), so I’m going to share the story in this post.\u003c/p\u003e\n\u003cp\u003eI’m going to intentionally skip a few details here and there because I do not want to cause any harm to the people who wrote that application, all the involved protection mechanisms are there to avoid piracy.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch3 id=\"Weird-Characters-Are-Weird\"\u003e\u003ca href=\"#Weird-Characters-Are-Weird\" class=\"headerlink\" title=\"Weird Characters Are Weird\"\u003e\u003c/a\u003eWeird Characters Are Weird\u003c/h3\u003e\u003cp\u003eLike every other reverser who experienced APK decompilation I’m used to Proguard messing with class and method names ( or Dexguard messing with strings, and so forth ), this is not usually a big deal to me, but what I saw when I executed \u003cstrong\u003eapktool\u003c/strong\u003e was definitely surprising:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/apktool.png\" alt=\"apktool\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/wtf.jpeg\" alt=\"wtf\"/\u003e\u003c/p\u003e\n\u003cp\u003eMost of the classes and methods names were weird binary strings, this almost freezed every single tool or editor I used to inspect those files, so the very first step was to fix ( to be honest, reimplement from scratch XD ) the python script that Matteo was trying to use to rename each obfuscated entry, the script itself was quite simple:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLoop all smali files with non printable names.\u003c/li\u003e\n\u003cli\u003eReplace the obfuscated class name with \u003cem\u003eClassXXX\u003c/em\u003e ( where XXX is an incremental integer ).\u003c/li\u003e\n\u003cli\u003eRename the files.\u003c/li\u003e\n\u003cli\u003eSearch for every references to those classes and patch them with the new names ( regular expressions FTW! ).\u003c/li\u003e\n\u003cli\u003eRepeat the process against \u003cem\u003e.field\u003c/em\u003e directives ( class members, methods, etc ).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt the end of the process, I finally had a browsable folder and readable smali files :)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/phase1.png\" alt=\"after basic deobfuscation\"/\u003e\u003c/p\u003e\n\u003cp\u003eBut I was definitely far from having done …\u003c/p\u003e\n\u003ch3 id=\"Anti-Tampering\"\u003e\u003ca href=\"#Anti-Tampering\" class=\"headerlink\" title=\"Anti Tampering\"\u003e\u003c/a\u003eAnti Tampering\u003c/h3\u003e\u003cp\u003eBefore I continue, there’re two things I need to point out in order to make the reasons behind my approach clearer:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMatteo told me that the application had some misterious anti tampering ( and most likely anti debugging ) protection, therefore rebuilding the smali to a new APK with some injected code was not possible, neither was debugging.\u003c/li\u003e\n\u003cli\u003eSuch protections not only prevented code injection/modification, but also uninstalled the application if such tampering was detected.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo no code injection ( nope, XPosed neither ), no debugging, absolutely no chance to use my standard approach for reversing it :(\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/Okay-Meme-Gif-05.jpg\" alt=\"sad\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Encrypted-Strings\"\u003e\u003ca href=\"#Encrypted-Strings\" class=\"headerlink\" title=\"Encrypted Strings\"\u003e\u003c/a\u003eEncrypted Strings\u003c/h3\u003e\u003cp\u003eAs the lazy (or smart, you decide) reverser I am, instead of trying to understand the logic, at first I tried to search for meaningful strings that could give me some hints about what was going on in the app, but again I had a nasty surprise instead.\u003c/p\u003e\n\u003cp\u003eEvery single string was encrypted with a custom algorithm, basically every reference to a string was replaced by something like:\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eString decrypted = Class623::method5( \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e[]{ -\u003cspan class=\"number\"\u003e12\u003c/span\u003e, \u003cspan class=\"number\"\u003e44\u003c/span\u003e, -\u003cspan class=\"number\"\u003e35\u003c/span\u003e, ... }, \u003cspan class=\"number\"\u003e52\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eJust a long array of integers and another integer as the second argument (maybe some sort of key?)\u003c/p\u003e\n\u003cp\u003eWhat I usually do in these cases is:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDecompile the APK to java ( with dex2jar + jd-gui or just jadx ).\u003c/li\u003e\n\u003cli\u003eTake the java code of the decryption routine and paste it in a stand alone java console application.\u003c/li\u003e\n\u003cli\u003eRun the decryption routine against the encrypted stuff and eventually get the clear text results.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGuess what? Every single tool failed to correctly transform the smali code of \u003cstrong\u003eClass623::method5\u003c/strong\u003e into java … the output was just nonsense, not working, nada … and for the record I’m not that good in reading smali code (the routine itself was quite complicated, at least for my smali skills) … but I couldn’t just give up … no way!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/challengeaccepted.jpg\" alt=\"challenge accepted\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"All-hail-the-Smali-Emulator\"\u003e\u003ca href=\"#All-hail-the-Smali-Emulator\" class=\"headerlink\" title=\"All hail the Smali Emulator\"\u003e\u003c/a\u003eAll hail the Smali Emulator\u003c/h3\u003e\u003cp\u003eOf course I could take the smali code of \u003cstrong\u003eClass623::method5\u003c/strong\u003e, create a new Android app, decompile it with apktool, inject the smali code of that routine into the output, insert a smali call to that code into the app, rebuild it and launch it … but:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAgain, I’m \u003cstrong\u003elazy\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eThis solution wouldn’t be \u003cstrong\u003eelegant\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eA new idea was just born in my head and it was just too cool, I \u003cstrong\u003ehad\u003c/strong\u003e to try it!\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLong story short, I said to myself:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFuck this, I\u0026#39;m gonna write a smali parser and emulator and feed it with this\nroutine, eventually it will output all the cleartexts I need!\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo I started reading \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html\"\u003eDalvik opcodes specs\u003c/a\u003e ( tnx to \u003cstrong\u003eGabor Paller\u003c/strong\u003e for this! ) and putting some code together, after a few hours I had this simple script ready for testing:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e smali.emulator \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e Emulator\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eemu = Emulator()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# The smali file to emulate.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efilename = \u003cspan class=\"string\"\u003e\u0026#39;decryptor.smali\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# Arguments for the method.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eargs = {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;p0\u0026#39;\u003c/span\u003e: (-\u003cspan class=\"number\"\u003e62\u003c/span\u003e, -\u003cspan class=\"number\"\u003e99\u003c/span\u003e, -\u003cspan class=\"number\"\u003e106\u003c/span\u003e, -\u003cspan class=\"number\"\u003e125\u003c/span\u003e, -\u003cspan class=\"number\"\u003e123\u003c/span\u003e, -\u003cspan class=\"number\"\u003e105\u003c/span\u003e, -\u003cspan class=\"number\"\u003e98\u003c/span\u003e, -\u003cspan class=\"number\"\u003e37\u003c/span\u003e, -\u003cspan class=\"number\"\u003e105\u003c/span\u003e, -\u003cspan class=\"number\"\u003e97\u003c/span\u003e, -\u003cspan class=\"number\"\u003e103\u003c/span\u003e, -\u003cspan class=\"number\"\u003e41\u003c/span\u003e, -\u003cspan class=\"number\"\u003e118\u003c/span\u003e, -\u003cspan class=\"number\"\u003e97\u003c/span\u003e, -\u003cspan class=\"number\"\u003e113\u003c/span\u003e, -\u003cspan class=\"number\"\u003e103\u003c/span\u003e, -\u003cspan class=\"number\"\u003e109\u003c/span\u003e, -\u003cspan class=\"number\"\u003e104\u003c/span\u003e, -\u003cspan class=\"number\"\u003e115\u003c/span\u003e, \u003cspan class=\"number\"\u003e111\u003c/span\u003e, \u003cspan class=\"number\"\u003e98\u003c/span\u003e, \u003cspan class=\"number\"\u003e103\u003c/span\u003e, \u003cspan class=\"number\"\u003e35\u003c/span\u003e, \u003cspan class=\"number\"\u003e52\u003c/span\u003e),\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"string\"\u003e\u0026#39;p1\u0026#39;\u003c/span\u003e: \u003cspan class=\"number\"\u003e19\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eret = emu.run( filename, args )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e emu.stats\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;RESULT:\\n\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprint\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;\u0026#39;%s\u0026#39;\u0026#34;\u003c/span\u003e % ret\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAaaaaaand:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/pwned.png\" alt=\"decrypted\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBINGO!!!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI executed the script against every encrypted string and it worked like a charm, the emulator was able to correctly parse and execute the smali code of the decryption routine and decrypt every single entry I’ve extracted from the decompiled application … from that point on it was just a matter of replacing encrypted entries with their cleartexts and the reversing process became as easy as pie :)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/04/victory.jpg\" alt=\"victory\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Conclusions\"\u003e\u003ca href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"\u003e\u003c/a\u003eConclusions\u003c/h3\u003e\u003cp\u003eI’ve released the code on \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/smali_emulator\"\u003egithub\u003c/a\u003e as usual, it still lacks the support for a lot of Dalvik opcodes, I’ve just implemented the ones I needed in order to emulate that routine ( which you can find in the repo as well ), but it’s quite easy to improve it and probably I’ll complete it in the next few days :)\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2016-04-18T03:31:02Z",
  "Author": "Simone Margaritelli"
}