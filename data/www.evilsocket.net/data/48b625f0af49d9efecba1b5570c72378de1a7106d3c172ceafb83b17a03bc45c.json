{
  "Source": "www.evilsocket.net",
  "Title": "Why You Shouldn't Trust CloudFlare's 'Flexible SSL' and How to Bypass It With BetterCap",
  "Link": "https://www.evilsocket.net/2016/01/28/Why-you-shouldn-t-trust-CloudFlare-s-Flexible-SSL-and-how-to-bypass-it-with-BetterCap/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eLet me clear one thing about this post … this is \u003cstrong\u003enot\u003c/strong\u003e a CloudFlare vulnerability report and, even in that case, there’s really nothing they could do in order to fix it \u003cdel\u003eunless they’d block direct traffic to HTTP websites\u003c/del\u003e.\u003cbr/\u003eThis is only a blog post about why you shouldn’t blindly trust free services that offer you some sort of SSL protection if your server itself is not SSL protected by default.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003cp\u003e\u003cstrong\u003eUPDATE\u003c/strong\u003e: \u003cem\u003en0on3\u003c/em\u003e \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/n0on3/status/692763330210091009\"\u003enoted on twitter\u003c/a\u003e that \u003cem\u003eeven a properly configured server / blocking plain HTTP won’t work if the mitm catches the first request\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eDuring this week, I’ve been playing with CloudFlare free plan in order to turn my websites into HTTPS protected websites, while configuring my account and playing a little bit with \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.bettercap.org/\"\u003ebettercap\u003c/a\u003e I figured out something really weird and I tweeted \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/bettercap/status/691991056469118976\"\u003ethis\u003c/a\u003e ( from the @bettercap account ):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/01/Schermata-2016-01-28-alle-18-08-27.png\" alt=\"my tweet\"/\u003e\u003c/p\u003e\n\u003cp\u003eSomeone from their team asked me to report this issue on HackerONE and eventually they decided to not accept it … well, not a big deal, I didn’t want to get money out of it in the first place and I didn’t consider this to be a “real” vulnerability from their side, but just something they should take into account while writing their documentation and informing users, this is how it ended ( and that’s why I’m disclosing this ) :\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/01/pasha.png\" alt=\"HackerOne response\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"The-Attack\"\u003e\u003ca href=\"#The-Attack\" class=\"headerlink\" title=\"The Attack\"\u003e\u003c/a\u003eThe Attack\u003c/h3\u003e\u003cp\u003eMy configuration is the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOne website hosted on my dedicated server running \u003cstrong\u003eonly\u003c/strong\u003e via HTTP ( no HTTPS available ).\u003c/li\u003e\n\u003cli\u003eCloudFlare SSL configured to \u003cstrong\u003eFlexible\u003c/strong\u003e ( since I have no certificate whatsoever ).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/01/flexiblessl.png\" alt=\"Flexible SSL\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003csmall\u003eAs you can see, with Flexible SSL, your server doesn\u0026#39;t handle HTTPS traffic by itself.\u003c/small\u003e\u003c/center\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHSTS\u003c/strong\u003e on with everything enabled ( \u003cstrong\u003ebrowser preload\u003c/strong\u003e as well ).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/01/hsts.png\" alt=\"HSTS\"/\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA page rule configured ( as they wrote on the documentation ) to “\u003cstrong\u003eAlways uses https\u003c/strong\u003e“.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/01/pagerule.png\" alt=\"Page Rule\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhat I was expecting was that every request made against the HTTP website would be redirected to the CloudFlare HTTPS endpoint, effectively forcing every user to only browse through HTTPS … well, it turned out that \u003cstrong\u003ethis configuration is quite easy to bypass\u003c/strong\u003e using BetterCap or any other offensive tool that performs \u003cstrong\u003esslstripping\u003c/strong\u003e and “Redirect to HTTPS” patching …\u003c/p\u003e\n\u003cp\u003eBut how? And why?\u003c/p\u003e\n\u003cp\u003eThis attack will work \u003cstrong\u003eif and only if\u003c/strong\u003e the victim/target is browsing the HTTP(S) CloudFlare protected website for the very first time, since from the second time on, its browser would cache the HSTS preload rule and would perform a HTTP -\u0026gt; HTTPS redirect without waiting for an actual 307 redirect from the CloudFlare’s proxy.\u003c/p\u003e\n\u003cp\u003eYou just need to launch bettercap with the following command line arguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo bettercap -T IP-OF-THE-TARGET --proxy\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom that moment on, bettercap will start sslstripping and patching every redirect to HTTPS:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/01/bettercap_cloudflare.png\" alt=\"bettercap and cloudflare\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs you can see from the screenshot, once bettercap intercepted the redirect to the HTTPS website, it just killed it and left the victim browsing the page through HTTP ( while proxying the data through HTTPS to the real endpoint ).\u003cbr/\u003eThis allows the tool to see the traffic from both sides in cleartext, manipulate it, and so forth.\u003c/p\u003e\n\u003cp\u003eThis happens because the my original webserver had only the HTTP port exposed and no HTTPS capabilities at all, \u003cdel\u003eas I already mentioned the only way for CloudFlare to fix this would be to block all the traffic going through the original HTTP server and only permit it if it’s through SSL.\u003c/del\u003e\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2016-01-28T19:32:13Z",
  "Author": "Simone Margaritelli"
}