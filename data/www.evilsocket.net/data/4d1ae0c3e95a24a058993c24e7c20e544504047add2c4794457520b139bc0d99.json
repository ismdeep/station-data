{
  "Source": "www.evilsocket.net",
  "Title": "Android Applications Reversing 101",
  "Link": "https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eEvery day we see a bunch of new Android applications being published on the Google Play Store, from games, to utilities, to IoT devices clients and so forth, almost every single aspect of our life can be somehow controlled with “an app”. We have smart houses, \u003ca href=\"https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/\"\u003esmart fitness devices\u003c/a\u003e and \u003ca href=\"https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/\"\u003esmart coffee machines\u003c/a\u003e … but is this stuff just smart or is it \u003cstrong\u003esecure\u003c/strong\u003e as well? :)\u003c/p\u003e\n\u003cp\u003eReversing an Android application can be a (relatively) easy and fun way to answer this question, that’s why I decided to write this blog post where I’ll try to explain the basics and give you some of my “tricks” to reverse this stuff faster and more effectively.\u003c/p\u003e\n\u003cp\u003eI’m not going to go very deep into technical details, you can learn yourself how Android works, how the Dalvik VM works and so forth, this is gonna be a \u003cstrong\u003every basic practical guide\u003c/strong\u003e instead of a post full of theoretical stuff but no really useful contents.\u003c/p\u003e\n\u003cp\u003eLet’s start! :)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/head.jpeg\" alt=\"start\"/\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch3 id=\"Prerequisites\"\u003e\u003ca href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"\u003e\u003c/a\u003ePrerequisites\u003c/h3\u003e\u003cp\u003eIn order to follow this introduction to APK reversing there’re a few prerequisites:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA working brain ( I don’t give this for granted anymore … ).\u003c/li\u003e\n\u003cli\u003eAn Android smartphone ( doh! ).\u003c/li\u003e\n\u003cli\u003eYou have a basic knowledge of the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Java_(programming_language\"\u003eJava programming language\u003c/a\u003e (you understand it if you read it).\u003c/li\u003e\n\u003cli\u003eYou have the \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html\"\u003eJRE\u003c/a\u003e installed on your computer.\u003c/li\u003e\n\u003cli\u003eYou have \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developer.android.com/studio/command-line/adb.html\"\u003eadb\u003c/a\u003e installed.\u003c/li\u003e\n\u003cli\u003eYou have the \u003ccode\u003eDeveloper Options\u003c/code\u003e and \u003ccode\u003eUSB Debugging\u003c/code\u003e enabled on your smartphone.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"What-is-an-APK\"\u003e\u003ca href=\"#What-is-an-APK\" class=\"headerlink\" title=\"What is an APK?\"\u003e\u003c/a\u003eWhat is an APK?\u003c/h3\u003e\u003cp\u003eAn Android application is packaged as an \u003cstrong\u003eAPK\u003c/strong\u003e ( \u003cem\u003eAndroid Package\u003c/em\u003e ) file, which is essentially a ZIP file containing the compiled code, the resources, signature, manifest and every other file the software needs in order to run. Being it a ZIP file, we can start looking at its contents using the \u003ccode\u003eunzip\u003c/code\u003e command line utility ( or any other unarchiver you use ):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eunzip application.apk -d application\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere’s what you will find inside an APK.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/AndroidManifest.xml (file)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the binary representation of the XML manifest file describing what permissions the application will request (keep in mind that some of the permissions might be requested at runtime by the app and not declared here), what activities ( GUIs ) are in there, what services ( stuff running in the background with no UI ) and what receivers ( classes that can receive and handle system events such as the device boot or an incoming SMS ). \u003c/p\u003e\n\u003cp\u003eOnce decompiled (more on this later), it’ll look like this:\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003emanifest\u003c/span\u003e \u003cspan class=\"attr\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003epackage\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;com.company.appname\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e                                                                     \u003cspan class=\"attr\"\u003eplatformBuildVersionCode\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;24\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e                                                                     \u003cspan class=\"attr\"\u003eplatformBuildVersionName\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;7.0\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.permission.WRITE_EXTERNAL_STORAGE\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.permission.INTERNET\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eapplication\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;@mipmap/ic_launcher\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e        \u003cspan class=\"attr\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;@string/app_name\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e        \u003cspan class=\"attr\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;@style/AppTheme\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eactivity\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;com.company.appname.MainActivity\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eaction\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ecategory\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eKeep in mind that this is the perfect starting point to isolate the application “entry points”, namely the classes you’ll reverse first in order to understand the logic of the whole software. In this case for instance, we would start inspecting the \u003ccode\u003ecom.company.appname.MainActivity\u003c/code\u003e class being it declared as the main UI for the application.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/assets/* ( folder )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis folder will contain application specific files, like wav files the app might need to play, custom fonts and so on. Reversing-wise it’s usually not very important, unless of course you find inside the software functional references to such files.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/res/* ( folder )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll the resources, like the activities xml files, images and custom styles are stored here.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/resources.arsc ( file )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the “index” of all the resources, long story short, at each resource file is assigned a numeric identifier that the app will use in order to identify that specific entry and the \u003ccode\u003eresources.arsc\u003c/code\u003e file maps these files to their identifiers … nothing very interesting about it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/classes.dex ( file )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis file contains the Dalvik ( the virtual machine running Android applications ) bytecode of the app, let me explain it better. An Android application is (most of the times) developed using the Java programming language. The java source files are then compiled into this bytecode which the Dalvik VM eventually will execute … pretty much what happens to normal Java programs when they’re compiled to \u003ccode\u003e.class\u003c/code\u003e files.\u003c/p\u003e\n\u003cp\u003eLong story short, this file contains the logic, that’s what we’re interested into.\u003c/p\u003e\n\u003cp\u003eSometimes you’ll also find a \u003ccode\u003eclasses2.dex\u003c/code\u003e file, this is due to the DEX format which has a limit to the number of classes you can declare inside a single dex file, at some point in history Android apps became bigger and bigger and so Google had to adapt this format, supporting a secondary \u003ccode\u003e.dex\u003c/code\u003e file where other classes can be declared.\u003c/p\u003e\n\u003cp\u003eFrom our perspective it doesn’t matter, the tools we’re going to use are able to detect it and append it to the decompilation pipeline.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/libs/ ( folder )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSometimes an app needs to execute native code, it can be an image processing library, a game engine or whatever. In such case, those \u003ccode\u003e.so\u003c/code\u003e ELF libraries will be found inside the \u003ccode\u003elibs\u003c/code\u003e folder, divided into architecture specific subfolders ( so the app will run on ARM, ARM64, x86, etc ).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/META-INF/ ( folder )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery Android application needs to be signed with a developer certificate in order to run on a device, even debug builds are signed by a debug certificate, the \u003ccode\u003eMETA-INF\u003c/code\u003e folder contains information about the files inside the APK and about the developer.\u003c/p\u003e\n\u003cp\u003eInside this folder, you’ll usually find:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003ccode\u003eMANIFEST.MF\u003c/code\u003e file with the SHA-1 or SHA-256 hashes of \u003cstrong\u003eall\u003c/strong\u003e the files inside the APK.\u003c/li\u003e\n\u003cli\u003eA \u003ccode\u003eCERT.SF\u003c/code\u003e file, pretty much like the MANIFEST.MF, but signed with the \u003ccode\u003eRSA\u003c/code\u003e key.\u003c/li\u003e\n\u003cli\u003eA \u003ccode\u003eCERT.RSA\u003c/code\u003e file which contains the developer public key used to sign the \u003ccode\u003eCERT.SF\u003c/code\u003e file and digests.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThose files are very important in order to guarantee the APK integrity and the ownership of the code. Sometimes inspecting such signature can be very handy to determine who really developed a given APK. If you want to get information about the developer, you can use the \u003ccode\u003eopenssl\u003c/code\u003e command line utility:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eopenssl pkcs7 -in /path/to/extracted/apk/META-INF/CERT.RSA -inform DER -print\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will print an output like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePKCS7: \n  type: pkcs7-signedData (1.2.840.113549.1.7.2)\n  d.sign: \n    version: 1\n    md_algs:\n        algorithm: sha1 (1.3.14.3.2.26)\n        parameter: NULL\n    contents: \n      type: pkcs7-data (1.2.840.113549.1.7.1)\n      d.data: \u0026lt;ABSENT\u0026gt;\n    cert:\n        cert_info: \n          version: 2\n          serialNumber: 10394279457707717180\n          signature: \n            algorithm: sha1WithRSAEncryption (1.2.840.113549.1.1.5)\n            parameter: NULL\n          issuer: C=TW, ST=Taiwan, L=Taipei, O=ASUS, OU=PMD, CN=ASUS AMAX Key/\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"52373f333b3e133636203721216f33363f3b3c12332127217c313d3f\"\u003e[email protected]\u003c/a\u003e\n          validity: \n            notBefore: Jul  8 11:39:39 2013 GMT\n            notAfter: Nov 23 11:39:39 2040 GMT\n          subject: C=TW, ST=Taiwan, L=Taipei, O=ASUS, OU=PMD, CN=ASUS AMAX Key/\u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"f49199959d98b5909086918787c99590999d9ab495878187da979b99\"\u003e[email protected]\u003c/a\u003e\n          key: \n            algor: \n              algorithm: rsaEncryption (1.2.840.113549.1.1.1)\n              parameter: NULL\n            public_key:  (0 unused bits)\n              ...\n              ...\n              ...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis can be gold for us, for instance we could use this information to determine if an app was really signed by (let’s say) Google or if it was resigned, therefore modified, by a third party.\u003c/p\u003e\n\u003ch3 id=\"How-do-I-get-the-APK-of-an-app\"\u003e\u003ca href=\"#How-do-I-get-the-APK-of-an-app\" class=\"headerlink\" title=\"How do I get the APK of an app?\"\u003e\u003c/a\u003eHow do I get the APK of an app?\u003c/h3\u003e\u003cp\u003eNow that we have a basic idea of what we’re supposed to find inside an APK, we need a way to actually get the APK file of the application we’re interested into. There are two ways, either you install it on your device and use \u003ccode\u003eadb\u003c/code\u003e to get it, or you use an online service to download it.\u003c/p\u003e\n\u003ch5 id=\"Pulling-an-app-with-ADB\"\u003e\u003ca href=\"#Pulling-an-app-with-ADB\" class=\"headerlink\" title=\"Pulling an app with ADB\"\u003e\u003c/a\u003ePulling an app with ADB\u003c/h5\u003e\u003cp\u003eFirst of all let’s plug our smartphone to the USB port of our computer and get a list of the installed packages and their namespaces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadb shell pm list packages\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will list all packages on your smartphone, once you’ve found the namespace of the package you want to reverse ( \u003ccode\u003ecom.android.systemui\u003c/code\u003e in this example ), let’s see what its physical path is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadb shell pm path com.android.systemui\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we have the APK path:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epackage:/system/priv-app/SystemUIGoogle/SystemUIGoogle.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet’s pull it from the device:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadb pull /system/priv-app/SystemUIGoogle/SystemUIGoogle.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd here you go, you have the APK you want to reverse!\u003c/p\u003e\n\u003ch5 id=\"Using-an-Online-Service\"\u003e\u003ca href=\"#Using-an-Online-Service\" class=\"headerlink\" title=\"Using an Online Service\"\u003e\u003c/a\u003eUsing an Online Service\u003c/h5\u003e\u003cp\u003eMultiple online services are available if you don’t want to install the app on your device (for instance, if you’re reversing a malware, you want to start having the file first, then installing on a clean device only afterwards), here’s a list of the ones I use:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://apk-dl.com/\"\u003eApk-DL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://apps.evozi.com/apk-downloader/\"\u003eEvozi Downloader\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://apkleecher.com/\"\u003eApk Leecher\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKeep in mind that once you download the APK from these services, it’s a good idea to check the developer certificate as previously shown in order to be 100% sure you downloaded the correct APK and not some repackaged and resigned stuff full of ads and possibly malware.\u003c/p\u003e\n\u003ch3 id=\"Network-Analysis\"\u003e\u003ca href=\"#Network-Analysis\" class=\"headerlink\" title=\"Network Analysis\"\u003e\u003c/a\u003eNetwork Analysis\u003c/h3\u003e\u003cp\u003eNow we start with some tests in order to understand what the app is doing while executed. My first test usually consists in inspecting the network traffic being generated by the application itself and, in order to do that, my tool of choice is \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://bettercap.org/\"\u003ebettercap\u003c/a\u003e … well, that’s why I developed it in the first place :P\u003c/p\u003e\n\u003cp\u003eMake sure you have bettercap installed and that both your computer and the Android device are on the same wifi network, then you can start MITM-ing the smartphone ( \u003ccode\u003e192.168.1.5\u003c/code\u003e in this example ) and see its traffic in realtime from the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo bettercap -T 192.168.1.5 -X\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e-X\u003c/code\u003e option will enable the sniffer, as soon as you start the app you should see a bunch of HTTP and/or HTTPS servers being contacted, now you know who the app is sending the data to, let’s now see \u003cstrong\u003ewhat\u003c/strong\u003e data it is sending:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo bettercap -T 192.168.1.5 --proxy --proxy-https --no-sslstrip\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will switch from passive sniffing mode, to proxying mode. All the HTTP and HTTPS traffic will be intercepted (and, if neeeded, modified) by bettercap.\u003cbr/\u003eIf the app is correctly using \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning\"\u003epublic key pinning\u003c/a\u003e (\u003cstrong\u003eas every application should\u003c/strong\u003e) you will \u003cstrong\u003enot\u003c/strong\u003e be able to see its HTTPS traffic but, unfortunately, in my experience this only happens for a very small number of apps.\u003c/p\u003e\n\u003cp\u003eFrom now on, keep triggering actions on the app while inspecting the traffic ( you can also use \u003ccode\u003eWireshark\u003c/code\u003e in parallel to get a \u003ccode\u003ePCAP\u003c/code\u003e capture file to inspect it later ) and after a while you should have a more or less complete idea of what protocol it’s using and for what purpose.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/bettercap.png\" alt=\"bettercap\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Static-Analysis\"\u003e\u003ca href=\"#Static-Analysis\" class=\"headerlink\" title=\"Static Analysis\"\u003e\u003c/a\u003eStatic Analysis\u003c/h3\u003e\u003cp\u003eAfter the network analysis, we collected a bunch of URLs and packets, we can use this information as our starting point, that’s what we will be looking for while performing static analysis on the app. “Static analysis” means that you will \u003cstrong\u003enot\u003c/strong\u003e execute the app now, but you’ll rather just study its code. Most of the times this is all you’ll ever need to reverse something.\u003c/p\u003e\n\u003cp\u003eThere’re different tools you can use for this purpose, let’s take a look at the most popular ones.\u003c/p\u003e\n\u003ch4 id=\"apktool\"\u003e\u003ca href=\"#apktool\" class=\"headerlink\" title=\"apktool\"\u003e\u003c/a\u003eapktool\u003c/h4\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://ibotpeaches.github.io/Apktool/\"\u003eAPKTool\u003c/a\u003e is the very first tool you want to use, it is capable of decompiling the \u003ccode\u003eAndroidManifest\u003c/code\u003e file to its original XML format, the \u003ccode\u003eresources.arsc\u003c/code\u003e file and it will also convert the \u003ccode\u003eclasses.dex\u003c/code\u003e ( and \u003ccode\u003eclasses2.dex\u003c/code\u003e if present ) file to an intermediary language called \u003ccode\u003eSMALI\u003c/code\u003e, an ASM-like language used to represent the Dalvik VM opcodes as a human readable language.\u003c/p\u003e\n\u003cp\u003eIt looks like:\u003c/p\u003e\n\u003cfigure class=\"highlight smali\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e.super\u003c/span\u003e \u003cspan class=\"class\"\u003eLjava/lang/Object;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e.method\u003c/span\u003e\u003cspan class=\"keyword\"\u003e public\u003c/span\u003e\u003cspan class=\"keyword\"\u003e static\u003c/span\u003e main([\u003cspan class=\"class\"\u003eLjava/lang/String;\u003c/span\u003e)V\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e    .registers\u003c/span\u003e 2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"built_in\"\u003e sget-object \u003c/span\u003ev0, \u003cspan class=\"class\"\u003eLjava/lang/System;\u003c/span\u003e-\u0026gt;out:\u003cspan class=\"class\"\u003eLjava/io/PrintStream;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"built_in\"\u003e const-string\t\u003c/span\u003ev1, \u003cspan class=\"string\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e   \u003cspan class=\"built_in\"\u003e invoke-virtual \u003c/span\u003e{v0, v1}, \u003cspan class=\"class\"\u003eLjava/io/PrintStream;\u003c/span\u003e-\u0026gt;println(\u003cspan class=\"class\"\u003eLjava/lang/String;\u003c/span\u003e)V\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    return-void\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003e.end method\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eBut don’t worry, in most of the cases this is not the final language you’re gonna read to reverse the app ;)\u003c/p\u003e\n\u003cp\u003eGiven an APK, this command line will decompile it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapktool d application.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce finished, the \u003ccode\u003eapplication\u003c/code\u003e folder is created and you’ll find all the output of apktool in there.\u003c/p\u003e\n\u003cp\u003eYou can also use \u003ccode\u003eapktool\u003c/code\u003e to decompile an APK, modify it and then recompile it ( like \u003ca href=\"https://www.evilsocket.net/2015/01/29/nike-fuelband-se-ble-protocol-reversed/\"\u003ei did\u003c/a\u003e with the Nike+ app in order to have more debug logs for instance ), but unless the other tools will fail the decompilation, it’s unlikely that you’ll need to read \u003ccode\u003esmali\u003c/code\u003e code in order to reverse the application, let’s get to the other tools now ;)\u003c/p\u003e\n\u003ch4 id=\"jADX\"\u003e\u003ca href=\"#jADX\" class=\"headerlink\" title=\"jADX\"\u003e\u003c/a\u003ejADX\u003c/h4\u003e\u003cp\u003eThe \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/skylot/jadx\"\u003ejADX\u003c/a\u003e suite allows you to simply load an APK and look at its Java source code. What’s happening under the hood is that jADX is decompiling the APK to smali and then converting the smali back to Java. Needless to say, reading Java code is much easier than reading smali as I already mentioned :)\u003c/p\u003e\n\u003cp\u003eOnce the APK is loaded, you’ll see a UI like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://camo.githubusercontent.com/bd3c0ea851c23c4535e43590a86c940a0786faa6/687474703a2f2f736b796c6f742e6769746875622e696f2f6a6164782f6a6164782d6775692e706e67\" alt=\"jADX\"/\u003e\u003c/p\u003e\n\u003cp\u003eOne of the best features of jADX is the string/symbol search ( the \u003cimg style=\"display:inline\" src=\"https://raw.githubusercontent.com/skylot/jadx/master/jadx-gui/src/main/resources/icons-16/wand.png\"/\u003e button ) that will allow you to search for URLs, strings, methods and whatever you want to find inside the codebase of the app.\u003c/p\u003e\n\u003cp\u003eAlso, there’s the \u003ccode\u003eFind Usage\u003c/code\u003e menu option, just highlight some symbol and right click on it, this feature will give you a list of every references to that symbol.\u003c/p\u003e\n\u003ch4 id=\"Dex2Jar-and-JD-Gui\"\u003e\u003ca href=\"#Dex2Jar-and-JD-Gui\" class=\"headerlink\" title=\"Dex2Jar and JD-Gui\"\u003e\u003c/a\u003eDex2Jar and JD-Gui\u003c/h4\u003e\u003cp\u003eSimilar to jADX are the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://sourceforge.net/projects/dex2jar/\"\u003edex2jar\u003c/a\u003e and \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://jd.benow.ca/\"\u003eJD-GUI\u003c/a\u003e tools, once installed, you’ll use \u003ccode\u003edex2jar\u003c/code\u003e to convert an APK to a JAR file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/path/to/dex2jar/d2j-dex2jar.sh application.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you have the JAR file, simply open it with JD-GUI and you’ll see its Java code, pretty much like jADX:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://jd.benow.ca/img/screenshot17.png\" alt=\"JD-GUI\"/\u003e\u003c/p\u003e\n\u003cp\u003eUnfortunately JD-GUI is not as features rich as jADX, but sometimes when one tool fails you have to try another one and hope to be more lucky.\u003c/p\u003e\n\u003ch4 id=\"JEB\"\u003e\u003ca href=\"#JEB\" class=\"headerlink\" title=\"JEB\"\u003e\u003c/a\u003eJEB\u003c/h4\u003e\u003cp\u003eAs your last resort, you can try the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.pnfsoftware.com/jeb2/\"\u003eJEB\u003c/a\u003e decompiler. It’s a \u003cstrong\u003every\u003c/strong\u003e good software, but unfortunately it’s not free, there’s a trial version if you want to give it a shot, here’s how it looks like:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/jeb.png\" alt=\"JEB\"/\u003e\u003c/p\u003e\n\u003cp\u003eJEB also features an ARM disassembler ( useful when there’re native libraries in the APK ) and a debugger ( \u003cstrong\u003every\u003c/strong\u003e useful for dynamic analysis ), but again, it’s not free and it’s not cheap.\u003c/p\u003e\n\u003ch4 id=\"Static-Analysis-of-Native-Binaries\"\u003e\u003ca href=\"#Static-Analysis-of-Native-Binaries\" class=\"headerlink\" title=\"Static Analysis of Native Binaries\"\u003e\u003c/a\u003eStatic Analysis of Native Binaries\u003c/h4\u003e\u003cp\u003eAs previously mentioned, sometimes you’ll find native libraries ( \u003ccode\u003e.so\u003c/code\u003e shared objects ) inside the \u003ccode\u003elib\u003c/code\u003e folder of the APK and, while reading the Java code, you’ll find \u003ccode\u003enative\u003c/code\u003e methods declarations like the following:\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003enative\u003c/span\u003e String \u003cspan class=\"title\"\u003estringFromJNI\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThe \u003ccode\u003enative\u003c/code\u003e keyword means that the method implementation is not inside the \u003ccode\u003edex\u003c/code\u003e file but, instead, it’s declared and executed from native code trough what is called a \u003ccode\u003eJava Native Interface\u003c/code\u003e or \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developer.android.com/ndk/samples/sample_hellojni.html\"\u003eJNI\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eClose to native methods you’ll also usually find something like this:\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eSystem.loadLibrary(\u003cspan class=\"string\"\u003e\u0026#34;hello-jni\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWhich will tell you in which native library the method is implemented. In such cases, you will need an ARM ( or x86 if there’s a x86 subfolder inside the \u003ccode\u003elibs\u003c/code\u003e folder ) disassembler in order to reverse the native object.\u003c/p\u003e\n\u003ch5 id=\"IDA\"\u003e\u003ca href=\"#IDA\" class=\"headerlink\" title=\"IDA\"\u003e\u003c/a\u003eIDA\u003c/h5\u003e\u003cp\u003eThe very first disassembler and decompiler that every decent reverser should know about is \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.hex-rays.com/products/decompiler/\"\u003eHex-Rays IDA\u003c/a\u003e which is the state of the art reversing tool for native code. Along with an IDA license, you can also buy a \u003ccode\u003edecompiler\u003c/code\u003e license, in which case IDA will also be able to rebuild pseudo C-like code from the assembly, allowing you to read an higher level representation of the library logic.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/ida.gif\" alt=\"IDA\"/\u003e\u003c/p\u003e\n\u003cp\u003eUnfortunately IDA is a very expensive software and, unless you’re reversing native stuff professionaly, it’s really not worth spending all those money for a single tool … \u003csmall\u003ewarez\u003c/small\u003e … ehm … :P\u003c/p\u003e\n\u003ch5 id=\"Hopper\"\u003e\u003ca href=\"#Hopper\" class=\"headerlink\" title=\"Hopper\"\u003e\u003c/a\u003eHopper\u003c/h5\u003e\u003cp\u003eIf you’re on a budget but you need to reverse native code, instead of IDA you can give \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.hopperapp.com/\"\u003eHopper\u003c/a\u003e a try. It’s definitely not as good and complete as IDA, but it’s much cheaper and will be good enough for most of the cases.\u003c/p\u003e\n\u003cp\u003eHopper supports GNU/Linux and macOS ( no Windows! ) and, just like IDA, has a builtin decompiler which is quite decent considering its price:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/hopper.jpg\" alt=\"Hopper\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Dynamic-Analysis\"\u003e\u003ca href=\"#Dynamic-Analysis\" class=\"headerlink\" title=\"Dynamic Analysis\"\u003e\u003c/a\u003eDynamic Analysis\u003c/h3\u003e\u003cp\u003eWhen static analysis is not enough, maybe because the application is \u003ca href=\"https://www.evilsocket.net/2016/04/18/how-i-defeated-an-obfuscated-and-anti-tamper-apk-with-some-python-and-a-home-made-smali-emulator/\"\u003eobfuscated\u003c/a\u003e or the codebase is simply too big and complex to quickly isolate the routines you’re interested into, you need to go dynamic.\u003c/p\u003e\n\u003cp\u003eDynamic analysis simply means that you’ll execute the app ( like we did while performing network analysis ) and somehow trace into its execution using different tools, strategies and methods.\u003c/p\u003e\n\u003ch4 id=\"Sandboxing\"\u003e\u003ca href=\"#Sandboxing\" class=\"headerlink\" title=\"Sandboxing\"\u003e\u003c/a\u003eSandboxing\u003c/h4\u003e\u003cp\u003eSandboxing is a black-box dynamic analysis strategy, which means you’re not going to actively trace \u003cstrong\u003einto\u003c/strong\u003e the application code ( like you do while debugging ), but you’ll execute the app into some container that will log the most relevant actions for you and will present a report at the end of the execution.\u003c/p\u003e\n\u003ch5 id=\"Cuckoo-Droid\"\u003e\u003ca href=\"#Cuckoo-Droid\" class=\"headerlink\" title=\"Cuckoo-Droid\"\u003e\u003c/a\u003eCuckoo-Droid\u003c/h5\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/idanr1986/cuckoo-droid\"\u003eCuckoo-Droid\u003c/a\u003e is an Android port of the famous Cuckoo sandbox, once installed and configured, it’ll give you an activity report with all the URLs the app contacted, all the DNS queries, API calls and so forth:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/cuckoo.png\" alt=\"Cuckoo\"/\u003e\u003c/p\u003e\n\u003ch5 id=\"Joe-Sandbox\"\u003e\u003ca href=\"#Joe-Sandbox\" class=\"headerlink\" title=\"Joe Sandbox\"\u003e\u003c/a\u003eJoe Sandbox\u003c/h5\u003e\u003cp\u003eThe mobile \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.joesecurity.org/joe-sandbox-mobile\"\u003eJoe Sandbox\u003c/a\u003e is a great online service that allows you to upload an APK and get its activity report without the hassle of installing or configuring anything.\u003c/p\u003e\n\u003cp\u003eThis is a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.joesecurity.org/reports/report-14d9f1a92dd984d6040cc41ed06e273e.html\"\u003esample report\u003c/a\u003e, as you can see the kind of information is pretty much the same as Cuckoo-Droid, plus there’re a bunch of heuristics being executed in order to behaviourally correlate the sample to other known applications.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/joe.jpg\" alt=\"Joe Sandbox\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"Debugging\"\u003e\u003ca href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"\u003e\u003c/a\u003eDebugging\u003c/h4\u003e\u003cp\u003eIf sandboxing is not enough and you need to get deeper insights of the application behaviour, you’ll need to debug it. Debugging an app, in case you don’t know, means attaching to the running process with a \u003ccode\u003edebugger\u003c/code\u003e software, putting \u003ccode\u003ebreakpoints\u003c/code\u003e that will allow you to stop the execution and inspect the memory state and \u003ccode\u003estep\u003c/code\u003e into code lines one by one in order to follow the execution graph very closely.\u003c/p\u003e\n\u003ch5 id=\"Enabling-Debug-Mode\"\u003e\u003ca href=\"#Enabling-Debug-Mode\" class=\"headerlink\" title=\"Enabling Debug Mode\"\u003e\u003c/a\u003eEnabling Debug Mode\u003c/h5\u003e\u003cp\u003eWhen an application is compiled and eventually published to the Google Play Store, it’s usually its \u003ccode\u003erelease\u003c/code\u003e build you’re looking at, meaning debugging has been disabled by the developer and you can’t attach to it directly. In order to enable debugging again, we’ll need to use \u003ccode\u003eapktool\u003c/code\u003e to decompile the app:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapktool d application.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen you’ll need to edit the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e generated file, adding the \u003ccode\u003eandroid:debuggable=\u0026#34;true\u0026#34;\u003c/code\u003e attribute to its \u003ccode\u003eapplication\u003c/code\u003e XML node:\u003c/p\u003e\n\u003cfigure class=\"highlight xml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"meta\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003emanifest\u003c/span\u003e \u003cspan class=\"attr\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003epackage\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;com.company.appname\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e                                                                     \u003cspan class=\"attr\"\u003eplatformBuildVersionCode\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;24\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e                                                                     \u003cspan class=\"attr\"\u003eplatformBuildVersionName\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;7.0\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.permission.WRITE_EXTERNAL_STORAGE\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.permission.INTERNET\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eapplication\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;@mipmap/ic_launcher\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e        \u003cspan class=\"attr\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;@string/app_name\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e        \u003cspan class=\"attr\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e        \u003cspan class=\"attr\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;@style/AppTheme\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e        \u003cspan class=\"attr\"\u003eandroid:debuggable\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e \u0026lt;-- !!! NOTICE ME !!! --\u0026gt;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eactivity\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;com.company.appname.MainActivity\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003eaction\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"tag\"\u003e\u0026lt;\u003cspan class=\"name\"\u003ecategory\u003c/span\u003e \u003cspan class=\"attr\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"string\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/\u003cspan class=\"name\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eOnce you updated the manifest, let’s rebuild the app:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapktool b -d application_path output.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let’s resign it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/appium/sign\njava -jar sign/dist/signapk.jar sign/testkey.x509.pem sign/testkey.pk8 output.apk signed.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd reinstall it on the device (make sure you unistalled the original version first):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eadb install signed.apk\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow you can proceed debugging the app ^_^\u003c/p\u003e\n\u003ch5 id=\"Android-Studio\"\u003e\u003ca href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"\u003e\u003c/a\u003eAndroid Studio\u003c/h5\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://developer.android.com/studio/debug/index.html\"\u003eAndroid Studio\u003c/a\u003e is the official Android IDE, once you have debug mode enabled for your app, you can directly attach to it using this IDE and start debugging:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/androidstudio.png\" alt=\"Android Studio Debugger\"/\u003e\u003c/p\u003e\n\u003ch5 id=\"IDA-1\"\u003e\u003ca href=\"#IDA-1\" class=\"headerlink\" title=\"IDA\"\u003e\u003c/a\u003eIDA\u003c/h5\u003e\u003cp\u003eIf you have an IDA license that supports Dalvik debugging, you can attach to a running process and step trough the smali code, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.hex-rays.com/products/ida/support/tutorials/debugging_dalvik.pdf\"\u003ethis document\u003c/a\u003e describes how to do it, but basically the idea is that you upload the ARM debugging server ( a native ARM binary ) on your device, you start it using \u003ccode\u003eadb\u003c/code\u003e and eventually you start your debugging session from IDA.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/04/idadbg.gif\" alt=\"IDA Dalvik Debugger\"/\u003e\u003c/p\u003e\n\u003ch4 id=\"Dynamic-Instrumentation\"\u003e\u003ca href=\"#Dynamic-Instrumentation\" class=\"headerlink\" title=\"Dynamic Instrumentation\"\u003e\u003c/a\u003eDynamic Instrumentation\u003c/h4\u003e\u003cp\u003eDynamic instrumentation means that you want to modify the application behaviour at runtime and in order to do so you inject some “agent” into the app that you’ll eventually use to instrument it.\u003c/p\u003e\n\u003cp\u003eYou might want to do this in order to make the app bypass some checks ( for instance, if public key pinning is enforced, you might want to disable it with dynamic instrumentation in order to easily inspect the HTTPS traffic ), make it show you information it’s not supposed to show ( unlock “Pro” features, or debug/admin activities ), etc.\u003c/p\u003e\n\u003ch5 id=\"Frida\"\u003e\u003ca href=\"#Frida\" class=\"headerlink\" title=\"Frida\"\u003e\u003c/a\u003eFrida\u003c/h5\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.frida.re/\"\u003eFrida\u003c/a\u003e is a great and free tool you can use to inject a whole Javascript engine into a running process on Android, iOS and many other platforms … but why Javascript?\u003c/p\u003e\n\u003cp\u003eBecause once the engine is injected, you can instrument the app in very cool and easy ways like this:\u003c/p\u003e\n\u003cfigure class=\"highlight python\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003efrom\u003c/span\u003e __future__ \u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e print_function\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e frida\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e sys\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# let\u0026#39;s attach to the \u0026#39;hello process\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esession = frida.attach(\u003cspan class=\"string\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# now let\u0026#39;s create the Javascript we want to inject\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escript = session.create_script(\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003eInterceptor.attach(ptr(\u0026#34;%s\u0026#34;), {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    onEnter: function(args) {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e        send(args[0].toInt32());\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e    }\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e});\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e % \u003cspan class=\"built_in\"\u003eint\u003c/span\u003e(sys.argv[\u003cspan class=\"number\"\u003e1\u003c/span\u003e], \u003cspan class=\"number\"\u003e16\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# this function will receive events from the js\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003edef\u003c/span\u003e \u003cspan class=\"title\"\u003eon_message\u003c/span\u003e(\u003cspan class=\"params\"\u003emessage, data\u003c/span\u003e):\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    print(message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# let\u0026#39;s start!\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escript.on(\u003cspan class=\"string\"\u003e\u0026#39;message\u0026#39;\u003c/span\u003e, on_message)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003escript.load()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esys.stdin.read()\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eIn this example, we’re just inspecting some function argument, but there’re hundreds of things you can do with Frida, just \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.frida.re/docs/home/\"\u003eRTFM!\u003c/a\u003e and use your imagination :D\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/dweinstein/awesome-frida\"\u003eHere\u003c/a\u003e‘s a list of cool Frida resources, enjoy!\u003c/p\u003e\n\u003ch5 id=\"XPosed\"\u003e\u003ca href=\"#XPosed\" class=\"headerlink\" title=\"XPosed\"\u003e\u003c/a\u003eXPosed\u003c/h5\u003e\u003cp\u003eAnother option we have for instrumenting our app is using the \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://repo.xposed.info/\"\u003eXPosed Framework\u003c/a\u003e. XPosed is basically an instrumentation layer for the whole Dalvik VM which \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://repo.xposed.info/module/de.robv.android.xposed.installer\"\u003erequires\u003c/a\u003e you to to have a rooted phone in order to install it.\u003c/p\u003e\n\u003cp\u003eFrom XPosed \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/rovo89/XposedBridge/wiki/Development-tutorial\"\u003ewiki\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThere is a process that is called \u0026#34;Zygote\u0026#34;. This is the heart of the Android runtime. Every application is started as a copy (\u0026#34;fork\u0026#34;) of it. This process is started by an /init.rc script when the phone is booted. The process start is done with /system/bin/app_process, which loads the needed classes and invokes the initialization methods.\n\nThis is where Xposed comes into play. When you install the framework, an extended app_process executable is copied to /system/bin. This extended startup process adds an additional jar to the classpath and calls methods from there at certain places. For instance, just after the VM has been created, even before the main method of Zygote has been called. And inside that method, we are part of Zygote and can act in its context.\n\nThe jar is located at /data/data/de.robv.android.xposed.installer/bin/XposedBridge.jar and its source code can be found here. Looking at the class XposedBridge, you can see the main method. This is what I wrote about above, this gets called in the very beginning of the process. Some initializations are done there and also the modules are loaded (I will come back to module loading later).\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you’ve installed XPosed on your smartphone, you can start developing your own module (again, follow the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/rovo89/XposedBridge/wiki/Development-tutorial\"\u003eproject wiki\u003c/a\u003e), for instance, here’s an example of how you would hook the \u003ccode\u003eupdateClock\u003c/code\u003e method of the SystemUI application in order to instrument it:\u003c/p\u003e\n\u003cfigure class=\"highlight java\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epackage\u003c/span\u003e de.robv.android.xposed.mods.tutorial;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e de.robv.android.xposed.XposedHelpers.findAndHookMethod;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e de.robv.android.xposed.IXposedHookLoadPackage;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e de.robv.android.xposed.XC_MethodHook;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eTutorial\u003c/span\u003e \u003cspan class=\"keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"title\"\u003eIXposedHookLoadPackage\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ehandleLoadPackage\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003cspan class=\"keyword\"\u003efinal\u003c/span\u003e LoadPackageParam lpparam)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!lpparam.packageName.equals(\u003cspan class=\"string\"\u003e\u0026#34;com.android.systemui\u0026#34;\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        findAndHookMethod(\u003cspan class=\"string\"\u003e\u0026#34;com.android.systemui.statusbar.policy.Clock\u0026#34;\u003c/span\u003e, lpparam.classLoader, \u003cspan class=\"string\"\u003e\u0026#34;updateClock\u0026#34;\u003c/span\u003e, \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003enew\u003c/span\u003e XC_MethodHook() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ebeforeHookedMethod\u003c/span\u003e\u003cspan class=\"params\"\u003e(MethodHookParam param)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// this will be called before the clock was updated by the original method\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"meta\"\u003e@Override\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003eafterHookedMethod\u003c/span\u003e\u003cspan class=\"params\"\u003e(MethodHookParam param)\u003c/span\u003e \u003cspan class=\"keyword\"\u003ethrows\u003c/span\u003e Throwable \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                \u003cspan class=\"comment\"\u003e// this will be called after the clock was updated by the original method\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    });\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThere’re already a lot of \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://repo.xposed.info/module-overview\"\u003euser contributed modules\u003c/a\u003e you can use, study and modify for your own needs.\u003c/p\u003e\n\u003ch3 id=\"Conclusion\"\u003e\u003ca href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"\u003e\u003c/a\u003eConclusion\u003c/h3\u003e\u003cp\u003eI hope you’ll find this reference guide useful for your Android reversing adventures, keep in mind that the most important thing while reversing is not the tool you’re using, but how you use it, so you’ll have to learn how to choose the appropriate tool for your scenario and this is something you can only learn with experience, so enough reading and start reversing! :D\u003c/p\u003e\n\u003cdiv style=\"position:relative;height:0;padding-bottom:56.25%\"\u003e\u003ciframe src=\"https://www.youtube.com/embed/I1188GO4p1E?ecver=2\" width=\"640\" height=\"360\" frameborder=\"0\" style=\"position:absolute;width:100%;height:100%;left:0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2017-04-27T17:09:48Z",
  "Author": "Simone Margaritelli"
}