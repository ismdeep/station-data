{
  "Source": "www.evilsocket.net",
  "Title": "Hide Your Servers in Plain Sight, Presenting ShieldWall",
  "Link": "https://www.evilsocket.net/2021/02/13/Hide-your-servers-in-plain-sight-presenting-ShieldWall/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003e\u003ca href=\"/2020/05/26/Just-taking-a-break/\"\u003eLong time no see\u003c/a\u003e friends! Despite this break period ended up not being as long as I hoped for / needed, it’s been nevertheless refreshing both from a personal standpoint (i can read and write music now!!!!! that’s so freaking awesomeeeeee … anyways) and from a creative one. I’ve been back to coding and publishing a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/uroboros\"\u003ecouple\u003c/a\u003e \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/ditto\"\u003eof new tools\u003c/a\u003e, but it’s of the third and simplest of them all I want to blog about today :D\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(sound of viking horns) introducing … project \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://shieldwall.me/\"\u003eShieldWall\u003c/a\u003e!\u003c/em\u003e\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"/images/2021/shieldwall_gophers_vikings.jpg\"/\u003e\n\u003csmall\u003eCredits: \u003ca href=\"https://www.pinterest.it/pin/584905070337190852/\" target=\"_blank\"\u003ei have no idea how this works\u003c/a\u003e\u003c/small\u003e\n\u003c/center\u003e\n\u003cp\u003eSay that you need to host some personal / sensitive service of yours, in such a way that it is always easily accessible by any of your devices (including mobile) without configuration (no VPN, SSH tunnel, etc), and \u003cstrong\u003eto those devices only\u003c/strong\u003e (at the packet level, so that shodan \u0026amp;\u0026amp; friends can’t index the port(s)) as they change their IP addresses? (The last part is clearly what adds complexity to the task.) \u003c/p\u003e\n\u003cp\u003eWhile you think about how you would do it (or maybe how you do it already), let me provide some more context with my usecase.\u003c/p\u003e\n\u003ch3 id=\"Where-do-I-host-“That-Thing”\"\u003e\u003ca href=\"#Where-do-I-host-“That-Thing”\" class=\"headerlink\" title=\"Where do I host “That Thing”?\"\u003e\u003c/a\u003eWhere do I host “That Thing”?\u003c/h3\u003e\u003cp\u003eYou might be familiar with my other project, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arc\"\u003eArc\u003c/a\u003e, if not go check it out now because it’s pretty useful and it replaces all you password managers, evernotes and todos. Me and the early adopters started using Arc to store all sorts of things. We have instances with passwords, other for 2FA, for documents, notes, reminders, video, audio, and the list keeps going. Since its first version it has improved a lot and now both the API and the frontend live in one single binary compiled for any OS (Golang FTW), but it always had and still has one major usability issue: \u003cem\u003ewhere do I host that thing\u003c/em\u003e? \u003c/p\u003e\n\u003cp\u003eI mean, as long as you run it and use it just on your laptop, it’s done. And while you’re at home you only need a raspberry pi (or to open the port on your laptop) for other devices like your smartphone to use it. But what how do you do when you’re away from home? Sure the data is end-to-end encrypted so even if you host it on a public server and somebody somehow hacks into it, they just get AES256 enrypted crap. But what if they inject some javascript in the UI that grabs your access and encryption keys next time you use it? Yeah … i am \u003cem\u003ethat\u003c/em\u003e paranoid … bear with me.\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"/images/2021/paranoia.jpg\"/\u003e\n\u003c/center\u003e\n\u003cp\u003eThis can be generalized to other usecases. For instance, red team operators might want to keep hidden their infrastructure while still being able to connect for setup and mainteinance. Or really any type of service that needs to be on the public internet for ease of access but that contains data that’s for your eyes only.\u003c/p\u003e\n\u003ch3 id=\"Possible-Solutions\"\u003e\u003ca href=\"#Possible-Solutions\" class=\"headerlink\" title=\"Possible Solutions\"\u003e\u003c/a\u003ePossible Solutions\u003c/h3\u003e\u003cp\u003e\u003ca href=\"/2017/12/07/DIY-Portable-Secrets-Manager-with-a-RPI-Zero-and-the-ARC-Project/\"\u003eMy first terrible attempt\u003c/a\u003e to make that stuff usable wherever I go was based on Bluetooth (of course this approach doesn’t apply to anything other than my Arc usecase). The idea was to host Arc on a small Raspberry Pi 0 with a battery pack and have the service responding via BTNAP assigned IP address. Not only it was as complex to configure as it sounds, but it was also unstable as f. \u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eBluetooth based solution\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003eThe second approach was slightly better in terms of usability. Arc was running on a Raspberry Pi at home and published as a Tor hidden service that I started only when leaving home and then accessed with Tor browser using the .onion url I saved each time on some cloud note. That is sloooooooooooow, unreliable as it depends on your home internet connectivity and it still exposes the service to whoever is crawling and indexing hidden services. Not to mention that Tor traffic is blocked in many networks.\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eTor based solution\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003eAs \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/acor3/status/1360501389491916800\"\u003eMarco Acorte suggested\u003c/a\u003e SSH tunneling is a partial solution. You can make the service bind to localhost on the server, then authenticate to it via SSH from the device you need to use, starting an authenticated and encrypted tunnel to the server bound to localhost. It works, but it exposes the ssh port of the server (with its fingerprint, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.reddit.com/r/onions/comments/2t3bm6/shodan_search_can_use_ssh_fingerprinting_to/\"\u003ethat can be used in many ways\u003c/a\u003e) and it’s not the simplest solution when you are on a rush and need to authenticate to something from your mobile device.\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eSSH tunnel based solution\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003eVPN is another option but additionally to having the same limitations of the SSH tunnel approach, it also adds setup\u0026amp;configuration complexity. As \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/NGiollaEaspaig/status/1360599683916324865\"\u003e@NGiollaEaspaig suggested\u003c/a\u003e there are several cloud specific options for this. But not everybody wants to or knows how to setup Azure Conditional Access Policies :D There’s the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/acor3/status/1359540384750309376\"\u003engrok based solution\u003c/a\u003e too, but it works proxying the traffic to your app, meaning it’s their servers that will receive it and route it to the real server, similarly to what also CloudFlare offers. Both cases you’d be handing over control of your most sensitive traffic to another entity. You see where I am going with this … I’m quite difficult to satisty! :’D\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eCLOUD \u0026amp; Other Paid Friends\u003c/del\u003e\u003c/p\u003e\n\u003ciframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/CakqPuwFAIc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003ch3 id=\"Do-you-even-iptables-Bro\"\u003e\u003ca href=\"#Do-you-even-iptables-Bro\" class=\"headerlink\" title=\"Do you even iptables Bro?\"\u003e\u003c/a\u003eDo you even iptables Bro?\u003c/h3\u003e\u003cp\u003eI do believe that the simpler solution is always the best one, and I like the idea of controlling this access mechanism myself via iptables. \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://unix.stackexchange.com/questions/11851/iptables-allow-certain-ips-and-block-all-other-connection\"\u003eIt is trivial\u003c/a\u003e to block all traffic and only allow certain IP addresses on certain ports. Another reason why IMO it’s the best tool for this job is that it works at the packet level, meaning it is protocol agnostic and it doesn’t only work for HTTP based applications. The only (usability) issue in this case is that freaking IP address that changes. You can’t whitelist beforehand something you don’t know yet.\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"/images/2021/smart.png\"/\u003e\n\u003c/center\u003e\n\u003cp\u003eSo I thought, woudln’t it be so nice and clean having a stupid-simple agent running on this server (normal server on the \u003cem\u003edangerous public internet\u003c/em\u003e), using iptables to \u003cstrong\u003eblock everything by default\u003c/strong\u003e and periodically polling a public API (\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://shieldwall.me/\"\u003ehosted elsewhere\u003c/a\u003e) that’ll return the list of IP addresses to whitelist. I could then just log in to this public service with my device with a normal browser and just push a rule with my IP. \u003cem\u003eI KNOW RIGHT?!\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSo yeah I coded this thing.\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"/images/2021/shieldwall1.png\" width=\"800px\"/\u003e\n\u003cbr/\u003e\n\u003cimg src=\"/images/2021/shieldwall2.png\" width=\"800px\"/\u003e\n\u003c/center\u003e\n\u003cp\u003eThe service is free and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://shieldwall.me/#/register\"\u003eyou’re welcome to sign up\u003c/a\u003e, use it and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/shieldwall\"\u003ereport any bugs\u003c/a\u003e :D Alternatively you can host the API and frontend yourself and have your own infrastructure.\u003c/p\u003e\n\u003cp\u003eThe installation process once you registered an account is pretty simple (Golang FTW again):\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003emkdir /tmp/sw\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003ecd\u003c/span\u003e /tmp/sw\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewget https://github.com/evilsocket/shieldwall/releases/download/v1.0.0/shieldwall-agent_1.0.0_linux_arm64.tar.gz\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etar xvf shieldwall-agent_1.0.0_linux_arm64.tar.gz\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esudo ./install.sh\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThe agent is now installed as a systemd service, but it is not yet started nor enabled for autostart. You will first need to register an account on \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://shieldwall.me/\"\u003ehttps://shieldwall.me/\u003c/a\u003e and then edit the /etc/shieldwall/config.yaml configuration file, making sure it matches what you see on the agent page.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIt is very important that you double check the configuration before the next step, if the agent can’t authenticate because of a wrong token, you will be locked out by the firewall and unable to log back.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eYou can now enable the service and start it. If configured so, it will automatically download and install its updates from github:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003esudo systemctl \u003cspan class=\"built_in\"\u003eenable\u003c/span\u003e shieldwall-agent\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003esudo service shieldwall-agent start\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThat’s it … now you can use your shieldwall.me account to instrument this agent and only open ports to your IP from a given amount of time (or permantently, but i stronlgy suggest you always set an expire time for the rules so that the agent will block everything again after a while … just in case).\u003c/p\u003e\n\u003ch3 id=\"Final-considerations-and-new-features\"\u003e\u003ca href=\"#Final-considerations-and-new-features\" class=\"headerlink\" title=\"Final considerations and new features\"\u003e\u003c/a\u003eFinal considerations and new features\u003c/h3\u003e\u003cp\u003eShieldWall is a very simple concept that can nevertheless offer a strong layer of security. But that’s what it is, just one layer. It is not intended to replace a proper authentication mechanism in your service, or strong passwords or generally speaking good practices in security. But damn if it works well in what it does :D\u003c/p\u003e\n\u003cp\u003eRight now it only supports iptables and even tho it’s relatively trivial to implement the support for other firewalls I’m not planning to do it unless I’ll see some major interest in the project. Other ideas include the use of an intermediary S3 bucket, let me explain this.\u003c/p\u003e\n\u003cp\u003eYour agents will be talking to the shieldwall.me server, meaning that I (or whoever is controlling the infrastructure if you hosted it elsewhere) can potentially know the IP addresses of your servers. I really don’t care to be honest, but in order to add an additional level of privacy what I could do is giving you the option to specify the connection details to an S3 bucket in your control in your shieldwall.me profile page. If configured so, the server would be only pushing the JSON of the rules to that bucket for your agents to consume. That way my server and the agents would never see each other and there wouldn’t be any way for the server administrator to even know their IP addresses.\u003c/p\u003e\n\u003cp\u003eIn this case as well, not planning on implementing it any time soon unless I see registrations going up, as the tool already works great as it is for my usecase :D\u003c/p\u003e\n\u003cp\u003eI hope you enjoyed the post and most importantly that you’ll find the service useful, cheers! ^_^\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2021-02-13T14:34:28Z",
  "Author": "Simone Margaritelli"
}