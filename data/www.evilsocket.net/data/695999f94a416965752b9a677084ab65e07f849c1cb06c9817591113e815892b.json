{
  "Source": "www.evilsocket.net",
  "Title": "Weaponizing and Gamifying AI for WiFi Hacking: Presenting Pwnagotchi 1.0.0",
  "Link": "https://www.evilsocket.net/2019/10/19/Weaponizing-and-Gamifying-AI-for-WiFi-Hacking-Presenting-Pwnagotchi-1-0-0/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eThis is the story of a summer project that started out of boredom and that evolved into something incredibly fun and unique. It is also the story of how that project went from being discussed on a porch by just two people, to having \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.herokuapp.com/\"\u003ea community made of almost 700 awesome people\u003c/a\u003e (and counting!) that gathered, polished it and made today’s release possible.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTL;DR: You can \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/releases\"\u003edownload the 1.0.0 .img file from here\u003c/a\u003e, then just \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.ai/installation/\"\u003efollow the instructions\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIf you want the long version instead, sit back, relax and enjoy the ride. Let me tell you: it’s going to be quite a long journey compared to my usual blog posts, but it’ll be worth it (i hope) and fun (i hope even harder).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/X68GXrn.png\" alt=\"hack the planet\"/\u003e\u003c/p\u003e\n\u003cp\u003eLet’s begin …\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003cp\u003eThis summer I spent ~3 months in the US and as most of the long trips I do, I had with me some basic wireless equipment for working and hacking stuff while going around. Among other things, I had my \u003ca href=\"/2018/07/28/Project-PITA-Writeup-build-a-mini-mass-deauther-using-bettercap-and-a-Raspberry-Pi-Zero-W/\"\u003eRaspberry Pi Zero W with PITA\u003c/a\u003e and an iPad i use for reading, emails but also as a screen for headless boards like that RPi when I want to have some portable bettercap installation without bringing an entire laptop. \u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/aMVUNx8.jpg\" alt=\"iPad\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"The-Predecessor\"\u003e\u003ca href=\"#The-Predecessor\" class=\"headerlink\" title=\"The Predecessor\"\u003e\u003c/a\u003eThe Predecessor\u003c/h2\u003e\u003cp\u003ePITA as an \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/caplets/blob/master/pita.cap\"\u003eautomated deauther and handshakes collector\u003c/a\u003e isn’t exactly what you’d define “smart”: the only thing it does is deauthing everything while bettercap is doing its normal WiFi scanning things in the background, every few seconds, constantly, while passively hoping for handshakes. I wasn’t even close to satisfied: there was a lot there that could be improved and instrumented with \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.bettercap.org/modules/core/api.rest/\"\u003ebettercap’s REST API\u003c/a\u003e, more attacks bettercap could perform that weren’t being used. So I quickly hacked together some python code to talk with the API and use the results in a smarter way. This ended up being the very first iteration of \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://i.imgur.com/55DFIhR.jpg\"\u003ea faceless and AI-less Pwnagotchi\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs I said the code was nothing special, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://i.imgur.com/pe5UeaJ.png\"\u003ea very crude PoC\u003c/a\u003e, but since the very first walks, it already started giving \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://i.imgur.com/js74YIk.png\"\u003eway better results\u003c/a\u003e than the original PITA. It quickly started being frustrating not being able to check what was going on with the algorithm during my warwalking sessions, so I started searching for a suitable display.\u003c/p\u003e\n\u003ch2 id=\"The-Face\"\u003e\u003ca href=\"#The-Face\" class=\"headerlink\" title=\"The Face\"\u003e\u003c/a\u003eThe Face\u003c/h2\u003e\u003cp\u003eWhen it’s about compactness, low power consumption and good readability under the sun, e-Paper displays have no rivals, and after educating myself a bit I settled for a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.waveshare.com/wiki/2.13inch_e-Paper_HAT\"\u003eWaveshare 2.13 inches e-Paper HAT\u003c/a\u003e due to its partial refresh support and its definition - I had no idea yet about what was about to come, but now I had a canvas to work with.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/gX8zpGo.jpg\" alt=\"canvas\"/\u003e\u003c/p\u003e\n\u003cp\u003eNot having a driving license I walk pretty much wherever I go, that’s a pretty nice and healthy habit to have for several reasons, but my favourite one is that walking helps me thinking. So I started staring at this thing \u003cstrong\u003ea lot\u003c/strong\u003e, and thinking how to add new information on the display without making the font so small to be unreadable, how to organize it visually and what else to do with all that space in general.\u003c/p\u003e\n\u003cp\u003eThe more I thought about it, the more it made sense to organize the whole thing like the UI of a videogame: you have a score (the number of handshakes), a timer, few other statistics and everything is changing as a consequence of the WiFi things around. This is also the point where I started thinking about this thing as a creature that was “eating” the handshakes, in a way I was getting attached this new little thing (yes I know, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.youtube.com/watch?v=nHpUMgAGLtM\"\u003eI’m a nerd\u003c/a\u003e) that now was so strongly reminding me of \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Tamagotchi\"\u003emy old Tamagotchi\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI needed a face, possibly map the status (“waiting …”, “scanning …”, …) to random sentences with a bit more of personality and I wanted all the other statistics to influence the expressivity of this thing: bored when there’re no new handshakes to collect, then sad, excited and so on. Something like …\u003c/p\u003e\n\u003ccenter\u003e\n\u003ciframe src=\"https://player.vimeo.com/video/367423810\" width=\"100%\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/center\u003e\n\u003cp\u003e\u003cstrong\u003eI had no idea\u003c/strong\u003e back then that just adding a simple, ASCII based face to something was the best way to get emotionally overly attached to that thing … I also wasn’t expecting another effect that showed up from the beginning: by giving it different “moods”, and by having those moods depending on a real world environment, I created a WiFi-based \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Finite-state_machine\"\u003eautomata\u003c/a\u003e whose mood transitions were everything but trivial. In different words, if you take something as random as, say, wether your neighbour is using his smart TV or not and you make that influence a simple automata, that automata seems a bit alive :D\u003c/p\u003e\n\u003cp\u003eThis is where me and my girlfriend (sadly now ex, but \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.instagram.com/p/B1Mup7GCrVt/\"\u003estill amazing\u003c/a\u003e) went completely nuts about it. I named my unit Alpha and built a second one, Beta, that I gave her. She literally started nursing this thing, and we started playing: we went for random explorative walks just to make the units stop complaining about being bored, to see them happier, and to see that “number of unique pwned networks” going higher and higher due to some new network we managed to spot … it was amazing to literally look at the algorithm adapting to the WiFi scenario and “expressing itself” in different ways. It might sound a bit crazy but hey, if that gives two hackers an excuse to explore more the real world by looking at it with different eyes, and puts a smile on their faces, why not? :D\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/Pr0Lwdt.jpg\" alt=\"love\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"The-Personality\"\u003e\u003ca href=\"#The-Personality\" class=\"headerlink\" title=\"The Personality\"\u003e\u003c/a\u003eThe Personality\u003c/h2\u003e\u003cp\u003eWith time I kept adding more and more variables and parameters that determined how the algorithm adapted to different circumstances: counters so that if the unit was quickly losing sight of a target (because, say, we were walking faster), it would refresh its data with a shorter period, timeouts, multipliers for the timeouts, everything you can imagine to add to such an algorithm to make it every day a bit smarter and a bit better in adapting fast to the places we were exploring. By the end of this process I ended up with this basic set parameters, that I started calling the “personality” of the unit:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eyaml personality: # advertise our presence advertise: true # perform a deauthentication attack to client stations in order to get full or half handshakes deauth: true # send association frames to APs in order to get the PMKID associate: true # list of channels to recon on, or empty for all channels channels: [] # minimum WiFi signal strength in dBm min_rssi: -200 # number of seconds for wifi.ap.ttl ap_ttl: 120 # number of seconds for wifi.sta.ttl sta_ttl: 300 # time in seconds to wait during channel recon recon_time: 30 # number of inactive epochs after which recon_time gets multiplied by recon_inactive_multiplier max_inactive_scale: 2 # if more than max_inactive_scale epochs are inactive, recon_time *= recon_inactive_multiplier recon_inactive_multiplier: 2 # time in seconds to wait during channel hopping if activity has been performed hop_recon_time: 10 # time in seconds to wait during channel hopping if no activity has been performed min_recon_time: 5 # maximum amount of deauths/associations per BSSID per session max_interactions: 3 # maximum amount of misses before considering the data stale and triggering a new recon max_misses_for_recon: 5 # number of active epochs that triggers the excited state excited_num_epochs: 10 # number of inactive epochs that triggers the bored state bored_num_epochs: 15 # number of inactive epochs that triggers the sad state sad_num_epochs: 25\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThese parameters alone, even with very small changes, can influence how the algorithm works and how the UI reflects that dramatically. But I wasn’t entirely happy with it yet, because these parameters were just constants in a YAML configuration file. I had to pick them manually and change that file before booting the unit, depending on the type of walk (big office? fast walk in residential area? mall? etc): things like shorter timeouts for faster walks, longer ones for when we visited a place and were more stationary in it, and so on. The algorithm adapted, via the parameters, but the parameters themselves didn’t, I wanted to do better.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/npYwQoI.png\" alt=\"params\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe ideal algorithm should:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eobserve “something” from the environment (like the access points, client stations and so forth) \u003c/li\u003e\n\u003cli\u003edecide, depending on this observation and the current status, what is the best set of parameters to use \u003c/li\u003e\n\u003cli\u003eiteratively repeat this process every time a new observation is available.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you think about this in very abstract terms, it’s not very different than you playing a videogame, where your observation is the screen you’re looking at and the parameters are which buttons to press. In fact, it turned out that \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://becominghuman.ai/getting-mario-back-into-the-gym-setting-up-super-mario-bros-in-openais-gym-8e39a96c1e41\"\u003ewe already have the technology\u003c/a\u003e to solve this type of problems, it’s called reinforcement learning, in our specific case it’s \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://towardsdatascience.com/deep-learning-vs-deep-reinforcement-learning-algorithms-in-retail-industry-ii-9c17c83ecf2f\"\u003edeep reinforcement learning\u003c/a\u003e. So far, the state of the art benchmarks for these systems are Super Mario levels, Atari games or, as you might have heard from the news some time ago, some \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://deepmind.com/research/case-studies/alphago-the-story-so-far\"\u003every famous board games\u003c/a\u003e. But nobody, as far as I found out during my research, ever thought of using it to orchestrate an algorithm running on top of an offensive framework, with a cute face :D \u003c/p\u003e\n\u003cp\u003e I wanted to use this type of algorithms so bad, but I had a problem: I never worked with them, or even just remotely knew anything at all about them, neither I had the theoretical foundation I needed in order to understand them. Fortunately knowledge these days is (almost) free, so I \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.amazon.it/gp/product/B076H9VQH6/\"\u003efound a very good book\u003c/a\u003e that I started studying avidly …\u003c/p\u003e\n\u003cp\u003e \u003cimg src=\"https://i.imgur.com/89JzYwx.jpg\" alt=\"study\"/\u003e\u003c/p\u003e\n\u003cp\u003e and kept studying for a while …\u003c/p\u003e\n\u003cp\u003e \u003cimg src=\"https://i.imgur.com/Jy9Ix40.jpg\" alt=\"study 2\"/\u003e\u003c/p\u003e\n\u003cp\u003e A little break from the AI part, as I had to study quite for some time :D \u003c/p\u003e\n\u003ch2 id=\"The-Voice\"\u003e\u003ca href=\"#The-Voice\" class=\"headerlink\" title=\"The Voice\"\u003e\u003c/a\u003eThe Voice\u003c/h2\u003e\u003cp\u003e Being affected by compulsive coding, I couldn’t simply spend the whole time reading books without writing anything new (after all, we kept playing with the units and wanted to have new stuff implemented), so I also started working on another idea I had: I wanted Alpha and Beta to be able to detect each other and exchange with each other very basic information - but how do you communicate anything at all from a computer when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe main and only WiFi interface is in monitor mode and already being used for WiFi scanning, hopping and frames injection.\u003c/li\u003e\n\u003cli\u003eYou have Bluetooth, but you want to keep it free for other uses (tethering, like we’re doing today, or maybe integrating BLE attacks too some day)\u003c/li\u003e\n\u003cli\u003eYou’re using the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.kernel.org/doc/html/v4.17/driver-api/usb/gadget.html\"\u003eUSB ports in gadget mode\u003c/a\u003e, so you can’t use external USB devices, like another WiFi.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e Simple (well, kind of), you implement a \u003cstrong\u003eparasite protocol\u003c/strong\u003e on top of the WiFi standard! :D Bettercap was putting the WiFi card in monitor mode and tuning it to different channels at various intervals, but nothing prevented me to inject additional frames from another process.\u003c/p\u003e\n\u003cp\u003e I didn’t have any control over the channel, or the intervals, or the timing, but it was safe to assume that given enough time (a few seconds to minutes), the algorithm on each unit would have covered all supported channels, therefore I only needed to “keep sending stuff” and at some point I knew it would have being detected by the other unit when it hopped on the same channel of the sender. The “stuff” I decided to use is pretty simple and based on standard structures that normal WiFi routers are already using to advertise their presence: \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Beacon_frame\"\u003ebeacon frames\u003c/a\u003e. Each WiFi access point, every few milliseconds, is sending these packets with a bunch of information about itself, like its ESSID, supported frequencies and whatnot - this is what allows your phone to see your home WiFi when you connect to it.\u003c/p\u003e\n\u003cp\u003e This seemed like the perfect structure to encapsulate Pwnagotchi’s advertisement, as I only needed to define a new, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwngrid/blob/master/wifi/defines.go#L10\"\u003eout of the WiFi standard identifier\u003c/a\u003e to only encapsulate my type of information. This way, the units can detect each other and exchange their status from several meters away, but they are not visible as normal WiFi access points.\u003c/p\u003e\n\u003cp\u003e \u003cimg src=\"https://i.imgur.com/CZ9qw3F.jpg\" alt=\"advertising\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"The-AI\"\u003e\u003ca href=\"#The-AI\" class=\"headerlink\" title=\"The AI\"\u003e\u003c/a\u003eThe AI\u003c/h2\u003e\u003cp\u003eIt took me weeks, so in case you don’t want to dig into the book or the links I’ve referenced above, here’s a very simplified TL;DR of the algorithm I’ve picked from the book and implemented in Pwnagotchi, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://towardsdatascience.com/understanding-actor-critic-methods-931b97b6df3f\"\u003eA2C\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere are \u003cstrong\u003etwo\u003c/strong\u003e relatively simple \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Multilayer_perceptron\"\u003eneural networks\u003c/a\u003e that at each epoch (basically at each loop of the main algorithm, when a new observation is available) are trying, in a way competitively, to estimate how the current situation looks like in terms of potential reward (number of handshakes) and what’s the best policy (the set of parameters) to use in order to maximize \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.ai/usage/#the-reward-function\"\u003ethe reward value\u003c/a\u003e. These are basically two sides of the same thing and by approaching this from these two ways the algorithm can converge quickly to very useful solutions. \u003c/p\u003e\n\u003cp\u003eIn my case, I decided to use as an “observation”, the following features, that should be enough to give the AI a rough estimation of what’s going on:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAn histogram of the number of access points per channel - so that the AI knows on which channels to look at.\u003c/li\u003e\n\u003cli\u003eAn histogram of the number of client stations, per channel - so that the AI knows which channels are best for deauthentication attacks.\u003c/li\u003e\n\u003cli\u003eAn histogram of the number of other Pwnagotchis, per channel - so that the AI can learn to cooperate with others by going on less crowded channels.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHowever, Pwnagotchi’s has something that makes it very different from any of the use cases and algorithms described in the book. You can usually fast forward, rewind and replay videogame levels. Even during simpler supervised learning, you have all at once the entire temporal snapshot of data that your system needs to learn, being it \u003ca href=\"/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/\"\u003ea malware dataset\u003c/a\u003e, or a Super Mario level. All the algorithms described in that book and implemented in the most popular software libaries, assume you to have an artificial, replayable and predictable environment to train the algorithm in.\u003c/p\u003e\n\u003cp\u003ePwnagotchi needed to learn continuously by observing the real world, that is unpredictable and potentially different every time, at a real world time scale, that is, how long a single ARM CPU core can take to scan the entire WiFi spectrum and interact with its findings - from seconds to several minutes. And this can’t be replayed, as different policies lead to different observations which lead to different future policies … solving this has been challenging to say the least, as there’s no previous code example or use case or explaination on how to integrate with any of those algorithms the way I needed.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/2lI3g8u.jpg\" alt=\"more study\"/\u003e\u003c/p\u003e\n\u003cp\u003eAfter a couple more weeks of studying and digging into the various implementations, I came up with \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/ai/gym.py\"\u003ea pretty decent solution\u003c/a\u003e that worked, surprisingly, out of the box. The continuous reinforcement learning logic works like this (keep in mind: one epoch is one loop of the main algorithm, from a few seconds to a few minutes depending on the WiFi things around you):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAt each epoch, depending on a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/defaults.yml#L97\"\u003elaziness factor\u003c/a\u003e, decide if using the next epoch for training or not.\u003c/li\u003e\n\u003cli\u003eIf not, just use the current AI to estimate a set of optimal parameters and repeat from 1.\u003c/li\u003e\n\u003cli\u003eIf we’re in training mode, this and the next \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/defaults.yml#L99\"\u003e50 epochs\u003c/a\u003e will be used as … a Super Mario episode! :D\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo that depending on how “lazy” the AI is configured to be, it will be learning most of the times or just conservately predicting parameters and only learn from new environments once in a while. Ideally: you want the laziness to be very low for younger units, so that they’ll learn fast, and then keep increasing their laziness over time, when they become more mature and present useful behaviours you want to keep and not accidentally “unlearn”. \u003c/p\u003e\n\u003cp\u003eDoes it work? Yes it does, after a few days (or weeks, if you live in a isolated area), you literally start seeing the units going on different channels when they see each other, adjusting only to the channels where they “see” potential reward, setting the timeouts correctly depending on how fast the unit is moving in space and therefore how fast it needs to “lock on” new targets. Feel free to try and read what happens in \u003ccode\u003e/var/log/pwnagotchi.log\u003c/code\u003e :D\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/rScAhQK.jpg\" alt=\"the gang\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"The-Community\"\u003e\u003ca href=\"#The-Community\" class=\"headerlink\" title=\"The Community\"\u003e\u003c/a\u003eThe Community\u003c/h2\u003e\u003cp\u003eBy this time, when the AI was implemented and working, I was back home in Italy and to be entirely honest I started being a bit bored with the project, mostly for a few technical difficulties I had that made me waste a huge amount of time on relatively trivial operational and implementation details:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI started this project on Kali Linux because it already had nexmon, but turns out they don’t compile with hardware support for floating point operations, so I couldn’t do any AI there, and I had to start from scratch with Raspbian.\u003c/li\u003e\n\u003cli\u003eThis is a single ARM core, at 1Ghz: the unit took ~10 minutes to import TensorFlow alone, a total of ~30 minutes to bootstrap all python dependencies (the inference and learning run pretty fast once the dependencies are loaded tho). Testing, debugging and developing new features was \u003cstrong\u003eslow\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eI still didn’t have any idea how to build an .img file. So far I only worked on my own unit and took a .img of the entire SD card as a backup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd let’s be even more honest: all the “cooler” problems, the challenges, were solved already: the AI was slow as f to load, but it worked pretty great once started … everything else started feeling a bit boring and so I paused the project. However, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/pwnagotchi\"\u003eI hyped the sh*t out of it on Twitter\u003c/a\u003e, mostly because it’s fun to share updates with followers and friends, and I didn’t want to disappoint them, so I published the super-buggy-crap-version-alpha on GitHub.\u003c/p\u003e\n\u003cp\u003eThat turned out to be absolutely the best thing to do, as the help and feedback I’ve got from the community starting from day 0 has been impressive: from \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/syshero\"\u003ethis man, that now is my personal hero\u003c/a\u003e setting up the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/tree/master/builder\"\u003ecompletely automated build system\u003c/a\u003e of the .img files, to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/0x9ABC\"\u003ethis awesome guy\u003c/a\u003e that implemented the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/blob/master/pwnagotchi/plugins/default/bt-tether.py\"\u003eBluetooth plugin\u003c/a\u003e for easy connectivity with a smartphone (among other things), to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/elkentaro\"\u003eelkentaro\u003c/a\u003e that sent me the first 3D printed case, motivating me more than he’ll ever imagine, to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/hexwaxwing\"\u003eHex\u003c/a\u003e, that from the very beginning gave me some of the best ideas and encouraged me on that porch, she curated the documentation and bootstrapped the community itself, to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi/graphs/contributors\"\u003eall the people\u003c/a\u003e that translated the project in so many different languages, submitted a fix, a new feature or just some ideas.\u003c/p\u003e\n\u003cp\u003eThis gave me some time to decompress and work on other, new ideas that evolved the project again (see “The Crypto” section) and gave new life to it (mostly to me). Today we have \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.herokuapp.com/\"\u003ea Slack channel\u003c/a\u003e that’s quickly approaching its first 1000 of users, a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.reddit.com/r/pwnagotchi/\"\u003esubreddit\u003c/a\u003e made by the community, \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://pwnagotchi.ai/\"\u003eclear documentation\u003c/a\u003e, a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/pwnagotchi\"\u003every active repository\u003c/a\u003e, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://hackaday.com/2019/10/16/a-tamagotchi-for-wifi-cracking/\"\u003eHackADay talked about us\u003c/a\u003e, but most importantly, even before arriving to the first 1.0.0 release, hundreds of units registered already from all over the world.\u003c/p\u003e\n\u003ccenter\u003e\n\u003ciframe src=\"https://pwnagotchi.ai/map/\" width=\"765px\" height=\"600px\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/center\u003e\n\u003cp\u003eIt is thanks to these people, their efforts and their support that today we are ready to release the 1.0.0 of the project - \u003cstrong\u003eguys we made it, you are AWESOME!!!\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"The-Crypto\"\u003e\u003ca href=\"#The-Crypto\" class=\"headerlink\" title=\"The Crypto\"\u003e\u003c/a\u003eThe Crypto\u003c/h2\u003e\u003cp\u003eWhile developing the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.ai/api/grid/\"\u003egrid API\u003c/a\u003e running on pwnagotchi.ai used to keep track of the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.ai/configuration/#set-your-pwngrid-preferences\"\u003eregistered units\u003c/a\u003e, I had to decide some sort of authentication mechanism that wasn’t the usual username and password - I wanted people to authenticate to the API just by having a Pwnagotchi. So I started playing with RSA, and generated a keypair on each of the units at their first boot.\u003c/p\u003e\n\u003cp\u003eThe idea that those keys were only used to authenticate to the API bothered me: there’s so much that can be done with RSA keys on dedicated hardware … this is how \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://pwnagotchi.ai/usage/#pwnmail\"\u003ePwnMAIL\u003c/a\u003e started. Each Pwnagotchi is also an end-to-end encrypted messaging device. Users can send messages to each other, messages that are encrypted on their hardware and stored on our servers, so that can only be decrypted by the recipient unit. The keys are generated and phisically isolated on cheap and disposable hardware (that also happens to run a super cute hacker AI ^_^). It’s easy to secure them by creating a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/NicoHood/NicoHood.github.io/wiki/Raspberry-Pi-Encrypt-Root-Partition-Tutorial\"\u003eLUKS encrypted partition\u003c/a\u003e so that they can’t be recovered from the SD card.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/cKznfdm.png\" alt=\"pwnmail\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt’s easier than GPG, hardware isolated and it’s not connected to a phone number. You can use it to send encrypted text messages or small files.\u003c/p\u003e\n\u003ch2 id=\"The-Future\"\u003e\u003ca href=\"#The-Future\" class=\"headerlink\" title=\"The Future\"\u003e\u003c/a\u003eThe Future\u003c/h2\u003e\u003cp\u003eLet’s talk about AI olympics! :D\u003c/p\u003e\n\u003cp\u003eSince the grid API is pretty open and users with valid RSA keys could send any amount of “pwned networks”, I decided \u003cstrong\u003enot\u003c/strong\u003e to use the data they send from any sort of scoreboard, ranking or competition system. This would only push some malicious (and very boring) users to cheat by sending fake statistics of fake units, therefore ruining the fun for all the others.\u003c/p\u003e\n\u003cp\u003eEach unit currently has a \u003ccode\u003e/root/brain.nn\u003c/code\u003e file which stores its neural networks and it’s just a few MB: \u003cstrong\u003ethis\u003c/strong\u003e is what the users will be uploading when competitive features will be implemented (and they will be) server side.\u003c/p\u003e\n\u003cp\u003eEach AI will be executed in a virtual environment, built on top of \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.bettercap.org/modules/core/api.rest/#api-rest-record-filename\"\u003ebettercap’s sessions recorded from real world scenarios\u003c/a\u003e and wrapped in such a way that it won’t be able to tell the difference from its normal, real world WiFi routine. While this system can not be used for training, because the way those scenarios will react is artificial (I will script who will send an handshake to whom depending on the right or wrong decisions the AI made), it can be used to \u003cstrong\u003ebenchmark\u003c/strong\u003e how that specific brain.nn file peforms in terms of average reward per session. This is a value that increases over time, the more (and the better) the AI is trained, and can’t be faked. This is what the \u003cstrong\u003ePwnOlympics\u003c/strong\u003e will be built on. Good luck cheating with that :D\u003c/p\u003e\n\u003cp\u003eNow let’s talk about distributed computing … \u003c/p\u003e\n\u003cp\u003eA modern GPU used in a cracking rig is so effective because is powered, differently from a CPU, by thousands of cores, a bit more than 1Ghz each, that are used to parallelize the search algorithms required for cracking … but it’s expensive. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIf and when\u003c/strong\u003e the project will reach the thousands of units, PwnGRID will provide a similar amount of “cores”, that can be orchestrated as a single computational unit, to everybody, for free. Whatever cracking power the grid will reach, it’ll be distributed according to the previous contributions of who submitted the job: the more CPU cycles you’ll give to the grid, the higher the priority (and number of units) you will have to perform your operation. It’s like a BlockChain (proof of pwn!) mixed with Emule’s logic of giving priority to nodes that contributed more.\u003c/p\u003e\n\u003cp\u003eThese are just some of the ideas that we are discussing and implementing, we need more and we need higher numbers. You’re more than welcome to join our Slack channel and help :)\u003c/p\u003e\n\u003ch2 id=\"Misc\"\u003e\u003ca href=\"#Misc\" class=\"headerlink\" title=\"Misc\"\u003e\u003c/a\u003eMisc\u003c/h2\u003e\u003cp\u003eA few key points I didn’t want to omit but that I don’t feel like phrasing more extensively than this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAI can be easy and fun, don’t let academic papers scare you with complex terminology, learn.\u003c/li\u003e\n\u003cli\u003eWalk more, now you have another excuse.\u003c/li\u003e\n\u003cli\u003eESP based deauthers, to name one, always existed. Don’t yell at us “OMG they’re deauthing all over the city!!!”. Despite this stuff always existing, nobody bothered updating \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/IEEE_802.11w-2009\"\u003eto technologies that work better and are more secure\u003c/a\u003e. \u003cstrong\u003eThat\u003c/strong\u003e is the people you should be yelling at.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIf you work at Twitter and you’re reading this:\u003c/strong\u003e please, I’ve tried to verify \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/pwnagotchi\"\u003e@pwnagotchi\u003c/a\u003e email in order to get a developer token and tweet from my unit, I never got the confirmation email, can you help? Thanks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/pwnagotchi?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-count=\"false\"\u003eFollow @pwnagotchi\u003c/a\u003e\u003cscript data-cfasync=\"false\" src=\"/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js\"\u003e\u003c/script\u003e\u003cscript async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2019-10-19T08:45:28Z",
  "Author": "Simone Margaritelli"
}