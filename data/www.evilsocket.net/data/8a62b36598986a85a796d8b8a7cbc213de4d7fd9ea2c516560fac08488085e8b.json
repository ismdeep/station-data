{
  "Source": "www.evilsocket.net",
  "Title": "Go Is Amazing, So Here's What I Don't Like About It",
  "Link": "https://www.evilsocket.net/2018/03/14/Go-is-amazing-so-here-s-what-i-don-t-like-about-it/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eAfter my last post and generally the kind of indirect advertising I’m doing to the Go programming language for a few months now, I heard about and talked with a lot of people who started being interested in the language, so for once I decided to write what I don’t like about it instead, to provide a more balanced perspective of what’s my experience so far and maybe let some of those people realize that Go is not the right choice for their projects after all.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE 1\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIt’s important to say that some, if not most of the things I’m about to write are purely subjective and related to my programming habits, they do not necessarily represent so called “best practices” and should not be taken like so. Moreover, I’m still a Go noob, some of the things I’m going to say might just be inaccurate / wrong, in which case feel free to correct me and teach me something new, \u003cstrong\u003eplease\u003c/strong\u003e :D\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE 2\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eBefore we start: I love this language and I already explained why I still consider it a better choice for several applications, but I’m not interested in an opinion war about Go vs Rust, or Go vs whatever … use what you think it’s best for what you have to do: if that’s Rust go for it, if you think it’s binary code you send to the processor by using your nipples to inject faults into some data bus, go for it, both cases, code and let code, life is too short for being a language hipster.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003cp\u003eLet’s start from the smallest things to the more serious ones …\u003c/p\u003e\n\u003ch3 id=\"Plz-Gimme-a-Ternary-Operator\"\u003e\u003ca href=\"#Plz-Gimme-a-Ternary-Operator\" class=\"headerlink\" title=\"Plz Gimme a Ternary Operator\"\u003e\u003c/a\u003ePlz Gimme a Ternary Operator\u003c/h3\u003e\u003cp\u003eWriting mostly apps that run in a terminal emulator, I often find myself printing the status of the parts of the system I’m working on in terms of \u003ccode\u003eenabled\u003c/code\u003e / \u003ccode\u003edisabled\u003c/code\u003e (like enabling or disabling one of bettercap’s modules and reporting that information), which means most of the times I need to translate a \u003ccode\u003eboolean\u003c/code\u003e variable to a more descriptive \u003ccode\u003estring\u003c/code\u003e, in C++ or any other language supporting \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/%3F:\"\u003ethis operator\u003c/a\u003e it would be something like:\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003ebool\u003c/span\u003e someEnabledFlagHere = \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"built_in\"\u003eprintf\u003c/span\u003e(\u003cspan class=\"string\"\u003e\u0026#34;Cool module is: %s\\n\u0026#34;\u003c/span\u003e, someEnabledFlagHere ? \u003cspan class=\"string\"\u003e\u0026#34;enabled\u0026#34;\u003c/span\u003e : \u003cspan class=\"string\"\u003e\u0026#34;not enabled\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eUnfortunately Go does not support this, which means you end up doing ugly stuff like:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003esomeEnabledFlagHere := \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eisEnabledString := \u003cspan class=\"string\"\u003e\u0026#34;not enabled\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e someEnabledFlagHere == \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    isEnabledString = \u003cspan class=\"string\"\u003e\u0026#34;enabled\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003elog.Printf(\u003cspan class=\"string\"\u003e\u0026#34;Cool module is: %s\\n\u0026#34;\u003c/span\u003e, isEnabledString)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAnd this is basically the most elegant way you have to do it (other that actually having a \u003ccode\u003emap[bool]string\u003c/code\u003e just for that …) … is it less convenient? is it more? For me it’s ugly, and when your system is highly modular, repeating this stuff over and over again can considerably increase the size of your code base, basically for no valid reason but the lack of an operator. ¯\\_(ツ)_/¯\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e Yes, I know you can do this by creating a function or aliasing the \u003ccode\u003estring\u003c/code\u003e type, there’s no need to post every possible ugly workaround on the comments, thanks :)\u003c/p\u003e\n\u003ch3 id=\"Auto-generated-stuff-Documentation\"\u003e\u003ca href=\"#Auto-generated-stuff-Documentation\" class=\"headerlink\" title=\"Auto generated stuff != Documentation\"\u003e\u003c/a\u003eAuto generated stuff != Documentation\u003c/h3\u003e\u003cp\u003eDear Go experts, I’m really thankful for the code you share and the stuff I manage to learn everyday by reading it, but I don’t think this is of any real use:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// this function adds two integers \u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// -put captain obvious meme here-\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003efunc\u003c/span\u003e \u003cspan class=\"title\"\u003eaddTwoNumbers\u003c/span\u003e\u003cspan class=\"params\"\u003e(a, b \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)\u003c/span\u003e \u003cspan class=\"title\"\u003eint\u003c/span\u003e\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e a + b\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAs I do not think that \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://godoc.org/github.com/google/gopacket\"\u003ethings like these\u003c/a\u003e are valid substitutes for documentation, while it looks like this is the standard way gophers document their code (with some exceptions of course), even if it’s about frameworks with thousands of forks and users we’re talking about … not a fan of super detailed documentation myself and this is not necessarily a huge problem if you enjoy digging into the code itself anyway, but if you’re a documentation junkie, be prepared to a continuous disappointment.\u003c/p\u003e\n\u003ch3 id=\"Git-repos-as-a-Package-System-is-nuts\"\u003e\u003ca href=\"#Git-repos-as-a-Package-System-is-nuts\" class=\"headerlink\" title=\"Git repos as a Package System is nuts\"\u003e\u003c/a\u003eGit repos as a Package System is nuts\u003c/h3\u003e\u003cp\u003eI had an interesting conversation on Twitter a few days ago, I was explaining to someone why Go imports look like github URLs:\u003c/p\u003e\n\u003cfigure class=\"highlight go\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"string\"\u003e\u0026#34;github.com/bettercap/bettercap\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eOr simply what happens when you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# go get github.com/bettercap/bettercap\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBasically, in the simplest Go installation you might possibly use (not using \u003ccode\u003evendor\u003c/code\u003e folders and/or not overriding \u003ccode\u003e$GOPATH\u003c/code\u003e), everything (not really but let’s pretend for the sake of simplicity) lives in this arbitrary folder you decided and with which you filled the \u003ccode\u003e$GOPATH\u003c/code\u003e variable, let’s say in my case it’s \u003ccode\u003e/home/evilsocket/gocode\u003c/code\u003e (well, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/dotfiles/blob/master/data/go.zshrc#L2\"\u003eit actually is\u003c/a\u003e). Whenever I either \u003ccode\u003ego get\u003c/code\u003e something, or I am importing it and using \u003ccode\u003ego get\u003c/code\u003e to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/blob/master/Makefile#L28\"\u003eautomagically download the needed packages\u003c/a\u003e, what basically happens on my computer is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# mkdir -p $GOHOME/src\n# git clone https://github.com/bettercap/bettercap.git $GOHOME/src/github.com/bettercap/bettercap\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYes, Go actually uses Git repositories for packages, applications and everything Go related … which is very convenient in a way, but it creates a huge problem: as long as you don’t use different tools and / or ugly workarounds (more on this in a bit), everytime you compile a software on a new system which is missing a given package, the \u003ccode\u003emaster\u003c/code\u003e branch of the repository of that package will be cloned, meaning \u003cstrong\u003eyou’ll potentially have different code every time you compile your project on a new computer even if the code of the application you’re compiling did not change at all\u003c/strong\u003e (but the master branch of any of the packages did). \u003c/p\u003e\n\u003ccenter\u003e\n\u003ciframe src=\"https://giphy.com/embed/12NUbkX6p4xOO4\" width=\"480\" height=\"440\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://giphy.com/gifs/shia-labeouf-12NUbkX6p4xOO4\"\u003evia GIPHY\u003c/a\u003e\u003c/p\u003e\n\u003c/center\u003e\n\u003cp\u003eHave fun when users will start reporting bugs about third party libraries and you have no idea at which commit the repos where at when they built their version of the software from source ^_^\u003c/p\u003e\n\u003cp\u003eYes, yes, \u003cstrong\u003eyes\u003c/strong\u003e. You can use \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Masterminds/glide\"\u003estuff like Glide\u003c/a\u003e or any other tool that will “freeze” your dependencies to specific commits / tags and use a separate folder for them … but that is an ugly workaround for a terrible design choice, we all know it, it works, but it’s ugly.\u003c/p\u003e\n\u003cp\u003ePretty much like \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://labix.org/gopkg.in\"\u003eusing URL redirectors\u003c/a\u003e in order to be able to import specific versions of a package … it works, but it’s ugly and maybe somebody might also be concerned about the security implications of that … who’s in control of those redirections? Does this whole mechanism make you feel comfortable with the stuff you’re importing in your code and compiling and running on your computer, maybe as root with sudo? \u003cstrong\u003eIt should not\u003c/strong\u003e. \u003c/p\u003e\n\u003ch3 id=\"Reflection-Mmm-not-really-…\"\u003e\u003ca href=\"#Reflection-Mmm-not-really-…\" class=\"headerlink\" title=\"Reflection? Mmm not really …\"\u003e\u003c/a\u003eReflection? Mmm not really …\u003c/h3\u003e\u003cp\u003eWhen I first heard about Go having reflection and, being used to the concept of reflection from other languages such as Python, Ruby, but also Java, C# and so on, I had so many ideas on how to use it (or, how to use what I thought to be Go’s reflection), like automagically enumerate available 802.11 layer types and build packets out of those, resulting in automatic WiFi fuzzing or something very close to that … it turns out, \u003ccode\u003ereflection\u003c/code\u003e is a big word when it comes to Go :D\u003c/p\u003e\n\u003cp\u003eYes, given an opaque \u003ccode\u003eobj interface{}\u003c/code\u003e you can get its original type and you can also list the fields of a given object, but you can’t do simple stuff like enumerating the objects ( \u003ccode\u003estruct\u003c/code\u003es and generally \u003ccode\u003etype\u003c/code\u003es ) that a given package exports, which might seems trivial, but without it you can’t do stuff like:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBuild a plugin system that autoloads stuff from a given package without explicit declarations.\u003c/li\u003e\n\u003cli\u003eBasically everything you can do with \u003ccode\u003edir\u003c/code\u003e in Python.\u003c/li\u003e\n\u003cli\u003eBuild the definitive 802.11 fuzzer I had in mind.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo yeah, reflection is kind of limited compared to other languages … I don’t know about you, but it bothers me …\u003c/p\u003e\n\u003ch3 id=\"Generics-Nah\"\u003e\u003ca href=\"#Generics-Nah\" class=\"headerlink\" title=\"Generics? Nah\"\u003e\u003c/a\u003eGenerics? Nah\u003c/h3\u003e\u003cp\u003eWhile most people coming from object oriented languages will complain about the lack of generics in Go, I personally don’t find that a big issue not being a super fan of OOP-at-all-costs myself. Instead, I do think Go object model (which is basically not an object model) is simple and slim, this design is inconsistent with the complexity that generics would add IMO.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eNOTE\n\nWith this I don\u0026#39;t mean \u0026#34;generics == OOP\u0026#34;, but just that the majority of developers expecting generics is because they replaced C++ with Go and expect something like templates, or the Java generics ... we can surely talk about the small minority coming from functional languages with generics or whatever, but for my experience those are not statistically relevant.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn the other end, this simplistic object model, which is quite close to \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.thejach.com/view/2010/1/oop_in_c_with_function_pointers_and_structs\"\u003ejust using function pointers and structs in C\u003c/a\u003e, makes something else less simple and immediate than the average language.\u003c/p\u003e\n\u003cp\u003eLet’s say you’re developing a software that has many modules (I like modularity in case that wasn’t clear already :D), all of them derive from the same base object (so you can expect a given interface and handle them transparently) which also needs to have some default functionality already implemented and shared among all derived modules (methods all the derived modules would use so they’re directly implemented in the base object for convenience).\u003c/p\u003e\n\u003cp\u003eWell, while on other languages you’d have abstract classes, or stuff that is partially implemented (the common and shared methods) and partially only describes an interface (pure \u003ccode\u003evirtual\u003c/code\u003e methods):\u003c/p\u003e\n\u003cfigure class=\"highlight c++\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"title\"\u003eBaseObject\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003eprotected\u003c/span\u003e:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"title\"\u003ecommonMethod\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e      \u003cspan class=\"built_in\"\u003ecout\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"string\"\u003e\u0026#34;I\u0026#39;m available to all derived objects!\u0026#34;\u003c/span\u003e \u0026lt;\u0026lt; \u003cspan class=\"built_in\"\u003eendl\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"comment\"\u003e// while this needs to be implemented by every derived object\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  \u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evirtual\u003c/span\u003e \u003cspan class=\"title\"\u003einterfaceMethod\u003c/span\u003e\u003cspan class=\"params\"\u003e()\u003c/span\u003e \u003c/span\u003e= \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e};```\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eIt happens that Go simply does \u003cspan class=\"keyword\"\u003enot\u003c/span\u003e support \u003cspan class=\"keyword\"\u003ethis\u003c/span\u003e, something can either be an `interface` \u003cspan class=\"keyword\"\u003eor\u003c/span\u003e a base `\u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e` (\u003cspan class=\"title\"\u003eobject\u003c/span\u003e), \u003cspan class=\"title\"\u003ebut\u003c/span\u003e \u003cspan class=\"title\"\u003eit\u003c/span\u003e \u003cspan class=\"title\"\u003ecan\u003c/span\u003e\u0026#39;\u003cspan class=\"title\"\u003et\u003c/span\u003e \u003cspan class=\"title\"\u003ebe\u003c/span\u003e \u003cspan class=\"title\"\u003eboth\u003c/span\u003e \u003cspan class=\"title\"\u003eat\u003c/span\u003e \u003cspan class=\"title\"\u003ethe\u003c/span\u003e \u003cspan class=\"title\"\u003esame\u003c/span\u003e \u003cspan class=\"title\"\u003etime\u003c/span\u003e, \u003cspan class=\"title\"\u003eso\u003c/span\u003e \u003cspan class=\"title\"\u003ewe\u003c/span\u003e\u0026#39;\u003cspan class=\"title\"\u003ed\u003c/span\u003e \u003cspan class=\"title\"\u003eneed\u003c/span\u003e \u003cspan class=\"title\"\u003eto\u003c/span\u003e \u0026#34;\u003cspan class=\"title\"\u003esplit\u003c/span\u003e\u0026#34; \u003cspan class=\"title\"\u003ethis\u003c/span\u003e \u003cspan class=\"title\"\u003eexample\u003c/span\u003e \u003cspan class=\"title\"\u003ein\u003c/span\u003e \u003cspan class=\"title\"\u003ethis\u003c/span\u003e \u003cspan class=\"title\"\u003eway\u003c/span\u003e:\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e```go\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype BaseObjectForMethods \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc (o BaseObjectForMethods) commonMethod() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003elog\u003c/span\u003e.Printf(\u003cspan class=\"string\"\u003e\u0026#34;I\u0026#39;m available to all derived objects!\\n\u0026#34;\u003c/span\u003e)\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype BaseInterface interface {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    interfaceMethod()\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003etype Derived \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// I just swallowed my base object and got its methods\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    BaseObjectForMethods\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}   \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e// and here we implement the interface method instead\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003efunc (d Derived) interfaceMethod() {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// whatever, i\u0026#39;m a depressed object model anyway ... :/\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAnd eventually your derived object will implement the interface and extend the base structure … it might look like the same or also that this is a more elegant and decoupled approach, but it can get messy quite fast when you try to push Go polymorphism a little bit further than this ( \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/blob/master/session/module.go\"\u003ehere a more realistic example\u003c/a\u003e ).\u003c/p\u003e\n\u003ch3 id=\"Go-stuff-is-easy-to-build-CGO-is-hell\"\u003e\u003ca href=\"#Go-stuff-is-easy-to-build-CGO-is-hell\" class=\"headerlink\" title=\"Go stuff is easy to build, CGO is hell.\"\u003e\u003c/a\u003eGo stuff is easy to build, CGO is hell.\u003c/h3\u003e\u003cp\u003eBuilding (and crosscompiling) Go apps is incredibly easy, no matter for what platform you’re building it for or from. Using the same Go installation you can compile the same app for Windows, or macOS, or Android or some MIPS device with GNU/Linux if you want, no toolchains needed, no exotic compilers, no OS specific flags to remember, no weird \u003ccode\u003econfigure\u003c/code\u003e scripts that never really work as we expect them to … \u003cstrong\u003eHOW COOL IS THAT?!\u003c/strong\u003e (if you come from the C/C++ world and used to cross compile your stuff a lot, you know this is huge…or if you’re a security consultant who needs to quickly cross compile his agents for both that tasty Windows domain controller and the crappy MIPS IP Cam he infected yesterday).\u003c/p\u003e\n\u003cp\u003eWell, \u003cstrong\u003eit happens this is simply not the case if you’re using any native library which was not originally implemented in Go\u003c/strong\u003e, and you probably will unless you won’t just use Go for “hello world”.\u003c/p\u003e\n\u003cp\u003eLet’s say your Go project is using \u003ccode\u003elibsqlite3\u003c/code\u003e, or \u003ccode\u003elibmysql\u003c/code\u003e, or \u003ccode\u003elibwhatever\u003c/code\u003e because whoever wrote that neat ORM you’re using in your super fast Go API did not bother reimplementing the whole DB protocol in Go (of course) but just used some nice, default, standard and well tested system library wrapped in a CGO module … so far so good, all languages have some wrapping mechanism for native libraries … and also, all is good as long as you’re just compiling your project for your host system, where \u003ccode\u003elibsqlite3.so\u003c/code\u003e, or \u003ccode\u003elibmysql.so\u003c/code\u003e, or \u003ccode\u003elibwhatever.so\u003c/code\u003e are available via some \u003ccode\u003eapt-get install precompiled-swag\u003c/code\u003e thing, but what happens when you have to crosscompile, let’s say, this project for Android? \u003cstrong\u003eWhat if the destination system does not have \u003ccode\u003elibXXXXXX.so\u003c/code\u003e as default? Of course, you’ll either need that system’s C/C++ toolchain and compile the library yourself\u003c/strong\u003e, or just find a way to install the compiler direcly on that system and compile everything there (using your Android tablet as a build machine basically). Have fun with that.\u003c/p\u003e\n\u003cp\u003eNeedless to say, if you want / need to support several operating systems and architectures (why you shouldn’t given one of Go biggest strength, as we said, is exactly this?) this adds a huge amount of complexity to your build pipeline, making a Go project at least as complex to cross compile (sometimes, ironically, even more) than just a C/C++ codebase.\u003c/p\u003e\n\u003cp\u003eFor \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arc\"\u003esome project of mine\u003c/a\u003e at some point I just fully replaced the \u003ccode\u003esqlite\u003c/code\u003e database I was using with JSON files, that allowed me to get rid of the native dependency and have a 100% Go app, which made crosscompilation \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arc/releases\"\u003esuper easy again\u003c/a\u003e ( while \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/blob/master/build.sh\"\u003ethis is the hell\u003c/a\u003e you’re going to have to manage if you just can’t avoid having native dependencies … sorry about that :/ ).\u003c/p\u003e\n\u003cp\u003eIf your \u003ccode\u003esuper-smart-self\u003c/code\u003e is now screaming \u003cstrong\u003eUSE STATIC BUILDS!!!!\u003c/strong\u003e all over (statically compile libraries in order to at least have them -inside- the binary), just don’t. If you compile everything statically with a given version of \u003ccode\u003eglibc\u003c/code\u003e the binary will not work on systems with a different \u003ccode\u003eglibc\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf your \u003ccode\u003eeven-smarter-self\u003c/code\u003e is now screaming \u003cstrong\u003eUSE DOCKER FOR BUILDS!!!!!\u003c/strong\u003e, find a way to do it correctly for -every- platform and -every- arch and then send me an email :)\u003c/p\u003e\n\u003cp\u003eIf your \u003ccode\u003ebut-i-kinda-know-go-for-real-self\u003c/code\u003e is about to suggest some exotic \u003ccode\u003eglibc\u003c/code\u003e alternative, see requirements for his brother, Mr \u003ccode\u003eeven-smarter-self\u003c/code\u003e :D\u003c/p\u003e\n\u003ch3 id=\"ASLR-Nope-troll-face\"\u003e\u003ca href=\"#ASLR-Nope-troll-face\" class=\"headerlink\" title=\"ASLR? Nope! -troll face-\"\u003e\u003c/a\u003eASLR? Nope! -troll face-\u003c/h3\u003e\u003cp\u003eSo ok, this is kind of controversial, \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://rain-1.github.io/golang-aslr.html\"\u003eGo binaries have no ASLR\u003c/a\u003e, \u003cstrong\u003eBUT\u003c/strong\u003e, given how Go manages memory (and mostly, given \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://golang.org/doc/faq#no_pointer_arithmetic\"\u003eit doesn’t have pointer arithmetic\u003c/a\u003e) that \u003cstrong\u003eshould not\u003c/strong\u003e be a security issue, as long as you do not use bindings to native libraries with vulnerabilities, in which case the lack of Go ASLR would \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://blog.securitymouse.com/2014/07/bla-bla-lz4-bla-bla-golang-or-whatever.html\"\u003emake exploitation way easier\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNow, I kind of get Go developers point and I kind of don’t: why adding complexity to the runtime just to protect the runtime from something it is not vulnerable to in the first place? … but considering how often you end up using native libraries (see the previous section of this post :P) just ignoring the problem is not a wise approach regardless IMHO.\u003c/p\u003e\n\u003ch3 id=\"Conclusions\"\u003e\u003ca href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"\u003e\u003c/a\u003eConclusions\u003c/h3\u003e\u003cp\u003eThere are many other small things I don’t like about Go, but that is also true for every other language I know, so I just focused on the main things and tried to skip stuff like \u003ccode\u003ei don\u0026#39;t like this syntax X\u003c/code\u003e which is completely subjective (and I do like Go syntax btw). I saw many people, blindly embracing a new language just because it’s trending on GitHub … on one hand, if so many developers decided to use it, there are indeed good reasons (or they’re just \u003ccode\u003ecompile-anything-to-javascript\u003c/code\u003e hipsters), but the perfect language which is the best option for every possible application does not exist (yet, I still have faith in nipples and fault injection U.U), always better to double check the pros and cons.\u003c/p\u003e\n\u003ccenter\u003e\npeace\u003cbr/\u003e\n\u003cimg src=\"https://abs.twimg.com/emoji/v2/72x72/1f984.png\"/\u003e\n\u003c/center\u003e\n\u003c/div\u003e",
  "Date": "2018-03-14T22:39:09Z",
  "Author": "Simone Margaritelli"
}