{
  "Source": "www.evilsocket.net",
  "Title": "Reversing the Smarter Coffee IoT Machine Protocol to Make Coffee Using the Terminal.",
  "Link": "https://www.evilsocket.net/2016/10/09/IoCOFFEE-Reversing-the-Smarter-Coffee-IoT-machine-protocol-to-make-coffee-using-terminal/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eI love coffee, that’s a fact, and I drink liters of it during the week … I also am a nerd and a hacker, so a few days ago I bought a \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://smarter.am/coffee/\"\u003eSmarter Coffee\u003c/a\u003e machine on Amazon, basically a coffee machine that you can control over your home wifi network using a mobile application ( both for Android and iOS ).\u003cbr/\u003eThe app is really nice: you can set the amount of cups you want, the strength of the coffee, etc, then you only need to press a button and wait for your delicious coffee to be brewed.\u003c/p\u003e\n\u003cp\u003eSince I work from home, most of the times I’m using the computer keyboard, not a smartphone, therefore I wanted/needed a console client for it, something that the vendor never released, so I started reversing the Android application in order to understand the communication protocol and write my own client implementation … guess what? :D\u003c/p\u003e\n\u003cp\u003eYep, i can make coffee using the terminal now :D\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/10/terminal.png\" alt=\"terminal\"/\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch3 id=\"Reversing-the-Protocol\"\u003e\u003ca href=\"#Reversing-the-Protocol\" class=\"headerlink\" title=\"Reversing the Protocol\"\u003e\u003c/a\u003eReversing the Protocol\u003c/h3\u003e\u003cp\u003eI decided to reverse the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://play.google.com/store/apps/details?id=am.smarter.smarterandroid\"\u003eAndroid application\u003c/a\u003e since it’s usualy way easier than reversing iOS ones ( java vs assembly :D ), once I downloaded the APK I started studying the various classes and methods.\u003c/p\u003e\n\u003cp\u003eSo I fired up \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/skylot/jadx\"\u003eJADX\u003c/a\u003e ( with the \u003ccode\u003e--show-bad-code\u003c/code\u003e argument ), I launched CTAGS inside the exported source code folder and VIM to navigate it.\u003cbr/\u003eA few hours later, I found the interesting part in the \u003ccode\u003eam.smarter.smarterandroid.models.a\u003c/code\u003e class and noticed a few methods like the following:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/10/methods.png\" alt=\"methods\"/\u003e\u003c/p\u003e\n\u003cp\u003eEach of these “packets” is sent to tcp port \u003ccode\u003e2081\u003c/code\u003e of the machine, the protocol is \u003cstrong\u003every\u003c/strong\u003e simple.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst byte: the command number.\u003c/li\u003e\n\u003cli\u003eSecond byte to N: optional data ( depending on the command code ).\u003c/li\u003e\n\u003cli\u003eLast byte: always \u003ccode\u003e0x7e\u003c/code\u003e which indicates the end of the packet.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eResponses can vary, but for most of the commands they are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst byte: response size\u003c/li\u003e\n\u003cli\u003eSecond byte: status ( 0 = success otherwise error code )\u003c/li\u003e\n\u003cli\u003eLast byte: always \u003ccode\u003e0x7e\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn example command and response, the one to keep the coffee warm for 5 minutes for instance, would be:\u003c/p\u003e\n\u003cp\u003eCOMMAND : \u003ccode\u003e0x3e 0x05 0x7e\u003c/code\u003e\u003cbr/\u003eRESPONSE : \u003ccode\u003e0x03 0x00 0x7e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSo I’ve mapped all the commands I needed in order to write a minimal console client and tested it … this is the result, it works like a charm! :D\u003c/p\u003e\n\u003ciframe width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/9PeR9d18E14\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003cp\u003eYou can \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/coffee\"\u003edownload the client code here\u003c/a\u003e, you’ll need to specify the machine ip address the first time, then it will be saved in the \u003ccode\u003e~/.smartercoffee\u003c/code\u003e file and won’t be needed anymore.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecoffee make -A 192.168.1.50\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eA few examples:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eJust make one cup of coffee:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecoffee make\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake two cups using the filter instead of the beans in the grinder:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecoffee make --filter\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eKeep coffee warm for ten minutes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecoffee warm --keep-warm=10\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eFull usage\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e☕ ☕ ☕  SmarterCoffee Client ☕ ☕ ☕\nby Simone \u0026#39;evilsocket\u0026#39; Margaritelli\n\nUsage: coffee [options] (make|warm)\n\nOptions:\n  -h, --help            show this help message and exit\n  -A ADDRESS, --address=ADDRESS\n                        IP address of the Smarter coffee machine.\n  -M, --make            Make coffee.\n  -W, --warm            Warm coffee.\n  -C CUPS, --cups=CUPS  Set number of cups.\n  -S STRENGTH, --strength=STRENGTH\n                        Set coffee strength ( 0-2 ).\n  -G, --grind           Use grind.\n  -F, --filter          Use filter.\n  -K TIME, --keep-warm=TIME\n                        Keep the coffee warm for TIME minutes.\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"Security-Considerations\"\u003e\u003ca href=\"#Security-Considerations\" class=\"headerlink\" title=\"Security Considerations\"\u003e\u003c/a\u003eSecurity Considerations\u003c/h3\u003e\u003cp\u003eEven if the mobile app requires you to register an account, \u003cstrong\u003eaccess to port 2081 is completely unauthenticated\u003c/strong\u003e ( in fact, I’ve found that the user account is only used for statistics using the Firebase API ), anyone on your network could access it and \u003cstrong\u003eeven flash a new firmware\u003c/strong\u003e with no authentication required ( I reversed the \u003ccode\u003eUPDATE_FIRMWARE\u003c/code\u003e packet as well but you won’t find it on the repo :P )\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/10/firmware.jpg\" alt=\"flashing the firmware\"/\u003e\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2016-10-09T13:09:11Z",
  "Author": "Simone Margaritelli"
}