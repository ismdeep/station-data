{
  "Source": "www.evilsocket.net",
  "Title": "DIY Portable Secrets Manager With a Raspberry Pi Zero and ARC",
  "Link": "https://www.evilsocket.net/2017/12/07/DIY-Portable-Secrets-Manager-with-a-RPI-Zero-and-the-ARC-Project/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eFor the last few days I’ve been working on a new project which I developed for very specific needs and reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eI need to store safely (encrypted) my passwords, sensitive files, notes, etc.\u003c/li\u003e\n\u003cli\u003eI need to access them from anywhere, with every possible device ( desktop, mobile, terminal ).\u003c/li\u003e\n\u003cli\u003eI need those objects to be syncronized accros all my devices.\u003c/li\u003e\n\u003cli\u003eI don’t want to use “the cloud”.\u003c/li\u003e\n\u003cli\u003eI don’t want to pay for a server.\u003c/li\u003e\n\u003cli\u003eI don’t want to enable port forwarding and host it myself with DynDNS or alikes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo I wrote \u003cstrong\u003eARC\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/NvLlafA.png\" alt=\"arcd\"/\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003cp\u003eOf course there are \u003cstrong\u003eplenty\u003c/strong\u003e of solutions already that mostly involve the use of \u003ccode\u003epass\u003c/code\u003e, \u003ccode\u003essh\u003c/code\u003e, \u003ccode\u003egit\u003c/code\u003e and various synchronizations hacks, but:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEither you’ll host that stuff on github ( “the cloud” ), or you’ll need a server.\u003c/li\u003e\n\u003cli\u003eYou will need a terminal to access that data or complex procedures … good luck when you’re in a hurry and only have your phone.\u003c/li\u003e\n\u003cli\u003eThe type of data you can store and access and the interactions you have with it are very limited.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe approach I decided to try is different.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/EkxdwVH.jpg\" alt=\"rpiz\"/\u003e\u003c/p\u003e\n\u003cp\u003eArc is a manager for your secrets made of \u003ccode\u003earcd\u003c/code\u003e, a RESTful API server written in Go which exposes read and write primitives for \u003cstrong\u003eencrypted records\u003c/strong\u003e on a sqlite database file.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/swC00gX.png\" alt=\"arcd\"/\u003e\u003c/p\u003e\n\u003cp\u003eAnd \u003ccode\u003earc\u003c/code\u003e, the client application implemented in html5 and javascript, which runs in every html5 enabled browser and it is served by \u003ccode\u003earcd\u003c/code\u003e itself.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://pbs.twimg.com/media/DQN8W1KWsAEP6bd.jpg:large\" alt=\"multikey\"/\u003e\u003c/p\u003e\n\u003cp\u003eRecords are generated, encrypted and decrypted \u003cstrong\u003eclient side only\u003c/strong\u003e (Arc relies on CryptoJS for its AES encryption and the PRNG) by \u003ccode\u003earc\u003c/code\u003e, which offers an intuitive management system equipped with UI widgets including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSimple text inputs.\u003c/li\u003e\n\u003cli\u003eSimple text areas.\u003c/li\u003e\n\u003cli\u003eCustom file attachments (\u003cstrong\u003efiles are encrypted client side\u003c/strong\u003e before being uploaded as binary records).\u003c/li\u003e\n\u003cli\u003eA markdown editor area with preview and full screen mode.\u003c/li\u003e\n\u003cli\u003eA password field with \u003cstrong\u003epassword strength estimation\u003c/strong\u003e and a \u003cstrong\u003erandom password generator\u003c/strong\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eElements can be created (with optional expiration dates), arranged and edited using \u003ccode\u003earc\u003c/code\u003e and are stored on \u003ccode\u003earcd\u003c/code\u003e safely.\u003c/p\u003e\n\u003cul style=\"margin:0; padding:0; list-style-type:none;\"\u003e\n\u003cli style=\"float: left; margin-right:15px; width:45%;\"\u003e\n\u003cimg src=\"https://i.imgur.com/KCn4RGw.png\"/\u003e\n\u003csmall\u003eA client side encrypted record set to expire and self delete with a markdown area and a password widget.\u003c/small\u003e\n\u003c/li\u003e\n\u003cli style=\"float: left; margin-right:15px; width:45%;\"\u003e\n\u003cimg src=\"https://i.imgur.com/nxqmRqY.png\"/\u003e\n\u003csmall\u003eMarkdown and various attached files.\u003c/small\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv style=\"clear:both;\"\u003e\u003c/div\u003e\n\u003cp\u003eThe idea is to use \u003cem\u003ethe Arc\u003c/em\u003e™ as a single manager for your passwords, encrypted notes, files and \u003ccode\u003e-all the secret things here-\u003c/code\u003e while hosting \u003ccode\u003earcd\u003c/code\u003e yourself on some spare hardware like a Raspberry Pi and accessing \u003ccode\u003earc\u003c/code\u003e from every device with a modern browser, so let’s see how to configure it on a Raspberry Pi Zero in order to have a secure and portable setup for your secrets! :D\u003c/p\u003e\n\u003ch3 id=\"Hardware-Setup\"\u003e\u003ca href=\"#Hardware-Setup\" class=\"headerlink\" title=\"Hardware Setup\"\u003e\u003c/a\u003eHardware Setup\u003c/h3\u003e\u003cpre\u003e\u003ccode\u003eThe following instructions are Raspberry Pi Zero specific, but the same procedure should work on any similar hardware ( like another RPi or the USB Armory for instance ), the RPiZ is just what I found to be more convenient and cheap.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst of all, format a micro sd card and install Raspbian on it as usual (download iso, verify, dd, mount), next we need to apply a few tweaks in order to enable ethernet connectivity over its USB port.\u003c/p\u003e\n\u003cp\u003eWith the RPi \u003ccode\u003eboot\u003c/code\u003e partition mounted, edit the \u003ccode\u003e/path/to/pi/boot/config.txt\u003c/code\u003e and append:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edtoverlay=dwc2\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen edit \u003ccode\u003e/path/to/pi/boot/cmdline.txt\u003c/code\u003e and insert between the \u003ccode\u003erootwait\u003c/code\u003e and the \u003ccode\u003equiet\u003c/code\u003e parameters:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emodules-load=dwc2,g_ether\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEventually your \u003ccode\u003ecmdline.txt\u003c/code\u003e file will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=PARTUUID=abcdefab-01 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait modules-load=dwc2,g_ether \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt last, we need to make Raspbian enable SSH on boot so we’ll be able to connect to it if needed, in order to do this just create an \u003ccode\u003e/path/to/pi/boot/ssh\u003c/code\u003e empty file.\u003c/p\u003e\n\u003cp\u003eUnmount the micro sd, insert it into the RPiZ and plug it to the computer \u003cstrong\u003eusing the USB data port\u003c/strong\u003e (not the charge one, we don’t need it ;)).\u003c/p\u003e\n\u003cp\u003eIf everything went fine, your computer should now detect a new network interface, in order to connect to it just assign it any static IP address ( on \u003ccode\u003eUbuntu\u003c/code\u003e and similar, set the connection type to \u003ccode\u003eLink-Local Only\u003c/code\u003e), restart the interface and the RPiZ should be reachable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eping raspberrypi.local\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet’s finish the setup of the board, connect to it via SSH:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003essh \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"f98990b98b988a899b9c8b8b808990d795969a9895\"\u003e[email protected]\u003c/a\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExpand the filesystem as usual, \u003cstrong\u003echange the default SSH password\u003c/strong\u003e, enable \u003cstrong\u003eprivate key only SSH authentication\u003c/strong\u003e, copy your certificate, etc … as for the hardware part, we’re ready :)\u003c/p\u003e\n\u003ch3 id=\"Software-Setup\"\u003e\u003ca href=\"#Software-Setup\" class=\"headerlink\" title=\"Software Setup\"\u003e\u003c/a\u003eSoftware Setup\u003c/h3\u003e\u003cp\u003eThe easiest way for now is to build the \u003ccode\u003earcd\u003c/code\u003e server directly on a Raspberry Pi in order to produce an \u003ccode\u003eARMv6\u003c/code\u003e binary, once you installed Go on the RPi (not necessarily the one you’re going to use as the secrets store) just \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arc#usages://github.com/evilsocket/arc#usage\"\u003efollow the instructions on the repository\u003c/a\u003e to compile the server.\u003c/p\u003e\n\u003cp\u003eOnce you compiled it, edit the configuration file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd /path/to/arc/repo/arcd\ncp sample_config.json config.json\nvim config.json\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd change the \u003ccode\u003eaddress\u003c/code\u003e field so we’ll be able to connect to the Arc web interface:\u003c/p\u003e\n\u003cfigure class=\"highlight json\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;address\u0026#34;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;port\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e8080\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;PUT_YOUR_USERNAME_HERE\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;PUT_YOUR_PASSWORD_HERE\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;database\u0026#34;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;~/arc.db\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;token_duration\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e60\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;scheduler\u0026#34;\u003c/span\u003e: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attr\"\u003e\u0026#34;enabled\u0026#34;\u003c/span\u003e: \u003cspan class=\"literal\"\u003etrue\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attr\"\u003e\u0026#34;period\u0026#34;\u003c/span\u003e: \u003cspan class=\"number\"\u003e10\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    },\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"attr\"\u003e\u0026#34;tls\u0026#34;\u003c/span\u003e: {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attr\"\u003e\u0026#34;enabled\u0026#34;\u003c/span\u003e: \u003cspan class=\"literal\"\u003efalse\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attr\"\u003e\u0026#34;pem\u0026#34;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;/some/file.pem\u0026#34;\u003c/span\u003e,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"attr\"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e: \u003cspan class=\"string\"\u003e\u0026#34;/some/file.key\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eNow just copy the \u003ccode\u003earc\u003c/code\u003e folder, the new \u003ccode\u003econfig.json\u003c/code\u003e file and the ARM compiled \u003ccode\u003earcd\u003c/code\u003e server to the RPiZ:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003escp -r arc arcd_arm config.json \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"a3d3cae3d1c2d0d3c1c6d1d1dad3ca8dcfccc0c2cf\"\u003e[email protected]\u003c/a\u003e:/home/pi/\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSSH to the board and make sure that everything works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003essh \u003ca href=\"/cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"0a7a634a786b797a686f7878737a63246665696b66\"\u003e[email protected]\u003c/a\u003e\nmv arcd_arm arcd\n./arcd -config config.json -app arc\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOpen the browser and go to \u003ccode\u003ehttp://raspberrypi.local:8080/\u003c/code\u003e, you should now be able to login and use ARC whenever you plug your RPi Zero to the USB port :)\u003c/p\u003e\n\u003cp\u003e( Make sure to start \u003ccode\u003earcd\u003c/code\u003e at boot by editing \u003ccode\u003e/etc/rc.local\u003c/code\u003e or whatever )\u003c/p\u003e\n\u003ch3 id=\"Security-considerations\"\u003e\u003ca href=\"#Security-considerations\" class=\"headerlink\" title=\"Security considerations\"\u003e\u003c/a\u003eSecurity considerations\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIt should be obvious, but physically isolated data on dedicated hardware is safer.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAll the data is encrypted client side, which means everything that is stored physically on the RPiZ is encrypted with \u003ccode\u003eAES\u003c/code\u003e, make sure to use a strong encryption key, the stronger the key, the safer the data will be in case you lose the hardware.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFor additional security, you might store the \u003ccode\u003earc.db\u003c/code\u003e server database on a LUKS volume which you will need to manually unlock at boot.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou should generate your own self signed certificate and use it in the \u003ccode\u003etls\u003c/code\u003e configuration of Arc in order to use https instead of http.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDO NOT\u003c/strong\u003e enable any type of connection sharing from your computer to the RPiZ, we \u003cstrong\u003edo not want\u003c/strong\u003e anything from the outside world to reach our secure storage, ideally you should disable the wireless interface too if using the \u003ccode\u003eW\u003c/code\u003e model.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUsername and password are needed to access the API itself, but they will \u003cstrong\u003enot\u003c/strong\u003e decrypt the records, that’s why the encryption key is requested as well. You can login with the same API credentials but different encryption keys, you will create records with a new key and will not be able to decrypt other records that have been created with a different AES key.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eElements can be configured with an expiration date, using it is a good way to remember how old a given password is and have some sort of reminder when it’s time to change it (or just encrypted reminders ^_^).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Conclusion\"\u003e\u003ca href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"\u003e\u003c/a\u003eConclusion\u003c/h3\u003e\u003cp\u003eThe project is \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arc\"\u003eavailable on my github\u003c/a\u003e as usual, there’s still \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arc/milestone/1\"\u003esome work left to do\u003c/a\u003e before it reaches the first stable release, but I’m close :)\u003c/p\u003e\n\u003cp\u003eStay safe, have fun and …\u003c/p\u003e\n\u003cp align=\"center\"\u003e\n\u003cimg src=\"https://i.imgur.com/h5cpCeN.png\" alt=\"Encrypt all the things!\"/\u003e\n\u003c/p\u003e\n\u003ch3 id=\"One-last-thing-…\"\u003e\u003ca href=\"#One-last-thing-…\" class=\"headerlink\" title=\"One last thing …\"\u003e\u003c/a\u003eOne last thing …\u003c/h3\u003e\u003cp\u003eYes, it works with smartphones and tablets in OTG mode :)\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2017-12-07T16:42:48Z",
  "Author": "Simone Margaritelli"
}