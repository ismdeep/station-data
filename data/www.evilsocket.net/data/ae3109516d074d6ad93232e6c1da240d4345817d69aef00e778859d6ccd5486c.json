{
  "Source": "www.evilsocket.net",
  "Title": "Termination and Injection Self Defense on Windows \u003e= Vista SP1",
  "Link": "https://www.evilsocket.net/2014/02/05/Termination-and-injection-self-defense-on-Windows-Vista-SP1/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eOn a \u003ca href=\"/2014/02/01/keservicedescriptortable-patching-aka-how-to-hook-win32-api-patching-the-kernel/\"\u003eprevious post\u003c/a\u003e I’ve talked about how to perform API hooking at kernel level on 32bit Windows systems to prevent a process from being terminated.\u003cbr/\u003eToday I’m gonna talk about \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff557759(v=vs.85).aspx\"\u003eOBR and callbacks\u003c/a\u003e, mainly to show how to achieve the same result on 64bit systems starting from Vista SP1 and later.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch4 id=\"Why-should-I-prevent-a-process-from-being-killed\"\u003e\u003ca href=\"#Why-should-I-prevent-a-process-from-being-killed\" class=\"headerlink\" title=\"Why should I prevent a process from being killed?\"\u003e\u003c/a\u003eWhy should I prevent a process from being killed?\u003c/h4\u003e\u003cp\u003eIf you try to search for some code samples or documentation about this topic, you will find that almost anyone will say that denying a computer administrator to terminate a process is wrong, so process self-protection should be avoided.\u003cbr/\u003eThis is true 99% of the cases, the remaining 1% are those cases when a process is vital for the system infrastructure security such as anti malwares, IPS and IDS. Those kind of softwares have to protect themself from malicious software trying to terminate their services and processes or inject arbitrary code into their executable address space, so that’s when an appropriate protection is vital.\u003c/p\u003e\n\u003ch4 id=\"The-user-mode-curse\"\u003e\u003ca href=\"#The-user-mode-curse\" class=\"headerlink\" title=\"The user mode curse\"\u003e\u003c/a\u003eThe user mode curse\u003c/h4\u003e\u003cp\u003eNo matter how hard you try, there’s really no 100% safe way to do this in user mode … you could try API hooking, passive monitoring, process sandboxing, whatever, there’s always a way to bypass a user mode protection. API hooks can be overwritten, monitoring can be eluded with straight calls to ntdll and obfuscation, sandboxing can be detected.\u003cbr/\u003eThat’s why kernel patching was the most used technique on pre Vista systems, once you are in the kernel you have full power and the lowest level possible vision of what is happening on a computer, moreover you don’t need to handle all the abstractions a user mode environment implies.\u003c/p\u003e\n\u003ch4 id=\"Drivers-and-Ob-Callbacks\"\u003e\u003ca href=\"#Drivers-and-Ob-Callbacks\" class=\"headerlink\" title=\"Drivers and Ob Callbacks\"\u003e\u003c/a\u003eDrivers and Ob Callbacks\u003c/h4\u003e\u003cp\u003eWhen you talk about working in the Windows kernel, you talk about developing a driver, that’s why Microsoft implemented a set of brand new API to intercept and eventually filter events and actions on object handles before they are actually executed by the kernel.\u003cbr/\u003eEnough talking, let’s see how the \u003cstrong\u003eObRegisterCallbacks\u003c/strong\u003e is defined:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eNTSTATUS \u003cspan class=\"title\"\u003eObRegisterCallbacks\u003c/span\u003e\u003cspan class=\"params\"\u003e(\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003e  _In_   POB_CALLBACK_REGISTRATION CallBackRegistration,\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003e  _Out_  PVOID *RegistrationHandle\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"params\"\u003e)\u003c/span\u003e\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThis function accepts an input structure pointer that defines what object handles you want to monitor and which actions on them and gives you back a \u003cstrong\u003eRegistrationHandle\u003c/strong\u003e i.e. a global object we will use from now on to work with those callbacks.\u003c/p\u003e\n\u003cp\u003eThe OB_CALLBACK_REGISTRATION structure content:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"keyword\"\u003etypedef\u003c/span\u003e \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e _\u003cspan class=\"title\"\u003eOB_CALLBACK_REGISTRATION\u003c/span\u003e {\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  USHORT                    Version;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  USHORT                    OperationRegistrationCount;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  UNICODE_STRING            Altitude;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  PVOID                     RegistrationContext;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e  OB_OPERATION_REGISTRATION *OperationRegistration;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e} OB_CALLBACK_REGISTRATION, *POB_CALLBACK_REGISTRATION;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eThe \u003cstrong\u003eAltitude\u003c/strong\u003e field is basically the \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff549689(v=vs.85).aspx\"\u003eload order\u003c/a\u003e you want your driver to be loaded at, \u003cstrong\u003eRegistrationContext\u003c/strong\u003e is an arbitrary object you want to be passed down to your callbacks and finally the \u003cstrong\u003eOperationRegistration\u003c/strong\u003e field is a pointer to an array of OB_OPERATION_REGISTRATION structures which defines every detail of our callback. So let’s say we want to intercept every access to object handles of processes ( OpenProcess, etc ), we would declare:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eOB_OPERATION_REGISTRATION opRegistrations[\u003cspan class=\"number\"\u003e1\u003c/span\u003e] = { { \u003cspan class=\"number\"\u003e0\u003c/span\u003e } };\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eopRegistrations[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].ObjectType    = PsProcessType;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eopRegistrations[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].Operations    = OB_OPERATION_HANDLE_CREATE;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eopRegistrations[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].PreOperation  = YourPreCallback;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eopRegistrations[\u003cspan class=\"number\"\u003e0\u003c/span\u003e].PostOperation = YourPostCallback;\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003e\u003cem\u003eYourPreCallback\u003c/em\u003e and \u003cem\u003eYourPostCallback\u003c/em\u003e are obviously two routines that will be called before the process handle is actually opened ( the pre callback ) and after the operation is completed ( post callback ).\u003cbr/\u003eFor our purposes, the post callback can be declared just as:\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eVOID \u003cspan class=\"title\"\u003eYourPostCallback\u003c/span\u003e\u003cspan class=\"params\"\u003e( PVOID RegistrationContext, POB_POST_OPERATION_INFORMATION OperationInformation )\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tUNREFERENCED_PARAMETER(RegistrationContext);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tUNREFERENCED_PARAMETER(OperationInformation);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWhile the pre callback will do all the dirty work for us ( we want to block an unauthorized access to our processes before they’re actually performed, right? )\u003c/p\u003e\n\u003cfigure class=\"highlight c\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e54\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003eOB_PREOP_CALLBACK_STATUS \u003cspan class=\"title\"\u003eYourPreCallback\u003c/span\u003e\u003cspan class=\"params\"\u003e( PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION OperationInformation )\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tPEPROCESS OpenedProcess = (PEPROCESS)OperationInformation-\u0026gt;Object,\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\t  CurrentProcess = PsGetCurrentProcess();\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tULONG     ulProcessId = PsGetProcessId(OpenedProcess);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\tUNREFERENCED_PARAMETER(RegistrationContext);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Allow operations from the process itself\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( CurrentProcess == OpenedProcess )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e done;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Allow operations from within the kernel\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( OperationInformation-\u0026gt;KernelHandle == \u003cspan class=\"number\"\u003e1\u003c/span\u003e )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e done;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t * PUT YOUR PROTECTED PROCESS ID HERE\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e\t */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( ulProcessId != \u003cspan class=\"number\"\u003e1234\u003c/span\u003e )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e done;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"comment\"\u003e// Remove access bits from open access mask.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( OperationInformation-\u0026gt;Operation == OB_OPERATION_HANDLE_CREATE )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( ( OperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.OriginalDesiredAccess \u0026amp; PROCESS_TERMINATE ) == PROCESS_TERMINATE )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tDbgPrintEx( DPFLTR_IHVDRIVER_ID, DPFLTR_WARNING_LEVEL, \u003cspan class=\"string\"\u003e\u0026#34;Requested protected process termination.\\n\u0026#34;\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tOperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.DesiredAccess \u0026amp;= ~PROCESS_TERMINATE;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( ( OperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.OriginalDesiredAccess \u0026amp; PROCESS_VM_OPERATION ) == PROCESS_VM_OPERATION )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tOperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.DesiredAccess \u0026amp;= ~PROCESS_VM_OPERATION;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( ( OperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.OriginalDesiredAccess \u0026amp; ~PROCESS_VM_READ ) == PROCESS_VM_READ )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tOperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.DesiredAccess \u0026amp;= ~PROCESS_VM_READ;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( ( OperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.OriginalDesiredAccess \u0026amp; PROCESS_VM_WRITE ) == PROCESS_VM_WRITE )\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tDbgPrintEx( DPFLTR_IHVDRIVER_ID, DPFLTR_WARNING_LEVEL, \u003cspan class=\"string\"\u003e\u0026#34;Requested protected process virtual memory write access ( INJECTION! ).\\n\u0026#34;\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t\tOperationInformation-\u0026gt;Parameters-\u0026gt;CreateHandleInformation.DesiredAccess \u0026amp;= ~PROCESS_VM_WRITE;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t}\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003edone:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\t\u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e OB_PREOP_SUCCESS;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWhat this callback is doing, is preventing process with PID 1234 from being accessed with \u003cstrong\u003ePROCESS_TERMINATE\u003c/strong\u003e, \u003cstrong\u003ePROCESS_VM_OPERATION\u003c/strong\u003e, \u003cstrong\u003ePROCESS_VM_READ\u003c/strong\u003e or \u003cstrong\u003ePROCESS_VM_WRITE\u003c/strong\u003e privileges, so any malicious software that will try to terminate it or to call API such as (Write|Read)ProcessMemory will inevitably fail with the good old 0x00000005 error ( ACCESS_DENIED ).\u003c/p\u003e\n\u003cp\u003eWhen your driver unloads, don’t forget to call \u003cstrong\u003eObUnRegisterCallbacks\u003c/strong\u003e on the RegistrationHandle you’ve previously saved on a global object to correctly inform the kernel that you are not going to intercept those operations anymore.\u003c/p\u003e\n\u003cp\u003eWell, easy peasy, this is how AV and security softwares are being protected nowdays on 64bit systems from malicious termination, code injection, credential theft from memory (well you are just an idiot if you keep sensible data as clear text in memory -.-) and any kind of manipulation which could lead to the system damages.\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2014-02-05T21:08:04Z",
  "Author": "Simone Margaritelli"
}