{
  "Source": "www.evilsocket.net",
  "Title": "Introducing Bettercap 2.4.0: CAN-Bus Hacking, WiFi Bruteforcing and Builtin Web UI",
  "Link": "https://www.evilsocket.net/2024/09/13/Introducing-bettercap-2-4-0-CAN-bus-hacking-WiFi-bruteforcing-and-builtin-web-UI/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n      \u003cp\u003eI’m happy to announce, after quite some time, the new bettercap 2.4.0 major release. Other than including a plethora of long due fixes (additionally to what the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/releases/tag/v2.33.0\"\u003erecent 2.33.0 already fixed\u003c/a\u003e), it also packs a few new functionalities that extend its reach to car and industrial control system hacking. It’ll possibly take me some time to update the documentation on \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://bettercap.org/\"\u003ethe official website\u003c/a\u003e so I’m here today to write a bit about the new features. Also remember that you can use the \u003ccode\u003ehelp\u003c/code\u003e, \u003ccode\u003ehelp ui\u003c/code\u003e, \u003ccode\u003ehelp can\u003c/code\u003e and \u003ccode\u003ehelp wifi\u003c/code\u003e commands to check all the new options and added functionalities.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\n\u003ch2 id=\"Car-and-ICS-hacking-with-the-new-CAN-module\"\u003e\u003ca href=\"#Car-and-ICS-hacking-with-the-new-CAN-module\" class=\"headerlink\" title=\"Car and ICS hacking with the new CAN module\"\u003e\u003c/a\u003eCar and ICS hacking with the new CAN module\u003c/h2\u003e\u003cp\u003eOne of the protocols that always fascinated me but that I never really approached other than attending conference talks about it is CAN-bus. There are \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.reddit.com/r/CarHacking/comments/ltbrzk/can_bus_and_car_hacking_getting_started_resources/\"\u003eplenty of resources\u003c/a\u003e to get you started with it so I’m not going too much into the details of it or the related attacks. The bottom line is that CAN-bus is a protocol used inside cars and some ICS that some components use to communicate diagnostics to the rest of the system. Everything is broadcasted, most of it is in the clear, there’re a multitude of attacks that can be performed, it’s a mess.\u003c/p\u003e\n\u003cp\u003eFrom a security researcher perspective however, other than the very basic ones inside the \u003ccode\u003ecan-tools\u003c/code\u003e package, there’s not a single decent tool oriented to security. Most people end up writing their own python code that only works for that specific scenario or only showcases a specific attack.\u003c/p\u003e\n\u003cp\u003eSo the new CAN module is an attempt to create a framework for this research that we can all easily access and use. Specifically, the new module can interact with any CAN-bus hardware that supports \u003ccode\u003esocketcan\u003c/code\u003e (if there’s also interest in CAN-bus over serial let me know and I’ll do my best to integrate it) and allows to:\u003c/p\u003e\n\u003ch3 id=\"Read-write-and-fuzz-raw-frames\"\u003e\u003ca href=\"#Read-write-and-fuzz-raw-frames\" class=\"headerlink\" title=\"Read, write and fuzz raw frames\"\u003e\u003c/a\u003eRead, write and fuzz raw frames\u003c/h3\u003e\u003cp\u003eThe very basic of CAN-bus functionalities. Set your device and enable the module to start reading raw frames:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eset can.device /dev/can0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecan.recon on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eYou can also load and \u003cstrong\u003ereplay\u003c/strong\u003e a dump previously captured with candump:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eset can.dump obd2-candump-2023-11-22_031813.log\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecan.recon on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eInject raw frames as \u003ccode\u003eid#hex-data\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecan.inject 0#aabbccddee\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eOr generate random ones for fuzzing with \u003ccode\u003ecan.fuzz id size\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecan.fuzz ff 8\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eAnd show a list of the detected ECUs:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecan.show\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Load-your-own-DBC-files-decode-traffic-and-fuzz-with-them\"\u003e\u003ca href=\"#Load-your-own-DBC-files-decode-traffic-and-fuzz-with-them\" class=\"headerlink\" title=\"Load your own DBC files, decode traffic and fuzz with them\"\u003e\u003c/a\u003eLoad your own DBC files, decode traffic and fuzz with them\u003c/h3\u003e\u003cp\u003eYou can also use CAN-bus database files that describe a specific protocol, in which case bettercap will use it to automatically parse every frame on the bus (\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.csselectronics.com/pages/obd2-dbc-file\"\u003ecss-electronics\u003c/a\u003e and \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/commaai/opendbc\"\u003ecomma.ai\u003c/a\u003e have some very good ones):\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eset can.device /dev/can0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecan.dbc.load css-electronics/obd2-pack-v5/obd2-dbc/CSS-Electronics-11-bit-OBD2-v2.2.dbc\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecan.recon on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eWhen running with a DBC, you’ll also be able to use use it for fuzzing. For instance, to generate a specific message given its id, with randomized content:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecan.fuzz 12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eTo instead pick a random message from a specific ECU and generate its contents randomly:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ecan.fuzz ECU_name\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"Decode-OBD2-PIDs-with-builtin-decoder\"\u003e\u003ca href=\"#Decode-OBD2-PIDs-with-builtin-decoder\" class=\"headerlink\" title=\"Decode OBD2 PIDs with builtin decoder\"\u003e\u003c/a\u003eDecode OBD2 PIDs with builtin decoder\u003c/h3\u003e\u003cp\u003eAlternatively to using a DBC, if you work with OBD2 standard PIDs, you can just enable the builtin PID parser:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eset can.device /dev/can0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eset can.parse.obd2 true\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ecan.recon on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eFor the first iteration of the CAN module this is all. I’m sure that many new features will be added in the future and many integrations with the builting scripting engine (the module can \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.bettercap.org/usage/scripting/\"\u003ealready be scripted\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eNow to the WiFi :D\u003c/p\u003e\n\u003ch2 id=\"Wireless-low-hanging-fruits-with-the-new-WiFi-bruteforcer\"\u003e\u003ca href=\"#Wireless-low-hanging-fruits-with-the-new-WiFi-bruteforcer\" class=\"headerlink\" title=\"Wireless low-hanging fruits with the new WiFi bruteforcer\"\u003e\u003c/a\u003eWireless low-hanging fruits with the new WiFi bruteforcer\u003c/h2\u003e\u003cp\u003eA while back a user created a github issue with a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/issues/1075\"\u003every smart feature request\u003c/a\u003e: since many routers and printers have very simple wifi passwords, it is reasonable to expect that a wordlist based attack might be more successful at times than capturing and cracking the handshake.\u003c/p\u003e\n\u003cp\u003eSo now we have \u003ccode\u003ewifi.bruteforce\u003c/code\u003e, that works wonderfully on both macOS and Linux:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eset wifi.interface en0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# one or comma separated list\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eset wifi.bruteforce.target TargetRouter\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# uncomment to attempt a password for each access point before moving to the next one\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# set wifi.bruteforce.wide true\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# set the wordlist to use\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eset wifi.bruteforce.wordlist /path/to/your/wordlist.txt\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e# stop at the first successful login\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003eset wifi.bruteforce.stop_at_first true\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003ewifi.bruteforce on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"Builtin-Web-UI\"\u003e\u003ca href=\"#Builtin-Web-UI\" class=\"headerlink\" title=\"Builtin Web UI\"\u003e\u003c/a\u003eBuiltin Web UI\u003c/h2\u003e\u003cp\u003eDue to a series of issues with how Kali linux packaged bettercap’s webui, many users had a lot of troubles making it work correctly. Now the web ui is not something you have to download separately anymore, but it’s integrated as a module and all you have to do is:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003eui on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\u003cp\u003eObviously the CAN module is already integrated with it. I hope this makes things easier :D\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/ecus.png\" alt=\"ECU panel\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2024/pids.png\" alt=\"PIDs\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"A-final-note-about-BLE-and-precompiled-binaries\"\u003e\u003ca href=\"#A-final-note-about-BLE-and-precompiled-binaries\" class=\"headerlink\" title=\"A final note about BLE and precompiled binaries\"\u003e\u003c/a\u003eA final note about BLE and precompiled binaries\u003c/h2\u003e\u003cp\u003eI’m also \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/issues/1116\"\u003erewriting the BLE module\u003c/a\u003e, but this will take some more time as I’m trying to make it work in a stable way for every supported operating system, which is everything but simple :D \u003c/p\u003e\n\u003cp\u003ePrecompiled binaries will soon be uploaded to the github repo, meanwhile you can use the docker image or compile from source (compilation with \u003ccode\u003emake\u003c/code\u003e has been fixed too).\u003c/p\u003e\n\u003cp\u003eStay tuned and as usual \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/bettercap/bettercap/releases/tag/v2.4.0\"\u003eenjoy\u003c/a\u003e!\u003c/p\u003e\n\n    \u003c/div\u003e",
  "Date": "2024-09-13T10:46:25Z",
  "Author": "Simone Margaritelli"
}