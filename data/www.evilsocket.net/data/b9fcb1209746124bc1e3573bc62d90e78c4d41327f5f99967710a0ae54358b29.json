{
  "Source": "www.evilsocket.net",
  "Title": "Dynamically Inject a Shared Library Into a Running Process on Android/ARM",
  "Link": "https://www.evilsocket.net/2015/05/01/Dynamically-inject-a-shared-library-into-a-running-process-on-Android-ARM/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eIf you’re familiar with Windows runtime code injection you probably know the great API \u003cstrong\u003eCreateRemoteThread\u003c/strong\u003e which lets us force an arbitrary running process to call \u003cstrong\u003eLoadLibrary\u003c/strong\u003e and load a DLL into its address space, this technique called \u003cstrong\u003eDLL Injection\u003c/strong\u003e is often used to perform user space API hooking, you can find a good post about it on \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.tuxmealux.net/2015/03/10/code-injection/\"\u003eGianluca Braga’s blog\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUnfortunately there’s no CreateRemoteThread equivalent on Linux system, therefore we can only rely on \u003cstrong\u003eptrace\u003c/strong\u003e and our brain :D\u003cbr/\u003eIn this post I’ll explain how to perform DLL Injection on Linux systems and more specifically on \u003cstrong\u003eAndroid/ARM\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePart 2 of this post on \u003ca href=\"https://www.evilsocket.net/2015/05/04/android-native-api-hooking-with-library-injecto/\"\u003e“Android Native API Hooking with Library Injection and ELF Introspection.”\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch1 id=\"TL-DR\"\u003e\u003ca href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"\u003e\u003c/a\u003eTL;DR\u003c/h1\u003e\u003cp\u003eFuck you, really! \u0026lt;3\u003cbr/\u003eI’m awesome, you’re a lazy scumbag … and the full source code can be found on the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/arminject\"\u003earminject\u003c/a\u003e repository on my github page.\u003c/p\u003e\n\u003ch1 id=\"Defeating-ASLR\"\u003e\u003ca href=\"#Defeating-ASLR\" class=\"headerlink\" title=\"Defeating ASLR\"\u003e\u003c/a\u003eDefeating ASLR\u003c/h1\u003e\u003cp\u003eOnce we’re attached to the process with ptrace, the first task we have is to obtain the address of the functions we’re gonna need for our purpose, namely:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edlopen for obvious reasons.\u003c/li\u003e\n\u003cli\u003edlsym if we want to remotely call a function of the injected library.\u003c/li\u003e\n\u003cli\u003ecalloc/malloc to allocate strings in the target process memory.\u003c/li\u003e\n\u003cli\u003efree to release that memory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe problem here is to somehow defeat/bypass the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\"\u003eaddress space layout randomization\u003c/a\u003e, we know the address of these symbols in our own process but we surely don’t in the target process since ASLR screwed these up.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/05/116572.jpg\" alt=\"impossibru!\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhat we \u003cstrong\u003edo know\u003c/strong\u003e is that a given symbol will have the same exact offset from the library base address and we definitely can determine the library base address in the target process analyzing its \u003cstrong\u003e/proc/-pid-/maps\u003c/strong\u003e file:\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * This method will open /proc/\u0026lt;pid\u0026gt;/maps and search for the specified\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * library base address.\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e \u003cspan class=\"title\"\u003efindLibrary\u003c/span\u003e\u003cspan class=\"params\"\u003e( \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e *library, \u003cspan class=\"keyword\"\u003epid_t\u003c/span\u003e pid = \u003cspan class=\"number\"\u003e-1\u003c/span\u003e )\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e filename[\u003cspan class=\"number\"\u003e0xFF\u003c/span\u003e] = {\u003cspan class=\"number\"\u003e0\u003c/span\u003e},\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e         buffer[\u003cspan class=\"number\"\u003e1024\u003c/span\u003e] = {\u003cspan class=\"number\"\u003e0\u003c/span\u003e};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    FILE *fp = \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e address = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003esprintf\u003c/span\u003e( filename, \u003cspan class=\"string\"\u003e\u0026#34;/proc/%d/maps\u0026#34;\u003c/span\u003e, pid == \u003cspan class=\"number\"\u003e-1\u003c/span\u003e ? _pid : pid );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    fp = fopen( filename, \u003cspan class=\"string\"\u003e\u0026#34;rt\u0026#34;\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( fp == \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e ){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        perror(\u003cspan class=\"string\"\u003e\u0026#34;fopen\u0026#34;\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e done;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ewhile\u003c/span\u003e( fgets( buffer, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(buffer), fp ) ) {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( \u003cspan class=\"built_in\"\u003estrstr\u003c/span\u003e( buffer, library ) ){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            address = (\u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e)strtoul( buffer, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e, \u003cspan class=\"number\"\u003e16\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            \u003cspan class=\"keyword\"\u003egoto\u003c/span\u003e done;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    done:\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e(fp){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        fclose(fp);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e address;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eOnce we know the base address of a given library both in our process and in the target process, what we can do to resolve the remote function address is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eREMOTE_ADDRESS = LOCAL_ADDRESS + ( REMOTE_BASE - LOCAL_BASE )\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBasically we take the local address of the function and apply to it the difference between the local library base address and the remote one, which is exactly what the following code does:\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * Compute the delta of the local and the remote modules and apply it to\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e * the local address of the symbol ... BOOM, remote symbol address!\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e *\u003cspan class=\"title\"\u003efindFunction\u003c/span\u003e\u003cspan class=\"params\"\u003e( \u003cspan class=\"keyword\"\u003econst\u003c/span\u003e \u003cspan class=\"keyword\"\u003echar\u003c/span\u003e* library, \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e* local_addr )\u003c/span\u003e\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e local_handle, remote_handle;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    local_handle = findLibrary( library, getpid() );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    remote_handle = findLibrary( library );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e (\u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e *)( (\u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e)local_addr + (\u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e)remote_handle - (\u003cspan class=\"keyword\"\u003euintptr_t\u003c/span\u003e)local_handle );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eFinally we’ve bypassed the ASLR problem :)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/05/FYG.png\" alt=\"fuck yeah\"/\u003e\u003c/p\u003e\n\u003ch1 id=\"ARM-Calling-Convention\"\u003e\u003ca href=\"#ARM-Calling-Convention\" class=\"headerlink\" title=\"ARM Calling Convention\"\u003e\u003c/a\u003eARM Calling Convention\u003c/h1\u003e\u003cp\u003eNext, we need to figure out how to force the process to execute a call to an address controlled by us ( one of the previously mentioned functions ), in order to do that we need to understand the ARM calling convention which, fortunately, is quite easy.\u003c/p\u003e\n\u003cp\u003eThe first four arguments for a function are put inside registers from \u003cstrong\u003eR0\u003c/strong\u003e to \u003cstrong\u003eR3\u003c/strong\u003e while any other argument ( if any of course ) are pushed onto the stack.\u003cbr/\u003eEventually the function address is put on the \u003cstrong\u003ePC\u003c/strong\u003e ( R15 ) register and the return address into the \u003cstrong\u003eLR\u003c/strong\u003e ( R14 ) register, this will cause the effective call to that function. The return value will be found inside the \u003cstrong\u003eRO\u003c/strong\u003e register.\u003cbr/\u003eYou can find a pretty good document about this, the “Practical ARM exploitation manual”, \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.xipiter.com/uploads/2/4/4/8/24485815/arm_lab_manual_sample.pdf\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhat I did is the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003cstrong\u003ePTRACE_GETREGS\u003c/strong\u003e to save the current process registers.\u003c/li\u003e\n\u003cli\u003ePut the arguments of the function into R0-R3 and on the stack if needed.\u003c/li\u003e\n\u003cli\u003eSet \u003cstrong\u003eLR\u003c/strong\u003e to 0, so we can catch the SIGSEGV after the call.\u003c/li\u003e\n\u003cli\u003eSet \u003cstrong\u003ePC\u003c/strong\u003e to the function address.\u003c/li\u003e\n\u003cli\u003eMask \u003cstrong\u003ePC\u003c/strong\u003e and \u003cstrong\u003eCPSR\u003c/strong\u003e accordingly to the mode ( thumb or arm ).\u003c/li\u003e\n\u003cli\u003eUpdate the registers with \u003cstrong\u003ePTRACE_SETREGS\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eTrigger the call with \u003cstrong\u003ePTRACE_CONT\u003c/strong\u003e and wait for the process to SIGSEGV while returing to address 0 in LR.\u003c/li\u003e\n\u003cli\u003eGet the function return value from \u003cstrong\u003eRO\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eRestore the original registers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe code, which uses variadic macros for convenience, is the following:\u003c/p\u003e\n\u003cfigure class=\"highlight cpp\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e10\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e11\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e12\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e13\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e14\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e15\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e16\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e17\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e18\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e19\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e20\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e21\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e22\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e23\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e24\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e25\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e26\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e27\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e28\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e29\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e30\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e31\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e32\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e33\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e34\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e35\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e36\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e37\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e38\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e39\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e40\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e41\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e42\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e43\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e44\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e45\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e46\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e47\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e48\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e49\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e50\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e51\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e52\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e53\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"function\"\u003e\u003cspan class=\"keyword\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"title\"\u003ecall\u003c/span\u003e\u003cspan class=\"params\"\u003e( \u003cspan class=\"keyword\"\u003evoid\u003c/span\u003e *function, \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e nargs, ... )\u003c/span\u003e \u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"class\"\u003e\u003cspan class=\"keyword\"\u003estruct\u003c/span\u003e \u003cspan class=\"title\"\u003ept_regs\u003c/span\u003e \u003cspan class=\"title\"\u003eregs\u003c/span\u003e =\u003c/span\u003e {{\u003cspan class=\"number\"\u003e0\u003c/span\u003e}}, rbackup = {{\u003cspan class=\"number\"\u003e0\u003c/span\u003e}};\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// get registers and backup them\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    trace( PTRACE_GETREGS, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u0026amp;regs );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"built_in\"\u003ememcpy\u003c/span\u003e( \u0026amp;rbackup, \u0026amp;regs, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(struct pt_regs) );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    va_list vl;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    va_start(vl,nargs);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003efor\u003c/span\u003e( i = \u003cspan class=\"number\"\u003e0\u003c/span\u003e; i \u0026lt; nargs; ++i ){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"keyword\"\u003elong\u003c/span\u003e arg = va_arg( vl, \u003cspan class=\"keyword\"\u003elong\u003c/span\u003e );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// fill R0-R3 with the first 4 arguments\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e( i \u0026lt; \u003cspan class=\"number\"\u003e4\u003c/span\u003e ){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            regs.uregs[i] = arg;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e// push remaining params onto stack\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e {\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            regs.ARM_sp -= \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elong\u003c/span\u003e) ;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e            write( (\u003cspan class=\"keyword\"\u003esize_t\u003c/span\u003e)regs.ARM_sp, (\u003cspan class=\"keyword\"\u003euint8_t\u003c/span\u003e *)\u0026amp;arg, \u003cspan class=\"keyword\"\u003esizeof\u003c/span\u003e(\u003cspan class=\"keyword\"\u003elong\u003c/span\u003e) );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    va_end(vl);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    regs.ARM_lr = \u003cspan class=\"number\"\u003e0\u003c/span\u003e;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    regs.ARM_pc = (\u003cspan class=\"keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"keyword\"\u003eint\u003c/span\u003e)function;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// setup the current processor status register\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eif\u003c/span\u003e ( regs.ARM_pc \u0026amp; \u003cspan class=\"number\"\u003e1\u003c/span\u003e ){\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* thumb */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        regs.ARM_pc   \u0026amp;= (~\u003cspan class=\"number\"\u003e1u\u003c/span\u003e);\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        regs.ARM_cpsr |= CPSR_T_MASK;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003eelse\u003c/span\u003e{\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        \u003cspan class=\"comment\"\u003e/* arm */\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e        regs.ARM_cpsr \u0026amp;= ~CPSR_T_MASK;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    }\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// do the call\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    trace( PTRACE_SETREGS, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u0026amp;regs );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    trace( PTRACE_CONT );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    waitpid( _pid, \u003cspan class=\"literal\"\u003eNULL\u003c/span\u003e, WUNTRACED );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// get registers again, R0 holds the return value\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    trace( PTRACE_GETREGS, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u0026amp;regs );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"comment\"\u003e// restore original registers state\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    trace( PTRACE_SETREGS, \u003cspan class=\"number\"\u003e0\u003c/span\u003e, \u0026amp;rbackup );\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e    \u003cspan class=\"keyword\"\u003ereturn\u003c/span\u003e regs.ARM_r0;\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e}\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch1 id=\"Putting-all-together\"\u003e\u003ca href=\"#Putting-all-together\" class=\"headerlink\" title=\"Putting all together\"\u003e\u003c/a\u003ePutting all together\u003c/h1\u003e\u003cp\u003eThe next steps are basically putting all of this together:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGet the needed functions addresses.\u003c/li\u003e\n\u003cli\u003eUse the remote malloc/calloc to copy the library name string into the remote process.\u003c/li\u003e\n\u003cli\u003eUse the remote dlopen with the previously allocated buffer to load the library.\u003c/li\u003e\n\u003cli\u003eUse the remote dlsym if needed.\u003c/li\u003e\n\u003cli\u003eProfit.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce you have your library injected, you can do quite a few things, like dynamic API hooking/tracing/patching ( libandroid_runtime.so anyone ? :D ), process introspection, runtime memory patching and generally speaking …\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2015/05/download.jpg\" alt=\"insanity wolf\"/\u003e\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2015-05-01T18:56:31Z",
  "Author": "Simone Margaritelli"
}