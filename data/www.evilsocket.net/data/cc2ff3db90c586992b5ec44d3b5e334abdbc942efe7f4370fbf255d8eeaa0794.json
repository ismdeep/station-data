{
  "Source": "www.evilsocket.net",
  "Title": "This Is Not a Post About BLE, Introducing BLEAH",
  "Link": "https://www.evilsocket.net/2017/09/23/This-is-not-a-post-about-BLE-introducing-BLEAH/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eThis is not a post about BLE, but rather on how to hack it … well, to be honest, BLE devices are usually very easy to hack, so it’s just a quick intro to it, I’ll also take the chance to open source one of the last tools I’ve made and that I kept private so far. I moved the features I thought to be dangerous ( aka: auto fuzzing all the BLE things and bring chaos ) in a private fork which will stay private, however it’s not that complicated to chain \u003ccode\u003ebleah\u003c/code\u003e with other tools ( cough … radamsa … cough ) and have \u003cstrong\u003elots of fun\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/09/dr_evil.jpg\" alt=\"dr.evil\"/\u003e\u003c/p\u003e\n\u003cp\u003eOh and this is also because \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/Viss\"\u003esomeone\u003c/a\u003e asked me some intro on BLE, so yeah, his fault.\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003cp\u003eFor some more detailed (and serious) information, there’s \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://en.wikipedia.org/wiki/Bluetooth_Low_Energy\"\u003ea lot of stuff\u003c/a\u003e online already, you know how to Google.\u003c/p\u003e\n\u003ch3 id=\"Bluetooth-Low-Energy-the-honest-version\"\u003e\u003ca href=\"#Bluetooth-Low-Energy-the-honest-version\" class=\"headerlink\" title=\"Bluetooth Low Energy - the honest version.\"\u003e\u003c/a\u003eBluetooth Low Energy - the honest version.\u003c/h3\u003e\u003cp\u003eBLE is a cheap and very insecure version of Bluetooth, in which you have no channel hopping (all hail easy sniffing and MITM!) and no builtin protocol security (fuzzing like there’s no tomorrow dudez!), it is mostly used for two reasons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDecent batteries are expensive.\u003c/li\u003e\n\u003cli\u003eDecent batteries are big.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you wanna build and sell some IoT-smart-whatever crap, and you wanna do it quickly because your competitor is about to go on the market with the same shit, you take Bluetooth, you strip it from the very few close-to-decent things it has and voilà, you have its retarded little brother which won’t bother the battery too much but will be functional enough to burp random data at you from time to time … easy win, litte R\u0026amp;D efforts, very small production costs.\u003c/p\u003e\n\u003cp\u003e\u0026lt;/rant\u0026gt;\u003c/p\u003e\n\u003cp\u003eBeing the retarded little brother of BT, it doesn’t really take too long to explain how to hack it.\u003c/p\u003e\n\u003cp\u003eImagine you have a BT device, which 99% of the times it’s discoverable, on the same frequency and channel, always, that literally burps at you its information ( what it’s called \u003cstrong\u003eadvertisement data\u003c/strong\u003e, \u003ca href=\"/2015/01/29/nike-fuelband-se-ble-protocol-reversed/\"\u003esometimes they also broadcast security tokens\u003c/a\u003e, etc … to anyone … ), you connect to it (because 99.999999% of the times it allows anyone to connect) and the device tells you \u003cstrong\u003eeverything\u003c/strong\u003e you need to know in order to control it, read data from it and write data to it … how kind, isn’t it? :D\u003c/p\u003e\n\u003cp\u003eYou are provided with read and write primitives / channels ( called \u003ccode\u003echaracteristics\u003c/code\u003e ), each one with a specific identifier, some of them \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.bluetooth.com/specifications/gatt/services\"\u003eare standard\u003c/a\u003e and some of them are usually vendor specific, therefore you won’t be able to easily map something like \u003ccode\u003ed0611e78-bbb4-4591-a5f8-487910ae4366\u003c/code\u003e to something like \u003ccode\u003eApple Continuity Service\u003c/code\u003e (more on how to solve this problem later).\u003c/p\u003e\n\u003cp\u003eRather than this, all the implementation details ( aka: the communication protocol ) are up to the vendor … you see now?\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/09/chaos.jpg\" alt=\"pure chaos\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Methodologies-and-required-hardware\"\u003e\u003ca href=\"#Methodologies-and-required-hardware\" class=\"headerlink\" title=\"Methodologies and required hardware (?)\"\u003e\u003c/a\u003eMethodologies and required hardware (?)\u003c/h3\u003e\u003cp\u003eAs I was saying yesterday night to Viss, you can approach BLE hacking in two ways.\u003c/p\u003e\n\u003cp\u003eYou can go passive, therefore you’ll need a \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/greatscottgadgets/ubertooth\"\u003eUbertooth One\u003c/a\u003e to sniff raw BLE packets out of the air and Wireshark to visualize them. In this case you’ll end up performing signal analysis / RE on the raw bitstream you’ve managed to capture, simply try some replay attack or blackbox fuzzing ( aka: throw mutated stuff back at the mother fucker ). As for this first methodology, \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://blog.attify.com/2017/01/17/exploiting-iot-enabled-ble-smart-bulb-security/\"\u003ethere’re already\u003c/a\u003e plenty of good examples online, it’s just like sniffing TCP, but with BLE.\u003c/p\u003e\n\u003cp\u003eOr you can go active (the way I like it :D), and that doesn’t require any specific hardware other than a bluetooth dongle which supports BLE, most likely your Linux laptop already does, and exploit those little bastards for what they are, just \u003cstrong\u003eretarded bluetooth devices\u003c/strong\u003e. Find the mobile app (they always have one, they’re \u003cstrong\u003esmart\u003c/strong\u003e toys after all), reverse it to find the right characteristics to use for your goal and then just blow the thing up. My point is that you’ll end up reversing “something” anyway, so let it be cheap and effective, right?\u003c/p\u003e\n\u003cp\u003eLet’s start by verifying if your hardware supports BLE by performing a scan ( I’m assuming you are using GNU/Linux, bluez and all the default BT stack utilities are installed, etc ):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo hcitool lescan\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf it worked, you’ll see an output like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eLE Scan ...\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF STORZ\u0026amp;BICKEL\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF (unknown)\nAA:BB:CC:DD:EE:FF [LG] webOS TV OLED55E6V\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat means you’re ready to go. Go find the Android application of the device and reverse it, \u003ca href=\"/2017/04/27/Android-Applications-Reversing-101/\"\u003ehere’s my 1 on 1 on Android reversing\u003c/a\u003e and \u003ca href=\"/tags/bluetooth/\"\u003ehere\u003c/a\u003e you will find a few examples of how to use this approach.\u003c/p\u003e\n\u003cp\u003eI could now explain you how to read advertisement data using \u003ccode\u003ehcitool\u003c/code\u003e, how to connect to it using \u003ccode\u003egatttool\u003c/code\u003e and how to enumerate services, characteristics and handles, how to mask flags and translate their bits to permissions, etc … but I made it a little bit easier for you (and for me), so let’s skip this boring stuff ok? :P\u003c/p\u003e\n\u003ch3 id=\"Introducing-BLEAH\"\u003e\u003ca href=\"#Introducing-BLEAH\" class=\"headerlink\" title=\"Introducing BLEAH\"\u003e\u003c/a\u003eIntroducing BLEAH\u003c/h3\u003e\u003cp\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/bleah\"\u003eBLEAH\u003c/a\u003e is a \u003cstrong\u003edead easy to use tool\u003c/strong\u003e, because retarded devices should be \u003cstrong\u003edead easy to hack\u003c/strong\u003e, based on \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/IanHarvey\"\u003eIah Harvey\u003c/a\u003e‘s \u003ccode\u003ebluepy\u003c/code\u003e python package.\u003c/p\u003e\n\u003cp\u003eBut let me give you some examples and swag.\u003c/p\u003e\n\u003cp\u003eScanning for BTLE devices continuously:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo bleah -t0\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/09/ss1.png\" alt=\"scan\"/\u003e\u003c/p\u003e\n\u003cp\u003eConnect to a specific device and enumerate all the things:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo bleah -b \u0026#34;aa:bb:cc:dd:ee:ff\u0026#34; -e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/09/ss2.png\" alt=\"enum\"/\u003e\u003c/p\u003e\n\u003cp\u003eWrite the bytes \u003ccode\u003ehello world\u003c/code\u003e to a specific characteristic of the device:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo bleah -b \u0026#34;aa:bb:cc:dd:ee:ff\u0026#34; -u \u0026#34;c7d25540-31dd-11e2-81c1-0800200c9a66\u0026#34; -d \u0026#34;hello world\u0026#34;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"/images/2017/09/ss3.png\" alt=\"write\"/\u003e\u003c/p\u003e\n\u003cp\u003eHint: there’s a \u003ccode\u003e--data-file\u003c/code\u003e argument which is perfect in combination with things like \u003ccode\u003eradamsa\u003c/code\u003e … just saying.\u003c/p\u003e\n\u003cp\u003eAs usual the public fork of this tool is on \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/evilsocket/bleah\"\u003egithub\u003c/a\u003e, now you know and have everything you need to bring chaos in the BLE world, enjoy :D\u003c/p\u003e\n\u003cdiv style=\"position:relative;height:0;padding-bottom:75.0%\"\u003e\u003ciframe src=\"https://www.youtube.com/embed/qbmWs6Jf5dc?ecver=2\" width=\"480\" height=\"360\" frameborder=\"0\" style=\"position:absolute;width:100%;height:100%;left:0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/div\u003e",
  "Date": "2017-09-23T15:06:56Z",
  "Author": "Simone Margaritelli"
}