{
  "Source": "www.evilsocket.net",
  "Title": "Pwning WPA/WPA2 Networks With Bettercap and the PMKID Client-Less Attack",
  "Link": "https://www.evilsocket.net/2019/02/13/Pwning-WiFi-networks-with-bettercap-and-the-PMKID-client-less-attack/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eIn this post, I’ll talk about the new WiFi related features that have been recently implemented into bettercap, starting from how the EAPOL \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://wlan1nde.wordpress.com/2014/10/27/4-way-handshake/\"\u003e4-way handshake\u003c/a\u003e capturing has been automated, to a whole new type of attack that will allow us to recover WPA PSK passwords of an AP without clients.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://raw.githubusercontent.com/bettercap/media/master/logo.png\" alt=\"logo\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe’ll start with the assumption that your WiFi card supports monitor mode and packet injection (I use an \u003ccode\u003eAWUS1900\u003c/code\u003e with \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/aircrack-ng/rtl8812au\"\u003ethis driver\u003c/a\u003e), that you have a working \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://hashcat.net/\"\u003ehashcat\u003c/a\u003e (v4.2.0 or higher is required) installation (ideally with GPU support enabled) for cracking and that you know how to use it properly either for dictionary or brute-force attacks, as no tips on how to tune the masks and/or generate proper dictionaries will be given :)\u003c/p\u003e\n\u003cdiv class=\"note\"\u003eOn newer macOS laptops, the builtin WiFi interface `en0` already supports monitor mode, meaning you won\u0026#39;t need a Linux VM in order to run this :)\u003c/div\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch3 id=\"Deauth-and-4-way-Handshake-Capture\"\u003e\u003ca href=\"#Deauth-and-4-way-Handshake-Capture\" class=\"headerlink\" title=\"Deauth and 4-way Handshake Capture\"\u003e\u003c/a\u003eDeauth and 4-way Handshake Capture\u003c/h3\u003e\u003cp\u003eFirst thing first, let’s try a classical deauthentication attack: we’ll start bettercap, enable the \u003ccode\u003ewifi.recon\u003c/code\u003e module with channel hopping and configure the \u003ccode\u003eticker\u003c/code\u003e module to refresh our screen every second with an updated view of the nearby WiFi networks (replace \u003ccode\u003ewlan0\u003c/code\u003e with the interface you want to use):\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e3\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e4\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e5\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e6\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e7\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e8\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e9\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003esudo bettercap -iface wlan0\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# this will set the interface in monitor mode and start channel hopping on all supported frequencies\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; wifi.recon on \u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# we want our APs sorted by number of clients for this attack, the default sorting would be `rssi asc`\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e wifi.show.sort clients desc\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# every second, clear our view and present an updated list of nearby WiFi networks\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; \u003cspan class=\"built_in\"\u003eset\u003c/span\u003e ticker.commands \u003cspan class=\"string\"\u003e\u0026#39;clear; wifi.show\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; ticker on\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eYou should now see something like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2019/02/wifi_recon.png\" alt=\"recon\"/\u003e\u003c/p\u003e\n\u003cp\u003eAssuming \u003ccode\u003eCasa-2.4\u003c/code\u003e is the network we want to attack, let’s stick to channel \u003ccode\u003e1\u003c/code\u003e in order to avoid jumping to other frequencies and potentially losing useful packets:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt; wifi.recon.channel 1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWhat we want to do now is forcing one or more of the client stations (we can see 5 of them for this AP) to disconnect by forging fake deauthentication packets. Once they will reconnect, hopefully, bettercap will capture the needed EAPOL frames of the handshake that we’ll later pass to hashcat for cracking (replace \u003ccode\u003ee0:xx:xx:xx:xx:xx\u003c/code\u003e with the BSSID of your target AP):\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u0026gt; wifi.deauth e0:xx:xx:xx:xx:xx\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eIf everything worked as expected and you’re close enough to the AP and the clients, bettercap will start informing you that complete handshakes have been captured (you can customize the pcap file output by changing the \u003ccode\u003ewifi.handshakes.file\u003c/code\u003e parameter):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2019/02/deauth.png\" alt=\"deauth\"/\u003e\u003c/p\u003e\n\u003cdiv class=\"note\"\u003eNot only bettercap will check for complete handshakes and dump them only when all the required packets have been captured, but it will also append to the file one beacon packet for each AP, in order to allow any tool reading the pcap to detect both the BSSIDs and the ESSIDs.\n\u003c/div\u003e\n\u003cp\u003eThe downsides of this attack are obvious: no clients = no party, moreover, given we need to wait for at least one of them to reconnect, it can potentially take some time.\u003c/p\u003e\n\u003ch3 id=\"4-way-Handshake-Cracking\"\u003e\u003ca href=\"#4-way-Handshake-Cracking\" class=\"headerlink\" title=\"4-way Handshake Cracking\"\u003e\u003c/a\u003e4-way Handshake Cracking\u003c/h3\u003e\u003cp\u003eOnce we have succesfully captured the EAPOL frames required by hashcat in order to crack the PSK, we’ll need to convert the \u003ccode\u003epcap\u003c/code\u003e output file to the \u003ccode\u003ehccapx\u003c/code\u003e format that hashcat can read. In order to do so, we can either use \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://hashcat.net/cap2hccapx/\"\u003ethis online service\u003c/a\u003e, or install the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/hashcat/hashcat-utils\"\u003ehashcat-utils\u003c/a\u003e ourselves and convert the file locally:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e/path/to/cap2hccapx /root/bettercap-wifi-handshakes.pcap bettercap-wifi-handshakes.hccapx\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eYou can now proceed to crack the handshake(s) either by dictionary attack or brute-force. For instance, to try all 8-digits combinations:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e/path/to/hashcat -m2500 -a3 -w3 bettercap-wifi-handshakes.hccapx \u003cspan class=\"string\"\u003e\u0026#39;?d?d?d?d?d?d?d?d\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAnd this is it, the evergreen deauthentication attack in all its simplicity, performed with just one tool … let’s get to the fun part now :)\u003c/p\u003e\n\u003ch3 id=\"Client-less-PMKID-Attack\"\u003e\u003ca href=\"#Client-less-PMKID-Attack\" class=\"headerlink\" title=\"Client-less PMKID Attack\"\u003e\u003c/a\u003eClient-less PMKID Attack\u003c/h3\u003e\u003cp\u003eIn 2018 hashcat authors \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://hashcat.net/forum/thread-7717.html\"\u003edisclosed\u003c/a\u003e a new type of attack which not only relies \u003cstrong\u003eon one single packet\u003c/strong\u003e, but it doesn’t require any clients to be connected to our target AP or, if clients are connected, it doesn’t require us to send deauth frames to them, there’s no interaction between the attacker and client stations, but just between the attacker and the AP, interaction which, if the router is vulnerable, is almost immediate!\u003c/p\u003e\n\u003cp\u003eIt turns out that \u003cstrong\u003ea lot\u003c/strong\u003e of modern routers append an optional field at the end of the first EAPOL frame sent by the AP itself when someone is associating, the so called \u003ccode\u003eRobust Security Network\u003c/code\u003e, which includes something called \u003ccode\u003ePMKID\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2019/02/pmkid.png\" alt=\"pmkid\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs explained in the original post, the PMKID is derived by using data which is known to us:\u003c/p\u003e\n\u003cfigure class=\"highlight plain\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003ePMKID = HMAC-SHA1-128(PMK, \u0026#34;PMK Name\u0026#34; | MAC_AP | MAC_STA)\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eSince the “PMK Name” string is constant, we know both the BSSID of the AP and the station and the \u003ccode\u003ePMK\u003c/code\u003e is the same one obtained from a full 4-way handshake, this is all hashcat needs in order to crack the PSK and recover the passphrase! Here’s where the new \u003ccode\u003ewifi.assoc\u003c/code\u003e command comes into play: instead of deauthenticating existing clients as shown in the previous attack and waiting for the full handshake to be captured, we’ll simply start to associate with the target AP and listen for an EAPOL frame containing the RSN PMKID data. \u003c/p\u003e\n\u003cp\u003eSay we’re still listening on channel 1 (since we previously \u003ccode\u003ewifi.recon.channel 1\u003c/code\u003e), let’s send such association request to every AP and see who’ll respond with useful information:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e2\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"comment\"\u003e# wifi.assoc supports \u0026#39;all\u0026#39; (or `*`) or a specific BSSID, just like wifi.deauth\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003cspan class=\"line\"\u003e\u0026gt; wifi.assoc all\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eAll nearby vulnerable routers (and let me reiterate: \u003cstrong\u003ea lot\u003c/strong\u003e of them are vulnerable), will start sending you the PMKID, which bettercap will dump to the usual pcap file:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2019/02/wifi_assoc.jpg\" alt=\"assoc\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"PMKID-Cracking\"\u003e\u003ca href=\"#PMKID-Cracking\" class=\"headerlink\" title=\"PMKID Cracking\"\u003e\u003c/a\u003ePMKID Cracking\u003c/h3\u003e\u003cp\u003eWe’ll now need to convert the PMKID data in the pcap file we just captured to a hash format that hashcat can understand, for this we’ll use \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/ZerBea/hcxtools\"\u003ehcxpcaptool\u003c/a\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e/path/to/hcxpcaptool -z bettercap-wifi-handshakes.pmkid /root/bettercap-wifi-handshakes.pcap\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003cp\u003eWe can now proceed cracking the \u003ccode\u003ebettercap-wifi.handshake.pmkid\u003c/code\u003e file so generated by using algorithm number \u003ccode\u003e16800\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"highlight sh\"\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e1\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"line\"\u003e/path/to/hashcat -m16800 -a3 -w3 bettercap-wifi-handshakes.pmkid \u003cspan class=\"string\"\u003e\u0026#39;?d?d?d?d?d?d?d?d\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003cbr/\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\u003ch3 id=\"Recap\"\u003e\u003ca href=\"#Recap\" class=\"headerlink\" title=\"Recap\"\u003e\u003c/a\u003eRecap\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003eGoodbye airmon, airodump, aireplay and whatnots: one tool to rule them all!\u003c/li\u003e\n\u003cli\u003eGoodbye Kali VMs on macOS: these modules work natively out of the box, with the default Apple hardware \u0026lt;3\u003c/li\u003e\n\u003cli\u003eFull 4-way handshakes are for n00bs: just one association request and most routers will send us enough key material.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEnjoy :)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2019/02/lulz.png\" alt=\"lulz\"/\u003e\u003c/p\u003e\n\u003c/div\u003e",
  "Date": "2019-02-13T15:53:31Z",
  "Author": "Simone Margaritelli"
}