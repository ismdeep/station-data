{
  "Source": "www.evilsocket.net",
  "Title": "How to Build Your Own Rogue GSM BTS for Fun and Profit",
  "Link": "https://www.evilsocket.net/2016/03/31/How-To-Build-Your-Own-Rogue-GSM-BTS-For-Fun-And-Profit/",
  "Content": "\u003cdiv class=\"content\" itemprop=\"articleBody\"\u003e\n\u003cp\u003eThe last week I’ve been visiting my friend and colleque \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://twitter.com/z4ziggy\"\u003eZiggy\u003c/a\u003e in Tel Aviv which gave me something I’ve been waiting for almost a year, a brand new \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.nuand.com/blog/product/bladerf-x40/\"\u003eBladeRF x40\u003c/a\u003e, a low-cost USB 3.0 Software Defined Radio working in full-duplex, meaning that it can transmit and receive at the same time ( while for instance the HackRF is only half-duplex ).\u003c/p\u003e\n\u003cp\u003eIn this blog post I’m going to explain how to create a portable GSM BTS which can be used either to create a private ( and vendor free! ) GSM network or for \u003cstrong\u003eGSM active tapping/interception/hijacking\u003c/strong\u003e … yes, with some (relatively) cheap electronic equipment you can basically build something very similar to what the governments are using from years to perform GSM interception.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eI’m not writing this post to help script kiddies breaking the law, my point is that GSM is broken by design and it’s about time vendors do something about it considering how much we’re paying for their services.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/03/bts.jpeg\" alt=\"my bts\"/\u003e\u003c/p\u003e\n\u003cspan id=\"more\"\u003e\u003c/span\u003e\n\u003ch3 id=\"Hardware-Requirements\"\u003e\u003ca href=\"#Hardware-Requirements\" class=\"headerlink\" title=\"Hardware Requirements\"\u003e\u003c/a\u003eHardware Requirements\u003c/h3\u003e\u003cp\u003eIn order to build your BTS you’ll need the following hardware:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.nuand.com/blog/product/bladerf-x40/\"\u003ebladeRF x40\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTwo \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.sparkfun.com/products/675\"\u003eQuad-band Cellular Duck Antennas SMA\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eA Raspberry Pi 3 ( model 2 and below are too slow ).\u003c/li\u003e\n\u003cli\u003eAn USB battery pack ( I’m using a 26800mAh Anker Astro E7 ).\u003c/li\u003e\n\u003cli\u003eA microsd for the RPI \u0026gt;= 8GB.\u003c/li\u003e\n\u003cli\u003eSome patience and time … :)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"Software\"\u003e\u003ca href=\"#Software\" class=\"headerlink\" title=\"Software\"\u003e\u003c/a\u003eSoftware\u003c/h3\u003e\u003cp\u003eLet’s start by installing the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://www.raspberrypi.org/downloads/raspbian/\"\u003elatest Raspbian\u003c/a\u003e image to the micrsd card ( use the “lite” one, no need for UI ;) ), boot the RPI, configure either the WiFi or ethernet and so forth, at the end of this process you should be able to SSH into the RPI.\u003c/p\u003e\n\u003cp\u003eNext, install a few dependecies we’re gonna need soon:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo apt-get install git apache2 php5 bladerf libbladerf-dev libbladerf0 automake\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, you should already be able to interact with the BladeRF, plug it into one of the USB ports of the RPI, \u003cstrong\u003edmesg\u003c/strong\u003e should be telling you something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[ 2332.071675] usb 1-1.3: New USB device found, idVendor=1d50, idProduct=6066\n[ 2332.071694] usb 1-1.3: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[ 2332.071707] usb 1-1.3: Product: bladeRF\n[ 2332.071720] usb 1-1.3: Manufacturer: Nuand\n[ 2332.071732] usb 1-1.3: SerialNumber: b4ef330e19b718f752759b4c14020742\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eStart the \u003cstrong\u003ebladeRF-cli\u003c/strong\u003e utility and issue the \u003cstrong\u003eversion\u003c/strong\u003e command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epi@raspberrypi:~ $ sudo bladeRF-cli -i\nbladeRF\u0026gt; version\n\n  bladeRF-cli version:        0.11.1-git\n  libbladeRF version:         0.16.2-git\n\n  Firmware version:           1.6.1-git-053fb13-buildomatic\n  FPGA version:               0.1.2\n\nbladeRF\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e Make sure you have these exact versions of the firmware and the FPGA, other versions might not work in our setup. \u003c/p\u003e\u003ccenter\u003e\u003cstrong\u003e\u003ca href=\"/images/bladerf_firmware_and_fpga.tar.gz\"\u003eDownload the correct firmware and FPGA image.\u003c/a\u003e\u003c/strong\u003e\u003c/center\u003e\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eNow we’re going to install Yate and YateBTS, two open source softwares that will make us able to create the BTS itself.\u003c/p\u003e\n\u003cp\u003eSince I spent \u003cstrong\u003ea lot\u003c/strong\u003e of time trying to figure out which specific version of each was compatible with the bladeRF, I’ve created a github repository with correct versions of both, so in your RPI home folder just do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/evilsocket/evilbts.git\ncd evilbts\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet’s start building both of them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd yate\n./autogen.sh\n./configure --prefix=/usr/local\nmake -j4\nsudo make install\nsudo ldconfig\ncd ..\n\ncd yatebts\n./autogen.sh\n./configure --prefix=/usr/local\nmake -j4\nsudo make install\nsudo ldconfig\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will take a few minutes, but eventually you’ll have everything installed in your system.\u003c/p\u003e\n\u003cp\u003eNext, we’ll symlink the NIB web ui into our apache www folder:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecd /var/www/html/\nsudo ln -s /usr/local/share/yate/nib_web nib\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd grant write permission to the configuration files:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo chmod -R a+w /usr/local/etc/yate\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can now access your BTS web ui from your browser:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttp://ip-of-your-rpi/nib\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTime for some configuration now!\u003c/p\u003e\n\u003ch3 id=\"Configuration\"\u003e\u003ca href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"\u003e\u003c/a\u003eConfiguration\u003c/h3\u003e\u003cp\u003eOpen the \u003cstrong\u003e/usr/local/etc/yate/ybts.conf\u003c/strong\u003e file either with nano or vi and update the following values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRadio.Band=900\nRadio.C0=1000\nIdentity.MCC=YOUR_COUNTRY_MCC\nIdentity.MNC=YOUR_OPERATOR_MNC\nIdentity.ShortName=MyEvilBTS\nRadio.PowerManager.MaxAttenDB=35\nRadio.PowerManager.MinAttenDB=35\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can find valid MCC and MNC values \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://www.mcc-mnc.com/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNow, edit the \u003cstrong\u003e/usr/local/etc/yate/subscribers.conf\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecountry_code=YOUR_CONTRY_CODE\nregexp=.*\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eWARNING\u003c/strong\u003e Using the \u003cstrong\u003e.*\u003c/strong\u003e regular expression will make \u003cstrong\u003eEVERY\u003c/strong\u003e GSM phone in your area connect to your BTS.\u003c/p\u003e\n\u003cp\u003eIn your NIB web ui you’ll see something like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/03/nibui-1.png\" alt=\"NIB\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Enable-GSM-Tapping\"\u003e\u003ca href=\"#Enable-GSM-Tapping\" class=\"headerlink\" title=\"Enable GSM-Tapping\"\u003e\u003c/a\u003eEnable GSM-Tapping\u003c/h3\u003e\u003cp\u003eIn the “Tapping” panel, you can enable it for both GSM and GPRS, this will basically “bounce” every GSM packet to the loopback interface, since we haven’t configure \u003cstrong\u003eany encryption\u003c/strong\u003e, you’ll be able to see all the GSM traffic by simply tcpdump-ing your loopback interface :D\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/03/nibui-2.png\" alt=\"tapping\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"Start-It\"\u003e\u003ca href=\"#Start-It\" class=\"headerlink\" title=\"Start It!\"\u003e\u003c/a\u003eStart It!\u003c/h3\u003e\u003cp\u003eFinally, you can start your new BTS by executing the command ( with the BladeRF plugged in! ) :\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo yate -s\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf everything was configured correctly, you’ll see a bunch of messages and the line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eStarting MBTS...\nYate engine is initialized and starting up on raspberrypi\nRTNETLINK answers: File exists\nMBTS ready\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, the middle LED for your bladeRF should start blinking.\u003c/p\u003e\n\u003ch3 id=\"Test-It\"\u003e\u003ca href=\"#Test-It\" class=\"headerlink\" title=\"Test It!\"\u003e\u003c/a\u003eTest It!\u003c/h3\u003e\u003cp\u003eNow, phones will start to automatically connect, this will happen because of the GSM implementation itself:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou can set whatever MCC, MNC and LAC you like, effectly \u003cstrong\u003espoofing any legit GSM BTS\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eEach phone will search for BTS of its operator and select the one with the strongest signal … guess which one will be the strongest? Yep … ours :D\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere’s a picture taken from my Samsung Galaxy S6 ( using the \u003ca target=\"_blank\" rel=\"noopener\" href=\"https://play.google.com/store/apps/details?id=com.wilysis.cellinfolite\"\u003eNetwork Cell Info Lite\u003c/a\u003e app ) which automatically connected to my BTS after 3 minutes:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2016/03/gsm-1.jpeg\" alt=\"MyEvilBTS\"/\u003e\u003c/p\u003e\n\u003cp\u003eFrom now on, you can configure the BTS to do whatever you want … either act as a “proxy” to a legit SMC ( with a GSM/3g USB dongle ) and \u003cstrong\u003esniff the unencrypted GSM traffic\u003c/strong\u003e of each phone, or to create a private GSM network where users can communicate for free using SIP, refer to the \u003ca target=\"_blank\" rel=\"noopener\" href=\"http://wiki.yatebts.com/index.php/Main_Page\"\u003eYateBTS Wiki\u003c/a\u003e for specific configurations.\u003c/p\u003e\n\u003cp\u003eOh and of course, if you plug the USB battery, the whole system becomes completely portable :)\u003c/p\u003e\n\u003ch3 id=\"References-and-Further-Readings\"\u003e\u003ca href=\"#References-and-Further-Readings\" class=\"headerlink\" title=\"References and Further Readings\"\u003e\u003c/a\u003eReferences and Further Readings\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://github.com/Nuand/bladeRF/wiki/Setting-up-Yate-and-YateBTS-with-the-bladeRF\"\u003ehttps://github.com/Nuand/bladeRF/wiki/Setting-up-Yate-and-YateBTS-with-the-bladeRF\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://z4ziggy.wordpress.com/2015/05/17/sniffing-gsm-traffic-with-hackrf/\"\u003ehttps://z4ziggy.wordpress.com/2015/05/17/sniffing-gsm-traffic-with-hackrf/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"https://z4ziggy.wordpress.com/2015/05/10/ziggys-embedded-bts/\"\u003ehttps://z4ziggy.wordpress.com/2015/05/10/ziggys-embedded-bts/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"noopener\" href=\"http://wiki.yatebts.com/index.php/Main_Page\"\u003ehttp://wiki.yatebts.com/index.php/Main_Page\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e",
  "Date": "2016-03-31T17:31:40Z",
  "Author": "Simone Margaritelli"
}